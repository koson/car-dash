
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029540  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b64  08029710  08029710  00039710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003f1a  0802e274  0802e274  0003e274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  08032190  08032190  00042190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000240  08065688  08065688  00075688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080658c8  080658c8  00080140  2**0
                  CONTENTS
  7 .ARM          00000008  080658c8  080658c8  000758c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080658d0  080658d0  00080140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080658d0  080658d0  000758d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080658e4  080658e4  000758e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000140  20000000  080658ec  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000cc80  20000140  08065a2c  00080140  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000cdc0  08065a2c  0008cdc0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006fb52  00000000  00000000  00080170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001233d  00000000  00000000  000efcc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004ec0  00000000  00000000  00102000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00004830  00000000  00000000  00106ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d9e4  00000000  00000000  0010b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005badc  00000000  00000000  001490d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00137794  00000000  00000000  001a4bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000d2  00000000  00000000  002dc344  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00015590  00000000  00000000  002dc418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080296f8 	.word	0x080296f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	080296f8 	.word	0x080296f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b96e 	b.w	8000acc <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9d08      	ldr	r5, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	468c      	mov	ip, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	f040 8083 	bne.w	800091e <__udivmoddi4+0x116>
 8000818:	428a      	cmp	r2, r1
 800081a:	4617      	mov	r7, r2
 800081c:	d947      	bls.n	80008ae <__udivmoddi4+0xa6>
 800081e:	fab2 f282 	clz	r2, r2
 8000822:	b142      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000824:	f1c2 0020 	rsb	r0, r2, #32
 8000828:	fa24 f000 	lsr.w	r0, r4, r0
 800082c:	4091      	lsls	r1, r2
 800082e:	4097      	lsls	r7, r2
 8000830:	ea40 0c01 	orr.w	ip, r0, r1
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbbc f6f8 	udiv	r6, ip, r8
 8000840:	fa1f fe87 	uxth.w	lr, r7
 8000844:	fb08 c116 	mls	r1, r8, r6, ip
 8000848:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084c:	fb06 f10e 	mul.w	r1, r6, lr
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	f106 30ff 	add.w	r0, r6, #4294967295
 800085a:	f080 8119 	bcs.w	8000a90 <__udivmoddi4+0x288>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8116 	bls.w	8000a90 <__udivmoddi4+0x288>
 8000864:	3e02      	subs	r6, #2
 8000866:	443b      	add	r3, r7
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fe0e 	mul.w	lr, r0, lr
 800087c:	45a6      	cmp	lr, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	193c      	adds	r4, r7, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8105 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800088a:	45a6      	cmp	lr, r4
 800088c:	f240 8102 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000890:	3802      	subs	r0, #2
 8000892:	443c      	add	r4, r7
 8000894:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000898:	eba4 040e 	sub.w	r4, r4, lr
 800089c:	2600      	movs	r6, #0
 800089e:	b11d      	cbz	r5, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c5 4300 	strd	r4, r3, [r5]
 80008a8:	4631      	mov	r1, r6
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	b902      	cbnz	r2, 80008b2 <__udivmoddi4+0xaa>
 80008b0:	deff      	udf	#255	; 0xff
 80008b2:	fab2 f282 	clz	r2, r2
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	d150      	bne.n	800095c <__udivmoddi4+0x154>
 80008ba:	1bcb      	subs	r3, r1, r7
 80008bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008c0:	fa1f f887 	uxth.w	r8, r7
 80008c4:	2601      	movs	r6, #1
 80008c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80008ca:	0c21      	lsrs	r1, r4, #16
 80008cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb08 f30c 	mul.w	r3, r8, ip
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0xe4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0xe2>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	f200 80e9 	bhi.w	8000abc <__udivmoddi4+0x2b4>
 80008ea:	4684      	mov	ip, r0
 80008ec:	1ac9      	subs	r1, r1, r3
 80008ee:	b2a3      	uxth	r3, r4
 80008f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008fc:	fb08 f800 	mul.w	r8, r8, r0
 8000900:	45a0      	cmp	r8, r4
 8000902:	d907      	bls.n	8000914 <__udivmoddi4+0x10c>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f100 33ff 	add.w	r3, r0, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x10a>
 800090c:	45a0      	cmp	r8, r4
 800090e:	f200 80d9 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 8000912:	4618      	mov	r0, r3
 8000914:	eba4 0408 	sub.w	r4, r4, r8
 8000918:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800091c:	e7bf      	b.n	800089e <__udivmoddi4+0x96>
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0x12e>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80b1 	beq.w	8000a8a <__udivmoddi4+0x282>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x1cc>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0x140>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80b8 	bhi.w	8000ab8 <__udivmoddi4+0x2b0>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0103 	sbc.w	r1, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	468c      	mov	ip, r1
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0a8      	beq.n	80008a8 <__udivmoddi4+0xa0>
 8000956:	e9c5 4c00 	strd	r4, ip, [r5]
 800095a:	e7a5      	b.n	80008a8 <__udivmoddi4+0xa0>
 800095c:	f1c2 0320 	rsb	r3, r2, #32
 8000960:	fa20 f603 	lsr.w	r6, r0, r3
 8000964:	4097      	lsls	r7, r2
 8000966:	fa01 f002 	lsl.w	r0, r1, r2
 800096a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096e:	40d9      	lsrs	r1, r3
 8000970:	4330      	orrs	r0, r6
 8000972:	0c03      	lsrs	r3, r0, #16
 8000974:	fbb1 f6fe 	udiv	r6, r1, lr
 8000978:	fa1f f887 	uxth.w	r8, r7
 800097c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000980:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000984:	fb06 f108 	mul.w	r1, r6, r8
 8000988:	4299      	cmp	r1, r3
 800098a:	fa04 f402 	lsl.w	r4, r4, r2
 800098e:	d909      	bls.n	80009a4 <__udivmoddi4+0x19c>
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	f106 3cff 	add.w	ip, r6, #4294967295
 8000996:	f080 808d 	bcs.w	8000ab4 <__udivmoddi4+0x2ac>
 800099a:	4299      	cmp	r1, r3
 800099c:	f240 808a 	bls.w	8000ab4 <__udivmoddi4+0x2ac>
 80009a0:	3e02      	subs	r6, #2
 80009a2:	443b      	add	r3, r7
 80009a4:	1a5b      	subs	r3, r3, r1
 80009a6:	b281      	uxth	r1, r0
 80009a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80009ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80009b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b4:	fb00 f308 	mul.w	r3, r0, r8
 80009b8:	428b      	cmp	r3, r1
 80009ba:	d907      	bls.n	80009cc <__udivmoddi4+0x1c4>
 80009bc:	1879      	adds	r1, r7, r1
 80009be:	f100 3cff 	add.w	ip, r0, #4294967295
 80009c2:	d273      	bcs.n	8000aac <__udivmoddi4+0x2a4>
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d971      	bls.n	8000aac <__udivmoddi4+0x2a4>
 80009c8:	3802      	subs	r0, #2
 80009ca:	4439      	add	r1, r7
 80009cc:	1acb      	subs	r3, r1, r3
 80009ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009d2:	e778      	b.n	80008c6 <__udivmoddi4+0xbe>
 80009d4:	f1c6 0c20 	rsb	ip, r6, #32
 80009d8:	fa03 f406 	lsl.w	r4, r3, r6
 80009dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80009e0:	431c      	orrs	r4, r3
 80009e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80009f2:	431f      	orrs	r7, r3
 80009f4:	0c3b      	lsrs	r3, r7, #16
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fa1f f884 	uxth.w	r8, r4
 80009fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a06:	fb09 fa08 	mul.w	sl, r9, r8
 8000a0a:	458a      	cmp	sl, r1
 8000a0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000a10:	fa00 f306 	lsl.w	r3, r0, r6
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x220>
 8000a16:	1861      	adds	r1, r4, r1
 8000a18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a1c:	d248      	bcs.n	8000ab0 <__udivmoddi4+0x2a8>
 8000a1e:	458a      	cmp	sl, r1
 8000a20:	d946      	bls.n	8000ab0 <__udivmoddi4+0x2a8>
 8000a22:	f1a9 0902 	sub.w	r9, r9, #2
 8000a26:	4421      	add	r1, r4
 8000a28:	eba1 010a 	sub.w	r1, r1, sl
 8000a2c:	b2bf      	uxth	r7, r7
 8000a2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a3a:	fb00 f808 	mul.w	r8, r0, r8
 8000a3e:	45b8      	cmp	r8, r7
 8000a40:	d907      	bls.n	8000a52 <__udivmoddi4+0x24a>
 8000a42:	19e7      	adds	r7, r4, r7
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a48:	d22e      	bcs.n	8000aa8 <__udivmoddi4+0x2a0>
 8000a4a:	45b8      	cmp	r8, r7
 8000a4c:	d92c      	bls.n	8000aa8 <__udivmoddi4+0x2a0>
 8000a4e:	3802      	subs	r0, #2
 8000a50:	4427      	add	r7, r4
 8000a52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a56:	eba7 0708 	sub.w	r7, r7, r8
 8000a5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a5e:	454f      	cmp	r7, r9
 8000a60:	46c6      	mov	lr, r8
 8000a62:	4649      	mov	r1, r9
 8000a64:	d31a      	bcc.n	8000a9c <__udivmoddi4+0x294>
 8000a66:	d017      	beq.n	8000a98 <__udivmoddi4+0x290>
 8000a68:	b15d      	cbz	r5, 8000a82 <__udivmoddi4+0x27a>
 8000a6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a76:	40f2      	lsrs	r2, r6
 8000a78:	ea4c 0202 	orr.w	r2, ip, r2
 8000a7c:	40f7      	lsrs	r7, r6
 8000a7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a82:	2600      	movs	r6, #0
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	462e      	mov	r6, r5
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e70b      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a90:	4606      	mov	r6, r0
 8000a92:	e6e9      	b.n	8000868 <__udivmoddi4+0x60>
 8000a94:	4618      	mov	r0, r3
 8000a96:	e6fd      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a98:	4543      	cmp	r3, r8
 8000a9a:	d2e5      	bcs.n	8000a68 <__udivmoddi4+0x260>
 8000a9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7df      	b.n	8000a68 <__udivmoddi4+0x260>
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e7d2      	b.n	8000a52 <__udivmoddi4+0x24a>
 8000aac:	4660      	mov	r0, ip
 8000aae:	e78d      	b.n	80009cc <__udivmoddi4+0x1c4>
 8000ab0:	4681      	mov	r9, r0
 8000ab2:	e7b9      	b.n	8000a28 <__udivmoddi4+0x220>
 8000ab4:	4666      	mov	r6, ip
 8000ab6:	e775      	b.n	80009a4 <__udivmoddi4+0x19c>
 8000ab8:	4630      	mov	r0, r6
 8000aba:	e74a      	b.n	8000952 <__udivmoddi4+0x14a>
 8000abc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac0:	4439      	add	r1, r7
 8000ac2:	e713      	b.n	80008ec <__udivmoddi4+0xe4>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	e724      	b.n	8000914 <__udivmoddi4+0x10c>
 8000aca:	bf00      	nop

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <vApplicationGetIdleTaskMemory+0x30>)
 8000b1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000015c 	.word	0x2000015c
 8000b34:	200001b4 	.word	0x200001b4

08000b38 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b09a      	sub	sp, #104	; 0x68
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {6500, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b40:	4b83      	ldr	r3, [pc, #524]	; (8000d50 <SecondTask+0x218>)
 8000b42:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b46:	461d      	mov	r5, r3
 8000b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b54:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b58:	4b7e      	ldr	r3, [pc, #504]	; (8000d54 <SecondTask+0x21c>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b60:	2300      	movs	r3, #0
 8000b62:	2200      	movs	r2, #0
 8000b64:	f00c fc6a 	bl	800d43c <xQueueGenericSend>
	osDelay(150);
 8000b68:	2096      	movs	r0, #150	; 0x96
 8000b6a:	f00c f975 	bl	800ce58 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b6e:	4b7a      	ldr	r3, [pc, #488]	; (8000d58 <SecondTask+0x220>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 8127 	beq.w	8000dc6 <SecondTask+0x28e>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b78:	4b78      	ldr	r3, [pc, #480]	; (8000d5c <SecondTask+0x224>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b80:	da03      	bge.n	8000b8a <SecondTask+0x52>
 8000b82:	4b76      	ldr	r3, [pc, #472]	; (8000d5c <SecondTask+0x224>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3364      	adds	r3, #100	; 0x64
 8000b88:	e000      	b.n	8000b8c <SecondTask+0x54>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	4a73      	ldr	r2, [pc, #460]	; (8000d5c <SecondTask+0x224>)
 8000b8e:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b90:	4b73      	ldr	r3, [pc, #460]	; (8000d60 <SecondTask+0x228>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2bf9      	cmp	r3, #249	; 0xf9
 8000b96:	dc03      	bgt.n	8000ba0 <SecondTask+0x68>
 8000b98:	4b71      	ldr	r3, [pc, #452]	; (8000d60 <SecondTask+0x228>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	e001      	b.n	8000ba4 <SecondTask+0x6c>
 8000ba0:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000ba4:	4a6e      	ldr	r2, [pc, #440]	; (8000d60 <SecondTask+0x228>)
 8000ba6:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000ba8:	4b6e      	ldr	r3, [pc, #440]	; (8000d64 <SecondTask+0x22c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb0:	da03      	bge.n	8000bba <SecondTask+0x82>
 8000bb2:	4b6c      	ldr	r3, [pc, #432]	; (8000d64 <SecondTask+0x22c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3306      	adds	r3, #6
 8000bb8:	e000      	b.n	8000bbc <SecondTask+0x84>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	4a69      	ldr	r2, [pc, #420]	; (8000d64 <SecondTask+0x22c>)
 8000bbe:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc0:	4b69      	ldr	r3, [pc, #420]	; (8000d68 <SecondTask+0x230>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fcd7 	bl	8000578 <__aeabi_f2d>
 8000bca:	a359      	add	r3, pc, #356	; (adr r3, 8000d30 <SecondTask+0x1f8>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fd9e 	bl	8000710 <__aeabi_dcmpge>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SecondTask+0xa6>
 8000bda:	4b64      	ldr	r3, [pc, #400]	; (8000d6c <SecondTask+0x234>)
 8000bdc:	e010      	b.n	8000c00 <SecondTask+0xc8>
 8000bde:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <SecondTask+0x230>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fcc8 	bl	8000578 <__aeabi_f2d>
 8000be8:	a353      	add	r3, pc, #332	; (adr r3, 8000d38 <SecondTask+0x200>)
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	f7ff fb65 	bl	80002bc <__adddf3>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff fd9d 	bl	8000738 <__aeabi_d2f>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a59      	ldr	r2, [pc, #356]	; (8000d68 <SecondTask+0x230>)
 8000c02:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c04:	4b5a      	ldr	r3, [pc, #360]	; (8000d70 <SecondTask+0x238>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fcb5 	bl	8000578 <__aeabi_f2d>
 8000c0e:	a348      	add	r3, pc, #288	; (adr r3, 8000d30 <SecondTask+0x1f8>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff fd7c 	bl	8000710 <__aeabi_dcmpge>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SecondTask+0xea>
 8000c1e:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <SecondTask+0x23c>)
 8000c20:	e010      	b.n	8000c44 <SecondTask+0x10c>
 8000c22:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <SecondTask+0x238>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fca6 	bl	8000578 <__aeabi_f2d>
 8000c2c:	a344      	add	r3, pc, #272	; (adr r3, 8000d40 <SecondTask+0x208>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	f7ff fb43 	bl	80002bc <__adddf3>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff fd7b 	bl	8000738 <__aeabi_d2f>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a4a      	ldr	r2, [pc, #296]	; (8000d70 <SecondTask+0x238>)
 8000c46:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c48:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <SecondTask+0x240>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b9f      	cmp	r3, #159	; 0x9f
 8000c4e:	dc03      	bgt.n	8000c58 <SecondTask+0x120>
 8000c50:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <SecondTask+0x240>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3302      	adds	r3, #2
 8000c56:	e000      	b.n	8000c5a <SecondTask+0x122>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <SecondTask+0x240>)
 8000c5c:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c5e:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <SecondTask+0x244>)
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c70:	db01      	blt.n	8000c76 <SecondTask+0x13e>
 8000c72:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <SecondTask+0x248>)
 8000c74:	e010      	b.n	8000c98 <SecondTask+0x160>
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <SecondTask+0x244>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fc7c 	bl	8000578 <__aeabi_f2d>
 8000c80:	a331      	add	r3, pc, #196	; (adr r3, 8000d48 <SecondTask+0x210>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff fb19 	bl	80002bc <__adddf3>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f7ff fd51 	bl	8000738 <__aeabi_d2f>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a38      	ldr	r2, [pc, #224]	; (8000d7c <SecondTask+0x244>)
 8000c9a:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000c9c:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <SecondTask+0x24c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b63      	cmp	r3, #99	; 0x63
 8000ca2:	dc03      	bgt.n	8000cac <SecondTask+0x174>
 8000ca4:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <SecondTask+0x250>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	e000      	b.n	8000cae <SecondTask+0x176>
 8000cac:	2301      	movs	r3, #1
 8000cae:	4a35      	ldr	r2, [pc, #212]	; (8000d84 <SecondTask+0x24c>)
 8000cb0:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <SecondTask+0x250>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b63      	cmp	r3, #99	; 0x63
 8000cb8:	dc03      	bgt.n	8000cc2 <SecondTask+0x18a>
 8000cba:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <SecondTask+0x250>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	e000      	b.n	8000cc4 <SecondTask+0x18c>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <SecondTask+0x250>)
 8000cc6:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cc8:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <SecondTask+0x254>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd0:	da03      	bge.n	8000cda <SecondTask+0x1a2>
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <SecondTask+0x254>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	330c      	adds	r3, #12
 8000cd8:	e001      	b.n	8000cde <SecondTask+0x1a6>
 8000cda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cde:	4a2b      	ldr	r2, [pc, #172]	; (8000d8c <SecondTask+0x254>)
 8000ce0:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <SecondTask+0x254>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cea:	da03      	bge.n	8000cf4 <SecondTask+0x1bc>
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <SecondTask+0x258>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	e001      	b.n	8000cf8 <SecondTask+0x1c0>
 8000cf4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cf8:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <SecondTask+0x258>)
 8000cfa:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <SecondTask+0x25c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b63      	cmp	r3, #99	; 0x63
 8000d02:	dc03      	bgt.n	8000d0c <SecondTask+0x1d4>
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <SecondTask+0x25c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	e000      	b.n	8000d0e <SecondTask+0x1d6>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <SecondTask+0x25c>)
 8000d10:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <SecondTask+0x260>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d24:	db3c      	blt.n	8000da0 <SecondTask+0x268>
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <SecondTask+0x264>)
 8000d28:	e04b      	b.n	8000dc2 <SecondTask+0x28a>
 8000d2a:	bf00      	nop
 8000d2c:	f3af 8000 	nop.w
 8000d30:	66666666 	.word	0x66666666
 8000d34:	3ff66666 	.word	0x3ff66666
 8000d38:	9999999a 	.word	0x9999999a
 8000d3c:	3fa99999 	.word	0x3fa99999
 8000d40:	eb851eb8 	.word	0xeb851eb8
 8000d44:	3faeb851 	.word	0x3faeb851
 8000d48:	9999999a 	.word	0x9999999a
 8000d4c:	3fb99999 	.word	0x3fb99999
 8000d50:	08029724 	.word	0x08029724
 8000d54:	200087a8 	.word	0x200087a8
 8000d58:	0802a3e8 	.word	0x0802a3e8
 8000d5c:	20000004 	.word	0x20000004
 8000d60:	2000000c 	.word	0x2000000c
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000010 	.word	0x20000010
 8000d6c:	3f19999a 	.word	0x3f19999a
 8000d70:	20000014 	.word	0x20000014
 8000d74:	3f266666 	.word	0x3f266666
 8000d78:	200003c4 	.word	0x200003c4
 8000d7c:	200003c8 	.word	0x200003c8
 8000d80:	3dcccccd 	.word	0x3dcccccd
 8000d84:	200003cc 	.word	0x200003cc
 8000d88:	200003d0 	.word	0x200003d0
 8000d8c:	200003d4 	.word	0x200003d4
 8000d90:	200003d8 	.word	0x200003d8
 8000d94:	200003dc 	.word	0x200003dc
 8000d98:	200003e0 	.word	0x200003e0
 8000d9c:	41200000 	.word	0x41200000
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SecondTask+0x300>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fbe7 	bl	8000578 <__aeabi_f2d>
 8000daa:	a321      	add	r3, pc, #132	; (adr r3, 8000e30 <SecondTask+0x2f8>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff fa84 	bl	80002bc <__adddf3>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fcbc 	bl	8000738 <__aeabi_d2f>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <SecondTask+0x300>)
 8000dc4:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v};
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <SecondTask+0x304>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <SecondTask+0x308>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <SecondTask+0x30c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <SecondTask+0x310>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <SecondTask+0x314>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <SecondTask+0x318>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	623b      	str	r3, [r7, #32]
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <SecondTask+0x31c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <SecondTask+0x320>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <SecondTask+0x324>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <SecondTask+0x328>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <SecondTask+0x32c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <SecondTask+0x330>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <SecondTask+0x300>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
	    xQueueSend(messageQ, &dispVals,0);
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <SecondTask+0x334>)
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f00c fb0c 	bl	800d43c <xQueueGenericSend>
		osDelay(50);
 8000e24:	2032      	movs	r0, #50	; 0x32
 8000e26:	f00c f817 	bl	800ce58 <osDelay>
	{
 8000e2a:	e6a0      	b.n	8000b6e <SecondTask+0x36>
 8000e2c:	f3af 8000 	nop.w
 8000e30:	33333333 	.word	0x33333333
 8000e34:	3fe33333 	.word	0x3fe33333
 8000e38:	200003e0 	.word	0x200003e0
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	2000000c 	.word	0x2000000c
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000010 	.word	0x20000010
 8000e4c:	20000014 	.word	0x20000014
 8000e50:	200003c4 	.word	0x200003c4
 8000e54:	200003c8 	.word	0x200003c8
 8000e58:	200003cc 	.word	0x200003cc
 8000e5c:	200003d0 	.word	0x200003d0
 8000e60:	200003d4 	.word	0x200003d4
 8000e64:	200003d8 	.word	0x200003d8
 8000e68:	200003dc 	.word	0x200003dc
 8000e6c:	200087a4 	.word	0x200087a4

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_DBGMCU_EnableDBGStandbyMode();
 8000e76:	f002 fd6f 	bl	8003958 <HAL_DBGMCU_EnableDBGStandbyMode>
	HAL_DBGMCU_EnableDBGStopMode();
 8000e7a:	f002 fd5d 	bl	8003938 <HAL_DBGMCU_EnableDBGStopMode>
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM6_STOP;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <main+0xd0>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <main+0xd0>)
 8000e84:	f043 0310 	orr.w	r3, r3, #16
 8000e88:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f002 fd04 	bl	8003896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f861 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e92:	f001 f9d7 	bl	8002244 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e96:	f000 f919 	bl	80010cc <MX_ADC3_Init>
  MX_CRC_Init();
 8000e9a:	f000 fb0f 	bl	80014bc <MX_CRC_Init>
  MX_DCMI_Init();
 8000e9e:	f000 fb2f 	bl	8001500 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000ea2:	f000 fb61 	bl	8001568 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000ea6:	f001 f921 	bl	80020ec <MX_FMC_Init>
  MX_LTDC_Init();
 8000eaa:	f000 fb8f 	bl	80015cc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000eae:	f000 fc0f 	bl	80016d0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000eb2:	f000 fc39 	bl	8001728 <MX_RTC_Init>
  MX_SAI2_Init();
 8000eb6:	f000 fcdf 	bl	8001878 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000eba:	f000 fd85 	bl	80019c8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000ebe:	f000 fda3 	bl	8001a08 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000ec2:	f000 fdd1 	bl	8001a68 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ec6:	f000 fe0d 	bl	8001ae4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eca:	f000 feb7 	bl	8001c3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ece:	f000 ff2b 	bl	8001d28 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ed2:	f000 ff9f 	bl	8001e14 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ed6:	f001 f813 	bl	8001f00 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000eda:	f001 f863 	bl	8001fa4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000ede:	f001 f8a5 	bl	800202c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ee2:	f001 f8d3 	bl	800208c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000ee6:	f00b fc73 	bl	800c7d0 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000eea:	f000 f941 	bl	8001170 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000eee:	f00f f95f 	bl	80101b0 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <main+0xd4>)
 8000ef4:	f107 041c 	add.w	r4, r7, #28
 8000ef8:	461d      	mov	r5, r3
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00b ff57 	bl	800cdc0 <osThreadCreate>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <main+0xd8>)
 8000f16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <main+0xdc>)
 8000f1a:	463c      	mov	r4, r7
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f00b ff46 	bl	800cdc0 <osThreadCreate>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <main+0xe0>)
 8000f38:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f3a:	f00b ff1e 	bl	800cd7a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <main+0xce>
 8000f40:	e0042000 	.word	0xe0042000
 8000f44:	0802974c 	.word	0x0802974c
 8000f48:	2000c234 	.word	0x2000c234
 8000f4c:	08029768 	.word	0x08029768
 8000f50:	2000c230 	.word	0x2000c230

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0b4      	sub	sp, #208	; 0xd0
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f5e:	2230      	movs	r2, #48	; 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f027 fbda 	bl	802871c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2284      	movs	r2, #132	; 0x84
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f027 fbcb 	bl	802871c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f86:	f005 feb3 	bl	8006cf0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <SystemClock_Config+0x16c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a4c      	ldr	r2, [pc, #304]	; (80010c0 <SystemClock_Config+0x16c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <SystemClock_Config+0x16c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <SystemClock_Config+0x170>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <SystemClock_Config+0x170>)
 8000fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <SystemClock_Config+0x170>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fba:	2309      	movs	r3, #9
 8000fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fdc:	2319      	movs	r3, #25
 8000fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fe2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ff0:	2309      	movs	r3, #9
 8000ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 ff9a 	bl	8006f34 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001006:	f001 fb51 	bl	80026ac <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800100a:	f005 fe81 	bl	8006d10 <HAL_PWREx_EnableOverDrive>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001014:	f001 fb4a 	bl	80026ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800102a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800102e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800103a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800103e:	2106      	movs	r1, #6
 8001040:	4618      	mov	r0, r3
 8001042:	f006 fa1b 	bl	800747c <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800104c:	f001 fb2e 	bl	80026ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <SystemClock_Config+0x174>)
 8001052:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001064:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001068:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800106a:	2305      	movs	r3, #5
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800106e:	2302      	movs	r3, #2
 8001070:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001072:	2303      	movs	r3, #3
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800107e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800108a:	2300      	movs	r3, #0
 800108c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800108e:	2300      	movs	r3, #0
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001092:	2300      	movs	r3, #0
 8001094:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001096:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800109a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 fbef 	bl	800788c <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80010b4:	f001 fafa 	bl	80026ac <Error_Handler>
  }
}
 80010b8:	bf00      	nop
 80010ba:	37d0      	adds	r7, #208	; 0xd0
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000
 80010c8:	01b00868 	.word	0x01b00868

080010cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC3_Init+0x98>)
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <MX_ADC3_Init+0x9c>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_ADC3_Init+0x98>)
 80010e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_ADC3_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_ADC3_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_ADC3_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC3_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_ADC3_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_ADC3_Init+0x98>)
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <MX_ADC3_Init+0xa0>)
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC3_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_ADC3_Init+0x98>)
 800111a:	2201      	movs	r2, #1
 800111c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_ADC3_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_ADC3_Init+0x98>)
 8001128:	2201      	movs	r2, #1
 800112a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_ADC3_Init+0x98>)
 800112e:	f002 fc23 	bl	8003978 <HAL_ADC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001138:	f001 fab8 	bl	80026ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800113c:	2304      	movs	r3, #4
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001140:	2301      	movs	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_ADC3_Init+0x98>)
 800114e:	f002 fc57 	bl	8003a00 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001158:	f001 faa8 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000c57c 	.word	0x2000c57c
 8001168:	40012200 	.word	0x40012200
 800116c:	0f000001 	.word	0x0f000001

08001170 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <MX_CAN1_Init+0xc8>)
 8001178:	4a30      	ldr	r2, [pc, #192]	; (800123c <MX_CAN1_Init+0xcc>)
 800117a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <MX_CAN1_Init+0xc8>)
 800117e:	2214      	movs	r2, #20
 8001180:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_CAN1_Init+0xc8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_CAN1_Init+0xc8>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_CAN1_Init+0xc8>)
 8001190:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001194:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <MX_CAN1_Init+0xc8>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_CAN1_Init+0xc8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <MX_CAN1_Init+0xc8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_CAN1_Init+0xc8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <MX_CAN1_Init+0xc8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <MX_CAN1_Init+0xc8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_CAN1_Init+0xc8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <MX_CAN1_Init+0xc8>)
 80011c2:	f002 fe61 	bl	8003e88 <HAL_CAN_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011cc:	f001 fa6e 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011f4:	230e      	movs	r3, #14
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	480e      	ldr	r0, [pc, #56]	; (8001238 <MX_CAN1_Init+0xc8>)
 80011fe:	f002 ff3f 	bl	8004080 <HAL_CAN_ConfigFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001208:	f001 fa50 	bl	80026ac <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <MX_CAN1_Init+0xc8>)
 800120e:	f003 f817 	bl	8004240 <HAL_CAN_Start>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001218:	f001 fa48 	bl	80026ac <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800121c:	2102      	movs	r1, #2
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_CAN1_Init+0xc8>)
 8001220:	f003 f964 	bl	80044ec <HAL_CAN_ActivateNotification>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800122a:	f001 fa3f 	bl	80026ac <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000c7fc 	.word	0x2000c7fc
 800123c:	40006400 	.word	0x40006400

08001240 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001248:	4b89      	ldr	r3, [pc, #548]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800124a:	4a8a      	ldr	r2, [pc, #552]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800124c:	2100      	movs	r1, #0
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f003 f83a 	bl	80042c8 <HAL_CAN_GetRxMessage>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800125a:	f001 fa27 	bl	80026ac <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001266:	d145      	bne.n	80012f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001268:	4b82      	ldr	r3, [pc, #520]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d141      	bne.n	80012f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001270:	4b80      	ldr	r3, [pc, #512]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	2b08      	cmp	r3, #8
 8001276:	d13d      	bne.n	80012f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8001278:	4b7d      	ldr	r3, [pc, #500]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b21a      	sxth	r2, r3
 800127e:	4b7c      	ldr	r3, [pc, #496]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 800128c:	4b78      	ldr	r3, [pc, #480]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800128e:	789b      	ldrb	r3, [r3, #2]
 8001290:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 8001294:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001296:	78db      	ldrb	r3, [r3, #3]
 8001298:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[5] << 8);
 800129c:	4b74      	ldr	r3, [pc, #464]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b73      	ldr	r3, [pc, #460]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80012a4:	795b      	ldrb	r3, [r3, #5]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 80012b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012b2:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80012b4:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 80012b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c4:	ee17 2a90 	vmov	r2, s15
 80012c8:	4b6c      	ldr	r3, [pc, #432]	; (800147c <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80012ca:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 80012cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d0:	4a6b      	ldr	r2, [pc, #428]	; (8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80012d2:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 80012d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ec:	ee17 2a90 	vmov	r2, s15
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80012f2:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012f4:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f240 6202 	movw	r2, #1538	; 0x602
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d12d      	bne.n	800135c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8001300:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d129      	bne.n	800135c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8001308:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d125      	bne.n	800135c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
  {
	 uint8_t oil_tmp_in = RxData[3];
 8001310:	4b57      	ldr	r3, [pc, #348]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001312:	78db      	ldrb	r3, [r3, #3]
 8001314:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 uint8_t oil_press_in = RxData[4];
 8001318:	4b55      	ldr	r3, [pc, #340]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800131a:	791b      	ldrb	r3, [r3, #4]
 800131c:	f887 3020 	strb.w	r3, [r7, #32]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001322:	799b      	ldrb	r3, [r3, #6]
 8001324:	b21a      	sxth	r2, r3
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001328:	79db      	ldrb	r3, [r3, #7]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	83fb      	strh	r3, [r7, #30]

	 oil_tmp = ((int)oil_tmp_in) * 1;
 8001334:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001338:	4a53      	ldr	r2, [pc, #332]	; (8001488 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800133a:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 800133c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001348:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001350:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001352:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 8001356:	8bfb      	ldrh	r3, [r7, #30]
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800135a:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f240 6203 	movw	r2, #1539	; 0x603
 8001364:	4293      	cmp	r3, r2
 8001366:	d130      	bne.n	80013ca <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8001368:	4b42      	ldr	r3, [pc, #264]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d12c      	bne.n	80013ca <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8001370:	4b40      	ldr	r3, [pc, #256]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d128      	bne.n	80013ca <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
  {
	 uint8_t lambda_in = RxData[2];
 8001378:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800137a:	789b      	ldrb	r3, [r3, #2]
 800137c:	777b      	strb	r3, [r7, #29]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 800137e:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001380:	791b      	ldrb	r3, [r3, #4]
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001386:	795b      	ldrb	r3, [r3, #5]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21b      	sxth	r3, r3
 8001390:	837b      	strh	r3, [r7, #26]
	 uint16_t egt_2_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001392:	4b37      	ldr	r3, [pc, #220]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001394:	799b      	ldrb	r3, [r3, #6]
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b35      	ldr	r3, [pc, #212]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800139a:	79db      	ldrb	r3, [r3, #7]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	833b      	strh	r3, [r7, #24]
	 lambda = ((float)lambda_in)*0.0078125f;
 80013a6:	7f7b      	ldrb	r3, [r7, #29]
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013b0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 80013b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80013ba:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 80013be:	8b7b      	ldrh	r3, [r7, #26]
 80013c0:	4a37      	ldr	r2, [pc, #220]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 80013c2:	6013      	str	r3, [r2, #0]
	 egt_2 = (int)egt_2_in;
 80013c4:	8b3b      	ldrh	r3, [r7, #24]
 80013c6:	4a37      	ldr	r2, [pc, #220]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 80013c8:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f240 6204 	movw	r2, #1540	; 0x604
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d11f      	bne.n	8001416 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d11b      	bne.n	8001416 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d117      	bne.n	8001416 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013ee:	78db      	ldrb	r3, [r3, #3]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	82fb      	strh	r3, [r7, #22]
	 float battery_voltage = ((float)batt_in)*0.027f;
 80013fa:	8afb      	ldrh	r3, [r7, #22]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001404:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
 8001408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140c:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 8001410:	4a26      	ldr	r2, [pc, #152]	; (80014ac <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800141e:	d123      	bne.n	8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d11f      	bne.n	8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d11b      	bne.n	8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	73fb      	strb	r3, [r7, #15]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	b21a      	sxth	r2, r3
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21b      	sxth	r3, r3
 8001448:	81bb      	strh	r3, [r7, #12]
  	 lambda_targ = ((float)lambda_targ_in) / 100;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001454:	eddf 6a16 	vldr	s13, [pc, #88]	; 80014b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>
 8001458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800145e:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 8001462:	89bb      	ldrh	r3, [r7, #12]
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001466:	6013      	str	r3, [r2, #0]
    }
}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000c7b4 	.word	0x2000c7b4
 8001474:	2000c898 	.word	0x2000c898
 8001478:	20000004 	.word	0x20000004
 800147c:	20000008 	.word	0x20000008
 8001480:	200003d0 	.word	0x200003d0
 8001484:	200003dc 	.word	0x200003dc
 8001488:	200003c4 	.word	0x200003c4
 800148c:	3d800000 	.word	0x3d800000
 8001490:	200003c8 	.word	0x200003c8
 8001494:	2000000c 	.word	0x2000000c
 8001498:	3c000000 	.word	0x3c000000
 800149c:	20000010 	.word	0x20000010
 80014a0:	200003d4 	.word	0x200003d4
 80014a4:	200003d8 	.word	0x200003d8
 80014a8:	3cdd2f1b 	.word	0x3cdd2f1b
 80014ac:	200003e0 	.word	0x200003e0
 80014b0:	42c80000 	.word	0x42c80000
 80014b4:	20000014 	.word	0x20000014
 80014b8:	200003cc 	.word	0x200003cc

080014bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_CRC_Init+0x3c>)
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <MX_CRC_Init+0x40>)
 80014c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_CRC_Init+0x3c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_CRC_Init+0x3c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_CRC_Init+0x3c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_CRC_Init+0x3c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_CRC_Init+0x3c>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_CRC_Init+0x3c>)
 80014e6:	f003 fb6b 	bl	8004bc0 <HAL_CRC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014f0:	f001 f8dc 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000c3ac 	.word	0x2000c3ac
 80014fc:	40023000 	.word	0x40023000

08001500 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_DCMI_Init+0x60>)
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <MX_DCMI_Init+0x64>)
 8001508:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_DCMI_Init+0x60>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_DCMI_Init+0x60>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_DCMI_Init+0x60>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_DCMI_Init+0x60>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_DCMI_Init+0x60>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_DCMI_Init+0x60>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_DCMI_Init+0x60>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_DCMI_Init+0x60>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_DCMI_Init+0x60>)
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_DCMI_Init+0x60>)
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_DCMI_Init+0x60>)
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_DCMI_Init+0x60>)
 800154e:	f003 fc21 	bl	8004d94 <HAL_DCMI_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001558:	f001 f8a8 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000c5c4 	.word	0x2000c5c4
 8001564:	50050000 	.word	0x50050000

08001568 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <MX_DMA2D_Init+0x60>)
 8001570:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 8001586:	2200      	movs	r2, #0
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 800159e:	f003 fd0d 	bl	8004fbc <HAL_DMA2D_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80015a8:	f001 f880 	bl	80026ac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80015ac:	2101      	movs	r1, #1
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_DMA2D_Init+0x5c>)
 80015b0:	f003 ffce 	bl	8005550 <HAL_DMA2D_ConfigLayer>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80015ba:	f001 f877 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000c774 	.word	0x2000c774
 80015c8:	4002b000 	.word	0x4002b000

080015cc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2234      	movs	r2, #52	; 0x34
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f027 f89f 	bl	802871c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <MX_LTDC_Init+0xfc>)
 80015e0:	4a3a      	ldr	r2, [pc, #232]	; (80016cc <MX_LTDC_Init+0x100>)
 80015e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <MX_LTDC_Init+0xfc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <MX_LTDC_Init+0xfc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015f0:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <MX_LTDC_Init+0xfc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <MX_LTDC_Init+0xfc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80015fc:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <MX_LTDC_Init+0xfc>)
 80015fe:	2228      	movs	r2, #40	; 0x28
 8001600:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <MX_LTDC_Init+0xfc>)
 8001604:	2209      	movs	r2, #9
 8001606:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <MX_LTDC_Init+0xfc>)
 800160a:	2235      	movs	r2, #53	; 0x35
 800160c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_LTDC_Init+0xfc>)
 8001610:	220b      	movs	r2, #11
 8001612:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_LTDC_Init+0xfc>)
 8001616:	f240 2215 	movw	r2, #533	; 0x215
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <MX_LTDC_Init+0xfc>)
 800161e:	f240 121b 	movw	r2, #283	; 0x11b
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_LTDC_Init+0xfc>)
 8001626:	f240 2235 	movw	r2, #565	; 0x235
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <MX_LTDC_Init+0xfc>)
 800162e:	f240 121d 	movw	r2, #285	; 0x11d
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <MX_LTDC_Init+0xfc>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MX_LTDC_Init+0xfc>)
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <MX_LTDC_Init+0xfc>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800164c:	481e      	ldr	r0, [pc, #120]	; (80016c8 <MX_LTDC_Init+0xfc>)
 800164e:	f004 ffb7 	bl	80065c0 <HAL_LTDC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001658:	f001 f828 	bl	80026ac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001660:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001664:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800166a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800166e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001670:	2301      	movs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001674:	23ff      	movs	r3, #255	; 0xff
 8001676:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800167c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001680:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001682:	2305      	movs	r3, #5
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001686:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800168c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001692:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_LTDC_Init+0xfc>)
 80016b2:	f005 f90d 	bl	80068d0 <HAL_LTDC_ConfigLayer>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80016bc:	f000 fff6 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3738      	adds	r7, #56	; 0x38
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000c4d4 	.word	0x2000c4d4
 80016cc:	40016800 	.word	0x40016800

080016d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_QUADSPI_Init+0x50>)
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <MX_QUADSPI_Init+0x54>)
 80016d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_QUADSPI_Init+0x50>)
 80016dc:	22ff      	movs	r2, #255	; 0xff
 80016de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_QUADSPI_Init+0x50>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_QUADSPI_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_QUADSPI_Init+0x50>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_QUADSPI_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_QUADSPI_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_QUADSPI_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_QUADSPI_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_QUADSPI_Init+0x50>)
 800170c:	f005 fb50 	bl	8006db0 <HAL_QSPI_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001716:	f000 ffc9 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000c8b4 	.word	0x2000c8b4
 8001724:	a0001000 	.word	0xa0001000

08001728 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b092      	sub	sp, #72	; 0x48
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800172e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]
 800173e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001744:	463b      	mov	r3, r7
 8001746:	222c      	movs	r2, #44	; 0x2c
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f026 ffe6 	bl	802871c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001750:	4b47      	ldr	r3, [pc, #284]	; (8001870 <MX_RTC_Init+0x148>)
 8001752:	4a48      	ldr	r2, [pc, #288]	; (8001874 <MX_RTC_Init+0x14c>)
 8001754:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <MX_RTC_Init+0x148>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800175c:	4b44      	ldr	r3, [pc, #272]	; (8001870 <MX_RTC_Init+0x148>)
 800175e:	227f      	movs	r2, #127	; 0x7f
 8001760:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <MX_RTC_Init+0x148>)
 8001764:	22ff      	movs	r2, #255	; 0xff
 8001766:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001768:	4b41      	ldr	r3, [pc, #260]	; (8001870 <MX_RTC_Init+0x148>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800176e:	4b40      	ldr	r3, [pc, #256]	; (8001870 <MX_RTC_Init+0x148>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <MX_RTC_Init+0x148>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800177a:	483d      	ldr	r0, [pc, #244]	; (8001870 <MX_RTC_Init+0x148>)
 800177c:	f006 fdb8 	bl	80082f0 <HAL_RTC_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001786:	f000 ff91 	bl	80026ac <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800178a:	2300      	movs	r3, #0
 800178c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800179c:	2300      	movs	r3, #0
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a8:	2201      	movs	r2, #1
 80017aa:	4619      	mov	r1, r3
 80017ac:	4830      	ldr	r0, [pc, #192]	; (8001870 <MX_RTC_Init+0x148>)
 80017ae:	f006 fe1b 	bl	80083e8 <HAL_RTC_SetTime>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80017b8:	f000 ff78 	bl	80026ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017bc:	2301      	movs	r3, #1
 80017be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d8:	2201      	movs	r2, #1
 80017da:	4619      	mov	r1, r3
 80017dc:	4824      	ldr	r0, [pc, #144]	; (8001870 <MX_RTC_Init+0x148>)
 80017de:	f006 fec1 	bl	8008564 <HAL_RTC_SetDate>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80017e8:	f000 ff60 	bl	80026ac <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001810:	2301      	movs	r3, #1
 8001812:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	2201      	movs	r2, #1
 8001820:	4619      	mov	r1, r3
 8001822:	4813      	ldr	r0, [pc, #76]	; (8001870 <MX_RTC_Init+0x148>)
 8001824:	f006 ff46 	bl	80086b4 <HAL_RTC_SetAlarm>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800182e:	f000 ff3d 	bl	80026ac <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001832:	2301      	movs	r3, #1
 8001834:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800183e:	463b      	mov	r3, r7
 8001840:	2201      	movs	r2, #1
 8001842:	4619      	mov	r1, r3
 8001844:	480a      	ldr	r0, [pc, #40]	; (8001870 <MX_RTC_Init+0x148>)
 8001846:	f006 ff35 	bl	80086b4 <HAL_RTC_SetAlarm>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001850:	f000 ff2c 	bl	80026ac <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001854:	2202      	movs	r2, #2
 8001856:	2100      	movs	r1, #0
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_RTC_Init+0x148>)
 800185a:	f007 f8b5 	bl	80089c8 <HAL_RTCEx_SetTimeStamp>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001864:	f000 ff22 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	3748      	adds	r7, #72	; 0x48
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000c694 	.word	0x2000c694
 8001874:	40002800 	.word	0x40002800

08001878 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800187c:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <MX_SAI2_Init+0x13c>)
 800187e:	4a4e      	ldr	r2, [pc, #312]	; (80019b8 <MX_SAI2_Init+0x140>)
 8001880:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001882:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <MX_SAI2_Init+0x13c>)
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001888:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <MX_SAI2_Init+0x13c>)
 800188a:	2200      	movs	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <MX_SAI2_Init+0x13c>)
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <MX_SAI2_Init+0x13c>)
 8001896:	2200      	movs	r2, #0
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800189a:	4b46      	ldr	r3, [pc, #280]	; (80019b4 <MX_SAI2_Init+0x13c>)
 800189c:	2200      	movs	r2, #0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018a6:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018b2:	4b40      	ldr	r3, [pc, #256]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018b8:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018ba:	4a40      	ldr	r2, [pc, #256]	; (80019bc <MX_SAI2_Init+0x144>)
 80018bc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018d8:	2208      	movs	r2, #8
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018de:	2201      	movs	r2, #1
 80018e0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <MX_SAI2_Init+0x13c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MX_SAI2_Init+0x13c>)
 8001902:	2201      	movs	r2, #1
 8001904:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_SAI2_Init+0x13c>)
 8001908:	2200      	movs	r2, #0
 800190a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800190c:	4829      	ldr	r0, [pc, #164]	; (80019b4 <MX_SAI2_Init+0x13c>)
 800190e:	f007 f8b1 	bl	8008a74 <HAL_SAI_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001918:	f000 fec8 	bl	80026ac <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <MX_SAI2_Init+0x148>)
 800191e:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <MX_SAI2_Init+0x14c>)
 8001920:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001924:	2200      	movs	r2, #0
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <MX_SAI2_Init+0x148>)
 800192a:	2203      	movs	r2, #3
 800192c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001930:	2240      	movs	r2, #64	; 0x40
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001936:	2200      	movs	r2, #0
 8001938:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_SAI2_Init+0x148>)
 800193c:	2200      	movs	r2, #0
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001942:	2201      	movs	r2, #1
 8001944:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_SAI2_Init+0x148>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_SAI2_Init+0x148>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001966:	2200      	movs	r2, #0
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_SAI2_Init+0x148>)
 800196c:	2208      	movs	r2, #8
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001972:	2201      	movs	r2, #1
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001978:	2200      	movs	r2, #0
 800197a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_SAI2_Init+0x148>)
 800197e:	2200      	movs	r2, #0
 8001980:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001984:	2200      	movs	r2, #0
 8001986:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <MX_SAI2_Init+0x148>)
 800198a:	2200      	movs	r2, #0
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001990:	2200      	movs	r2, #0
 8001992:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_SAI2_Init+0x148>)
 8001996:	2201      	movs	r2, #1
 8001998:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_SAI2_Init+0x148>)
 800199c:	2200      	movs	r2, #0
 800199e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <MX_SAI2_Init+0x148>)
 80019a2:	f007 f867 	bl	8008a74 <HAL_SAI_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80019ac:	f000 fe7e 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000c328 	.word	0x2000c328
 80019b8:	40015c04 	.word	0x40015c04
 80019bc:	0002ee00 	.word	0x0002ee00
 80019c0:	2000c1ac 	.word	0x2000c1ac
 80019c4:	40015c24 	.word	0x40015c24

080019c8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SDMMC1_SD_Init+0x38>)
 80019ce:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <MX_SDMMC1_SD_Init+0x3c>)
 80019d0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_SDMMC1_SD_Init+0x38>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SDMMC1_SD_Init+0x38>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_SDMMC1_SD_Init+0x38>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SDMMC1_SD_Init+0x38>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <MX_SDMMC1_SD_Init+0x38>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <MX_SDMMC1_SD_Init+0x38>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	2000c3d0 	.word	0x2000c3d0
 8001a04:	40012c00 	.word	0x40012c00

08001a08 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a0e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a12:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <MX_SPDIFRX_Init+0x5c>)
 8001a52:	f008 faa5 	bl	8009fa0 <HAL_SPDIFRX_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001a5c:	f000 fe26 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000c2dc 	.word	0x2000c2dc

08001a68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_SPI2_Init+0x74>)
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <MX_SPI2_Init+0x78>)
 8001a70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_SPI2_Init+0x74>)
 8001a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_SPI2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_SPI2_Init+0x74>)
 8001a82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_SPI2_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_SPI2_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_SPI2_Init+0x74>)
 8001a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_SPI2_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_SPI2_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_SPI2_Init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_SPI2_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_SPI2_Init+0x74>)
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_SPI2_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_SPI2_Init+0x74>)
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_SPI2_Init+0x74>)
 8001ac8:	f008 fac6 	bl	800a058 <HAL_SPI_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ad2:	f000 fdeb 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000c238 	.word	0x2000c238
 8001ae0:	40003800 	.word	0x40003800

08001ae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09a      	sub	sp, #104	; 0x68
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	222c      	movs	r2, #44	; 0x2c
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f026 fdfc 	bl	802871c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b24:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b26:	4a44      	ldr	r2, [pc, #272]	; (8001c38 <MX_TIM1_Init+0x154>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001b36:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b42:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b4e:	4839      	ldr	r0, [pc, #228]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b50:	f008 fb14 	bl	800a17c <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b5a:	f000 fda7 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b62:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4832      	ldr	r0, [pc, #200]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b6c:	f008 fdbe 	bl	800a6ec <HAL_TIM_ConfigClockSource>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b76:	f000 fd99 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b7a:	482e      	ldr	r0, [pc, #184]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b7c:	f008 fb54 	bl	800a228 <HAL_TIM_PWM_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b86:	f000 fd91 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4825      	ldr	r0, [pc, #148]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b9e:	f009 fa2b 	bl	800aff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001ba8:	f000 fd80 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bac:	2360      	movs	r3, #96	; 0x60
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4818      	ldr	r0, [pc, #96]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001bd2:	f008 fc73 	bl	800a4bc <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001bdc:	f000 fd66 	bl	80026ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001c16:	f009 fa7d 	bl	800b114 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001c20:	f000 fd44 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001c26:	f001 fa3b 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 8001c2a:	bf00      	nop
 8001c2c:	3768      	adds	r7, #104	; 0x68
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000c6b4 	.word	0x2000c6b4
 8001c38:	40010000 	.word	0x40010000

08001c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08e      	sub	sp, #56	; 0x38
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c94:	4823      	ldr	r0, [pc, #140]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c96:	f008 fa71 	bl	800a17c <HAL_TIM_Base_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ca0:	f000 fd04 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481c      	ldr	r0, [pc, #112]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001cb2:	f008 fd1b 	bl	800a6ec <HAL_TIM_ConfigClockSource>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cbc:	f000 fcf6 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cc0:	4818      	ldr	r0, [pc, #96]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001cc2:	f008 fab1 	bl	800a228 <HAL_TIM_PWM_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ccc:	f000 fcee 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4811      	ldr	r0, [pc, #68]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001ce0:	f009 f98a 	bl	800aff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cea:	f000 fcdf 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cee:	2360      	movs	r3, #96	; 0x60
 8001cf0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4807      	ldr	r0, [pc, #28]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001d06:	f008 fbd9 	bl	800a4bc <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d10:	f000 fccc 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001d16:	f001 f9c3 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 8001d1a:	bf00      	nop
 8001d1c:	3738      	adds	r7, #56	; 0x38
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000c7bc 	.word	0x2000c7bc

08001d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	; 0x38
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <MX_TIM3_Init+0xe8>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d7e:	4823      	ldr	r0, [pc, #140]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001d80:	f008 f9fc 	bl	800a17c <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d8a:	f000 fc8f 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481c      	ldr	r0, [pc, #112]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001d9c:	f008 fca6 	bl	800a6ec <HAL_TIM_ConfigClockSource>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001da6:	f000 fc81 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001daa:	4818      	ldr	r0, [pc, #96]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001dac:	f008 fa3c 	bl	800a228 <HAL_TIM_PWM_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001db6:	f000 fc79 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4810      	ldr	r0, [pc, #64]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001dca:	f009 f915 	bl	800aff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001dd4:	f000 fc6a 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd8:	2360      	movs	r3, #96	; 0x60
 8001dda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	4619      	mov	r1, r3
 8001dee:	4807      	ldr	r0, [pc, #28]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001df0:	f008 fb64 	bl	800a4bc <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001dfa:	f000 fc57 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dfe:	4803      	ldr	r0, [pc, #12]	; (8001e0c <MX_TIM3_Init+0xe4>)
 8001e00:	f001 f94e 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 8001e04:	bf00      	nop
 8001e06:	3738      	adds	r7, #56	; 0x38
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000c494 	.word	0x2000c494
 8001e10:	40000400 	.word	0x40000400

08001e14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e48:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <MX_TIM5_Init+0xe8>)
 8001e4a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e6a:	4823      	ldr	r0, [pc, #140]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e6c:	f008 f986 	bl	800a17c <HAL_TIM_Base_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001e76:	f000 fc19 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e84:	4619      	mov	r1, r3
 8001e86:	481c      	ldr	r0, [pc, #112]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e88:	f008 fc30 	bl	800a6ec <HAL_TIM_ConfigClockSource>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e92:	f000 fc0b 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e96:	4818      	ldr	r0, [pc, #96]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001e98:	f008 f9c6 	bl	800a228 <HAL_TIM_PWM_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001ea2:	f000 fc03 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4810      	ldr	r0, [pc, #64]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001eb6:	f009 f89f 	bl	800aff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001ec0:	f000 fbf4 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec4:	2360      	movs	r3, #96	; 0x60
 8001ec6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001edc:	f008 faee 	bl	800a4bc <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001ee6:	f000 fbe1 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001eea:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <MX_TIM5_Init+0xe4>)
 8001eec:	f001 f8d8 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 8001ef0:	bf00      	nop
 8001ef2:	3738      	adds	r7, #56	; 0x38
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	2000c454 	.word	0x2000c454
 8001efc:	40000c00 	.word	0x40000c00

08001f00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <MX_TIM8_Init+0xa0>)
 8001f22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f48:	4814      	ldr	r0, [pc, #80]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f4a:	f008 f917 	bl	800a17c <HAL_TIM_Base_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001f54:	f000 fbaa 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	4619      	mov	r1, r3
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f66:	f008 fbc1 	bl	800a6ec <HAL_TIM_ConfigClockSource>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001f70:	f000 fb9c 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_TIM8_Init+0x9c>)
 8001f86:	f009 f837 	bl	800aff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001f90:	f000 fb8c 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000c29c 	.word	0x2000c29c
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <MX_TIM12_Init+0x80>)
 8001fbe:	4a1a      	ldr	r2, [pc, #104]	; (8002028 <MX_TIM12_Init+0x84>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <MX_TIM12_Init+0x80>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_TIM12_Init+0x80>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_TIM12_Init+0x80>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_TIM12_Init+0x80>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_TIM12_Init+0x80>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001fe0:	4810      	ldr	r0, [pc, #64]	; (8002024 <MX_TIM12_Init+0x80>)
 8001fe2:	f008 f921 	bl	800a228 <HAL_TIM_PWM_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001fec:	f000 fb5e 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff0:	2360      	movs	r3, #96	; 0x60
 8001ff2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	4807      	ldr	r0, [pc, #28]	; (8002024 <MX_TIM12_Init+0x80>)
 8002008:	f008 fa58 	bl	800a4bc <HAL_TIM_PWM_ConfigChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002012:	f000 fb4b 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002016:	4803      	ldr	r0, [pc, #12]	; (8002024 <MX_TIM12_Init+0x80>)
 8002018:	f001 f842 	bl	80030a0 <HAL_TIM_MspPostInit>

}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000c824 	.word	0x2000c824
 8002028:	40001800 	.word	0x40001800

0800202c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <MX_USART1_UART_Init+0x5c>)
 8002034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800203c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_USART1_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002052:	220c      	movs	r2, #12
 8002054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_USART1_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_USART1_UART_Init+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002070:	f009 f8ec 	bl	800b24c <HAL_UART_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800207a:	f000 fb17 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000c614 	.word	0x2000c614
 8002088:	40011000 	.word	0x40011000

0800208c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 8002092:	4a15      	ldr	r2, [pc, #84]	; (80020e8 <MX_USART6_UART_Init+0x5c>)
 8002094:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 8002098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800209c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020b2:	220c      	movs	r2, #12
 80020b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <MX_USART6_UART_Init+0x58>)
 80020d0:	f009 f8bc 	bl	800b24c <HAL_UART_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80020da:	f000 fae7 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000c6f4 	.word	0x2000c6f4
 80020e8:	40011400 	.word	0x40011400

080020ec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002104:	4b4c      	ldr	r3, [pc, #304]	; (8002238 <MX_FMC_Init+0x14c>)
 8002106:	4a4d      	ldr	r2, [pc, #308]	; (800223c <MX_FMC_Init+0x150>)
 8002108:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800210a:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <MX_FMC_Init+0x14c>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002110:	4b49      	ldr	r3, [pc, #292]	; (8002238 <MX_FMC_Init+0x14c>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002116:	4b48      	ldr	r3, [pc, #288]	; (8002238 <MX_FMC_Init+0x14c>)
 8002118:	2204      	movs	r2, #4
 800211a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <MX_FMC_Init+0x14c>)
 800211e:	2210      	movs	r2, #16
 8002120:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002122:	4b45      	ldr	r3, [pc, #276]	; (8002238 <MX_FMC_Init+0x14c>)
 8002124:	2240      	movs	r2, #64	; 0x40
 8002126:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <MX_FMC_Init+0x14c>)
 800212a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800212e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002130:	4b41      	ldr	r3, [pc, #260]	; (8002238 <MX_FMC_Init+0x14c>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002136:	4b40      	ldr	r3, [pc, #256]	; (8002238 <MX_FMC_Init+0x14c>)
 8002138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <MX_FMC_Init+0x14c>)
 8002140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <MX_FMC_Init+0x14c>)
 8002148:	2200      	movs	r2, #0
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800214c:	2302      	movs	r3, #2
 800214e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002150:	2307      	movs	r3, #7
 8002152:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002154:	2304      	movs	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002158:	2307      	movs	r3, #7
 800215a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800215c:	2303      	movs	r3, #3
 800215e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002164:	2302      	movs	r3, #2
 8002166:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4832      	ldr	r0, [pc, #200]	; (8002238 <MX_FMC_Init+0x14c>)
 800216e:	f007 fe97 	bl	8009ea0 <HAL_SDRAM_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002178:	f000 fa98 	bl	80026ac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <MX_FMC_Init+0x154>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <MX_FMC_Init+0x154>)
 8002188:	2210      	movs	r2, #16
 800218a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <MX_FMC_Init+0x154>)
 800218e:	2201      	movs	r2, #1
 8002190:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <MX_FMC_Init+0x154>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800219c:	4928      	ldr	r1, [pc, #160]	; (8002240 <MX_FMC_Init+0x154>)
 800219e:	4826      	ldr	r0, [pc, #152]	; (8002238 <MX_FMC_Init+0x14c>)
 80021a0:	f007 feb2 	bl	8009f08 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f001 fba3 	bl	80038f0 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <MX_FMC_Init+0x154>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <MX_FMC_Init+0x154>)
 80021b2:	2210      	movs	r2, #16
 80021b4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <MX_FMC_Init+0x154>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80021bc:	4b20      	ldr	r3, [pc, #128]	; (8002240 <MX_FMC_Init+0x154>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c6:	491e      	ldr	r1, [pc, #120]	; (8002240 <MX_FMC_Init+0x154>)
 80021c8:	481b      	ldr	r0, [pc, #108]	; (8002238 <MX_FMC_Init+0x14c>)
 80021ca:	f007 fe9d 	bl	8009f08 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <MX_FMC_Init+0x154>)
 80021d0:	2203      	movs	r2, #3
 80021d2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <MX_FMC_Init+0x154>)
 80021d6:	2210      	movs	r2, #16
 80021d8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_FMC_Init+0x154>)
 80021dc:	2208      	movs	r2, #8
 80021de:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <MX_FMC_Init+0x154>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ea:	4915      	ldr	r1, [pc, #84]	; (8002240 <MX_FMC_Init+0x154>)
 80021ec:	4812      	ldr	r0, [pc, #72]	; (8002238 <MX_FMC_Init+0x14c>)
 80021ee:	f007 fe8b 	bl	8009f08 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80021f2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80021f6:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_FMC_Init+0x154>)
 80021fa:	2204      	movs	r2, #4
 80021fc:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_FMC_Init+0x154>)
 8002200:	2210      	movs	r2, #16
 8002202:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_FMC_Init+0x154>)
 8002206:	2201      	movs	r2, #1
 8002208:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <MX_FMC_Init+0x154>)
 800220e:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002214:	490a      	ldr	r1, [pc, #40]	; (8002240 <MX_FMC_Init+0x154>)
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <MX_FMC_Init+0x14c>)
 8002218:	f007 fe76 	bl	8009f08 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800221c:	f240 712b 	movw	r1, #1835	; 0x72b
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_FMC_Init+0x14c>)
 8002222:	f007 fe9c 	bl	8009f5e <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8002226:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800222a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800222e:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002230:	bf00      	nop
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000c864 	.word	0x2000c864
 800223c:	a0000140 	.word	0xa0000140
 8002240:	200003b4 	.word	0x200003b4

08002244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b090      	sub	sp, #64	; 0x40
 8002248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800225a:	4baf      	ldr	r3, [pc, #700]	; (8002518 <MX_GPIO_Init+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4aae      	ldr	r2, [pc, #696]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002260:	f043 0310 	orr.w	r3, r3, #16
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4bac      	ldr	r3, [pc, #688]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002272:	4ba9      	ldr	r3, [pc, #676]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4aa8      	ldr	r2, [pc, #672]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4ba6      	ldr	r3, [pc, #664]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4ba3      	ldr	r3, [pc, #652]	; (8002518 <MX_GPIO_Init+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4aa2      	ldr	r2, [pc, #648]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4ba0      	ldr	r3, [pc, #640]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	623b      	str	r3, [r7, #32]
 80022a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a2:	4b9d      	ldr	r3, [pc, #628]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a9c      	ldr	r2, [pc, #624]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b9a      	ldr	r3, [pc, #616]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	4b97      	ldr	r3, [pc, #604]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a96      	ldr	r2, [pc, #600]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b94      	ldr	r3, [pc, #592]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	4b91      	ldr	r3, [pc, #580]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a90      	ldr	r2, [pc, #576]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b8e      	ldr	r3, [pc, #568]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022ea:	4b8b      	ldr	r3, [pc, #556]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a8a      	ldr	r2, [pc, #552]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b88      	ldr	r3, [pc, #544]	; (8002518 <MX_GPIO_Init+0x2d4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002302:	4b85      	ldr	r3, [pc, #532]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a84      	ldr	r2, [pc, #528]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b82      	ldr	r3, [pc, #520]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800231a:	4b7f      	ldr	r3, [pc, #508]	; (8002518 <MX_GPIO_Init+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a7e      	ldr	r2, [pc, #504]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b7c      	ldr	r3, [pc, #496]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002332:	4b79      	ldr	r3, [pc, #484]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a78      	ldr	r2, [pc, #480]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234a:	4b73      	ldr	r3, [pc, #460]	; (8002518 <MX_GPIO_Init+0x2d4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a72      	ldr	r2, [pc, #456]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b70      	ldr	r3, [pc, #448]	; (8002518 <MX_GPIO_Init+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002362:	2201      	movs	r2, #1
 8002364:	2120      	movs	r1, #32
 8002366:	486d      	ldr	r0, [pc, #436]	; (800251c <MX_GPIO_Init+0x2d8>)
 8002368:	f003 fbe4 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800236c:	2200      	movs	r2, #0
 800236e:	210c      	movs	r1, #12
 8002370:	486b      	ldr	r0, [pc, #428]	; (8002520 <MX_GPIO_Init+0x2dc>)
 8002372:	f003 fbdf 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002376:	2201      	movs	r2, #1
 8002378:	2108      	movs	r1, #8
 800237a:	486a      	ldr	r0, [pc, #424]	; (8002524 <MX_GPIO_Init+0x2e0>)
 800237c:	f003 fbda 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002386:	4866      	ldr	r0, [pc, #408]	; (8002520 <MX_GPIO_Init+0x2dc>)
 8002388:	f003 fbd4 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002392:	4865      	ldr	r0, [pc, #404]	; (8002528 <MX_GPIO_Init+0x2e4>)
 8002394:	f003 fbce 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	21c8      	movs	r1, #200	; 0xc8
 800239c:	4863      	ldr	r0, [pc, #396]	; (800252c <MX_GPIO_Init+0x2e8>)
 800239e:	f003 fbc9 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80023a2:	2308      	movs	r3, #8
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a6:	2300      	movs	r3, #0
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b2:	4619      	mov	r1, r3
 80023b4:	485e      	ldr	r0, [pc, #376]	; (8002530 <MX_GPIO_Init+0x2ec>)
 80023b6:	f003 f9f9 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80023ba:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023cc:	230b      	movs	r3, #11
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d4:	4619      	mov	r1, r3
 80023d6:	4855      	ldr	r0, [pc, #340]	; (800252c <MX_GPIO_Init+0x2e8>)
 80023d8:	f003 f9e8 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80023dc:	f643 4323 	movw	r3, #15395	; 0x3c23
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023ee:	230a      	movs	r3, #10
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f6:	4619      	mov	r1, r3
 80023f8:	484e      	ldr	r0, [pc, #312]	; (8002534 <MX_GPIO_Init+0x2f0>)
 80023fa:	f003 f9d7 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80023fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002404:	2300      	movs	r3, #0
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002410:	4619      	mov	r1, r3
 8002412:	4849      	ldr	r0, [pc, #292]	; (8002538 <MX_GPIO_Init+0x2f4>)
 8002414:	f003 f9ca 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002418:	2340      	movs	r3, #64	; 0x40
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800241c:	4b47      	ldr	r3, [pc, #284]	; (800253c <MX_GPIO_Init+0x2f8>)
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	483c      	ldr	r0, [pc, #240]	; (800251c <MX_GPIO_Init+0x2d8>)
 800242c:	f003 f9be 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002430:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002442:	230a      	movs	r3, #10
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	483c      	ldr	r0, [pc, #240]	; (8002540 <MX_GPIO_Init+0x2fc>)
 800244e:	f003 f9ad 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002452:	2320      	movs	r3, #32
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002456:	2301      	movs	r3, #1
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002466:	4619      	mov	r1, r3
 8002468:	482c      	ldr	r0, [pc, #176]	; (800251c <MX_GPIO_Init+0x2d8>)
 800246a:	f003 f99f 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800246e:	f241 030c 	movw	r3, #4108	; 0x100c
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002484:	4619      	mov	r1, r3
 8002486:	4826      	ldr	r0, [pc, #152]	; (8002520 <MX_GPIO_Init+0x2dc>)
 8002488:	f003 f990 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800248c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249e:	4619      	mov	r1, r3
 80024a0:	4828      	ldr	r0, [pc, #160]	; (8002544 <MX_GPIO_Init+0x300>)
 80024a2:	f003 f983 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80024a6:	2308      	movs	r3, #8
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4819      	ldr	r0, [pc, #100]	; (8002524 <MX_GPIO_Init+0x2e0>)
 80024be:	f003 f975 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024c2:	2310      	movs	r3, #16
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d2:	4619      	mov	r1, r3
 80024d4:	4811      	ldr	r0, [pc, #68]	; (800251c <MX_GPIO_Init+0x2d8>)
 80024d6:	f003 f969 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80024da:	f248 0304 	movw	r3, #32772	; 0x8004
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	480e      	ldr	r0, [pc, #56]	; (8002528 <MX_GPIO_Init+0x2e4>)
 80024f0:	f003 f95c 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80024f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250a:	4619      	mov	r1, r3
 800250c:	4806      	ldr	r0, [pc, #24]	; (8002528 <MX_GPIO_Init+0x2e4>)
 800250e:	f003 f94d 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002516:	e017      	b.n	8002548 <MX_GPIO_Init+0x304>
 8002518:	40023800 	.word	0x40023800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40022000 	.word	0x40022000
 8002524:	40022800 	.word	0x40022800
 8002528:	40021c00 	.word	0x40021c00
 800252c:	40021800 	.word	0x40021800
 8002530:	40021000 	.word	0x40021000
 8002534:	40020400 	.word	0x40020400
 8002538:	40022400 	.word	0x40022400
 800253c:	10120000 	.word	0x10120000
 8002540:	40020000 	.word	0x40020000
 8002544:	40020800 	.word	0x40020800
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800254a:	4b44      	ldr	r3, [pc, #272]	; (800265c <MX_GPIO_Init+0x418>)
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002556:	4619      	mov	r1, r3
 8002558:	4841      	ldr	r0, [pc, #260]	; (8002660 <MX_GPIO_Init+0x41c>)
 800255a:	f003 f927 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800255e:	2310      	movs	r3, #16
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256a:	2303      	movs	r3, #3
 800256c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800256e:	230a      	movs	r3, #10
 8002570:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002576:	4619      	mov	r1, r3
 8002578:	483a      	ldr	r0, [pc, #232]	; (8002664 <MX_GPIO_Init+0x420>)
 800257a:	f003 f917 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800257e:	23c8      	movs	r3, #200	; 0xc8
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800258e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002592:	4619      	mov	r1, r3
 8002594:	4834      	ldr	r0, [pc, #208]	; (8002668 <MX_GPIO_Init+0x424>)
 8002596:	f003 f909 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800259a:	2305      	movs	r3, #5
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025aa:	230a      	movs	r3, #10
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b2:	4619      	mov	r1, r3
 80025b4:	482d      	ldr	r0, [pc, #180]	; (800266c <MX_GPIO_Init+0x428>)
 80025b6:	f003 f8f9 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025ba:	2332      	movs	r3, #50	; 0x32
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ca:	230b      	movs	r3, #11
 80025cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d2:	4619      	mov	r1, r3
 80025d4:	4825      	ldr	r0, [pc, #148]	; (800266c <MX_GPIO_Init+0x428>)
 80025d6:	f003 f8e9 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80025da:	2304      	movs	r3, #4
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ea:	4619      	mov	r1, r3
 80025ec:	481e      	ldr	r0, [pc, #120]	; (8002668 <MX_GPIO_Init+0x424>)
 80025ee:	f003 f8dd 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025f2:	2386      	movs	r3, #134	; 0x86
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002602:	230b      	movs	r3, #11
 8002604:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260a:	4619      	mov	r1, r3
 800260c:	4818      	ldr	r0, [pc, #96]	; (8002670 <MX_GPIO_Init+0x42c>)
 800260e:	f003 f8cd 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002612:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002618:	2312      	movs	r3, #18
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261c:	2301      	movs	r3, #1
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002624:	2304      	movs	r3, #4
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262c:	4619      	mov	r1, r3
 800262e:	480d      	ldr	r0, [pc, #52]	; (8002664 <MX_GPIO_Init+0x420>)
 8002630:	f003 f8bc 	bl	80057ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002634:	2328      	movs	r3, #40	; 0x28
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002644:	230a      	movs	r3, #10
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264c:	4619      	mov	r1, r3
 800264e:	4808      	ldr	r0, [pc, #32]	; (8002670 <MX_GPIO_Init+0x42c>)
 8002650:	f003 f8ac 	bl	80057ac <HAL_GPIO_Init>

}
 8002654:	bf00      	nop
 8002656:	3740      	adds	r7, #64	; 0x40
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	10120000 	.word	0x10120000
 8002660:	40022000 	.word	0x40022000
 8002664:	40021c00 	.word	0x40021c00
 8002668:	40021800 	.word	0x40021800
 800266c:	40020800 	.word	0x40020800
 8002670:	40020000 	.word	0x40020000

08002674 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 800267c:	f00d fd9e 	bl	80101bc <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002680:	2001      	movs	r0, #1
 8002682:	f00a fbe9 	bl	800ce58 <osDelay>
 8002686:	e7fb      	b.n	8002680 <StartDefaultTask+0xc>

08002688 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800269a:	f001 f909 	bl	80038b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40001000 	.word	0x40001000

080026ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_MspInit+0x4c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a10      	ldr	r2, [pc, #64]	; (8002708 <HAL_MspInit+0x4c>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	210f      	movs	r1, #15
 80026f6:	f06f 0001 	mvn.w	r0, #1
 80026fa:	f002 fa29 	bl	8004b50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <HAL_ADC_MspInit+0xa4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d13c      	bne.n	80027a8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800272e:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 8002734:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 800274c:	f043 0320 	orr.w	r3, r3, #32
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_ADC_MspInit+0xa8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002776:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800277a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277c:	2303      	movs	r3, #3
 800277e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4619      	mov	r1, r3
 800278a:	480b      	ldr	r0, [pc, #44]	; (80027b8 <HAL_ADC_MspInit+0xac>)
 800278c:	f003 f80e 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002790:	2301      	movs	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002794:	2303      	movs	r3, #3
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <HAL_ADC_MspInit+0xb0>)
 80027a4:	f003 f802 	bl	80057ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80027a8:	bf00      	nop
 80027aa:	3728      	adds	r7, #40	; 0x28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40012200 	.word	0x40012200
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40020000 	.word	0x40020000

080027c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_CAN_MspInit+0x8c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d130      	bne.n	8002844 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_CAN_MspInit+0x90>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <HAL_CAN_MspInit+0x90>)
 80027e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <HAL_CAN_MspInit+0x90>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_CAN_MspInit+0x90>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_CAN_MspInit+0x90>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_CAN_MspInit+0x90>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002824:	2309      	movs	r3, #9
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	4809      	ldr	r0, [pc, #36]	; (8002854 <HAL_CAN_MspInit+0x94>)
 8002830:	f002 ffbc 	bl	80057ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2105      	movs	r1, #5
 8002838:	2014      	movs	r0, #20
 800283a:	f002 f989 	bl	8004b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800283e:	2014      	movs	r0, #20
 8002840:	f002 f9a2 	bl	8004b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40006400 	.word	0x40006400
 8002850:	40023800 	.word	0x40023800
 8002854:	40020400 	.word	0x40020400

08002858 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_CRC_MspInit+0x38>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10b      	bne.n	8002882 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_CRC_MspInit+0x3c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_CRC_MspInit+0x3c>)
 8002870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_CRC_MspInit+0x3c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40023000 	.word	0x40023000
 8002894:	40023800 	.word	0x40023800

08002898 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08e      	sub	sp, #56	; 0x38
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <HAL_DCMI_MspInit+0x160>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	f040 809a 	bne.w	80029f0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028bc:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	4a4e      	ldr	r2, [pc, #312]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6353      	str	r3, [r2, #52]	; 0x34
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d4:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4a48      	ldr	r2, [pc, #288]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028da:	f043 0310 	orr.w	r3, r3, #16
 80028de:	6313      	str	r3, [r2, #48]	; 0x30
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ec:	4b43      	ldr	r3, [pc, #268]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a42      	ldr	r2, [pc, #264]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028f2:	f043 0308 	orr.w	r3, r3, #8
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b40      	ldr	r3, [pc, #256]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002904:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a3c      	ldr	r2, [pc, #240]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 800290a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800291c:	4b37      	ldr	r3, [pc, #220]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a36      	ldr	r2, [pc, #216]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 8002922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002934:	4b31      	ldr	r3, [pc, #196]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4a30      	ldr	r2, [pc, #192]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6313      	str	r3, [r2, #48]	; 0x30
 8002940:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <HAL_DCMI_MspInit+0x164>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800294c:	2360      	movs	r3, #96	; 0x60
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800295c:	230d      	movs	r3, #13
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	4619      	mov	r1, r3
 8002966:	4826      	ldr	r0, [pc, #152]	; (8002a00 <HAL_DCMI_MspInit+0x168>)
 8002968:	f002 ff20 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800296c:	2308      	movs	r3, #8
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800297c:	230d      	movs	r3, #13
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	4619      	mov	r1, r3
 8002986:	481f      	ldr	r0, [pc, #124]	; (8002a04 <HAL_DCMI_MspInit+0x16c>)
 8002988:	f002 ff10 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800298c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800299e:	230d      	movs	r3, #13
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a6:	4619      	mov	r1, r3
 80029a8:	4817      	ldr	r0, [pc, #92]	; (8002a08 <HAL_DCMI_MspInit+0x170>)
 80029aa:	f002 feff 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80029ae:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029c0:	230d      	movs	r3, #13
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	4810      	ldr	r0, [pc, #64]	; (8002a0c <HAL_DCMI_MspInit+0x174>)
 80029cc:	f002 feee 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029d0:	2350      	movs	r3, #80	; 0x50
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029e0:	230d      	movs	r3, #13
 80029e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e8:	4619      	mov	r1, r3
 80029ea:	4809      	ldr	r0, [pc, #36]	; (8002a10 <HAL_DCMI_MspInit+0x178>)
 80029ec:	f002 fede 	bl	80057ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80029f0:	bf00      	nop
 80029f2:	3738      	adds	r7, #56	; 0x38
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	50050000 	.word	0x50050000
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021800 	.word	0x40021800
 8002a0c:	40021c00 	.word	0x40021c00
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_DMA2D_MspInit+0x44>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d113      	bne.n	8002a4e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_DMA2D_MspInit+0x48>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <HAL_DMA2D_MspInit+0x48>)
 8002a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_DMA2D_MspInit+0x48>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2105      	movs	r1, #5
 8002a42:	205a      	movs	r0, #90	; 0x5a
 8002a44:	f002 f884 	bl	8004b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002a48:	205a      	movs	r0, #90	; 0x5a
 8002a4a:	f002 f89d 	bl	8004b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	4002b000 	.word	0x4002b000
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <HAL_DMA2D_MspDeInit+0x2c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_DMA2D_MspDeInit+0x30>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <HAL_DMA2D_MspDeInit+0x30>)
 8002a78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002a7e:	205a      	movs	r0, #90	; 0x5a
 8002a80:	f002 f890 	bl	8004ba4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	4002b000 	.word	0x4002b000
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_LTDC_MspInit+0x174>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f040 80a3 	bne.w	8002bfe <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ab8:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	4a53      	ldr	r2, [pc, #332]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002abe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac4:	4b51      	ldr	r3, [pc, #324]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ad0:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a4d      	ldr	r2, [pc, #308]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002ad6:	f043 0310 	orr.w	r3, r3, #16
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ae8:	4b48      	ldr	r3, [pc, #288]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	4a47      	ldr	r2, [pc, #284]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af2:	6313      	str	r3, [r2, #48]	; 0x30
 8002af4:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b00:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	4a41      	ldr	r2, [pc, #260]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0c:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b18:	4b3c      	ldr	r3, [pc, #240]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	4a3b      	ldr	r2, [pc, #236]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b22:	6313      	str	r3, [r2, #48]	; 0x30
 8002b24:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	4a35      	ldr	r2, [pc, #212]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_LTDC_MspInit+0x178>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b48:	2310      	movs	r3, #16
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b58:	230e      	movs	r3, #14
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	482b      	ldr	r0, [pc, #172]	; (8002c10 <HAL_LTDC_MspInit+0x17c>)
 8002b64:	f002 fe22 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002b68:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b7a:	230e      	movs	r3, #14
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b82:	4619      	mov	r1, r3
 8002b84:	4823      	ldr	r0, [pc, #140]	; (8002c14 <HAL_LTDC_MspInit+0x180>)
 8002b86:	f002 fe11 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002b8a:	23f7      	movs	r3, #247	; 0xf7
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b9a:	230e      	movs	r3, #14
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	481c      	ldr	r0, [pc, #112]	; (8002c18 <HAL_LTDC_MspInit+0x184>)
 8002ba6:	f002 fe01 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bbc:	2309      	movs	r3, #9
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4815      	ldr	r0, [pc, #84]	; (8002c1c <HAL_LTDC_MspInit+0x188>)
 8002bc8:	f002 fdf0 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002bcc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bde:	230e      	movs	r3, #14
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be6:	4619      	mov	r1, r3
 8002be8:	480d      	ldr	r0, [pc, #52]	; (8002c20 <HAL_LTDC_MspInit+0x18c>)
 8002bea:	f002 fddf 	bl	80057ac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2105      	movs	r1, #5
 8002bf2:	2058      	movs	r0, #88	; 0x58
 8002bf4:	f001 ffac 	bl	8004b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002bf8:	2058      	movs	r0, #88	; 0x58
 8002bfa:	f001 ffc5 	bl	8004b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3738      	adds	r7, #56	; 0x38
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40016800 	.word	0x40016800
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40022400 	.word	0x40022400
 8002c18:	40022800 	.word	0x40022800
 8002c1c:	40021800 	.word	0x40021800
 8002c20:	40022000 	.word	0x40022000

08002c24 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	; 0x30
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3b      	ldr	r2, [pc, #236]	; (8002d30 <HAL_QSPI_MspInit+0x10c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d170      	bne.n	8002d28 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	4a3a      	ldr	r2, [pc, #232]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6393      	str	r3, [r2, #56]	; 0x38
 8002c52:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c5e:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c64:	f043 0310 	orr.w	r3, r3, #16
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a2e      	ldr	r2, [pc, #184]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c8e:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_QSPI_MspInit+0x110>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cb6:	2309      	movs	r3, #9
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002cba:	f107 031c 	add.w	r3, r7, #28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	481d      	ldr	r0, [pc, #116]	; (8002d38 <HAL_QSPI_MspInit+0x114>)
 8002cc2:	f002 fd73 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002cc6:	2340      	movs	r3, #64	; 0x40
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002cd6:	230a      	movs	r3, #10
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4816      	ldr	r0, [pc, #88]	; (8002d3c <HAL_QSPI_MspInit+0x118>)
 8002ce2:	f002 fd63 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cf6:	2309      	movs	r3, #9
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfa:	f107 031c 	add.w	r3, r7, #28
 8002cfe:	4619      	mov	r1, r3
 8002d00:	480e      	ldr	r0, [pc, #56]	; (8002d3c <HAL_QSPI_MspInit+0x118>)
 8002d02:	f002 fd53 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002d06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d18:	2309      	movs	r3, #9
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	4619      	mov	r1, r3
 8002d22:	4807      	ldr	r0, [pc, #28]	; (8002d40 <HAL_QSPI_MspInit+0x11c>)
 8002d24:	f002 fd42 	bl	80057ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d28:	bf00      	nop
 8002d2a:	3730      	adds	r7, #48	; 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	a0001000 	.word	0xa0001000
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40020c00 	.word	0x40020c00

08002d44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <HAL_RTC_MspInit+0x2c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d105      	bne.n	8002d62 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_RTC_MspInit+0x30>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_RTC_MspInit+0x30>)
 8002d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40002800 	.word	0x40002800
 8002d74:	40023800 	.word	0x40023800

08002d78 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <HAL_SD_MspInit+0xb4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d144      	bne.n	8002e24 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002da4:	6453      	str	r3, [r2, #68]	; 0x44
 8002da6:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <HAL_SD_MspInit+0xb8>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002de2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002de6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002df4:	230c      	movs	r3, #12
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	480d      	ldr	r0, [pc, #52]	; (8002e34 <HAL_SD_MspInit+0xbc>)
 8002e00:	f002 fcd4 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002e04:	2304      	movs	r3, #4
 8002e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e14:	230c      	movs	r3, #12
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4806      	ldr	r0, [pc, #24]	; (8002e38 <HAL_SD_MspInit+0xc0>)
 8002e20:	f002 fcc4 	bl	80057ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e24:	bf00      	nop
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40020800 	.word	0x40020800
 8002e38:	40020c00 	.word	0x40020c00

08002e3c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002e5c:	d127      	bne.n	8002eae <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002ea2:	f107 0314 	add.w	r3, r7, #20
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4804      	ldr	r0, [pc, #16]	; (8002ebc <HAL_SPDIFRX_MspInit+0x80>)
 8002eaa:	f002 fc7f 	bl	80057ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	; 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020c00 	.word	0x40020c00

08002ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_SPI_MspInit+0xb4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d144      	bne.n	8002f6c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ee2:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002efa:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_SPI_MspInit+0xb8>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	480d      	ldr	r0, [pc, #52]	; (8002f7c <HAL_SPI_MspInit+0xbc>)
 8002f46:	f002 fc31 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002f4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f5c:	2305      	movs	r3, #5
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4619      	mov	r1, r3
 8002f66:	4806      	ldr	r0, [pc, #24]	; (8002f80 <HAL_SPI_MspInit+0xc0>)
 8002f68:	f002 fc20 	bl	80057ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f6c:	bf00      	nop
 8002f6e:	3728      	adds	r7, #40	; 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40003800 	.word	0x40003800
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40020400 	.word	0x40020400

08002f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2e      	ldr	r2, [pc, #184]	; (800304c <HAL_TIM_Base_MspInit+0xc8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d10c      	bne.n	8002fb0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002fae:	e046      	b.n	800303e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a24      	ldr	r2, [pc, #144]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
}
 8002fd2:	e034      	b.n	800303e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <HAL_TIM_Base_MspInit+0xd0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]
}
 8002ff6:	e022      	b.n	800303e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a16      	ldr	r2, [pc, #88]	; (8003058 <HAL_TIM_Base_MspInit+0xd4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10c      	bne.n	800301c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]
}
 800301a:	e010      	b.n	800303e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_TIM_Base_MspInit+0xd8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10b      	bne.n	800303e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <HAL_TIM_Base_MspInit+0xcc>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
}
 800303e:	bf00      	nop
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40010000 	.word	0x40010000
 8003050:	40023800 	.word	0x40023800
 8003054:	40000400 	.word	0x40000400
 8003058:	40000c00 	.word	0x40000c00
 800305c:	40010400 	.word	0x40010400

08003060 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_TIM_PWM_MspInit+0x38>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10b      	bne.n	800308a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_TIM_PWM_MspInit+0x3c>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_TIM_PWM_MspInit+0x3c>)
 8003078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <HAL_TIM_PWM_MspInit+0x3c>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40001800 	.word	0x40001800
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 031c 	add.w	r3, r7, #28
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a56      	ldr	r2, [pc, #344]	; (8003218 <HAL_TIM_MspPostInit+0x178>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d11d      	bne.n	80030fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	4b56      	ldr	r3, [pc, #344]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a55      	ldr	r2, [pc, #340]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80030da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e8:	2300      	movs	r3, #0
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	4619      	mov	r1, r3
 80030f6:	484a      	ldr	r0, [pc, #296]	; (8003220 <HAL_TIM_MspPostInit+0x180>)
 80030f8:	f002 fb58 	bl	80057ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80030fc:	e087      	b.n	800320e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d11d      	bne.n	8003144 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003108:	4b44      	ldr	r3, [pc, #272]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	4a43      	ldr	r2, [pc, #268]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6313      	str	r3, [r2, #48]	; 0x30
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003132:	2301      	movs	r3, #1
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003136:	f107 031c 	add.w	r3, r7, #28
 800313a:	4619      	mov	r1, r3
 800313c:	4838      	ldr	r0, [pc, #224]	; (8003220 <HAL_TIM_MspPostInit+0x180>)
 800313e:	f002 fb35 	bl	80057ac <HAL_GPIO_Init>
}
 8003142:	e064      	b.n	800320e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a36      	ldr	r2, [pc, #216]	; (8003224 <HAL_TIM_MspPostInit+0x184>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d11c      	bne.n	8003188 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314e:	4b33      	ldr	r3, [pc, #204]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a32      	ldr	r2, [pc, #200]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003166:	2310      	movs	r3, #16
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003176:	2302      	movs	r3, #2
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	4619      	mov	r1, r3
 8003180:	4829      	ldr	r0, [pc, #164]	; (8003228 <HAL_TIM_MspPostInit+0x188>)
 8003182:	f002 fb13 	bl	80057ac <HAL_GPIO_Init>
}
 8003186:	e042      	b.n	800320e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a27      	ldr	r2, [pc, #156]	; (800322c <HAL_TIM_MspPostInit+0x18c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d11c      	bne.n	80031cc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003192:	4b22      	ldr	r3, [pc, #136]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a21      	ldr	r2, [pc, #132]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031ba:	2302      	movs	r3, #2
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	4619      	mov	r1, r3
 80031c4:	481a      	ldr	r0, [pc, #104]	; (8003230 <HAL_TIM_MspPostInit+0x190>)
 80031c6:	f002 faf1 	bl	80057ac <HAL_GPIO_Init>
}
 80031ca:	e020      	b.n	800320e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <HAL_TIM_MspPostInit+0x194>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d11b      	bne.n	800320e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 80031dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_TIM_MspPostInit+0x17c>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80031ee:	2340      	movs	r3, #64	; 0x40
 80031f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80031fe:	2309      	movs	r3, #9
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	4619      	mov	r1, r3
 8003208:	480b      	ldr	r0, [pc, #44]	; (8003238 <HAL_TIM_MspPostInit+0x198>)
 800320a:	f002 facf 	bl	80057ac <HAL_GPIO_Init>
}
 800320e:	bf00      	nop
 8003210:	3730      	adds	r7, #48	; 0x30
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40010000 	.word	0x40010000
 800321c:	40023800 	.word	0x40023800
 8003220:	40020000 	.word	0x40020000
 8003224:	40000400 	.word	0x40000400
 8003228:	40020400 	.word	0x40020400
 800322c:	40000c00 	.word	0x40000c00
 8003230:	40022000 	.word	0x40022000
 8003234:	40001800 	.word	0x40001800
 8003238:	40021c00 	.word	0x40021c00

0800323c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a3c      	ldr	r2, [pc, #240]	; (800334c <HAL_UART_MspInit+0x110>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d145      	bne.n	80032ea <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800325e:	4b3c      	ldr	r3, [pc, #240]	; (8003350 <HAL_UART_MspInit+0x114>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	4a3b      	ldr	r2, [pc, #236]	; (8003350 <HAL_UART_MspInit+0x114>)
 8003264:	f043 0310 	orr.w	r3, r3, #16
 8003268:	6453      	str	r3, [r2, #68]	; 0x44
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <HAL_UART_MspInit+0x114>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_UART_MspInit+0x114>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a35      	ldr	r2, [pc, #212]	; (8003350 <HAL_UART_MspInit+0x114>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_UART_MspInit+0x114>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	4b30      	ldr	r3, [pc, #192]	; (8003350 <HAL_UART_MspInit+0x114>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <HAL_UART_MspInit+0x114>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_UART_MspInit+0x114>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b6:	2307      	movs	r3, #7
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	4619      	mov	r1, r3
 80032c0:	4824      	ldr	r0, [pc, #144]	; (8003354 <HAL_UART_MspInit+0x118>)
 80032c2:	f002 fa73 	bl	80057ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80032c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032d8:	2307      	movs	r3, #7
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80032dc:	f107 031c 	add.w	r3, r7, #28
 80032e0:	4619      	mov	r1, r3
 80032e2:	481d      	ldr	r0, [pc, #116]	; (8003358 <HAL_UART_MspInit+0x11c>)
 80032e4:	f002 fa62 	bl	80057ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032e8:	e02c      	b.n	8003344 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_UART_MspInit+0x120>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d127      	bne.n	8003344 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_UART_MspInit+0x114>)
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	4a15      	ldr	r2, [pc, #84]	; (8003350 <HAL_UART_MspInit+0x114>)
 80032fa:	f043 0320 	orr.w	r3, r3, #32
 80032fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_UART_MspInit+0x114>)
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_UART_MspInit+0x114>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_UART_MspInit+0x114>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6313      	str	r3, [r2, #48]	; 0x30
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_UART_MspInit+0x114>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003324:	23c0      	movs	r3, #192	; 0xc0
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003334:	2308      	movs	r3, #8
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4619      	mov	r1, r3
 800333e:	4808      	ldr	r0, [pc, #32]	; (8003360 <HAL_UART_MspInit+0x124>)
 8003340:	f002 fa34 	bl	80057ac <HAL_GPIO_Init>
}
 8003344:	bf00      	nop
 8003346:	3730      	adds	r7, #48	; 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40011000 	.word	0x40011000
 8003350:	40023800 	.word	0x40023800
 8003354:	40020400 	.word	0x40020400
 8003358:	40020000 	.word	0x40020000
 800335c:	40011400 	.word	0x40011400
 8003360:	40020800 	.word	0x40020800

08003364 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003378:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_FMC_MspInit+0x100>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d16d      	bne.n	800345c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003380:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_FMC_MspInit+0x100>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_FMC_MspInit+0x104>)
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	4a37      	ldr	r2, [pc, #220]	; (8003468 <HAL_FMC_MspInit+0x104>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6393      	str	r3, [r2, #56]	; 0x38
 8003392:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_FMC_MspInit+0x104>)
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800339e:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033a2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ac:	2303      	movs	r3, #3
 80033ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033b0:	230c      	movs	r3, #12
 80033b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	482c      	ldr	r0, [pc, #176]	; (800346c <HAL_FMC_MspInit+0x108>)
 80033ba:	f002 f9f7 	bl	80057ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80033be:	f248 1333 	movw	r3, #33075	; 0x8133
 80033c2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033cc:	2303      	movs	r3, #3
 80033ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033d0:	230c      	movs	r3, #12
 80033d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4825      	ldr	r0, [pc, #148]	; (8003470 <HAL_FMC_MspInit+0x10c>)
 80033da:	f002 f9e7 	bl	80057ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80033de:	f24c 7303 	movw	r3, #50947	; 0xc703
 80033e2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033f0:	230c      	movs	r3, #12
 80033f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	481e      	ldr	r0, [pc, #120]	; (8003474 <HAL_FMC_MspInit+0x110>)
 80033fa:	f002 f9d7 	bl	80057ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80033fe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003402:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	2303      	movs	r3, #3
 800340e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003410:	230c      	movs	r3, #12
 8003412:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4817      	ldr	r0, [pc, #92]	; (8003478 <HAL_FMC_MspInit+0x114>)
 800341a:	f002 f9c7 	bl	80057ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800341e:	2328      	movs	r3, #40	; 0x28
 8003420:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800342e:	230c      	movs	r3, #12
 8003430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4811      	ldr	r0, [pc, #68]	; (800347c <HAL_FMC_MspInit+0x118>)
 8003438:	f002 f9b8 	bl	80057ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800343c:	2308      	movs	r3, #8
 800343e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003448:	2303      	movs	r3, #3
 800344a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800344c:	230c      	movs	r3, #12
 800344e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	4619      	mov	r1, r3
 8003454:	480a      	ldr	r0, [pc, #40]	; (8003480 <HAL_FMC_MspInit+0x11c>)
 8003456:	f002 f9a9 	bl	80057ac <HAL_GPIO_Init>
 800345a:	e000      	b.n	800345e <HAL_FMC_MspInit+0xfa>
    return;
 800345c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	200003e4 	.word	0x200003e4
 8003468:	40023800 	.word	0x40023800
 800346c:	40021000 	.word	0x40021000
 8003470:	40021800 	.word	0x40021800
 8003474:	40020c00 	.word	0x40020c00
 8003478:	40021400 	.word	0x40021400
 800347c:	40021c00 	.word	0x40021c00
 8003480:	40020800 	.word	0x40020800

08003484 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800348c:	f7ff ff6a 	bl	8003364 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <HAL_SAI_MspInit+0xbc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d124      	bne.n	80034f4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_SAI_MspInit+0xc0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10b      	bne.n	80034ca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034b2:	4b2a      	ldr	r3, [pc, #168]	; (800355c <HAL_SAI_MspInit+0xc4>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a29      	ldr	r2, [pc, #164]	; (800355c <HAL_SAI_MspInit+0xc4>)
 80034b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_SAI_MspInit+0xc4>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_SAI_MspInit+0xc0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_SAI_MspInit+0xc0>)
 80034d2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80034d4:	23f0      	movs	r3, #240	; 0xf0
 80034d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e0:	2300      	movs	r3, #0
 80034e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034e4:	230a      	movs	r3, #10
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4619      	mov	r1, r3
 80034ee:	481c      	ldr	r0, [pc, #112]	; (8003560 <HAL_SAI_MspInit+0xc8>)
 80034f0:	f002 f95c 	bl	80057ac <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_SAI_MspInit+0xcc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d125      	bne.n	800354a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80034fe:	4b16      	ldr	r3, [pc, #88]	; (8003558 <HAL_SAI_MspInit+0xc0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_SAI_MspInit+0xc4>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <HAL_SAI_MspInit+0xc4>)
 800350c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_SAI_MspInit+0xc4>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_SAI_MspInit+0xc0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <HAL_SAI_MspInit+0xc0>)
 8003526:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800353a:	230a      	movs	r3, #10
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	4619      	mov	r1, r3
 8003544:	4808      	ldr	r0, [pc, #32]	; (8003568 <HAL_SAI_MspInit+0xd0>)
 8003546:	f002 f931 	bl	80057ac <HAL_GPIO_Init>

    }
}
 800354a:	bf00      	nop
 800354c:	3728      	adds	r7, #40	; 0x28
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40015c04 	.word	0x40015c04
 8003558:	200003e8 	.word	0x200003e8
 800355c:	40023800 	.word	0x40023800
 8003560:	40022000 	.word	0x40022000
 8003564:	40015c24 	.word	0x40015c24
 8003568:	40021800 	.word	0x40021800

0800356c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08c      	sub	sp, #48	; 0x30
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800357c:	2200      	movs	r2, #0
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	2036      	movs	r0, #54	; 0x36
 8003582:	f001 fae5 	bl	8004b50 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003586:	2036      	movs	r0, #54	; 0x36
 8003588:	f001 fafe 	bl	8004b88 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <HAL_InitTick+0xa0>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <HAL_InitTick+0xa0>)
 8003592:	f043 0310 	orr.w	r3, r3, #16
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_InitTick+0xa0>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035a4:	f107 0210 	add.w	r2, r7, #16
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 f93a 	bl	8007828 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80035b4:	f004 f910 	bl	80077d8 <HAL_RCC_GetPCLK1Freq>
 80035b8:	4603      	mov	r3, r0
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	4a13      	ldr	r2, [pc, #76]	; (8003610 <HAL_InitTick+0xa4>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0c9b      	lsrs	r3, r3, #18
 80035c8:	3b01      	subs	r3, #1
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_InitTick+0xa8>)
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <HAL_InitTick+0xac>)
 80035d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_InitTick+0xa8>)
 80035d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035da:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <HAL_InitTick+0xa8>)
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <HAL_InitTick+0xa8>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_InitTick+0xa8>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80035ec:	4809      	ldr	r0, [pc, #36]	; (8003614 <HAL_InitTick+0xa8>)
 80035ee:	f006 fdc5 	bl	800a17c <HAL_TIM_Base_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80035f8:	4806      	ldr	r0, [pc, #24]	; (8003614 <HAL_InitTick+0xa8>)
 80035fa:	f006 fdeb 	bl	800a1d4 <HAL_TIM_Base_Start_IT>
 80035fe:	4603      	mov	r3, r0
 8003600:	e000      	b.n	8003604 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
}
 8003604:	4618      	mov	r0, r3
 8003606:	3730      	adds	r7, #48	; 0x30
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	431bde83 	.word	0x431bde83
 8003614:	2000c900 	.word	0x2000c900
 8003618:	40001000 	.word	0x40001000

0800361c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800362e:	e7fe      	b.n	800362e <HardFault_Handler+0x4>

08003630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <MemManage_Handler+0x4>

08003636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800363a:	e7fe      	b.n	800363a <BusFault_Handler+0x4>

0800363c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <UsageFault_Handler+0x4>

08003642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <CAN1_RX0_IRQHandler+0x10>)
 8003656:	f000 ff6f 	bl	8004538 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	2000c7fc 	.word	0x2000c7fc

08003664 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <TIM6_DAC_IRQHandler+0x10>)
 800366a:	f006 fe08 	bl	800a27e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000c900 	.word	0x2000c900

08003678 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <LTDC_IRQHandler+0x10>)
 800367e:	f003 f86f 	bl	8006760 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2000c4d4 	.word	0x2000c4d4

0800368c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <DMA2D_IRQHandler+0x10>)
 8003692:	f001 fe4c 	bl	800532e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2000c774 	.word	0x2000c774

080036a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
	return 1;
 80036a4:	2301      	movs	r3, #1
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <_kill>:

int _kill(int pid, int sig)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036ba:	f024 ffd5 	bl	8028668 <__errno>
 80036be:	4603      	mov	r3, r0
 80036c0:	2216      	movs	r2, #22
 80036c2:	601a      	str	r2, [r3, #0]
	return -1;
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <_exit>:

void _exit (int status)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036d8:	f04f 31ff 	mov.w	r1, #4294967295
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ffe7 	bl	80036b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036e2:	e7fe      	b.n	80036e2 <_exit+0x12>

080036e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e00a      	b.n	800370c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036f6:	f3af 8000 	nop.w
 80036fa:	4601      	mov	r1, r0
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	60ba      	str	r2, [r7, #8]
 8003702:	b2ca      	uxtb	r2, r1
 8003704:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	dbf0      	blt.n	80036f6 <_read+0x12>
	}

return len;
 8003714:	687b      	ldr	r3, [r7, #4]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	e009      	b.n	8003744 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	60ba      	str	r2, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3301      	adds	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	dbf1      	blt.n	8003730 <_write+0x12>
	}
	return len;
 800374c:	687b      	ldr	r3, [r7, #4]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <_close>:

int _close(int file)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
	return -1;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800377e:	605a      	str	r2, [r3, #4]
	return 0;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <_isatty>:

int _isatty(int file)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
	return 1;
 8003796:	2301      	movs	r3, #1
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
	return 0;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <_sbrk+0x50>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_sbrk+0x16>
		heap_end = &end;
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <_sbrk+0x50>)
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <_sbrk+0x54>)
 80037d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <_sbrk+0x50>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <_sbrk+0x50>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	466a      	mov	r2, sp
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d907      	bls.n	80037fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037ea:	f024 ff3d 	bl	8028668 <__errno>
 80037ee:	4603      	mov	r3, r0
 80037f0:	220c      	movs	r2, #12
 80037f2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
 80037f8:	e006      	b.n	8003808 <_sbrk+0x48>
	}

	heap_end += incr;
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <_sbrk+0x50>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	4a03      	ldr	r2, [pc, #12]	; (8003810 <_sbrk+0x50>)
 8003804:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200003ec 	.word	0x200003ec
 8003814:	2000cdc0 	.word	0x2000cdc0

08003818 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800381c:	4b08      	ldr	r3, [pc, #32]	; (8003840 <SystemInit+0x28>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	4a07      	ldr	r2, [pc, #28]	; (8003840 <SystemInit+0x28>)
 8003824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <SystemInit+0x28>)
 800382e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003832:	609a      	str	r2, [r3, #8]
#endif
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800387c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003848:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800384a:	e003      	b.n	8003854 <LoopCopyDataInit>

0800384c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800384e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003850:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003852:	3104      	adds	r1, #4

08003854 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003854:	480b      	ldr	r0, [pc, #44]	; (8003884 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003858:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800385a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800385c:	d3f6      	bcc.n	800384c <CopyDataInit>
  ldr  r2, =_sbss
 800385e:	4a0b      	ldr	r2, [pc, #44]	; (800388c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003860:	e002      	b.n	8003868 <LoopFillZerobss>

08003862 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003862:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003864:	f842 3b04 	str.w	r3, [r2], #4

08003868 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800386a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800386c:	d3f9      	bcc.n	8003862 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800386e:	f7ff ffd3 	bl	8003818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003872:	f024 ff11 	bl	8028698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003876:	f7fd fafb 	bl	8000e70 <main>
  bx  lr    
 800387a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800387c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003880:	080658ec 	.word	0x080658ec
  ldr  r0, =_sdata
 8003884:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003888:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 800388c:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8003890:	2000cdc0 	.word	0x2000cdc0

08003894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003894:	e7fe      	b.n	8003894 <ADC_IRQHandler>

08003896 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800389a:	2003      	movs	r0, #3
 800389c:	f001 f94d 	bl	8004b3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7ff fe63 	bl	800356c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80038a6:	f7fe ff09 	bl	80026bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_IncTick+0x20>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_IncTick+0x24>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_IncTick+0x24>)
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000020 	.word	0x20000020
 80038d4:	2000c940 	.word	0x2000c940

080038d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return uwTick;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_GetTick+0x14>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	2000c940 	.word	0x2000c940

080038f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7ff ffee 	bl	80038d8 <HAL_GetTick>
 80038fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d005      	beq.n	8003916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_Delay+0x44>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003916:	bf00      	nop
 8003918:	f7ff ffde 	bl	80038d8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	429a      	cmp	r2, r3
 8003926:	d8f7      	bhi.n	8003918 <HAL_Delay+0x28>
  {
  }
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000020 	.word	0x20000020

08003938 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a04      	ldr	r2, [pc, #16]	; (8003954 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003942:	f043 0302 	orr.w	r3, r3, #2
 8003946:	6053      	str	r3, [r2, #4]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e0042000 	.word	0xe0042000

08003958 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8003962:	f043 0304 	orr.w	r3, r3, #4
 8003966:	6053      	str	r3, [r2, #4]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e0042000 	.word	0xe0042000

08003978 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e031      	b.n	80039f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fe feb8 	bl	800270c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d116      	bne.n	80039e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_ADC_Init+0x84>)
 80039bc:	4013      	ands	r3, r2
 80039be:	f043 0202 	orr.w	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f964 	bl	8003c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
 80039e2:	e001      	b.n	80039e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	ffffeefd 	.word	0xffffeefd

08003a00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x1c>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e12a      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x272>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b09      	cmp	r3, #9
 8003a2a:	d93a      	bls.n	8003aa2 <HAL_ADC_ConfigChannel+0xa2>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a34:	d035      	beq.n	8003aa2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68d9      	ldr	r1, [r3, #12]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b1e      	subs	r3, #30
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	400a      	ands	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a87      	ldr	r2, [pc, #540]	; (8003c80 <HAL_ADC_ConfigChannel+0x280>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10a      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68d9      	ldr	r1, [r3, #12]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	061a      	lsls	r2, r3, #24
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a7a:	e035      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68d9      	ldr	r1, [r3, #12]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4403      	add	r3, r0
 8003a94:	3b1e      	subs	r3, #30
 8003a96:	409a      	lsls	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aa0:	e022      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6919      	ldr	r1, [r3, #16]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43da      	mvns	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6919      	ldr	r1, [r3, #16]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4603      	mov	r3, r0
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4403      	add	r3, r0
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d824      	bhi.n	8003b3a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	3b05      	subs	r3, #5
 8003b02:	221f      	movs	r2, #31
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	400a      	ands	r2, r1
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	3b05      	subs	r3, #5
 8003b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	635a      	str	r2, [r3, #52]	; 0x34
 8003b38:	e04c      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	d824      	bhi.n	8003b8c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	3b23      	subs	r3, #35	; 0x23
 8003b54:	221f      	movs	r2, #31
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	400a      	ands	r2, r1
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4618      	mov	r0, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3b23      	subs	r3, #35	; 0x23
 8003b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
 8003b8a:	e023      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3b41      	subs	r3, #65	; 0x41
 8003b9e:	221f      	movs	r2, #31
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	400a      	ands	r2, r1
 8003bac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	4618      	mov	r0, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3b41      	subs	r3, #65	; 0x41
 8003bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <HAL_ADC_ConfigChannel+0x284>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x1f4>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be6:	d105      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003be8:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <HAL_ADC_ConfigChannel+0x288>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a26      	ldr	r2, [pc, #152]	; (8003c88 <HAL_ADC_ConfigChannel+0x288>)
 8003bee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003bf2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <HAL_ADC_ConfigChannel+0x284>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d109      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x212>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b12      	cmp	r3, #18
 8003c04:	d105      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_ADC_ConfigChannel+0x288>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_ADC_ConfigChannel+0x288>)
 8003c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c10:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_ADC_ConfigChannel+0x284>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d125      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x268>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <HAL_ADC_ConfigChannel+0x280>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <HAL_ADC_ConfigChannel+0x22e>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b11      	cmp	r3, #17
 8003c2c:	d11c      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003c2e:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <HAL_ADC_ConfigChannel+0x288>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <HAL_ADC_ConfigChannel+0x288>)
 8003c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c38:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <HAL_ADC_ConfigChannel+0x280>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <HAL_ADC_ConfigChannel+0x28c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <HAL_ADC_ConfigChannel+0x290>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0c9a      	lsrs	r2, r3, #18
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c5a:	e002      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f9      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	10000012 	.word	0x10000012
 8003c84:	40012000 	.word	0x40012000
 8003c88:	40012300 	.word	0x40012300
 8003c8c:	20000018 	.word	0x20000018
 8003c90:	431bde83 	.word	0x431bde83

08003c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c9c:	4b78      	ldr	r3, [pc, #480]	; (8003e80 <ADC_Init+0x1ec>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a77      	ldr	r2, [pc, #476]	; (8003e80 <ADC_Init+0x1ec>)
 8003ca2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ca6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ca8:	4b75      	ldr	r3, [pc, #468]	; (8003e80 <ADC_Init+0x1ec>)
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4973      	ldr	r1, [pc, #460]	; (8003e80 <ADC_Init+0x1ec>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	021a      	lsls	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <ADC_Init+0x1f0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d022      	beq.n	8003d6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6899      	ldr	r1, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	e00f      	b.n	8003d8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0202 	bic.w	r2, r2, #2
 8003d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	005a      	lsls	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01b      	beq.n	8003df4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	3b01      	subs	r3, #1
 8003de8:	035a      	lsls	r2, r3, #13
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	e007      	b.n	8003e04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	051a      	lsls	r2, r3, #20
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e46:	025a      	lsls	r2, r3, #9
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6899      	ldr	r1, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	029a      	lsls	r2, r3, #10
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40012300 	.word	0x40012300
 8003e84:	0f000001 	.word	0x0f000001

08003e88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0ed      	b.n	8004076 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d102      	bne.n	8003eac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fe fc8a 	bl	80027c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0202 	bic.w	r2, r2, #2
 8003eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ebc:	f7ff fd0c 	bl	80038d8 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ec2:	e012      	b.n	8003eea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ec4:	f7ff fd08 	bl	80038d8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b0a      	cmp	r3, #10
 8003ed0:	d90b      	bls.n	8003eea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0c5      	b.n	8004076 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f08:	f7ff fce6 	bl	80038d8 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f0e:	e012      	b.n	8003f36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f10:	f7ff fce2 	bl	80038d8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b0a      	cmp	r3, #10
 8003f1c:	d90b      	bls.n	8003f36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e09f      	b.n	8004076 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0e5      	beq.n	8003f10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7e1b      	ldrb	r3, [r3, #24]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d108      	bne.n	8003f5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e007      	b.n	8003f6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	7e5b      	ldrb	r3, [r3, #25]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d108      	bne.n	8003f88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e007      	b.n	8003f98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7e9b      	ldrb	r3, [r3, #26]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d108      	bne.n	8003fb2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0220 	orr.w	r2, r2, #32
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e007      	b.n	8003fc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0220 	bic.w	r2, r2, #32
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7edb      	ldrb	r3, [r3, #27]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d108      	bne.n	8003fdc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0210 	bic.w	r2, r2, #16
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e007      	b.n	8003fec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0210 	orr.w	r2, r2, #16
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	7f1b      	ldrb	r3, [r3, #28]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d108      	bne.n	8004006 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0208 	orr.w	r2, r2, #8
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e007      	b.n	8004016 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0208 	bic.w	r2, r2, #8
 8004014:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7f5b      	ldrb	r3, [r3, #29]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d108      	bne.n	8004030 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0204 	orr.w	r2, r2, #4
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e007      	b.n	8004040 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0204 	bic.w	r2, r2, #4
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	ea42 0103 	orr.w	r1, r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004096:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d003      	beq.n	80040a6 <HAL_CAN_ConfigFilter+0x26>
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	f040 80be 	bne.w	8004222 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80040a6:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_CAN_ConfigFilter+0x1bc>)
 80040a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040b0:	f043 0201 	orr.w	r2, r3, #1
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	431a      	orrs	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	2201      	movs	r2, #1
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	401a      	ands	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d123      	bne.n	8004150 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800412a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3248      	adds	r2, #72	; 0x48
 8004130:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004144:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	3348      	adds	r3, #72	; 0x48
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d122      	bne.n	800419e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	431a      	orrs	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004178:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	3248      	adds	r2, #72	; 0x48
 800417e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004192:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004194:	6979      	ldr	r1, [r7, #20]
 8004196:	3348      	adds	r3, #72	; 0x48
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	440b      	add	r3, r1
 800419c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	401a      	ands	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80041b8:	e007      	b.n	80041ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	43db      	mvns	r3, r3
 80041dc:	401a      	ands	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80041e4:	e007      	b.n	80041f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	431a      	orrs	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004214:	f023 0201 	bic.w	r2, r3, #1
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e006      	b.n	8004230 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40006400 	.word	0x40006400

08004240 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d12e      	bne.n	80042b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800426c:	f7ff fb34 	bl	80038d8 <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004272:	e012      	b.n	800429a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004274:	f7ff fb30 	bl	80038d8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b0a      	cmp	r3, #10
 8004280:	d90b      	bls.n	800429a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2205      	movs	r2, #5
 8004292:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e012      	b.n	80042c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e5      	bne.n	8004274 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e006      	b.n	80042c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042dc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d003      	beq.n	80042ec <HAL_CAN_GetRxMessage+0x24>
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	f040 80f3 	bne.w	80044d2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10e      	bne.n	8004310 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d116      	bne.n	800432e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0e7      	b.n	80044e0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0d8      	b.n	80044e0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	331b      	adds	r3, #27
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4413      	add	r3, r2
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0204 	and.w	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10c      	bne.n	8004366 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	331b      	adds	r3, #27
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	4413      	add	r3, r2
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0d5b      	lsrs	r3, r3, #21
 800435c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e00b      	b.n	800437e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	331b      	adds	r3, #27
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	4413      	add	r3, r2
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	08db      	lsrs	r3, r3, #3
 8004376:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	331b      	adds	r3, #27
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	4413      	add	r3, r2
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0202 	and.w	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	331b      	adds	r3, #27
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	331b      	adds	r3, #27
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	331b      	adds	r3, #27
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	4413      	add	r3, r2
 80043d0:	3304      	adds	r3, #4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	0a1a      	lsrs	r2, r3, #8
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	4413      	add	r3, r2
 8004416:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0c1a      	lsrs	r2, r3, #16
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	3302      	adds	r3, #2
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	4413      	add	r3, r2
 8004430:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	0e1a      	lsrs	r2, r3, #24
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	3303      	adds	r3, #3
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	4413      	add	r3, r2
 800444a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	3304      	adds	r3, #4
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	4413      	add	r3, r2
 8004462:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0a1a      	lsrs	r2, r3, #8
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	3305      	adds	r3, #5
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4413      	add	r3, r2
 800447c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	0c1a      	lsrs	r2, r3, #16
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	3306      	adds	r3, #6
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	4413      	add	r3, r2
 8004496:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0e1a      	lsrs	r2, r3, #24
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	3307      	adds	r3, #7
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d108      	bne.n	80044be <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0220 	orr.w	r2, r2, #32
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	e007      	b.n	80044ce <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0220 	orr.w	r2, r2, #32
 80044cc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e006      	b.n	80044e0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d002      	beq.n	800450a <HAL_CAN_ActivateNotification+0x1e>
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d109      	bne.n	800451e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6959      	ldr	r1, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e006      	b.n	800452c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
  }
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d07c      	beq.n	8004678 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d023      	beq.n	80045d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2201      	movs	r2, #1
 800458e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f983 	bl	80048a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80045a0:	e016      	b.n	80045d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	e00c      	b.n	80045d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	e002      	b.n	80045d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f989 	bl	80048e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d024      	beq.n	8004624 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f963 	bl	80048ba <HAL_CAN_TxMailbox1CompleteCallback>
 80045f4:	e016      	b.n	8004624 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
 8004608:	e00c      	b.n	8004624 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	e002      	b.n	8004624 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f969 	bl	80048f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d024      	beq.n	8004678 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004636:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f943 	bl	80048ce <HAL_CAN_TxMailbox2CompleteCallback>
 8004648:	e016      	b.n	8004678 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
 800465c:	e00c      	b.n	8004678 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e002      	b.n	8004678 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f949 	bl	800490a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004692:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2210      	movs	r2, #16
 800469a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2208      	movs	r2, #8
 80046b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f930 	bl	800491e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc fdb2 	bl	8001240 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00c      	beq.n	8004700 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2210      	movs	r2, #16
 80046fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2208      	movs	r2, #8
 800471a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f912 	bl	8004946 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8f9 	bl	8004932 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2210      	movs	r2, #16
 800475a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f8fc 	bl	800495a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2208      	movs	r2, #8
 800477c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8f5 	bl	800496e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d07b      	beq.n	8004886 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d072      	beq.n	800487e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	f043 0302 	orr.w	r3, r3, #2
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	f043 0304 	orr.w	r3, r3, #4
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d043      	beq.n	800487e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03e      	beq.n	800487e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004806:	2b60      	cmp	r3, #96	; 0x60
 8004808:	d02b      	beq.n	8004862 <HAL_CAN_IRQHandler+0x32a>
 800480a:	2b60      	cmp	r3, #96	; 0x60
 800480c:	d82e      	bhi.n	800486c <HAL_CAN_IRQHandler+0x334>
 800480e:	2b50      	cmp	r3, #80	; 0x50
 8004810:	d022      	beq.n	8004858 <HAL_CAN_IRQHandler+0x320>
 8004812:	2b50      	cmp	r3, #80	; 0x50
 8004814:	d82a      	bhi.n	800486c <HAL_CAN_IRQHandler+0x334>
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d019      	beq.n	800484e <HAL_CAN_IRQHandler+0x316>
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	d826      	bhi.n	800486c <HAL_CAN_IRQHandler+0x334>
 800481e:	2b30      	cmp	r3, #48	; 0x30
 8004820:	d010      	beq.n	8004844 <HAL_CAN_IRQHandler+0x30c>
 8004822:	2b30      	cmp	r3, #48	; 0x30
 8004824:	d822      	bhi.n	800486c <HAL_CAN_IRQHandler+0x334>
 8004826:	2b10      	cmp	r3, #16
 8004828:	d002      	beq.n	8004830 <HAL_CAN_IRQHandler+0x2f8>
 800482a:	2b20      	cmp	r3, #32
 800482c:	d005      	beq.n	800483a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800482e:	e01d      	b.n	800486c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	f043 0308 	orr.w	r3, r3, #8
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004838:	e019      	b.n	800486e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	f043 0310 	orr.w	r3, r3, #16
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004842:	e014      	b.n	800486e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f043 0320 	orr.w	r3, r3, #32
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800484c:	e00f      	b.n	800486e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004856:	e00a      	b.n	800486e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004860:	e005      	b.n	800486e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800486a:	e000      	b.n	800486e <HAL_CAN_IRQHandler+0x336>
            break;
 800486c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800487c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2204      	movs	r2, #4
 8004884:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f872 	bl	8004982 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800489e:	bf00      	nop
 80048a0:	3728      	adds	r7, #40	; 0x28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <__NVIC_SetPriorityGrouping+0x40>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049b4:	4013      	ands	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <__NVIC_SetPriorityGrouping+0x44>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049c6:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <__NVIC_SetPriorityGrouping+0x40>)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	60d3      	str	r3, [r2, #12]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	e000ed00 	.word	0xe000ed00
 80049dc:	05fa0000 	.word	0x05fa0000

080049e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <__NVIC_GetPriorityGrouping+0x18>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	f003 0307 	and.w	r3, r3, #7
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db0b      	blt.n	8004a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	f003 021f 	and.w	r2, r3, #31
 8004a14:	4907      	ldr	r1, [pc, #28]	; (8004a34 <__NVIC_EnableIRQ+0x38>)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	e000e100 	.word	0xe000e100

08004a38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	db12      	blt.n	8004a70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	f003 021f 	and.w	r2, r3, #31
 8004a50:	490a      	ldr	r1, [pc, #40]	; (8004a7c <__NVIC_DisableIRQ+0x44>)
 8004a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	2001      	movs	r0, #1
 8004a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a5e:	3320      	adds	r3, #32
 8004a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a64:	f3bf 8f4f 	dsb	sy
}
 8004a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a6a:	f3bf 8f6f 	isb	sy
}
 8004a6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000e100 	.word	0xe000e100

08004a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	db0a      	blt.n	8004aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	490c      	ldr	r1, [pc, #48]	; (8004acc <__NVIC_SetPriority+0x4c>)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	0112      	lsls	r2, r2, #4
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa8:	e00a      	b.n	8004ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4908      	ldr	r1, [pc, #32]	; (8004ad0 <__NVIC_SetPriority+0x50>)
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	3b04      	subs	r3, #4
 8004ab8:	0112      	lsls	r2, r2, #4
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	440b      	add	r3, r1
 8004abe:	761a      	strb	r2, [r3, #24]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000e100 	.word	0xe000e100
 8004ad0:	e000ed00 	.word	0xe000ed00

08004ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f1c3 0307 	rsb	r3, r3, #7
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	bf28      	it	cs
 8004af2:	2304      	movcs	r3, #4
 8004af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3304      	adds	r3, #4
 8004afa:	2b06      	cmp	r3, #6
 8004afc:	d902      	bls.n	8004b04 <NVIC_EncodePriority+0x30>
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3b03      	subs	r3, #3
 8004b02:	e000      	b.n	8004b06 <NVIC_EncodePriority+0x32>
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43da      	mvns	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	401a      	ands	r2, r3
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	43d9      	mvns	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b2c:	4313      	orrs	r3, r2
         );
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3724      	adds	r7, #36	; 0x24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ff28 	bl	8004998 <__NVIC_SetPriorityGrouping>
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b62:	f7ff ff3d 	bl	80049e0 <__NVIC_GetPriorityGrouping>
 8004b66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	6978      	ldr	r0, [r7, #20]
 8004b6e:	f7ff ffb1 	bl	8004ad4 <NVIC_EncodePriority>
 8004b72:	4602      	mov	r2, r0
 8004b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff80 	bl	8004a80 <__NVIC_SetPriority>
}
 8004b80:	bf00      	nop
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff ff30 	bl	80049fc <__NVIC_EnableIRQ>
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff40 	bl	8004a38 <__NVIC_DisableIRQ>
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e054      	b.n	8004c7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	7f5b      	ldrb	r3, [r3, #29]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fd fe38 	bl	8002858 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	791b      	ldrb	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10c      	bne.n	8004c10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_CRC_Init+0xc4>)
 8004bfc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0218 	bic.w	r2, r2, #24
 8004c0c:	609a      	str	r2, [r3, #8]
 8004c0e:	e00c      	b.n	8004c2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6899      	ldr	r1, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f834 	bl	8004c88 <HAL_CRCEx_Polynomial_Set>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e028      	b.n	8004c7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	795b      	ldrb	r3, [r3, #5]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3a:	611a      	str	r2, [r3, #16]
 8004c3c:	e004      	b.n	8004c48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6912      	ldr	r2, [r2, #16]
 8004c46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699a      	ldr	r2, [r3, #24]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	04c11db7 	.word	0x04c11db7

08004c88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c98:	231f      	movs	r3, #31
 8004c9a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c9c:	bf00      	nop
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	613a      	str	r2, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_CRCEx_Polynomial_Set+0x34>
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_CRCEx_Polynomial_Set+0x16>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b18      	cmp	r3, #24
 8004cc0:	d846      	bhi.n	8004d50 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004d57 	.word	0x08004d57
 8004ccc:	08004d51 	.word	0x08004d51
 8004cd0:	08004d51 	.word	0x08004d51
 8004cd4:	08004d51 	.word	0x08004d51
 8004cd8:	08004d51 	.word	0x08004d51
 8004cdc:	08004d51 	.word	0x08004d51
 8004ce0:	08004d51 	.word	0x08004d51
 8004ce4:	08004d51 	.word	0x08004d51
 8004ce8:	08004d45 	.word	0x08004d45
 8004cec:	08004d51 	.word	0x08004d51
 8004cf0:	08004d51 	.word	0x08004d51
 8004cf4:	08004d51 	.word	0x08004d51
 8004cf8:	08004d51 	.word	0x08004d51
 8004cfc:	08004d51 	.word	0x08004d51
 8004d00:	08004d51 	.word	0x08004d51
 8004d04:	08004d51 	.word	0x08004d51
 8004d08:	08004d39 	.word	0x08004d39
 8004d0c:	08004d51 	.word	0x08004d51
 8004d10:	08004d51 	.word	0x08004d51
 8004d14:	08004d51 	.word	0x08004d51
 8004d18:	08004d51 	.word	0x08004d51
 8004d1c:	08004d51 	.word	0x08004d51
 8004d20:	08004d51 	.word	0x08004d51
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	08004d2d 	.word	0x08004d2d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b06      	cmp	r3, #6
 8004d30:	d913      	bls.n	8004d5a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d36:	e010      	b.n	8004d5a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b07      	cmp	r3, #7
 8004d3c:	d90f      	bls.n	8004d5e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d42:	e00c      	b.n	8004d5e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	d90b      	bls.n	8004d62 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d4e:	e008      	b.n	8004d62 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
      break;
 8004d54:	e006      	b.n	8004d64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d56:	bf00      	nop
 8004d58:	e004      	b.n	8004d64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d62:	bf00      	nop
  }
  if (status == HAL_OK)
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f023 0118 	bic.w	r1, r3, #24
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e069      	b.n	8004e7a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd fd70 	bl	8002898 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <HAL_DCMI_Init+0xf0>)
 8004dda:	400b      	ands	r3, r1
 8004ddc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004df2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004dfe:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004e0a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004e16:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004e22:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d112      	bne.n	8004e5a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7f1b      	ldrb	r3, [r3, #28]
 8004e38:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	7f5b      	ldrb	r3, [r3, #29]
 8004e3e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e40:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7f9b      	ldrb	r3, [r3, #30]
 8004e46:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004e48:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7fdb      	ldrb	r3, [r3, #31]
 8004e50:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004e56:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e58:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 021e 	orr.w	r2, r2, #30
 8004e68:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	ffe0f007 	.word	0xffe0f007

08004e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_DMA_Start_IT+0x26>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e048      	b.n	8004f40 <HAL_DMA_Start_IT+0xb8>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d137      	bne.n	8004f32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f842 	bl	8004f60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee0:	223f      	movs	r2, #63	; 0x3f
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0216 	orr.w	r2, r2, #22
 8004ef6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f06:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e005      	b.n	8004f3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d108      	bne.n	8004fa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f9e:	e007      	b.n	8004fb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e039      	b.n	8005042 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fd fd16 	bl	8002a14 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	f023 0107 	bic.w	r1, r3, #7
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <HAL_DMA2D_Init+0x90>)
 8005024:	4013      	ands	r3, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68d1      	ldr	r1, [r2, #12]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	430b      	orrs	r3, r1
 8005030:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	ffffc000 	.word	0xffffc000

08005050 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e05f      	b.n	8005122 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8005062:	4b32      	ldr	r3, [pc, #200]	; (800512c <HAL_DMA2D_DeInit+0xdc>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d02e      	beq.n	80050cc <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b01      	cmp	r3, #1
 800507a:	d107      	bne.n	800508c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8c1 	bl	8005204 <HAL_DMA2D_Abort>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d021      	beq.n	80050cc <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e04a      	b.n	8005122 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b20      	cmp	r3, #32
 8005098:	d108      	bne.n	80050ac <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800509a:	2100      	movs	r1, #0
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f8f7 	bl	8005290 <HAL_DMA2D_CLUTLoading_Abort>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d011      	beq.n	80050cc <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e03a      	b.n	8005122 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d108      	bne.n	80050cc <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80050ba:	2101      	movs	r1, #1
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f8e7 	bl	8005290 <HAL_DMA2D_CLUTLoading_Abort>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e02a      	b.n	8005122 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	223f      	movs	r2, #63	; 0x3f
 80050da:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2200      	movs	r2, #0
 80050e2:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2200      	movs	r2, #0
 80050ea:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2200      	movs	r2, #0
 80050f2:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2200      	movs	r2, #0
 80050fa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2200      	movs	r2, #0
 8005102:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fd fcab 	bl	8002a60 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40023800 	.word	0x40023800

08005130 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_DMA2D_Start_IT+0x1c>
 8005148:	2302      	movs	r3, #2
 800514a:	e020      	b.n	800518e <HAL_DMA2D_Start_IT+0x5e>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fa84 	bl	8005674 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800517a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af02      	add	r7, sp, #8
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e024      	b.n	80051fc <HAL_DMA2D_BlendingStart_IT+0x66>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fa4d 	bl	8005674 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80051e8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 0205 	bic.w	r2, r3, #5
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0204 	orr.w	r2, r2, #4
 800521e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005220:	f7fe fb5a 	bl	80038d8 <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005226:	e017      	b.n	8005258 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005228:	f7fe fb56 	bl	80038d8 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005236:	d90f      	bls.n	8005258 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2203      	movs	r2, #3
 8005248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e017      	b.n	8005288 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e0      	bne.n	8005228 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005274:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3324      	adds	r3, #36	; 0x24
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0204 	orr.w	r2, r2, #4
 80052b0:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d103      	bne.n	80052c0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	331c      	adds	r3, #28
 80052be:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80052c0:	f7fe fb0a 	bl	80038d8 <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80052c6:	e017      	b.n	80052f8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80052c8:	f7fe fb06 	bl	80038d8 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d6:	d90f      	bls.n	80052f8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2203      	movs	r2, #3
 80052e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e016      	b.n	8005326 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e1      	bne.n	80052c8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8005312:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d026      	beq.n	800539e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d021      	beq.n	800539e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005368:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	f043 0201 	orr.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2201      	movs	r2, #1
 800537c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d026      	beq.n	80053f6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d021      	beq.n	80053f6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2220      	movs	r2, #32
 80053c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	f043 0202 	orr.w	r2, r3, #2
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2204      	movs	r2, #4
 80053da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d026      	beq.n	800544e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005406:	2b00      	cmp	r3, #0
 8005408:	d021      	beq.n	800544e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005418:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2208      	movs	r2, #8
 8005420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	f043 0204 	orr.w	r2, r3, #4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2204      	movs	r2, #4
 8005432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d013      	beq.n	8005480 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00e      	beq.n	8005480 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005470:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2204      	movs	r2, #4
 8005478:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f853 	bl	8005526 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d024      	beq.n	80054d4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01f      	beq.n	80054d4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054a2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2202      	movs	r2, #2
 80054aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01f      	beq.n	800551e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01a      	beq.n	800551e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054f6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2210      	movs	r2, #16
 80054fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f80e 	bl	800553a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_DMA2D_ConfigLayer+0x20>
 800556c:	2302      	movs	r3, #2
 800556e:	e079      	b.n	8005664 <HAL_DMA2D_ConfigLayer+0x114>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	3318      	adds	r3, #24
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4413      	add	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800559a:	4b35      	ldr	r3, [pc, #212]	; (8005670 <HAL_DMA2D_ConfigLayer+0x120>)
 800559c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b0a      	cmp	r3, #10
 80055a4:	d003      	beq.n	80055ae <HAL_DMA2D_ConfigLayer+0x5e>
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b09      	cmp	r3, #9
 80055ac:	d107      	bne.n	80055be <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e005      	b.n	80055ca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	061b      	lsls	r3, r3, #24
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d120      	bne.n	8005612 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	43db      	mvns	r3, r3
 80055da:	ea02 0103 	and.w	r1, r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b0a      	cmp	r3, #10
 80055f8:	d003      	beq.n	8005602 <HAL_DMA2D_ConfigLayer+0xb2>
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b09      	cmp	r3, #9
 8005600:	d127      	bne.n	8005652 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800560e:	629a      	str	r2, [r3, #40]	; 0x28
 8005610:	e01f      	b.n	8005652 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	43db      	mvns	r3, r3
 800561c:	ea02 0103 	and.w	r1, r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	430a      	orrs	r2, r1
 8005628:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b0a      	cmp	r3, #10
 800563a:	d003      	beq.n	8005644 <HAL_DMA2D_ConfigLayer+0xf4>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b09      	cmp	r3, #9
 8005642:	d106      	bne.n	8005652 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005650:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	ff03000f 	.word	0xff03000f

08005674 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005674:	b480      	push	{r7}
 8005676:	b08b      	sub	sp, #44	; 0x2c
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	041a      	lsls	r2, r3, #16
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	431a      	orrs	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056ac:	d174      	bne.n	8005798 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056bc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056c4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d108      	bne.n	80056e6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	431a      	orrs	r2, r3
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	4313      	orrs	r3, r2
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
 80056e4:	e053      	b.n	800578e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d106      	bne.n	80056fc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
 80056fa:	e048      	b.n	800578e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d111      	bne.n	8005728 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	0cdb      	lsrs	r3, r3, #19
 8005708:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	0a9b      	lsrs	r3, r3, #10
 800570e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	08db      	lsrs	r3, r3, #3
 8005714:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	02db      	lsls	r3, r3, #11
 800571e:	4313      	orrs	r3, r2
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	e032      	b.n	800578e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d117      	bne.n	8005760 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	0fdb      	lsrs	r3, r3, #31
 8005734:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	0cdb      	lsrs	r3, r3, #19
 800573a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	0adb      	lsrs	r3, r3, #11
 8005740:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	08db      	lsrs	r3, r3, #3
 8005746:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	029b      	lsls	r3, r3, #10
 8005750:	431a      	orrs	r2, r3
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	03db      	lsls	r3, r3, #15
 8005756:	4313      	orrs	r3, r2
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
 800575e:	e016      	b.n	800578e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	0f1b      	lsrs	r3, r3, #28
 8005764:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	0d1b      	lsrs	r3, r3, #20
 800576a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	0b1b      	lsrs	r3, r3, #12
 8005770:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	011a      	lsls	r2, r3, #4
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	431a      	orrs	r2, r3
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	4313      	orrs	r3, r2
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005796:	e003      	b.n	80057a0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	60da      	str	r2, [r3, #12]
}
 80057a0:	bf00      	nop
 80057a2:	372c      	adds	r7, #44	; 0x2c
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b089      	sub	sp, #36	; 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	e175      	b.n	8005ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80057cc:	2201      	movs	r2, #1
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4013      	ands	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	f040 8164 	bne.w	8005ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d00b      	beq.n	800580a <HAL_GPIO_Init+0x5e>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d007      	beq.n	800580a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057fe:	2b11      	cmp	r3, #17
 8005800:	d003      	beq.n	800580a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b12      	cmp	r3, #18
 8005808:	d130      	bne.n	800586c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	2203      	movs	r2, #3
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4013      	ands	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005840:	2201      	movs	r2, #1
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	f003 0201 	and.w	r2, r3, #1
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2203      	movs	r2, #3
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4313      	orrs	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d003      	beq.n	80058ac <HAL_GPIO_Init+0x100>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b12      	cmp	r3, #18
 80058aa:	d123      	bne.n	80058f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	08da      	lsrs	r2, r3, #3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3208      	adds	r2, #8
 80058b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	220f      	movs	r2, #15
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	08da      	lsrs	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3208      	adds	r2, #8
 80058ee:	69b9      	ldr	r1, [r7, #24]
 80058f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	2203      	movs	r2, #3
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 0203 	and.w	r2, r3, #3
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80be 	beq.w	8005ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005936:	4b66      	ldr	r3, [pc, #408]	; (8005ad0 <HAL_GPIO_Init+0x324>)
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	4a65      	ldr	r2, [pc, #404]	; (8005ad0 <HAL_GPIO_Init+0x324>)
 800593c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005940:	6453      	str	r3, [r2, #68]	; 0x44
 8005942:	4b63      	ldr	r3, [pc, #396]	; (8005ad0 <HAL_GPIO_Init+0x324>)
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800594e:	4a61      	ldr	r2, [pc, #388]	; (8005ad4 <HAL_GPIO_Init+0x328>)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	089b      	lsrs	r3, r3, #2
 8005954:	3302      	adds	r3, #2
 8005956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	220f      	movs	r2, #15
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	43db      	mvns	r3, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	4013      	ands	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a58      	ldr	r2, [pc, #352]	; (8005ad8 <HAL_GPIO_Init+0x32c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d037      	beq.n	80059ea <HAL_GPIO_Init+0x23e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a57      	ldr	r2, [pc, #348]	; (8005adc <HAL_GPIO_Init+0x330>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d031      	beq.n	80059e6 <HAL_GPIO_Init+0x23a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a56      	ldr	r2, [pc, #344]	; (8005ae0 <HAL_GPIO_Init+0x334>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02b      	beq.n	80059e2 <HAL_GPIO_Init+0x236>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a55      	ldr	r2, [pc, #340]	; (8005ae4 <HAL_GPIO_Init+0x338>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d025      	beq.n	80059de <HAL_GPIO_Init+0x232>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a54      	ldr	r2, [pc, #336]	; (8005ae8 <HAL_GPIO_Init+0x33c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01f      	beq.n	80059da <HAL_GPIO_Init+0x22e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a53      	ldr	r2, [pc, #332]	; (8005aec <HAL_GPIO_Init+0x340>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d019      	beq.n	80059d6 <HAL_GPIO_Init+0x22a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a52      	ldr	r2, [pc, #328]	; (8005af0 <HAL_GPIO_Init+0x344>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <HAL_GPIO_Init+0x226>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a51      	ldr	r2, [pc, #324]	; (8005af4 <HAL_GPIO_Init+0x348>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00d      	beq.n	80059ce <HAL_GPIO_Init+0x222>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a50      	ldr	r2, [pc, #320]	; (8005af8 <HAL_GPIO_Init+0x34c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <HAL_GPIO_Init+0x21e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a4f      	ldr	r2, [pc, #316]	; (8005afc <HAL_GPIO_Init+0x350>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <HAL_GPIO_Init+0x21a>
 80059c2:	2309      	movs	r3, #9
 80059c4:	e012      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059c6:	230a      	movs	r3, #10
 80059c8:	e010      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059ca:	2308      	movs	r3, #8
 80059cc:	e00e      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059ce:	2307      	movs	r3, #7
 80059d0:	e00c      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059d2:	2306      	movs	r3, #6
 80059d4:	e00a      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059d6:	2305      	movs	r3, #5
 80059d8:	e008      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059da:	2304      	movs	r3, #4
 80059dc:	e006      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059de:	2303      	movs	r3, #3
 80059e0:	e004      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e002      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_GPIO_Init+0x240>
 80059ea:	2300      	movs	r3, #0
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	f002 0203 	and.w	r2, r2, #3
 80059f2:	0092      	lsls	r2, r2, #2
 80059f4:	4093      	lsls	r3, r2
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059fc:	4935      	ldr	r1, [pc, #212]	; (8005ad4 <HAL_GPIO_Init+0x328>)
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	3302      	adds	r3, #2
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <HAL_GPIO_Init+0x354>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	43db      	mvns	r3, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a2e:	4a34      	ldr	r2, [pc, #208]	; (8005b00 <HAL_GPIO_Init+0x354>)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a34:	4b32      	ldr	r3, [pc, #200]	; (8005b00 <HAL_GPIO_Init+0x354>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4013      	ands	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a58:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <HAL_GPIO_Init+0x354>)
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a5e:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <HAL_GPIO_Init+0x354>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a82:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_GPIO_Init+0x354>)
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <HAL_GPIO_Init+0x354>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <HAL_GPIO_Init+0x354>)
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b0f      	cmp	r3, #15
 8005abc:	f67f ae86 	bls.w	80057cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40013800 	.word	0x40013800
 8005ad8:	40020000 	.word	0x40020000
 8005adc:	40020400 	.word	0x40020400
 8005ae0:	40020800 	.word	0x40020800
 8005ae4:	40020c00 	.word	0x40020c00
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40021400 	.word	0x40021400
 8005af0:	40021800 	.word	0x40021800
 8005af4:	40021c00 	.word	0x40021c00
 8005af8:	40022000 	.word	0x40022000
 8005afc:	40022400 	.word	0x40022400
 8005b00:	40013c00 	.word	0x40013c00

08005b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	e001      	b.n	8005b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	807b      	strh	r3, [r7, #2]
 8005b40:	4613      	mov	r3, r2
 8005b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b44:	787b      	ldrb	r3, [r7, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005b50:	e003      	b.n	8005b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005b52:	887b      	ldrh	r3, [r7, #2]
 8005b54:	041a      	lsls	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	619a      	str	r2, [r3, #24]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e07f      	b.n	8005c7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8a9 	bl	8005ce6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2224      	movs	r2, #36	; 0x24
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d107      	bne.n	8005be2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bde:	609a      	str	r2, [r3, #8]
 8005be0:	e006      	b.n	8005bf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005bee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d104      	bne.n	8005c02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <HAL_I2C_Init+0x11c>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	ea42 0103 	orr.w	r1, r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	021a      	lsls	r2, r3, #8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	02008000 	.word	0x02008000

08005c88 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e021      	b.n	8005cde <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2224      	movs	r2, #36	; 0x24
 8005c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f821 	bl	8005cfa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	4608      	mov	r0, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	817b      	strh	r3, [r7, #10]
 8005d22:	460b      	mov	r3, r1
 8005d24:	813b      	strh	r3, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	f040 80f9 	bne.w	8005f2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_I2C_Mem_Write+0x34>
 8005d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0ed      	b.n	8005f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_I2C_Mem_Write+0x4e>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e0e6      	b.n	8005f2c <HAL_I2C_Mem_Write+0x21c>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d66:	f7fd fdb7 	bl	80038d8 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2319      	movs	r3, #25
 8005d72:	2201      	movs	r2, #1
 8005d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fad1 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0d1      	b.n	8005f2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2221      	movs	r2, #33	; 0x21
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2240      	movs	r2, #64	; 0x40
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005db0:	88f8      	ldrh	r0, [r7, #6]
 8005db2:	893a      	ldrh	r2, [r7, #8]
 8005db4:	8979      	ldrh	r1, [r7, #10]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f9e1 	bl	8006188 <I2C_RequestMemoryWrite>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0a9      	b.n	8005f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2bff      	cmp	r3, #255	; 0xff
 8005de0:	d90e      	bls.n	8005e00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	22ff      	movs	r2, #255	; 0xff
 8005de6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	8979      	ldrh	r1, [r7, #10]
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fbb3 	bl	8006564 <I2C_TransferConfig>
 8005dfe:	e00f      	b.n	8005e20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	8979      	ldrh	r1, [r7, #10]
 8005e12:	2300      	movs	r3, #0
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fba2 	bl	8006564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fabb 	bl	80063a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e07b      	b.n	8005f2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	781a      	ldrb	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d034      	beq.n	8005ed8 <HAL_I2C_Mem_Write+0x1c8>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d130      	bne.n	8005ed8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2180      	movs	r1, #128	; 0x80
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fa4d 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e04d      	b.n	8005f2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2bff      	cmp	r3, #255	; 0xff
 8005e98:	d90e      	bls.n	8005eb8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	22ff      	movs	r2, #255	; 0xff
 8005e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	8979      	ldrh	r1, [r7, #10]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fb57 	bl	8006564 <I2C_TransferConfig>
 8005eb6:	e00f      	b.n	8005ed8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	8979      	ldrh	r1, [r7, #10]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fb46 	bl	8006564 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d19e      	bne.n	8005e20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fa9a 	bl	8006420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e01a      	b.n	8005f2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2220      	movs	r2, #32
 8005efc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <HAL_I2C_Mem_Write+0x224>)
 8005f0a:	400b      	ands	r3, r1
 8005f0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e000      	b.n	8005f2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f2a:	2302      	movs	r3, #2
  }
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	fe00e800 	.word	0xfe00e800

08005f38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	461a      	mov	r2, r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	817b      	strh	r3, [r7, #10]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	813b      	strh	r3, [r7, #8]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	f040 80fd 	bne.w	800615a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_I2C_Mem_Read+0x34>
 8005f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0f1      	b.n	800615c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_I2C_Mem_Read+0x4e>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e0ea      	b.n	800615c <HAL_I2C_Mem_Read+0x224>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f8e:	f7fd fca3 	bl	80038d8 <HAL_GetTick>
 8005f92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	2319      	movs	r3, #25
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f9bd 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0d5      	b.n	800615c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2222      	movs	r2, #34	; 0x22
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2240      	movs	r2, #64	; 0x40
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a3a      	ldr	r2, [r7, #32]
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fd8:	88f8      	ldrh	r0, [r7, #6]
 8005fda:	893a      	ldrh	r2, [r7, #8]
 8005fdc:	8979      	ldrh	r1, [r7, #10]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f921 	bl	8006230 <I2C_RequestMemoryRead>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0ad      	b.n	800615c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	2bff      	cmp	r3, #255	; 0xff
 8006008:	d90e      	bls.n	8006028 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006014:	b2da      	uxtb	r2, r3
 8006016:	8979      	ldrh	r1, [r7, #10]
 8006018:	4b52      	ldr	r3, [pc, #328]	; (8006164 <HAL_I2C_Mem_Read+0x22c>)
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fa9f 	bl	8006564 <I2C_TransferConfig>
 8006026:	e00f      	b.n	8006048 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006036:	b2da      	uxtb	r2, r3
 8006038:	8979      	ldrh	r1, [r7, #10]
 800603a:	4b4a      	ldr	r3, [pc, #296]	; (8006164 <HAL_I2C_Mem_Read+0x22c>)
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fa8e 	bl	8006564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	2200      	movs	r2, #0
 8006050:	2104      	movs	r1, #4
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f964 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e07c      	b.n	800615c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607e:	3b01      	subs	r3, #1
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d034      	beq.n	8006108 <HAL_I2C_Mem_Read+0x1d0>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d130      	bne.n	8006108 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	2200      	movs	r2, #0
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f935 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e04d      	b.n	800615c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2bff      	cmp	r3, #255	; 0xff
 80060c8:	d90e      	bls.n	80060e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	22ff      	movs	r2, #255	; 0xff
 80060ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	8979      	ldrh	r1, [r7, #10]
 80060d8:	2300      	movs	r3, #0
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fa3f 	bl	8006564 <I2C_TransferConfig>
 80060e6:	e00f      	b.n	8006108 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	8979      	ldrh	r1, [r7, #10]
 80060fa:	2300      	movs	r3, #0
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fa2e 	bl	8006564 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d19a      	bne.n	8006048 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 f982 	bl	8006420 <I2C_WaitOnSTOPFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e01a      	b.n	800615c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2220      	movs	r2, #32
 800612c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <HAL_I2C_Mem_Read+0x230>)
 800613a:	400b      	ands	r3, r1
 800613c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	80002400 	.word	0x80002400
 8006168:	fe00e800 	.word	0xfe00e800

0800616c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800617a:	b2db      	uxtb	r3, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	461a      	mov	r2, r3
 8006196:	4603      	mov	r3, r0
 8006198:	817b      	strh	r3, [r7, #10]
 800619a:	460b      	mov	r3, r1
 800619c:	813b      	strh	r3, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	8979      	ldrh	r1, [r7, #10]
 80061a8:	4b20      	ldr	r3, [pc, #128]	; (800622c <I2C_RequestMemoryWrite+0xa4>)
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f9d7 	bl	8006564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	69b9      	ldr	r1, [r7, #24]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f8f0 	bl	80063a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e02c      	b.n	8006224 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d105      	bne.n	80061dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061d0:	893b      	ldrh	r3, [r7, #8]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	629a      	str	r2, [r3, #40]	; 0x28
 80061da:	e015      	b.n	8006208 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061dc:	893b      	ldrh	r3, [r7, #8]
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	69b9      	ldr	r1, [r7, #24]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f8d6 	bl	80063a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e012      	b.n	8006224 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061fe:	893b      	ldrh	r3, [r7, #8]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2200      	movs	r2, #0
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f884 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	80002000 	.word	0x80002000

08006230 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	461a      	mov	r2, r3
 800623e:	4603      	mov	r3, r0
 8006240:	817b      	strh	r3, [r7, #10]
 8006242:	460b      	mov	r3, r1
 8006244:	813b      	strh	r3, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	8979      	ldrh	r1, [r7, #10]
 8006250:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <I2C_RequestMemoryRead+0xa4>)
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f984 	bl	8006564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	69b9      	ldr	r1, [r7, #24]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f89d 	bl	80063a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e02c      	b.n	80062ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d105      	bne.n	8006282 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006276:	893b      	ldrh	r3, [r7, #8]
 8006278:	b2da      	uxtb	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
 8006280:	e015      	b.n	80062ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006282:	893b      	ldrh	r3, [r7, #8]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	b29b      	uxth	r3, r3
 8006288:	b2da      	uxtb	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	69b9      	ldr	r1, [r7, #24]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f883 	bl	80063a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e012      	b.n	80062ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062a4:	893b      	ldrh	r3, [r7, #8]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2200      	movs	r2, #0
 80062b6:	2140      	movs	r1, #64	; 0x40
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f831 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	80002000 	.word	0x80002000

080062d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d103      	bne.n	80062f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2200      	movs	r2, #0
 80062f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b01      	cmp	r3, #1
 8006302:	d007      	beq.n	8006314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	619a      	str	r2, [r3, #24]
  }
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006330:	e022      	b.n	8006378 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d01e      	beq.n	8006378 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633a:	f7fd facd 	bl	80038d8 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d302      	bcc.n	8006350 <I2C_WaitOnFlagUntilTimeout+0x30>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d113      	bne.n	8006378 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006354:	f043 0220 	orr.w	r2, r3, #32
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e00f      	b.n	8006398 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4013      	ands	r3, r2
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	429a      	cmp	r2, r3
 8006386:	bf0c      	ite	eq
 8006388:	2301      	moveq	r3, #1
 800638a:	2300      	movne	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	429a      	cmp	r2, r3
 8006394:	d0cd      	beq.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063ac:	e02c      	b.n	8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f870 	bl	8006498 <I2C_IsAcknowledgeFailed>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e02a      	b.n	8006418 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d01e      	beq.n	8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ca:	f7fd fa85 	bl	80038d8 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d113      	bne.n	8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e4:	f043 0220 	orr.w	r2, r3, #32
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e007      	b.n	8006418 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d1cb      	bne.n	80063ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800642c:	e028      	b.n	8006480 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f830 	bl	8006498 <I2C_IsAcknowledgeFailed>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e026      	b.n	8006490 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006442:	f7fd fa49 	bl	80038d8 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d113      	bne.n	8006480 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645c:	f043 0220 	orr.w	r2, r3, #32
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e007      	b.n	8006490 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b20      	cmp	r3, #32
 800648c:	d1cf      	bne.n	800642e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d151      	bne.n	8006556 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064b2:	e022      	b.n	80064fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d01e      	beq.n	80064fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064bc:	f7fd fa0c 	bl	80038d8 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d302      	bcc.n	80064d2 <I2C_IsAcknowledgeFailed+0x3a>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d113      	bne.n	80064fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e02e      	b.n	8006558 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b20      	cmp	r3, #32
 8006506:	d1d5      	bne.n	80064b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2210      	movs	r2, #16
 800650e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2220      	movs	r2, #32
 8006516:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff fedd 	bl	80062d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6859      	ldr	r1, [r3, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <I2C_IsAcknowledgeFailed+0xc8>)
 800652a:	400b      	ands	r3, r1
 800652c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	f043 0204 	orr.w	r2, r3, #4
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	fe00e800 	.word	0xfe00e800

08006564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	817b      	strh	r3, [r7, #10]
 8006572:	4613      	mov	r3, r2
 8006574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	0d5b      	lsrs	r3, r3, #21
 8006580:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006584:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <I2C_TransferConfig+0x58>)
 8006586:	430b      	orrs	r3, r1
 8006588:	43db      	mvns	r3, r3
 800658a:	ea02 0103 	and.w	r1, r2, r3
 800658e:	897b      	ldrh	r3, [r7, #10]
 8006590:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006594:	7a7b      	ldrb	r3, [r7, #9]
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	03ff63ff 	.word	0x03ff63ff

080065c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e0bf      	b.n	8006752 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fc fa54 	bl	8002a94 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006602:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6999      	ldr	r1, [r3, #24]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006618:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6899      	ldr	r1, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b4a      	ldr	r3, [pc, #296]	; (800675c <HAL_LTDC_Init+0x19c>)
 8006634:	400b      	ands	r3, r1
 8006636:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	041b      	lsls	r3, r3, #16
 800663e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6899      	ldr	r1, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68d9      	ldr	r1, [r3, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b3e      	ldr	r3, [pc, #248]	; (800675c <HAL_LTDC_Init+0x19c>)
 8006662:	400b      	ands	r3, r1
 8006664:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68d9      	ldr	r1, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1a      	ldr	r2, [r3, #32]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6919      	ldr	r1, [r3, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b33      	ldr	r3, [pc, #204]	; (800675c <HAL_LTDC_Init+0x19c>)
 8006690:	400b      	ands	r3, r1
 8006692:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6919      	ldr	r1, [r3, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6959      	ldr	r1, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b27      	ldr	r3, [pc, #156]	; (800675c <HAL_LTDC_Init+0x19c>)
 80066be:	400b      	ands	r3, r1
 80066c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	041b      	lsls	r3, r3, #16
 80066c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6959      	ldr	r1, [r3, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006702:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0206 	orr.w	r2, r2, #6
 800672e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	f000f800 	.word	0xf000f800

08006760 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006776:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d023      	beq.n	80067ca <HAL_LTDC_IRQHandler+0x6a>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01e      	beq.n	80067ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0204 	bic.w	r2, r2, #4
 800679a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2204      	movs	r2, #4
 80067a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067aa:	f043 0201 	orr.w	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2204      	movs	r2, #4
 80067b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f86f 	bl	80068a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d023      	beq.n	800681c <HAL_LTDC_IRQHandler+0xbc>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01e      	beq.n	800681c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0202 	bic.w	r2, r2, #2
 80067ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2202      	movs	r2, #2
 80067f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067fc:	f043 0202 	orr.w	r2, r3, #2
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2204      	movs	r2, #4
 800680a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f846 	bl	80068a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01b      	beq.n	800685e <HAL_LTDC_IRQHandler+0xfe>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2201      	movs	r2, #1
 8006846:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f011 fc63 	bl	8018124 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <HAL_LTDC_IRQHandler+0x140>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d016      	beq.n	80068a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0208 	bic.w	r2, r2, #8
 8006880:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2208      	movs	r2, #8
 8006888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f80e 	bl	80068bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80068a0:	bf00      	nop
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80068d0:	b5b0      	push	{r4, r5, r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_LTDC_ConfigLayer+0x1a>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e02c      	b.n	8006944 <HAL_LTDC_ConfigLayer+0x74>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2134      	movs	r1, #52	; 0x34
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4614      	mov	r4, r2
 800690e:	461d      	mov	r5, r3
 8006910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800691a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f849 	bl	80069bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2201      	movs	r2, #1
 8006930:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bdb0      	pop	{r4, r5, r7, pc}

0800694c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_LTDC_ProgramLineEvent+0x18>
 8006960:	2302      	movs	r3, #2
 8006962:	e023      	b.n	80069ac <HAL_LTDC_ProgramLineEvent+0x60>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0201 	bic.w	r2, r2, #1
 8006982:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006984:	4a0c      	ldr	r2, [pc, #48]	; (80069b8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40016800 	.word	0x40016800

080069bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b089      	sub	sp, #36	; 0x24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	0c1b      	lsrs	r3, r3, #16
 80069d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d8:	4413      	add	r3, r2
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	01db      	lsls	r3, r3, #7
 80069e8:	4413      	add	r3, r2
 80069ea:	3384      	adds	r3, #132	; 0x84
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	4611      	mov	r1, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	01d2      	lsls	r2, r2, #7
 80069f8:	440a      	add	r2, r1
 80069fa:	3284      	adds	r2, #132	; 0x84
 80069fc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a12:	4413      	add	r3, r2
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	01db      	lsls	r3, r3, #7
 8006a20:	440b      	add	r3, r1
 8006a22:	3384      	adds	r3, #132	; 0x84
 8006a24:	4619      	mov	r1, r3
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3a:	4413      	add	r3, r2
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	01db      	lsls	r3, r3, #7
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3384      	adds	r3, #132	; 0x84
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	4611      	mov	r1, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	01d2      	lsls	r2, r2, #7
 8006a5a:	440a      	add	r2, r1
 8006a5c:	3284      	adds	r2, #132	; 0x84
 8006a5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a72:	4413      	add	r3, r2
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	01db      	lsls	r3, r3, #7
 8006a80:	440b      	add	r3, r1
 8006a82:	3384      	adds	r3, #132	; 0x84
 8006a84:	4619      	mov	r1, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	01db      	lsls	r3, r3, #7
 8006a96:	4413      	add	r3, r2
 8006a98:	3384      	adds	r3, #132	; 0x84
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	01d2      	lsls	r2, r2, #7
 8006aa6:	440a      	add	r2, r1
 8006aa8:	3284      	adds	r2, #132	; 0x84
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	01db      	lsls	r3, r3, #7
 8006aba:	4413      	add	r3, r2
 8006abc:	3384      	adds	r3, #132	; 0x84
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	01db      	lsls	r3, r3, #7
 8006aec:	4413      	add	r3, r2
 8006aee:	3384      	adds	r3, #132	; 0x84
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	01db      	lsls	r3, r3, #7
 8006afc:	4413      	add	r3, r2
 8006afe:	3384      	adds	r3, #132	; 0x84
 8006b00:	461a      	mov	r2, r3
 8006b02:	2300      	movs	r3, #0
 8006b04:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	01db      	lsls	r3, r3, #7
 8006b20:	440b      	add	r3, r1
 8006b22:	3384      	adds	r3, #132	; 0x84
 8006b24:	4619      	mov	r1, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	01db      	lsls	r3, r3, #7
 8006b36:	4413      	add	r3, r2
 8006b38:	3384      	adds	r3, #132	; 0x84
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	6812      	ldr	r2, [r2, #0]
 8006b40:	4611      	mov	r1, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	01d2      	lsls	r2, r2, #7
 8006b46:	440a      	add	r2, r1
 8006b48:	3284      	adds	r2, #132	; 0x84
 8006b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	01db      	lsls	r3, r3, #7
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3384      	adds	r3, #132	; 0x84
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	01db      	lsls	r3, r3, #7
 8006b70:	4413      	add	r3, r2
 8006b72:	3384      	adds	r3, #132	; 0x84
 8006b74:	69da      	ldr	r2, [r3, #28]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	01db      	lsls	r3, r3, #7
 8006b80:	440b      	add	r3, r1
 8006b82:	3384      	adds	r3, #132	; 0x84
 8006b84:	4619      	mov	r1, r3
 8006b86:	4b58      	ldr	r3, [pc, #352]	; (8006ce8 <LTDC_SetConfig+0x32c>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	68f9      	ldr	r1, [r7, #12]
 8006b96:	6809      	ldr	r1, [r1, #0]
 8006b98:	4608      	mov	r0, r1
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	01c9      	lsls	r1, r1, #7
 8006b9e:	4401      	add	r1, r0
 8006ba0:	3184      	adds	r1, #132	; 0x84
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	01db      	lsls	r3, r3, #7
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3384      	adds	r3, #132	; 0x84
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	01db      	lsls	r3, r3, #7
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3384      	adds	r3, #132	; 0x84
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	01db      	lsls	r3, r3, #7
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3384      	adds	r3, #132	; 0x84
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006be8:	2304      	movs	r3, #4
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e01b      	b.n	8006c26 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d102      	bne.n	8006bfc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	e014      	b.n	8006c26 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d00b      	beq.n	8006c1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d007      	beq.n	8006c1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d003      	beq.n	8006c1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c18:	2b07      	cmp	r3, #7
 8006c1a:	d102      	bne.n	8006c22 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e001      	b.n	8006c26 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006c22:	2301      	movs	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	01db      	lsls	r3, r3, #7
 8006c30:	4413      	add	r3, r2
 8006c32:	3384      	adds	r3, #132	; 0x84
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	01d2      	lsls	r2, r2, #7
 8006c40:	440a      	add	r2, r1
 8006c42:	3284      	adds	r2, #132	; 0x84
 8006c44:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c48:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	041a      	lsls	r2, r3, #16
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6859      	ldr	r1, [r3, #4]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	1acb      	subs	r3, r1, r3
 8006c60:	69f9      	ldr	r1, [r7, #28]
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	3303      	adds	r3, #3
 8006c68:	68f9      	ldr	r1, [r7, #12]
 8006c6a:	6809      	ldr	r1, [r1, #0]
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	01c9      	lsls	r1, r1, #7
 8006c72:	4401      	add	r1, r0
 8006c74:	3184      	adds	r1, #132	; 0x84
 8006c76:	4313      	orrs	r3, r2
 8006c78:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	01db      	lsls	r3, r3, #7
 8006c84:	4413      	add	r3, r2
 8006c86:	3384      	adds	r3, #132	; 0x84
 8006c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	01db      	lsls	r3, r3, #7
 8006c94:	440b      	add	r3, r1
 8006c96:	3384      	adds	r3, #132	; 0x84
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4b14      	ldr	r3, [pc, #80]	; (8006cec <LTDC_SetConfig+0x330>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	01db      	lsls	r3, r3, #7
 8006caa:	4413      	add	r3, r2
 8006cac:	3384      	adds	r3, #132	; 0x84
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	01db      	lsls	r3, r3, #7
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3384      	adds	r3, #132	; 0x84
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	01d2      	lsls	r2, r2, #7
 8006cd0:	440a      	add	r2, r1
 8006cd2:	3284      	adds	r2, #132	; 0x84
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	6013      	str	r3, [r2, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	3724      	adds	r7, #36	; 0x24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	fffff8f8 	.word	0xfffff8f8
 8006cec:	fffff800 	.word	0xfffff800

08006cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a04      	ldr	r2, [pc, #16]	; (8006d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cfe:	6013      	str	r3, [r2, #0]
}
 8006d00:	bf00      	nop
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40007000 	.word	0x40007000

08006d10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d1a:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	4a22      	ldr	r2, [pc, #136]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d24:	6413      	str	r3, [r2, #64]	; 0x40
 8006d26:	4b20      	ldr	r3, [pc, #128]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d32:	4b1e      	ldr	r3, [pc, #120]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1d      	ldr	r2, [pc, #116]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d3e:	f7fc fdcb 	bl	80038d8 <HAL_GetTick>
 8006d42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d44:	e009      	b.n	8006d5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d46:	f7fc fdc7 	bl	80038d8 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d54:	d901      	bls.n	8006d5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e022      	b.n	8006da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d66:	d1ee      	bne.n	8006d46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d68:	4b10      	ldr	r3, [pc, #64]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a0f      	ldr	r2, [pc, #60]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d74:	f7fc fdb0 	bl	80038d8 <HAL_GetTick>
 8006d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d7a:	e009      	b.n	8006d90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d7c:	f7fc fdac 	bl	80038d8 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d8a:	d901      	bls.n	8006d90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e007      	b.n	8006da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9c:	d1ee      	bne.n	8006d7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40007000 	.word	0x40007000

08006db0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006db8:	f7fc fd8e 	bl	80038d8 <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e067      	b.n	8006e98 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fb ff21 	bl	8002c24 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006de2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f85e 	bl	8006ea8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	021a      	lsls	r2, r3, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2120      	movs	r1, #32
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f856 	bl	8006ec4 <QSPI_WaitFlagStateUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d135      	bne.n	8006e8e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <HAL_QSPI_Init+0xf0>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6852      	ldr	r2, [r2, #4]
 8006e30:	0611      	lsls	r1, r2, #24
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68d2      	ldr	r2, [r2, #12]
 8006e36:	4311      	orrs	r1, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	69d2      	ldr	r2, [r2, #28]
 8006e3c:	4311      	orrs	r1, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6a12      	ldr	r2, [r2, #32]
 8006e42:	4311      	orrs	r1, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6812      	ldr	r2, [r2, #0]
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <HAL_QSPI_Init+0xf4>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6912      	ldr	r2, [r2, #16]
 8006e5a:	0411      	lsls	r1, r2, #16
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6952      	ldr	r2, [r2, #20]
 8006e60:	4311      	orrs	r1, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6992      	ldr	r2, [r2, #24]
 8006e66:	4311      	orrs	r1, r2
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e96:	7afb      	ldrb	r3, [r7, #11]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	00ffff2f 	.word	0x00ffff2f
 8006ea4:	ffe0f8fe 	.word	0xffe0f8fe

08006ea8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ed4:	e01a      	b.n	8006f0c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d016      	beq.n	8006f0c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ede:	f7fc fcfb 	bl	80038d8 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d302      	bcc.n	8006ef4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10b      	bne.n	8006f0c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f00:	f043 0201 	orr.w	r2, r3, #1
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e00e      	b.n	8006f2a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf14      	ite	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	2300      	moveq	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d1d6      	bne.n	8006ed6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e291      	b.n	800746e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 8087 	beq.w	8007066 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f58:	4b96      	ldr	r3, [pc, #600]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 030c 	and.w	r3, r3, #12
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d00c      	beq.n	8006f7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f64:	4b93      	ldr	r3, [pc, #588]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 030c 	and.w	r3, r3, #12
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d112      	bne.n	8006f96 <HAL_RCC_OscConfig+0x62>
 8006f70:	4b90      	ldr	r3, [pc, #576]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f7c:	d10b      	bne.n	8006f96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f7e:	4b8d      	ldr	r3, [pc, #564]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d06c      	beq.n	8007064 <HAL_RCC_OscConfig+0x130>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d168      	bne.n	8007064 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e26b      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9e:	d106      	bne.n	8006fae <HAL_RCC_OscConfig+0x7a>
 8006fa0:	4b84      	ldr	r3, [pc, #528]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a83      	ldr	r2, [pc, #524]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	e02e      	b.n	800700c <HAL_RCC_OscConfig+0xd8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x9c>
 8006fb6:	4b7f      	ldr	r3, [pc, #508]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a7e      	ldr	r2, [pc, #504]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	4b7c      	ldr	r3, [pc, #496]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a7b      	ldr	r2, [pc, #492]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e01d      	b.n	800700c <HAL_RCC_OscConfig+0xd8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fd8:	d10c      	bne.n	8006ff4 <HAL_RCC_OscConfig+0xc0>
 8006fda:	4b76      	ldr	r3, [pc, #472]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a75      	ldr	r2, [pc, #468]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	4b73      	ldr	r3, [pc, #460]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a72      	ldr	r2, [pc, #456]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	e00b      	b.n	800700c <HAL_RCC_OscConfig+0xd8>
 8006ff4:	4b6f      	ldr	r3, [pc, #444]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a6e      	ldr	r2, [pc, #440]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8006ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	4b6c      	ldr	r3, [pc, #432]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a6b      	ldr	r2, [pc, #428]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d013      	beq.n	800703c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007014:	f7fc fc60 	bl	80038d8 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800701c:	f7fc fc5c 	bl	80038d8 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b64      	cmp	r3, #100	; 0x64
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e21f      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702e:	4b61      	ldr	r3, [pc, #388]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f0      	beq.n	800701c <HAL_RCC_OscConfig+0xe8>
 800703a:	e014      	b.n	8007066 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7fc fc4c 	bl	80038d8 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007044:	f7fc fc48 	bl	80038d8 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b64      	cmp	r3, #100	; 0x64
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e20b      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007056:	4b57      	ldr	r3, [pc, #348]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0x110>
 8007062:	e000      	b.n	8007066 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d069      	beq.n	8007146 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007072:	4b50      	ldr	r3, [pc, #320]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 030c 	and.w	r3, r3, #12
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707e:	4b4d      	ldr	r3, [pc, #308]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b08      	cmp	r3, #8
 8007088:	d11c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x190>
 800708a:	4b4a      	ldr	r3, [pc, #296]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d116      	bne.n	80070c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007096:	4b47      	ldr	r3, [pc, #284]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <HAL_RCC_OscConfig+0x17a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d001      	beq.n	80070ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e1df      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ae:	4b41      	ldr	r3, [pc, #260]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	493d      	ldr	r1, [pc, #244]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070c2:	e040      	b.n	8007146 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d023      	beq.n	8007114 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070cc:	4b39      	ldr	r3, [pc, #228]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a38      	ldr	r2, [pc, #224]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 80070d2:	f043 0301 	orr.w	r3, r3, #1
 80070d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d8:	f7fc fbfe 	bl	80038d8 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070e0:	f7fc fbfa 	bl	80038d8 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e1bd      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f2:	4b30      	ldr	r3, [pc, #192]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0f0      	beq.n	80070e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070fe:	4b2d      	ldr	r3, [pc, #180]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	4929      	ldr	r1, [pc, #164]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 800710e:	4313      	orrs	r3, r2
 8007110:	600b      	str	r3, [r1, #0]
 8007112:	e018      	b.n	8007146 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007114:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a26      	ldr	r2, [pc, #152]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fc fbda 	bl	80038d8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007128:	f7fc fbd6 	bl	80038d8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e199      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800713a:	4b1e      	ldr	r3, [pc, #120]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d038      	beq.n	80071c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d019      	beq.n	800718e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800715a:	4b16      	ldr	r3, [pc, #88]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 800715c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715e:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007166:	f7fc fbb7 	bl	80038d8 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800716e:	f7fc fbb3 	bl	80038d8 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e176      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007180:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0f0      	beq.n	800716e <HAL_RCC_OscConfig+0x23a>
 800718c:	e01a      	b.n	80071c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800718e:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007192:	4a08      	ldr	r2, [pc, #32]	; (80071b4 <HAL_RCC_OscConfig+0x280>)
 8007194:	f023 0301 	bic.w	r3, r3, #1
 8007198:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719a:	f7fc fb9d 	bl	80038d8 <HAL_GetTick>
 800719e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a0:	e00a      	b.n	80071b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071a2:	f7fc fb99 	bl	80038d8 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d903      	bls.n	80071b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e15c      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
 80071b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071b8:	4b91      	ldr	r3, [pc, #580]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80071ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1ee      	bne.n	80071a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80a4 	beq.w	800731a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d2:	4b8b      	ldr	r3, [pc, #556]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10d      	bne.n	80071fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071de:	4b88      	ldr	r3, [pc, #544]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	4a87      	ldr	r2, [pc, #540]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80071e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ea:	4b85      	ldr	r3, [pc, #532]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f2:	60bb      	str	r3, [r7, #8]
 80071f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071f6:	2301      	movs	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071fa:	4b82      	ldr	r3, [pc, #520]	; (8007404 <HAL_RCC_OscConfig+0x4d0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007202:	2b00      	cmp	r3, #0
 8007204:	d118      	bne.n	8007238 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007206:	4b7f      	ldr	r3, [pc, #508]	; (8007404 <HAL_RCC_OscConfig+0x4d0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a7e      	ldr	r2, [pc, #504]	; (8007404 <HAL_RCC_OscConfig+0x4d0>)
 800720c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007212:	f7fc fb61 	bl	80038d8 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800721a:	f7fc fb5d 	bl	80038d8 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b64      	cmp	r3, #100	; 0x64
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e120      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800722c:	4b75      	ldr	r3, [pc, #468]	; (8007404 <HAL_RCC_OscConfig+0x4d0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d106      	bne.n	800724e <HAL_RCC_OscConfig+0x31a>
 8007240:	4b6f      	ldr	r3, [pc, #444]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	4a6e      	ldr	r2, [pc, #440]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007246:	f043 0301 	orr.w	r3, r3, #1
 800724a:	6713      	str	r3, [r2, #112]	; 0x70
 800724c:	e02d      	b.n	80072aa <HAL_RCC_OscConfig+0x376>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10c      	bne.n	8007270 <HAL_RCC_OscConfig+0x33c>
 8007256:	4b6a      	ldr	r3, [pc, #424]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	4a69      	ldr	r2, [pc, #420]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 800725c:	f023 0301 	bic.w	r3, r3, #1
 8007260:	6713      	str	r3, [r2, #112]	; 0x70
 8007262:	4b67      	ldr	r3, [pc, #412]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	4a66      	ldr	r2, [pc, #408]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007268:	f023 0304 	bic.w	r3, r3, #4
 800726c:	6713      	str	r3, [r2, #112]	; 0x70
 800726e:	e01c      	b.n	80072aa <HAL_RCC_OscConfig+0x376>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b05      	cmp	r3, #5
 8007276:	d10c      	bne.n	8007292 <HAL_RCC_OscConfig+0x35e>
 8007278:	4b61      	ldr	r3, [pc, #388]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	4a60      	ldr	r2, [pc, #384]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 800727e:	f043 0304 	orr.w	r3, r3, #4
 8007282:	6713      	str	r3, [r2, #112]	; 0x70
 8007284:	4b5e      	ldr	r3, [pc, #376]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	4a5d      	ldr	r2, [pc, #372]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	6713      	str	r3, [r2, #112]	; 0x70
 8007290:	e00b      	b.n	80072aa <HAL_RCC_OscConfig+0x376>
 8007292:	4b5b      	ldr	r3, [pc, #364]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	4a5a      	ldr	r2, [pc, #360]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	6713      	str	r3, [r2, #112]	; 0x70
 800729e:	4b58      	ldr	r3, [pc, #352]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	4a57      	ldr	r2, [pc, #348]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80072a4:	f023 0304 	bic.w	r3, r3, #4
 80072a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d015      	beq.n	80072de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b2:	f7fc fb11 	bl	80038d8 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b8:	e00a      	b.n	80072d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ba:	f7fc fb0d 	bl	80038d8 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e0ce      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d0:	4b4b      	ldr	r3, [pc, #300]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0ee      	beq.n	80072ba <HAL_RCC_OscConfig+0x386>
 80072dc:	e014      	b.n	8007308 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072de:	f7fc fafb 	bl	80038d8 <HAL_GetTick>
 80072e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072e4:	e00a      	b.n	80072fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e6:	f7fc faf7 	bl	80038d8 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e0b8      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072fc:	4b40      	ldr	r3, [pc, #256]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80072fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1ee      	bne.n	80072e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d105      	bne.n	800731a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800730e:	4b3c      	ldr	r3, [pc, #240]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	4a3b      	ldr	r2, [pc, #236]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007318:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80a4 	beq.w	800746c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007324:	4b36      	ldr	r3, [pc, #216]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 030c 	and.w	r3, r3, #12
 800732c:	2b08      	cmp	r3, #8
 800732e:	d06b      	beq.n	8007408 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d149      	bne.n	80073cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007338:	4b31      	ldr	r3, [pc, #196]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a30      	ldr	r2, [pc, #192]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 800733e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007344:	f7fc fac8 	bl	80038d8 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800734c:	f7fc fac4 	bl	80038d8 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e087      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800735e:	4b28      	ldr	r3, [pc, #160]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f0      	bne.n	800734c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69da      	ldr	r2, [r3, #28]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	019b      	lsls	r3, r3, #6
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007380:	085b      	lsrs	r3, r3, #1
 8007382:	3b01      	subs	r3, #1
 8007384:	041b      	lsls	r3, r3, #16
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	061b      	lsls	r3, r3, #24
 800738e:	4313      	orrs	r3, r2
 8007390:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 8007392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007396:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007398:	4b19      	ldr	r3, [pc, #100]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a18      	ldr	r2, [pc, #96]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 800739e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a4:	f7fc fa98 	bl	80038d8 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ac:	f7fc fa94 	bl	80038d8 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e057      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073be:	4b10      	ldr	r3, [pc, #64]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x478>
 80073ca:	e04f      	b.n	800746c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0b      	ldr	r2, [pc, #44]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80073d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d8:	f7fc fa7e 	bl	80038d8 <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e0:	f7fc fa7a 	bl	80038d8 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e03d      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073f2:	4b03      	ldr	r3, [pc, #12]	; (8007400 <HAL_RCC_OscConfig+0x4cc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f0      	bne.n	80073e0 <HAL_RCC_OscConfig+0x4ac>
 80073fe:	e035      	b.n	800746c <HAL_RCC_OscConfig+0x538>
 8007400:	40023800 	.word	0x40023800
 8007404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <HAL_RCC_OscConfig+0x544>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d028      	beq.n	8007468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007420:	429a      	cmp	r2, r3
 8007422:	d121      	bne.n	8007468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800742e:	429a      	cmp	r2, r3
 8007430:	d11a      	bne.n	8007468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007438:	4013      	ands	r3, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800743e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007440:	4293      	cmp	r3, r2
 8007442:	d111      	bne.n	8007468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	3b01      	subs	r3, #1
 8007452:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007454:	429a      	cmp	r2, r3
 8007456:	d107      	bne.n	8007468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007464:	429a      	cmp	r2, r3
 8007466:	d001      	beq.n	800746c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40023800 	.word	0x40023800

0800747c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e0d0      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007494:	4b6a      	ldr	r3, [pc, #424]	; (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d910      	bls.n	80074c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074a2:	4b67      	ldr	r3, [pc, #412]	; (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f023 020f 	bic.w	r2, r3, #15
 80074aa:	4965      	ldr	r1, [pc, #404]	; (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074b2:	4b63      	ldr	r3, [pc, #396]	; (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d001      	beq.n	80074c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0b8      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d020      	beq.n	8007512 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074dc:	4b59      	ldr	r3, [pc, #356]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	4a58      	ldr	r2, [pc, #352]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 80074e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074f4:	4b53      	ldr	r3, [pc, #332]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a52      	ldr	r2, [pc, #328]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 80074fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007500:	4b50      	ldr	r3, [pc, #320]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	494d      	ldr	r1, [pc, #308]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 800750e:	4313      	orrs	r3, r2
 8007510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d040      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d107      	bne.n	8007536 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007526:	4b47      	ldr	r3, [pc, #284]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d115      	bne.n	800755e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e07f      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d107      	bne.n	800754e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800753e:	4b41      	ldr	r3, [pc, #260]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e073      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800754e:	4b3d      	ldr	r3, [pc, #244]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e06b      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800755e:	4b39      	ldr	r3, [pc, #228]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f023 0203 	bic.w	r2, r3, #3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4936      	ldr	r1, [pc, #216]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 800756c:	4313      	orrs	r3, r2
 800756e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007570:	f7fc f9b2 	bl	80038d8 <HAL_GetTick>
 8007574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007576:	e00a      	b.n	800758e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007578:	f7fc f9ae 	bl	80038d8 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	f241 3288 	movw	r2, #5000	; 0x1388
 8007586:	4293      	cmp	r3, r2
 8007588:	d901      	bls.n	800758e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e053      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800758e:	4b2d      	ldr	r3, [pc, #180]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 020c 	and.w	r2, r3, #12
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	429a      	cmp	r2, r3
 800759e:	d1eb      	bne.n	8007578 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075a0:	4b27      	ldr	r3, [pc, #156]	; (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d210      	bcs.n	80075d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ae:	4b24      	ldr	r3, [pc, #144]	; (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f023 020f 	bic.w	r2, r3, #15
 80075b6:	4922      	ldr	r1, [pc, #136]	; (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075be:	4b20      	ldr	r3, [pc, #128]	; (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d001      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e032      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d008      	beq.n	80075ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075dc:	4b19      	ldr	r3, [pc, #100]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4916      	ldr	r1, [pc, #88]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	490e      	ldr	r1, [pc, #56]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 800760a:	4313      	orrs	r3, r2
 800760c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800760e:	f000 f821 	bl	8007654 <HAL_RCC_GetSysClockFreq>
 8007612:	4602      	mov	r2, r0
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	091b      	lsrs	r3, r3, #4
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	490a      	ldr	r1, [pc, #40]	; (8007648 <HAL_RCC_ClockConfig+0x1cc>)
 8007620:	5ccb      	ldrb	r3, [r1, r3]
 8007622:	fa22 f303 	lsr.w	r3, r2, r3
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <HAL_RCC_ClockConfig+0x1d0>)
 8007628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <HAL_RCC_ClockConfig+0x1d4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f7fb ff9c 	bl	800356c <HAL_InitTick>

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40023c00 	.word	0x40023c00
 8007644:	40023800 	.word	0x40023800
 8007648:	0802a3ec 	.word	0x0802a3ec
 800764c:	20000018 	.word	0x20000018
 8007650:	2000001c 	.word	0x2000001c

08007654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007654:	b5b0      	push	{r4, r5, r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800765a:	2100      	movs	r1, #0
 800765c:	6079      	str	r1, [r7, #4]
 800765e:	2100      	movs	r1, #0
 8007660:	60f9      	str	r1, [r7, #12]
 8007662:	2100      	movs	r1, #0
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007666:	2100      	movs	r1, #0
 8007668:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800766a:	4952      	ldr	r1, [pc, #328]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800766c:	6889      	ldr	r1, [r1, #8]
 800766e:	f001 010c 	and.w	r1, r1, #12
 8007672:	2908      	cmp	r1, #8
 8007674:	d00d      	beq.n	8007692 <HAL_RCC_GetSysClockFreq+0x3e>
 8007676:	2908      	cmp	r1, #8
 8007678:	f200 8094 	bhi.w	80077a4 <HAL_RCC_GetSysClockFreq+0x150>
 800767c:	2900      	cmp	r1, #0
 800767e:	d002      	beq.n	8007686 <HAL_RCC_GetSysClockFreq+0x32>
 8007680:	2904      	cmp	r1, #4
 8007682:	d003      	beq.n	800768c <HAL_RCC_GetSysClockFreq+0x38>
 8007684:	e08e      	b.n	80077a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007686:	4b4c      	ldr	r3, [pc, #304]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8007688:	60bb      	str	r3, [r7, #8]
      break;
 800768a:	e08e      	b.n	80077aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800768c:	4b4b      	ldr	r3, [pc, #300]	; (80077bc <HAL_RCC_GetSysClockFreq+0x168>)
 800768e:	60bb      	str	r3, [r7, #8]
      break;
 8007690:	e08b      	b.n	80077aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007692:	4948      	ldr	r1, [pc, #288]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007694:	6849      	ldr	r1, [r1, #4]
 8007696:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800769a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800769c:	4945      	ldr	r1, [pc, #276]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800769e:	6849      	ldr	r1, [r1, #4]
 80076a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80076a4:	2900      	cmp	r1, #0
 80076a6:	d024      	beq.n	80076f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076a8:	4942      	ldr	r1, [pc, #264]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80076aa:	6849      	ldr	r1, [r1, #4]
 80076ac:	0989      	lsrs	r1, r1, #6
 80076ae:	4608      	mov	r0, r1
 80076b0:	f04f 0100 	mov.w	r1, #0
 80076b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80076b8:	f04f 0500 	mov.w	r5, #0
 80076bc:	ea00 0204 	and.w	r2, r0, r4
 80076c0:	ea01 0305 	and.w	r3, r1, r5
 80076c4:	493d      	ldr	r1, [pc, #244]	; (80077bc <HAL_RCC_GetSysClockFreq+0x168>)
 80076c6:	fb01 f003 	mul.w	r0, r1, r3
 80076ca:	2100      	movs	r1, #0
 80076cc:	fb01 f102 	mul.w	r1, r1, r2
 80076d0:	1844      	adds	r4, r0, r1
 80076d2:	493a      	ldr	r1, [pc, #232]	; (80077bc <HAL_RCC_GetSysClockFreq+0x168>)
 80076d4:	fba2 0101 	umull	r0, r1, r2, r1
 80076d8:	1863      	adds	r3, r4, r1
 80076da:	4619      	mov	r1, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	461a      	mov	r2, r3
 80076e0:	f04f 0300 	mov.w	r3, #0
 80076e4:	f7f9 f878 	bl	80007d8 <__aeabi_uldivmod>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4613      	mov	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e04a      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f2:	4b30      	ldr	r3, [pc, #192]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	099b      	lsrs	r3, r3, #6
 80076f8:	461a      	mov	r2, r3
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007702:	f04f 0100 	mov.w	r1, #0
 8007706:	ea02 0400 	and.w	r4, r2, r0
 800770a:	ea03 0501 	and.w	r5, r3, r1
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	014b      	lsls	r3, r1, #5
 800771c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007720:	0142      	lsls	r2, r0, #5
 8007722:	4610      	mov	r0, r2
 8007724:	4619      	mov	r1, r3
 8007726:	1b00      	subs	r0, r0, r4
 8007728:	eb61 0105 	sbc.w	r1, r1, r5
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	018b      	lsls	r3, r1, #6
 8007736:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800773a:	0182      	lsls	r2, r0, #6
 800773c:	1a12      	subs	r2, r2, r0
 800773e:	eb63 0301 	sbc.w	r3, r3, r1
 8007742:	f04f 0000 	mov.w	r0, #0
 8007746:	f04f 0100 	mov.w	r1, #0
 800774a:	00d9      	lsls	r1, r3, #3
 800774c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007750:	00d0      	lsls	r0, r2, #3
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	1912      	adds	r2, r2, r4
 8007758:	eb45 0303 	adc.w	r3, r5, r3
 800775c:	f04f 0000 	mov.w	r0, #0
 8007760:	f04f 0100 	mov.w	r1, #0
 8007764:	0299      	lsls	r1, r3, #10
 8007766:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800776a:	0290      	lsls	r0, r2, #10
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4610      	mov	r0, r2
 8007772:	4619      	mov	r1, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	461a      	mov	r2, r3
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	f7f9 f82c 	bl	80007d8 <__aeabi_uldivmod>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4613      	mov	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	0c1b      	lsrs	r3, r3, #16
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	3301      	adds	r3, #1
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a0:	60bb      	str	r3, [r7, #8]
      break;
 80077a2:	e002      	b.n	80077aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80077a6:	60bb      	str	r3, [r7, #8]
      break;
 80077a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077aa:	68bb      	ldr	r3, [r7, #8]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bdb0      	pop	{r4, r5, r7, pc}
 80077b4:	40023800 	.word	0x40023800
 80077b8:	00f42400 	.word	0x00f42400
 80077bc:	017d7840 	.word	0x017d7840

080077c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077c4:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80077c6:	681b      	ldr	r3, [r3, #0]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	20000018 	.word	0x20000018

080077d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077dc:	f7ff fff0 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 80077e0:	4602      	mov	r2, r0
 80077e2:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	0a9b      	lsrs	r3, r3, #10
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	4903      	ldr	r1, [pc, #12]	; (80077fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80077ee:	5ccb      	ldrb	r3, [r1, r3]
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	40023800 	.word	0x40023800
 80077fc:	0802a3fc 	.word	0x0802a3fc

08007800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007804:	f7ff ffdc 	bl	80077c0 <HAL_RCC_GetHCLKFreq>
 8007808:	4602      	mov	r2, r0
 800780a:	4b05      	ldr	r3, [pc, #20]	; (8007820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	0b5b      	lsrs	r3, r3, #13
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	4903      	ldr	r1, [pc, #12]	; (8007824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007816:	5ccb      	ldrb	r3, [r1, r3]
 8007818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800781c:	4618      	mov	r0, r3
 800781e:	bd80      	pop	{r7, pc}
 8007820:	40023800 	.word	0x40023800
 8007824:	0802a3fc 	.word	0x0802a3fc

08007828 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	220f      	movs	r2, #15
 8007836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007838:	4b12      	ldr	r3, [pc, #72]	; (8007884 <HAL_RCC_GetClockConfig+0x5c>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0203 	and.w	r2, r3, #3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007844:	4b0f      	ldr	r3, [pc, #60]	; (8007884 <HAL_RCC_GetClockConfig+0x5c>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007850:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <HAL_RCC_GetClockConfig+0x5c>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800785c:	4b09      	ldr	r3, [pc, #36]	; (8007884 <HAL_RCC_GetClockConfig+0x5c>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	08db      	lsrs	r3, r3, #3
 8007862:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800786a:	4b07      	ldr	r3, [pc, #28]	; (8007888 <HAL_RCC_GetClockConfig+0x60>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 020f 	and.w	r2, r3, #15
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	601a      	str	r2, [r3, #0]
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40023800 	.word	0x40023800
 8007888:	40023c00 	.word	0x40023c00

0800788c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d012      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078b4:	4b69      	ldr	r3, [pc, #420]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4a68      	ldr	r2, [pc, #416]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078be:	6093      	str	r3, [r2, #8]
 80078c0:	4b66      	ldr	r3, [pc, #408]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c8:	4964      	ldr	r1, [pc, #400]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80078d6:	2301      	movs	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d017      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078e6:	4b5d      	ldr	r3, [pc, #372]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f4:	4959      	ldr	r1, [pc, #356]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007904:	d101      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007906:	2301      	movs	r3, #1
 8007908:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007912:	2301      	movs	r3, #1
 8007914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d017      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007922:	4b4e      	ldr	r3, [pc, #312]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	494a      	ldr	r1, [pc, #296]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007940:	d101      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007942:	2301      	movs	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800794e:	2301      	movs	r3, #1
 8007950:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800795e:	2301      	movs	r3, #1
 8007960:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 808b 	beq.w	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007970:	4b3a      	ldr	r3, [pc, #232]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	4a39      	ldr	r2, [pc, #228]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797a:	6413      	str	r3, [r2, #64]	; 0x40
 800797c:	4b37      	ldr	r3, [pc, #220]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007984:	60bb      	str	r3, [r7, #8]
 8007986:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007988:	4b35      	ldr	r3, [pc, #212]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a34      	ldr	r2, [pc, #208]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800798e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007994:	f7fb ffa0 	bl	80038d8 <HAL_GetTick>
 8007998:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800799a:	e008      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800799c:	f7fb ff9c 	bl	80038d8 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b64      	cmp	r3, #100	; 0x64
 80079a8:	d901      	bls.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e355      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079ae:	4b2c      	ldr	r3, [pc, #176]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f0      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079ba:	4b28      	ldr	r3, [pc, #160]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d035      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d02e      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079d8:	4b20      	ldr	r3, [pc, #128]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079e2:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	4a1d      	ldr	r2, [pc, #116]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079ee:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f2:	4a1a      	ldr	r2, [pc, #104]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079fa:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a00:	4b16      	ldr	r3, [pc, #88]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d114      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fb ff64 	bl	80038d8 <HAL_GetTick>
 8007a10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a12:	e00a      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a14:	f7fb ff60 	bl	80038d8 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e317      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0ee      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a42:	d111      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a50:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a52:	400b      	ands	r3, r1
 8007a54:	4901      	ldr	r1, [pc, #4]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	608b      	str	r3, [r1, #8]
 8007a5a:	e00b      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a5c:	40023800 	.word	0x40023800
 8007a60:	40007000 	.word	0x40007000
 8007a64:	0ffffcff 	.word	0x0ffffcff
 8007a68:	4bb0      	ldr	r3, [pc, #704]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	4aaf      	ldr	r2, [pc, #700]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a72:	6093      	str	r3, [r2, #8]
 8007a74:	4bad      	ldr	r3, [pc, #692]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a80:	49aa      	ldr	r1, [pc, #680]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0310 	and.w	r3, r3, #16
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d010      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a92:	4ba6      	ldr	r3, [pc, #664]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a98:	4aa4      	ldr	r2, [pc, #656]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007aa2:	4ba2      	ldr	r3, [pc, #648]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aa4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	499f      	ldr	r1, [pc, #636]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ac0:	4b9a      	ldr	r3, [pc, #616]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ace:	4997      	ldr	r1, [pc, #604]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ae2:	4b92      	ldr	r3, [pc, #584]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af0:	498e      	ldr	r1, [pc, #568]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b04:	4b89      	ldr	r3, [pc, #548]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b12:	4986      	ldr	r1, [pc, #536]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b26:	4b81      	ldr	r3, [pc, #516]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	497d      	ldr	r1, [pc, #500]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b48:	4b78      	ldr	r3, [pc, #480]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4e:	f023 0203 	bic.w	r2, r3, #3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b56:	4975      	ldr	r1, [pc, #468]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b6a:	4b70      	ldr	r3, [pc, #448]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b70:	f023 020c 	bic.w	r2, r3, #12
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b78:	496c      	ldr	r1, [pc, #432]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b8c:	4b67      	ldr	r3, [pc, #412]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9a:	4964      	ldr	r1, [pc, #400]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bae:	4b5f      	ldr	r3, [pc, #380]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbc:	495b      	ldr	r1, [pc, #364]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bd0:	4b56      	ldr	r3, [pc, #344]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bde:	4953      	ldr	r1, [pc, #332]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007bf2:	4b4e      	ldr	r3, [pc, #312]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	494a      	ldr	r1, [pc, #296]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c14:	4b45      	ldr	r3, [pc, #276]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c22:	4942      	ldr	r1, [pc, #264]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c36:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c44:	4939      	ldr	r1, [pc, #228]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c58:	4b34      	ldr	r3, [pc, #208]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c66:	4931      	ldr	r1, [pc, #196]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d011      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c7a:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c88:	4928      	ldr	r1, [pc, #160]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c98:	d101      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007caa:	2301      	movs	r3, #1
 8007cac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cba:	4b1c      	ldr	r3, [pc, #112]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc8:	4918      	ldr	r1, [pc, #96]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00b      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007cdc:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cec:	490f      	ldr	r1, [pc, #60]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d005      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d02:	f040 80d8 	bne.w	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a08      	ldr	r2, [pc, #32]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d12:	f7fb fde1 	bl	80038d8 <HAL_GetTick>
 8007d16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d18:	e00a      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d1a:	f7fb fddd 	bl	80038d8 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b64      	cmp	r3, #100	; 0x64
 8007d26:	d903      	bls.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e196      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007d2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d30:	4b6c      	ldr	r3, [pc, #432]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1ee      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d021      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d11d      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d50:	4b64      	ldr	r3, [pc, #400]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d56:	0c1b      	lsrs	r3, r3, #16
 8007d58:	f003 0303 	and.w	r3, r3, #3
 8007d5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d5e:	4b61      	ldr	r3, [pc, #388]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d64:	0e1b      	lsrs	r3, r3, #24
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	019a      	lsls	r2, r3, #6
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	041b      	lsls	r3, r3, #16
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	061b      	lsls	r3, r3, #24
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	071b      	lsls	r3, r3, #28
 8007d84:	4957      	ldr	r1, [pc, #348]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007da0:	d00a      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d02e      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007db6:	d129      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007db8:	4b4a      	ldr	r3, [pc, #296]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dc6:	4b47      	ldr	r3, [pc, #284]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dcc:	0f1b      	lsrs	r3, r3, #28
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	019a      	lsls	r2, r3, #6
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	431a      	orrs	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	061b      	lsls	r3, r3, #24
 8007de6:	431a      	orrs	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	071b      	lsls	r3, r3, #28
 8007dec:	493d      	ldr	r1, [pc, #244]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007df4:	4b3b      	ldr	r3, [pc, #236]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dfa:	f023 021f 	bic.w	r2, r3, #31
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	3b01      	subs	r3, #1
 8007e04:	4937      	ldr	r1, [pc, #220]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01d      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e18:	4b32      	ldr	r3, [pc, #200]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1e:	0e1b      	lsrs	r3, r3, #24
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e26:	4b2f      	ldr	r3, [pc, #188]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e2c:	0f1b      	lsrs	r3, r3, #28
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	019a      	lsls	r2, r3, #6
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	041b      	lsls	r3, r3, #16
 8007e40:	431a      	orrs	r2, r3
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	061b      	lsls	r3, r3, #24
 8007e46:	431a      	orrs	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	071b      	lsls	r3, r3, #28
 8007e4c:	4925      	ldr	r1, [pc, #148]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d011      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	019a      	lsls	r2, r3, #6
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	061b      	lsls	r3, r3, #24
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	071b      	lsls	r3, r3, #28
 8007e7c:	4919      	ldr	r1, [pc, #100]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e84:	4b17      	ldr	r3, [pc, #92]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e90:	f7fb fd22 	bl	80038d8 <HAL_GetTick>
 8007e94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e96:	e008      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e98:	f7fb fd1e 	bl	80038d8 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b64      	cmp	r3, #100	; 0x64
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e0d7      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	f040 80cd 	bne.w	8008058 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a08      	ldr	r2, [pc, #32]	; (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eca:	f7fb fd05 	bl	80038d8 <HAL_GetTick>
 8007ece:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ed0:	e00a      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ed2:	f7fb fd01 	bl	80038d8 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b64      	cmp	r3, #100	; 0x64
 8007ede:	d903      	bls.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e0ba      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007ee4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ee8:	4b5e      	ldr	r3, [pc, #376]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef4:	d0ed      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d009      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d02e      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d12a      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f1e:	4b51      	ldr	r3, [pc, #324]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f24:	0c1b      	lsrs	r3, r3, #16
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f2c:	4b4d      	ldr	r3, [pc, #308]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f32:	0f1b      	lsrs	r3, r3, #28
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	019a      	lsls	r2, r3, #6
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	061b      	lsls	r3, r3, #24
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	071b      	lsls	r3, r3, #28
 8007f52:	4944      	ldr	r1, [pc, #272]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f5a:	4b42      	ldr	r3, [pc, #264]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	493d      	ldr	r1, [pc, #244]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d022      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f88:	d11d      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f8a:	4b36      	ldr	r3, [pc, #216]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f90:	0e1b      	lsrs	r3, r3, #24
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f98:	4b32      	ldr	r3, [pc, #200]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9e:	0f1b      	lsrs	r3, r3, #28
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	019a      	lsls	r2, r3, #6
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	041b      	lsls	r3, r3, #16
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	061b      	lsls	r3, r3, #24
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	071b      	lsls	r3, r3, #28
 8007fbe:	4929      	ldr	r1, [pc, #164]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d028      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fd2:	4b24      	ldr	r3, [pc, #144]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd8:	0e1b      	lsrs	r3, r3, #24
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fe0:	4b20      	ldr	r3, [pc, #128]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	f003 0303 	and.w	r3, r3, #3
 8007fec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	019a      	lsls	r2, r3, #6
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	061b      	lsls	r3, r3, #24
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	071b      	lsls	r3, r3, #28
 8008006:	4917      	ldr	r1, [pc, #92]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800800e:	4b15      	ldr	r3, [pc, #84]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	4911      	ldr	r1, [pc, #68]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800801e:	4313      	orrs	r3, r2
 8008020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008024:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a0e      	ldr	r2, [pc, #56]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800802a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800802e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008030:	f7fb fc52 	bl	80038d8 <HAL_GetTick>
 8008034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008036:	e008      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008038:	f7fb fc4e 	bl	80038d8 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b64      	cmp	r3, #100	; 0x64
 8008044:	d901      	bls.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e007      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008056:	d1ef      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	40023800 	.word	0x40023800

08008068 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008086:	f040 808c 	bne.w	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800808a:	4b95      	ldr	r3, [pc, #596]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800808c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008090:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008098:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080a0:	d07c      	beq.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080a8:	d87d      	bhi.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b6:	d039      	beq.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80080b8:	e075      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080ba:	4b89      	ldr	r3, [pc, #548]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d108      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080c6:	4b86      	ldr	r3, [pc, #536]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ce:	4a85      	ldr	r2, [pc, #532]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	e007      	b.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080d8:	4b81      	ldr	r3, [pc, #516]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080e0:	4a81      	ldr	r2, [pc, #516]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80080e8:	4b7d      	ldr	r3, [pc, #500]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ee:	0e1b      	lsrs	r3, r3, #24
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80080f6:	4b7a      	ldr	r3, [pc, #488]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fc:	099b      	lsrs	r3, r3, #6
 80080fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	fb02 f203 	mul.w	r2, r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	fbb2 f3f3 	udiv	r3, r2, r3
 800810e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008110:	4b73      	ldr	r3, [pc, #460]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008116:	0a1b      	lsrs	r3, r3, #8
 8008118:	f003 031f 	and.w	r3, r3, #31
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	fbb2 f3f3 	udiv	r3, r2, r3
 8008128:	617b      	str	r3, [r7, #20]
        break;
 800812a:	e03d      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800812c:	4b6c      	ldr	r3, [pc, #432]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008138:	4b69      	ldr	r3, [pc, #420]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008140:	4a68      	ldr	r2, [pc, #416]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008142:	fbb2 f3f3 	udiv	r3, r2, r3
 8008146:	613b      	str	r3, [r7, #16]
 8008148:	e007      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800814a:	4b65      	ldr	r3, [pc, #404]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008152:	4a65      	ldr	r2, [pc, #404]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008154:	fbb2 f3f3 	udiv	r3, r2, r3
 8008158:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800815a:	4b61      	ldr	r3, [pc, #388]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800815c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008160:	0e1b      	lsrs	r3, r3, #24
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008168:	4b5d      	ldr	r3, [pc, #372]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800816a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816e:	099b      	lsrs	r3, r3, #6
 8008170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	fb02 f203 	mul.w	r2, r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008180:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008182:	4b57      	ldr	r3, [pc, #348]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008188:	f003 031f 	and.w	r3, r3, #31
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	fbb2 f3f3 	udiv	r3, r2, r3
 8008198:	617b      	str	r3, [r7, #20]
        break;
 800819a:	e005      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800819c:	4b53      	ldr	r3, [pc, #332]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800819e:	617b      	str	r3, [r7, #20]
        break;
 80081a0:	e002      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80081a2:	bf00      	nop
 80081a4:	e000      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80081a6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ae:	f040 808c 	bne.w	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80081b2:	4b4b      	ldr	r3, [pc, #300]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80081c0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081c8:	d07c      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081d0:	d87d      	bhi.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081de:	d039      	beq.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80081e0:	e075      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081e2:	4b3f      	ldr	r3, [pc, #252]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d108      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081ee:	4b3c      	ldr	r3, [pc, #240]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f6:	4a3b      	ldr	r2, [pc, #236]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80081f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fc:	613b      	str	r3, [r7, #16]
 80081fe:	e007      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008200:	4b37      	ldr	r3, [pc, #220]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008208:	4a37      	ldr	r2, [pc, #220]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008210:	4b33      	ldr	r3, [pc, #204]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008216:	0e1b      	lsrs	r3, r3, #24
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800821e:	4b30      	ldr	r3, [pc, #192]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008224:	099b      	lsrs	r3, r3, #6
 8008226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	fb02 f203 	mul.w	r2, r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	fbb2 f3f3 	udiv	r3, r2, r3
 8008236:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008238:	4b29      	ldr	r3, [pc, #164]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800823a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	f003 031f 	and.w	r3, r3, #31
 8008244:	3301      	adds	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008250:	617b      	str	r3, [r7, #20]
        break;
 8008252:	e03d      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008254:	4b22      	ldr	r3, [pc, #136]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d108      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008260:	4b1f      	ldr	r3, [pc, #124]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008268:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800826a:	fbb2 f3f3 	udiv	r3, r2, r3
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	e007      	b.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008272:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800827a:	4a1b      	ldr	r2, [pc, #108]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800827c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008280:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008282:	4b17      	ldr	r3, [pc, #92]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008288:	0e1b      	lsrs	r3, r3, #24
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008290:	4b13      	ldr	r3, [pc, #76]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008296:	099b      	lsrs	r3, r3, #6
 8008298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	fb02 f203 	mul.w	r2, r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80082aa:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b0:	f003 031f 	and.w	r3, r3, #31
 80082b4:	3301      	adds	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c0:	617b      	str	r3, [r7, #20]
        break;
 80082c2:	e005      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80082c4:	4b09      	ldr	r3, [pc, #36]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80082c6:	617b      	str	r3, [r7, #20]
        break;
 80082c8:	e002      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80082ce:	bf00      	nop

  return frequency;
 80082d0:	697b      	ldr	r3, [r7, #20]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40023800 	.word	0x40023800
 80082e4:	00f42400 	.word	0x00f42400
 80082e8:	017d7840 	.word	0x017d7840
 80082ec:	00bb8000 	.word	0x00bb8000

080082f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e06b      	b.n	80083da <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	7f5b      	ldrb	r3, [r3, #29]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d105      	bne.n	8008318 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fa fd16 	bl	8002d44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	22ca      	movs	r2, #202	; 0xca
 8008324:	625a      	str	r2, [r3, #36]	; 0x24
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2253      	movs	r2, #83	; 0x53
 800832c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fb00 	bl	8008934 <RTC_EnterInitMode>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d008      	beq.n	800834c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	22ff      	movs	r2, #255	; 0xff
 8008340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2204      	movs	r2, #4
 8008346:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e046      	b.n	80083da <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6899      	ldr	r1, [r3, #8]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	4b23      	ldr	r3, [pc, #140]	; (80083e4 <HAL_RTC_Init+0xf4>)
 8008358:	400b      	ands	r3, r1
 800835a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6899      	ldr	r1, [r3, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	68d2      	ldr	r2, [r2, #12]
 8008382:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6919      	ldr	r1, [r3, #16]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	041a      	lsls	r2, r3, #16
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083a6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0208 	bic.w	r2, r2, #8
 80083b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	699a      	ldr	r2, [r3, #24]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	22ff      	movs	r2, #255	; 0xff
 80083d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80083d8:	2300      	movs	r3, #0
  }
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	ff8fffbf 	.word	0xff8fffbf

080083e8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083e8:	b590      	push	{r4, r7, lr}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	7f1b      	ldrb	r3, [r3, #28]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_RTC_SetTime+0x1c>
 8008400:	2302      	movs	r3, #2
 8008402:	e0a8      	b.n	8008556 <HAL_RTC_SetTime+0x16e>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2202      	movs	r2, #2
 800840e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d126      	bne.n	8008464 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 faac 	bl	800898c <RTC_ByteToBcd2>
 8008434:	4603      	mov	r3, r0
 8008436:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	4618      	mov	r0, r3
 800843e:	f000 faa5 	bl	800898c <RTC_ByteToBcd2>
 8008442:	4603      	mov	r3, r0
 8008444:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008446:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	789b      	ldrb	r3, [r3, #2]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fa9d 	bl	800898c <RTC_ByteToBcd2>
 8008452:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008454:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	7b1b      	ldrb	r3, [r3, #12]
 800845c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	e018      	b.n	8008496 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2200      	movs	r2, #0
 8008476:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008484:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800848a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	7b1b      	ldrb	r3, [r3, #12]
 8008490:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008492:	4313      	orrs	r3, r2
 8008494:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	22ca      	movs	r2, #202	; 0xca
 800849c:	625a      	str	r2, [r3, #36]	; 0x24
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2253      	movs	r2, #83	; 0x53
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fa44 	bl	8008934 <RTC_EnterInitMode>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	22ff      	movs	r2, #255	; 0xff
 80084b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2204      	movs	r2, #4
 80084be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e045      	b.n	8008556 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	6979      	ldr	r1, [r7, #20]
 80084d0:	4b23      	ldr	r3, [pc, #140]	; (8008560 <HAL_RTC_SetTime+0x178>)
 80084d2:	400b      	ands	r3, r1
 80084d4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6899      	ldr	r1, [r3, #8]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	431a      	orrs	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800850c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d111      	bne.n	8008540 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f9e1 	bl	80088e4 <HAL_RTC_WaitForSynchro>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	22ff      	movs	r2, #255	; 0xff
 800852e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2204      	movs	r2, #4
 8008534:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e00a      	b.n	8008556 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	22ff      	movs	r2, #255	; 0xff
 8008546:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008554:	2300      	movs	r3, #0
  }
}
 8008556:	4618      	mov	r0, r3
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd90      	pop	{r4, r7, pc}
 800855e:	bf00      	nop
 8008560:	007f7f7f 	.word	0x007f7f7f

08008564 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008564:	b590      	push	{r4, r7, lr}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	7f1b      	ldrb	r3, [r3, #28]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d101      	bne.n	8008580 <HAL_RTC_SetDate+0x1c>
 800857c:	2302      	movs	r3, #2
 800857e:	e092      	b.n	80086a6 <HAL_RTC_SetDate+0x142>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2202      	movs	r2, #2
 800858a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10e      	bne.n	80085b0 <HAL_RTC_SetDate+0x4c>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	f023 0310 	bic.w	r3, r3, #16
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	330a      	adds	r3, #10
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d11c      	bne.n	80085f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	78db      	ldrb	r3, [r3, #3]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f9e6 	bl	800898c <RTC_ByteToBcd2>
 80085c0:	4603      	mov	r3, r0
 80085c2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f9df 	bl	800898c <RTC_ByteToBcd2>
 80085ce:	4603      	mov	r3, r0
 80085d0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085d2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	789b      	ldrb	r3, [r3, #2]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 f9d7 	bl	800898c <RTC_ByteToBcd2>
 80085de:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80085e0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	e00e      	b.n	800860e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	78db      	ldrb	r3, [r3, #3]
 80085f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	785b      	ldrb	r3, [r3, #1]
 80085fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008602:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	22ca      	movs	r2, #202	; 0xca
 8008614:	625a      	str	r2, [r3, #36]	; 0x24
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2253      	movs	r2, #83	; 0x53
 800861c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 f988 	bl	8008934 <RTC_EnterInitMode>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00b      	beq.n	8008642 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	22ff      	movs	r2, #255	; 0xff
 8008630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2204      	movs	r2, #4
 8008636:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e031      	b.n	80086a6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	6979      	ldr	r1, [r7, #20]
 8008648:	4b19      	ldr	r3, [pc, #100]	; (80086b0 <HAL_RTC_SetDate+0x14c>)
 800864a:	400b      	ands	r3, r1
 800864c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800865c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d111      	bne.n	8008690 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 f939 	bl	80088e4 <HAL_RTC_WaitForSynchro>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	22ff      	movs	r2, #255	; 0xff
 800867e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2204      	movs	r2, #4
 8008684:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e00a      	b.n	80086a6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	22ff      	movs	r2, #255	; 0xff
 8008696:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80086a4:	2300      	movs	r3, #0
  }
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd90      	pop	{r4, r7, pc}
 80086ae:	bf00      	nop
 80086b0:	00ffff3f 	.word	0x00ffff3f

080086b4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b089      	sub	sp, #36	; 0x24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	7f1b      	ldrb	r3, [r3, #28]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d101      	bne.n	80086d8 <HAL_RTC_SetAlarm+0x24>
 80086d4:	2302      	movs	r3, #2
 80086d6:	e101      	b.n	80088dc <HAL_RTC_SetAlarm+0x228>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2202      	movs	r2, #2
 80086e2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d137      	bne.n	800875a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2200      	movs	r2, #0
 80086fc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f942 	bl	800898c <RTC_ByteToBcd2>
 8008708:	4603      	mov	r3, r0
 800870a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	785b      	ldrb	r3, [r3, #1]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f93b 	bl	800898c <RTC_ByteToBcd2>
 8008716:	4603      	mov	r3, r0
 8008718:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800871a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	789b      	ldrb	r3, [r3, #2]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f933 	bl	800898c <RTC_ByteToBcd2>
 8008726:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008728:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	7b1b      	ldrb	r3, [r3, #12]
 8008730:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008732:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f925 	bl	800898c <RTC_ByteToBcd2>
 8008742:	4603      	mov	r3, r0
 8008744:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008746:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800874e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008754:	4313      	orrs	r3, r2
 8008756:	61fb      	str	r3, [r7, #28]
 8008758:	e023      	b.n	80087a2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800877a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008780:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	7b1b      	ldrb	r3, [r3, #12]
 8008786:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008788:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008790:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008792:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008798:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800879e:	4313      	orrs	r3, r2
 80087a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	22ca      	movs	r2, #202	; 0xca
 80087b4:	625a      	str	r2, [r3, #36]	; 0x24
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2253      	movs	r2, #83	; 0x53
 80087bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c6:	d13f      	bne.n	8008848 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087d6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087e6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087e8:	f7fb f876 	bl	80038d8 <HAL_GetTick>
 80087ec:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087ee:	e013      	b.n	8008818 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087f0:	f7fb f872 	bl	80038d8 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087fe:	d90b      	bls.n	8008818 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	22ff      	movs	r2, #255	; 0xff
 8008806:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2203      	movs	r2, #3
 800880c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e061      	b.n	80088dc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0e4      	beq.n	80087f0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008844:	609a      	str	r2, [r3, #8]
 8008846:	e03e      	b.n	80088c6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008856:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008866:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008868:	f7fb f836 	bl	80038d8 <HAL_GetTick>
 800886c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800886e:	e013      	b.n	8008898 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008870:	f7fb f832 	bl	80038d8 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800887e:	d90b      	bls.n	8008898 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	22ff      	movs	r2, #255	; 0xff
 8008886:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2203      	movs	r2, #3
 800888c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e021      	b.n	80088dc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0e4      	beq.n	8008870 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	22ff      	movs	r2, #255	; 0xff
 80088cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3724      	adds	r7, #36	; 0x24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd90      	pop	{r4, r7, pc}

080088e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008900:	f7fa ffea 	bl	80038d8 <HAL_GetTick>
 8008904:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008906:	e009      	b.n	800891c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008908:	f7fa ffe6 	bl	80038d8 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008916:	d901      	bls.n	800891c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e007      	b.n	800892c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0ee      	beq.n	8008908 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d119      	bne.n	8008982 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f04f 32ff 	mov.w	r2, #4294967295
 8008956:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008958:	f7fa ffbe 	bl	80038d8 <HAL_GetTick>
 800895c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800895e:	e009      	b.n	8008974 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008960:	f7fa ffba 	bl	80038d8 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800896e:	d901      	bls.n	8008974 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e007      	b.n	8008984 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0ee      	beq.n	8008960 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800899a:	e005      	b.n	80089a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3301      	adds	r3, #1
 80089a0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	3b0a      	subs	r3, #10
 80089a6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	d8f6      	bhi.n	800899c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	b2db      	uxtb	r3, r3
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	7f1b      	ldrb	r3, [r3, #28]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d101      	bne.n	80089e4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80089e0:	2302      	movs	r3, #2
 80089e2:	e03e      	b.n	8008a62 <HAL_RTCEx_SetTimeStamp+0x9a>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2201      	movs	r2, #1
 80089e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2202      	movs	r2, #2
 80089ee:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689a      	ldr	r2, [r3, #8]
 80089f6:	4b1e      	ldr	r3, [pc, #120]	; (8008a70 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	22ca      	movs	r2, #202	; 0xca
 8008a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2253      	movs	r2, #83	; 0x53
 8008a12:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0206 	bic.w	r2, r2, #6
 8008a22:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a4a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	22ff      	movs	r2, #255	; 0xff
 8008a52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	fffff7f7 	.word	0xfffff7f7

08008a74 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e14d      	b.n	8008d2e <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fa fcf6 	bl	8003498 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f953 	bl	8008d60 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d00c      	beq.n	8008adc <HAL_SAI_Init+0x68>
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d80d      	bhi.n	8008ae2 <HAL_SAI_Init+0x6e>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_SAI_Init+0x5c>
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d003      	beq.n	8008ad6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008ace:	e008      	b.n	8008ae2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]
      break;
 8008ad4:	e006      	b.n	8008ae4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	61fb      	str	r3, [r7, #28]
      break;
 8008ada:	e003      	b.n	8008ae4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008adc:	2320      	movs	r3, #32
 8008ade:	61fb      	str	r3, [r7, #28]
      break;
 8008ae0:	e000      	b.n	8008ae4 <HAL_SAI_Init+0x70>
    break;
 8008ae2:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d81e      	bhi.n	8008b2a <HAL_SAI_Init+0xb6>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <HAL_SAI_Init+0x80>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b05 	.word	0x08008b05
 8008af8:	08008b0b 	.word	0x08008b0b
 8008afc:	08008b13 	.word	0x08008b13
 8008b00:	08008b1b 	.word	0x08008b1b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b08:	e010      	b.n	8008b2c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b0e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b10:	e00c      	b.n	8008b2c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b16:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b18:	e008      	b.n	8008b2c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b1e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008b28:	e000      	b.n	8008b2c <HAL_SAI_Init+0xb8>
  default:
    break;
 8008b2a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a81      	ldr	r2, [pc, #516]	; (8008d38 <HAL_SAI_Init+0x2c4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d004      	beq.n	8008b40 <HAL_SAI_Init+0xcc>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a80      	ldr	r2, [pc, #512]	; (8008d3c <HAL_SAI_Init+0x2c8>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d103      	bne.n	8008b48 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008b40:	4a7f      	ldr	r2, [pc, #508]	; (8008d40 <HAL_SAI_Init+0x2cc>)
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	e002      	b.n	8008b4e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b48:	4a7e      	ldr	r2, [pc, #504]	; (8008d44 <HAL_SAI_Init+0x2d0>)
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d043      	beq.n	8008bde <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a76      	ldr	r2, [pc, #472]	; (8008d38 <HAL_SAI_Init+0x2c4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d004      	beq.n	8008b6e <HAL_SAI_Init+0xfa>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a74      	ldr	r2, [pc, #464]	; (8008d3c <HAL_SAI_Init+0x2c8>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d104      	bne.n	8008b78 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b6e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b72:	f7ff fa79 	bl	8008068 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b76:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a72      	ldr	r2, [pc, #456]	; (8008d48 <HAL_SAI_Init+0x2d4>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d004      	beq.n	8008b8c <HAL_SAI_Init+0x118>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a71      	ldr	r2, [pc, #452]	; (8008d4c <HAL_SAI_Init+0x2d8>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d104      	bne.n	8008b96 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b8c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b90:	f7ff fa6a 	bl	8008068 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b94:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	025b      	lsls	r3, r3, #9
 8008ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bac:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a67      	ldr	r2, [pc, #412]	; (8008d50 <HAL_SAI_Init+0x2dc>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	08da      	lsrs	r2, r3, #3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008bbc:	68f9      	ldr	r1, [r7, #12]
 8008bbe:	4b64      	ldr	r3, [pc, #400]	; (8008d50 <HAL_SAI_Init+0x2dc>)
 8008bc0:	fba3 2301 	umull	r2, r3, r3, r1
 8008bc4:	08da      	lsrs	r2, r3, #3
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	1aca      	subs	r2, r1, r3
 8008bd0:	2a08      	cmp	r2, #8
 8008bd2:	d904      	bls.n	8008bde <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_SAI_Init+0x17a>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d109      	bne.n	8008c02 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_SAI_Init+0x186>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e001      	b.n	8008bfe <HAL_SAI_Init+0x18a>
 8008bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bfe:	61bb      	str	r3, [r7, #24]
 8008c00:	e008      	b.n	8008c14 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d102      	bne.n	8008c10 <HAL_SAI_Init+0x19c>
 8008c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c0e:	e000      	b.n	8008c12 <HAL_SAI_Init+0x19e>
 8008c10:	2300      	movs	r3, #0
 8008c12:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	4b4d      	ldr	r3, [pc, #308]	; (8008d54 <HAL_SAI_Init+0x2e0>)
 8008c20:	400b      	ands	r3, r1
 8008c22:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6819      	ldr	r1, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c38:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008c4c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c58:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	051b      	lsls	r3, r3, #20
 8008c60:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6859      	ldr	r1, [r3, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	4b38      	ldr	r3, [pc, #224]	; (8008d58 <HAL_SAI_Init+0x2e4>)
 8008c76:	400b      	ands	r3, r1
 8008c78:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6859      	ldr	r1, [r3, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699a      	ldr	r2, [r3, #24]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6899      	ldr	r1, [r3, #8]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	4b2e      	ldr	r3, [pc, #184]	; (8008d5c <HAL_SAI_Init+0x2e8>)
 8008ca4:	400b      	ands	r3, r1
 8008ca6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6899      	ldr	r1, [r3, #8]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008cb8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008cbe:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008cc4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008cce:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68d9      	ldr	r1, [r3, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008ce6:	400b      	ands	r3, r1
 8008ce8:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68d9      	ldr	r1, [r3, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf8:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cfe:	041b      	lsls	r3, r3, #16
 8008d00:	431a      	orrs	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d06:	3b01      	subs	r3, #1
 8008d08:	021b      	lsls	r3, r3, #8
 8008d0a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3720      	adds	r7, #32
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	40015804 	.word	0x40015804
 8008d3c:	40015824 	.word	0x40015824
 8008d40:	40015800 	.word	0x40015800
 8008d44:	40015c00 	.word	0x40015c00
 8008d48:	40015c04 	.word	0x40015c04
 8008d4c:	40015c24 	.word	0x40015c24
 8008d50:	cccccccd 	.word	0xcccccccd
 8008d54:	ff05c010 	.word	0xff05c010
 8008d58:	ffff1ff0 	.word	0xffff1ff0
 8008d5c:	fff88000 	.word	0xfff88000

08008d60 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d60:	b490      	push	{r4, r7}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008d68:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <SAI_Disable+0x64>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a16      	ldr	r2, [pc, #88]	; (8008dc8 <SAI_Disable+0x68>)
 8008d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d72:	0b1b      	lsrs	r3, r3, #12
 8008d74:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d88:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	1e5c      	subs	r4, r3, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	73fb      	strb	r3, [r7, #15]
      break;
 8008da6:	e006      	b.n	8008db6 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e9      	bne.n	8008d8a <SAI_Disable+0x2a>

  return status;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bc90      	pop	{r4, r7}
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20000018 	.word	0x20000018
 8008dc8:	95cbec1b 	.word	0x95cbec1b

08008dcc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e022      	b.n	8008e24 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d105      	bne.n	8008df6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7f9 ffc1 	bl	8002d78 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2203      	movs	r2, #3
 8008dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f814 	bl	8008e2c <HAL_SD_InitCard>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e00a      	b.n	8008e24 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e2c:	b5b0      	push	{r4, r5, r7, lr}
 8008e2e:	b08e      	sub	sp, #56	; 0x38
 8008e30:	af04      	add	r7, sp, #16
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008e48:	2376      	movs	r3, #118	; 0x76
 8008e4a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681d      	ldr	r5, [r3, #0]
 8008e50:	466c      	mov	r4, sp
 8008e52:	f107 0314 	add.w	r3, r7, #20
 8008e56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e5e:	f107 0308 	add.w	r3, r7, #8
 8008e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e64:	4628      	mov	r0, r5
 8008e66:	f002 ff5d 	bl	800bd24 <SDMMC_Init>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e03b      	b.n	8008ef4 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e8a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f002 ff80 	bl	800bd96 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ea4:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fde4 	bl	8009a74 <SD_PowerON>
 8008eac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	431a      	orrs	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e013      	b.n	8008ef4 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fd05 	bl	80098dc <SD_InitCard>
 8008ed2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00b      	beq.n	8008ef2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3728      	adds	r7, #40	; 0x28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bdb0      	pop	{r4, r5, r7, pc}

08008efc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08c      	sub	sp, #48	; 0x30
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d107      	bne.n	8008f24 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e0cc      	b.n	80090be <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	f040 80c5 	bne.w	80090bc <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	441a      	add	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d907      	bls.n	8008f56 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e0b3      	b.n	80090be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2200      	movs	r2, #0
 8008f64:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7a:	4a53      	ldr	r2, [pc, #332]	; (80090c8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	4a52      	ldr	r2, [pc, #328]	; (80090cc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008f84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3380      	adds	r3, #128	; 0x80
 8008f98:	4619      	mov	r1, r3
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	025b      	lsls	r3, r3, #9
 8008fa0:	089b      	lsrs	r3, r3, #2
 8008fa2:	f7fb ff71 	bl	8004e88 <HAL_DMA_Start_IT>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d017      	beq.n	8008fdc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008fba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a43      	ldr	r2, [pc, #268]	; (80090d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e070      	b.n	80090be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0208 	orr.w	r2, r2, #8
 8008fea:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d002      	beq.n	8008ffa <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	025b      	lsls	r3, r3, #9
 8008ff8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009002:	4618      	mov	r0, r3
 8009004:	f002 ff5a 	bl	800bebc <SDMMC_CmdBlockLength>
 8009008:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00f      	beq.n	8009030 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a2e      	ldr	r2, [pc, #184]	; (80090d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8009016:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	431a      	orrs	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e046      	b.n	80090be <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009030:	f04f 33ff 	mov.w	r3, #4294967295
 8009034:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	025b      	lsls	r3, r3, #9
 800903a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800903c:	2390      	movs	r3, #144	; 0x90
 800903e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009040:	2302      	movs	r3, #2
 8009042:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009044:	2300      	movs	r3, #0
 8009046:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009048:	2301      	movs	r3, #1
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f107 0210 	add.w	r2, r7, #16
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f002 ff04 	bl	800be64 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d90a      	bls.n	8009078 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2282      	movs	r2, #130	; 0x82
 8009066:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800906e:	4618      	mov	r0, r3
 8009070:	f002 ff68 	bl	800bf44 <SDMMC_CmdReadMultiBlock>
 8009074:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009076:	e009      	b.n	800908c <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2281      	movs	r2, #129	; 0x81
 800907c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009084:	4618      	mov	r0, r3
 8009086:	f002 ff3b 	bl	800bf00 <SDMMC_CmdReadSingleBlock>
 800908a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	2b00      	cmp	r3, #0
 8009090:	d012      	beq.n	80090b8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a0e      	ldr	r2, [pc, #56]	; (80090d0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8009098:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	431a      	orrs	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e002      	b.n	80090be <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	e000      	b.n	80090be <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80090bc:	2302      	movs	r3, #2
  }
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3730      	adds	r7, #48	; 0x30
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	080097c7 	.word	0x080097c7
 80090cc:	08009839 	.word	0x08009839
 80090d0:	004005ff 	.word	0x004005ff

080090d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08c      	sub	sp, #48	; 0x30
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d107      	bne.n	80090fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e0cf      	b.n	800929c <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	f040 80c8 	bne.w	800929a <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800911a:	429a      	cmp	r2, r3
 800911c:	d907      	bls.n	800912e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e0b6      	b.n	800929c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2203      	movs	r2, #3
 8009132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2200      	movs	r2, #0
 800913c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 021a 	orr.w	r2, r2, #26
 800914c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009152:	4a54      	ldr	r2, [pc, #336]	; (80092a4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915a:	4a53      	ldr	r2, [pc, #332]	; (80092a8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800915c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009162:	2200      	movs	r2, #0
 8009164:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800916a:	2b01      	cmp	r3, #1
 800916c:	d002      	beq.n	8009174 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	025b      	lsls	r3, r3, #9
 8009172:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800917c:	4618      	mov	r0, r3
 800917e:	f002 fe9d 	bl	800bebc <SDMMC_CmdBlockLength>
 8009182:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00f      	beq.n	80091aa <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a47      	ldr	r2, [pc, #284]	; (80092ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	431a      	orrs	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e078      	b.n	800929c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d90a      	bls.n	80091c6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	22a0      	movs	r2, #160	; 0xa0
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091bc:	4618      	mov	r0, r3
 80091be:	f002 ff05 	bl	800bfcc <SDMMC_CmdWriteMultiBlock>
 80091c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80091c4:	e009      	b.n	80091da <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2290      	movs	r2, #144	; 0x90
 80091ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091d2:	4618      	mov	r0, r3
 80091d4:	f002 fed8 	bl	800bf88 <SDMMC_CmdWriteSingleBlock>
 80091d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d012      	beq.n	8009206 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a31      	ldr	r2, [pc, #196]	; (80092ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80091e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	431a      	orrs	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e04a      	b.n	800929c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f042 0208 	orr.w	r2, r2, #8
 8009214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3380      	adds	r3, #128	; 0x80
 8009222:	461a      	mov	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	025b      	lsls	r3, r3, #9
 8009228:	089b      	lsrs	r3, r3, #2
 800922a:	f7fb fe2d 	bl	8004e88 <HAL_DMA_Start_IT>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01a      	beq.n	800926a <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 021a 	bic.w	r2, r2, #26
 8009242:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a18      	ldr	r2, [pc, #96]	; (80092ac <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800924a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e018      	b.n	800929c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800926a:	f04f 33ff 	mov.w	r3, #4294967295
 800926e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	025b      	lsls	r3, r3, #9
 8009274:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009276:	2390      	movs	r3, #144	; 0x90
 8009278:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800927a:	2300      	movs	r3, #0
 800927c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800927e:	2300      	movs	r3, #0
 8009280:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009282:	2301      	movs	r3, #1
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f107 0210 	add.w	r2, r7, #16
 800928e:	4611      	mov	r1, r2
 8009290:	4618      	mov	r0, r3
 8009292:	f002 fde7 	bl	800be64 <SDMMC_ConfigData>

      return HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	e000      	b.n	800929c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800929a:	2302      	movs	r3, #2
  }
}
 800929c:	4618      	mov	r0, r3
 800929e:	3730      	adds	r7, #48	; 0x30
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	0800979d 	.word	0x0800979d
 80092a8:	08009839 	.word	0x08009839
 80092ac:	004005ff 	.word	0x004005ff

080092b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092d2:	0f9b      	lsrs	r3, r3, #30
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092de:	0e9b      	lsrs	r3, r3, #26
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	f003 030f 	and.w	r3, r3, #15
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f0:	0e1b      	lsrs	r3, r3, #24
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009302:	0c1b      	lsrs	r3, r3, #16
 8009304:	b2da      	uxtb	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800930e:	0a1b      	lsrs	r3, r3, #8
 8009310:	b2da      	uxtb	r2, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800931a:	b2da      	uxtb	r2, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009324:	0d1b      	lsrs	r3, r3, #20
 8009326:	b29a      	uxth	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009330:	0c1b      	lsrs	r3, r3, #16
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 030f 	and.w	r3, r3, #15
 8009338:	b2da      	uxtb	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009342:	0bdb      	lsrs	r3, r3, #15
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009354:	0b9b      	lsrs	r3, r3, #14
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009366:	0b5b      	lsrs	r3, r3, #13
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	b2da      	uxtb	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009378:	0b1b      	lsrs	r3, r3, #12
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	b2da      	uxtb	r2, r3
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2200      	movs	r2, #0
 800938a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009390:	2b00      	cmp	r3, #0
 8009392:	d163      	bne.n	800945c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009398:	009a      	lsls	r2, r3, #2
 800939a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800939e:	4013      	ands	r3, r2
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80093a4:	0f92      	lsrs	r2, r2, #30
 80093a6:	431a      	orrs	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b0:	0edb      	lsrs	r3, r3, #27
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c2:	0e1b      	lsrs	r3, r3, #24
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d4:	0d5b      	lsrs	r3, r3, #21
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093e6:	0c9b      	lsrs	r3, r3, #18
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0307 	and.w	r3, r3, #7
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f8:	0bdb      	lsrs	r3, r3, #15
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	f003 0307 	and.w	r3, r3, #7
 8009400:	b2da      	uxtb	r2, r3
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	7e1b      	ldrb	r3, [r3, #24]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	3302      	adds	r3, #2
 800941c:	2201      	movs	r2, #1
 800941e:	fa02 f303 	lsl.w	r3, r2, r3
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009426:	fb02 f203 	mul.w	r2, r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	7a1b      	ldrb	r3, [r3, #8]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 030f 	and.w	r3, r3, #15
 8009438:	2201      	movs	r2, #1
 800943a:	409a      	lsls	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009448:	0a52      	lsrs	r2, r2, #9
 800944a:	fb02 f203 	mul.w	r2, r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009458:	661a      	str	r2, [r3, #96]	; 0x60
 800945a:	e031      	b.n	80094c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009460:	2b01      	cmp	r3, #1
 8009462:	d11d      	bne.n	80094a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009468:	041b      	lsls	r3, r3, #16
 800946a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	431a      	orrs	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	3301      	adds	r3, #1
 8009480:	029a      	lsls	r2, r3, #10
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009494:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	661a      	str	r2, [r3, #96]	; 0x60
 800949e:	e00f      	b.n	80094c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a58      	ldr	r2, [pc, #352]	; (8009608 <HAL_SD_GetCardCSD+0x344>)
 80094a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e09d      	b.n	80095fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c4:	0b9b      	lsrs	r3, r3, #14
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d6:	09db      	lsrs	r3, r3, #7
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f8:	0fdb      	lsrs	r3, r3, #31
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009504:	0f5b      	lsrs	r3, r3, #29
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	b2da      	uxtb	r2, r3
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009516:	0e9b      	lsrs	r3, r3, #26
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	b2da      	uxtb	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009528:	0d9b      	lsrs	r3, r3, #22
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f003 030f 	and.w	r3, r3, #15
 8009530:	b2da      	uxtb	r2, r3
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	0d5b      	lsrs	r3, r3, #21
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	b2da      	uxtb	r2, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009556:	0c1b      	lsrs	r3, r3, #16
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956a:	0bdb      	lsrs	r3, r3, #15
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957e:	0b9b      	lsrs	r3, r3, #14
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009592:	0b5b      	lsrs	r3, r3, #13
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a6:	0b1b      	lsrs	r3, r3, #12
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ba:	0a9b      	lsrs	r3, r3, #10
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e2:	085b      	lsrs	r3, r3, #1
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	004005ff 	.word	0x004005ff

0800960c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009664:	b5b0      	push	{r4, r5, r7, lr}
 8009666:	b08e      	sub	sp, #56	; 0x38
 8009668:	af04      	add	r7, sp, #16
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2203      	movs	r2, #3
 8009672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967a:	2b03      	cmp	r3, #3
 800967c:	d02e      	beq.n	80096dc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009684:	d106      	bne.n	8009694 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	639a      	str	r2, [r3, #56]	; 0x38
 8009692:	e029      	b.n	80096e8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800969a:	d10a      	bne.n	80096b2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fa9f 	bl	8009be0 <SD_WideBus_Enable>
 80096a2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	431a      	orrs	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38
 80096b0:	e01a      	b.n	80096e8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fadc 	bl	8009c76 <SD_WideBus_Disable>
 80096be:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	639a      	str	r2, [r3, #56]	; 0x38
 80096cc:	e00c      	b.n	80096e8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	639a      	str	r2, [r3, #56]	; 0x38
 80096da:	e005      	b.n	80096e8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d009      	beq.n	8009704 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a18      	ldr	r2, [pc, #96]	; (8009758 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e024      	b.n	800974e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681d      	ldr	r5, [r3, #0]
 800972a:	466c      	mov	r4, sp
 800972c:	f107 0318 	add.w	r3, r7, #24
 8009730:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009738:	f107 030c 	add.w	r3, r7, #12
 800973c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800973e:	4628      	mov	r0, r5
 8009740:	f002 faf0 	bl	800bd24 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3728      	adds	r7, #40	; 0x28
 8009752:	46bd      	mov	sp, r7
 8009754:	bdb0      	pop	{r4, r5, r7, pc}
 8009756:	bf00      	nop
 8009758:	004005ff 	.word	0x004005ff

0800975c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009768:	f107 030c 	add.w	r3, r7, #12
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa0e 	bl	8009b90 <SD_SendStatus>
 8009774:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	431a      	orrs	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	0a5b      	lsrs	r3, r3, #9
 800978c:	f003 030f 	and.w	r3, r3, #15
 8009790:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009792:	693b      	ldr	r3, [r7, #16]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80097ba:	bf00      	nop
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d8:	2b82      	cmp	r3, #130	; 0x82
 80097da:	d111      	bne.n	8009800 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f002 fc15 	bl	800c010 <SDMMC_CmdStopTransfer>
 80097e6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d008      	beq.n	8009800 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	431a      	orrs	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff fd58 	bl	80092b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0208 	bic.w	r2, r2, #8
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f240 523a 	movw	r2, #1338	; 0x53a
 8009818:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f003 f85b 	bl	800c8e4 <HAL_SD_RxCpltCallback>
#endif
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7fb fb7e 	bl	8004f48 <HAL_DMA_GetError>
 800984c:	4603      	mov	r3, r0
 800984e:	2b02      	cmp	r3, #2
 8009850:	d03e      	beq.n	80098d0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009858:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009860:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d002      	beq.n	800986e <SD_DMAError+0x36>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d12d      	bne.n	80098ca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a19      	ldr	r2, [pc, #100]	; (80098d8 <SD_DMAError+0xa0>)
 8009874:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009884:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009892:	6978      	ldr	r0, [r7, #20]
 8009894:	f7ff ff62 	bl	800975c <HAL_SD_GetCardState>
 8009898:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b06      	cmp	r3, #6
 800989e:	d002      	beq.n	80098a6 <SD_DMAError+0x6e>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b05      	cmp	r3, #5
 80098a4:	d10a      	bne.n	80098bc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f002 fbb0 	bl	800c010 <SDMMC_CmdStopTransfer>
 80098b0:	4602      	mov	r2, r0
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	431a      	orrs	r2, r3
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2200      	movs	r2, #0
 80098c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80098ca:	6978      	ldr	r0, [r7, #20]
 80098cc:	f7ff fcf0 	bl	80092b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 80098d0:	bf00      	nop
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	004005ff 	.word	0x004005ff

080098dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098dc:	b5b0      	push	{r4, r5, r7, lr}
 80098de:	b094      	sub	sp, #80	; 0x50
 80098e0:	af04      	add	r7, sp, #16
 80098e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80098e4:	2301      	movs	r3, #1
 80098e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f002 fa61 	bl	800bdb4 <SDMMC_GetPowerState>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d102      	bne.n	80098fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80098fc:	e0b6      	b.n	8009a6c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009902:	2b03      	cmp	r3, #3
 8009904:	d02f      	beq.n	8009966 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4618      	mov	r0, r3
 800990c:	f002 fc8b 	bl	800c226 <SDMMC_CmdSendCID>
 8009910:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <SD_InitCard+0x40>
    {
      return errorstate;
 8009918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991a:	e0a7      	b.n	8009a6c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2100      	movs	r1, #0
 8009922:	4618      	mov	r0, r3
 8009924:	f002 fa8b 	bl	800be3e <SDMMC_GetResponse>
 8009928:	4602      	mov	r2, r0
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2104      	movs	r1, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f002 fa82 	bl	800be3e <SDMMC_GetResponse>
 800993a:	4602      	mov	r2, r0
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2108      	movs	r1, #8
 8009946:	4618      	mov	r0, r3
 8009948:	f002 fa79 	bl	800be3e <SDMMC_GetResponse>
 800994c:	4602      	mov	r2, r0
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	210c      	movs	r1, #12
 8009958:	4618      	mov	r0, r3
 800995a:	f002 fa70 	bl	800be3e <SDMMC_GetResponse>
 800995e:	4602      	mov	r2, r0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996a:	2b03      	cmp	r3, #3
 800996c:	d00d      	beq.n	800998a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f107 020e 	add.w	r2, r7, #14
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f002 fc91 	bl	800c2a0 <SDMMC_CmdSetRelAdd>
 800997e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <SD_InitCard+0xae>
    {
      return errorstate;
 8009986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009988:	e070      	b.n	8009a6c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998e:	2b03      	cmp	r3, #3
 8009990:	d036      	beq.n	8009a00 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009992:	89fb      	ldrh	r3, [r7, #14]
 8009994:	461a      	mov	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a2:	041b      	lsls	r3, r3, #16
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f002 fc5b 	bl	800c262 <SDMMC_CmdSendCSD>
 80099ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d001      	beq.n	80099b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80099b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b6:	e059      	b.n	8009a6c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f002 fa3d 	bl	800be3e <SDMMC_GetResponse>
 80099c4:	4602      	mov	r2, r0
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2104      	movs	r1, #4
 80099d0:	4618      	mov	r0, r3
 80099d2:	f002 fa34 	bl	800be3e <SDMMC_GetResponse>
 80099d6:	4602      	mov	r2, r0
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2108      	movs	r1, #8
 80099e2:	4618      	mov	r0, r3
 80099e4:	f002 fa2b 	bl	800be3e <SDMMC_GetResponse>
 80099e8:	4602      	mov	r2, r0
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	210c      	movs	r1, #12
 80099f4:	4618      	mov	r0, r3
 80099f6:	f002 fa22 	bl	800be3e <SDMMC_GetResponse>
 80099fa:	4602      	mov	r2, r0
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2104      	movs	r1, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f002 fa19 	bl	800be3e <SDMMC_GetResponse>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	0d1a      	lsrs	r2, r3, #20
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a14:	f107 0310 	add.w	r3, r7, #16
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff fc52 	bl	80092c4 <HAL_SD_GetCardCSD>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a2a:	e01f      	b.n	8009a6c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a34:	041b      	lsls	r3, r3, #16
 8009a36:	461a      	mov	r2, r3
 8009a38:	f04f 0300 	mov.w	r3, #0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	f002 fb09 	bl	800c054 <SDMMC_CmdSelDesel>
 8009a42:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <SD_InitCard+0x172>
  {
    return errorstate;
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4c:	e00e      	b.n	8009a6c <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681d      	ldr	r5, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	466c      	mov	r4, sp
 8009a56:	f103 0210 	add.w	r2, r3, #16
 8009a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a60:	3304      	adds	r3, #4
 8009a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a64:	4628      	mov	r0, r5
 8009a66:	f002 f95d 	bl	800bd24 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3740      	adds	r7, #64	; 0x40
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bdb0      	pop	{r4, r5, r7, pc}

08009a74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f002 fb04 	bl	800c09a <SDMMC_CmdGoIdleState>
 8009a92:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	e072      	b.n	8009b84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f002 fb17 	bl	800c0d6 <SDMMC_CmdOperCond>
 8009aa8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00d      	beq.n	8009acc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f002 faed 	bl	800c09a <SDMMC_CmdGoIdleState>
 8009ac0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	e05b      	b.n	8009b84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d137      	bne.n	8009b4a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f002 fb17 	bl	800c114 <SDMMC_CmdAppCommand>
 8009ae6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d02d      	beq.n	8009b4a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009aee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009af2:	e047      	b.n	8009b84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2100      	movs	r1, #0
 8009afa:	4618      	mov	r0, r3
 8009afc:	f002 fb0a 	bl	800c114 <SDMMC_CmdAppCommand>
 8009b00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <SD_PowerON+0x98>
    {
      return errorstate;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	e03b      	b.n	8009b84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	491e      	ldr	r1, [pc, #120]	; (8009b8c <SD_PowerON+0x118>)
 8009b12:	4618      	mov	r0, r3
 8009b14:	f002 fb20 	bl	800c158 <SDMMC_CmdAppOperCommand>
 8009b18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b24:	e02e      	b.n	8009b84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f002 f986 	bl	800be3e <SDMMC_GetResponse>
 8009b32:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	0fdb      	lsrs	r3, r3, #31
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d101      	bne.n	8009b40 <SD_PowerON+0xcc>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <SD_PowerON+0xce>
 8009b40:	2300      	movs	r3, #0
 8009b42:	613b      	str	r3, [r7, #16]

    count++;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	3301      	adds	r3, #1
 8009b48:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d802      	bhi.n	8009b5a <SD_PowerON+0xe6>
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0cc      	beq.n	8009af4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d902      	bls.n	8009b6a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b68:	e00c      	b.n	8009b84 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	645a      	str	r2, [r3, #68]	; 0x44
 8009b7a:	e002      	b.n	8009b82 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3718      	adds	r7, #24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	c1100000 	.word	0xc1100000

08009b90 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ba0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ba4:	e018      	b.n	8009bd8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bae:	041b      	lsls	r3, r3, #16
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f002 fb95 	bl	800c2e2 <SDMMC_CmdSendStatus>
 8009bb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	e009      	b.n	8009bd8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f002 f937 	bl	800be3e <SDMMC_GetResponse>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f002 f921 	bl	800be3e <SDMMC_GetResponse>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c06:	d102      	bne.n	8009c0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c0c:	e02f      	b.n	8009c6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c0e:	f107 030c 	add.w	r3, r7, #12
 8009c12:	4619      	mov	r1, r3
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f879 	bl	8009d0c <SD_FindSCR>
 8009c1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	e023      	b.n	8009c6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d01c      	beq.n	8009c6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	f002 fa69 	bl	800c114 <SDMMC_CmdAppCommand>
 8009c42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	e00f      	b.n	8009c6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2102      	movs	r1, #2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f002 faa3 	bl	800c1a0 <SDMMC_CmdBusWidth>
 8009c5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	e003      	b.n	8009c6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	e001      	b.n	8009c6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	2300      	movs	r3, #0
 8009c84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f002 f8d6 	bl	800be3e <SDMMC_GetResponse>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c9c:	d102      	bne.n	8009ca4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ca2:	e02f      	b.n	8009d04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ca4:	f107 030c 	add.w	r3, r7, #12
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f82e 	bl	8009d0c <SD_FindSCR>
 8009cb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	e023      	b.n	8009d04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d01c      	beq.n	8009d00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cce:	041b      	lsls	r3, r3, #16
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f002 fa1e 	bl	800c114 <SDMMC_CmdAppCommand>
 8009cd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	e00f      	b.n	8009d04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f002 fa58 	bl	800c1a0 <SDMMC_CmdBusWidth>
 8009cf0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	e003      	b.n	8009d04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e001      	b.n	8009d04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b08f      	sub	sp, #60	; 0x3c
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d16:	f7f9 fddf 	bl	80038d8 <HAL_GetTick>
 8009d1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009d20:	2300      	movs	r3, #0
 8009d22:	60bb      	str	r3, [r7, #8]
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2108      	movs	r1, #8
 8009d32:	4618      	mov	r0, r3
 8009d34:	f002 f8c2 	bl	800bebc <SDMMC_CmdBlockLength>
 8009d38:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	e0a9      	b.n	8009e98 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4c:	041b      	lsls	r3, r3, #16
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f002 f9df 	bl	800c114 <SDMMC_CmdAppCommand>
 8009d56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	e09a      	b.n	8009e98 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d62:	f04f 33ff 	mov.w	r3, #4294967295
 8009d66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009d68:	2308      	movs	r3, #8
 8009d6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009d6c:	2330      	movs	r3, #48	; 0x30
 8009d6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d70:	2302      	movs	r3, #2
 8009d72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f107 0210 	add.w	r2, r7, #16
 8009d84:	4611      	mov	r1, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f002 f86c 	bl	800be64 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f002 fa27 	bl	800c1e4 <SDMMC_CmdSendSCR>
 8009d96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d022      	beq.n	8009de4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	e07a      	b.n	8009e98 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00e      	beq.n	8009dce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	f107 0208 	add.w	r2, r7, #8
 8009dbc:	18d4      	adds	r4, r2, r3
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	f001 ffdc 	bl	800bd7c <SDMMC_ReadFIFO>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	6023      	str	r3, [r4, #0]
      index++;
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dca:	3301      	adds	r3, #1
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dce:	f7f9 fd83 	bl	80038d8 <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ddc:	d102      	bne.n	8009de4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009de2:	e059      	b.n	8009e98 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dea:	f240 432a 	movw	r3, #1066	; 0x42a
 8009dee:	4013      	ands	r3, r2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d0d6      	beq.n	8009da2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfa:	f003 0308 	and.w	r3, r3, #8
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2208      	movs	r2, #8
 8009e08:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e0a:	2308      	movs	r3, #8
 8009e0c:	e044      	b.n	8009e98 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2202      	movs	r2, #2
 8009e22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e24:	2302      	movs	r3, #2
 8009e26:	e037      	b.n	8009e98 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d005      	beq.n	8009e42 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009e3e:	2320      	movs	r3, #32
 8009e40:	e02a      	b.n	8009e98 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	061a      	lsls	r2, r3, #24
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	021b      	lsls	r3, r3, #8
 8009e54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e58:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	0a1b      	lsrs	r3, r3, #8
 8009e5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e62:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	0e1b      	lsrs	r3, r3, #24
 8009e68:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	601a      	str	r2, [r3, #0]
    scr++;
 8009e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e70:	3304      	adds	r3, #4
 8009e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	061a      	lsls	r2, r3, #24
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	021b      	lsls	r3, r3, #8
 8009e7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e80:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e8a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	0e1b      	lsrs	r3, r3, #24
 8009e90:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e94:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	373c      	adds	r7, #60	; 0x3c
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd90      	pop	{r4, r7, pc}

08009ea0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e025      	b.n	8009f00 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7f9 fadb 	bl	8003484 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3304      	adds	r3, #4
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f001 fdf9 	bl	800bad8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	f001 fe63 	bl	800bbbc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d101      	bne.n	8009f24 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009f20:	2302      	movs	r3, #2
 8009f22:	e018      	b.n	8009f56 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f001 fec1 	bl	800bcbc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d104      	bne.n	8009f4c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2205      	movs	r2, #5
 8009f46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009f4a:	e003      	b.n	8009f54 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d101      	bne.n	8009f78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009f74:	2302      	movs	r3, #2
 8009f76:	e00e      	b.n	8009f96 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 feb9 	bl	800bcfe <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e04c      	b.n	800a04c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7f8 ff38 	bl	8002e3c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0203 	bic.w	r2, r2, #3
 8009fe2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4b19      	ldr	r3, [pc, #100]	; (800a054 <HAL_SPDIFRX_Init+0xb4>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009ffc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a002:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a008:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a00e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a014:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a01a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a020:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a026:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a02c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	fff88407 	.word	0xfff88407

0800a058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e084      	b.n	800a174 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d106      	bne.n	800a08a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7f8 ff1b 	bl	8002ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2202      	movs	r2, #2
 800a08e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0aa:	d902      	bls.n	800a0b2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	e002      	b.n	800a0b8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a0b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a0c0:	d007      	beq.n	800a0d2 <HAL_SPI_Init+0x7a>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0ca:	d002      	beq.n	800a0d2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10b      	bne.n	800a0f2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0e2:	d903      	bls.n	800a0ec <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30
 800a0ea:	e002      	b.n	800a0f2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	431a      	orrs	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a110:	431a      	orrs	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	431a      	orrs	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	ea42 0103 	orr.w	r1, r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	0c1b      	lsrs	r3, r3, #16
 800a132:	f003 0204 	and.w	r2, r3, #4
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	431a      	orrs	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a140:	431a      	orrs	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	ea42 0103 	orr.w	r1, r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	430a      	orrs	r2, r1
 800a152:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69da      	ldr	r2, [r3, #28]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a162:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e01d      	b.n	800a1ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7f8 feee 	bl	8002f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f000 fb84 	bl	800a8c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68da      	ldr	r2, [r3, #12]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0201 	orr.w	r2, r2, #1
 800a1ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	4b0c      	ldr	r3, [pc, #48]	; (800a224 <HAL_TIM_Base_Start_IT+0x50>)
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b06      	cmp	r3, #6
 800a1fc:	d00b      	beq.n	800a216 <HAL_TIM_Base_Start_IT+0x42>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a204:	d007      	beq.n	800a216 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f042 0201 	orr.w	r2, r2, #1
 800a214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	00010007 	.word	0x00010007

0800a228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e01d      	b.n	800a276 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d106      	bne.n	800a254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7f8 ff06 	bl	8003060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2202      	movs	r2, #2
 800a258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3304      	adds	r3, #4
 800a264:	4619      	mov	r1, r3
 800a266:	4610      	mov	r0, r2
 800a268:	f000 fb2e 	bl	800a8c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b02      	cmp	r3, #2
 800a292:	d122      	bne.n	800a2da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d11b      	bne.n	800a2da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f06f 0202 	mvn.w	r2, #2
 800a2aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fae3 	bl	800a88c <HAL_TIM_IC_CaptureCallback>
 800a2c6:	e005      	b.n	800a2d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fad5 	bl	800a878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fae6 	bl	800a8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	f003 0304 	and.w	r3, r3, #4
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d122      	bne.n	800a32e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d11b      	bne.n	800a32e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f06f 0204 	mvn.w	r2, #4
 800a2fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2202      	movs	r2, #2
 800a304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fab9 	bl	800a88c <HAL_TIM_IC_CaptureCallback>
 800a31a:	e005      	b.n	800a328 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 faab 	bl	800a878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fabc 	bl	800a8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	f003 0308 	and.w	r3, r3, #8
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d122      	bne.n	800a382 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	f003 0308 	and.w	r3, r3, #8
 800a346:	2b08      	cmp	r3, #8
 800a348:	d11b      	bne.n	800a382 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f06f 0208 	mvn.w	r2, #8
 800a352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2204      	movs	r2, #4
 800a358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	f003 0303 	and.w	r3, r3, #3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fa8f 	bl	800a88c <HAL_TIM_IC_CaptureCallback>
 800a36e:	e005      	b.n	800a37c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fa81 	bl	800a878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fa92 	bl	800a8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	f003 0310 	and.w	r3, r3, #16
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	d122      	bne.n	800a3d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	d11b      	bne.n	800a3d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f06f 0210 	mvn.w	r2, #16
 800a3a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2208      	movs	r2, #8
 800a3ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fa65 	bl	800a88c <HAL_TIM_IC_CaptureCallback>
 800a3c2:	e005      	b.n	800a3d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fa57 	bl	800a878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa68 	bl	800a8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d10e      	bne.n	800a402 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d107      	bne.n	800a402 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f06f 0201 	mvn.w	r2, #1
 800a3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7f8 f943 	bl	8002688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a40c:	2b80      	cmp	r3, #128	; 0x80
 800a40e:	d10e      	bne.n	800a42e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41a:	2b80      	cmp	r3, #128	; 0x80
 800a41c:	d107      	bne.n	800a42e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fefb 	bl	800b224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a43c:	d10e      	bne.n	800a45c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a448:	2b80      	cmp	r3, #128	; 0x80
 800a44a:	d107      	bne.n	800a45c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 feee 	bl	800b238 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a466:	2b40      	cmp	r3, #64	; 0x40
 800a468:	d10e      	bne.n	800a488 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a474:	2b40      	cmp	r3, #64	; 0x40
 800a476:	d107      	bne.n	800a488 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fa16 	bl	800a8b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	f003 0320 	and.w	r3, r3, #32
 800a492:	2b20      	cmp	r3, #32
 800a494:	d10e      	bne.n	800a4b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f003 0320 	and.w	r3, r3, #32
 800a4a0:	2b20      	cmp	r3, #32
 800a4a2:	d107      	bne.n	800a4b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f06f 0220 	mvn.w	r2, #32
 800a4ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 feae 	bl	800b210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d101      	bne.n	800a4d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	e105      	b.n	800a6e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b14      	cmp	r3, #20
 800a4ea:	f200 80f0 	bhi.w	800a6ce <HAL_TIM_PWM_ConfigChannel+0x212>
 800a4ee:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a549 	.word	0x0800a549
 800a4f8:	0800a6cf 	.word	0x0800a6cf
 800a4fc:	0800a6cf 	.word	0x0800a6cf
 800a500:	0800a6cf 	.word	0x0800a6cf
 800a504:	0800a589 	.word	0x0800a589
 800a508:	0800a6cf 	.word	0x0800a6cf
 800a50c:	0800a6cf 	.word	0x0800a6cf
 800a510:	0800a6cf 	.word	0x0800a6cf
 800a514:	0800a5cb 	.word	0x0800a5cb
 800a518:	0800a6cf 	.word	0x0800a6cf
 800a51c:	0800a6cf 	.word	0x0800a6cf
 800a520:	0800a6cf 	.word	0x0800a6cf
 800a524:	0800a60b 	.word	0x0800a60b
 800a528:	0800a6cf 	.word	0x0800a6cf
 800a52c:	0800a6cf 	.word	0x0800a6cf
 800a530:	0800a6cf 	.word	0x0800a6cf
 800a534:	0800a64d 	.word	0x0800a64d
 800a538:	0800a6cf 	.word	0x0800a6cf
 800a53c:	0800a6cf 	.word	0x0800a6cf
 800a540:	0800a6cf 	.word	0x0800a6cf
 800a544:	0800a68d 	.word	0x0800a68d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68b9      	ldr	r1, [r7, #8]
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 fa5a 	bl	800aa08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	699a      	ldr	r2, [r3, #24]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0208 	orr.w	r2, r2, #8
 800a562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699a      	ldr	r2, [r3, #24]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 0204 	bic.w	r2, r2, #4
 800a572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6999      	ldr	r1, [r3, #24]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	691a      	ldr	r2, [r3, #16]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	619a      	str	r2, [r3, #24]
      break;
 800a586:	e0a3      	b.n	800a6d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 faac 	bl	800aaec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	699a      	ldr	r2, [r3, #24]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	699a      	ldr	r2, [r3, #24]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6999      	ldr	r1, [r3, #24]
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	021a      	lsls	r2, r3, #8
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	619a      	str	r2, [r3, #24]
      break;
 800a5c8:	e082      	b.n	800a6d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 fb03 	bl	800abdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	69da      	ldr	r2, [r3, #28]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f042 0208 	orr.w	r2, r2, #8
 800a5e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69da      	ldr	r2, [r3, #28]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0204 	bic.w	r2, r2, #4
 800a5f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69d9      	ldr	r1, [r3, #28]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	691a      	ldr	r2, [r3, #16]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	61da      	str	r2, [r3, #28]
      break;
 800a608:	e062      	b.n	800a6d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68b9      	ldr	r1, [r7, #8]
 800a610:	4618      	mov	r0, r3
 800a612:	f000 fb59 	bl	800acc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69da      	ldr	r2, [r3, #28]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69da      	ldr	r2, [r3, #28]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	69d9      	ldr	r1, [r3, #28]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	021a      	lsls	r2, r3, #8
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	61da      	str	r2, [r3, #28]
      break;
 800a64a:	e041      	b.n	800a6d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fb90 	bl	800ad78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0208 	orr.w	r2, r2, #8
 800a666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0204 	bic.w	r2, r2, #4
 800a676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691a      	ldr	r2, [r3, #16]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a68a:	e021      	b.n	800a6d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68b9      	ldr	r1, [r7, #8]
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fbc2 	bl	800ae1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	021a      	lsls	r2, r3, #8
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6cc:	e000      	b.n	800a6d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a6ce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop

0800a6ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_TIM_ConfigClockSource+0x18>
 800a700:	2302      	movs	r3, #2
 800a702:	e0b3      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x180>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2202      	movs	r2, #2
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	4b55      	ldr	r3, [pc, #340]	; (800a874 <HAL_TIM_ConfigClockSource+0x188>)
 800a720:	4013      	ands	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a72a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a73c:	d03e      	beq.n	800a7bc <HAL_TIM_ConfigClockSource+0xd0>
 800a73e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a742:	f200 8087 	bhi.w	800a854 <HAL_TIM_ConfigClockSource+0x168>
 800a746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a74a:	f000 8085 	beq.w	800a858 <HAL_TIM_ConfigClockSource+0x16c>
 800a74e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a752:	d87f      	bhi.n	800a854 <HAL_TIM_ConfigClockSource+0x168>
 800a754:	2b70      	cmp	r3, #112	; 0x70
 800a756:	d01a      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0xa2>
 800a758:	2b70      	cmp	r3, #112	; 0x70
 800a75a:	d87b      	bhi.n	800a854 <HAL_TIM_ConfigClockSource+0x168>
 800a75c:	2b60      	cmp	r3, #96	; 0x60
 800a75e:	d050      	beq.n	800a802 <HAL_TIM_ConfigClockSource+0x116>
 800a760:	2b60      	cmp	r3, #96	; 0x60
 800a762:	d877      	bhi.n	800a854 <HAL_TIM_ConfigClockSource+0x168>
 800a764:	2b50      	cmp	r3, #80	; 0x50
 800a766:	d03c      	beq.n	800a7e2 <HAL_TIM_ConfigClockSource+0xf6>
 800a768:	2b50      	cmp	r3, #80	; 0x50
 800a76a:	d873      	bhi.n	800a854 <HAL_TIM_ConfigClockSource+0x168>
 800a76c:	2b40      	cmp	r3, #64	; 0x40
 800a76e:	d058      	beq.n	800a822 <HAL_TIM_ConfigClockSource+0x136>
 800a770:	2b40      	cmp	r3, #64	; 0x40
 800a772:	d86f      	bhi.n	800a854 <HAL_TIM_ConfigClockSource+0x168>
 800a774:	2b30      	cmp	r3, #48	; 0x30
 800a776:	d064      	beq.n	800a842 <HAL_TIM_ConfigClockSource+0x156>
 800a778:	2b30      	cmp	r3, #48	; 0x30
 800a77a:	d86b      	bhi.n	800a854 <HAL_TIM_ConfigClockSource+0x168>
 800a77c:	2b20      	cmp	r3, #32
 800a77e:	d060      	beq.n	800a842 <HAL_TIM_ConfigClockSource+0x156>
 800a780:	2b20      	cmp	r3, #32
 800a782:	d867      	bhi.n	800a854 <HAL_TIM_ConfigClockSource+0x168>
 800a784:	2b00      	cmp	r3, #0
 800a786:	d05c      	beq.n	800a842 <HAL_TIM_ConfigClockSource+0x156>
 800a788:	2b10      	cmp	r3, #16
 800a78a:	d05a      	beq.n	800a842 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a78c:	e062      	b.n	800a854 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6899      	ldr	r1, [r3, #8]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f000 fc0b 	bl	800afb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	609a      	str	r2, [r3, #8]
      break;
 800a7ba:	e04e      	b.n	800a85a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	6899      	ldr	r1, [r3, #8]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f000 fbf4 	bl	800afb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7de:	609a      	str	r2, [r3, #8]
      break;
 800a7e0:	e03b      	b.n	800a85a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6818      	ldr	r0, [r3, #0]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	6859      	ldr	r1, [r3, #4]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f000 fb68 	bl	800aec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2150      	movs	r1, #80	; 0x50
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fbc1 	bl	800af82 <TIM_ITRx_SetConfig>
      break;
 800a800:	e02b      	b.n	800a85a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6818      	ldr	r0, [r3, #0]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	6859      	ldr	r1, [r3, #4]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	461a      	mov	r2, r3
 800a810:	f000 fb87 	bl	800af22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2160      	movs	r1, #96	; 0x60
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 fbb1 	bl	800af82 <TIM_ITRx_SetConfig>
      break;
 800a820:	e01b      	b.n	800a85a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6818      	ldr	r0, [r3, #0]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	6859      	ldr	r1, [r3, #4]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	461a      	mov	r2, r3
 800a830:	f000 fb48 	bl	800aec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2140      	movs	r1, #64	; 0x40
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fba1 	bl	800af82 <TIM_ITRx_SetConfig>
      break;
 800a840:	e00b      	b.n	800a85a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4619      	mov	r1, r3
 800a84c:	4610      	mov	r0, r2
 800a84e:	f000 fb98 	bl	800af82 <TIM_ITRx_SetConfig>
      break;
 800a852:	e002      	b.n	800a85a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a854:	bf00      	nop
 800a856:	e000      	b.n	800a85a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a858:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	fffeff88 	.word	0xfffeff88

0800a878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a40      	ldr	r2, [pc, #256]	; (800a9dc <TIM_Base_SetConfig+0x114>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d013      	beq.n	800a908 <TIM_Base_SetConfig+0x40>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e6:	d00f      	beq.n	800a908 <TIM_Base_SetConfig+0x40>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a3d      	ldr	r2, [pc, #244]	; (800a9e0 <TIM_Base_SetConfig+0x118>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d00b      	beq.n	800a908 <TIM_Base_SetConfig+0x40>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a3c      	ldr	r2, [pc, #240]	; (800a9e4 <TIM_Base_SetConfig+0x11c>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d007      	beq.n	800a908 <TIM_Base_SetConfig+0x40>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a3b      	ldr	r2, [pc, #236]	; (800a9e8 <TIM_Base_SetConfig+0x120>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d003      	beq.n	800a908 <TIM_Base_SetConfig+0x40>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a3a      	ldr	r2, [pc, #232]	; (800a9ec <TIM_Base_SetConfig+0x124>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d108      	bne.n	800a91a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a90e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4313      	orrs	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a2f      	ldr	r2, [pc, #188]	; (800a9dc <TIM_Base_SetConfig+0x114>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d02b      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a928:	d027      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a2c      	ldr	r2, [pc, #176]	; (800a9e0 <TIM_Base_SetConfig+0x118>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d023      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a2b      	ldr	r2, [pc, #172]	; (800a9e4 <TIM_Base_SetConfig+0x11c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d01f      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a2a      	ldr	r2, [pc, #168]	; (800a9e8 <TIM_Base_SetConfig+0x120>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d01b      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a29      	ldr	r2, [pc, #164]	; (800a9ec <TIM_Base_SetConfig+0x124>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d017      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a28      	ldr	r2, [pc, #160]	; (800a9f0 <TIM_Base_SetConfig+0x128>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d013      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a27      	ldr	r2, [pc, #156]	; (800a9f4 <TIM_Base_SetConfig+0x12c>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d00f      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a26      	ldr	r2, [pc, #152]	; (800a9f8 <TIM_Base_SetConfig+0x130>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d00b      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a25      	ldr	r2, [pc, #148]	; (800a9fc <TIM_Base_SetConfig+0x134>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d007      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a24      	ldr	r2, [pc, #144]	; (800aa00 <TIM_Base_SetConfig+0x138>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d003      	beq.n	800a97a <TIM_Base_SetConfig+0xb2>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a23      	ldr	r2, [pc, #140]	; (800aa04 <TIM_Base_SetConfig+0x13c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d108      	bne.n	800a98c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	4313      	orrs	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	4313      	orrs	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <TIM_Base_SetConfig+0x114>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d003      	beq.n	800a9c0 <TIM_Base_SetConfig+0xf8>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a0c      	ldr	r2, [pc, #48]	; (800a9ec <TIM_Base_SetConfig+0x124>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d103      	bne.n	800a9c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	691a      	ldr	r2, [r3, #16]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	615a      	str	r2, [r3, #20]
}
 800a9ce:	bf00      	nop
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	40010000 	.word	0x40010000
 800a9e0:	40000400 	.word	0x40000400
 800a9e4:	40000800 	.word	0x40000800
 800a9e8:	40000c00 	.word	0x40000c00
 800a9ec:	40010400 	.word	0x40010400
 800a9f0:	40014000 	.word	0x40014000
 800a9f4:	40014400 	.word	0x40014400
 800a9f8:	40014800 	.word	0x40014800
 800a9fc:	40001800 	.word	0x40001800
 800aa00:	40001c00 	.word	0x40001c00
 800aa04:	40002000 	.word	0x40002000

0800aa08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	f023 0201 	bic.w	r2, r3, #1
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4b2b      	ldr	r3, [pc, #172]	; (800aae0 <TIM_OC1_SetConfig+0xd8>)
 800aa34:	4013      	ands	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 0303 	bic.w	r3, r3, #3
 800aa3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f023 0302 	bic.w	r3, r3, #2
 800aa50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a21      	ldr	r2, [pc, #132]	; (800aae4 <TIM_OC1_SetConfig+0xdc>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d003      	beq.n	800aa6c <TIM_OC1_SetConfig+0x64>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a20      	ldr	r2, [pc, #128]	; (800aae8 <TIM_OC1_SetConfig+0xe0>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d10c      	bne.n	800aa86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f023 0308 	bic.w	r3, r3, #8
 800aa72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f023 0304 	bic.w	r3, r3, #4
 800aa84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a16      	ldr	r2, [pc, #88]	; (800aae4 <TIM_OC1_SetConfig+0xdc>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d003      	beq.n	800aa96 <TIM_OC1_SetConfig+0x8e>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <TIM_OC1_SetConfig+0xe0>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d111      	bne.n	800aaba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aaa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	621a      	str	r2, [r3, #32]
}
 800aad4:	bf00      	nop
 800aad6:	371c      	adds	r7, #28
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	fffeff8f 	.word	0xfffeff8f
 800aae4:	40010000 	.word	0x40010000
 800aae8:	40010400 	.word	0x40010400

0800aaec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	f023 0210 	bic.w	r2, r3, #16
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4b2e      	ldr	r3, [pc, #184]	; (800abd0 <TIM_OC2_SetConfig+0xe4>)
 800ab18:	4013      	ands	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f023 0320 	bic.w	r3, r3, #32
 800ab36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	011b      	lsls	r3, r3, #4
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a23      	ldr	r2, [pc, #140]	; (800abd4 <TIM_OC2_SetConfig+0xe8>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d003      	beq.n	800ab54 <TIM_OC2_SetConfig+0x68>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a22      	ldr	r2, [pc, #136]	; (800abd8 <TIM_OC2_SetConfig+0xec>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d10d      	bne.n	800ab70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	011b      	lsls	r3, r3, #4
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a18      	ldr	r2, [pc, #96]	; (800abd4 <TIM_OC2_SetConfig+0xe8>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d003      	beq.n	800ab80 <TIM_OC2_SetConfig+0x94>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a17      	ldr	r2, [pc, #92]	; (800abd8 <TIM_OC2_SetConfig+0xec>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d113      	bne.n	800aba8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	621a      	str	r2, [r3, #32]
}
 800abc2:	bf00      	nop
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	feff8fff 	.word	0xfeff8fff
 800abd4:	40010000 	.word	0x40010000
 800abd8:	40010400 	.word	0x40010400

0800abdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4b2d      	ldr	r3, [pc, #180]	; (800acbc <TIM_OC3_SetConfig+0xe0>)
 800ac08:	4013      	ands	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0303 	bic.w	r3, r3, #3
 800ac12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a22      	ldr	r2, [pc, #136]	; (800acc0 <TIM_OC3_SetConfig+0xe4>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d003      	beq.n	800ac42 <TIM_OC3_SetConfig+0x66>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a21      	ldr	r2, [pc, #132]	; (800acc4 <TIM_OC3_SetConfig+0xe8>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d10d      	bne.n	800ac5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	021b      	lsls	r3, r3, #8
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a17      	ldr	r2, [pc, #92]	; (800acc0 <TIM_OC3_SetConfig+0xe4>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d003      	beq.n	800ac6e <TIM_OC3_SetConfig+0x92>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a16      	ldr	r2, [pc, #88]	; (800acc4 <TIM_OC3_SetConfig+0xe8>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d113      	bne.n	800ac96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	621a      	str	r2, [r3, #32]
}
 800acb0:	bf00      	nop
 800acb2:	371c      	adds	r7, #28
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	fffeff8f 	.word	0xfffeff8f
 800acc0:	40010000 	.word	0x40010000
 800acc4:	40010400 	.word	0x40010400

0800acc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	4b1e      	ldr	r3, [pc, #120]	; (800ad6c <TIM_OC4_SetConfig+0xa4>)
 800acf4:	4013      	ands	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	021b      	lsls	r3, r3, #8
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	031b      	lsls	r3, r3, #12
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a13      	ldr	r2, [pc, #76]	; (800ad70 <TIM_OC4_SetConfig+0xa8>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d003      	beq.n	800ad30 <TIM_OC4_SetConfig+0x68>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a12      	ldr	r2, [pc, #72]	; (800ad74 <TIM_OC4_SetConfig+0xac>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d109      	bne.n	800ad44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	019b      	lsls	r3, r3, #6
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	621a      	str	r2, [r3, #32]
}
 800ad5e:	bf00      	nop
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	feff8fff 	.word	0xfeff8fff
 800ad70:	40010000 	.word	0x40010000
 800ad74:	40010400 	.word	0x40010400

0800ad78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a1b      	ldr	r3, [r3, #32]
 800ad86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	4b1b      	ldr	r3, [pc, #108]	; (800ae10 <TIM_OC5_SetConfig+0x98>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	4313      	orrs	r3, r2
 800adb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800adb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	041b      	lsls	r3, r3, #16
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a12      	ldr	r2, [pc, #72]	; (800ae14 <TIM_OC5_SetConfig+0x9c>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d003      	beq.n	800add6 <TIM_OC5_SetConfig+0x5e>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a11      	ldr	r2, [pc, #68]	; (800ae18 <TIM_OC5_SetConfig+0xa0>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d109      	bne.n	800adea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800addc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	021b      	lsls	r3, r3, #8
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	621a      	str	r2, [r3, #32]
}
 800ae04:	bf00      	nop
 800ae06:	371c      	adds	r7, #28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	fffeff8f 	.word	0xfffeff8f
 800ae14:	40010000 	.word	0x40010000
 800ae18:	40010400 	.word	0x40010400

0800ae1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4b1c      	ldr	r3, [pc, #112]	; (800aeb8 <TIM_OC6_SetConfig+0x9c>)
 800ae48:	4013      	ands	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	021b      	lsls	r3, r3, #8
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	051b      	lsls	r3, r3, #20
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a13      	ldr	r2, [pc, #76]	; (800aebc <TIM_OC6_SetConfig+0xa0>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d003      	beq.n	800ae7c <TIM_OC6_SetConfig+0x60>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a12      	ldr	r2, [pc, #72]	; (800aec0 <TIM_OC6_SetConfig+0xa4>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d109      	bne.n	800ae90 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	029b      	lsls	r3, r3, #10
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	621a      	str	r2, [r3, #32]
}
 800aeaa:	bf00      	nop
 800aeac:	371c      	adds	r7, #28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	feff8fff 	.word	0xfeff8fff
 800aebc:	40010000 	.word	0x40010000
 800aec0:	40010400 	.word	0x40010400

0800aec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	f023 0201 	bic.w	r2, r3, #1
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aeee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	011b      	lsls	r3, r3, #4
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f023 030a 	bic.w	r3, r3, #10
 800af00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	4313      	orrs	r3, r2
 800af08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	621a      	str	r2, [r3, #32]
}
 800af16:	bf00      	nop
 800af18:	371c      	adds	r7, #28
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af22:	b480      	push	{r7}
 800af24:	b087      	sub	sp, #28
 800af26:	af00      	add	r7, sp, #0
 800af28:	60f8      	str	r0, [r7, #12]
 800af2a:	60b9      	str	r1, [r7, #8]
 800af2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	f023 0210 	bic.w	r2, r3, #16
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	031b      	lsls	r3, r3, #12
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	4313      	orrs	r3, r2
 800af56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	621a      	str	r2, [r3, #32]
}
 800af76:	bf00      	nop
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af82:	b480      	push	{r7}
 800af84:	b085      	sub	sp, #20
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	f043 0307 	orr.w	r3, r3, #7
 800afa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	609a      	str	r2, [r3, #8]
}
 800afac:	bf00      	nop
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afb8:	b480      	push	{r7}
 800afba:	b087      	sub	sp, #28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
 800afc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	021a      	lsls	r2, r3, #8
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	431a      	orrs	r2, r3
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	4313      	orrs	r3, r2
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	609a      	str	r2, [r3, #8]
}
 800afec:	bf00      	nop
 800afee:	371c      	adds	r7, #28
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d101      	bne.n	800b010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b00c:	2302      	movs	r3, #2
 800b00e:	e06d      	b.n	800b0ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a30      	ldr	r2, [pc, #192]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d004      	beq.n	800b044 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a2f      	ldr	r2, [pc, #188]	; (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d108      	bne.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b04a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4313      	orrs	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a20      	ldr	r2, [pc, #128]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d022      	beq.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b082:	d01d      	beq.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a1d      	ldr	r2, [pc, #116]	; (800b100 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d018      	beq.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a1c      	ldr	r2, [pc, #112]	; (800b104 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d013      	beq.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a1a      	ldr	r2, [pc, #104]	; (800b108 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d00e      	beq.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a15      	ldr	r2, [pc, #84]	; (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d009      	beq.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a16      	ldr	r2, [pc, #88]	; (800b10c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d004      	beq.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a15      	ldr	r2, [pc, #84]	; (800b110 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d10c      	bne.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr
 800b0f8:	40010000 	.word	0x40010000
 800b0fc:	40010400 	.word	0x40010400
 800b100:	40000400 	.word	0x40000400
 800b104:	40000800 	.word	0x40000800
 800b108:	40000c00 	.word	0x40000c00
 800b10c:	40014000 	.word	0x40014000
 800b110:	40001800 	.word	0x40001800

0800b114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d101      	bne.n	800b130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b12c:	2302      	movs	r3, #2
 800b12e:	e065      	b.n	800b1fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	4313      	orrs	r3, r2
 800b160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	4313      	orrs	r3, r2
 800b18a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b196:	4313      	orrs	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	041b      	lsls	r3, r3, #16
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a16      	ldr	r2, [pc, #88]	; (800b208 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d004      	beq.n	800b1be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a14      	ldr	r2, [pc, #80]	; (800b20c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d115      	bne.n	800b1ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	051b      	lsls	r3, r3, #20
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	40010000 	.word	0x40010000
 800b20c:	40010400 	.word	0x40010400

0800b210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e040      	b.n	800b2e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b262:	2b00      	cmp	r3, #0
 800b264:	d106      	bne.n	800b274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7f7 ffe4 	bl	800323c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2224      	movs	r2, #36	; 0x24
 800b278:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f022 0201 	bic.w	r2, r2, #1
 800b288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f82c 	bl	800b2e8 <UART_SetConfig>
 800b290:	4603      	mov	r3, r0
 800b292:	2b01      	cmp	r3, #1
 800b294:	d101      	bne.n	800b29a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e022      	b.n	800b2e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 facc 	bl	800b840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	689a      	ldr	r2, [r3, #8]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f042 0201 	orr.w	r2, r2, #1
 800b2d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fb53 	bl	800b984 <UART_CheckIdleState>
 800b2de:	4603      	mov	r3, r0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	689a      	ldr	r2, [r3, #8]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	431a      	orrs	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	4ba7      	ldr	r3, [pc, #668]	; (800b5b4 <UART_SetConfig+0x2cc>)
 800b318:	4013      	ands	r3, r2
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	6812      	ldr	r2, [r2, #0]
 800b31e:	6939      	ldr	r1, [r7, #16]
 800b320:	430b      	orrs	r3, r1
 800b322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a1b      	ldr	r3, [r3, #32]
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	4313      	orrs	r3, r2
 800b348:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	430a      	orrs	r2, r1
 800b35c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a95      	ldr	r2, [pc, #596]	; (800b5b8 <UART_SetConfig+0x2d0>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d120      	bne.n	800b3aa <UART_SetConfig+0xc2>
 800b368:	4b94      	ldr	r3, [pc, #592]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	2b03      	cmp	r3, #3
 800b374:	d816      	bhi.n	800b3a4 <UART_SetConfig+0xbc>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <UART_SetConfig+0x94>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b38d 	.word	0x0800b38d
 800b380:	0800b399 	.word	0x0800b399
 800b384:	0800b393 	.word	0x0800b393
 800b388:	0800b39f 	.word	0x0800b39f
 800b38c:	2301      	movs	r3, #1
 800b38e:	77fb      	strb	r3, [r7, #31]
 800b390:	e14f      	b.n	800b632 <UART_SetConfig+0x34a>
 800b392:	2302      	movs	r3, #2
 800b394:	77fb      	strb	r3, [r7, #31]
 800b396:	e14c      	b.n	800b632 <UART_SetConfig+0x34a>
 800b398:	2304      	movs	r3, #4
 800b39a:	77fb      	strb	r3, [r7, #31]
 800b39c:	e149      	b.n	800b632 <UART_SetConfig+0x34a>
 800b39e:	2308      	movs	r3, #8
 800b3a0:	77fb      	strb	r3, [r7, #31]
 800b3a2:	e146      	b.n	800b632 <UART_SetConfig+0x34a>
 800b3a4:	2310      	movs	r3, #16
 800b3a6:	77fb      	strb	r3, [r7, #31]
 800b3a8:	e143      	b.n	800b632 <UART_SetConfig+0x34a>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a84      	ldr	r2, [pc, #528]	; (800b5c0 <UART_SetConfig+0x2d8>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d132      	bne.n	800b41a <UART_SetConfig+0x132>
 800b3b4:	4b81      	ldr	r3, [pc, #516]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ba:	f003 030c 	and.w	r3, r3, #12
 800b3be:	2b0c      	cmp	r3, #12
 800b3c0:	d828      	bhi.n	800b414 <UART_SetConfig+0x12c>
 800b3c2:	a201      	add	r2, pc, #4	; (adr r2, 800b3c8 <UART_SetConfig+0xe0>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b3fd 	.word	0x0800b3fd
 800b3cc:	0800b415 	.word	0x0800b415
 800b3d0:	0800b415 	.word	0x0800b415
 800b3d4:	0800b415 	.word	0x0800b415
 800b3d8:	0800b409 	.word	0x0800b409
 800b3dc:	0800b415 	.word	0x0800b415
 800b3e0:	0800b415 	.word	0x0800b415
 800b3e4:	0800b415 	.word	0x0800b415
 800b3e8:	0800b403 	.word	0x0800b403
 800b3ec:	0800b415 	.word	0x0800b415
 800b3f0:	0800b415 	.word	0x0800b415
 800b3f4:	0800b415 	.word	0x0800b415
 800b3f8:	0800b40f 	.word	0x0800b40f
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	77fb      	strb	r3, [r7, #31]
 800b400:	e117      	b.n	800b632 <UART_SetConfig+0x34a>
 800b402:	2302      	movs	r3, #2
 800b404:	77fb      	strb	r3, [r7, #31]
 800b406:	e114      	b.n	800b632 <UART_SetConfig+0x34a>
 800b408:	2304      	movs	r3, #4
 800b40a:	77fb      	strb	r3, [r7, #31]
 800b40c:	e111      	b.n	800b632 <UART_SetConfig+0x34a>
 800b40e:	2308      	movs	r3, #8
 800b410:	77fb      	strb	r3, [r7, #31]
 800b412:	e10e      	b.n	800b632 <UART_SetConfig+0x34a>
 800b414:	2310      	movs	r3, #16
 800b416:	77fb      	strb	r3, [r7, #31]
 800b418:	e10b      	b.n	800b632 <UART_SetConfig+0x34a>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a69      	ldr	r2, [pc, #420]	; (800b5c4 <UART_SetConfig+0x2dc>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d120      	bne.n	800b466 <UART_SetConfig+0x17e>
 800b424:	4b65      	ldr	r3, [pc, #404]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b42a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b42e:	2b30      	cmp	r3, #48	; 0x30
 800b430:	d013      	beq.n	800b45a <UART_SetConfig+0x172>
 800b432:	2b30      	cmp	r3, #48	; 0x30
 800b434:	d814      	bhi.n	800b460 <UART_SetConfig+0x178>
 800b436:	2b20      	cmp	r3, #32
 800b438:	d009      	beq.n	800b44e <UART_SetConfig+0x166>
 800b43a:	2b20      	cmp	r3, #32
 800b43c:	d810      	bhi.n	800b460 <UART_SetConfig+0x178>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <UART_SetConfig+0x160>
 800b442:	2b10      	cmp	r3, #16
 800b444:	d006      	beq.n	800b454 <UART_SetConfig+0x16c>
 800b446:	e00b      	b.n	800b460 <UART_SetConfig+0x178>
 800b448:	2300      	movs	r3, #0
 800b44a:	77fb      	strb	r3, [r7, #31]
 800b44c:	e0f1      	b.n	800b632 <UART_SetConfig+0x34a>
 800b44e:	2302      	movs	r3, #2
 800b450:	77fb      	strb	r3, [r7, #31]
 800b452:	e0ee      	b.n	800b632 <UART_SetConfig+0x34a>
 800b454:	2304      	movs	r3, #4
 800b456:	77fb      	strb	r3, [r7, #31]
 800b458:	e0eb      	b.n	800b632 <UART_SetConfig+0x34a>
 800b45a:	2308      	movs	r3, #8
 800b45c:	77fb      	strb	r3, [r7, #31]
 800b45e:	e0e8      	b.n	800b632 <UART_SetConfig+0x34a>
 800b460:	2310      	movs	r3, #16
 800b462:	77fb      	strb	r3, [r7, #31]
 800b464:	e0e5      	b.n	800b632 <UART_SetConfig+0x34a>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a57      	ldr	r2, [pc, #348]	; (800b5c8 <UART_SetConfig+0x2e0>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d120      	bne.n	800b4b2 <UART_SetConfig+0x1ca>
 800b470:	4b52      	ldr	r3, [pc, #328]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b476:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b47a:	2bc0      	cmp	r3, #192	; 0xc0
 800b47c:	d013      	beq.n	800b4a6 <UART_SetConfig+0x1be>
 800b47e:	2bc0      	cmp	r3, #192	; 0xc0
 800b480:	d814      	bhi.n	800b4ac <UART_SetConfig+0x1c4>
 800b482:	2b80      	cmp	r3, #128	; 0x80
 800b484:	d009      	beq.n	800b49a <UART_SetConfig+0x1b2>
 800b486:	2b80      	cmp	r3, #128	; 0x80
 800b488:	d810      	bhi.n	800b4ac <UART_SetConfig+0x1c4>
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <UART_SetConfig+0x1ac>
 800b48e:	2b40      	cmp	r3, #64	; 0x40
 800b490:	d006      	beq.n	800b4a0 <UART_SetConfig+0x1b8>
 800b492:	e00b      	b.n	800b4ac <UART_SetConfig+0x1c4>
 800b494:	2300      	movs	r3, #0
 800b496:	77fb      	strb	r3, [r7, #31]
 800b498:	e0cb      	b.n	800b632 <UART_SetConfig+0x34a>
 800b49a:	2302      	movs	r3, #2
 800b49c:	77fb      	strb	r3, [r7, #31]
 800b49e:	e0c8      	b.n	800b632 <UART_SetConfig+0x34a>
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	77fb      	strb	r3, [r7, #31]
 800b4a4:	e0c5      	b.n	800b632 <UART_SetConfig+0x34a>
 800b4a6:	2308      	movs	r3, #8
 800b4a8:	77fb      	strb	r3, [r7, #31]
 800b4aa:	e0c2      	b.n	800b632 <UART_SetConfig+0x34a>
 800b4ac:	2310      	movs	r3, #16
 800b4ae:	77fb      	strb	r3, [r7, #31]
 800b4b0:	e0bf      	b.n	800b632 <UART_SetConfig+0x34a>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a45      	ldr	r2, [pc, #276]	; (800b5cc <UART_SetConfig+0x2e4>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d125      	bne.n	800b508 <UART_SetConfig+0x220>
 800b4bc:	4b3f      	ldr	r3, [pc, #252]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4ca:	d017      	beq.n	800b4fc <UART_SetConfig+0x214>
 800b4cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4d0:	d817      	bhi.n	800b502 <UART_SetConfig+0x21a>
 800b4d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4d6:	d00b      	beq.n	800b4f0 <UART_SetConfig+0x208>
 800b4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4dc:	d811      	bhi.n	800b502 <UART_SetConfig+0x21a>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <UART_SetConfig+0x202>
 800b4e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e6:	d006      	beq.n	800b4f6 <UART_SetConfig+0x20e>
 800b4e8:	e00b      	b.n	800b502 <UART_SetConfig+0x21a>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	77fb      	strb	r3, [r7, #31]
 800b4ee:	e0a0      	b.n	800b632 <UART_SetConfig+0x34a>
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	77fb      	strb	r3, [r7, #31]
 800b4f4:	e09d      	b.n	800b632 <UART_SetConfig+0x34a>
 800b4f6:	2304      	movs	r3, #4
 800b4f8:	77fb      	strb	r3, [r7, #31]
 800b4fa:	e09a      	b.n	800b632 <UART_SetConfig+0x34a>
 800b4fc:	2308      	movs	r3, #8
 800b4fe:	77fb      	strb	r3, [r7, #31]
 800b500:	e097      	b.n	800b632 <UART_SetConfig+0x34a>
 800b502:	2310      	movs	r3, #16
 800b504:	77fb      	strb	r3, [r7, #31]
 800b506:	e094      	b.n	800b632 <UART_SetConfig+0x34a>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a30      	ldr	r2, [pc, #192]	; (800b5d0 <UART_SetConfig+0x2e8>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d125      	bne.n	800b55e <UART_SetConfig+0x276>
 800b512:	4b2a      	ldr	r3, [pc, #168]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b51c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b520:	d017      	beq.n	800b552 <UART_SetConfig+0x26a>
 800b522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b526:	d817      	bhi.n	800b558 <UART_SetConfig+0x270>
 800b528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b52c:	d00b      	beq.n	800b546 <UART_SetConfig+0x25e>
 800b52e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b532:	d811      	bhi.n	800b558 <UART_SetConfig+0x270>
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <UART_SetConfig+0x258>
 800b538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b53c:	d006      	beq.n	800b54c <UART_SetConfig+0x264>
 800b53e:	e00b      	b.n	800b558 <UART_SetConfig+0x270>
 800b540:	2301      	movs	r3, #1
 800b542:	77fb      	strb	r3, [r7, #31]
 800b544:	e075      	b.n	800b632 <UART_SetConfig+0x34a>
 800b546:	2302      	movs	r3, #2
 800b548:	77fb      	strb	r3, [r7, #31]
 800b54a:	e072      	b.n	800b632 <UART_SetConfig+0x34a>
 800b54c:	2304      	movs	r3, #4
 800b54e:	77fb      	strb	r3, [r7, #31]
 800b550:	e06f      	b.n	800b632 <UART_SetConfig+0x34a>
 800b552:	2308      	movs	r3, #8
 800b554:	77fb      	strb	r3, [r7, #31]
 800b556:	e06c      	b.n	800b632 <UART_SetConfig+0x34a>
 800b558:	2310      	movs	r3, #16
 800b55a:	77fb      	strb	r3, [r7, #31]
 800b55c:	e069      	b.n	800b632 <UART_SetConfig+0x34a>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a1c      	ldr	r2, [pc, #112]	; (800b5d4 <UART_SetConfig+0x2ec>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d137      	bne.n	800b5d8 <UART_SetConfig+0x2f0>
 800b568:	4b14      	ldr	r3, [pc, #80]	; (800b5bc <UART_SetConfig+0x2d4>)
 800b56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b576:	d017      	beq.n	800b5a8 <UART_SetConfig+0x2c0>
 800b578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b57c:	d817      	bhi.n	800b5ae <UART_SetConfig+0x2c6>
 800b57e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b582:	d00b      	beq.n	800b59c <UART_SetConfig+0x2b4>
 800b584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b588:	d811      	bhi.n	800b5ae <UART_SetConfig+0x2c6>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <UART_SetConfig+0x2ae>
 800b58e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b592:	d006      	beq.n	800b5a2 <UART_SetConfig+0x2ba>
 800b594:	e00b      	b.n	800b5ae <UART_SetConfig+0x2c6>
 800b596:	2300      	movs	r3, #0
 800b598:	77fb      	strb	r3, [r7, #31]
 800b59a:	e04a      	b.n	800b632 <UART_SetConfig+0x34a>
 800b59c:	2302      	movs	r3, #2
 800b59e:	77fb      	strb	r3, [r7, #31]
 800b5a0:	e047      	b.n	800b632 <UART_SetConfig+0x34a>
 800b5a2:	2304      	movs	r3, #4
 800b5a4:	77fb      	strb	r3, [r7, #31]
 800b5a6:	e044      	b.n	800b632 <UART_SetConfig+0x34a>
 800b5a8:	2308      	movs	r3, #8
 800b5aa:	77fb      	strb	r3, [r7, #31]
 800b5ac:	e041      	b.n	800b632 <UART_SetConfig+0x34a>
 800b5ae:	2310      	movs	r3, #16
 800b5b0:	77fb      	strb	r3, [r7, #31]
 800b5b2:	e03e      	b.n	800b632 <UART_SetConfig+0x34a>
 800b5b4:	efff69f3 	.word	0xefff69f3
 800b5b8:	40011000 	.word	0x40011000
 800b5bc:	40023800 	.word	0x40023800
 800b5c0:	40004400 	.word	0x40004400
 800b5c4:	40004800 	.word	0x40004800
 800b5c8:	40004c00 	.word	0x40004c00
 800b5cc:	40005000 	.word	0x40005000
 800b5d0:	40011400 	.word	0x40011400
 800b5d4:	40007800 	.word	0x40007800
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a94      	ldr	r2, [pc, #592]	; (800b830 <UART_SetConfig+0x548>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d125      	bne.n	800b62e <UART_SetConfig+0x346>
 800b5e2:	4b94      	ldr	r3, [pc, #592]	; (800b834 <UART_SetConfig+0x54c>)
 800b5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5f0:	d017      	beq.n	800b622 <UART_SetConfig+0x33a>
 800b5f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5f6:	d817      	bhi.n	800b628 <UART_SetConfig+0x340>
 800b5f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5fc:	d00b      	beq.n	800b616 <UART_SetConfig+0x32e>
 800b5fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b602:	d811      	bhi.n	800b628 <UART_SetConfig+0x340>
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <UART_SetConfig+0x328>
 800b608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b60c:	d006      	beq.n	800b61c <UART_SetConfig+0x334>
 800b60e:	e00b      	b.n	800b628 <UART_SetConfig+0x340>
 800b610:	2300      	movs	r3, #0
 800b612:	77fb      	strb	r3, [r7, #31]
 800b614:	e00d      	b.n	800b632 <UART_SetConfig+0x34a>
 800b616:	2302      	movs	r3, #2
 800b618:	77fb      	strb	r3, [r7, #31]
 800b61a:	e00a      	b.n	800b632 <UART_SetConfig+0x34a>
 800b61c:	2304      	movs	r3, #4
 800b61e:	77fb      	strb	r3, [r7, #31]
 800b620:	e007      	b.n	800b632 <UART_SetConfig+0x34a>
 800b622:	2308      	movs	r3, #8
 800b624:	77fb      	strb	r3, [r7, #31]
 800b626:	e004      	b.n	800b632 <UART_SetConfig+0x34a>
 800b628:	2310      	movs	r3, #16
 800b62a:	77fb      	strb	r3, [r7, #31]
 800b62c:	e001      	b.n	800b632 <UART_SetConfig+0x34a>
 800b62e:	2310      	movs	r3, #16
 800b630:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b63a:	d17f      	bne.n	800b73c <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800b63c:	7ffb      	ldrb	r3, [r7, #31]
 800b63e:	2b08      	cmp	r3, #8
 800b640:	d85c      	bhi.n	800b6fc <UART_SetConfig+0x414>
 800b642:	a201      	add	r2, pc, #4	; (adr r2, 800b648 <UART_SetConfig+0x360>)
 800b644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b648:	0800b66d 	.word	0x0800b66d
 800b64c:	0800b68d 	.word	0x0800b68d
 800b650:	0800b6ad 	.word	0x0800b6ad
 800b654:	0800b6fd 	.word	0x0800b6fd
 800b658:	0800b6c5 	.word	0x0800b6c5
 800b65c:	0800b6fd 	.word	0x0800b6fd
 800b660:	0800b6fd 	.word	0x0800b6fd
 800b664:	0800b6fd 	.word	0x0800b6fd
 800b668:	0800b6e5 	.word	0x0800b6e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b66c:	f7fc f8b4 	bl	80077d8 <HAL_RCC_GetPCLK1Freq>
 800b670:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	005a      	lsls	r2, r3, #1
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	085b      	lsrs	r3, r3, #1
 800b67c:	441a      	add	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	fbb2 f3f3 	udiv	r3, r2, r3
 800b686:	b29b      	uxth	r3, r3
 800b688:	61bb      	str	r3, [r7, #24]
        break;
 800b68a:	e03a      	b.n	800b702 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b68c:	f7fc f8b8 	bl	8007800 <HAL_RCC_GetPCLK2Freq>
 800b690:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	005a      	lsls	r2, r3, #1
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	085b      	lsrs	r3, r3, #1
 800b69c:	441a      	add	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	61bb      	str	r3, [r7, #24]
        break;
 800b6aa:	e02a      	b.n	800b702 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	085a      	lsrs	r2, r3, #1
 800b6b2:	4b61      	ldr	r3, [pc, #388]	; (800b838 <UART_SetConfig+0x550>)
 800b6b4:	4413      	add	r3, r2
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	6852      	ldr	r2, [r2, #4]
 800b6ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	61bb      	str	r3, [r7, #24]
        break;
 800b6c2:	e01e      	b.n	800b702 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6c4:	f7fb ffc6 	bl	8007654 <HAL_RCC_GetSysClockFreq>
 800b6c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	005a      	lsls	r2, r3, #1
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	085b      	lsrs	r3, r3, #1
 800b6d4:	441a      	add	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	61bb      	str	r3, [r7, #24]
        break;
 800b6e2:	e00e      	b.n	800b702 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	085b      	lsrs	r3, r3, #1
 800b6ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	61bb      	str	r3, [r7, #24]
        break;
 800b6fa:	e002      	b.n	800b702 <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	75fb      	strb	r3, [r7, #23]
        break;
 800b700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b0f      	cmp	r3, #15
 800b706:	d916      	bls.n	800b736 <UART_SetConfig+0x44e>
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b70e:	d212      	bcs.n	800b736 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	b29b      	uxth	r3, r3
 800b714:	f023 030f 	bic.w	r3, r3, #15
 800b718:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	085b      	lsrs	r3, r3, #1
 800b71e:	b29b      	uxth	r3, r3
 800b720:	f003 0307 	and.w	r3, r3, #7
 800b724:	b29a      	uxth	r2, r3
 800b726:	897b      	ldrh	r3, [r7, #10]
 800b728:	4313      	orrs	r3, r2
 800b72a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	897a      	ldrh	r2, [r7, #10]
 800b732:	60da      	str	r2, [r3, #12]
 800b734:	e070      	b.n	800b818 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	75fb      	strb	r3, [r7, #23]
 800b73a:	e06d      	b.n	800b818 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800b73c:	7ffb      	ldrb	r3, [r7, #31]
 800b73e:	2b08      	cmp	r3, #8
 800b740:	d859      	bhi.n	800b7f6 <UART_SetConfig+0x50e>
 800b742:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <UART_SetConfig+0x460>)
 800b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b748:	0800b76d 	.word	0x0800b76d
 800b74c:	0800b78b 	.word	0x0800b78b
 800b750:	0800b7a9 	.word	0x0800b7a9
 800b754:	0800b7f7 	.word	0x0800b7f7
 800b758:	0800b7c1 	.word	0x0800b7c1
 800b75c:	0800b7f7 	.word	0x0800b7f7
 800b760:	0800b7f7 	.word	0x0800b7f7
 800b764:	0800b7f7 	.word	0x0800b7f7
 800b768:	0800b7df 	.word	0x0800b7df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b76c:	f7fc f834 	bl	80077d8 <HAL_RCC_GetPCLK1Freq>
 800b770:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	085a      	lsrs	r2, r3, #1
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	441a      	add	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	fbb2 f3f3 	udiv	r3, r2, r3
 800b784:	b29b      	uxth	r3, r3
 800b786:	61bb      	str	r3, [r7, #24]
        break;
 800b788:	e038      	b.n	800b7fc <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b78a:	f7fc f839 	bl	8007800 <HAL_RCC_GetPCLK2Freq>
 800b78e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	085a      	lsrs	r2, r3, #1
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	441a      	add	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	61bb      	str	r3, [r7, #24]
        break;
 800b7a6:	e029      	b.n	800b7fc <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	085a      	lsrs	r2, r3, #1
 800b7ae:	4b23      	ldr	r3, [pc, #140]	; (800b83c <UART_SetConfig+0x554>)
 800b7b0:	4413      	add	r3, r2
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	6852      	ldr	r2, [r2, #4]
 800b7b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	61bb      	str	r3, [r7, #24]
        break;
 800b7be:	e01d      	b.n	800b7fc <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7c0:	f7fb ff48 	bl	8007654 <HAL_RCC_GetSysClockFreq>
 800b7c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	085a      	lsrs	r2, r3, #1
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	441a      	add	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	61bb      	str	r3, [r7, #24]
        break;
 800b7dc:	e00e      	b.n	800b7fc <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	085b      	lsrs	r3, r3, #1
 800b7e4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	61bb      	str	r3, [r7, #24]
        break;
 800b7f4:	e002      	b.n	800b7fc <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	75fb      	strb	r3, [r7, #23]
        break;
 800b7fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	2b0f      	cmp	r3, #15
 800b800:	d908      	bls.n	800b814 <UART_SetConfig+0x52c>
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b808:	d204      	bcs.n	800b814 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	69ba      	ldr	r2, [r7, #24]
 800b810:	60da      	str	r2, [r3, #12]
 800b812:	e001      	b.n	800b818 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b824:	7dfb      	ldrb	r3, [r7, #23]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3720      	adds	r7, #32
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	40007c00 	.word	0x40007c00
 800b834:	40023800 	.word	0x40023800
 800b838:	01e84800 	.word	0x01e84800
 800b83c:	00f42400 	.word	0x00f42400

0800b840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00a      	beq.n	800b86a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	f003 0302 	and.w	r3, r3, #2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00a      	beq.n	800b88c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	430a      	orrs	r2, r1
 800b88a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00a      	beq.n	800b8ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	f003 0308 	and.w	r3, r3, #8
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	f003 0310 	and.w	r3, r3, #16
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00a      	beq.n	800b8f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f6:	f003 0320 	and.w	r3, r3, #32
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	430a      	orrs	r2, r1
 800b912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d01a      	beq.n	800b956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b93e:	d10a      	bne.n	800b956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	430a      	orrs	r2, r1
 800b954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00a      	beq.n	800b978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	430a      	orrs	r2, r1
 800b976:	605a      	str	r2, [r3, #4]
  }
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af02      	add	r7, sp, #8
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b992:	f7f7 ffa1 	bl	80038d8 <HAL_GetTick>
 800b996:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0308 	and.w	r3, r3, #8
 800b9a2:	2b08      	cmp	r3, #8
 800b9a4:	d10e      	bne.n	800b9c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f814 	bl	800b9e2 <UART_WaitOnFlagUntilTimeout>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e00a      	b.n	800b9da <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2220      	movs	r2, #32
 800b9c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2220      	movs	r2, #32
 800b9ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	603b      	str	r3, [r7, #0]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9f2:	e05d      	b.n	800bab0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fa:	d059      	beq.n	800bab0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9fc:	f7f7 ff6c 	bl	80038d8 <HAL_GetTick>
 800ba00:	4602      	mov	r2, r0
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d302      	bcc.n	800ba12 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d11b      	bne.n	800ba4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f022 0201 	bic.w	r2, r2, #1
 800ba30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2220      	movs	r2, #32
 800ba36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e042      	b.n	800bad0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d02b      	beq.n	800bab0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba66:	d123      	bne.n	800bab0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba70:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	689a      	ldr	r2, [r3, #8]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f022 0201 	bic.w	r2, r2, #1
 800ba90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2220      	movs	r2, #32
 800ba96:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2220      	movs	r2, #32
 800baa2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e00f      	b.n	800bad0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	69da      	ldr	r2, [r3, #28]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4013      	ands	r3, r2
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	bf0c      	ite	eq
 800bac0:	2301      	moveq	r3, #1
 800bac2:	2300      	movne	r3, #0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	461a      	mov	r2, r3
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d092      	beq.n	800b9f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d027      	beq.n	800bb42 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	4b2f      	ldr	r3, [pc, #188]	; (800bbb8 <FMC_SDRAM_Init+0xe0>)
 800bafc:	4013      	ands	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb08:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bb0e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bb14:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bb1a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bb20:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bb26:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bb2c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bb32:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	e032      	b.n	800bba8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb4e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb58:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bb5e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	4b12      	ldr	r3, [pc, #72]	; (800bbb8 <FMC_SDRAM_Init+0xe0>)
 800bb70:	4013      	ands	r3, r2
 800bb72:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb7c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bb82:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bb88:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bb8e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bb94:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	ffff8000 	.word	0xffff8000

0800bbbc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b087      	sub	sp, #28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d02e      	beq.n	800bc34 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bbe2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbf2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bbfc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	3b01      	subs	r3, #1
 800bc04:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bc06:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bc10:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc1a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	3b01      	subs	r3, #1
 800bc22:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc24:	4313      	orrs	r3, r2
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	609a      	str	r2, [r3, #8]
 800bc32:	e039      	b.n	800bca8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	4b1e      	ldr	r3, [pc, #120]	; (800bcb8 <FMC_SDRAM_Timing_Init+0xfc>)
 800bc3e:	4013      	ands	r3, r2
 800bc40:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bc52:	4313      	orrs	r3, r2
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc66:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc76:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bc80:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bc8a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc94:	4313      	orrs	r3, r2
 800bc96:	693a      	ldr	r2, [r7, #16]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	ff0f0fff 	.word	0xff0f0fff

0800bcbc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bcd4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800bcde:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bce6:	4313      	orrs	r3, r2
 800bce8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	371c      	adds	r7, #28
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr

0800bcfe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b083      	sub	sp, #12
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	695a      	ldr	r2, [r3, #20]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	431a      	orrs	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bd24:	b084      	sub	sp, #16
 800bd26:	b480      	push	{r7}
 800bd28:	b085      	sub	sp, #20
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	f107 001c 	add.w	r0, r7, #28
 800bd32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bd3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bd3e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bd42:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bd46:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bd4a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bd4e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <SDMMC_Init+0x54>)
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	431a      	orrs	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	b004      	add	sp, #16
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	ffff8100 	.word	0xffff8100

0800bd7c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b082      	sub	sp, #8
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2203      	movs	r2, #3
 800bda2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bda4:	2002      	movs	r0, #2
 800bda6:	f7f7 fda3 	bl	80038f0 <HAL_Delay>
  
  return HAL_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 0303 	and.w	r3, r3, #3
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bdf4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bdfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68da      	ldr	r2, [r3, #12]
 800be06:	4b06      	ldr	r3, [pc, #24]	; (800be20 <SDMMC_SendCommand+0x50>)
 800be08:	4013      	ands	r3, r2
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	431a      	orrs	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	fffff000 	.word	0xfffff000

0800be24 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	b2db      	uxtb	r3, r3
}
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800be3e:	b480      	push	{r7}
 800be40:	b085      	sub	sp, #20
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3314      	adds	r3, #20
 800be4c:	461a      	mov	r2, r3
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	4413      	add	r3, r2
 800be52:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
}  
 800be58:	4618      	mov	r0, r3
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be8a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800be90:	431a      	orrs	r2, r3
                       Data->DPSM);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800be96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	431a      	orrs	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800beae:	2300      	movs	r3, #0

}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800beca:	2310      	movs	r3, #16
 800becc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bece:	2340      	movs	r3, #64	; 0x40
 800bed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bed2:	2300      	movs	r3, #0
 800bed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bedc:	f107 0308 	add.w	r3, r7, #8
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7ff ff74 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800beec:	2110      	movs	r1, #16
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fa42 	bl	800c378 <SDMMC_GetCmdResp1>
 800bef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bef6:	69fb      	ldr	r3, [r7, #28]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3720      	adds	r7, #32
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bf0e:	2311      	movs	r3, #17
 800bf10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf12:	2340      	movs	r3, #64	; 0x40
 800bf14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf16:	2300      	movs	r3, #0
 800bf18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf20:	f107 0308 	add.w	r3, r7, #8
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff ff52 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf30:	2111      	movs	r1, #17
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fa20 	bl	800c378 <SDMMC_GetCmdResp1>
 800bf38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf3a:	69fb      	ldr	r3, [r7, #28]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3720      	adds	r7, #32
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bf52:	2312      	movs	r3, #18
 800bf54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf56:	2340      	movs	r3, #64	; 0x40
 800bf58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf64:	f107 0308 	add.w	r3, r7, #8
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff ff30 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf74:	2112      	movs	r1, #18
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f9fe 	bl	800c378 <SDMMC_GetCmdResp1>
 800bf7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3720      	adds	r7, #32
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b088      	sub	sp, #32
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bf96:	2318      	movs	r3, #24
 800bf98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf9a:	2340      	movs	r3, #64	; 0x40
 800bf9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfa6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfa8:	f107 0308 	add.w	r3, r7, #8
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff ff0e 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bfb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb8:	2118      	movs	r1, #24
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f9dc 	bl	800c378 <SDMMC_GetCmdResp1>
 800bfc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfc2:	69fb      	ldr	r3, [r7, #28]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3720      	adds	r7, #32
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bfda:	2319      	movs	r3, #25
 800bfdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfde:	2340      	movs	r3, #64	; 0x40
 800bfe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfec:	f107 0308 	add.w	r3, r7, #8
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff feec 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bffc:	2119      	movs	r1, #25
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f9ba 	bl	800c378 <SDMMC_GetCmdResp1>
 800c004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c006:	69fb      	ldr	r3, [r7, #28]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3720      	adds	r7, #32
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c018:	2300      	movs	r3, #0
 800c01a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c01c:	230c      	movs	r3, #12
 800c01e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c020:	2340      	movs	r3, #64	; 0x40
 800c022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c024:	2300      	movs	r3, #0
 800c026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c02c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c02e:	f107 0308 	add.w	r3, r7, #8
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff fecb 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c03a:	4a05      	ldr	r2, [pc, #20]	; (800c050 <SDMMC_CmdStopTransfer+0x40>)
 800c03c:	210c      	movs	r1, #12
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f99a 	bl	800c378 <SDMMC_GetCmdResp1>
 800c044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c046:	69fb      	ldr	r3, [r7, #28]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3720      	adds	r7, #32
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	05f5e100 	.word	0x05f5e100

0800c054 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b08a      	sub	sp, #40	; 0x28
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c064:	2307      	movs	r3, #7
 800c066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c068:	2340      	movs	r3, #64	; 0x40
 800c06a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c06c:	2300      	movs	r3, #0
 800c06e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c074:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c076:	f107 0310 	add.w	r3, r7, #16
 800c07a:	4619      	mov	r1, r3
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f7ff fea7 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c082:	f241 3288 	movw	r2, #5000	; 0x1388
 800c086:	2107      	movs	r1, #7
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 f975 	bl	800c378 <SDMMC_GetCmdResp1>
 800c08e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c092:	4618      	mov	r0, r3
 800c094:	3728      	adds	r7, #40	; 0x28
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b088      	sub	sp, #32
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0b8:	f107 0308 	add.w	r3, r7, #8
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff fe86 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f92f 	bl	800c328 <SDMMC_GetCmdError>
 800c0ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0cc:	69fb      	ldr	r3, [r7, #28]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3720      	adds	r7, #32
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b088      	sub	sp, #32
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c0de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c0e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c0e4:	2308      	movs	r3, #8
 800c0e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0e8:	2340      	movs	r3, #64	; 0x40
 800c0ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0f6:	f107 0308 	add.w	r3, r7, #8
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff fe67 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fb18 	bl	800c738 <SDMMC_GetCmdResp7>
 800c108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c10a:	69fb      	ldr	r3, [r7, #28]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3720      	adds	r7, #32
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c122:	2337      	movs	r3, #55	; 0x37
 800c124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c126:	2340      	movs	r3, #64	; 0x40
 800c128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c12a:	2300      	movs	r3, #0
 800c12c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c12e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c134:	f107 0308 	add.w	r3, r7, #8
 800c138:	4619      	mov	r1, r3
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7ff fe48 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c140:	f241 3288 	movw	r2, #5000	; 0x1388
 800c144:	2137      	movs	r1, #55	; 0x37
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f916 	bl	800c378 <SDMMC_GetCmdResp1>
 800c14c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c14e:	69fb      	ldr	r3, [r7, #28]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3720      	adds	r7, #32
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b088      	sub	sp, #32
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <SDMMC_CmdAppOperCommand+0x44>)
 800c166:	4313      	orrs	r3, r2
 800c168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c16a:	2329      	movs	r3, #41	; 0x29
 800c16c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c16e:	2340      	movs	r3, #64	; 0x40
 800c170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c172:	2300      	movs	r3, #0
 800c174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c17a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c17c:	f107 0308 	add.w	r3, r7, #8
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff fe24 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fa27 	bl	800c5dc <SDMMC_GetCmdResp3>
 800c18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c190:	69fb      	ldr	r3, [r7, #28]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3720      	adds	r7, #32
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	80100000 	.word	0x80100000

0800c1a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b088      	sub	sp, #32
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c1ae:	2306      	movs	r3, #6
 800c1b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1b2:	2340      	movs	r3, #64	; 0x40
 800c1b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1c0:	f107 0308 	add.w	r3, r7, #8
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff fe02 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c1cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1d0:	2106      	movs	r1, #6
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f8d0 	bl	800c378 <SDMMC_GetCmdResp1>
 800c1d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1da:	69fb      	ldr	r3, [r7, #28]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3720      	adds	r7, #32
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c1f0:	2333      	movs	r3, #51	; 0x33
 800c1f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1f4:	2340      	movs	r3, #64	; 0x40
 800c1f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c202:	f107 0308 	add.w	r3, r7, #8
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff fde1 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c212:	2133      	movs	r1, #51	; 0x33
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f8af 	bl	800c378 <SDMMC_GetCmdResp1>
 800c21a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c21c:	69fb      	ldr	r3, [r7, #28]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3720      	adds	r7, #32
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b088      	sub	sp, #32
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c22e:	2300      	movs	r3, #0
 800c230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c232:	2302      	movs	r3, #2
 800c234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c236:	23c0      	movs	r3, #192	; 0xc0
 800c238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c23a:	2300      	movs	r3, #0
 800c23c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c23e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c244:	f107 0308 	add.w	r3, r7, #8
 800c248:	4619      	mov	r1, r3
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff fdc0 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f97d 	bl	800c550 <SDMMC_GetCmdResp2>
 800c256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c258:	69fb      	ldr	r3, [r7, #28]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3720      	adds	r7, #32
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b088      	sub	sp, #32
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c270:	2309      	movs	r3, #9
 800c272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c274:	23c0      	movs	r3, #192	; 0xc0
 800c276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c278:	2300      	movs	r3, #0
 800c27a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c27c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c282:	f107 0308 	add.w	r3, r7, #8
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7ff fda1 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f95e 	bl	800c550 <SDMMC_GetCmdResp2>
 800c294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c296:	69fb      	ldr	r3, [r7, #28]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3720      	adds	r7, #32
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b088      	sub	sp, #32
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2b2:	2340      	movs	r3, #64	; 0x40
 800c2b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2c0:	f107 0308 	add.w	r3, r7, #8
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7ff fd82 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	2103      	movs	r1, #3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f9bd 	bl	800c650 <SDMMC_GetCmdResp6>
 800c2d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2d8:	69fb      	ldr	r3, [r7, #28]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3720      	adds	r7, #32
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b088      	sub	sp, #32
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c2f0:	230d      	movs	r3, #13
 800c2f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2f4:	2340      	movs	r3, #64	; 0x40
 800c2f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c302:	f107 0308 	add.w	r3, r7, #8
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7ff fd61 	bl	800bdd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c30e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c312:	210d      	movs	r1, #13
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 f82f 	bl	800c378 <SDMMC_GetCmdResp1>
 800c31a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c31c:	69fb      	ldr	r3, [r7, #28]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3720      	adds	r7, #32
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c328:	b490      	push	{r4, r7}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c330:	4b0f      	ldr	r3, [pc, #60]	; (800c370 <SDMMC_GetCmdError+0x48>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a0f      	ldr	r2, [pc, #60]	; (800c374 <SDMMC_GetCmdError+0x4c>)
 800c336:	fba2 2303 	umull	r2, r3, r2, r3
 800c33a:	0a5b      	lsrs	r3, r3, #9
 800c33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c340:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c344:	4623      	mov	r3, r4
 800c346:	1e5c      	subs	r4, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c34c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c350:	e009      	b.n	800c366 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0f2      	beq.n	800c344 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	22c5      	movs	r2, #197	; 0xc5
 800c362:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bc90      	pop	{r4, r7}
 800c36e:	4770      	bx	lr
 800c370:	20000018 	.word	0x20000018
 800c374:	10624dd3 	.word	0x10624dd3

0800c378 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c378:	b590      	push	{r4, r7, lr}
 800c37a:	b087      	sub	sp, #28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	460b      	mov	r3, r1
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c386:	4b6f      	ldr	r3, [pc, #444]	; (800c544 <SDMMC_GetCmdResp1+0x1cc>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a6f      	ldr	r2, [pc, #444]	; (800c548 <SDMMC_GetCmdResp1+0x1d0>)
 800c38c:	fba2 2303 	umull	r2, r3, r2, r3
 800c390:	0a5b      	lsrs	r3, r3, #9
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c398:	4623      	mov	r3, r4
 800c39a:	1e5c      	subs	r4, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3a4:	e0c9      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3aa:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d0f0      	beq.n	800c398 <SDMMC_GetCmdResp1+0x20>
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1eb      	bne.n	800c398 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c4:	f003 0304 	and.w	r3, r3, #4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d004      	beq.n	800c3d6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2204      	movs	r2, #4
 800c3d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3d2:	2304      	movs	r3, #4
 800c3d4:	e0b1      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d004      	beq.n	800c3ec <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e0a6      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	22c5      	movs	r2, #197	; 0xc5
 800c3f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7ff fd16 	bl	800be24 <SDMMC_GetCommandResponse>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	7afb      	ldrb	r3, [r7, #11]
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d001      	beq.n	800c406 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c402:	2301      	movs	r3, #1
 800c404:	e099      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c406:	2100      	movs	r1, #0
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f7ff fd18 	bl	800be3e <SDMMC_GetResponse>
 800c40e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c410:	693a      	ldr	r2, [r7, #16]
 800c412:	4b4e      	ldr	r3, [pc, #312]	; (800c54c <SDMMC_GetCmdResp1+0x1d4>)
 800c414:	4013      	ands	r3, r2
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e08d      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	2b00      	cmp	r3, #0
 800c422:	da02      	bge.n	800c42a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c428:	e087      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c434:	2340      	movs	r3, #64	; 0x40
 800c436:	e080      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c442:	2380      	movs	r3, #128	; 0x80
 800c444:	e079      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c450:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c454:	e071      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d002      	beq.n	800c466 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c460:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c464:	e069      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c474:	e061      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c484:	e059      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c494:	e051      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c4a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4a4:	e049      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c4b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4b4:	e041      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c4c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4c4:	e039      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c4d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4d4:	e031      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c4e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c4e4:	e029      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c4f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4f4:	e021      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c504:	e019      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c514:	e011      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c520:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c524:	e009      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	f003 0308 	and.w	r3, r3, #8
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c530:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c534:	e001      	b.n	800c53a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	371c      	adds	r7, #28
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd90      	pop	{r4, r7, pc}
 800c542:	bf00      	nop
 800c544:	20000018 	.word	0x20000018
 800c548:	10624dd3 	.word	0x10624dd3
 800c54c:	fdffe008 	.word	0xfdffe008

0800c550 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c550:	b490      	push	{r4, r7}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c558:	4b1e      	ldr	r3, [pc, #120]	; (800c5d4 <SDMMC_GetCmdResp2+0x84>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a1e      	ldr	r2, [pc, #120]	; (800c5d8 <SDMMC_GetCmdResp2+0x88>)
 800c55e:	fba2 2303 	umull	r2, r3, r2, r3
 800c562:	0a5b      	lsrs	r3, r3, #9
 800c564:	f241 3288 	movw	r2, #5000	; 0x1388
 800c568:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c56c:	4623      	mov	r3, r4
 800c56e:	1e5c      	subs	r4, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c578:	e026      	b.n	800c5c8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c57e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c586:	2b00      	cmp	r3, #0
 800c588:	d0f0      	beq.n	800c56c <SDMMC_GetCmdResp2+0x1c>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1eb      	bne.n	800c56c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d004      	beq.n	800c5aa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2204      	movs	r2, #4
 800c5a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5a6:	2304      	movs	r3, #4
 800c5a8:	e00e      	b.n	800c5c8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ae:	f003 0301 	and.w	r3, r3, #1
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d004      	beq.n	800c5c0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e003      	b.n	800c5c8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	22c5      	movs	r2, #197	; 0xc5
 800c5c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bc90      	pop	{r4, r7}
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	20000018 	.word	0x20000018
 800c5d8:	10624dd3 	.word	0x10624dd3

0800c5dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c5dc:	b490      	push	{r4, r7}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5e4:	4b18      	ldr	r3, [pc, #96]	; (800c648 <SDMMC_GetCmdResp3+0x6c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a18      	ldr	r2, [pc, #96]	; (800c64c <SDMMC_GetCmdResp3+0x70>)
 800c5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ee:	0a5b      	lsrs	r3, r3, #9
 800c5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5f8:	4623      	mov	r3, r4
 800c5fa:	1e5c      	subs	r4, r3, #1
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c604:	e01b      	b.n	800c63e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0f0      	beq.n	800c5f8 <SDMMC_GetCmdResp3+0x1c>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1eb      	bne.n	800c5f8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2204      	movs	r2, #4
 800c630:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c632:	2304      	movs	r3, #4
 800c634:	e003      	b.n	800c63e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	22c5      	movs	r2, #197	; 0xc5
 800c63a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bc90      	pop	{r4, r7}
 800c646:	4770      	bx	lr
 800c648:	20000018 	.word	0x20000018
 800c64c:	10624dd3 	.word	0x10624dd3

0800c650 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c650:	b590      	push	{r4, r7, lr}
 800c652:	b087      	sub	sp, #28
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	460b      	mov	r3, r1
 800c65a:	607a      	str	r2, [r7, #4]
 800c65c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c65e:	4b34      	ldr	r3, [pc, #208]	; (800c730 <SDMMC_GetCmdResp6+0xe0>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a34      	ldr	r2, [pc, #208]	; (800c734 <SDMMC_GetCmdResp6+0xe4>)
 800c664:	fba2 2303 	umull	r2, r3, r2, r3
 800c668:	0a5b      	lsrs	r3, r3, #9
 800c66a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c66e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c672:	4623      	mov	r3, r4
 800c674:	1e5c      	subs	r4, r3, #1
 800c676:	2b00      	cmp	r3, #0
 800c678:	d102      	bne.n	800c680 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c67a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c67e:	e052      	b.n	800c726 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c684:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d0f0      	beq.n	800c672 <SDMMC_GetCmdResp6+0x22>
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1eb      	bne.n	800c672 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69e:	f003 0304 	and.w	r3, r3, #4
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d004      	beq.n	800c6b0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2204      	movs	r2, #4
 800c6aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6ac:	2304      	movs	r3, #4
 800c6ae:	e03a      	b.n	800c726 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d004      	beq.n	800c6c6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e02f      	b.n	800c726 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7ff fbac 	bl	800be24 <SDMMC_GetCommandResponse>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d001      	beq.n	800c6da <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e025      	b.n	800c726 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	22c5      	movs	r2, #197	; 0xc5
 800c6de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f7ff fbab 	bl	800be3e <SDMMC_GetResponse>
 800c6e8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d106      	bne.n	800c702 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	0c1b      	lsrs	r3, r3, #16
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c6fe:	2300      	movs	r3, #0
 800c700:	e011      	b.n	800c726 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c70c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c710:	e009      	b.n	800c726 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c71c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c720:	e001      	b.n	800c726 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c726:	4618      	mov	r0, r3
 800c728:	371c      	adds	r7, #28
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd90      	pop	{r4, r7, pc}
 800c72e:	bf00      	nop
 800c730:	20000018 	.word	0x20000018
 800c734:	10624dd3 	.word	0x10624dd3

0800c738 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c738:	b490      	push	{r4, r7}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c740:	4b21      	ldr	r3, [pc, #132]	; (800c7c8 <SDMMC_GetCmdResp7+0x90>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a21      	ldr	r2, [pc, #132]	; (800c7cc <SDMMC_GetCmdResp7+0x94>)
 800c746:	fba2 2303 	umull	r2, r3, r2, r3
 800c74a:	0a5b      	lsrs	r3, r3, #9
 800c74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c750:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c754:	4623      	mov	r3, r4
 800c756:	1e5c      	subs	r4, r3, #1
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d102      	bne.n	800c762 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c75c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c760:	e02c      	b.n	800c7bc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c766:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0f0      	beq.n	800c754 <SDMMC_GetCmdResp7+0x1c>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1eb      	bne.n	800c754 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c780:	f003 0304 	and.w	r3, r3, #4
 800c784:	2b00      	cmp	r3, #0
 800c786:	d004      	beq.n	800c792 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2204      	movs	r2, #4
 800c78c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c78e:	2304      	movs	r3, #4
 800c790:	e014      	b.n	800c7bc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c796:	f003 0301 	and.w	r3, r3, #1
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d004      	beq.n	800c7a8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	e009      	b.n	800c7bc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2240      	movs	r2, #64	; 0x40
 800c7b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c7ba:	2300      	movs	r3, #0
  
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bc90      	pop	{r4, r7}
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	20000018 	.word	0x20000018
 800c7cc:	10624dd3 	.word	0x10624dd3

0800c7d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c7d4:	4904      	ldr	r1, [pc, #16]	; (800c7e8 <MX_FATFS_Init+0x18>)
 800c7d6:	4805      	ldr	r0, [pc, #20]	; (800c7ec <MX_FATFS_Init+0x1c>)
 800c7d8:	f000 fa96 	bl	800cd08 <FATFS_LinkDriver>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	4b03      	ldr	r3, [pc, #12]	; (800c7f0 <MX_FATFS_Init+0x20>)
 800c7e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c7e4:	bf00      	nop
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	2000c948 	.word	0x2000c948
 800c7ec:	0802a404 	.word	0x0802a404
 800c7f0:	2000c944 	.word	0x2000c944

0800c7f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c7fe:	f000 f87b 	bl	800c8f8 <BSP_SD_IsDetected>
 800c802:	4603      	mov	r3, r0
 800c804:	2b01      	cmp	r3, #1
 800c806:	d001      	beq.n	800c80c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c808:	2302      	movs	r3, #2
 800c80a:	e012      	b.n	800c832 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c80c:	480b      	ldr	r0, [pc, #44]	; (800c83c <BSP_SD_Init+0x48>)
 800c80e:	f7fc fadd 	bl	8008dcc <HAL_SD_Init>
 800c812:	4603      	mov	r3, r0
 800c814:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c816:	79fb      	ldrb	r3, [r7, #7]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d109      	bne.n	800c830 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c81c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c820:	4806      	ldr	r0, [pc, #24]	; (800c83c <BSP_SD_Init+0x48>)
 800c822:	f7fc ff1f 	bl	8009664 <HAL_SD_ConfigWideBusOperation>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c830:	79fb      	ldrb	r3, [r7, #7]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	2000c3d0 	.word	0x2000c3d0

0800c840 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	68f9      	ldr	r1, [r7, #12]
 800c856:	4806      	ldr	r0, [pc, #24]	; (800c870 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c858:	f7fc fb50 	bl	8008efc <HAL_SD_ReadBlocks_DMA>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c866:	7dfb      	ldrb	r3, [r7, #23]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	2000c3d0 	.word	0x2000c3d0

0800c874 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	68f9      	ldr	r1, [r7, #12]
 800c88a:	4806      	ldr	r0, [pc, #24]	; (800c8a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c88c:	f7fc fc22 	bl	80090d4 <HAL_SD_WriteBlocks_DMA>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	2000c3d0 	.word	0x2000c3d0

0800c8a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c8ac:	4805      	ldr	r0, [pc, #20]	; (800c8c4 <BSP_SD_GetCardState+0x1c>)
 800c8ae:	f7fc ff55 	bl	800975c <HAL_SD_GetCardState>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b04      	cmp	r3, #4
 800c8b6:	bf14      	ite	ne
 800c8b8:	2301      	movne	r3, #1
 800c8ba:	2300      	moveq	r3, #0
 800c8bc:	b2db      	uxtb	r3, r3
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	2000c3d0 	.word	0x2000c3d0

0800c8c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c8d0:	6879      	ldr	r1, [r7, #4]
 800c8d2:	4803      	ldr	r0, [pc, #12]	; (800c8e0 <BSP_SD_GetCardInfo+0x18>)
 800c8d4:	f7fc fe9a 	bl	800960c <HAL_SD_GetCardInfo>
}
 800c8d8:	bf00      	nop
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	2000c3d0 	.word	0x2000c3d0

0800c8e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c8ec:	f000 f9b2 	bl	800cc54 <BSP_SD_ReadCpltCallback>
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c8fe:	2301      	movs	r3, #1
 800c900:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c902:	f000 f80b 	bl	800c91c <BSP_PlatformIsDetected>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d101      	bne.n	800c910 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c90c:	2300      	movs	r3, #0
 800c90e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	b2db      	uxtb	r3, r3
}
 800c914:	4618      	mov	r0, r3
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c922:	2301      	movs	r3, #1
 800c924:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c92a:	4806      	ldr	r0, [pc, #24]	; (800c944 <BSP_PlatformIsDetected+0x28>)
 800c92c:	f7f9 f8ea 	bl	8005b04 <HAL_GPIO_ReadPin>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c936:	2300      	movs	r3, #0
 800c938:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c93a:	79fb      	ldrb	r3, [r7, #7]
}  
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	40020800 	.word	0x40020800

0800c948 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c950:	f000 fa26 	bl	800cda0 <osKernelSysTick>
 800c954:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c956:	e006      	b.n	800c966 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c958:	f7ff ffa6 	bl	800c8a8 <BSP_SD_GetCardState>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d101      	bne.n	800c966 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c962:	2300      	movs	r3, #0
 800c964:	e009      	b.n	800c97a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c966:	f000 fa1b 	bl	800cda0 <osKernelSysTick>
 800c96a:	4602      	mov	r2, r0
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	429a      	cmp	r2, r3
 800c974:	d8f0      	bhi.n	800c958 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
	...

0800c984 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4603      	mov	r3, r0
 800c98c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c98e:	4b0b      	ldr	r3, [pc, #44]	; (800c9bc <SD_CheckStatus+0x38>)
 800c990:	2201      	movs	r2, #1
 800c992:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c994:	f7ff ff88 	bl	800c8a8 <BSP_SD_GetCardState>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d107      	bne.n	800c9ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c99e:	4b07      	ldr	r3, [pc, #28]	; (800c9bc <SD_CheckStatus+0x38>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f023 0301 	bic.w	r3, r3, #1
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	4b04      	ldr	r3, [pc, #16]	; (800c9bc <SD_CheckStatus+0x38>)
 800c9ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c9ae:	4b03      	ldr	r3, [pc, #12]	; (800c9bc <SD_CheckStatus+0x38>)
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	b2db      	uxtb	r3, r3
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20000021 	.word	0x20000021

0800c9c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c9c0:	b590      	push	{r4, r7, lr}
 800c9c2:	b087      	sub	sp, #28
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c9ca:	4b20      	ldr	r3, [pc, #128]	; (800ca4c <SD_initialize+0x8c>)
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c9d0:	f000 f9da 	bl	800cd88 <osKernelRunning>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d030      	beq.n	800ca3c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c9da:	f7ff ff0b 	bl	800c7f4 <BSP_SD_Init>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d107      	bne.n	800c9f4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c9e4:	79fb      	ldrb	r3, [r7, #7]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7ff ffcc 	bl	800c984 <SD_CheckStatus>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	4b16      	ldr	r3, [pc, #88]	; (800ca4c <SD_initialize+0x8c>)
 800c9f2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c9f4:	4b15      	ldr	r3, [pc, #84]	; (800ca4c <SD_initialize+0x8c>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d01e      	beq.n	800ca3c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c9fe:	4b14      	ldr	r3, [pc, #80]	; (800ca50 <SD_initialize+0x90>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10e      	bne.n	800ca24 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ca06:	4b13      	ldr	r3, [pc, #76]	; (800ca54 <SD_initialize+0x94>)
 800ca08:	f107 0408 	add.w	r4, r7, #8
 800ca0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ca12:	f107 0308 	add.w	r3, r7, #8
 800ca16:	2100      	movs	r1, #0
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 fa31 	bl	800ce80 <osMessageCreate>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	4a0b      	ldr	r2, [pc, #44]	; (800ca50 <SD_initialize+0x90>)
 800ca22:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ca24:	4b0a      	ldr	r3, [pc, #40]	; (800ca50 <SD_initialize+0x90>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d107      	bne.n	800ca3c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ca2c:	4b07      	ldr	r3, [pc, #28]	; (800ca4c <SD_initialize+0x8c>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	f043 0301 	orr.w	r3, r3, #1
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	4b04      	ldr	r3, [pc, #16]	; (800ca4c <SD_initialize+0x8c>)
 800ca3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ca3c:	4b03      	ldr	r3, [pc, #12]	; (800ca4c <SD_initialize+0x8c>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	b2db      	uxtb	r3, r3
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	371c      	adds	r7, #28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd90      	pop	{r4, r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	20000021 	.word	0x20000021
 800ca50:	200003f0 	.word	0x200003f0
 800ca54:	08029784 	.word	0x08029784

0800ca58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7ff ff8d 	bl	800c984 <SD_CheckStatus>
 800ca6a:	4603      	mov	r3, r0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08a      	sub	sp, #40	; 0x28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60b9      	str	r1, [r7, #8]
 800ca7c:	607a      	str	r2, [r7, #4]
 800ca7e:	603b      	str	r3, [r7, #0]
 800ca80:	4603      	mov	r3, r0
 800ca82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca8a:	f247 5030 	movw	r0, #30000	; 0x7530
 800ca8e:	f7ff ff5b 	bl	800c948 <SD_CheckStatusWithTimeout>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	da02      	bge.n	800ca9e <SD_read+0x2a>
  {
    return res;
 800ca98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca9c:	e032      	b.n	800cb04 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	68b8      	ldr	r0, [r7, #8]
 800caa4:	f7ff fecc 	bl	800c840 <BSP_SD_ReadBlocks_DMA>
 800caa8:	4603      	mov	r3, r0
 800caaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800caae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d124      	bne.n	800cb00 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cab6:	4b15      	ldr	r3, [pc, #84]	; (800cb0c <SD_read+0x98>)
 800cab8:	6819      	ldr	r1, [r3, #0]
 800caba:	f107 0314 	add.w	r3, r7, #20
 800cabe:	f247 5230 	movw	r2, #30000	; 0x7530
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 fa44 	bl	800cf50 <osMessageGet>

    if (event.status == osEventMessage)
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	2b10      	cmp	r3, #16
 800cacc:	d118      	bne.n	800cb00 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d115      	bne.n	800cb00 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800cad4:	f000 f964 	bl	800cda0 <osKernelSysTick>
 800cad8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cada:	e008      	b.n	800caee <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cadc:	f7ff fee4 	bl	800c8a8 <BSP_SD_GetCardState>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d103      	bne.n	800caee <SD_read+0x7a>
              {
                res = RES_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800caec:	e008      	b.n	800cb00 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800caee:	f000 f957 	bl	800cda0 <osKernelSysTick>
 800caf2:	4602      	mov	r2, r0
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	f247 522f 	movw	r2, #29999	; 0x752f
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d9ed      	bls.n	800cadc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800cb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3728      	adds	r7, #40	; 0x28
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	200003f0 	.word	0x200003f0

0800cb10 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08a      	sub	sp, #40	; 0x28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60b9      	str	r1, [r7, #8]
 800cb18:	607a      	str	r2, [r7, #4]
 800cb1a:	603b      	str	r3, [r7, #0]
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cb26:	f247 5030 	movw	r0, #30000	; 0x7530
 800cb2a:	f7ff ff0d 	bl	800c948 <SD_CheckStatusWithTimeout>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	da02      	bge.n	800cb3a <SD_write+0x2a>
  {
    return res;
 800cb34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb38:	e02e      	b.n	800cb98 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	68b8      	ldr	r0, [r7, #8]
 800cb40:	f7ff fe98 	bl	800c874 <BSP_SD_WriteBlocks_DMA>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d124      	bne.n	800cb94 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cb4a:	4b15      	ldr	r3, [pc, #84]	; (800cba0 <SD_write+0x90>)
 800cb4c:	6819      	ldr	r1, [r3, #0]
 800cb4e:	f107 0314 	add.w	r3, r7, #20
 800cb52:	f247 5230 	movw	r2, #30000	; 0x7530
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 f9fa 	bl	800cf50 <osMessageGet>

    if (event.status == osEventMessage)
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2b10      	cmp	r3, #16
 800cb60:	d118      	bne.n	800cb94 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d115      	bne.n	800cb94 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800cb68:	f000 f91a 	bl	800cda0 <osKernelSysTick>
 800cb6c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cb6e:	e008      	b.n	800cb82 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb70:	f7ff fe9a 	bl	800c8a8 <BSP_SD_GetCardState>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d103      	bne.n	800cb82 <SD_write+0x72>
          {
            res = RES_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cb80:	e008      	b.n	800cb94 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cb82:	f000 f90d 	bl	800cda0 <osKernelSysTick>
 800cb86:	4602      	mov	r2, r0
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	f247 522f 	movw	r2, #29999	; 0x752f
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d9ed      	bls.n	800cb70 <SD_write+0x60>
    }

  }
#endif

  return res;
 800cb94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3728      	adds	r7, #40	; 0x28
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	200003f0 	.word	0x200003f0

0800cba4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b08c      	sub	sp, #48	; 0x30
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	603a      	str	r2, [r7, #0]
 800cbae:	71fb      	strb	r3, [r7, #7]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbba:	4b25      	ldr	r3, [pc, #148]	; (800cc50 <SD_ioctl+0xac>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <SD_ioctl+0x28>
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e03c      	b.n	800cc46 <SD_ioctl+0xa2>

  switch (cmd)
 800cbcc:	79bb      	ldrb	r3, [r7, #6]
 800cbce:	2b03      	cmp	r3, #3
 800cbd0:	d834      	bhi.n	800cc3c <SD_ioctl+0x98>
 800cbd2:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <SD_ioctl+0x34>)
 800cbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd8:	0800cbe9 	.word	0x0800cbe9
 800cbdc:	0800cbf1 	.word	0x0800cbf1
 800cbe0:	0800cc09 	.word	0x0800cc09
 800cbe4:	0800cc23 	.word	0x0800cc23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbee:	e028      	b.n	800cc42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbf0:	f107 030c 	add.w	r3, r7, #12
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7ff fe67 	bl	800c8c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cbfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc06:	e01c      	b.n	800cc42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc08:	f107 030c 	add.w	r3, r7, #12
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff fe5b 	bl	800c8c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc20:	e00f      	b.n	800cc42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc22:	f107 030c 	add.w	r3, r7, #12
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7ff fe4e 	bl	800c8c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2e:	0a5a      	lsrs	r2, r3, #9
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc3a:	e002      	b.n	800cc42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc3c:	2304      	movs	r3, #4
 800cc3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cc42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3730      	adds	r7, #48	; 0x30
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20000021 	.word	0x20000021

0800cc54 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800cc58:	4b04      	ldr	r3, [pc, #16]	; (800cc6c <BSP_SD_ReadCpltCallback+0x18>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	2101      	movs	r1, #1
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 f935 	bl	800ced0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800cc66:	bf00      	nop
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	200003f0 	.word	0x200003f0

0800cc70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc86:	4b1f      	ldr	r3, [pc, #124]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800cc88:	7a5b      	ldrb	r3, [r3, #9]
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d131      	bne.n	800ccf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc90:	4b1c      	ldr	r3, [pc, #112]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800cc92:	7a5b      	ldrb	r3, [r3, #9]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	461a      	mov	r2, r3
 800cc98:	4b1a      	ldr	r3, [pc, #104]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc9e:	4b19      	ldr	r3, [pc, #100]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800cca0:	7a5b      	ldrb	r3, [r3, #9]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	4a17      	ldr	r2, [pc, #92]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ccae:	4b15      	ldr	r3, [pc, #84]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800ccb0:	7a5b      	ldrb	r3, [r3, #9]
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4b13      	ldr	r3, [pc, #76]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800ccb8:	4413      	add	r3, r2
 800ccba:	79fa      	ldrb	r2, [r7, #7]
 800ccbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ccbe:	4b11      	ldr	r3, [pc, #68]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800ccc0:	7a5b      	ldrb	r3, [r3, #9]
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	1c5a      	adds	r2, r3, #1
 800ccc6:	b2d1      	uxtb	r1, r2
 800ccc8:	4a0e      	ldr	r2, [pc, #56]	; (800cd04 <FATFS_LinkDriverEx+0x94>)
 800ccca:	7251      	strb	r1, [r2, #9]
 800cccc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ccce:	7dbb      	ldrb	r3, [r7, #22]
 800ccd0:	3330      	adds	r3, #48	; 0x30
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	223a      	movs	r2, #58	; 0x3a
 800ccde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	3302      	adds	r3, #2
 800cce4:	222f      	movs	r2, #47	; 0x2f
 800cce6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	3303      	adds	r3, #3
 800ccec:	2200      	movs	r2, #0
 800ccee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	200003f4 	.word	0x200003f4

0800cd08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cd12:	2200      	movs	r2, #0
 800cd14:	6839      	ldr	r1, [r7, #0]
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7ff ffaa 	bl	800cc70 <FATFS_LinkDriverEx>
 800cd1c:	4603      	mov	r3, r0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b085      	sub	sp, #20
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cd34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd38:	2b84      	cmp	r3, #132	; 0x84
 800cd3a:	d005      	beq.n	800cd48 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cd3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4413      	add	r3, r2
 800cd44:	3303      	adds	r3, #3
 800cd46:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cd48:	68fb      	ldr	r3, [r7, #12]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr

0800cd56 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cd56:	b480      	push	{r7}
 800cd58:	b083      	sub	sp, #12
 800cd5a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd5c:	f3ef 8305 	mrs	r3, IPSR
 800cd60:	607b      	str	r3, [r7, #4]
  return(result);
 800cd62:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	bf14      	ite	ne
 800cd68:	2301      	movne	r3, #1
 800cd6a:	2300      	moveq	r3, #0
 800cd6c:	b2db      	uxtb	r3, r3
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cd7e:	f001 fb1d 	bl	800e3bc <vTaskStartScheduler>
  
  return osOK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800cd8c:	f001 ff70 	bl	800ec70 <xTaskGetSchedulerState>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d101      	bne.n	800cd9a <osKernelRunning+0x12>
    return 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	e000      	b.n	800cd9c <osKernelRunning+0x14>
  else
    return 1;
 800cd9a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cda4:	f7ff ffd7 	bl	800cd56 <inHandlerMode>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cdae:	f001 fc25 	bl	800e5fc <xTaskGetTickCountFromISR>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	e002      	b.n	800cdbc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cdb6:	f001 fc11 	bl	800e5dc <xTaskGetTickCount>
 800cdba:	4603      	mov	r3, r0
  }
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdc2:	b089      	sub	sp, #36	; 0x24
 800cdc4:	af04      	add	r7, sp, #16
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d020      	beq.n	800ce14 <osThreadCreate+0x54>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d01c      	beq.n	800ce14 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685c      	ldr	r4, [r3, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681d      	ldr	r5, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691e      	ldr	r6, [r3, #16]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff ff9a 	bl	800cd26 <makeFreeRtosPriority>
 800cdf2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdfc:	9202      	str	r2, [sp, #8]
 800cdfe:	9301      	str	r3, [sp, #4]
 800ce00:	9100      	str	r1, [sp, #0]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	4632      	mov	r2, r6
 800ce06:	4629      	mov	r1, r5
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f001 f8fb 	bl	800e004 <xTaskCreateStatic>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	60fb      	str	r3, [r7, #12]
 800ce12:	e01c      	b.n	800ce4e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685c      	ldr	r4, [r3, #4]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce20:	b29e      	uxth	r6, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff ff7c 	bl	800cd26 <makeFreeRtosPriority>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	f107 030c 	add.w	r3, r7, #12
 800ce34:	9301      	str	r3, [sp, #4]
 800ce36:	9200      	str	r2, [sp, #0]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	4632      	mov	r2, r6
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f001 f943 	bl	800e0ca <xTaskCreate>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d001      	beq.n	800ce4e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	e000      	b.n	800ce50 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce58 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <osDelay+0x16>
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	e000      	b.n	800ce70 <osDelay+0x18>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	4618      	mov	r0, r3
 800ce72:	f001 fa6d 	bl	800e350 <vTaskDelay>
  
  return osOK;
 800ce76:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ce80:	b590      	push	{r4, r7, lr}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af02      	add	r7, sp, #8
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d011      	beq.n	800ceb6 <osMessageCreate+0x36>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00d      	beq.n	800ceb6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6818      	ldr	r0, [r3, #0]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6859      	ldr	r1, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	689a      	ldr	r2, [r3, #8]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	2400      	movs	r4, #0
 800ceac:	9400      	str	r4, [sp, #0]
 800ceae:	f000 f9e1 	bl	800d274 <xQueueGenericCreateStatic>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	e008      	b.n	800cec8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6818      	ldr	r0, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	4619      	mov	r1, r3
 800cec2:	f000 fa59 	bl	800d378 <xQueueGenericCreate>
 800cec6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}

0800ced0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800cedc:	2300      	movs	r3, #0
 800cede:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d101      	bne.n	800ceee <osMessagePut+0x1e>
    ticks = 1;
 800ceea:	2301      	movs	r3, #1
 800ceec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ceee:	f7ff ff32 	bl	800cd56 <inHandlerMode>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d018      	beq.n	800cf2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cef8:	f107 0210 	add.w	r2, r7, #16
 800cefc:	f107 0108 	add.w	r1, r7, #8
 800cf00:	2300      	movs	r3, #0
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f000 fba0 	bl	800d648 <xQueueGenericSendFromISR>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d001      	beq.n	800cf12 <osMessagePut+0x42>
      return osErrorOS;
 800cf0e:	23ff      	movs	r3, #255	; 0xff
 800cf10:	e018      	b.n	800cf44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d014      	beq.n	800cf42 <osMessagePut+0x72>
 800cf18:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <osMessagePut+0x7c>)
 800cf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	e00b      	b.n	800cf42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cf2a:	f107 0108 	add.w	r1, r7, #8
 800cf2e:	2300      	movs	r3, #0
 800cf30:	697a      	ldr	r2, [r7, #20]
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 fa82 	bl	800d43c <xQueueGenericSend>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d001      	beq.n	800cf42 <osMessagePut+0x72>
      return osErrorOS;
 800cf3e:	23ff      	movs	r3, #255	; 0xff
 800cf40:	e000      	b.n	800cf44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3718      	adds	r7, #24
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	e000ed04 	.word	0xe000ed04

0800cf50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cf50:	b590      	push	{r4, r7, lr}
 800cf52:	b08b      	sub	sp, #44	; 0x2c
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10a      	bne.n	800cf80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cf6a:	2380      	movs	r3, #128	; 0x80
 800cf6c:	617b      	str	r3, [r7, #20]
    return event;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	461c      	mov	r4, r3
 800cf72:	f107 0314 	add.w	r3, r7, #20
 800cf76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf7e:	e054      	b.n	800d02a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cf80:	2300      	movs	r3, #0
 800cf82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8e:	d103      	bne.n	800cf98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cf90:	f04f 33ff 	mov.w	r3, #4294967295
 800cf94:	627b      	str	r3, [r7, #36]	; 0x24
 800cf96:	e009      	b.n	800cfac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d006      	beq.n	800cfac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d101      	bne.n	800cfac <osMessageGet+0x5c>
      ticks = 1;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cfac:	f7ff fed3 	bl	800cd56 <inHandlerMode>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d01c      	beq.n	800cff0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cfb6:	f107 0220 	add.w	r2, r7, #32
 800cfba:	f107 0314 	add.w	r3, r7, #20
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	68b8      	ldr	r0, [r7, #8]
 800cfc4:	f000 fe70 	bl	800dca8 <xQueueReceiveFromISR>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d102      	bne.n	800cfd4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cfce:	2310      	movs	r3, #16
 800cfd0:	617b      	str	r3, [r7, #20]
 800cfd2:	e001      	b.n	800cfd8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d01d      	beq.n	800d01a <osMessageGet+0xca>
 800cfde:	4b15      	ldr	r3, [pc, #84]	; (800d034 <osMessageGet+0xe4>)
 800cfe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	e014      	b.n	800d01a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cff0:	f107 0314 	add.w	r3, r7, #20
 800cff4:	3304      	adds	r3, #4
 800cff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cff8:	4619      	mov	r1, r3
 800cffa:	68b8      	ldr	r0, [r7, #8]
 800cffc:	f000 fc5a 	bl	800d8b4 <xQueueReceive>
 800d000:	4603      	mov	r3, r0
 800d002:	2b01      	cmp	r3, #1
 800d004:	d102      	bne.n	800d00c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d006:	2310      	movs	r3, #16
 800d008:	617b      	str	r3, [r7, #20]
 800d00a:	e006      	b.n	800d01a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d101      	bne.n	800d016 <osMessageGet+0xc6>
 800d012:	2300      	movs	r3, #0
 800d014:	e000      	b.n	800d018 <osMessageGet+0xc8>
 800d016:	2340      	movs	r3, #64	; 0x40
 800d018:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	461c      	mov	r4, r3
 800d01e:	f107 0314 	add.w	r3, r7, #20
 800d022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	372c      	adds	r7, #44	; 0x2c
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd90      	pop	{r4, r7, pc}
 800d032:	bf00      	nop
 800d034:	e000ed04 	.word	0xe000ed04

0800d038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f103 0208 	add.w	r2, r3, #8
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f04f 32ff 	mov.w	r2, #4294967295
 800d050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f103 0208 	add.w	r2, r3, #8
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f103 0208 	add.w	r2, r3, #8
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d086:	bf00      	nop
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d092:	b480      	push	{r7}
 800d094:	b085      	sub	sp, #20
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	689a      	ldr	r2, [r3, #8]
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	601a      	str	r2, [r3, #0]
}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b085      	sub	sp, #20
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f0:	d103      	bne.n	800d0fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	60fb      	str	r3, [r7, #12]
 800d0f8:	e00c      	b.n	800d114 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	e002      	b.n	800d108 <vListInsert+0x2e>
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	429a      	cmp	r2, r3
 800d112:	d2f6      	bcs.n	800d102 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	601a      	str	r2, [r3, #0]
}
 800d140:	bf00      	nop
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	6892      	ldr	r2, [r2, #8]
 800d162:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	6852      	ldr	r2, [r2, #4]
 800d16c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	429a      	cmp	r2, r3
 800d176:	d103      	bne.n	800d180 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	1e5a      	subs	r2, r3, #1
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10c      	bne.n	800d1ce <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b8:	b672      	cpsid	i
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	b662      	cpsie	i
 800d1c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d1ce:	f002 f89d 	bl	800f30c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1da:	68f9      	ldr	r1, [r7, #12]
 800d1dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1de:	fb01 f303 	mul.w	r3, r1, r3
 800d1e2:	441a      	add	r2, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fe:	3b01      	subs	r3, #1
 800d200:	68f9      	ldr	r1, [r7, #12]
 800d202:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d204:	fb01 f303 	mul.w	r3, r1, r3
 800d208:	441a      	add	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	22ff      	movs	r2, #255	; 0xff
 800d212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	22ff      	movs	r2, #255	; 0xff
 800d21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d114      	bne.n	800d24e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d01a      	beq.n	800d262 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3310      	adds	r3, #16
 800d230:	4618      	mov	r0, r3
 800d232:	f001 fb57 	bl	800e8e4 <xTaskRemoveFromEventList>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d012      	beq.n	800d262 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d23c:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <xQueueGenericReset+0xd0>)
 800d23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	e009      	b.n	800d262 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3310      	adds	r3, #16
 800d252:	4618      	mov	r0, r3
 800d254:	f7ff fef0 	bl	800d038 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3324      	adds	r3, #36	; 0x24
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff feeb 	bl	800d038 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d262:	f002 f887 	bl	800f374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d266:	2301      	movs	r3, #1
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	e000ed04 	.word	0xe000ed04

0800d274 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d274:	b580      	push	{r7, lr}
 800d276:	b08e      	sub	sp, #56	; 0x38
 800d278:	af02      	add	r7, sp, #8
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d10c      	bne.n	800d2a2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28c:	b672      	cpsid	i
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	b662      	cpsie	i
 800d29c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d29e:	bf00      	nop
 800d2a0:	e7fe      	b.n	800d2a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10c      	bne.n	800d2c2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	b672      	cpsid	i
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	b662      	cpsie	i
 800d2bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <xQueueGenericCreateStatic+0x5a>
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <xQueueGenericCreateStatic+0x5e>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <xQueueGenericCreateStatic+0x60>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10c      	bne.n	800d2f2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	b672      	cpsid	i
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	b662      	cpsie	i
 800d2ec:	623b      	str	r3, [r7, #32]
}
 800d2ee:	bf00      	nop
 800d2f0:	e7fe      	b.n	800d2f0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d102      	bne.n	800d2fe <xQueueGenericCreateStatic+0x8a>
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <xQueueGenericCreateStatic+0x8e>
 800d2fe:	2301      	movs	r3, #1
 800d300:	e000      	b.n	800d304 <xQueueGenericCreateStatic+0x90>
 800d302:	2300      	movs	r3, #0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10c      	bne.n	800d322 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	b672      	cpsid	i
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	b662      	cpsie	i
 800d31c:	61fb      	str	r3, [r7, #28]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d322:	2348      	movs	r3, #72	; 0x48
 800d324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	2b48      	cmp	r3, #72	; 0x48
 800d32a:	d00c      	beq.n	800d346 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	b672      	cpsid	i
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	b662      	cpsie	i
 800d340:	61bb      	str	r3, [r7, #24]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d346:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00d      	beq.n	800d36e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	2201      	movs	r2, #1
 800d356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d35a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	4613      	mov	r3, r2
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	68b9      	ldr	r1, [r7, #8]
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f000 f847 	bl	800d3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d370:	4618      	mov	r0, r3
 800d372:	3730      	adds	r7, #48	; 0x30
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	; 0x28
 800d37c:	af02      	add	r7, sp, #8
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4613      	mov	r3, r2
 800d384:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10c      	bne.n	800d3a6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	b672      	cpsid	i
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	b662      	cpsie	i
 800d3a0:	613b      	str	r3, [r7, #16]
}
 800d3a2:	bf00      	nop
 800d3a4:	e7fe      	b.n	800d3a4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d102      	bne.n	800d3b2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	e004      	b.n	800d3bc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	fb02 f303 	mul.w	r3, r2, r3
 800d3ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	3348      	adds	r3, #72	; 0x48
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f002 f8cf 	bl	800f564 <pvPortMalloc>
 800d3c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d011      	beq.n	800d3f2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	3348      	adds	r3, #72	; 0x48
 800d3d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3e0:	79fa      	ldrb	r2, [r7, #7]
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	68b9      	ldr	r1, [r7, #8]
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f000 f805 	bl	800d3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3f2:	69bb      	ldr	r3, [r7, #24]
	}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3720      	adds	r7, #32
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d103      	bne.n	800d418 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	69ba      	ldr	r2, [r7, #24]
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	e002      	b.n	800d41e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d42a:	2101      	movs	r1, #1
 800d42c:	69b8      	ldr	r0, [r7, #24]
 800d42e:	f7ff feb7 	bl	800d1a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d432:	bf00      	nop
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08e      	sub	sp, #56	; 0x38
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d44a:	2300      	movs	r3, #0
 800d44c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10c      	bne.n	800d472 <xQueueGenericSend+0x36>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	b672      	cpsid	i
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	b662      	cpsie	i
 800d46c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d46e:	bf00      	nop
 800d470:	e7fe      	b.n	800d470 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d103      	bne.n	800d480 <xQueueGenericSend+0x44>
 800d478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d101      	bne.n	800d484 <xQueueGenericSend+0x48>
 800d480:	2301      	movs	r3, #1
 800d482:	e000      	b.n	800d486 <xQueueGenericSend+0x4a>
 800d484:	2300      	movs	r3, #0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10c      	bne.n	800d4a4 <xQueueGenericSend+0x68>
	__asm volatile
 800d48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48e:	b672      	cpsid	i
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	b662      	cpsie	i
 800d49e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4a0:	bf00      	nop
 800d4a2:	e7fe      	b.n	800d4a2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d103      	bne.n	800d4b2 <xQueueGenericSend+0x76>
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d101      	bne.n	800d4b6 <xQueueGenericSend+0x7a>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e000      	b.n	800d4b8 <xQueueGenericSend+0x7c>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10c      	bne.n	800d4d6 <xQueueGenericSend+0x9a>
	__asm volatile
 800d4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c0:	b672      	cpsid	i
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	b662      	cpsie	i
 800d4d0:	623b      	str	r3, [r7, #32]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4d6:	f001 fbcb 	bl	800ec70 <xTaskGetSchedulerState>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <xQueueGenericSend+0xaa>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <xQueueGenericSend+0xae>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e000      	b.n	800d4ec <xQueueGenericSend+0xb0>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10c      	bne.n	800d50a <xQueueGenericSend+0xce>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	b672      	cpsid	i
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	b662      	cpsie	i
 800d504:	61fb      	str	r3, [r7, #28]
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d50a:	f001 feff 	bl	800f30c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d516:	429a      	cmp	r2, r3
 800d518:	d302      	bcc.n	800d520 <xQueueGenericSend+0xe4>
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d129      	bne.n	800d574 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	68b9      	ldr	r1, [r7, #8]
 800d524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d526:	f000 fc5d 	bl	800dde4 <prvCopyDataToQueue>
 800d52a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d530:	2b00      	cmp	r3, #0
 800d532:	d010      	beq.n	800d556 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d536:	3324      	adds	r3, #36	; 0x24
 800d538:	4618      	mov	r0, r3
 800d53a:	f001 f9d3 	bl	800e8e4 <xTaskRemoveFromEventList>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d013      	beq.n	800d56c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d544:	4b3f      	ldr	r3, [pc, #252]	; (800d644 <xQueueGenericSend+0x208>)
 800d546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	e00a      	b.n	800d56c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d007      	beq.n	800d56c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d55c:	4b39      	ldr	r3, [pc, #228]	; (800d644 <xQueueGenericSend+0x208>)
 800d55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d562:	601a      	str	r2, [r3, #0]
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d56c:	f001 ff02 	bl	800f374 <vPortExitCritical>
				return pdPASS;
 800d570:	2301      	movs	r3, #1
 800d572:	e063      	b.n	800d63c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d103      	bne.n	800d582 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d57a:	f001 fefb 	bl	800f374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d57e:	2300      	movs	r3, #0
 800d580:	e05c      	b.n	800d63c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d584:	2b00      	cmp	r3, #0
 800d586:	d106      	bne.n	800d596 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d588:	f107 0314 	add.w	r3, r7, #20
 800d58c:	4618      	mov	r0, r3
 800d58e:	f001 fa0d 	bl	800e9ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d592:	2301      	movs	r3, #1
 800d594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d596:	f001 feed 	bl	800f374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d59a:	f000 ff73 	bl	800e484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d59e:	f001 feb5 	bl	800f30c <vPortEnterCritical>
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5a8:	b25b      	sxtb	r3, r3
 800d5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ae:	d103      	bne.n	800d5b8 <xQueueGenericSend+0x17c>
 800d5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5be:	b25b      	sxtb	r3, r3
 800d5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c4:	d103      	bne.n	800d5ce <xQueueGenericSend+0x192>
 800d5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5ce:	f001 fed1 	bl	800f374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5d2:	1d3a      	adds	r2, r7, #4
 800d5d4:	f107 0314 	add.w	r3, r7, #20
 800d5d8:	4611      	mov	r1, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f001 f9fc 	bl	800e9d8 <xTaskCheckForTimeOut>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d124      	bne.n	800d630 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d5e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5e8:	f000 fcf4 	bl	800dfd4 <prvIsQueueFull>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d018      	beq.n	800d624 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	3310      	adds	r3, #16
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f001 f94c 	bl	800e898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d602:	f000 fc7f 	bl	800df04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d606:	f000 ff4b 	bl	800e4a0 <xTaskResumeAll>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f47f af7c 	bne.w	800d50a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d612:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <xQueueGenericSend+0x208>)
 800d614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	e772      	b.n	800d50a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d626:	f000 fc6d 	bl	800df04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d62a:	f000 ff39 	bl	800e4a0 <xTaskResumeAll>
 800d62e:	e76c      	b.n	800d50a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d632:	f000 fc67 	bl	800df04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d636:	f000 ff33 	bl	800e4a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d63a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3738      	adds	r7, #56	; 0x38
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	e000ed04 	.word	0xe000ed04

0800d648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08e      	sub	sp, #56	; 0x38
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10c      	bne.n	800d67a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	b672      	cpsid	i
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	b662      	cpsie	i
 800d674:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d676:	bf00      	nop
 800d678:	e7fe      	b.n	800d678 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d103      	bne.n	800d688 <xQueueGenericSendFromISR+0x40>
 800d680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d684:	2b00      	cmp	r3, #0
 800d686:	d101      	bne.n	800d68c <xQueueGenericSendFromISR+0x44>
 800d688:	2301      	movs	r3, #1
 800d68a:	e000      	b.n	800d68e <xQueueGenericSendFromISR+0x46>
 800d68c:	2300      	movs	r3, #0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d10c      	bne.n	800d6ac <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d696:	b672      	cpsid	i
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	b662      	cpsie	i
 800d6a6:	623b      	str	r3, [r7, #32]
}
 800d6a8:	bf00      	nop
 800d6aa:	e7fe      	b.n	800d6aa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d103      	bne.n	800d6ba <xQueueGenericSendFromISR+0x72>
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d101      	bne.n	800d6be <xQueueGenericSendFromISR+0x76>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e000      	b.n	800d6c0 <xQueueGenericSendFromISR+0x78>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10c      	bne.n	800d6de <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c8:	b672      	cpsid	i
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	b662      	cpsie	i
 800d6d8:	61fb      	str	r3, [r7, #28]
}
 800d6da:	bf00      	nop
 800d6dc:	e7fe      	b.n	800d6dc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6de:	f001 fefd 	bl	800f4dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d6e2:	f3ef 8211 	mrs	r2, BASEPRI
 800d6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ea:	b672      	cpsid	i
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	b662      	cpsie	i
 800d6fa:	61ba      	str	r2, [r7, #24]
 800d6fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d6fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d302      	bcc.n	800d714 <xQueueGenericSendFromISR+0xcc>
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2b02      	cmp	r3, #2
 800d712:	d12c      	bne.n	800d76e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d724:	f000 fb5e 	bl	800dde4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d728:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d730:	d112      	bne.n	800d758 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d736:	2b00      	cmp	r3, #0
 800d738:	d016      	beq.n	800d768 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73c:	3324      	adds	r3, #36	; 0x24
 800d73e:	4618      	mov	r0, r3
 800d740:	f001 f8d0 	bl	800e8e4 <xTaskRemoveFromEventList>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00e      	beq.n	800d768 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00b      	beq.n	800d768 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	601a      	str	r2, [r3, #0]
 800d756:	e007      	b.n	800d768 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d75c:	3301      	adds	r3, #1
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	b25a      	sxtb	r2, r3
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d768:	2301      	movs	r3, #1
 800d76a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d76c:	e001      	b.n	800d772 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d76e:	2300      	movs	r3, #0
 800d770:	637b      	str	r3, [r7, #52]	; 0x34
 800d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d774:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d77c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d780:	4618      	mov	r0, r3
 800d782:	3738      	adds	r7, #56	; 0x38
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b08e      	sub	sp, #56	; 0x38
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10c      	bne.n	800d7b6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a0:	b672      	cpsid	i
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	b662      	cpsie	i
 800d7b0:	623b      	str	r3, [r7, #32]
}
 800d7b2:	bf00      	nop
 800d7b4:	e7fe      	b.n	800d7b4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00c      	beq.n	800d7d8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	b672      	cpsid	i
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	b662      	cpsie	i
 800d7d2:	61fb      	str	r3, [r7, #28]
}
 800d7d4:	bf00      	nop
 800d7d6:	e7fe      	b.n	800d7d6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d103      	bne.n	800d7e8 <xQueueGiveFromISR+0x60>
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <xQueueGiveFromISR+0x64>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e000      	b.n	800d7ee <xQueueGiveFromISR+0x66>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10c      	bne.n	800d80c <xQueueGiveFromISR+0x84>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f6:	b672      	cpsid	i
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	b662      	cpsie	i
 800d806:	61bb      	str	r3, [r7, #24]
}
 800d808:	bf00      	nop
 800d80a:	e7fe      	b.n	800d80a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d80c:	f001 fe66 	bl	800f4dc <vPortValidateInterruptPriority>
	__asm volatile
 800d810:	f3ef 8211 	mrs	r2, BASEPRI
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	b672      	cpsid	i
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	b662      	cpsie	i
 800d828:	617a      	str	r2, [r7, #20]
 800d82a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d82c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d82e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d834:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d22b      	bcs.n	800d898 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84c:	1c5a      	adds	r2, r3, #1
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d852:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d85a:	d112      	bne.n	800d882 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d860:	2b00      	cmp	r3, #0
 800d862:	d016      	beq.n	800d892 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d866:	3324      	adds	r3, #36	; 0x24
 800d868:	4618      	mov	r0, r3
 800d86a:	f001 f83b 	bl	800e8e4 <xTaskRemoveFromEventList>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00e      	beq.n	800d892 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00b      	beq.n	800d892 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2201      	movs	r2, #1
 800d87e:	601a      	str	r2, [r3, #0]
 800d880:	e007      	b.n	800d892 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d886:	3301      	adds	r3, #1
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	b25a      	sxtb	r2, r3
 800d88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d892:	2301      	movs	r3, #1
 800d894:	637b      	str	r3, [r7, #52]	; 0x34
 800d896:	e001      	b.n	800d89c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d898:	2300      	movs	r3, #0
 800d89a:	637b      	str	r3, [r7, #52]	; 0x34
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f383 8811 	msr	BASEPRI, r3
}
 800d8a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3738      	adds	r7, #56	; 0x38
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
	...

0800d8b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08c      	sub	sp, #48	; 0x30
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10c      	bne.n	800d8e8 <xQueueReceive+0x34>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	b672      	cpsid	i
 800d8d4:	f383 8811 	msr	BASEPRI, r3
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	b662      	cpsie	i
 800d8e2:	623b      	str	r3, [r7, #32]
}
 800d8e4:	bf00      	nop
 800d8e6:	e7fe      	b.n	800d8e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d103      	bne.n	800d8f6 <xQueueReceive+0x42>
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d101      	bne.n	800d8fa <xQueueReceive+0x46>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e000      	b.n	800d8fc <xQueueReceive+0x48>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10c      	bne.n	800d91a <xQueueReceive+0x66>
	__asm volatile
 800d900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d904:	b672      	cpsid	i
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	b662      	cpsie	i
 800d914:	61fb      	str	r3, [r7, #28]
}
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d91a:	f001 f9a9 	bl	800ec70 <xTaskGetSchedulerState>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <xQueueReceive+0x76>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d101      	bne.n	800d92e <xQueueReceive+0x7a>
 800d92a:	2301      	movs	r3, #1
 800d92c:	e000      	b.n	800d930 <xQueueReceive+0x7c>
 800d92e:	2300      	movs	r3, #0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10c      	bne.n	800d94e <xQueueReceive+0x9a>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d938:	b672      	cpsid	i
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	b662      	cpsie	i
 800d948:	61bb      	str	r3, [r7, #24]
}
 800d94a:	bf00      	nop
 800d94c:	e7fe      	b.n	800d94c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d94e:	f001 fcdd 	bl	800f30c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d956:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d01f      	beq.n	800d99e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d95e:	68b9      	ldr	r1, [r7, #8]
 800d960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d962:	f000 faa9 	bl	800deb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d968:	1e5a      	subs	r2, r3, #1
 800d96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00f      	beq.n	800d996 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	3310      	adds	r3, #16
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 ffb2 	bl	800e8e4 <xTaskRemoveFromEventList>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d007      	beq.n	800d996 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d986:	4b3d      	ldr	r3, [pc, #244]	; (800da7c <xQueueReceive+0x1c8>)
 800d988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d996:	f001 fced 	bl	800f374 <vPortExitCritical>
				return pdPASS;
 800d99a:	2301      	movs	r3, #1
 800d99c:	e069      	b.n	800da72 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d103      	bne.n	800d9ac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9a4:	f001 fce6 	bl	800f374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e062      	b.n	800da72 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d106      	bne.n	800d9c0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9b2:	f107 0310 	add.w	r3, r7, #16
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 fff8 	bl	800e9ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9c0:	f001 fcd8 	bl	800f374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9c4:	f000 fd5e 	bl	800e484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9c8:	f001 fca0 	bl	800f30c <vPortEnterCritical>
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9d2:	b25b      	sxtb	r3, r3
 800d9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d8:	d103      	bne.n	800d9e2 <xQueueReceive+0x12e>
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9e8:	b25b      	sxtb	r3, r3
 800d9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ee:	d103      	bne.n	800d9f8 <xQueueReceive+0x144>
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9f8:	f001 fcbc 	bl	800f374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9fc:	1d3a      	adds	r2, r7, #4
 800d9fe:	f107 0310 	add.w	r3, r7, #16
 800da02:	4611      	mov	r1, r2
 800da04:	4618      	mov	r0, r3
 800da06:	f000 ffe7 	bl	800e9d8 <xTaskCheckForTimeOut>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d123      	bne.n	800da58 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da12:	f000 fac9 	bl	800dfa8 <prvIsQueueEmpty>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d017      	beq.n	800da4c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	3324      	adds	r3, #36	; 0x24
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	4611      	mov	r1, r2
 800da24:	4618      	mov	r0, r3
 800da26:	f000 ff37 	bl	800e898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da2c:	f000 fa6a 	bl	800df04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da30:	f000 fd36 	bl	800e4a0 <xTaskResumeAll>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d189      	bne.n	800d94e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800da3a:	4b10      	ldr	r3, [pc, #64]	; (800da7c <xQueueReceive+0x1c8>)
 800da3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	e780      	b.n	800d94e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da4e:	f000 fa59 	bl	800df04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da52:	f000 fd25 	bl	800e4a0 <xTaskResumeAll>
 800da56:	e77a      	b.n	800d94e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da5a:	f000 fa53 	bl	800df04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da5e:	f000 fd1f 	bl	800e4a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da64:	f000 faa0 	bl	800dfa8 <prvIsQueueEmpty>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f43f af6f 	beq.w	800d94e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da72:	4618      	mov	r0, r3
 800da74:	3730      	adds	r7, #48	; 0x30
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	e000ed04 	.word	0xe000ed04

0800da80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b08e      	sub	sp, #56	; 0x38
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da8a:	2300      	movs	r3, #0
 800da8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da92:	2300      	movs	r3, #0
 800da94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10c      	bne.n	800dab6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa0:	b672      	cpsid	i
 800daa2:	f383 8811 	msr	BASEPRI, r3
 800daa6:	f3bf 8f6f 	isb	sy
 800daaa:	f3bf 8f4f 	dsb	sy
 800daae:	b662      	cpsie	i
 800dab0:	623b      	str	r3, [r7, #32]
}
 800dab2:	bf00      	nop
 800dab4:	e7fe      	b.n	800dab4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00c      	beq.n	800dad8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800dabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac2:	b672      	cpsid	i
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	b662      	cpsie	i
 800dad2:	61fb      	str	r3, [r7, #28]
}
 800dad4:	bf00      	nop
 800dad6:	e7fe      	b.n	800dad6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dad8:	f001 f8ca 	bl	800ec70 <xTaskGetSchedulerState>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d102      	bne.n	800dae8 <xQueueSemaphoreTake+0x68>
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d101      	bne.n	800daec <xQueueSemaphoreTake+0x6c>
 800dae8:	2301      	movs	r3, #1
 800daea:	e000      	b.n	800daee <xQueueSemaphoreTake+0x6e>
 800daec:	2300      	movs	r3, #0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10c      	bne.n	800db0c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	b672      	cpsid	i
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	b662      	cpsie	i
 800db06:	61bb      	str	r3, [r7, #24]
}
 800db08:	bf00      	nop
 800db0a:	e7fe      	b.n	800db0a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db0c:	f001 fbfe 	bl	800f30c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d024      	beq.n	800db66 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800db1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1e:	1e5a      	subs	r2, r3, #1
 800db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d104      	bne.n	800db36 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800db2c:	f001 fa66 	bl	800effc <pvTaskIncrementMutexHeldCount>
 800db30:	4602      	mov	r2, r0
 800db32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00f      	beq.n	800db5e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	3310      	adds	r3, #16
 800db42:	4618      	mov	r0, r3
 800db44:	f000 fece 	bl	800e8e4 <xTaskRemoveFromEventList>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d007      	beq.n	800db5e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db4e:	4b55      	ldr	r3, [pc, #340]	; (800dca4 <xQueueSemaphoreTake+0x224>)
 800db50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db54:	601a      	str	r2, [r3, #0]
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db5e:	f001 fc09 	bl	800f374 <vPortExitCritical>
				return pdPASS;
 800db62:	2301      	movs	r3, #1
 800db64:	e099      	b.n	800dc9a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d113      	bne.n	800db94 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800db6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00c      	beq.n	800db8c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	b672      	cpsid	i
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	b662      	cpsie	i
 800db86:	617b      	str	r3, [r7, #20]
}
 800db88:	bf00      	nop
 800db8a:	e7fe      	b.n	800db8a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db8c:	f001 fbf2 	bl	800f374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db90:	2300      	movs	r3, #0
 800db92:	e082      	b.n	800dc9a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db96:	2b00      	cmp	r3, #0
 800db98:	d106      	bne.n	800dba8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db9a:	f107 030c 	add.w	r3, r7, #12
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 ff04 	bl	800e9ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dba4:	2301      	movs	r3, #1
 800dba6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dba8:	f001 fbe4 	bl	800f374 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbac:	f000 fc6a 	bl	800e484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbb0:	f001 fbac 	bl	800f30c <vPortEnterCritical>
 800dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbba:	b25b      	sxtb	r3, r3
 800dbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc0:	d103      	bne.n	800dbca <xQueueSemaphoreTake+0x14a>
 800dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbd0:	b25b      	sxtb	r3, r3
 800dbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd6:	d103      	bne.n	800dbe0 <xQueueSemaphoreTake+0x160>
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbe0:	f001 fbc8 	bl	800f374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbe4:	463a      	mov	r2, r7
 800dbe6:	f107 030c 	add.w	r3, r7, #12
 800dbea:	4611      	mov	r1, r2
 800dbec:	4618      	mov	r0, r3
 800dbee:	f000 fef3 	bl	800e9d8 <xTaskCheckForTimeOut>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d132      	bne.n	800dc5e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbfa:	f000 f9d5 	bl	800dfa8 <prvIsQueueEmpty>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d026      	beq.n	800dc52 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d109      	bne.n	800dc20 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800dc0c:	f001 fb7e 	bl	800f30c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f001 f849 	bl	800ecac <xTaskPriorityInherit>
 800dc1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dc1c:	f001 fbaa 	bl	800f374 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	3324      	adds	r3, #36	; 0x24
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	4611      	mov	r1, r2
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 fe35 	bl	800e898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc30:	f000 f968 	bl	800df04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc34:	f000 fc34 	bl	800e4a0 <xTaskResumeAll>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f47f af66 	bne.w	800db0c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800dc40:	4b18      	ldr	r3, [pc, #96]	; (800dca4 <xQueueSemaphoreTake+0x224>)
 800dc42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc46:	601a      	str	r2, [r3, #0]
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	e75c      	b.n	800db0c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dc52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc54:	f000 f956 	bl	800df04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc58:	f000 fc22 	bl	800e4a0 <xTaskResumeAll>
 800dc5c:	e756      	b.n	800db0c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dc5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc60:	f000 f950 	bl	800df04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc64:	f000 fc1c 	bl	800e4a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc6a:	f000 f99d 	bl	800dfa8 <prvIsQueueEmpty>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f43f af4b 	beq.w	800db0c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00d      	beq.n	800dc98 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800dc7c:	f001 fb46 	bl	800f30c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc82:	f000 f897 	bl	800ddb4 <prvGetDisinheritPriorityAfterTimeout>
 800dc86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f001 f916 	bl	800eec0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc94:	f001 fb6e 	bl	800f374 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3738      	adds	r7, #56	; 0x38
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	e000ed04 	.word	0xe000ed04

0800dca8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b08e      	sub	sp, #56	; 0x38
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10c      	bne.n	800dcd8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	b672      	cpsid	i
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	b662      	cpsie	i
 800dcd2:	623b      	str	r3, [r7, #32]
}
 800dcd4:	bf00      	nop
 800dcd6:	e7fe      	b.n	800dcd6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d103      	bne.n	800dce6 <xQueueReceiveFromISR+0x3e>
 800dcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d101      	bne.n	800dcea <xQueueReceiveFromISR+0x42>
 800dce6:	2301      	movs	r3, #1
 800dce8:	e000      	b.n	800dcec <xQueueReceiveFromISR+0x44>
 800dcea:	2300      	movs	r3, #0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d10c      	bne.n	800dd0a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	b672      	cpsid	i
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	b662      	cpsie	i
 800dd04:	61fb      	str	r3, [r7, #28]
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd0a:	f001 fbe7 	bl	800f4dc <vPortValidateInterruptPriority>
	__asm volatile
 800dd0e:	f3ef 8211 	mrs	r2, BASEPRI
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	b672      	cpsid	i
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	b662      	cpsie	i
 800dd26:	61ba      	str	r2, [r7, #24]
 800dd28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d02f      	beq.n	800dd9a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd44:	68b9      	ldr	r1, [r7, #8]
 800dd46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd48:	f000 f8b6 	bl	800deb8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	1e5a      	subs	r2, r3, #1
 800dd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5c:	d112      	bne.n	800dd84 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d016      	beq.n	800dd94 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd68:	3310      	adds	r3, #16
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 fdba 	bl	800e8e4 <xTaskRemoveFromEventList>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00e      	beq.n	800dd94 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00b      	beq.n	800dd94 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	601a      	str	r2, [r3, #0]
 800dd82:	e007      	b.n	800dd94 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd88:	3301      	adds	r3, #1
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	b25a      	sxtb	r2, r3
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dd94:	2301      	movs	r3, #1
 800dd96:	637b      	str	r3, [r7, #52]	; 0x34
 800dd98:	e001      	b.n	800dd9e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	637b      	str	r3, [r7, #52]	; 0x34
 800dd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	f383 8811 	msr	BASEPRI, r3
}
 800dda8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3738      	adds	r7, #56	; 0x38
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d006      	beq.n	800ddd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f1c3 0307 	rsb	r3, r3, #7
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	e001      	b.n	800ddd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
	}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d10d      	bne.n	800de1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d14d      	bne.n	800dea6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 ffcc 	bl	800edac <xTaskPriorityDisinherit>
 800de14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2200      	movs	r2, #0
 800de1a:	609a      	str	r2, [r3, #8]
 800de1c:	e043      	b.n	800dea6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d119      	bne.n	800de58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6858      	ldr	r0, [r3, #4]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2c:	461a      	mov	r2, r3
 800de2e:	68b9      	ldr	r1, [r7, #8]
 800de30:	f01a fc66 	bl	8028700 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	685a      	ldr	r2, [r3, #4]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3c:	441a      	add	r2, r3
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	685a      	ldr	r2, [r3, #4]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d32b      	bcc.n	800dea6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	605a      	str	r2, [r3, #4]
 800de56:	e026      	b.n	800dea6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	68d8      	ldr	r0, [r3, #12]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de60:	461a      	mov	r2, r3
 800de62:	68b9      	ldr	r1, [r7, #8]
 800de64:	f01a fc4c 	bl	8028700 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	68da      	ldr	r2, [r3, #12]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de70:	425b      	negs	r3, r3
 800de72:	441a      	add	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68da      	ldr	r2, [r3, #12]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	429a      	cmp	r2, r3
 800de82:	d207      	bcs.n	800de94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	689a      	ldr	r2, [r3, #8]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de8c:	425b      	negs	r3, r3
 800de8e:	441a      	add	r2, r3
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b02      	cmp	r3, #2
 800de98:	d105      	bne.n	800dea6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	1c5a      	adds	r2, r3, #1
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800deae:	697b      	ldr	r3, [r7, #20]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d018      	beq.n	800defc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	68da      	ldr	r2, [r3, #12]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ded2:	441a      	add	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68da      	ldr	r2, [r3, #12]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d303      	bcc.n	800deec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	68d9      	ldr	r1, [r3, #12]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800def4:	461a      	mov	r2, r3
 800def6:	6838      	ldr	r0, [r7, #0]
 800def8:	f01a fc02 	bl	8028700 <memcpy>
	}
}
 800defc:	bf00      	nop
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df0c:	f001 f9fe 	bl	800f30c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df18:	e011      	b.n	800df3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d012      	beq.n	800df48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3324      	adds	r3, #36	; 0x24
 800df26:	4618      	mov	r0, r3
 800df28:	f000 fcdc 	bl	800e8e4 <xTaskRemoveFromEventList>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df32:	f000 fdb7 	bl	800eaa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df36:	7bfb      	ldrb	r3, [r7, #15]
 800df38:	3b01      	subs	r3, #1
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df42:	2b00      	cmp	r3, #0
 800df44:	dce9      	bgt.n	800df1a <prvUnlockQueue+0x16>
 800df46:	e000      	b.n	800df4a <prvUnlockQueue+0x46>
					break;
 800df48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	22ff      	movs	r2, #255	; 0xff
 800df4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800df52:	f001 fa0f 	bl	800f374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df56:	f001 f9d9 	bl	800f30c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df62:	e011      	b.n	800df88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d012      	beq.n	800df92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3310      	adds	r3, #16
 800df70:	4618      	mov	r0, r3
 800df72:	f000 fcb7 	bl	800e8e4 <xTaskRemoveFromEventList>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df7c:	f000 fd92 	bl	800eaa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df80:	7bbb      	ldrb	r3, [r7, #14]
 800df82:	3b01      	subs	r3, #1
 800df84:	b2db      	uxtb	r3, r3
 800df86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	dce9      	bgt.n	800df64 <prvUnlockQueue+0x60>
 800df90:	e000      	b.n	800df94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	22ff      	movs	r2, #255	; 0xff
 800df98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df9c:	f001 f9ea 	bl	800f374 <vPortExitCritical>
}
 800dfa0:	bf00      	nop
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfb0:	f001 f9ac 	bl	800f30c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d102      	bne.n	800dfc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	60fb      	str	r3, [r7, #12]
 800dfc0:	e001      	b.n	800dfc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfc6:	f001 f9d5 	bl	800f374 <vPortExitCritical>

	return xReturn;
 800dfca:	68fb      	ldr	r3, [r7, #12]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfdc:	f001 f996 	bl	800f30c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d102      	bne.n	800dff2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dfec:	2301      	movs	r3, #1
 800dfee:	60fb      	str	r3, [r7, #12]
 800dff0:	e001      	b.n	800dff6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dff2:	2300      	movs	r3, #0
 800dff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dff6:	f001 f9bd 	bl	800f374 <vPortExitCritical>

	return xReturn;
 800dffa:	68fb      	ldr	r3, [r7, #12]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08e      	sub	sp, #56	; 0x38
 800e008:	af04      	add	r7, sp, #16
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
 800e010:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10c      	bne.n	800e032 <xTaskCreateStatic+0x2e>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01c:	b672      	cpsid	i
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	b662      	cpsie	i
 800e02c:	623b      	str	r3, [r7, #32]
}
 800e02e:	bf00      	nop
 800e030:	e7fe      	b.n	800e030 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800e032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10c      	bne.n	800e052 <xTaskCreateStatic+0x4e>
	__asm volatile
 800e038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03c:	b672      	cpsid	i
 800e03e:	f383 8811 	msr	BASEPRI, r3
 800e042:	f3bf 8f6f 	isb	sy
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	b662      	cpsie	i
 800e04c:	61fb      	str	r3, [r7, #28]
}
 800e04e:	bf00      	nop
 800e050:	e7fe      	b.n	800e050 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e052:	2358      	movs	r3, #88	; 0x58
 800e054:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2b58      	cmp	r3, #88	; 0x58
 800e05a:	d00c      	beq.n	800e076 <xTaskCreateStatic+0x72>
	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e060:	b672      	cpsid	i
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	b662      	cpsie	i
 800e070:	61bb      	str	r3, [r7, #24]
}
 800e072:	bf00      	nop
 800e074:	e7fe      	b.n	800e074 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e076:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d01e      	beq.n	800e0bc <xTaskCreateStatic+0xb8>
 800e07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e080:	2b00      	cmp	r3, #0
 800e082:	d01b      	beq.n	800e0bc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e086:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e08c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	2202      	movs	r2, #2
 800e092:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e096:	2300      	movs	r3, #0
 800e098:	9303      	str	r3, [sp, #12]
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	9302      	str	r3, [sp, #8]
 800e09e:	f107 0314 	add.w	r3, r7, #20
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	68b9      	ldr	r1, [r7, #8]
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f000 f850 	bl	800e154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0b6:	f000 f8e1 	bl	800e27c <prvAddNewTaskToReadyList>
 800e0ba:	e001      	b.n	800e0c0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e0c0:	697b      	ldr	r3, [r7, #20]
	}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3728      	adds	r7, #40	; 0x28
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b08c      	sub	sp, #48	; 0x30
 800e0ce:	af04      	add	r7, sp, #16
 800e0d0:	60f8      	str	r0, [r7, #12]
 800e0d2:	60b9      	str	r1, [r7, #8]
 800e0d4:	603b      	str	r3, [r7, #0]
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e0da:	88fb      	ldrh	r3, [r7, #6]
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f001 fa40 	bl	800f564 <pvPortMalloc>
 800e0e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00e      	beq.n	800e10a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e0ec:	2058      	movs	r0, #88	; 0x58
 800e0ee:	f001 fa39 	bl	800f564 <pvPortMalloc>
 800e0f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d003      	beq.n	800e102 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30
 800e100:	e005      	b.n	800e10e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e102:	6978      	ldr	r0, [r7, #20]
 800e104:	f001 fafe 	bl	800f704 <vPortFree>
 800e108:	e001      	b.n	800e10e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e10a:	2300      	movs	r3, #0
 800e10c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d017      	beq.n	800e144 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	2200      	movs	r2, #0
 800e118:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e11c:	88fa      	ldrh	r2, [r7, #6]
 800e11e:	2300      	movs	r3, #0
 800e120:	9303      	str	r3, [sp, #12]
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	9302      	str	r3, [sp, #8]
 800e126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	68b9      	ldr	r1, [r7, #8]
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f000 f80e 	bl	800e154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e138:	69f8      	ldr	r0, [r7, #28]
 800e13a:	f000 f89f 	bl	800e27c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e13e:	2301      	movs	r3, #1
 800e140:	61bb      	str	r3, [r7, #24]
 800e142:	e002      	b.n	800e14a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e144:	f04f 33ff 	mov.w	r3, #4294967295
 800e148:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e14a:	69bb      	ldr	r3, [r7, #24]
	}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3720      	adds	r7, #32
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b088      	sub	sp, #32
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
 800e160:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e164:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	461a      	mov	r2, r3
 800e16c:	21a5      	movs	r1, #165	; 0xa5
 800e16e:	f01a fad5 	bl	802871c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e176:	6879      	ldr	r1, [r7, #4]
 800e178:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e17c:	440b      	add	r3, r1
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	4413      	add	r3, r2
 800e182:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	f023 0307 	bic.w	r3, r3, #7
 800e18a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	f003 0307 	and.w	r3, r3, #7
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00c      	beq.n	800e1b0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19a:	b672      	cpsid	i
 800e19c:	f383 8811 	msr	BASEPRI, r3
 800e1a0:	f3bf 8f6f 	isb	sy
 800e1a4:	f3bf 8f4f 	dsb	sy
 800e1a8:	b662      	cpsie	i
 800e1aa:	617b      	str	r3, [r7, #20]
}
 800e1ac:	bf00      	nop
 800e1ae:	e7fe      	b.n	800e1ae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d01f      	beq.n	800e1f6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	61fb      	str	r3, [r7, #28]
 800e1ba:	e012      	b.n	800e1e2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1bc:	68ba      	ldr	r2, [r7, #8]
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	7819      	ldrb	r1, [r3, #0]
 800e1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	3334      	adds	r3, #52	; 0x34
 800e1cc:	460a      	mov	r2, r1
 800e1ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d006      	beq.n	800e1ea <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	61fb      	str	r3, [r7, #28]
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	2b0f      	cmp	r3, #15
 800e1e6:	d9e9      	bls.n	800e1bc <prvInitialiseNewTask+0x68>
 800e1e8:	e000      	b.n	800e1ec <prvInitialiseNewTask+0x98>
			{
				break;
 800e1ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e1f4:	e003      	b.n	800e1fe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	2b06      	cmp	r3, #6
 800e202:	d901      	bls.n	800e208 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e204:	2306      	movs	r3, #6
 800e206:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e20c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e212:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	2200      	movs	r2, #0
 800e218:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21c:	3304      	adds	r3, #4
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe ff2a 	bl	800d078 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	3318      	adds	r3, #24
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fe ff25 	bl	800d078 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e232:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e236:	f1c3 0207 	rsb	r2, r3, #7
 800e23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e242:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	2200      	movs	r2, #0
 800e248:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	2200      	movs	r2, #0
 800e24e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e252:	2200      	movs	r2, #0
 800e254:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e258:	683a      	ldr	r2, [r7, #0]
 800e25a:	68f9      	ldr	r1, [r7, #12]
 800e25c:	69b8      	ldr	r0, [r7, #24]
 800e25e:	f000 ff47 	bl	800f0f0 <pxPortInitialiseStack>
 800e262:	4602      	mov	r2, r0
 800e264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e266:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e272:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e274:	bf00      	nop
 800e276:	3720      	adds	r7, #32
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e284:	f001 f842 	bl	800f30c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e288:	4b2a      	ldr	r3, [pc, #168]	; (800e334 <prvAddNewTaskToReadyList+0xb8>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3301      	adds	r3, #1
 800e28e:	4a29      	ldr	r2, [pc, #164]	; (800e334 <prvAddNewTaskToReadyList+0xb8>)
 800e290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e292:	4b29      	ldr	r3, [pc, #164]	; (800e338 <prvAddNewTaskToReadyList+0xbc>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d109      	bne.n	800e2ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e29a:	4a27      	ldr	r2, [pc, #156]	; (800e338 <prvAddNewTaskToReadyList+0xbc>)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2a0:	4b24      	ldr	r3, [pc, #144]	; (800e334 <prvAddNewTaskToReadyList+0xb8>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d110      	bne.n	800e2ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2a8:	f000 fc22 	bl	800eaf0 <prvInitialiseTaskLists>
 800e2ac:	e00d      	b.n	800e2ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2ae:	4b23      	ldr	r3, [pc, #140]	; (800e33c <prvAddNewTaskToReadyList+0xc0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d109      	bne.n	800e2ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2b6:	4b20      	ldr	r3, [pc, #128]	; (800e338 <prvAddNewTaskToReadyList+0xbc>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d802      	bhi.n	800e2ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e2c4:	4a1c      	ldr	r2, [pc, #112]	; (800e338 <prvAddNewTaskToReadyList+0xbc>)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e2ca:	4b1d      	ldr	r3, [pc, #116]	; (800e340 <prvAddNewTaskToReadyList+0xc4>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	4a1b      	ldr	r2, [pc, #108]	; (800e340 <prvAddNewTaskToReadyList+0xc4>)
 800e2d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d8:	2201      	movs	r2, #1
 800e2da:	409a      	lsls	r2, r3
 800e2dc:	4b19      	ldr	r3, [pc, #100]	; (800e344 <prvAddNewTaskToReadyList+0xc8>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	4a18      	ldr	r2, [pc, #96]	; (800e344 <prvAddNewTaskToReadyList+0xc8>)
 800e2e4:	6013      	str	r3, [r2, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	4413      	add	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4a15      	ldr	r2, [pc, #84]	; (800e348 <prvAddNewTaskToReadyList+0xcc>)
 800e2f4:	441a      	add	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	f7fe fec8 	bl	800d092 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e302:	f001 f837 	bl	800f374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e306:	4b0d      	ldr	r3, [pc, #52]	; (800e33c <prvAddNewTaskToReadyList+0xc0>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00e      	beq.n	800e32c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e30e:	4b0a      	ldr	r3, [pc, #40]	; (800e338 <prvAddNewTaskToReadyList+0xbc>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	429a      	cmp	r2, r3
 800e31a:	d207      	bcs.n	800e32c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e31c:	4b0b      	ldr	r3, [pc, #44]	; (800e34c <prvAddNewTaskToReadyList+0xd0>)
 800e31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e32c:	bf00      	nop
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	20000500 	.word	0x20000500
 800e338:	20000400 	.word	0x20000400
 800e33c:	2000050c 	.word	0x2000050c
 800e340:	2000051c 	.word	0x2000051c
 800e344:	20000508 	.word	0x20000508
 800e348:	20000404 	.word	0x20000404
 800e34c:	e000ed04 	.word	0xe000ed04

0800e350 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e358:	2300      	movs	r3, #0
 800e35a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d019      	beq.n	800e396 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e362:	4b14      	ldr	r3, [pc, #80]	; (800e3b4 <vTaskDelay+0x64>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00c      	beq.n	800e384 <vTaskDelay+0x34>
	__asm volatile
 800e36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36e:	b672      	cpsid	i
 800e370:	f383 8811 	msr	BASEPRI, r3
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	f3bf 8f4f 	dsb	sy
 800e37c:	b662      	cpsie	i
 800e37e:	60bb      	str	r3, [r7, #8]
}
 800e380:	bf00      	nop
 800e382:	e7fe      	b.n	800e382 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e384:	f000 f87e 	bl	800e484 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e388:	2100      	movs	r1, #0
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fe4a 	bl	800f024 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e390:	f000 f886 	bl	800e4a0 <xTaskResumeAll>
 800e394:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d107      	bne.n	800e3ac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e39c:	4b06      	ldr	r3, [pc, #24]	; (800e3b8 <vTaskDelay+0x68>)
 800e39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3ac:	bf00      	nop
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	20000528 	.word	0x20000528
 800e3b8:	e000ed04 	.word	0xe000ed04

0800e3bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08a      	sub	sp, #40	; 0x28
 800e3c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3ca:	463a      	mov	r2, r7
 800e3cc:	1d39      	adds	r1, r7, #4
 800e3ce:	f107 0308 	add.w	r3, r7, #8
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7f2 fb96 	bl	8000b04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	68ba      	ldr	r2, [r7, #8]
 800e3de:	9202      	str	r2, [sp, #8]
 800e3e0:	9301      	str	r3, [sp, #4]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	460a      	mov	r2, r1
 800e3ea:	4920      	ldr	r1, [pc, #128]	; (800e46c <vTaskStartScheduler+0xb0>)
 800e3ec:	4820      	ldr	r0, [pc, #128]	; (800e470 <vTaskStartScheduler+0xb4>)
 800e3ee:	f7ff fe09 	bl	800e004 <xTaskCreateStatic>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	4a1f      	ldr	r2, [pc, #124]	; (800e474 <vTaskStartScheduler+0xb8>)
 800e3f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3f8:	4b1e      	ldr	r3, [pc, #120]	; (800e474 <vTaskStartScheduler+0xb8>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d002      	beq.n	800e406 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e400:	2301      	movs	r3, #1
 800e402:	617b      	str	r3, [r7, #20]
 800e404:	e001      	b.n	800e40a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e406:	2300      	movs	r3, #0
 800e408:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d118      	bne.n	800e442 <vTaskStartScheduler+0x86>
	__asm volatile
 800e410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e414:	b672      	cpsid	i
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	b662      	cpsie	i
 800e424:	613b      	str	r3, [r7, #16]
}
 800e426:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e428:	4b13      	ldr	r3, [pc, #76]	; (800e478 <vTaskStartScheduler+0xbc>)
 800e42a:	f04f 32ff 	mov.w	r2, #4294967295
 800e42e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e430:	4b12      	ldr	r3, [pc, #72]	; (800e47c <vTaskStartScheduler+0xc0>)
 800e432:	2201      	movs	r2, #1
 800e434:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e436:	4b12      	ldr	r3, [pc, #72]	; (800e480 <vTaskStartScheduler+0xc4>)
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e43c:	f000 fee8 	bl	800f210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e440:	e010      	b.n	800e464 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e448:	d10c      	bne.n	800e464 <vTaskStartScheduler+0xa8>
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	b672      	cpsid	i
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	b662      	cpsie	i
 800e45e:	60fb      	str	r3, [r7, #12]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <vTaskStartScheduler+0xa6>
}
 800e464:	bf00      	nop
 800e466:	3718      	adds	r7, #24
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	08029794 	.word	0x08029794
 800e470:	0800eabd 	.word	0x0800eabd
 800e474:	20000524 	.word	0x20000524
 800e478:	20000520 	.word	0x20000520
 800e47c:	2000050c 	.word	0x2000050c
 800e480:	20000504 	.word	0x20000504

0800e484 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e484:	b480      	push	{r7}
 800e486:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e488:	4b04      	ldr	r3, [pc, #16]	; (800e49c <vTaskSuspendAll+0x18>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3301      	adds	r3, #1
 800e48e:	4a03      	ldr	r2, [pc, #12]	; (800e49c <vTaskSuspendAll+0x18>)
 800e490:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e492:	bf00      	nop
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr
 800e49c:	20000528 	.word	0x20000528

0800e4a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e4ae:	4b42      	ldr	r3, [pc, #264]	; (800e5b8 <xTaskResumeAll+0x118>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10c      	bne.n	800e4d0 <xTaskResumeAll+0x30>
	__asm volatile
 800e4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ba:	b672      	cpsid	i
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	b662      	cpsie	i
 800e4ca:	603b      	str	r3, [r7, #0]
}
 800e4cc:	bf00      	nop
 800e4ce:	e7fe      	b.n	800e4ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4d0:	f000 ff1c 	bl	800f30c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e4d4:	4b38      	ldr	r3, [pc, #224]	; (800e5b8 <xTaskResumeAll+0x118>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	4a37      	ldr	r2, [pc, #220]	; (800e5b8 <xTaskResumeAll+0x118>)
 800e4dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4de:	4b36      	ldr	r3, [pc, #216]	; (800e5b8 <xTaskResumeAll+0x118>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d161      	bne.n	800e5aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e4e6:	4b35      	ldr	r3, [pc, #212]	; (800e5bc <xTaskResumeAll+0x11c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d05d      	beq.n	800e5aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4ee:	e02e      	b.n	800e54e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4f0:	4b33      	ldr	r3, [pc, #204]	; (800e5c0 <xTaskResumeAll+0x120>)
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	3318      	adds	r3, #24
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fe25 	bl	800d14c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3304      	adds	r3, #4
 800e506:	4618      	mov	r0, r3
 800e508:	f7fe fe20 	bl	800d14c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e510:	2201      	movs	r2, #1
 800e512:	409a      	lsls	r2, r3
 800e514:	4b2b      	ldr	r3, [pc, #172]	; (800e5c4 <xTaskResumeAll+0x124>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4313      	orrs	r3, r2
 800e51a:	4a2a      	ldr	r2, [pc, #168]	; (800e5c4 <xTaskResumeAll+0x124>)
 800e51c:	6013      	str	r3, [r2, #0]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e522:	4613      	mov	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4413      	add	r3, r2
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	4a27      	ldr	r2, [pc, #156]	; (800e5c8 <xTaskResumeAll+0x128>)
 800e52c:	441a      	add	r2, r3
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	3304      	adds	r3, #4
 800e532:	4619      	mov	r1, r3
 800e534:	4610      	mov	r0, r2
 800e536:	f7fe fdac 	bl	800d092 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53e:	4b23      	ldr	r3, [pc, #140]	; (800e5cc <xTaskResumeAll+0x12c>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e544:	429a      	cmp	r2, r3
 800e546:	d302      	bcc.n	800e54e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e548:	4b21      	ldr	r3, [pc, #132]	; (800e5d0 <xTaskResumeAll+0x130>)
 800e54a:	2201      	movs	r2, #1
 800e54c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e54e:	4b1c      	ldr	r3, [pc, #112]	; (800e5c0 <xTaskResumeAll+0x120>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1cc      	bne.n	800e4f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d001      	beq.n	800e560 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e55c:	f000 fb68 	bl	800ec30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e560:	4b1c      	ldr	r3, [pc, #112]	; (800e5d4 <xTaskResumeAll+0x134>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d010      	beq.n	800e58e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e56c:	f000 f858 	bl	800e620 <xTaskIncrementTick>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d002      	beq.n	800e57c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e576:	4b16      	ldr	r3, [pc, #88]	; (800e5d0 <xTaskResumeAll+0x130>)
 800e578:	2201      	movs	r2, #1
 800e57a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	3b01      	subs	r3, #1
 800e580:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1f1      	bne.n	800e56c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e588:	4b12      	ldr	r3, [pc, #72]	; (800e5d4 <xTaskResumeAll+0x134>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e58e:	4b10      	ldr	r3, [pc, #64]	; (800e5d0 <xTaskResumeAll+0x130>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d009      	beq.n	800e5aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e596:	2301      	movs	r3, #1
 800e598:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e59a:	4b0f      	ldr	r3, [pc, #60]	; (800e5d8 <xTaskResumeAll+0x138>)
 800e59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5a0:	601a      	str	r2, [r3, #0]
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5aa:	f000 fee3 	bl	800f374 <vPortExitCritical>

	return xAlreadyYielded;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	20000528 	.word	0x20000528
 800e5bc:	20000500 	.word	0x20000500
 800e5c0:	200004c0 	.word	0x200004c0
 800e5c4:	20000508 	.word	0x20000508
 800e5c8:	20000404 	.word	0x20000404
 800e5cc:	20000400 	.word	0x20000400
 800e5d0:	20000514 	.word	0x20000514
 800e5d4:	20000510 	.word	0x20000510
 800e5d8:	e000ed04 	.word	0xe000ed04

0800e5dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e5e2:	4b05      	ldr	r3, [pc, #20]	; (800e5f8 <xTaskGetTickCount+0x1c>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e5e8:	687b      	ldr	r3, [r7, #4]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	20000504 	.word	0x20000504

0800e5fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e602:	f000 ff6b 	bl	800f4dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e606:	2300      	movs	r3, #0
 800e608:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e60a:	4b04      	ldr	r3, [pc, #16]	; (800e61c <xTaskGetTickCountFromISR+0x20>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e610:	683b      	ldr	r3, [r7, #0]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	20000504 	.word	0x20000504

0800e620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e626:	2300      	movs	r3, #0
 800e628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e62a:	4b4f      	ldr	r3, [pc, #316]	; (800e768 <xTaskIncrementTick+0x148>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f040 808a 	bne.w	800e748 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e634:	4b4d      	ldr	r3, [pc, #308]	; (800e76c <xTaskIncrementTick+0x14c>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3301      	adds	r3, #1
 800e63a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e63c:	4a4b      	ldr	r2, [pc, #300]	; (800e76c <xTaskIncrementTick+0x14c>)
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d122      	bne.n	800e68e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e648:	4b49      	ldr	r3, [pc, #292]	; (800e770 <xTaskIncrementTick+0x150>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00c      	beq.n	800e66c <xTaskIncrementTick+0x4c>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e656:	b672      	cpsid	i
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	b662      	cpsie	i
 800e666:	603b      	str	r3, [r7, #0]
}
 800e668:	bf00      	nop
 800e66a:	e7fe      	b.n	800e66a <xTaskIncrementTick+0x4a>
 800e66c:	4b40      	ldr	r3, [pc, #256]	; (800e770 <xTaskIncrementTick+0x150>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	60fb      	str	r3, [r7, #12]
 800e672:	4b40      	ldr	r3, [pc, #256]	; (800e774 <xTaskIncrementTick+0x154>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a3e      	ldr	r2, [pc, #248]	; (800e770 <xTaskIncrementTick+0x150>)
 800e678:	6013      	str	r3, [r2, #0]
 800e67a:	4a3e      	ldr	r2, [pc, #248]	; (800e774 <xTaskIncrementTick+0x154>)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6013      	str	r3, [r2, #0]
 800e680:	4b3d      	ldr	r3, [pc, #244]	; (800e778 <xTaskIncrementTick+0x158>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	3301      	adds	r3, #1
 800e686:	4a3c      	ldr	r2, [pc, #240]	; (800e778 <xTaskIncrementTick+0x158>)
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	f000 fad1 	bl	800ec30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e68e:	4b3b      	ldr	r3, [pc, #236]	; (800e77c <xTaskIncrementTick+0x15c>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	429a      	cmp	r2, r3
 800e696:	d348      	bcc.n	800e72a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e698:	4b35      	ldr	r3, [pc, #212]	; (800e770 <xTaskIncrementTick+0x150>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d104      	bne.n	800e6ac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6a2:	4b36      	ldr	r3, [pc, #216]	; (800e77c <xTaskIncrementTick+0x15c>)
 800e6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a8:	601a      	str	r2, [r3, #0]
					break;
 800e6aa:	e03e      	b.n	800e72a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ac:	4b30      	ldr	r3, [pc, #192]	; (800e770 <xTaskIncrementTick+0x150>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e6bc:	693a      	ldr	r2, [r7, #16]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d203      	bcs.n	800e6cc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e6c4:	4a2d      	ldr	r2, [pc, #180]	; (800e77c <xTaskIncrementTick+0x15c>)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e6ca:	e02e      	b.n	800e72a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	3304      	adds	r3, #4
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fe fd3b 	bl	800d14c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d004      	beq.n	800e6e8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	3318      	adds	r3, #24
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe fd32 	bl	800d14c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	409a      	lsls	r2, r3
 800e6f0:	4b23      	ldr	r3, [pc, #140]	; (800e780 <xTaskIncrementTick+0x160>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	4a22      	ldr	r2, [pc, #136]	; (800e780 <xTaskIncrementTick+0x160>)
 800e6f8:	6013      	str	r3, [r2, #0]
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fe:	4613      	mov	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	4413      	add	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4a1f      	ldr	r2, [pc, #124]	; (800e784 <xTaskIncrementTick+0x164>)
 800e708:	441a      	add	r2, r3
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	3304      	adds	r3, #4
 800e70e:	4619      	mov	r1, r3
 800e710:	4610      	mov	r0, r2
 800e712:	f7fe fcbe 	bl	800d092 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71a:	4b1b      	ldr	r3, [pc, #108]	; (800e788 <xTaskIncrementTick+0x168>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e720:	429a      	cmp	r2, r3
 800e722:	d3b9      	bcc.n	800e698 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e724:	2301      	movs	r3, #1
 800e726:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e728:	e7b6      	b.n	800e698 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e72a:	4b17      	ldr	r3, [pc, #92]	; (800e788 <xTaskIncrementTick+0x168>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e730:	4914      	ldr	r1, [pc, #80]	; (800e784 <xTaskIncrementTick+0x164>)
 800e732:	4613      	mov	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	440b      	add	r3, r1
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d907      	bls.n	800e752 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e742:	2301      	movs	r3, #1
 800e744:	617b      	str	r3, [r7, #20]
 800e746:	e004      	b.n	800e752 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e748:	4b10      	ldr	r3, [pc, #64]	; (800e78c <xTaskIncrementTick+0x16c>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3301      	adds	r3, #1
 800e74e:	4a0f      	ldr	r2, [pc, #60]	; (800e78c <xTaskIncrementTick+0x16c>)
 800e750:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e752:	4b0f      	ldr	r3, [pc, #60]	; (800e790 <xTaskIncrementTick+0x170>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d001      	beq.n	800e75e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e75a:	2301      	movs	r3, #1
 800e75c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e75e:	697b      	ldr	r3, [r7, #20]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3718      	adds	r7, #24
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	20000528 	.word	0x20000528
 800e76c:	20000504 	.word	0x20000504
 800e770:	200004b8 	.word	0x200004b8
 800e774:	200004bc 	.word	0x200004bc
 800e778:	20000518 	.word	0x20000518
 800e77c:	20000520 	.word	0x20000520
 800e780:	20000508 	.word	0x20000508
 800e784:	20000404 	.word	0x20000404
 800e788:	20000400 	.word	0x20000400
 800e78c:	20000510 	.word	0x20000510
 800e790:	20000514 	.word	0x20000514

0800e794 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b088      	sub	sp, #32
 800e798:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e79a:	4b3a      	ldr	r3, [pc, #232]	; (800e884 <vTaskSwitchContext+0xf0>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d003      	beq.n	800e7aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e7a2:	4b39      	ldr	r3, [pc, #228]	; (800e888 <vTaskSwitchContext+0xf4>)
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e7a8:	e068      	b.n	800e87c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800e7aa:	4b37      	ldr	r3, [pc, #220]	; (800e888 <vTaskSwitchContext+0xf4>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e7b0:	4b36      	ldr	r3, [pc, #216]	; (800e88c <vTaskSwitchContext+0xf8>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b6:	61fb      	str	r3, [r7, #28]
 800e7b8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e7bc:	61bb      	str	r3, [r7, #24]
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	69ba      	ldr	r2, [r7, #24]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d111      	bne.n	800e7ec <vTaskSwitchContext+0x58>
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	3304      	adds	r3, #4
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	69ba      	ldr	r2, [r7, #24]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d10b      	bne.n	800e7ec <vTaskSwitchContext+0x58>
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	3308      	adds	r3, #8
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	69ba      	ldr	r2, [r7, #24]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d105      	bne.n	800e7ec <vTaskSwitchContext+0x58>
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	330c      	adds	r3, #12
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	69ba      	ldr	r2, [r7, #24]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d008      	beq.n	800e7fe <vTaskSwitchContext+0x6a>
 800e7ec:	4b27      	ldr	r3, [pc, #156]	; (800e88c <vTaskSwitchContext+0xf8>)
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	4b26      	ldr	r3, [pc, #152]	; (800e88c <vTaskSwitchContext+0xf8>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	3334      	adds	r3, #52	; 0x34
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	f7f2 f970 	bl	8000ade <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7fe:	4b24      	ldr	r3, [pc, #144]	; (800e890 <vTaskSwitchContext+0xfc>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	fab3 f383 	clz	r3, r3
 800e80a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e80c:	7afb      	ldrb	r3, [r7, #11]
 800e80e:	f1c3 031f 	rsb	r3, r3, #31
 800e812:	617b      	str	r3, [r7, #20]
 800e814:	491f      	ldr	r1, [pc, #124]	; (800e894 <vTaskSwitchContext+0x100>)
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	4613      	mov	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	440b      	add	r3, r1
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10c      	bne.n	800e842 <vTaskSwitchContext+0xae>
	__asm volatile
 800e828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82c:	b672      	cpsid	i
 800e82e:	f383 8811 	msr	BASEPRI, r3
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	f3bf 8f4f 	dsb	sy
 800e83a:	b662      	cpsie	i
 800e83c:	607b      	str	r3, [r7, #4]
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <vTaskSwitchContext+0xac>
 800e842:	697a      	ldr	r2, [r7, #20]
 800e844:	4613      	mov	r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	4413      	add	r3, r2
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	4a11      	ldr	r2, [pc, #68]	; (800e894 <vTaskSwitchContext+0x100>)
 800e84e:	4413      	add	r3, r2
 800e850:	613b      	str	r3, [r7, #16]
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	685a      	ldr	r2, [r3, #4]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	605a      	str	r2, [r3, #4]
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	685a      	ldr	r2, [r3, #4]
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	3308      	adds	r3, #8
 800e864:	429a      	cmp	r2, r3
 800e866:	d104      	bne.n	800e872 <vTaskSwitchContext+0xde>
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	685a      	ldr	r2, [r3, #4]
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	605a      	str	r2, [r3, #4]
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	4a04      	ldr	r2, [pc, #16]	; (800e88c <vTaskSwitchContext+0xf8>)
 800e87a:	6013      	str	r3, [r2, #0]
}
 800e87c:	bf00      	nop
 800e87e:	3720      	adds	r7, #32
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	20000528 	.word	0x20000528
 800e888:	20000514 	.word	0x20000514
 800e88c:	20000400 	.word	0x20000400
 800e890:	20000508 	.word	0x20000508
 800e894:	20000404 	.word	0x20000404

0800e898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10c      	bne.n	800e8c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	b672      	cpsid	i
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	b662      	cpsie	i
 800e8bc:	60fb      	str	r3, [r7, #12]
}
 800e8be:	bf00      	nop
 800e8c0:	e7fe      	b.n	800e8c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8c2:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <vTaskPlaceOnEventList+0x48>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3318      	adds	r3, #24
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7fe fc05 	bl	800d0da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	6838      	ldr	r0, [r7, #0]
 800e8d4:	f000 fba6 	bl	800f024 <prvAddCurrentTaskToDelayedList>
}
 800e8d8:	bf00      	nop
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	20000400 	.word	0x20000400

0800e8e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d10c      	bne.n	800e914 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	b672      	cpsid	i
 800e900:	f383 8811 	msr	BASEPRI, r3
 800e904:	f3bf 8f6f 	isb	sy
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	b662      	cpsie	i
 800e90e:	60fb      	str	r3, [r7, #12]
}
 800e910:	bf00      	nop
 800e912:	e7fe      	b.n	800e912 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	3318      	adds	r3, #24
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fe fc17 	bl	800d14c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e91e:	4b1d      	ldr	r3, [pc, #116]	; (800e994 <xTaskRemoveFromEventList+0xb0>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d11c      	bne.n	800e960 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	3304      	adds	r3, #4
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fe fc0e 	bl	800d14c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e934:	2201      	movs	r2, #1
 800e936:	409a      	lsls	r2, r3
 800e938:	4b17      	ldr	r3, [pc, #92]	; (800e998 <xTaskRemoveFromEventList+0xb4>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4313      	orrs	r3, r2
 800e93e:	4a16      	ldr	r2, [pc, #88]	; (800e998 <xTaskRemoveFromEventList+0xb4>)
 800e940:	6013      	str	r3, [r2, #0]
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e946:	4613      	mov	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4a13      	ldr	r2, [pc, #76]	; (800e99c <xTaskRemoveFromEventList+0xb8>)
 800e950:	441a      	add	r2, r3
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	3304      	adds	r3, #4
 800e956:	4619      	mov	r1, r3
 800e958:	4610      	mov	r0, r2
 800e95a:	f7fe fb9a 	bl	800d092 <vListInsertEnd>
 800e95e:	e005      	b.n	800e96c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	3318      	adds	r3, #24
 800e964:	4619      	mov	r1, r3
 800e966:	480e      	ldr	r0, [pc, #56]	; (800e9a0 <xTaskRemoveFromEventList+0xbc>)
 800e968:	f7fe fb93 	bl	800d092 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e970:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <xTaskRemoveFromEventList+0xc0>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e976:	429a      	cmp	r2, r3
 800e978:	d905      	bls.n	800e986 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e97a:	2301      	movs	r3, #1
 800e97c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e97e:	4b0a      	ldr	r3, [pc, #40]	; (800e9a8 <xTaskRemoveFromEventList+0xc4>)
 800e980:	2201      	movs	r2, #1
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	e001      	b.n	800e98a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e986:	2300      	movs	r3, #0
 800e988:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e98a:	697b      	ldr	r3, [r7, #20]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3718      	adds	r7, #24
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20000528 	.word	0x20000528
 800e998:	20000508 	.word	0x20000508
 800e99c:	20000404 	.word	0x20000404
 800e9a0:	200004c0 	.word	0x200004c0
 800e9a4:	20000400 	.word	0x20000400
 800e9a8:	20000514 	.word	0x20000514

0800e9ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9b4:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <vTaskInternalSetTimeOutState+0x24>)
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9bc:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <vTaskInternalSetTimeOutState+0x28>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	605a      	str	r2, [r3, #4]
}
 800e9c4:	bf00      	nop
 800e9c6:	370c      	adds	r7, #12
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	20000518 	.word	0x20000518
 800e9d4:	20000504 	.word	0x20000504

0800e9d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b088      	sub	sp, #32
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d10c      	bne.n	800ea02 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ec:	b672      	cpsid	i
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	b662      	cpsie	i
 800e9fc:	613b      	str	r3, [r7, #16]
}
 800e9fe:	bf00      	nop
 800ea00:	e7fe      	b.n	800ea00 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10c      	bne.n	800ea22 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ea08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0c:	b672      	cpsid	i
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	b662      	cpsie	i
 800ea1c:	60fb      	str	r3, [r7, #12]
}
 800ea1e:	bf00      	nop
 800ea20:	e7fe      	b.n	800ea20 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ea22:	f000 fc73 	bl	800f30c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea26:	4b1d      	ldr	r3, [pc, #116]	; (800ea9c <xTaskCheckForTimeOut+0xc4>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	69ba      	ldr	r2, [r7, #24]
 800ea32:	1ad3      	subs	r3, r2, r3
 800ea34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3e:	d102      	bne.n	800ea46 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea40:	2300      	movs	r3, #0
 800ea42:	61fb      	str	r3, [r7, #28]
 800ea44:	e023      	b.n	800ea8e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	4b15      	ldr	r3, [pc, #84]	; (800eaa0 <xTaskCheckForTimeOut+0xc8>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d007      	beq.n	800ea62 <xTaskCheckForTimeOut+0x8a>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	69ba      	ldr	r2, [r7, #24]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d302      	bcc.n	800ea62 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	61fb      	str	r3, [r7, #28]
 800ea60:	e015      	b.n	800ea8e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	697a      	ldr	r2, [r7, #20]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d20b      	bcs.n	800ea84 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	1ad2      	subs	r2, r2, r3
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f7ff ff97 	bl	800e9ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	61fb      	str	r3, [r7, #28]
 800ea82:	e004      	b.n	800ea8e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	2200      	movs	r2, #0
 800ea88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea8e:	f000 fc71 	bl	800f374 <vPortExitCritical>

	return xReturn;
 800ea92:	69fb      	ldr	r3, [r7, #28]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3720      	adds	r7, #32
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	20000504 	.word	0x20000504
 800eaa0:	20000518 	.word	0x20000518

0800eaa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eaa8:	4b03      	ldr	r3, [pc, #12]	; (800eab8 <vTaskMissedYield+0x14>)
 800eaaa:	2201      	movs	r2, #1
 800eaac:	601a      	str	r2, [r3, #0]
}
 800eaae:	bf00      	nop
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	20000514 	.word	0x20000514

0800eabc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eac4:	f000 f854 	bl	800eb70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eac8:	4b07      	ldr	r3, [pc, #28]	; (800eae8 <prvIdleTask+0x2c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d907      	bls.n	800eae0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ead0:	4b06      	ldr	r3, [pc, #24]	; (800eaec <prvIdleTask+0x30>)
 800ead2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ead6:	601a      	str	r2, [r3, #0]
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800eae0:	f7f1 fff6 	bl	8000ad0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800eae4:	e7ee      	b.n	800eac4 <prvIdleTask+0x8>
 800eae6:	bf00      	nop
 800eae8:	20000404 	.word	0x20000404
 800eaec:	e000ed04 	.word	0xe000ed04

0800eaf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	607b      	str	r3, [r7, #4]
 800eafa:	e00c      	b.n	800eb16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	4613      	mov	r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	4413      	add	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4a12      	ldr	r2, [pc, #72]	; (800eb50 <prvInitialiseTaskLists+0x60>)
 800eb08:	4413      	add	r3, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe fa94 	bl	800d038 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3301      	adds	r3, #1
 800eb14:	607b      	str	r3, [r7, #4]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b06      	cmp	r3, #6
 800eb1a:	d9ef      	bls.n	800eafc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb1c:	480d      	ldr	r0, [pc, #52]	; (800eb54 <prvInitialiseTaskLists+0x64>)
 800eb1e:	f7fe fa8b 	bl	800d038 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb22:	480d      	ldr	r0, [pc, #52]	; (800eb58 <prvInitialiseTaskLists+0x68>)
 800eb24:	f7fe fa88 	bl	800d038 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb28:	480c      	ldr	r0, [pc, #48]	; (800eb5c <prvInitialiseTaskLists+0x6c>)
 800eb2a:	f7fe fa85 	bl	800d038 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb2e:	480c      	ldr	r0, [pc, #48]	; (800eb60 <prvInitialiseTaskLists+0x70>)
 800eb30:	f7fe fa82 	bl	800d038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb34:	480b      	ldr	r0, [pc, #44]	; (800eb64 <prvInitialiseTaskLists+0x74>)
 800eb36:	f7fe fa7f 	bl	800d038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb3a:	4b0b      	ldr	r3, [pc, #44]	; (800eb68 <prvInitialiseTaskLists+0x78>)
 800eb3c:	4a05      	ldr	r2, [pc, #20]	; (800eb54 <prvInitialiseTaskLists+0x64>)
 800eb3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb40:	4b0a      	ldr	r3, [pc, #40]	; (800eb6c <prvInitialiseTaskLists+0x7c>)
 800eb42:	4a05      	ldr	r2, [pc, #20]	; (800eb58 <prvInitialiseTaskLists+0x68>)
 800eb44:	601a      	str	r2, [r3, #0]
}
 800eb46:	bf00      	nop
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	20000404 	.word	0x20000404
 800eb54:	20000490 	.word	0x20000490
 800eb58:	200004a4 	.word	0x200004a4
 800eb5c:	200004c0 	.word	0x200004c0
 800eb60:	200004d4 	.word	0x200004d4
 800eb64:	200004ec 	.word	0x200004ec
 800eb68:	200004b8 	.word	0x200004b8
 800eb6c:	200004bc 	.word	0x200004bc

0800eb70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb76:	e019      	b.n	800ebac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb78:	f000 fbc8 	bl	800f30c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb7c:	4b10      	ldr	r3, [pc, #64]	; (800ebc0 <prvCheckTasksWaitingTermination+0x50>)
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3304      	adds	r3, #4
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fe fadf 	bl	800d14c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb8e:	4b0d      	ldr	r3, [pc, #52]	; (800ebc4 <prvCheckTasksWaitingTermination+0x54>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3b01      	subs	r3, #1
 800eb94:	4a0b      	ldr	r2, [pc, #44]	; (800ebc4 <prvCheckTasksWaitingTermination+0x54>)
 800eb96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb98:	4b0b      	ldr	r3, [pc, #44]	; (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	4a0a      	ldr	r2, [pc, #40]	; (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800eba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eba2:	f000 fbe7 	bl	800f374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 f810 	bl	800ebcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebac:	4b06      	ldr	r3, [pc, #24]	; (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1e1      	bne.n	800eb78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	200004d4 	.word	0x200004d4
 800ebc4:	20000500 	.word	0x20000500
 800ebc8:	200004e8 	.word	0x200004e8

0800ebcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d108      	bne.n	800ebf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 fd8e 	bl	800f704 <vPortFree>
				vPortFree( pxTCB );
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 fd8b 	bl	800f704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebee:	e01a      	b.n	800ec26 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d103      	bne.n	800ec02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fd82 	bl	800f704 <vPortFree>
	}
 800ec00:	e011      	b.n	800ec26 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d00c      	beq.n	800ec26 <prvDeleteTCB+0x5a>
	__asm volatile
 800ec0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec10:	b672      	cpsid	i
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	b662      	cpsie	i
 800ec20:	60fb      	str	r3, [r7, #12]
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <prvDeleteTCB+0x58>
	}
 800ec26:	bf00      	nop
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
	...

0800ec30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec36:	4b0c      	ldr	r3, [pc, #48]	; (800ec68 <prvResetNextTaskUnblockTime+0x38>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d104      	bne.n	800ec4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec40:	4b0a      	ldr	r3, [pc, #40]	; (800ec6c <prvResetNextTaskUnblockTime+0x3c>)
 800ec42:	f04f 32ff 	mov.w	r2, #4294967295
 800ec46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec48:	e008      	b.n	800ec5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec4a:	4b07      	ldr	r3, [pc, #28]	; (800ec68 <prvResetNextTaskUnblockTime+0x38>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	4a04      	ldr	r2, [pc, #16]	; (800ec6c <prvResetNextTaskUnblockTime+0x3c>)
 800ec5a:	6013      	str	r3, [r2, #0]
}
 800ec5c:	bf00      	nop
 800ec5e:	370c      	adds	r7, #12
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr
 800ec68:	200004b8 	.word	0x200004b8
 800ec6c:	20000520 	.word	0x20000520

0800ec70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec76:	4b0b      	ldr	r3, [pc, #44]	; (800eca4 <xTaskGetSchedulerState+0x34>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d102      	bne.n	800ec84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	607b      	str	r3, [r7, #4]
 800ec82:	e008      	b.n	800ec96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec84:	4b08      	ldr	r3, [pc, #32]	; (800eca8 <xTaskGetSchedulerState+0x38>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d102      	bne.n	800ec92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	607b      	str	r3, [r7, #4]
 800ec90:	e001      	b.n	800ec96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec92:	2300      	movs	r3, #0
 800ec94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec96:	687b      	ldr	r3, [r7, #4]
	}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr
 800eca4:	2000050c 	.word	0x2000050c
 800eca8:	20000528 	.word	0x20000528

0800ecac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d069      	beq.n	800ed96 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc6:	4b36      	ldr	r3, [pc, #216]	; (800eda0 <xTaskPriorityInherit+0xf4>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d259      	bcs.n	800ed84 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	db06      	blt.n	800ece6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecd8:	4b31      	ldr	r3, [pc, #196]	; (800eda0 <xTaskPriorityInherit+0xf4>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecde:	f1c3 0207 	rsb	r2, r3, #7
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	6959      	ldr	r1, [r3, #20]
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecee:	4613      	mov	r3, r2
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	4413      	add	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4a2b      	ldr	r2, [pc, #172]	; (800eda4 <xTaskPriorityInherit+0xf8>)
 800ecf8:	4413      	add	r3, r2
 800ecfa:	4299      	cmp	r1, r3
 800ecfc:	d13a      	bne.n	800ed74 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	3304      	adds	r3, #4
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fe fa22 	bl	800d14c <uxListRemove>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d115      	bne.n	800ed3a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed12:	4924      	ldr	r1, [pc, #144]	; (800eda4 <xTaskPriorityInherit+0xf8>)
 800ed14:	4613      	mov	r3, r2
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	4413      	add	r3, r2
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	440b      	add	r3, r1
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10a      	bne.n	800ed3a <xTaskPriorityInherit+0x8e>
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed28:	2201      	movs	r2, #1
 800ed2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed2e:	43da      	mvns	r2, r3
 800ed30:	4b1d      	ldr	r3, [pc, #116]	; (800eda8 <xTaskPriorityInherit+0xfc>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4013      	ands	r3, r2
 800ed36:	4a1c      	ldr	r2, [pc, #112]	; (800eda8 <xTaskPriorityInherit+0xfc>)
 800ed38:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed3a:	4b19      	ldr	r3, [pc, #100]	; (800eda0 <xTaskPriorityInherit+0xf4>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed48:	2201      	movs	r2, #1
 800ed4a:	409a      	lsls	r2, r3
 800ed4c:	4b16      	ldr	r3, [pc, #88]	; (800eda8 <xTaskPriorityInherit+0xfc>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	4a15      	ldr	r2, [pc, #84]	; (800eda8 <xTaskPriorityInherit+0xfc>)
 800ed54:	6013      	str	r3, [r2, #0]
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4413      	add	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	4a10      	ldr	r2, [pc, #64]	; (800eda4 <xTaskPriorityInherit+0xf8>)
 800ed64:	441a      	add	r2, r3
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	3304      	adds	r3, #4
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	4610      	mov	r0, r2
 800ed6e:	f7fe f990 	bl	800d092 <vListInsertEnd>
 800ed72:	e004      	b.n	800ed7e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed74:	4b0a      	ldr	r3, [pc, #40]	; (800eda0 <xTaskPriorityInherit+0xf4>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	60fb      	str	r3, [r7, #12]
 800ed82:	e008      	b.n	800ed96 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed88:	4b05      	ldr	r3, [pc, #20]	; (800eda0 <xTaskPriorityInherit+0xf4>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d201      	bcs.n	800ed96 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed92:	2301      	movs	r3, #1
 800ed94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed96:	68fb      	ldr	r3, [r7, #12]
	}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20000400 	.word	0x20000400
 800eda4:	20000404 	.word	0x20000404
 800eda8:	20000508 	.word	0x20000508

0800edac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edb8:	2300      	movs	r3, #0
 800edba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d072      	beq.n	800eea8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edc2:	4b3c      	ldr	r3, [pc, #240]	; (800eeb4 <xTaskPriorityDisinherit+0x108>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d00c      	beq.n	800ede6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800edcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd0:	b672      	cpsid	i
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	b662      	cpsie	i
 800ede0:	60fb      	str	r3, [r7, #12]
}
 800ede2:	bf00      	nop
 800ede4:	e7fe      	b.n	800ede4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10c      	bne.n	800ee08 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800edee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf2:	b672      	cpsid	i
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	b662      	cpsie	i
 800ee02:	60bb      	str	r3, [r7, #8]
}
 800ee04:	bf00      	nop
 800ee06:	e7fe      	b.n	800ee06 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee0c:	1e5a      	subs	r2, r3, #1
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d044      	beq.n	800eea8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d140      	bne.n	800eea8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fe f98e 	bl	800d14c <uxListRemove>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d115      	bne.n	800ee62 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3a:	491f      	ldr	r1, [pc, #124]	; (800eeb8 <xTaskPriorityDisinherit+0x10c>)
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	4413      	add	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	440b      	add	r3, r1
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10a      	bne.n	800ee62 <xTaskPriorityDisinherit+0xb6>
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee50:	2201      	movs	r2, #1
 800ee52:	fa02 f303 	lsl.w	r3, r2, r3
 800ee56:	43da      	mvns	r2, r3
 800ee58:	4b18      	ldr	r3, [pc, #96]	; (800eebc <xTaskPriorityDisinherit+0x110>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4013      	ands	r3, r2
 800ee5e:	4a17      	ldr	r2, [pc, #92]	; (800eebc <xTaskPriorityDisinherit+0x110>)
 800ee60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6e:	f1c3 0207 	rsb	r2, r3, #7
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	409a      	lsls	r2, r3
 800ee7e:	4b0f      	ldr	r3, [pc, #60]	; (800eebc <xTaskPriorityDisinherit+0x110>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	4a0d      	ldr	r2, [pc, #52]	; (800eebc <xTaskPriorityDisinherit+0x110>)
 800ee86:	6013      	str	r3, [r2, #0]
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	4413      	add	r3, r2
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	4a08      	ldr	r2, [pc, #32]	; (800eeb8 <xTaskPriorityDisinherit+0x10c>)
 800ee96:	441a      	add	r2, r3
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	3304      	adds	r3, #4
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	4610      	mov	r0, r2
 800eea0:	f7fe f8f7 	bl	800d092 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eea4:	2301      	movs	r3, #1
 800eea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eea8:	697b      	ldr	r3, [r7, #20]
	}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3718      	adds	r7, #24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20000400 	.word	0x20000400
 800eeb8:	20000404 	.word	0x20000404
 800eebc:	20000508 	.word	0x20000508

0800eec0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b088      	sub	sp, #32
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eece:	2301      	movs	r3, #1
 800eed0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	f000 8087 	beq.w	800efe8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d10c      	bne.n	800eefc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee6:	b672      	cpsid	i
 800eee8:	f383 8811 	msr	BASEPRI, r3
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f3bf 8f4f 	dsb	sy
 800eef4:	b662      	cpsie	i
 800eef6:	60fb      	str	r3, [r7, #12]
}
 800eef8:	bf00      	nop
 800eefa:	e7fe      	b.n	800eefa <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d902      	bls.n	800ef0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	61fb      	str	r3, [r7, #28]
 800ef0a:	e002      	b.n	800ef12 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ef12:	69bb      	ldr	r3, [r7, #24]
 800ef14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef16:	69fa      	ldr	r2, [r7, #28]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d065      	beq.n	800efe8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef20:	697a      	ldr	r2, [r7, #20]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d160      	bne.n	800efe8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ef26:	4b32      	ldr	r3, [pc, #200]	; (800eff0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	69ba      	ldr	r2, [r7, #24]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d10c      	bne.n	800ef4a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800ef30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef34:	b672      	cpsid	i
 800ef36:	f383 8811 	msr	BASEPRI, r3
 800ef3a:	f3bf 8f6f 	isb	sy
 800ef3e:	f3bf 8f4f 	dsb	sy
 800ef42:	b662      	cpsie	i
 800ef44:	60bb      	str	r3, [r7, #8]
}
 800ef46:	bf00      	nop
 800ef48:	e7fe      	b.n	800ef48 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef4e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	69fa      	ldr	r2, [r7, #28]
 800ef54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	699b      	ldr	r3, [r3, #24]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	db04      	blt.n	800ef68 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	f1c3 0207 	rsb	r2, r3, #7
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	6959      	ldr	r1, [r3, #20]
 800ef6c:	693a      	ldr	r2, [r7, #16]
 800ef6e:	4613      	mov	r3, r2
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	4413      	add	r3, r2
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	4a1f      	ldr	r2, [pc, #124]	; (800eff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef78:	4413      	add	r3, r2
 800ef7a:	4299      	cmp	r1, r3
 800ef7c:	d134      	bne.n	800efe8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	3304      	adds	r3, #4
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe f8e2 	bl	800d14c <uxListRemove>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d115      	bne.n	800efba <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef92:	4918      	ldr	r1, [pc, #96]	; (800eff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef94:	4613      	mov	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	4413      	add	r3, r2
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	440b      	add	r3, r1
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10a      	bne.n	800efba <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa8:	2201      	movs	r2, #1
 800efaa:	fa02 f303 	lsl.w	r3, r2, r3
 800efae:	43da      	mvns	r2, r3
 800efb0:	4b11      	ldr	r3, [pc, #68]	; (800eff8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4013      	ands	r3, r2
 800efb6:	4a10      	ldr	r2, [pc, #64]	; (800eff8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800efb8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efbe:	2201      	movs	r2, #1
 800efc0:	409a      	lsls	r2, r3
 800efc2:	4b0d      	ldr	r3, [pc, #52]	; (800eff8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4313      	orrs	r3, r2
 800efc8:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd0:	4613      	mov	r3, r2
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	4413      	add	r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4a06      	ldr	r2, [pc, #24]	; (800eff4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800efda:	441a      	add	r2, r3
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	3304      	adds	r3, #4
 800efe0:	4619      	mov	r1, r3
 800efe2:	4610      	mov	r0, r2
 800efe4:	f7fe f855 	bl	800d092 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efe8:	bf00      	nop
 800efea:	3720      	adds	r7, #32
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	20000400 	.word	0x20000400
 800eff4:	20000404 	.word	0x20000404
 800eff8:	20000508 	.word	0x20000508

0800effc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800effc:	b480      	push	{r7}
 800effe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f000:	4b07      	ldr	r3, [pc, #28]	; (800f020 <pvTaskIncrementMutexHeldCount+0x24>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d004      	beq.n	800f012 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f008:	4b05      	ldr	r3, [pc, #20]	; (800f020 <pvTaskIncrementMutexHeldCount+0x24>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f00e:	3201      	adds	r2, #1
 800f010:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f012:	4b03      	ldr	r3, [pc, #12]	; (800f020 <pvTaskIncrementMutexHeldCount+0x24>)
 800f014:	681b      	ldr	r3, [r3, #0]
	}
 800f016:	4618      	mov	r0, r3
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	20000400 	.word	0x20000400

0800f024 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f02e:	4b29      	ldr	r3, [pc, #164]	; (800f0d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f034:	4b28      	ldr	r3, [pc, #160]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3304      	adds	r3, #4
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fe f886 	bl	800d14c <uxListRemove>
 800f040:	4603      	mov	r3, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	d10b      	bne.n	800f05e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f046:	4b24      	ldr	r3, [pc, #144]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f04c:	2201      	movs	r2, #1
 800f04e:	fa02 f303 	lsl.w	r3, r2, r3
 800f052:	43da      	mvns	r2, r3
 800f054:	4b21      	ldr	r3, [pc, #132]	; (800f0dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4013      	ands	r3, r2
 800f05a:	4a20      	ldr	r2, [pc, #128]	; (800f0dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800f05c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f064:	d10a      	bne.n	800f07c <prvAddCurrentTaskToDelayedList+0x58>
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d007      	beq.n	800f07c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f06c:	4b1a      	ldr	r3, [pc, #104]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3304      	adds	r3, #4
 800f072:	4619      	mov	r1, r3
 800f074:	481a      	ldr	r0, [pc, #104]	; (800f0e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f076:	f7fe f80c 	bl	800d092 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f07a:	e026      	b.n	800f0ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4413      	add	r3, r2
 800f082:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f084:	4b14      	ldr	r3, [pc, #80]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68ba      	ldr	r2, [r7, #8]
 800f08a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f08c:	68ba      	ldr	r2, [r7, #8]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	429a      	cmp	r2, r3
 800f092:	d209      	bcs.n	800f0a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f094:	4b13      	ldr	r3, [pc, #76]	; (800f0e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	4b0f      	ldr	r3, [pc, #60]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3304      	adds	r3, #4
 800f09e:	4619      	mov	r1, r3
 800f0a0:	4610      	mov	r0, r2
 800f0a2:	f7fe f81a 	bl	800d0da <vListInsert>
}
 800f0a6:	e010      	b.n	800f0ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0a8:	4b0f      	ldr	r3, [pc, #60]	; (800f0e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	4b0a      	ldr	r3, [pc, #40]	; (800f0d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	3304      	adds	r3, #4
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	f7fe f810 	bl	800d0da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f0ba:	4b0c      	ldr	r3, [pc, #48]	; (800f0ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68ba      	ldr	r2, [r7, #8]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d202      	bcs.n	800f0ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f0c4:	4a09      	ldr	r2, [pc, #36]	; (800f0ec <prvAddCurrentTaskToDelayedList+0xc8>)
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	6013      	str	r3, [r2, #0]
}
 800f0ca:	bf00      	nop
 800f0cc:	3710      	adds	r7, #16
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20000504 	.word	0x20000504
 800f0d8:	20000400 	.word	0x20000400
 800f0dc:	20000508 	.word	0x20000508
 800f0e0:	200004ec 	.word	0x200004ec
 800f0e4:	200004bc 	.word	0x200004bc
 800f0e8:	200004b8 	.word	0x200004b8
 800f0ec:	20000520 	.word	0x20000520

0800f0f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	3b04      	subs	r3, #4
 800f100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	3b04      	subs	r3, #4
 800f10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	f023 0201 	bic.w	r2, r3, #1
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3b04      	subs	r3, #4
 800f11e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f120:	4a0c      	ldr	r2, [pc, #48]	; (800f154 <pxPortInitialiseStack+0x64>)
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	3b14      	subs	r3, #20
 800f12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	3b04      	subs	r3, #4
 800f136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f06f 0202 	mvn.w	r2, #2
 800f13e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	3b20      	subs	r3, #32
 800f144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f146:	68fb      	ldr	r3, [r7, #12]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr
 800f154:	0800f159 	.word	0x0800f159

0800f158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f162:	4b14      	ldr	r3, [pc, #80]	; (800f1b4 <prvTaskExitError+0x5c>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f16a:	d00c      	beq.n	800f186 <prvTaskExitError+0x2e>
	__asm volatile
 800f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f170:	b672      	cpsid	i
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	b662      	cpsie	i
 800f180:	60fb      	str	r3, [r7, #12]
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <prvTaskExitError+0x2c>
	__asm volatile
 800f186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18a:	b672      	cpsid	i
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
 800f198:	b662      	cpsie	i
 800f19a:	60bb      	str	r3, [r7, #8]
}
 800f19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f19e:	bf00      	nop
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d0fc      	beq.n	800f1a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f1a6:	bf00      	nop
 800f1a8:	bf00      	nop
 800f1aa:	3714      	adds	r7, #20
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr
 800f1b4:	20000024 	.word	0x20000024
	...

0800f1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f1c0:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <pxCurrentTCBConst2>)
 800f1c2:	6819      	ldr	r1, [r3, #0]
 800f1c4:	6808      	ldr	r0, [r1, #0]
 800f1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ca:	f380 8809 	msr	PSP, r0
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f04f 0000 	mov.w	r0, #0
 800f1d6:	f380 8811 	msr	BASEPRI, r0
 800f1da:	4770      	bx	lr
 800f1dc:	f3af 8000 	nop.w

0800f1e0 <pxCurrentTCBConst2>:
 800f1e0:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f1e4:	bf00      	nop
 800f1e6:	bf00      	nop

0800f1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f1e8:	4808      	ldr	r0, [pc, #32]	; (800f20c <prvPortStartFirstTask+0x24>)
 800f1ea:	6800      	ldr	r0, [r0, #0]
 800f1ec:	6800      	ldr	r0, [r0, #0]
 800f1ee:	f380 8808 	msr	MSP, r0
 800f1f2:	f04f 0000 	mov.w	r0, #0
 800f1f6:	f380 8814 	msr	CONTROL, r0
 800f1fa:	b662      	cpsie	i
 800f1fc:	b661      	cpsie	f
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	df00      	svc	0
 800f208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f20a:	bf00      	nop
 800f20c:	e000ed08 	.word	0xe000ed08

0800f210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f216:	4b37      	ldr	r3, [pc, #220]	; (800f2f4 <xPortStartScheduler+0xe4>)
 800f218:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	22ff      	movs	r2, #255	; 0xff
 800f226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f230:	78fb      	ldrb	r3, [r7, #3]
 800f232:	b2db      	uxtb	r3, r3
 800f234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	4b2f      	ldr	r3, [pc, #188]	; (800f2f8 <xPortStartScheduler+0xe8>)
 800f23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f23e:	4b2f      	ldr	r3, [pc, #188]	; (800f2fc <xPortStartScheduler+0xec>)
 800f240:	2207      	movs	r2, #7
 800f242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f244:	e009      	b.n	800f25a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f246:	4b2d      	ldr	r3, [pc, #180]	; (800f2fc <xPortStartScheduler+0xec>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	4a2b      	ldr	r2, [pc, #172]	; (800f2fc <xPortStartScheduler+0xec>)
 800f24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f250:	78fb      	ldrb	r3, [r7, #3]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	b2db      	uxtb	r3, r3
 800f258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f25a:	78fb      	ldrb	r3, [r7, #3]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f262:	2b80      	cmp	r3, #128	; 0x80
 800f264:	d0ef      	beq.n	800f246 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f266:	4b25      	ldr	r3, [pc, #148]	; (800f2fc <xPortStartScheduler+0xec>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f1c3 0307 	rsb	r3, r3, #7
 800f26e:	2b04      	cmp	r3, #4
 800f270:	d00c      	beq.n	800f28c <xPortStartScheduler+0x7c>
	__asm volatile
 800f272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f276:	b672      	cpsid	i
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	b662      	cpsie	i
 800f286:	60bb      	str	r3, [r7, #8]
}
 800f288:	bf00      	nop
 800f28a:	e7fe      	b.n	800f28a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f28c:	4b1b      	ldr	r3, [pc, #108]	; (800f2fc <xPortStartScheduler+0xec>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	021b      	lsls	r3, r3, #8
 800f292:	4a1a      	ldr	r2, [pc, #104]	; (800f2fc <xPortStartScheduler+0xec>)
 800f294:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f296:	4b19      	ldr	r3, [pc, #100]	; (800f2fc <xPortStartScheduler+0xec>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f29e:	4a17      	ldr	r2, [pc, #92]	; (800f2fc <xPortStartScheduler+0xec>)
 800f2a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f2aa:	4b15      	ldr	r3, [pc, #84]	; (800f300 <xPortStartScheduler+0xf0>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4a14      	ldr	r2, [pc, #80]	; (800f300 <xPortStartScheduler+0xf0>)
 800f2b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f2b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f2b6:	4b12      	ldr	r3, [pc, #72]	; (800f300 <xPortStartScheduler+0xf0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4a11      	ldr	r2, [pc, #68]	; (800f300 <xPortStartScheduler+0xf0>)
 800f2bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f2c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f2c2:	f000 f8dd 	bl	800f480 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f2c6:	4b0f      	ldr	r3, [pc, #60]	; (800f304 <xPortStartScheduler+0xf4>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f2cc:	f000 f8fc 	bl	800f4c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f2d0:	4b0d      	ldr	r3, [pc, #52]	; (800f308 <xPortStartScheduler+0xf8>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a0c      	ldr	r2, [pc, #48]	; (800f308 <xPortStartScheduler+0xf8>)
 800f2d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f2da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f2dc:	f7ff ff84 	bl	800f1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f2e0:	f7ff fa58 	bl	800e794 <vTaskSwitchContext>
	prvTaskExitError();
 800f2e4:	f7ff ff38 	bl	800f158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	e000e400 	.word	0xe000e400
 800f2f8:	2000052c 	.word	0x2000052c
 800f2fc:	20000530 	.word	0x20000530
 800f300:	e000ed20 	.word	0xe000ed20
 800f304:	20000024 	.word	0x20000024
 800f308:	e000ef34 	.word	0xe000ef34

0800f30c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
	__asm volatile
 800f312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f316:	b672      	cpsid	i
 800f318:	f383 8811 	msr	BASEPRI, r3
 800f31c:	f3bf 8f6f 	isb	sy
 800f320:	f3bf 8f4f 	dsb	sy
 800f324:	b662      	cpsie	i
 800f326:	607b      	str	r3, [r7, #4]
}
 800f328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f32a:	4b10      	ldr	r3, [pc, #64]	; (800f36c <vPortEnterCritical+0x60>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	3301      	adds	r3, #1
 800f330:	4a0e      	ldr	r2, [pc, #56]	; (800f36c <vPortEnterCritical+0x60>)
 800f332:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f334:	4b0d      	ldr	r3, [pc, #52]	; (800f36c <vPortEnterCritical+0x60>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d111      	bne.n	800f360 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f33c:	4b0c      	ldr	r3, [pc, #48]	; (800f370 <vPortEnterCritical+0x64>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	b2db      	uxtb	r3, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00c      	beq.n	800f360 <vPortEnterCritical+0x54>
	__asm volatile
 800f346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34a:	b672      	cpsid	i
 800f34c:	f383 8811 	msr	BASEPRI, r3
 800f350:	f3bf 8f6f 	isb	sy
 800f354:	f3bf 8f4f 	dsb	sy
 800f358:	b662      	cpsie	i
 800f35a:	603b      	str	r3, [r7, #0]
}
 800f35c:	bf00      	nop
 800f35e:	e7fe      	b.n	800f35e <vPortEnterCritical+0x52>
	}
}
 800f360:	bf00      	nop
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	20000024 	.word	0x20000024
 800f370:	e000ed04 	.word	0xe000ed04

0800f374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f37a:	4b13      	ldr	r3, [pc, #76]	; (800f3c8 <vPortExitCritical+0x54>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d10c      	bne.n	800f39c <vPortExitCritical+0x28>
	__asm volatile
 800f382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f386:	b672      	cpsid	i
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	b662      	cpsie	i
 800f396:	607b      	str	r3, [r7, #4]
}
 800f398:	bf00      	nop
 800f39a:	e7fe      	b.n	800f39a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f39c:	4b0a      	ldr	r3, [pc, #40]	; (800f3c8 <vPortExitCritical+0x54>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	4a09      	ldr	r2, [pc, #36]	; (800f3c8 <vPortExitCritical+0x54>)
 800f3a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f3a6:	4b08      	ldr	r3, [pc, #32]	; (800f3c8 <vPortExitCritical+0x54>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d105      	bne.n	800f3ba <vPortExitCritical+0x46>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	f383 8811 	msr	BASEPRI, r3
}
 800f3b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f3ba:	bf00      	nop
 800f3bc:	370c      	adds	r7, #12
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	20000024 	.word	0x20000024
 800f3cc:	00000000 	.word	0x00000000

0800f3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f3d0:	f3ef 8009 	mrs	r0, PSP
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	4b15      	ldr	r3, [pc, #84]	; (800f430 <pxCurrentTCBConst>)
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	f01e 0f10 	tst.w	lr, #16
 800f3e0:	bf08      	it	eq
 800f3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ea:	6010      	str	r0, [r2, #0]
 800f3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3f4:	b672      	cpsid	i
 800f3f6:	f380 8811 	msr	BASEPRI, r0
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	b662      	cpsie	i
 800f404:	f7ff f9c6 	bl	800e794 <vTaskSwitchContext>
 800f408:	f04f 0000 	mov.w	r0, #0
 800f40c:	f380 8811 	msr	BASEPRI, r0
 800f410:	bc09      	pop	{r0, r3}
 800f412:	6819      	ldr	r1, [r3, #0]
 800f414:	6808      	ldr	r0, [r1, #0]
 800f416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41a:	f01e 0f10 	tst.w	lr, #16
 800f41e:	bf08      	it	eq
 800f420:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f424:	f380 8809 	msr	PSP, r0
 800f428:	f3bf 8f6f 	isb	sy
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop

0800f430 <pxCurrentTCBConst>:
 800f430:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f434:	bf00      	nop
 800f436:	bf00      	nop

0800f438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
	__asm volatile
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	b672      	cpsid	i
 800f444:	f383 8811 	msr	BASEPRI, r3
 800f448:	f3bf 8f6f 	isb	sy
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	b662      	cpsie	i
 800f452:	607b      	str	r3, [r7, #4]
}
 800f454:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f456:	f7ff f8e3 	bl	800e620 <xTaskIncrementTick>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d003      	beq.n	800f468 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f460:	4b06      	ldr	r3, [pc, #24]	; (800f47c <SysTick_Handler+0x44>)
 800f462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f466:	601a      	str	r2, [r3, #0]
 800f468:	2300      	movs	r3, #0
 800f46a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	f383 8811 	msr	BASEPRI, r3
}
 800f472:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f474:	bf00      	nop
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	e000ed04 	.word	0xe000ed04

0800f480 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f480:	b480      	push	{r7}
 800f482:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f484:	4b0b      	ldr	r3, [pc, #44]	; (800f4b4 <vPortSetupTimerInterrupt+0x34>)
 800f486:	2200      	movs	r2, #0
 800f488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f48a:	4b0b      	ldr	r3, [pc, #44]	; (800f4b8 <vPortSetupTimerInterrupt+0x38>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f490:	4b0a      	ldr	r3, [pc, #40]	; (800f4bc <vPortSetupTimerInterrupt+0x3c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a0a      	ldr	r2, [pc, #40]	; (800f4c0 <vPortSetupTimerInterrupt+0x40>)
 800f496:	fba2 2303 	umull	r2, r3, r2, r3
 800f49a:	099b      	lsrs	r3, r3, #6
 800f49c:	4a09      	ldr	r2, [pc, #36]	; (800f4c4 <vPortSetupTimerInterrupt+0x44>)
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f4a2:	4b04      	ldr	r3, [pc, #16]	; (800f4b4 <vPortSetupTimerInterrupt+0x34>)
 800f4a4:	2207      	movs	r2, #7
 800f4a6:	601a      	str	r2, [r3, #0]
}
 800f4a8:	bf00      	nop
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	e000e010 	.word	0xe000e010
 800f4b8:	e000e018 	.word	0xe000e018
 800f4bc:	20000018 	.word	0x20000018
 800f4c0:	10624dd3 	.word	0x10624dd3
 800f4c4:	e000e014 	.word	0xe000e014

0800f4c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f4c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f4d8 <vPortEnableVFP+0x10>
 800f4cc:	6801      	ldr	r1, [r0, #0]
 800f4ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f4d2:	6001      	str	r1, [r0, #0]
 800f4d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f4d6:	bf00      	nop
 800f4d8:	e000ed88 	.word	0xe000ed88

0800f4dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f4e2:	f3ef 8305 	mrs	r3, IPSR
 800f4e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2b0f      	cmp	r3, #15
 800f4ec:	d916      	bls.n	800f51c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f4ee:	4a19      	ldr	r2, [pc, #100]	; (800f554 <vPortValidateInterruptPriority+0x78>)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4f8:	4b17      	ldr	r3, [pc, #92]	; (800f558 <vPortValidateInterruptPriority+0x7c>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	7afa      	ldrb	r2, [r7, #11]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d20c      	bcs.n	800f51c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f506:	b672      	cpsid	i
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	b662      	cpsie	i
 800f516:	607b      	str	r3, [r7, #4]
}
 800f518:	bf00      	nop
 800f51a:	e7fe      	b.n	800f51a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f51c:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <vPortValidateInterruptPriority+0x80>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f524:	4b0e      	ldr	r3, [pc, #56]	; (800f560 <vPortValidateInterruptPriority+0x84>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d90c      	bls.n	800f546 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f530:	b672      	cpsid	i
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	b662      	cpsie	i
 800f540:	603b      	str	r3, [r7, #0]
}
 800f542:	bf00      	nop
 800f544:	e7fe      	b.n	800f544 <vPortValidateInterruptPriority+0x68>
	}
 800f546:	bf00      	nop
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	e000e3f0 	.word	0xe000e3f0
 800f558:	2000052c 	.word	0x2000052c
 800f55c:	e000ed0c 	.word	0xe000ed0c
 800f560:	20000530 	.word	0x20000530

0800f564 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f56c:	2300      	movs	r3, #0
 800f56e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f570:	f7fe ff88 	bl	800e484 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f574:	4b5e      	ldr	r3, [pc, #376]	; (800f6f0 <pvPortMalloc+0x18c>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d101      	bne.n	800f580 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f57c:	f000 f920 	bl	800f7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f580:	4b5c      	ldr	r3, [pc, #368]	; (800f6f4 <pvPortMalloc+0x190>)
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4013      	ands	r3, r2
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f040 8092 	bne.w	800f6b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d01f      	beq.n	800f5d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f594:	2208      	movs	r2, #8
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4413      	add	r3, r2
 800f59a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f003 0307 	and.w	r3, r3, #7
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d016      	beq.n	800f5d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f023 0307 	bic.w	r3, r3, #7
 800f5ac:	3308      	adds	r3, #8
 800f5ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f003 0307 	and.w	r3, r3, #7
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00c      	beq.n	800f5d4 <pvPortMalloc+0x70>
	__asm volatile
 800f5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5be:	b672      	cpsid	i
 800f5c0:	f383 8811 	msr	BASEPRI, r3
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	f3bf 8f4f 	dsb	sy
 800f5cc:	b662      	cpsie	i
 800f5ce:	617b      	str	r3, [r7, #20]
}
 800f5d0:	bf00      	nop
 800f5d2:	e7fe      	b.n	800f5d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d06b      	beq.n	800f6b2 <pvPortMalloc+0x14e>
 800f5da:	4b47      	ldr	r3, [pc, #284]	; (800f6f8 <pvPortMalloc+0x194>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d866      	bhi.n	800f6b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f5e4:	4b45      	ldr	r3, [pc, #276]	; (800f6fc <pvPortMalloc+0x198>)
 800f5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f5e8:	4b44      	ldr	r3, [pc, #272]	; (800f6fc <pvPortMalloc+0x198>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5ee:	e004      	b.n	800f5fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	429a      	cmp	r2, r3
 800f602:	d903      	bls.n	800f60c <pvPortMalloc+0xa8>
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1f1      	bne.n	800f5f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f60c:	4b38      	ldr	r3, [pc, #224]	; (800f6f0 <pvPortMalloc+0x18c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f612:	429a      	cmp	r2, r3
 800f614:	d04d      	beq.n	800f6b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f616:	6a3b      	ldr	r3, [r7, #32]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2208      	movs	r2, #8
 800f61c:	4413      	add	r3, r2
 800f61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	6a3b      	ldr	r3, [r7, #32]
 800f626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	685a      	ldr	r2, [r3, #4]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	1ad2      	subs	r2, r2, r3
 800f630:	2308      	movs	r3, #8
 800f632:	005b      	lsls	r3, r3, #1
 800f634:	429a      	cmp	r2, r3
 800f636:	d921      	bls.n	800f67c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4413      	add	r3, r2
 800f63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	f003 0307 	and.w	r3, r3, #7
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00c      	beq.n	800f664 <pvPortMalloc+0x100>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64e:	b672      	cpsid	i
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	b662      	cpsie	i
 800f65e:	613b      	str	r3, [r7, #16]
}
 800f660:	bf00      	nop
 800f662:	e7fe      	b.n	800f662 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f666:	685a      	ldr	r2, [r3, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	1ad2      	subs	r2, r2, r3
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f676:	69b8      	ldr	r0, [r7, #24]
 800f678:	f000 f904 	bl	800f884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f67c:	4b1e      	ldr	r3, [pc, #120]	; (800f6f8 <pvPortMalloc+0x194>)
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	4a1c      	ldr	r2, [pc, #112]	; (800f6f8 <pvPortMalloc+0x194>)
 800f688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f68a:	4b1b      	ldr	r3, [pc, #108]	; (800f6f8 <pvPortMalloc+0x194>)
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	4b1c      	ldr	r3, [pc, #112]	; (800f700 <pvPortMalloc+0x19c>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d203      	bcs.n	800f69e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f696:	4b18      	ldr	r3, [pc, #96]	; (800f6f8 <pvPortMalloc+0x194>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a19      	ldr	r2, [pc, #100]	; (800f700 <pvPortMalloc+0x19c>)
 800f69c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	4b14      	ldr	r3, [pc, #80]	; (800f6f4 <pvPortMalloc+0x190>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	431a      	orrs	r2, r3
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f6b2:	f7fe fef5 	bl	800e4a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d101      	bne.n	800f6c0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f6bc:	f7f1 fa1a 	bl	8000af4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	f003 0307 	and.w	r3, r3, #7
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00c      	beq.n	800f6e4 <pvPortMalloc+0x180>
	__asm volatile
 800f6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ce:	b672      	cpsid	i
 800f6d0:	f383 8811 	msr	BASEPRI, r3
 800f6d4:	f3bf 8f6f 	isb	sy
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	b662      	cpsie	i
 800f6de:	60fb      	str	r3, [r7, #12]
}
 800f6e0:	bf00      	nop
 800f6e2:	e7fe      	b.n	800f6e2 <pvPortMalloc+0x17e>
	return pvReturn;
 800f6e4:	69fb      	ldr	r3, [r7, #28]
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3728      	adds	r7, #40	; 0x28
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	2000853c 	.word	0x2000853c
 800f6f4:	20008548 	.word	0x20008548
 800f6f8:	20008540 	.word	0x20008540
 800f6fc:	20008534 	.word	0x20008534
 800f700:	20008544 	.word	0x20008544

0800f704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d04c      	beq.n	800f7b0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f716:	2308      	movs	r3, #8
 800f718:	425b      	negs	r3, r3
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	4413      	add	r3, r2
 800f71e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	4b23      	ldr	r3, [pc, #140]	; (800f7b8 <vPortFree+0xb4>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4013      	ands	r3, r2
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10c      	bne.n	800f74c <vPortFree+0x48>
	__asm volatile
 800f732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f736:	b672      	cpsid	i
 800f738:	f383 8811 	msr	BASEPRI, r3
 800f73c:	f3bf 8f6f 	isb	sy
 800f740:	f3bf 8f4f 	dsb	sy
 800f744:	b662      	cpsie	i
 800f746:	60fb      	str	r3, [r7, #12]
}
 800f748:	bf00      	nop
 800f74a:	e7fe      	b.n	800f74a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00c      	beq.n	800f76e <vPortFree+0x6a>
	__asm volatile
 800f754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f758:	b672      	cpsid	i
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	b662      	cpsie	i
 800f768:	60bb      	str	r3, [r7, #8]
}
 800f76a:	bf00      	nop
 800f76c:	e7fe      	b.n	800f76c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	685a      	ldr	r2, [r3, #4]
 800f772:	4b11      	ldr	r3, [pc, #68]	; (800f7b8 <vPortFree+0xb4>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	4013      	ands	r3, r2
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d019      	beq.n	800f7b0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d115      	bne.n	800f7b0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	685a      	ldr	r2, [r3, #4]
 800f788:	4b0b      	ldr	r3, [pc, #44]	; (800f7b8 <vPortFree+0xb4>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	43db      	mvns	r3, r3
 800f78e:	401a      	ands	r2, r3
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f794:	f7fe fe76 	bl	800e484 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	685a      	ldr	r2, [r3, #4]
 800f79c:	4b07      	ldr	r3, [pc, #28]	; (800f7bc <vPortFree+0xb8>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	4a06      	ldr	r2, [pc, #24]	; (800f7bc <vPortFree+0xb8>)
 800f7a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f7a6:	6938      	ldr	r0, [r7, #16]
 800f7a8:	f000 f86c 	bl	800f884 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f7ac:	f7fe fe78 	bl	800e4a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f7b0:	bf00      	nop
 800f7b2:	3718      	adds	r7, #24
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	20008548 	.word	0x20008548
 800f7bc:	20008540 	.word	0x20008540

0800f7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f7cc:	4b27      	ldr	r3, [pc, #156]	; (800f86c <prvHeapInit+0xac>)
 800f7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f003 0307 	and.w	r3, r3, #7
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00c      	beq.n	800f7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	3307      	adds	r3, #7
 800f7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f023 0307 	bic.w	r3, r3, #7
 800f7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	1ad3      	subs	r3, r2, r3
 800f7ee:	4a1f      	ldr	r2, [pc, #124]	; (800f86c <prvHeapInit+0xac>)
 800f7f0:	4413      	add	r3, r2
 800f7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f7f8:	4a1d      	ldr	r2, [pc, #116]	; (800f870 <prvHeapInit+0xb0>)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7fe:	4b1c      	ldr	r3, [pc, #112]	; (800f870 <prvHeapInit+0xb0>)
 800f800:	2200      	movs	r2, #0
 800f802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	4413      	add	r3, r2
 800f80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f80c:	2208      	movs	r2, #8
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	1a9b      	subs	r3, r3, r2
 800f812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f023 0307 	bic.w	r3, r3, #7
 800f81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	4a15      	ldr	r2, [pc, #84]	; (800f874 <prvHeapInit+0xb4>)
 800f820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f822:	4b14      	ldr	r3, [pc, #80]	; (800f874 <prvHeapInit+0xb4>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2200      	movs	r2, #0
 800f828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f82a:	4b12      	ldr	r3, [pc, #72]	; (800f874 <prvHeapInit+0xb4>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	2200      	movs	r2, #0
 800f830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	68fa      	ldr	r2, [r7, #12]
 800f83a:	1ad2      	subs	r2, r2, r3
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f840:	4b0c      	ldr	r3, [pc, #48]	; (800f874 <prvHeapInit+0xb4>)
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	4a0a      	ldr	r2, [pc, #40]	; (800f878 <prvHeapInit+0xb8>)
 800f84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	4a09      	ldr	r2, [pc, #36]	; (800f87c <prvHeapInit+0xbc>)
 800f856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f858:	4b09      	ldr	r3, [pc, #36]	; (800f880 <prvHeapInit+0xc0>)
 800f85a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f85e:	601a      	str	r2, [r3, #0]
}
 800f860:	bf00      	nop
 800f862:	3714      	adds	r7, #20
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr
 800f86c:	20000534 	.word	0x20000534
 800f870:	20008534 	.word	0x20008534
 800f874:	2000853c 	.word	0x2000853c
 800f878:	20008544 	.word	0x20008544
 800f87c:	20008540 	.word	0x20008540
 800f880:	20008548 	.word	0x20008548

0800f884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f88c:	4b28      	ldr	r3, [pc, #160]	; (800f930 <prvInsertBlockIntoFreeList+0xac>)
 800f88e:	60fb      	str	r3, [r7, #12]
 800f890:	e002      	b.n	800f898 <prvInsertBlockIntoFreeList+0x14>
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	60fb      	str	r3, [r7, #12]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d8f7      	bhi.n	800f892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	68ba      	ldr	r2, [r7, #8]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d108      	bne.n	800f8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	685a      	ldr	r2, [r3, #4]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	441a      	add	r2, r3
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	441a      	add	r2, r3
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d118      	bne.n	800f90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	4b15      	ldr	r3, [pc, #84]	; (800f934 <prvInsertBlockIntoFreeList+0xb0>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d00d      	beq.n	800f902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	685a      	ldr	r2, [r3, #4]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	441a      	add	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	601a      	str	r2, [r3, #0]
 800f900:	e008      	b.n	800f914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f902:	4b0c      	ldr	r3, [pc, #48]	; (800f934 <prvInsertBlockIntoFreeList+0xb0>)
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	601a      	str	r2, [r3, #0]
 800f90a:	e003      	b.n	800f914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681a      	ldr	r2, [r3, #0]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d002      	beq.n	800f922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f922:	bf00      	nop
 800f924:	3714      	adds	r7, #20
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	20008534 	.word	0x20008534
 800f934:	2000853c 	.word	0x2000853c

0800f938 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b08c      	sub	sp, #48	; 0x30
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4a51      	ldr	r2, [pc, #324]	; (800fa88 <I2Cx_MspInit+0x150>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d14d      	bne.n	800f9e4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f948:	4b50      	ldr	r3, [pc, #320]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94c:	4a4f      	ldr	r2, [pc, #316]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f952:	6313      	str	r3, [r2, #48]	; 0x30
 800f954:	4b4d      	ldr	r3, [pc, #308]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f95c:	61bb      	str	r3, [r7, #24]
 800f95e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800f960:	2380      	movs	r3, #128	; 0x80
 800f962:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f964:	2312      	movs	r3, #18
 800f966:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f968:	2300      	movs	r3, #0
 800f96a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f96c:	2302      	movs	r3, #2
 800f96e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800f970:	2304      	movs	r3, #4
 800f972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f974:	f107 031c 	add.w	r3, r7, #28
 800f978:	4619      	mov	r1, r3
 800f97a:	4845      	ldr	r0, [pc, #276]	; (800fa90 <I2Cx_MspInit+0x158>)
 800f97c:	f7f5 ff16 	bl	80057ac <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800f980:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f986:	f107 031c 	add.w	r3, r7, #28
 800f98a:	4619      	mov	r1, r3
 800f98c:	4840      	ldr	r0, [pc, #256]	; (800fa90 <I2Cx_MspInit+0x158>)
 800f98e:	f7f5 ff0d 	bl	80057ac <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800f992:	4b3e      	ldr	r3, [pc, #248]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	4a3d      	ldr	r2, [pc, #244]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f99c:	6413      	str	r3, [r2, #64]	; 0x40
 800f99e:	4b3b      	ldr	r3, [pc, #236]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9a6:	617b      	str	r3, [r7, #20]
 800f9a8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800f9aa:	4b38      	ldr	r3, [pc, #224]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	4a37      	ldr	r2, [pc, #220]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f9b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f9b4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800f9b6:	4b35      	ldr	r3, [pc, #212]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	4a34      	ldr	r2, [pc, #208]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f9bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f9c0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	210f      	movs	r1, #15
 800f9c6:	2048      	movs	r0, #72	; 0x48
 800f9c8:	f7f5 f8c2 	bl	8004b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800f9cc:	2048      	movs	r0, #72	; 0x48
 800f9ce:	f7f5 f8db 	bl	8004b88 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	210f      	movs	r1, #15
 800f9d6:	2049      	movs	r0, #73	; 0x49
 800f9d8:	f7f5 f8ba 	bl	8004b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800f9dc:	2049      	movs	r0, #73	; 0x49
 800f9de:	f7f5 f8d3 	bl	8004b88 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800f9e2:	e04d      	b.n	800fa80 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f9e4:	4b29      	ldr	r3, [pc, #164]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e8:	4a28      	ldr	r2, [pc, #160]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f9ea:	f043 0302 	orr.w	r3, r3, #2
 800f9ee:	6313      	str	r3, [r2, #48]	; 0x30
 800f9f0:	4b26      	ldr	r3, [pc, #152]	; (800fa8c <I2Cx_MspInit+0x154>)
 800f9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9f4:	f003 0302 	and.w	r3, r3, #2
 800f9f8:	613b      	str	r3, [r7, #16]
 800f9fa:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800f9fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa00:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800fa02:	2312      	movs	r3, #18
 800fa04:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fa0a:	2302      	movs	r3, #2
 800fa0c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800fa0e:	2304      	movs	r3, #4
 800fa10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fa12:	f107 031c 	add.w	r3, r7, #28
 800fa16:	4619      	mov	r1, r3
 800fa18:	481e      	ldr	r0, [pc, #120]	; (800fa94 <I2Cx_MspInit+0x15c>)
 800fa1a:	f7f5 fec7 	bl	80057ac <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800fa1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fa24:	f107 031c 	add.w	r3, r7, #28
 800fa28:	4619      	mov	r1, r3
 800fa2a:	481a      	ldr	r0, [pc, #104]	; (800fa94 <I2Cx_MspInit+0x15c>)
 800fa2c:	f7f5 febe 	bl	80057ac <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800fa30:	4b16      	ldr	r3, [pc, #88]	; (800fa8c <I2Cx_MspInit+0x154>)
 800fa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa34:	4a15      	ldr	r2, [pc, #84]	; (800fa8c <I2Cx_MspInit+0x154>)
 800fa36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa3a:	6413      	str	r3, [r2, #64]	; 0x40
 800fa3c:	4b13      	ldr	r3, [pc, #76]	; (800fa8c <I2Cx_MspInit+0x154>)
 800fa3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fa44:	60fb      	str	r3, [r7, #12]
 800fa46:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800fa48:	4b10      	ldr	r3, [pc, #64]	; (800fa8c <I2Cx_MspInit+0x154>)
 800fa4a:	6a1b      	ldr	r3, [r3, #32]
 800fa4c:	4a0f      	ldr	r2, [pc, #60]	; (800fa8c <I2Cx_MspInit+0x154>)
 800fa4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa52:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800fa54:	4b0d      	ldr	r3, [pc, #52]	; (800fa8c <I2Cx_MspInit+0x154>)
 800fa56:	6a1b      	ldr	r3, [r3, #32]
 800fa58:	4a0c      	ldr	r2, [pc, #48]	; (800fa8c <I2Cx_MspInit+0x154>)
 800fa5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa5e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800fa60:	2200      	movs	r2, #0
 800fa62:	210f      	movs	r1, #15
 800fa64:	201f      	movs	r0, #31
 800fa66:	f7f5 f873 	bl	8004b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800fa6a:	201f      	movs	r0, #31
 800fa6c:	f7f5 f88c 	bl	8004b88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800fa70:	2200      	movs	r2, #0
 800fa72:	210f      	movs	r1, #15
 800fa74:	2020      	movs	r0, #32
 800fa76:	f7f5 f86b 	bl	8004b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800fa7a:	2020      	movs	r0, #32
 800fa7c:	f7f5 f884 	bl	8004b88 <HAL_NVIC_EnableIRQ>
}
 800fa80:	bf00      	nop
 800fa82:	3730      	adds	r7, #48	; 0x30
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	2000854c 	.word	0x2000854c
 800fa8c:	40023800 	.word	0x40023800
 800fa90:	40021c00 	.word	0x40021c00
 800fa94:	40020400 	.word	0x40020400

0800fa98 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7f6 fb63 	bl	800616c <HAL_I2C_GetState>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d125      	bne.n	800faf8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4a14      	ldr	r2, [pc, #80]	; (800fb00 <I2Cx_Init+0x68>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d103      	bne.n	800fabc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4a13      	ldr	r2, [pc, #76]	; (800fb04 <I2Cx_Init+0x6c>)
 800fab8:	601a      	str	r2, [r3, #0]
 800faba:	e002      	b.n	800fac2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4a12      	ldr	r2, [pc, #72]	; (800fb08 <I2Cx_Init+0x70>)
 800fac0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4a11      	ldr	r2, [pc, #68]	; (800fb0c <I2Cx_Init+0x74>)
 800fac6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2201      	movs	r2, #1
 800fad2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7ff ff23 	bl	800f938 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f7f6 f838 	bl	8005b68 <HAL_I2C_Init>
  }
}
 800faf8:	bf00      	nop
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	2000854c 	.word	0x2000854c
 800fb04:	40005c00 	.word	0x40005c00
 800fb08:	40005400 	.word	0x40005400
 800fb0c:	40912732 	.word	0x40912732

0800fb10 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b08a      	sub	sp, #40	; 0x28
 800fb14:	af04      	add	r7, sp, #16
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	4608      	mov	r0, r1
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	4603      	mov	r3, r0
 800fb20:	72fb      	strb	r3, [r7, #11]
 800fb22:	460b      	mov	r3, r1
 800fb24:	813b      	strh	r3, [r7, #8]
 800fb26:	4613      	mov	r3, r2
 800fb28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fb2e:	7afb      	ldrb	r3, [r7, #11]
 800fb30:	b299      	uxth	r1, r3
 800fb32:	88f8      	ldrh	r0, [r7, #6]
 800fb34:	893a      	ldrh	r2, [r7, #8]
 800fb36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb3a:	9302      	str	r3, [sp, #8]
 800fb3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb3e:	9301      	str	r3, [sp, #4]
 800fb40:	6a3b      	ldr	r3, [r7, #32]
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	4603      	mov	r3, r0
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	f7f6 f9f6 	bl	8005f38 <HAL_I2C_Mem_Read>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800fb50:	7dfb      	ldrb	r3, [r7, #23]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d004      	beq.n	800fb60 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800fb56:	7afb      	ldrb	r3, [r7, #11]
 800fb58:	4619      	mov	r1, r3
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f000 f832 	bl	800fbc4 <I2Cx_Error>
  }
  return status;    
 800fb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3718      	adds	r7, #24
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b08a      	sub	sp, #40	; 0x28
 800fb6e:	af04      	add	r7, sp, #16
 800fb70:	60f8      	str	r0, [r7, #12]
 800fb72:	4608      	mov	r0, r1
 800fb74:	4611      	mov	r1, r2
 800fb76:	461a      	mov	r2, r3
 800fb78:	4603      	mov	r3, r0
 800fb7a:	72fb      	strb	r3, [r7, #11]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	813b      	strh	r3, [r7, #8]
 800fb80:	4613      	mov	r3, r2
 800fb82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fb84:	2300      	movs	r3, #0
 800fb86:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fb88:	7afb      	ldrb	r3, [r7, #11]
 800fb8a:	b299      	uxth	r1, r3
 800fb8c:	88f8      	ldrh	r0, [r7, #6]
 800fb8e:	893a      	ldrh	r2, [r7, #8]
 800fb90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb94:	9302      	str	r3, [sp, #8]
 800fb96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb98:	9301      	str	r3, [sp, #4]
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	4603      	mov	r3, r0
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f7f6 f8b5 	bl	8005d10 <HAL_I2C_Mem_Write>
 800fba6:	4603      	mov	r3, r0
 800fba8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800fbaa:	7dfb      	ldrb	r3, [r7, #23]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d004      	beq.n	800fbba <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800fbb0:	7afb      	ldrb	r3, [r7, #11]
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f000 f805 	bl	800fbc4 <I2Cx_Error>
  }
  return status;
 800fbba:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3718      	adds	r7, #24
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	460b      	mov	r3, r1
 800fbce:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7f6 f859 	bl	8005c88 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f7ff ff5e 	bl	800fa98 <I2Cx_Init>
}
 800fbdc:	bf00      	nop
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800fbe8:	4802      	ldr	r0, [pc, #8]	; (800fbf4 <TS_IO_Init+0x10>)
 800fbea:	f7ff ff55 	bl	800fa98 <I2Cx_Init>
}
 800fbee:	bf00      	nop
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	2000854c 	.word	0x2000854c

0800fbf8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af02      	add	r7, sp, #8
 800fbfe:	4603      	mov	r3, r0
 800fc00:	71fb      	strb	r3, [r7, #7]
 800fc02:	460b      	mov	r3, r1
 800fc04:	71bb      	strb	r3, [r7, #6]
 800fc06:	4613      	mov	r3, r2
 800fc08:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800fc0a:	79bb      	ldrb	r3, [r7, #6]
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	79f9      	ldrb	r1, [r7, #7]
 800fc10:	2301      	movs	r3, #1
 800fc12:	9301      	str	r3, [sp, #4]
 800fc14:	1d7b      	adds	r3, r7, #5
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	2301      	movs	r3, #1
 800fc1a:	4803      	ldr	r0, [pc, #12]	; (800fc28 <TS_IO_Write+0x30>)
 800fc1c:	f7ff ffa5 	bl	800fb6a <I2Cx_WriteMultiple>
}
 800fc20:	bf00      	nop
 800fc22:	3708      	adds	r7, #8
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	2000854c 	.word	0x2000854c

0800fc2c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b086      	sub	sp, #24
 800fc30:	af02      	add	r7, sp, #8
 800fc32:	4603      	mov	r3, r0
 800fc34:	460a      	mov	r2, r1
 800fc36:	71fb      	strb	r3, [r7, #7]
 800fc38:	4613      	mov	r3, r2
 800fc3a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800fc40:	79bb      	ldrb	r3, [r7, #6]
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	79f9      	ldrb	r1, [r7, #7]
 800fc46:	2301      	movs	r3, #1
 800fc48:	9301      	str	r3, [sp, #4]
 800fc4a:	f107 030f 	add.w	r3, r7, #15
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	2301      	movs	r3, #1
 800fc52:	4804      	ldr	r0, [pc, #16]	; (800fc64 <TS_IO_Read+0x38>)
 800fc54:	f7ff ff5c 	bl	800fb10 <I2Cx_ReadMultiple>

  return read_value;
 800fc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3710      	adds	r7, #16
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	2000854c 	.word	0x2000854c

0800fc68 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7f3 fe3d 	bl	80038f0 <HAL_Delay>
}
 800fc76:	bf00      	nop
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
	...

0800fc80 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	4603      	mov	r3, r0
 800fc88:	460a      	mov	r2, r1
 800fc8a:	80fb      	strh	r3, [r7, #6]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800fc90:	2300      	movs	r3, #0
 800fc92:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800fc94:	4a14      	ldr	r2, [pc, #80]	; (800fce8 <BSP_TS_Init+0x68>)
 800fc96:	88fb      	ldrh	r3, [r7, #6]
 800fc98:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800fc9a:	4a14      	ldr	r2, [pc, #80]	; (800fcec <BSP_TS_Init+0x6c>)
 800fc9c:	88bb      	ldrh	r3, [r7, #4]
 800fc9e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800fca0:	4b13      	ldr	r3, [pc, #76]	; (800fcf0 <BSP_TS_Init+0x70>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2070      	movs	r0, #112	; 0x70
 800fca6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800fca8:	4b11      	ldr	r3, [pc, #68]	; (800fcf0 <BSP_TS_Init+0x70>)
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	2070      	movs	r0, #112	; 0x70
 800fcae:	4798      	blx	r3
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b51      	cmp	r3, #81	; 0x51
 800fcb4:	d111      	bne.n	800fcda <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800fcb6:	4b0f      	ldr	r3, [pc, #60]	; (800fcf4 <BSP_TS_Init+0x74>)
 800fcb8:	4a0d      	ldr	r2, [pc, #52]	; (800fcf0 <BSP_TS_Init+0x70>)
 800fcba:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800fcbc:	4b0e      	ldr	r3, [pc, #56]	; (800fcf8 <BSP_TS_Init+0x78>)
 800fcbe:	2270      	movs	r2, #112	; 0x70
 800fcc0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800fcc2:	4b0e      	ldr	r3, [pc, #56]	; (800fcfc <BSP_TS_Init+0x7c>)
 800fcc4:	2208      	movs	r2, #8
 800fcc6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800fcc8:	4b0a      	ldr	r3, [pc, #40]	; (800fcf4 <BSP_TS_Init+0x74>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	4a0a      	ldr	r2, [pc, #40]	; (800fcf8 <BSP_TS_Init+0x78>)
 800fcd0:	7812      	ldrb	r2, [r2, #0]
 800fcd2:	b292      	uxth	r2, r2
 800fcd4:	4610      	mov	r0, r2
 800fcd6:	4798      	blx	r3
 800fcd8:	e001      	b.n	800fcde <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800fcda:	2303      	movs	r3, #3
 800fcdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fcde:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	2000859c 	.word	0x2000859c
 800fcec:	2000859e 	.word	0x2000859e
 800fcf0:	20000058 	.word	0x20000058
 800fcf4:	20008598 	.word	0x20008598
 800fcf8:	200085a1 	.word	0x200085a1
 800fcfc:	200085a0 	.word	0x200085a0

0800fd00 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800fd00:	b590      	push	{r4, r7, lr}
 800fd02:	b097      	sub	sp, #92	; 0x5c
 800fd04:	af02      	add	r7, sp, #8
 800fd06:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800fd1a:	4b97      	ldr	r3, [pc, #604]	; (800ff78 <BSP_TS_GetState+0x278>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	4a96      	ldr	r2, [pc, #600]	; (800ff7c <BSP_TS_GetState+0x27c>)
 800fd22:	7812      	ldrb	r2, [r2, #0]
 800fd24:	b292      	uxth	r2, r2
 800fd26:	4610      	mov	r0, r2
 800fd28:	4798      	blx	r3
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f000 81a8 	beq.w	801008c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd40:	e197      	b.n	8010072 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800fd42:	4b8d      	ldr	r3, [pc, #564]	; (800ff78 <BSP_TS_GetState+0x278>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	695b      	ldr	r3, [r3, #20]
 800fd48:	4a8c      	ldr	r2, [pc, #560]	; (800ff7c <BSP_TS_GetState+0x27c>)
 800fd4a:	7812      	ldrb	r2, [r2, #0]
 800fd4c:	b290      	uxth	r0, r2
 800fd4e:	f107 0120 	add.w	r1, r7, #32
 800fd52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd54:	0052      	lsls	r2, r2, #1
 800fd56:	188c      	adds	r4, r1, r2
 800fd58:	f107 0114 	add.w	r1, r7, #20
 800fd5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd5e:	0052      	lsls	r2, r2, #1
 800fd60:	440a      	add	r2, r1
 800fd62:	4621      	mov	r1, r4
 800fd64:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800fd66:	4b86      	ldr	r3, [pc, #536]	; (800ff80 <BSP_TS_GetState+0x280>)
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d11b      	bne.n	800fda6 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800fd6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd70:	005b      	lsls	r3, r3, #1
 800fd72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd76:	4413      	add	r3, r2
 800fd78:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fd7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd7e:	005b      	lsls	r3, r3, #1
 800fd80:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd84:	440b      	add	r3, r1
 800fd86:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800fd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd8c:	005b      	lsls	r3, r3, #1
 800fd8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd92:	4413      	add	r3, r2
 800fd94:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fd98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fda0:	440b      	add	r3, r1
 800fda2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800fda6:	4b76      	ldr	r3, [pc, #472]	; (800ff80 <BSP_TS_GetState+0x280>)
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	f003 0302 	and.w	r3, r3, #2
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d010      	beq.n	800fdd4 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800fdb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdb4:	005b      	lsls	r3, r3, #1
 800fdb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fdba:	4413      	add	r3, r2
 800fdbc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800fdc0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdc8:	005b      	lsls	r3, r3, #1
 800fdca:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fdce:	440b      	add	r3, r1
 800fdd0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800fdd4:	4b6a      	ldr	r3, [pc, #424]	; (800ff80 <BSP_TS_GetState+0x280>)
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	f003 0304 	and.w	r3, r3, #4
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d010      	beq.n	800fe02 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800fde0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fde8:	4413      	add	r3, r2
 800fdea:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800fdee:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdf6:	005b      	lsls	r3, r3, #1
 800fdf8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fdfc:	440b      	add	r3, r1
 800fdfe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800fe02:	4b5f      	ldr	r3, [pc, #380]	; (800ff80 <BSP_TS_GetState+0x280>)
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	f003 0308 	and.w	r3, r3, #8
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d01b      	beq.n	800fe46 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800fe0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe10:	005b      	lsls	r3, r3, #1
 800fe12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe16:	4413      	add	r3, r2
 800fe18:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fe1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fe24:	440b      	add	r3, r1
 800fe26:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800fe2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe2c:	005b      	lsls	r3, r3, #1
 800fe2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe32:	4413      	add	r3, r2
 800fe34:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fe38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe3a:	005b      	lsls	r3, r3, #1
 800fe3c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fe40:	440b      	add	r3, r1
 800fe42:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800fe46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe48:	005b      	lsls	r3, r3, #1
 800fe4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe4e:	4413      	add	r3, r2
 800fe50:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fe54:	4619      	mov	r1, r3
 800fe56:	4a4b      	ldr	r2, [pc, #300]	; (800ff84 <BSP_TS_GetState+0x284>)
 800fe58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5e:	4299      	cmp	r1, r3
 800fe60:	d90e      	bls.n	800fe80 <BSP_TS_GetState+0x180>
 800fe62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe6a:	4413      	add	r3, r2
 800fe6c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800fe70:	4944      	ldr	r1, [pc, #272]	; (800ff84 <BSP_TS_GetState+0x284>)
 800fe72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	e00d      	b.n	800fe9c <BSP_TS_GetState+0x19c>
 800fe80:	4a40      	ldr	r2, [pc, #256]	; (800ff84 <BSP_TS_GetState+0x284>)
 800fe82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe8c:	005b      	lsls	r3, r3, #1
 800fe8e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fe92:	440b      	add	r3, r1
 800fe94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fe98:	1ad3      	subs	r3, r2, r3
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800fea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fea2:	005b      	lsls	r3, r3, #1
 800fea4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fea8:	4413      	add	r3, r2
 800feaa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800feae:	4619      	mov	r1, r3
 800feb0:	4a35      	ldr	r2, [pc, #212]	; (800ff88 <BSP_TS_GetState+0x288>)
 800feb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feb8:	4299      	cmp	r1, r3
 800feba:	d90e      	bls.n	800feda <BSP_TS_GetState+0x1da>
 800febc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800febe:	005b      	lsls	r3, r3, #1
 800fec0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fec4:	4413      	add	r3, r2
 800fec6:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800feca:	492f      	ldr	r1, [pc, #188]	; (800ff88 <BSP_TS_GetState+0x288>)
 800fecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fece:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	e00d      	b.n	800fef6 <BSP_TS_GetState+0x1f6>
 800feda:	4a2b      	ldr	r2, [pc, #172]	; (800ff88 <BSP_TS_GetState+0x288>)
 800fedc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fee6:	005b      	lsls	r3, r3, #1
 800fee8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800feec:	440b      	add	r3, r1
 800feee:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800fefa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fefe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ff02:	4413      	add	r3, r2
 800ff04:	2b05      	cmp	r3, #5
 800ff06:	dd17      	ble.n	800ff38 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800ff08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff0a:	005b      	lsls	r3, r3, #1
 800ff0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff10:	4413      	add	r3, r2
 800ff12:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800ff16:	4619      	mov	r1, r3
 800ff18:	4a1a      	ldr	r2, [pc, #104]	; (800ff84 <BSP_TS_GetState+0x284>)
 800ff1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800ff20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff22:	005b      	lsls	r3, r3, #1
 800ff24:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff28:	4413      	add	r3, r2
 800ff2a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	4a15      	ldr	r2, [pc, #84]	; (800ff88 <BSP_TS_GetState+0x288>)
 800ff32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800ff38:	4b10      	ldr	r3, [pc, #64]	; (800ff7c <BSP_TS_GetState+0x27c>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	2b70      	cmp	r3, #112	; 0x70
 800ff3e:	d125      	bne.n	800ff8c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800ff40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff48:	4413      	add	r3, r2
 800ff4a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff52:	005b      	lsls	r3, r3, #1
 800ff54:	4413      	add	r3, r2
 800ff56:	460a      	mov	r2, r1
 800ff58:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800ff5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff5c:	005b      	lsls	r3, r3, #1
 800ff5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff62:	4413      	add	r3, r2
 800ff64:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	005b      	lsls	r3, r3, #1
 800ff70:	4413      	add	r3, r2
 800ff72:	460a      	mov	r2, r1
 800ff74:	809a      	strh	r2, [r3, #4]
 800ff76:	e02c      	b.n	800ffd2 <BSP_TS_GetState+0x2d2>
 800ff78:	20008598 	.word	0x20008598
 800ff7c:	200085a1 	.word	0x200085a1
 800ff80:	200085a0 	.word	0x200085a0
 800ff84:	200085a4 	.word	0x200085a4
 800ff88:	200085b8 	.word	0x200085b8
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800ff8c:	4b42      	ldr	r3, [pc, #264]	; (8010098 <BSP_TS_GetState+0x398>)
 800ff8e:	881b      	ldrh	r3, [r3, #0]
 800ff90:	4619      	mov	r1, r3
 800ff92:	4a42      	ldr	r2, [pc, #264]	; (801009c <BSP_TS_GetState+0x39c>)
 800ff94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff9a:	fb03 f301 	mul.w	r3, r3, r1
 800ff9e:	0b1b      	lsrs	r3, r3, #12
 800ffa0:	b299      	uxth	r1, r3
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffa6:	005b      	lsls	r3, r3, #1
 800ffa8:	4413      	add	r3, r2
 800ffaa:	460a      	mov	r2, r1
 800ffac:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800ffae:	4b3c      	ldr	r3, [pc, #240]	; (80100a0 <BSP_TS_GetState+0x3a0>)
 800ffb0:	881b      	ldrh	r3, [r3, #0]
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	4a3b      	ldr	r2, [pc, #236]	; (80100a4 <BSP_TS_GetState+0x3a4>)
 800ffb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffbc:	fb03 f301 	mul.w	r3, r3, r1
 800ffc0:	0b1b      	lsrs	r3, r3, #12
 800ffc2:	b299      	uxth	r1, r3
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffc8:	3304      	adds	r3, #4
 800ffca:	005b      	lsls	r3, r3, #1
 800ffcc:	4413      	add	r3, r2
 800ffce:	460a      	mov	r2, r1
 800ffd0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800ffd2:	4b35      	ldr	r3, [pc, #212]	; (80100a8 <BSP_TS_GetState+0x3a8>)
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	b298      	uxth	r0, r3
 800ffd8:	f107 010c 	add.w	r1, r7, #12
 800ffdc:	f107 0210 	add.w	r2, r7, #16
 800ffe0:	f107 0308 	add.w	r3, r7, #8
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ffea:	f008 faa5 	bl	8018538 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	b2d9      	uxtb	r1, r3
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fff6:	4413      	add	r3, r2
 800fff8:	3316      	adds	r3, #22
 800fffa:	460a      	mov	r2, r1
 800fffc:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	b2d9      	uxtb	r1, r3
 8010002:	687a      	ldr	r2, [r7, #4]
 8010004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010006:	4413      	add	r3, r2
 8010008:	3320      	adds	r3, #32
 801000a:	460a      	mov	r2, r1
 801000c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	2b03      	cmp	r3, #3
 8010012:	d827      	bhi.n	8010064 <BSP_TS_GetState+0x364>
 8010014:	a201      	add	r2, pc, #4	; (adr r2, 801001c <BSP_TS_GetState+0x31c>)
 8010016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801001a:	bf00      	nop
 801001c:	0801002d 	.word	0x0801002d
 8010020:	0801003b 	.word	0x0801003b
 8010024:	08010049 	.word	0x08010049
 8010028:	08010057 	.word	0x08010057
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010030:	4413      	add	r3, r2
 8010032:	331b      	adds	r3, #27
 8010034:	2201      	movs	r2, #1
 8010036:	701a      	strb	r2, [r3, #0]
          break;
 8010038:	e018      	b.n	801006c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801003e:	4413      	add	r3, r2
 8010040:	331b      	adds	r3, #27
 8010042:	2202      	movs	r2, #2
 8010044:	701a      	strb	r2, [r3, #0]
          break;
 8010046:	e011      	b.n	801006c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801004c:	4413      	add	r3, r2
 801004e:	331b      	adds	r3, #27
 8010050:	2203      	movs	r2, #3
 8010052:	701a      	strb	r2, [r3, #0]
          break;
 8010054:	e00a      	b.n	801006c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801005a:	4413      	add	r3, r2
 801005c:	331b      	adds	r3, #27
 801005e:	2200      	movs	r2, #0
 8010060:	701a      	strb	r2, [r3, #0]
          break;
 8010062:	e003      	b.n	801006c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 801006a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 801006c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801006e:	3301      	adds	r3, #1
 8010070:	64bb      	str	r3, [r7, #72]	; 0x48
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	461a      	mov	r2, r3
 8010078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801007a:	4293      	cmp	r3, r2
 801007c:	f4ff ae61 	bcc.w	800fd42 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f813 	bl	80100ac <BSP_TS_Get_GestureId>
 8010086:	4603      	mov	r3, r0
 8010088:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 801008c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8010090:	4618      	mov	r0, r3
 8010092:	3754      	adds	r7, #84	; 0x54
 8010094:	46bd      	mov	sp, r7
 8010096:	bd90      	pop	{r4, r7, pc}
 8010098:	2000859c 	.word	0x2000859c
 801009c:	200085a4 	.word	0x200085a4
 80100a0:	2000859e 	.word	0x2000859e
 80100a4:	200085b8 	.word	0x200085b8
 80100a8:	200085a1 	.word	0x200085a1

080100ac <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80100b8:	2300      	movs	r3, #0
 80100ba:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80100bc:	4b3b      	ldr	r3, [pc, #236]	; (80101ac <BSP_TS_Get_GestureId+0x100>)
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	f107 0208 	add.w	r2, r7, #8
 80100c6:	4611      	mov	r1, r2
 80100c8:	4618      	mov	r0, r3
 80100ca:	f008 fa1c 	bl	8018506 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2b49      	cmp	r3, #73	; 0x49
 80100d2:	d05e      	beq.n	8010192 <BSP_TS_Get_GestureId+0xe6>
 80100d4:	2b49      	cmp	r3, #73	; 0x49
 80100d6:	d860      	bhi.n	801019a <BSP_TS_Get_GestureId+0xee>
 80100d8:	2b1c      	cmp	r3, #28
 80100da:	d83f      	bhi.n	801015c <BSP_TS_Get_GestureId+0xb0>
 80100dc:	2b1c      	cmp	r3, #28
 80100de:	d85c      	bhi.n	801019a <BSP_TS_Get_GestureId+0xee>
 80100e0:	a201      	add	r2, pc, #4	; (adr r2, 80100e8 <BSP_TS_Get_GestureId+0x3c>)
 80100e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e6:	bf00      	nop
 80100e8:	08010163 	.word	0x08010163
 80100ec:	0801019b 	.word	0x0801019b
 80100f0:	0801019b 	.word	0x0801019b
 80100f4:	0801019b 	.word	0x0801019b
 80100f8:	0801019b 	.word	0x0801019b
 80100fc:	0801019b 	.word	0x0801019b
 8010100:	0801019b 	.word	0x0801019b
 8010104:	0801019b 	.word	0x0801019b
 8010108:	0801019b 	.word	0x0801019b
 801010c:	0801019b 	.word	0x0801019b
 8010110:	0801019b 	.word	0x0801019b
 8010114:	0801019b 	.word	0x0801019b
 8010118:	0801019b 	.word	0x0801019b
 801011c:	0801019b 	.word	0x0801019b
 8010120:	0801019b 	.word	0x0801019b
 8010124:	0801019b 	.word	0x0801019b
 8010128:	0801016b 	.word	0x0801016b
 801012c:	0801019b 	.word	0x0801019b
 8010130:	0801019b 	.word	0x0801019b
 8010134:	0801019b 	.word	0x0801019b
 8010138:	08010173 	.word	0x08010173
 801013c:	0801019b 	.word	0x0801019b
 8010140:	0801019b 	.word	0x0801019b
 8010144:	0801019b 	.word	0x0801019b
 8010148:	0801017b 	.word	0x0801017b
 801014c:	0801019b 	.word	0x0801019b
 8010150:	0801019b 	.word	0x0801019b
 8010154:	0801019b 	.word	0x0801019b
 8010158:	08010183 	.word	0x08010183
 801015c:	2b40      	cmp	r3, #64	; 0x40
 801015e:	d014      	beq.n	801018a <BSP_TS_Get_GestureId+0xde>
 8010160:	e01b      	b.n	801019a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2200      	movs	r2, #0
 8010166:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010168:	e01a      	b.n	80101a0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2201      	movs	r2, #1
 801016e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010170:	e016      	b.n	80101a0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2202      	movs	r2, #2
 8010176:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010178:	e012      	b.n	80101a0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2203      	movs	r2, #3
 801017e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010180:	e00e      	b.n	80101a0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2204      	movs	r2, #4
 8010186:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010188:	e00a      	b.n	80101a0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2205      	movs	r2, #5
 801018e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010190:	e006      	b.n	80101a0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2206      	movs	r2, #6
 8010196:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010198:	e002      	b.n	80101a0 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 801019a:	2301      	movs	r3, #1
 801019c:	73fb      	strb	r3, [r7, #15]
      break;
 801019e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80101a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	200085a1 	.word	0x200085a1

080101b0 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80101b4:	f007 fbd2 	bl	801795c <touchgfx_init>
}
 80101b8:	bf00      	nop
 80101ba:	bd80      	pop	{r7, pc}

080101bc <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 80101c0:	f007 fbf6 	bl	80179b0 <touchgfx_taskEntry>
}
 80101c4:	bf00      	nop
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
    {
 80101d0:	4a04      	ldr	r2, [pc, #16]	; (80101e4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	601a      	str	r2, [r3, #0]
    }
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4618      	mov	r0, r3
 80101da:	370c      	adds	r7, #12
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr
 80101e4:	0802a434 	.word	0x0802a434

080101e8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
    }
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f7ff ffe9 	bl	80101c8 <_ZN8touchgfx12FontProviderD1Ev>
 80101f6:	2104      	movs	r1, #4
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f018 f9d5 	bl	80285a8 <_ZdlPvj>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4618      	mov	r0, r3
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	460b      	mov	r3, r1
 8010212:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8010214:	887b      	ldrh	r3, [r7, #2]
 8010216:	2b07      	cmp	r3, #7
 8010218:	d83a      	bhi.n	8010290 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 801021a:	a201      	add	r2, pc, #4	; (adr r2, 8010220 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 801021c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010220:	08010241 	.word	0x08010241
 8010224:	0801024b 	.word	0x0801024b
 8010228:	08010255 	.word	0x08010255
 801022c:	0801025f 	.word	0x0801025f
 8010230:	08010269 	.word	0x08010269
 8010234:	08010273 	.word	0x08010273
 8010238:	0801027d 	.word	0x0801027d
 801023c:	08010287 	.word	0x08010287
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8010240:	f005 fa72 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 8010244:	4603      	mov	r3, r0
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	e023      	b.n	8010292 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 801024a:	f005 fa6d 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 801024e:	4603      	mov	r3, r0
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	e01e      	b.n	8010292 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8010254:	f005 fa68 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 8010258:	4603      	mov	r3, r0
 801025a:	689b      	ldr	r3, [r3, #8]
 801025c:	e019      	b.n	8010292 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 801025e:	f005 fa63 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 8010262:	4603      	mov	r3, r0
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	e014      	b.n	8010292 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8010268:	f005 fa5e 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 801026c:	4603      	mov	r3, r0
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	e00f      	b.n	8010292 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8010272:	f005 fa59 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 8010276:	4603      	mov	r3, r0
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	e00a      	b.n	8010292 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 801027c:	f005 fa54 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 8010280:	4603      	mov	r3, r0
 8010282:	695b      	ldr	r3, [r3, #20]
 8010284:	e005      	b.n	8010292 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8010286:	f005 fa4f 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 801028a:	4603      	mov	r3, r0
 801028c:	699b      	ldr	r3, [r3, #24]
 801028e:	e000      	b.n	8010292 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 8010290:	2300      	movs	r3, #0
    }
}
 8010292:	4618      	mov	r0, r3
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop

0801029c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	4a05      	ldr	r2, [pc, #20]	; (80102bc <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	601a      	str	r2, [r3, #0]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff ff8b 	bl	80101c8 <_ZN8touchgfx12FontProviderD1Ev>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	0802a420 	.word	0x0802a420

080102c0 <_ZN23ApplicationFontProviderD0Ev>:
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff ffe7 	bl	801029c <_ZN23ApplicationFontProviderD1Ev>
 80102ce:	2104      	movs	r1, #4
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f018 f969 	bl	80285a8 <_ZdlPvj>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	4a04      	ldr	r2, [pc, #16]	; (80102fc <_ZN8touchgfx4FontD1Ev+0x1c>)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	601a      	str	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4618      	mov	r0, r3
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr
 80102fc:	0802c984 	.word	0x0802c984

08010300 <_ZN8touchgfx4FontD0Ev>:
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7ff ffe9 	bl	80102e0 <_ZN8touchgfx4FontD1Ev>
 801030e:	2110      	movs	r1, #16
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f018 f949 	bl	80285a8 <_ZdlPvj>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4618      	mov	r0, r3
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8010320:	b590      	push	{r4, r7, lr}
 8010322:	b087      	sub	sp, #28
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	460b      	mov	r3, r1
 801032a:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 801032c:	2300      	movs	r3, #0
 801032e:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8010330:	2300      	movs	r3, #0
 8010332:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	3308      	adds	r3, #8
 801033a:	681c      	ldr	r4, [r3, #0]
 801033c:	f107 030f 	add.w	r3, r7, #15
 8010340:	f107 0210 	add.w	r2, r7, #16
 8010344:	8879      	ldrh	r1, [r7, #2]
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	47a0      	blx	r4
 801034a:	6178      	str	r0, [r7, #20]
        return glyph;
 801034c:	697b      	ldr	r3, [r7, #20]
    }
 801034e:	4618      	mov	r0, r3
 8010350:	371c      	adds	r7, #28
 8010352:	46bd      	mov	sp, r7
 8010354:	bd90      	pop	{r4, r7, pc}

08010356 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8010356:	b480      	push	{r7}
 8010358:	b083      	sub	sp, #12
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	895b      	ldrh	r3, [r3, #10]
    }
 8010362:	4618      	mov	r0, r3
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801036e:	b480      	push	{r7}
 8010370:	b083      	sub	sp, #12
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	899b      	ldrh	r3, [r3, #12]
    }
 801037a:	4618      	mov	r0, r3
 801037c:	370c      	adds	r7, #12
 801037e:	46bd      	mov	sp, r7
 8010380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010384:	4770      	bx	lr

08010386 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 8010386:	b480      	push	{r7}
 8010388:	b083      	sub	sp, #12
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	889b      	ldrh	r3, [r3, #4]
    }
 8010392:	4618      	mov	r0, r3
 8010394:	370c      	adds	r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr

0801039e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 801039e:	b480      	push	{r7}
 80103a0:	b083      	sub	sp, #12
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	889a      	ldrh	r2, [r3, #4]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	799b      	ldrb	r3, [r3, #6]
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	4413      	add	r3, r2
 80103b2:	b29b      	uxth	r3, r3
    }
 80103b4:	4618      	mov	r0, r3
 80103b6:	370c      	adds	r7, #12
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr

080103c0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	79db      	ldrb	r3, [r3, #7]
 80103cc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80103d0:	b2db      	uxtb	r3, r3
    }
 80103d2:	4618      	mov	r0, r3
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 80103de:	b480      	push	{r7}
 80103e0:	b083      	sub	sp, #12
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
    {
        return a4;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	79db      	ldrb	r3, [r3, #7]
 80103ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80103ee:	b2db      	uxtb	r3, r3
    }
 80103f0:	4618      	mov	r0, r3
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	4a05      	ldr	r2, [pc, #20]	; (801041c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff ff67 	bl	80102e0 <_ZN8touchgfx4FontD1Ev>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	0802ca3c 	.word	0x0802ca3c

08010420 <_ZN8touchgfx9ConstFontD0Ev>:
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ff ffe7 	bl	80103fc <_ZN8touchgfx9ConstFontD1Ev>
 801042e:	2118      	movs	r1, #24
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f018 f8b9 	bl	80285a8 <_ZdlPvj>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4618      	mov	r0, r3
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	4a05      	ldr	r2, [pc, #20]	; (8010460 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	601a      	str	r2, [r3, #0]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff ffd3 	bl	80103fc <_ZN8touchgfx9ConstFontD1Ev>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4618      	mov	r0, r3
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	0802a448 	.word	0x0802a448

08010464 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7ff ffe7 	bl	8010440 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010472:	2124      	movs	r1, #36	; 0x24
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f018 f897 	bl	80285a8 <_ZdlPvj>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 f82d 	bl	80104ec <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 8010492:	4b08      	ldr	r3, [pc, #32]	; (80104b4 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	4b08      	ldr	r3, [pc, #32]	; (80104b8 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8010498:	6819      	ldr	r1, [r3, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	005b      	lsls	r3, r3, #1
 80104a0:	440b      	add	r3, r1
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	4413      	add	r3, r2
 80104a8:	681b      	ldr	r3, [r3, #0]
    }
 80104aa:	4618      	mov	r0, r3
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	2000bf88 	.word	0x2000bf88
 80104b8:	2000bf80 	.word	0x2000bf80

080104bc <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f000 f811 	bl	80104ec <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 80104ca:	4b07      	ldr	r3, [pc, #28]	; (80104e8 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	005b      	lsls	r3, r3, #1
 80104d4:	4413      	add	r3, r2
 80104d6:	785b      	ldrb	r3, [r3, #1]
 80104d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80104dc:	b2db      	uxtb	r3, r3
    }
 80104de:	4618      	mov	r0, r3
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	2000bf80 	.word	0x2000bf80

080104ec <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80104f4:	4b0c      	ldr	r3, [pc, #48]	; (8010528 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d105      	bne.n	8010508 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 80104fc:	4b0b      	ldr	r3, [pc, #44]	; (801052c <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 80104fe:	4a0c      	ldr	r2, [pc, #48]	; (8010530 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8010500:	21de      	movs	r1, #222	; 0xde
 8010502:	480c      	ldr	r0, [pc, #48]	; (8010534 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010504:	f018 f87e 	bl	8028604 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	881a      	ldrh	r2, [r3, #0]
 801050c:	4b0a      	ldr	r3, [pc, #40]	; (8010538 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	429a      	cmp	r2, r3
 8010512:	d305      	bcc.n	8010520 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8010514:	4b09      	ldr	r3, [pc, #36]	; (801053c <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8010516:	4a06      	ldr	r2, [pc, #24]	; (8010530 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8010518:	21df      	movs	r1, #223	; 0xdf
 801051a:	4806      	ldr	r0, [pc, #24]	; (8010534 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 801051c:	f018 f872 	bl	8028604 <__assert_func>
    }
 8010520:	bf00      	nop
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	2000bf80 	.word	0x2000bf80
 801052c:	0802979c 	.word	0x0802979c
 8010530:	080297e0 	.word	0x080297e0
 8010534:	08029810 	.word	0x08029810
 8010538:	2000bf84 	.word	0x2000bf84
 801053c:	08029854 	.word	0x08029854

08010540 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	7b5b      	ldrb	r3, [r3, #13]
 801054c:	021b      	lsls	r3, r3, #8
 801054e:	b21b      	sxth	r3, r3
 8010550:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010554:	b21a      	sxth	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	7adb      	ldrb	r3, [r3, #11]
 801055a:	b21b      	sxth	r3, r3
 801055c:	4313      	orrs	r3, r2
 801055e:	b21b      	sxth	r3, r3
 8010560:	b29b      	uxth	r3, r3
    }
 8010562:	4618      	mov	r0, r3
 8010564:	370c      	adds	r7, #12
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr

0801056e <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 801056e:	b480      	push	{r7}
 8010570:	b083      	sub	sp, #12
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a1b      	ldr	r3, [r3, #32]
    }
 801057a:	4618      	mov	r0, r3
 801057c:	370c      	adds	r7, #12
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr
	...

08010588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8010588:	b580      	push	{r7, lr}
 801058a:	b08c      	sub	sp, #48	; 0x30
 801058c:	af08      	add	r7, sp, #32
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	4611      	mov	r1, r2
 8010594:	461a      	mov	r2, r3
 8010596:	460b      	mov	r3, r1
 8010598:	80fb      	strh	r3, [r7, #6]
 801059a:	4613      	mov	r3, r2
 801059c:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 801059e:	68f8      	ldr	r0, [r7, #12]
 80105a0:	88b9      	ldrh	r1, [r7, #4]
 80105a2:	88fa      	ldrh	r2, [r7, #6]
 80105a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80105a6:	9306      	str	r3, [sp, #24]
 80105a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80105aa:	9305      	str	r3, [sp, #20]
 80105ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80105b0:	9304      	str	r3, [sp, #16]
 80105b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80105b6:	9303      	str	r3, [sp, #12]
 80105b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80105bc:	9302      	str	r3, [sp, #8]
 80105be:	7f3b      	ldrb	r3, [r7, #28]
 80105c0:	9301      	str	r3, [sp, #4]
 80105c2:	7e3b      	ldrb	r3, [r7, #24]
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	460b      	mov	r3, r1
 80105c8:	68b9      	ldr	r1, [r7, #8]
 80105ca:	f00c fcd5 	bl	801cf78 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80105ce:	4a08      	ldr	r2, [pc, #32]	; (80105f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	601a      	str	r2, [r3, #0]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105d8:	619a      	str	r2, [r3, #24]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105de:	61da      	str	r2, [r3, #28]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105e4:	621a      	str	r2, [r3, #32]
{
}
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	4618      	mov	r0, r3
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	0802a448 	.word	0x0802a448

080105f4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80105f4:	b480      	push	{r7}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	699b      	ldr	r3, [r3, #24]
 8010602:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	889b      	ldrh	r3, [r3, #4]
 8010608:	0adb      	lsrs	r3, r3, #11
 801060a:	b29b      	uxth	r3, r3
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	4413      	add	r3, r2
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4413      	add	r3, r2
}
 801061a:	4618      	mov	r0, r3
 801061c:	3714      	adds	r7, #20
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr

08010626 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b086      	sub	sp, #24
 801062a:	af00      	add	r7, sp, #0
 801062c:	60f8      	str	r0, [r7, #12]
 801062e:	460b      	mov	r3, r1
 8010630:	607a      	str	r2, [r7, #4]
 8010632:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d003      	beq.n	8010642 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	7b1b      	ldrb	r3, [r3, #12]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d101      	bne.n	8010646 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8010642:	2300      	movs	r3, #0
 8010644:	e023      	b.n	801068e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7ff ff7a 	bl	8010540 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 801064c:	4603      	mov	r3, r0
 801064e:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8010650:	8abb      	ldrh	r3, [r7, #20]
 8010652:	82fb      	strh	r3, [r7, #22]
 8010654:	8afa      	ldrh	r2, [r7, #22]
 8010656:	8abb      	ldrh	r3, [r7, #20]
 8010658:	6879      	ldr	r1, [r7, #4]
 801065a:	7b09      	ldrb	r1, [r1, #12]
 801065c:	440b      	add	r3, r1
 801065e:	429a      	cmp	r2, r3
 8010660:	da14      	bge.n	801068c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	69da      	ldr	r2, [r3, #28]
 8010666:	8afb      	ldrh	r3, [r7, #22]
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	4413      	add	r3, r2
 801066c:	881b      	ldrh	r3, [r3, #0]
 801066e:	897a      	ldrh	r2, [r7, #10]
 8010670:	429a      	cmp	r2, r3
 8010672:	d107      	bne.n	8010684 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	69da      	ldr	r2, [r3, #28]
 8010678:	8afb      	ldrh	r3, [r7, #22]
 801067a:	009b      	lsls	r3, r3, #2
 801067c:	4413      	add	r3, r2
 801067e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8010682:	e004      	b.n	801068e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8010684:	8afb      	ldrh	r3, [r7, #22]
 8010686:	3301      	adds	r3, #1
 8010688:	82fb      	strh	r3, [r7, #22]
 801068a:	e7e3      	b.n	8010654 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	3718      	adds	r7, #24
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
	...

08010698 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 8010698:	b580      	push	{r7, lr}
 801069a:	af00      	add	r7, sp, #0
 801069c:	4801      	ldr	r0, [pc, #4]	; (80106a4 <__tcf_0+0xc>)
 801069e:	f7ff fecf 	bl	8010440 <_ZN8touchgfx13GeneratedFontD1Ev>
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	200085cc 	.word	0x200085cc

080106a8 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b08a      	sub	sp, #40	; 0x28
 80106ac:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 80106ae:	4b1e      	ldr	r3, [pc, #120]	; (8010728 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f3bf 8f5b 	dmb	ish
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	f003 0301 	and.w	r3, r3, #1
 80106bc:	2b00      	cmp	r3, #0
 80106be:	bf0c      	ite	eq
 80106c0:	2301      	moveq	r3, #1
 80106c2:	2300      	movne	r3, #0
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d02a      	beq.n	8010720 <_Z25getFont_Asap_Bold_10_4bppv+0x78>
 80106ca:	4817      	ldr	r0, [pc, #92]	; (8010728 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 80106cc:	f017 ff6e 	bl	80285ac <__cxa_guard_acquire>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	bf14      	ite	ne
 80106d6:	2301      	movne	r3, #1
 80106d8:	2300      	moveq	r3, #0
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d01f      	beq.n	8010720 <_Z25getFont_Asap_Bold_10_4bppv+0x78>
 80106e0:	2300      	movs	r3, #0
 80106e2:	9309      	str	r3, [sp, #36]	; 0x24
 80106e4:	2300      	movs	r3, #0
 80106e6:	9308      	str	r3, [sp, #32]
 80106e8:	233f      	movs	r3, #63	; 0x3f
 80106ea:	9307      	str	r3, [sp, #28]
 80106ec:	4b0f      	ldr	r3, [pc, #60]	; (801072c <_Z25getFont_Asap_Bold_10_4bppv+0x84>)
 80106ee:	9306      	str	r3, [sp, #24]
 80106f0:	4b0f      	ldr	r3, [pc, #60]	; (8010730 <_Z25getFont_Asap_Bold_10_4bppv+0x88>)
 80106f2:	9305      	str	r3, [sp, #20]
 80106f4:	2301      	movs	r3, #1
 80106f6:	9304      	str	r3, [sp, #16]
 80106f8:	2300      	movs	r3, #0
 80106fa:	9303      	str	r3, [sp, #12]
 80106fc:	2301      	movs	r3, #1
 80106fe:	9302      	str	r3, [sp, #8]
 8010700:	2304      	movs	r3, #4
 8010702:	9301      	str	r3, [sp, #4]
 8010704:	2300      	movs	r3, #0
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	230a      	movs	r3, #10
 801070a:	2204      	movs	r2, #4
 801070c:	4909      	ldr	r1, [pc, #36]	; (8010734 <_Z25getFont_Asap_Bold_10_4bppv+0x8c>)
 801070e:	480a      	ldr	r0, [pc, #40]	; (8010738 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
 8010710:	f7ff ff3a 	bl	8010588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010714:	4804      	ldr	r0, [pc, #16]	; (8010728 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 8010716:	f017 ff55 	bl	80285c4 <__cxa_guard_release>
 801071a:	4808      	ldr	r0, [pc, #32]	; (801073c <_Z25getFont_Asap_Bold_10_4bppv+0x94>)
 801071c:	f017 ff90 	bl	8028640 <atexit>
    return Asap_Bold_10_4bpp;
 8010720:	4b05      	ldr	r3, [pc, #20]	; (8010738 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
}
 8010722:	4618      	mov	r0, r3
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}
 8010728:	200085f0 	.word	0x200085f0
 801072c:	08031c48 	.word	0x08031c48
 8010730:	0802a494 	.word	0x0802a494
 8010734:	08031c70 	.word	0x08031c70
 8010738:	200085cc 	.word	0x200085cc
 801073c:	08010699 	.word	0x08010699

08010740 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 8010740:	b580      	push	{r7, lr}
 8010742:	af00      	add	r7, sp, #0
 8010744:	4801      	ldr	r0, [pc, #4]	; (801074c <__tcf_0+0xc>)
 8010746:	f7ff fe7b 	bl	8010440 <_ZN8touchgfx13GeneratedFontD1Ev>
 801074a:	bd80      	pop	{r7, pc}
 801074c:	200085f4 	.word	0x200085f4

08010750 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b08a      	sub	sp, #40	; 0x28
 8010754:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 8010756:	4b1e      	ldr	r3, [pc, #120]	; (80107d0 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	f3bf 8f5b 	dmb	ish
 801075e:	b2db      	uxtb	r3, r3
 8010760:	f003 0301 	and.w	r3, r3, #1
 8010764:	2b00      	cmp	r3, #0
 8010766:	bf0c      	ite	eq
 8010768:	2301      	moveq	r3, #1
 801076a:	2300      	movne	r3, #0
 801076c:	b2db      	uxtb	r3, r3
 801076e:	2b00      	cmp	r3, #0
 8010770:	d02a      	beq.n	80107c8 <_Z25getFont_Asap_Bold_12_4bppv+0x78>
 8010772:	4817      	ldr	r0, [pc, #92]	; (80107d0 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 8010774:	f017 ff1a 	bl	80285ac <__cxa_guard_acquire>
 8010778:	4603      	mov	r3, r0
 801077a:	2b00      	cmp	r3, #0
 801077c:	bf14      	ite	ne
 801077e:	2301      	movne	r3, #1
 8010780:	2300      	moveq	r3, #0
 8010782:	b2db      	uxtb	r3, r3
 8010784:	2b00      	cmp	r3, #0
 8010786:	d01f      	beq.n	80107c8 <_Z25getFont_Asap_Bold_12_4bppv+0x78>
 8010788:	2300      	movs	r3, #0
 801078a:	9309      	str	r3, [sp, #36]	; 0x24
 801078c:	2300      	movs	r3, #0
 801078e:	9308      	str	r3, [sp, #32]
 8010790:	233f      	movs	r3, #63	; 0x3f
 8010792:	9307      	str	r3, [sp, #28]
 8010794:	4b0f      	ldr	r3, [pc, #60]	; (80107d4 <_Z25getFont_Asap_Bold_12_4bppv+0x84>)
 8010796:	9306      	str	r3, [sp, #24]
 8010798:	4b0f      	ldr	r3, [pc, #60]	; (80107d8 <_Z25getFont_Asap_Bold_12_4bppv+0x88>)
 801079a:	9305      	str	r3, [sp, #20]
 801079c:	2301      	movs	r3, #1
 801079e:	9304      	str	r3, [sp, #16]
 80107a0:	2300      	movs	r3, #0
 80107a2:	9303      	str	r3, [sp, #12]
 80107a4:	2301      	movs	r3, #1
 80107a6:	9302      	str	r3, [sp, #8]
 80107a8:	2304      	movs	r3, #4
 80107aa:	9301      	str	r3, [sp, #4]
 80107ac:	2300      	movs	r3, #0
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	230c      	movs	r3, #12
 80107b2:	2209      	movs	r2, #9
 80107b4:	4909      	ldr	r1, [pc, #36]	; (80107dc <_Z25getFont_Asap_Bold_12_4bppv+0x8c>)
 80107b6:	480a      	ldr	r0, [pc, #40]	; (80107e0 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
 80107b8:	f7ff fee6 	bl	8010588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80107bc:	4804      	ldr	r0, [pc, #16]	; (80107d0 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 80107be:	f017 ff01 	bl	80285c4 <__cxa_guard_release>
 80107c2:	4808      	ldr	r0, [pc, #32]	; (80107e4 <_Z25getFont_Asap_Bold_12_4bppv+0x94>)
 80107c4:	f017 ff3c 	bl	8028640 <atexit>
    return Asap_Bold_12_4bpp;
 80107c8:	4b05      	ldr	r3, [pc, #20]	; (80107e0 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	20008618 	.word	0x20008618
 80107d4:	08031c4c 	.word	0x08031c4c
 80107d8:	0802a498 	.word	0x0802a498
 80107dc:	08031ca8 	.word	0x08031ca8
 80107e0:	200085f4 	.word	0x200085f4
 80107e4:	08010741 	.word	0x08010741

080107e8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 80107e8:	b580      	push	{r7, lr}
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	4801      	ldr	r0, [pc, #4]	; (80107f4 <__tcf_0+0xc>)
 80107ee:	f7ff fe27 	bl	8010440 <_ZN8touchgfx13GeneratedFontD1Ev>
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	2000861c 	.word	0x2000861c

080107f8 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b08a      	sub	sp, #40	; 0x28
 80107fc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 80107fe:	4b1e      	ldr	r3, [pc, #120]	; (8010878 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	f3bf 8f5b 	dmb	ish
 8010806:	b2db      	uxtb	r3, r3
 8010808:	f003 0301 	and.w	r3, r3, #1
 801080c:	2b00      	cmp	r3, #0
 801080e:	bf0c      	ite	eq
 8010810:	2301      	moveq	r3, #1
 8010812:	2300      	movne	r3, #0
 8010814:	b2db      	uxtb	r3, r3
 8010816:	2b00      	cmp	r3, #0
 8010818:	d02a      	beq.n	8010870 <_Z25getFont_Asap_Bold_18_4bppv+0x78>
 801081a:	4817      	ldr	r0, [pc, #92]	; (8010878 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 801081c:	f017 fec6 	bl	80285ac <__cxa_guard_acquire>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	bf14      	ite	ne
 8010826:	2301      	movne	r3, #1
 8010828:	2300      	moveq	r3, #0
 801082a:	b2db      	uxtb	r3, r3
 801082c:	2b00      	cmp	r3, #0
 801082e:	d01f      	beq.n	8010870 <_Z25getFont_Asap_Bold_18_4bppv+0x78>
 8010830:	2300      	movs	r3, #0
 8010832:	9309      	str	r3, [sp, #36]	; 0x24
 8010834:	2300      	movs	r3, #0
 8010836:	9308      	str	r3, [sp, #32]
 8010838:	2300      	movs	r3, #0
 801083a:	9307      	str	r3, [sp, #28]
 801083c:	4b0f      	ldr	r3, [pc, #60]	; (801087c <_Z25getFont_Asap_Bold_18_4bppv+0x84>)
 801083e:	9306      	str	r3, [sp, #24]
 8010840:	4b0f      	ldr	r3, [pc, #60]	; (8010880 <_Z25getFont_Asap_Bold_18_4bppv+0x88>)
 8010842:	9305      	str	r3, [sp, #20]
 8010844:	2301      	movs	r3, #1
 8010846:	9304      	str	r3, [sp, #16]
 8010848:	2300      	movs	r3, #0
 801084a:	9303      	str	r3, [sp, #12]
 801084c:	2301      	movs	r3, #1
 801084e:	9302      	str	r3, [sp, #8]
 8010850:	2304      	movs	r3, #4
 8010852:	9301      	str	r3, [sp, #4]
 8010854:	2300      	movs	r3, #0
 8010856:	9300      	str	r3, [sp, #0]
 8010858:	2312      	movs	r3, #18
 801085a:	221d      	movs	r2, #29
 801085c:	4909      	ldr	r1, [pc, #36]	; (8010884 <_Z25getFont_Asap_Bold_18_4bppv+0x8c>)
 801085e:	480a      	ldr	r0, [pc, #40]	; (8010888 <_Z25getFont_Asap_Bold_18_4bppv+0x90>)
 8010860:	f7ff fe92 	bl	8010588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010864:	4804      	ldr	r0, [pc, #16]	; (8010878 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 8010866:	f017 fead 	bl	80285c4 <__cxa_guard_release>
 801086a:	4808      	ldr	r0, [pc, #32]	; (801088c <_Z25getFont_Asap_Bold_18_4bppv+0x94>)
 801086c:	f017 fee8 	bl	8028640 <atexit>
    return Asap_Bold_18_4bpp;
 8010870:	4b05      	ldr	r3, [pc, #20]	; (8010888 <_Z25getFont_Asap_Bold_18_4bppv+0x90>)
}
 8010872:	4618      	mov	r0, r3
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	20008640 	.word	0x20008640
 801087c:	08031c50 	.word	0x08031c50
 8010880:	0802a49c 	.word	0x0802a49c
 8010884:	08031d28 	.word	0x08031d28
 8010888:	2000861c 	.word	0x2000861c
 801088c:	080107e9 	.word	0x080107e9

08010890 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010890:	b580      	push	{r7, lr}
 8010892:	af00      	add	r7, sp, #0
 8010894:	4801      	ldr	r0, [pc, #4]	; (801089c <__tcf_0+0xc>)
 8010896:	f7ff fdd3 	bl	8010440 <_ZN8touchgfx13GeneratedFontD1Ev>
 801089a:	bd80      	pop	{r7, pc}
 801089c:	20008644 	.word	0x20008644

080108a0 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b08a      	sub	sp, #40	; 0x28
 80108a4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 80108a6:	4b1e      	ldr	r3, [pc, #120]	; (8010920 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	f3bf 8f5b 	dmb	ish
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	f003 0301 	and.w	r3, r3, #1
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	bf0c      	ite	eq
 80108b8:	2301      	moveq	r3, #1
 80108ba:	2300      	movne	r3, #0
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d02a      	beq.n	8010918 <_Z25getFont_Asap_Bold_21_4bppv+0x78>
 80108c2:	4817      	ldr	r0, [pc, #92]	; (8010920 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 80108c4:	f017 fe72 	bl	80285ac <__cxa_guard_acquire>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	bf14      	ite	ne
 80108ce:	2301      	movne	r3, #1
 80108d0:	2300      	moveq	r3, #0
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d01f      	beq.n	8010918 <_Z25getFont_Asap_Bold_21_4bppv+0x78>
 80108d8:	2300      	movs	r3, #0
 80108da:	9309      	str	r3, [sp, #36]	; 0x24
 80108dc:	2300      	movs	r3, #0
 80108de:	9308      	str	r3, [sp, #32]
 80108e0:	233f      	movs	r3, #63	; 0x3f
 80108e2:	9307      	str	r3, [sp, #28]
 80108e4:	4b0f      	ldr	r3, [pc, #60]	; (8010924 <_Z25getFont_Asap_Bold_21_4bppv+0x84>)
 80108e6:	9306      	str	r3, [sp, #24]
 80108e8:	4b0f      	ldr	r3, [pc, #60]	; (8010928 <_Z25getFont_Asap_Bold_21_4bppv+0x88>)
 80108ea:	9305      	str	r3, [sp, #20]
 80108ec:	2301      	movs	r3, #1
 80108ee:	9304      	str	r3, [sp, #16]
 80108f0:	2300      	movs	r3, #0
 80108f2:	9303      	str	r3, [sp, #12]
 80108f4:	2301      	movs	r3, #1
 80108f6:	9302      	str	r3, [sp, #8]
 80108f8:	2304      	movs	r3, #4
 80108fa:	9301      	str	r3, [sp, #4]
 80108fc:	2300      	movs	r3, #0
 80108fe:	9300      	str	r3, [sp, #0]
 8010900:	2315      	movs	r3, #21
 8010902:	220d      	movs	r2, #13
 8010904:	4909      	ldr	r1, [pc, #36]	; (801092c <_Z25getFont_Asap_Bold_21_4bppv+0x8c>)
 8010906:	480a      	ldr	r0, [pc, #40]	; (8010930 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
 8010908:	f7ff fe3e 	bl	8010588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801090c:	4804      	ldr	r0, [pc, #16]	; (8010920 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 801090e:	f017 fe59 	bl	80285c4 <__cxa_guard_release>
 8010912:	4808      	ldr	r0, [pc, #32]	; (8010934 <_Z25getFont_Asap_Bold_21_4bppv+0x94>)
 8010914:	f017 fe94 	bl	8028640 <atexit>
    return Asap_Bold_21_4bpp;
 8010918:	4b05      	ldr	r3, [pc, #20]	; (8010930 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
}
 801091a:	4618      	mov	r0, r3
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	20008668 	.word	0x20008668
 8010924:	08031c60 	.word	0x08031c60
 8010928:	0802a4a0 	.word	0x0802a4a0
 801092c:	08031ec0 	.word	0x08031ec0
 8010930:	20008644 	.word	0x20008644
 8010934:	08010891 	.word	0x08010891

08010938 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 8010938:	b580      	push	{r7, lr}
 801093a:	af00      	add	r7, sp, #0
 801093c:	4801      	ldr	r0, [pc, #4]	; (8010944 <__tcf_0+0xc>)
 801093e:	f7ff fd7f 	bl	8010440 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010942:	bd80      	pop	{r7, pc}
 8010944:	2000866c 	.word	0x2000866c

08010948 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b08a      	sub	sp, #40	; 0x28
 801094c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 801094e:	4b1e      	ldr	r3, [pc, #120]	; (80109c8 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	f3bf 8f5b 	dmb	ish
 8010956:	b2db      	uxtb	r3, r3
 8010958:	f003 0301 	and.w	r3, r3, #1
 801095c:	2b00      	cmp	r3, #0
 801095e:	bf0c      	ite	eq
 8010960:	2301      	moveq	r3, #1
 8010962:	2300      	movne	r3, #0
 8010964:	b2db      	uxtb	r3, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	d02a      	beq.n	80109c0 <_Z25getFont_Asap_Bold_30_4bppv+0x78>
 801096a:	4817      	ldr	r0, [pc, #92]	; (80109c8 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 801096c:	f017 fe1e 	bl	80285ac <__cxa_guard_acquire>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	bf14      	ite	ne
 8010976:	2301      	movne	r3, #1
 8010978:	2300      	moveq	r3, #0
 801097a:	b2db      	uxtb	r3, r3
 801097c:	2b00      	cmp	r3, #0
 801097e:	d01f      	beq.n	80109c0 <_Z25getFont_Asap_Bold_30_4bppv+0x78>
 8010980:	2300      	movs	r3, #0
 8010982:	9309      	str	r3, [sp, #36]	; 0x24
 8010984:	2300      	movs	r3, #0
 8010986:	9308      	str	r3, [sp, #32]
 8010988:	233f      	movs	r3, #63	; 0x3f
 801098a:	9307      	str	r3, [sp, #28]
 801098c:	4b0f      	ldr	r3, [pc, #60]	; (80109cc <_Z25getFont_Asap_Bold_30_4bppv+0x84>)
 801098e:	9306      	str	r3, [sp, #24]
 8010990:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <_Z25getFont_Asap_Bold_30_4bppv+0x88>)
 8010992:	9305      	str	r3, [sp, #20]
 8010994:	2301      	movs	r3, #1
 8010996:	9304      	str	r3, [sp, #16]
 8010998:	2300      	movs	r3, #0
 801099a:	9303      	str	r3, [sp, #12]
 801099c:	2301      	movs	r3, #1
 801099e:	9302      	str	r3, [sp, #8]
 80109a0:	2304      	movs	r3, #4
 80109a2:	9301      	str	r3, [sp, #4]
 80109a4:	2300      	movs	r3, #0
 80109a6:	9300      	str	r3, [sp, #0]
 80109a8:	231e      	movs	r3, #30
 80109aa:	220c      	movs	r2, #12
 80109ac:	4909      	ldr	r1, [pc, #36]	; (80109d4 <_Z25getFont_Asap_Bold_30_4bppv+0x8c>)
 80109ae:	480a      	ldr	r0, [pc, #40]	; (80109d8 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
 80109b0:	f7ff fdea 	bl	8010588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80109b4:	4804      	ldr	r0, [pc, #16]	; (80109c8 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 80109b6:	f017 fe05 	bl	80285c4 <__cxa_guard_release>
 80109ba:	4808      	ldr	r0, [pc, #32]	; (80109dc <_Z25getFont_Asap_Bold_30_4bppv+0x94>)
 80109bc:	f017 fe40 	bl	8028640 <atexit>
    return Asap_Bold_30_4bpp;
 80109c0:	4b05      	ldr	r3, [pc, #20]	; (80109d8 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	20008690 	.word	0x20008690
 80109cc:	08031c64 	.word	0x08031c64
 80109d0:	0802a4a4 	.word	0x0802a4a4
 80109d4:	08031f78 	.word	0x08031f78
 80109d8:	2000866c 	.word	0x2000866c
 80109dc:	08010939 	.word	0x08010939

080109e0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 80109e0:	b580      	push	{r7, lr}
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	4801      	ldr	r0, [pc, #4]	; (80109ec <__tcf_0+0xc>)
 80109e6:	f7ff fd2b 	bl	8010440 <_ZN8touchgfx13GeneratedFontD1Ev>
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	20008694 	.word	0x20008694

080109f0 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b08a      	sub	sp, #40	; 0x28
 80109f4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 80109f6:	4b1e      	ldr	r3, [pc, #120]	; (8010a70 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	f3bf 8f5b 	dmb	ish
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	f003 0301 	and.w	r3, r3, #1
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	bf0c      	ite	eq
 8010a08:	2301      	moveq	r3, #1
 8010a0a:	2300      	movne	r3, #0
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d02a      	beq.n	8010a68 <_Z25getFont_Asap_Bold_40_4bppv+0x78>
 8010a12:	4817      	ldr	r0, [pc, #92]	; (8010a70 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 8010a14:	f017 fdca 	bl	80285ac <__cxa_guard_acquire>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	bf14      	ite	ne
 8010a1e:	2301      	movne	r3, #1
 8010a20:	2300      	moveq	r3, #0
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d01f      	beq.n	8010a68 <_Z25getFont_Asap_Bold_40_4bppv+0x78>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	9308      	str	r3, [sp, #32]
 8010a30:	233f      	movs	r3, #63	; 0x3f
 8010a32:	9307      	str	r3, [sp, #28]
 8010a34:	4b0f      	ldr	r3, [pc, #60]	; (8010a74 <_Z25getFont_Asap_Bold_40_4bppv+0x84>)
 8010a36:	9306      	str	r3, [sp, #24]
 8010a38:	4b0f      	ldr	r3, [pc, #60]	; (8010a78 <_Z25getFont_Asap_Bold_40_4bppv+0x88>)
 8010a3a:	9305      	str	r3, [sp, #20]
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	9304      	str	r3, [sp, #16]
 8010a40:	2300      	movs	r3, #0
 8010a42:	9303      	str	r3, [sp, #12]
 8010a44:	2301      	movs	r3, #1
 8010a46:	9302      	str	r3, [sp, #8]
 8010a48:	2304      	movs	r3, #4
 8010a4a:	9301      	str	r3, [sp, #4]
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	2328      	movs	r3, #40	; 0x28
 8010a52:	220d      	movs	r2, #13
 8010a54:	4909      	ldr	r1, [pc, #36]	; (8010a7c <_Z25getFont_Asap_Bold_40_4bppv+0x8c>)
 8010a56:	480a      	ldr	r0, [pc, #40]	; (8010a80 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
 8010a58:	f7ff fd96 	bl	8010588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010a5c:	4804      	ldr	r0, [pc, #16]	; (8010a70 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 8010a5e:	f017 fdb1 	bl	80285c4 <__cxa_guard_release>
 8010a62:	4808      	ldr	r0, [pc, #32]	; (8010a84 <_Z25getFont_Asap_Bold_40_4bppv+0x94>)
 8010a64:	f017 fdec 	bl	8028640 <atexit>
    return Asap_Bold_40_4bpp;
 8010a68:	4b05      	ldr	r3, [pc, #20]	; (8010a80 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	200086b8 	.word	0x200086b8
 8010a74:	08031c68 	.word	0x08031c68
 8010a78:	0802a4a8 	.word	0x0802a4a8
 8010a7c:	08032020 	.word	0x08032020
 8010a80:	20008694 	.word	0x20008694
 8010a84:	080109e1 	.word	0x080109e1

08010a88 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	4801      	ldr	r0, [pc, #4]	; (8010a94 <__tcf_0+0xc>)
 8010a8e:	f7ff fcd7 	bl	8010440 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	200086bc 	.word	0x200086bc

08010a98 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08a      	sub	sp, #40	; 0x28
 8010a9c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010a9e:	4b1e      	ldr	r3, [pc, #120]	; (8010b18 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	f3bf 8f5b 	dmb	ish
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	bf0c      	ite	eq
 8010ab0:	2301      	moveq	r3, #1
 8010ab2:	2300      	movne	r3, #0
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d02a      	beq.n	8010b10 <_Z25getFont_Asap_Bold_60_4bppv+0x78>
 8010aba:	4817      	ldr	r0, [pc, #92]	; (8010b18 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 8010abc:	f017 fd76 	bl	80285ac <__cxa_guard_acquire>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	bf14      	ite	ne
 8010ac6:	2301      	movne	r3, #1
 8010ac8:	2300      	moveq	r3, #0
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d01f      	beq.n	8010b10 <_Z25getFont_Asap_Bold_60_4bppv+0x78>
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	9308      	str	r3, [sp, #32]
 8010ad8:	233f      	movs	r3, #63	; 0x3f
 8010ada:	9307      	str	r3, [sp, #28]
 8010adc:	4b0f      	ldr	r3, [pc, #60]	; (8010b1c <_Z25getFont_Asap_Bold_60_4bppv+0x84>)
 8010ade:	9306      	str	r3, [sp, #24]
 8010ae0:	4b0f      	ldr	r3, [pc, #60]	; (8010b20 <_Z25getFont_Asap_Bold_60_4bppv+0x88>)
 8010ae2:	9305      	str	r3, [sp, #20]
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	9304      	str	r3, [sp, #16]
 8010ae8:	2300      	movs	r3, #0
 8010aea:	9303      	str	r3, [sp, #12]
 8010aec:	2301      	movs	r3, #1
 8010aee:	9302      	str	r3, [sp, #8]
 8010af0:	2304      	movs	r3, #4
 8010af2:	9301      	str	r3, [sp, #4]
 8010af4:	2300      	movs	r3, #0
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	233c      	movs	r3, #60	; 0x3c
 8010afa:	220d      	movs	r2, #13
 8010afc:	4909      	ldr	r1, [pc, #36]	; (8010b24 <_Z25getFont_Asap_Bold_60_4bppv+0x8c>)
 8010afe:	480a      	ldr	r0, [pc, #40]	; (8010b28 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
 8010b00:	f7ff fd42 	bl	8010588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010b04:	4804      	ldr	r0, [pc, #16]	; (8010b18 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 8010b06:	f017 fd5d 	bl	80285c4 <__cxa_guard_release>
 8010b0a:	4808      	ldr	r0, [pc, #32]	; (8010b2c <_Z25getFont_Asap_Bold_60_4bppv+0x94>)
 8010b0c:	f017 fd98 	bl	8028640 <atexit>
    return Asap_Bold_60_4bpp;
 8010b10:	4b05      	ldr	r3, [pc, #20]	; (8010b28 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	200086e0 	.word	0x200086e0
 8010b1c:	08031c6c 	.word	0x08031c6c
 8010b20:	0802a4ac 	.word	0x0802a4ac
 8010b24:	080320d8 	.word	0x080320d8
 8010b28:	200086bc 	.word	0x200086bc
 8010b2c:	08010a89 	.word	0x08010a89

08010b30 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
    {
    }
 8010b52:	bf00      	nop
 8010b54:	370c      	adds	r7, #12
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010b5e:	b480      	push	{r7}
 8010b60:	b083      	sub	sp, #12
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	6039      	str	r1, [r7, #0]
    {
    }
 8010b68:	bf00      	nop
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
    {
    }
 8010b7e:	bf00      	nop
 8010b80:	370c      	adds	r7, #12
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8010b8a:	b480      	push	{r7}
 8010b8c:	b083      	sub	sp, #12
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	460b      	mov	r3, r1
 8010b94:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010b96:	bf00      	nop
 8010b98:	370c      	adds	r7, #12
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr

08010ba2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8010ba2:	b480      	push	{r7}
 8010ba4:	b083      	sub	sp, #12
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
    {
    }
 8010baa:	bf00      	nop
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr

08010bb6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8010bb6:	b480      	push	{r7}
 8010bb8:	b083      	sub	sp, #12
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
    {
    }
 8010bbe:	bf00      	nop
 8010bc0:	370c      	adds	r7, #12
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
	...

08010bcc <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8010bcc:	b480      	push	{r7}
 8010bce:	b083      	sub	sp, #12
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
    {
 8010bd4:	4a04      	ldr	r2, [pc, #16]	; (8010be8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	601a      	str	r2, [r3, #0]
    }
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr
 8010be8:	0802a5f8 	.word	0x0802a5f8

08010bec <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
    }
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7ff ffe9 	bl	8010bcc <_ZN8touchgfx15UIEventListenerD1Ev>
 8010bfa:	2104      	movs	r1, #4
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f017 fcd3 	bl	80285a8 <_ZdlPvj>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8010c14:	4a07      	ldr	r2, [pc, #28]	; (8010c34 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	605a      	str	r2, [r3, #4]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2200      	movs	r2, #0
 8010c24:	721a      	strb	r2, [r3, #8]
    {
    }
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr
 8010c34:	0802a5d8 	.word	0x0802a5d8

08010c38 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
    {
 8010c40:	4a04      	ldr	r2, [pc, #16]	; (8010c54 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	601a      	str	r2, [r3, #0]
    }
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr
 8010c54:	0802a5d8 	.word	0x0802a5d8

08010c58 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
    }
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7ff ffe9 	bl	8010c38 <_ZN8touchgfx10TransitionD1Ev>
 8010c66:	210c      	movs	r1, #12
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f017 fc9d 	bl	80285a8 <_ZdlPvj>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4618      	mov	r0, r3
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	bf00      	nop
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	bf00      	nop
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8010ca0:	b480      	push	{r7}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	bf00      	nop
 8010caa:	370c      	adds	r7, #12
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr

08010cb4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	683a      	ldr	r2, [r7, #0]
 8010cc2:	605a      	str	r2, [r3, #4]
    }
 8010cc4:	bf00      	nop
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010cdc:	bf00      	nop
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
    {
 8010cf0:	4a04      	ldr	r2, [pc, #16]	; (8010d04 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	601a      	str	r2, [r3, #0]
    }
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr
 8010d04:	0802a5c0 	.word	0x0802a5c0

08010d08 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
    }
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7ff ffe9 	bl	8010ce8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010d16:	2104      	movs	r1, #4
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f017 fc45 	bl	80285a8 <_ZdlPvj>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	4618      	mov	r0, r3
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	4608      	mov	r0, r1
 8010d32:	4611      	mov	r1, r2
 8010d34:	461a      	mov	r2, r3
 8010d36:	4603      	mov	r3, r0
 8010d38:	817b      	strh	r3, [r7, #10]
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	813b      	strh	r3, [r7, #8]
 8010d3e:	4613      	mov	r3, r2
 8010d40:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	3334      	adds	r3, #52	; 0x34
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010d4e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	4798      	blx	r3
        setWidth(width);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	3338      	adds	r3, #56	; 0x38
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d62:	4611      	mov	r1, r2
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	4798      	blx	r3
        setHeight(height);
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	333c      	adds	r3, #60	; 0x3c
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010d74:	4611      	mov	r1, r2
 8010d76:	68f8      	ldr	r0, [r7, #12]
 8010d78:	4798      	blx	r3
    }
 8010d7a:	bf00      	nop
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8010d82:	b480      	push	{r7}
 8010d84:	b083      	sub	sp, #12
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8010d90:	4618      	mov	r0, r3
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8010daa:	4618      	mov	r0, r3
 8010dac:	370c      	adds	r7, #12
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
	...

08010db8 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010db8:	b480      	push	{r7}
 8010dba:	af00      	add	r7, sp, #0
    {
        return instance;
 8010dbc:	4b03      	ldr	r3, [pc, #12]	; (8010dcc <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
    }
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop
 8010dcc:	2000bef0 	.word	0x2000bef0

08010dd0 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010dd0:	b480      	push	{r7}
 8010dd2:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010dd4:	4b0b      	ldr	r3, [pc, #44]	; (8010e04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d008      	beq.n	8010df2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010de0:	4b08      	ldr	r3, [pc, #32]	; (8010e04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d003      	beq.n	8010df2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010dea:	4b06      	ldr	r3, [pc, #24]	; (8010e04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010df0:	e002      	b.n	8010df8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8010df2:	4b04      	ldr	r3, [pc, #16]	; (8010e04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010df8:	4618      	mov	r0, r3
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	2000bef0 	.word	0x2000bef0

08010e08 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	4a05      	ldr	r2, [pc, #20]	; (8010e28 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7ff fed7 	bl	8010bcc <_ZN8touchgfx15UIEventListenerD1Ev>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4618      	mov	r0, r3
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	0802c89c 	.word	0x0802c89c

08010e2c <_ZN8touchgfx11ApplicationD0Ev>:
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff ffe7 	bl	8010e08 <_ZN8touchgfx11ApplicationD1Ev>
 8010e3a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f017 fbb2 	bl	80285a8 <_ZdlPvj>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	4618      	mov	r0, r3
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
	...

08010e50 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f00b fbc6 	bl	801c5ec <_ZN8touchgfx11ApplicationC1Ev>
 8010e60:	4a09      	ldr	r2, [pc, #36]	; (8010e88 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	601a      	str	r2, [r3, #0]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2200      	movs	r2, #0
 8010e72:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4a04      	ldr	r2, [pc, #16]	; (8010e8c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010e7a:	6013      	str	r3, [r2, #0]
    }
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	0802a584 	.word	0x0802a584
 8010e8c:	2000bf7c 	.word	0x2000bf7c

08010e90 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	4a05      	ldr	r2, [pc, #20]	; (8010eb0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	601a      	str	r2, [r3, #0]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff ffb1 	bl	8010e08 <_ZN8touchgfx11ApplicationD1Ev>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	0802a584 	.word	0x0802a584

08010eb4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7ff ffe7 	bl	8010e90 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010ec2:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f017 fb6e 	bl	80285a8 <_ZdlPvj>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b082      	sub	sp, #8
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 f804 	bl	8010eec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00f      	beq.n	8010f1e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	330c      	adds	r3, #12
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	4610      	mov	r0, r2
 8010f12:	4798      	blx	r3
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	e000      	b.n	8010f20 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00e      	beq.n	8010f42 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	3308      	adds	r3, #8
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4610      	mov	r0, r2
 8010f38:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8010f42:	bf00      	nop
 8010f44:	3708      	adds	r7, #8
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}

08010f4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	b084      	sub	sp, #16
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	60f8      	str	r0, [r7, #12]
 8010f52:	60b9      	str	r1, [r7, #8]
 8010f54:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8010f56:	f00b fb27 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f00b fb29 	bl	801c5b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d008      	beq.n	8010f7c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	330c      	adds	r3, #12
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4610      	mov	r0, r2
 8010f7a:	4798      	blx	r3
    }
    if (*currentTrans)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d007      	beq.n	8010f94 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4610      	mov	r0, r2
 8010f92:	4798      	blx	r3
    }
    if (*currentScreen)
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d008      	beq.n	8010fae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	3314      	adds	r3, #20
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	4610      	mov	r0, r2
 8010fac:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d008      	beq.n	8010fc8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4610      	mov	r0, r2
 8010fc6:	4798      	blx	r3
    }
    if (*currentScreen)
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d007      	beq.n	8010fe0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4610      	mov	r0, r2
 8010fde:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d008      	beq.n	8010ffa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	3308      	adds	r3, #8
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	4610      	mov	r0, r2
 8010ff8:	4798      	blx	r3
    }
}
 8010ffa:	bf00      	nop
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}

08011002 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b084      	sub	sp, #16
 8011006:	af00      	add	r7, sp, #0
 8011008:	60f8      	str	r0, [r7, #12]
 801100a:	60b9      	str	r1, [r7, #8]
 801100c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	330c      	adds	r3, #12
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	4798      	blx	r3
    newPresenter->activate();
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	68b8      	ldr	r0, [r7, #8]
 8011022:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f00c fbce 	bl	801d7c8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	3310      	adds	r3, #16
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	4798      	blx	r3

    Application::getInstance()->draw();
 8011038:	f00b fab6 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 801103c:	4603      	mov	r3, r0
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	3228      	adds	r2, #40	; 0x28
 8011042:	6812      	ldr	r2, [r2, #0]
 8011044:	4618      	mov	r0, r3
 8011046:	4790      	blx	r2
}
 8011048:	bf00      	nop
 801104a:	3710      	adds	r7, #16
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	601a      	str	r2, [r3, #0]
    }
 8011060:	bf00      	nop
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	4a08      	ldr	r2, [pc, #32]	; (8011098 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	601a      	str	r2, [r3, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8011080:	4618      	mov	r0, r3
 8011082:	f000 fdb3 	bl	8011bec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff ff01 	bl	8010e90 <_ZN8touchgfx14MVPApplicationD1Ev>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4618      	mov	r0, r3
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	0802a530 	.word	0x0802a530

0801109c <_ZN23FrontendApplicationBaseD0Ev>:
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f7ff ffe1 	bl	801106c <_ZN23FrontendApplicationBaseD1Ev>
 80110aa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f017 fa7a 	bl	80285a8 <_ZdlPvj>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4618      	mov	r0, r3
 80110b8:	3708      	adds	r7, #8
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
	...

080110c0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7ff fd9e 	bl	8010c0c <_ZN8touchgfx10TransitionC1Ev>
 80110d0:	4a03      	ldr	r2, [pc, #12]	; (80110e0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	4618      	mov	r0, r3
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	0802a510 	.word	0x0802a510

080110e4 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	4a05      	ldr	r2, [pc, #20]	; (8011104 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	601a      	str	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7ff fd9f 	bl	8010c38 <_ZN8touchgfx10TransitionD1Ev>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4618      	mov	r0, r3
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	0802a510 	.word	0x0802a510

08011108 <_ZN8touchgfx12NoTransitionD0Ev>:
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f7ff ffe7 	bl	80110e4 <_ZN8touchgfx12NoTransitionD1Ev>
 8011116:	210c      	movs	r1, #12
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f017 fa45 	bl	80285a8 <_ZdlPvj>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4618      	mov	r0, r3
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2201      	movs	r2, #1
 8011134:	721a      	strb	r2, [r3, #8]
    }
 8011136:	bf00      	nop
 8011138:	370c      	adds	r7, #12
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8011142:	b480      	push	{r7}
 8011144:	b083      	sub	sp, #12
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	683a      	ldr	r2, [r7, #0]
 8011150:	605a      	str	r2, [r3, #4]
    }
 8011152:	bf00      	nop
 8011154:	370c      	adds	r7, #12
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
	...

08011160 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	4618      	mov	r0, r3
 8011170:	f7ff fe6e 	bl	8010e50 <_ZN8touchgfx14MVPApplicationC1Ev>
 8011174:	4a13      	ldr	r2, [pc, #76]	; (80111c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	601a      	str	r2, [r3, #0]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8011180:	4618      	mov	r0, r3
 8011182:	f000 f92b 	bl	80113dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8011196:	f7ff fe0f 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 801119a:	4603      	mov	r3, r0
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	3208      	adds	r2, #8
 80111a0:	6812      	ldr	r2, [r2, #0]
 80111a2:	2100      	movs	r1, #0
 80111a4:	4618      	mov	r0, r3
 80111a6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80111a8:	2000      	movs	r0, #0
 80111aa:	f004 fa45 	bl	8015638 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80111ae:	f7ff fe0f 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 80111b2:	4603      	mov	r3, r0
 80111b4:	4618      	mov	r0, r3
 80111b6:	f010 ff08 	bl	8021fca <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	4618      	mov	r0, r3
 80111be:	3710      	adds	r7, #16
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	0802a530 	.word	0x0802a530

080111c8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	683a      	ldr	r2, [r7, #0]
 80111ee:	4611      	mov	r1, r2
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7ff ffe9 	bl	80111c8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	685a      	ldr	r2, [r3, #4]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	605a      	str	r2, [r3, #4]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	683a      	ldr	r2, [r7, #0]
 8011202:	3308      	adds	r3, #8
 8011204:	3208      	adds	r2, #8
 8011206:	e892 0003 	ldmia.w	r2, {r0, r1}
 801120a:	e883 0003 	stmia.w	r3, {r0, r1}
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8011218:	b590      	push	{r4, r7, lr}
 801121a:	b089      	sub	sp, #36	; 0x24
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8011226:	4b10      	ldr	r3, [pc, #64]	; (8011268 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8011228:	61bb      	str	r3, [r7, #24]
 801122a:	2300      	movs	r3, #0
 801122c:	61fb      	str	r3, [r7, #28]
 801122e:	f107 0008 	add.w	r0, r7, #8
 8011232:	f107 0318 	add.w	r3, r7, #24
 8011236:	cb0c      	ldmia	r3, {r2, r3}
 8011238:	6879      	ldr	r1, [r7, #4]
 801123a:	f000 f8eb 	bl	8011414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801123e:	f107 0308 	add.w	r3, r7, #8
 8011242:	4619      	mov	r1, r3
 8011244:	4620      	mov	r0, r4
 8011246:	f7ff ffcb 	bl	80111e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801124a:	f107 0308 	add.w	r3, r7, #8
 801124e:	4618      	mov	r0, r3
 8011250:	f000 fccc 	bl	8011bec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8011260:	bf00      	nop
 8011262:	3724      	adds	r7, #36	; 0x24
 8011264:	46bd      	mov	sp, r7
 8011266:	bd90      	pop	{r4, r7, pc}
 8011268:	0801126d 	.word	0x0801126d

0801126c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af02      	add	r7, sp, #8
 8011272:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011280:	461a      	mov	r2, r3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011288:	9300      	str	r3, [sp, #0]
 801128a:	4b04      	ldr	r3, [pc, #16]	; (801129c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 801128c:	4804      	ldr	r0, [pc, #16]	; (80112a0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 801128e:	f000 f8e1 	bl	8011454 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8011292:	bf00      	nop
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	2000bf70 	.word	0x2000bf70
 80112a0:	2000bf6c 	.word	0x2000bf6c

080112a4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionEast()
{
 80112a4:	b590      	push	{r4, r7, lr}
 80112a6:	b089      	sub	sp, #36	; 0x24
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionEastImpl);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80112b2:	4b10      	ldr	r3, [pc, #64]	; (80112f4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv+0x50>)
 80112b4:	61bb      	str	r3, [r7, #24]
 80112b6:	2300      	movs	r3, #0
 80112b8:	61fb      	str	r3, [r7, #28]
 80112ba:	f107 0008 	add.w	r0, r7, #8
 80112be:	f107 0318 	add.w	r3, r7, #24
 80112c2:	cb0c      	ldmia	r3, {r2, r3}
 80112c4:	6879      	ldr	r1, [r7, #4]
 80112c6:	f000 f8a5 	bl	8011414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80112ca:	f107 0308 	add.w	r3, r7, #8
 80112ce:	4619      	mov	r1, r3
 80112d0:	4620      	mov	r0, r4
 80112d2:	f7ff ff85 	bl	80111e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80112d6:	f107 0308 	add.w	r3, r7, #8
 80112da:	4618      	mov	r0, r3
 80112dc:	f000 fc86 	bl	8011bec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80112ec:	bf00      	nop
 80112ee:	3724      	adds	r7, #36	; 0x24
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd90      	pop	{r4, r7, pc}
 80112f4:	080112f9 	.word	0x080112f9

080112f8 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionEastImpl()
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af02      	add	r7, sp, #8
 80112fe:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801130c:	461a      	mov	r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011314:	9300      	str	r3, [sp, #0]
 8011316:	4b04      	ldr	r3, [pc, #16]	; (8011328 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv+0x30>)
 8011318:	4804      	ldr	r0, [pc, #16]	; (801132c <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv+0x34>)
 801131a:	f000 f947 	bl	80115ac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801131e:	bf00      	nop
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	2000bf70 	.word	0x2000bf70
 801132c:	2000bf6c 	.word	0x2000bf6c

08011330 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>:

// SecondScreen

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEast()
{
 8011330:	b590      	push	{r4, r7, lr}
 8011332:	b089      	sub	sp, #36	; 0x24
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSecondScreenScreenSlideTransitionEastImpl);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801133e:	4b10      	ldr	r3, [pc, #64]	; (8011380 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv+0x50>)
 8011340:	61bb      	str	r3, [r7, #24]
 8011342:	2300      	movs	r3, #0
 8011344:	61fb      	str	r3, [r7, #28]
 8011346:	f107 0008 	add.w	r0, r7, #8
 801134a:	f107 0318 	add.w	r3, r7, #24
 801134e:	cb0c      	ldmia	r3, {r2, r3}
 8011350:	6879      	ldr	r1, [r7, #4]
 8011352:	f000 f85f 	bl	8011414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8011356:	f107 0308 	add.w	r3, r7, #8
 801135a:	4619      	mov	r1, r3
 801135c:	4620      	mov	r0, r4
 801135e:	f7ff ff3f 	bl	80111e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011362:	f107 0308 	add.w	r3, r7, #8
 8011366:	4618      	mov	r0, r3
 8011368:	f000 fc40 	bl	8011bec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8011378:	bf00      	nop
 801137a:	3724      	adds	r7, #36	; 0x24
 801137c:	46bd      	mov	sp, r7
 801137e:	bd90      	pop	{r4, r7, pc}
 8011380:	08011385 	.word	0x08011385

08011384 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEastImpl()
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af02      	add	r7, sp, #8
 801138a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SecondScreenView, SecondScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011398:	461a      	mov	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	4b04      	ldr	r3, [pc, #16]	; (80113b4 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x30>)
 80113a4:	4804      	ldr	r0, [pc, #16]	; (80113b8 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x34>)
 80113a6:	f000 f9af 	bl	8011708 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80113aa:	bf00      	nop
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	2000bf70 	.word	0x2000bf70
 80113b8:	2000bf6c 	.word	0x2000bf6c

080113bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	4a04      	ldr	r2, [pc, #16]	; (80113d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	601a      	str	r2, [r3, #0]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4618      	mov	r0, r3
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr
 80113d8:	0802a5c0 	.word	0x0802a5c0

080113dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ff ffe8 	bl	80113bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80113ec:	4a08      	ldr	r2, [pc, #32]	; (8011410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	605a      	str	r2, [r3, #4]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	609a      	str	r2, [r3, #8]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2200      	movs	r2, #0
 8011402:	60da      	str	r2, [r3, #12]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4618      	mov	r0, r3
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	0802a56c 	.word	0x0802a56c

08011414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	4639      	mov	r1, r7
 8011420:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	4618      	mov	r0, r3
 8011428:	f7ff ffc8 	bl	80113bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801142c:	4a08      	ldr	r2, [pc, #32]	; (8011450 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	3308      	adds	r3, #8
 801143c:	463a      	mov	r2, r7
 801143e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011442:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	4618      	mov	r0, r3
 801144a:	3710      	adds	r7, #16
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	0802a56c 	.word	0x0802a56c

08011454 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011454:	b590      	push	{r4, r7, lr}
 8011456:	b089      	sub	sp, #36	; 0x24
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	60b9      	str	r1, [r7, #8]
 801145e:	607a      	str	r2, [r7, #4]
 8011460:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	689a      	ldr	r2, [r3, #8]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	689b      	ldr	r3, [r3, #8]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	3320      	adds	r3, #32
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4610      	mov	r0, r2
 8011472:	4798      	blx	r3
 8011474:	4603      	mov	r3, r0
 8011476:	f642 0243 	movw	r2, #10307	; 0x2843
 801147a:	4293      	cmp	r3, r2
 801147c:	d805      	bhi.n	801148a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801147e:	4b46      	ldr	r3, [pc, #280]	; (8011598 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8011480:	4a46      	ldr	r2, [pc, #280]	; (801159c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8011482:	21c2      	movs	r1, #194	; 0xc2
 8011484:	4846      	ldr	r0, [pc, #280]	; (80115a0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8011486:	f017 f8bd 	bl	8028604 <__assert_func>
 801148a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	685a      	ldr	r2, [r3, #4]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	3320      	adds	r3, #32
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	4610      	mov	r0, r2
 801149c:	4798      	blx	r3
 801149e:	4603      	mov	r3, r0
 80114a0:	2b0f      	cmp	r3, #15
 80114a2:	d805      	bhi.n	80114b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80114a4:	4b3f      	ldr	r3, [pc, #252]	; (80115a4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80114a6:	4a3d      	ldr	r2, [pc, #244]	; (801159c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80114a8:	21c3      	movs	r1, #195	; 0xc3
 80114aa:	483d      	ldr	r0, [pc, #244]	; (80115a0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80114ac:	f017 f8aa 	bl	8028604 <__assert_func>
 80114b0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	68da      	ldr	r2, [r3, #12]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3320      	adds	r3, #32
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4610      	mov	r0, r2
 80114c2:	4798      	blx	r3
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b0b      	cmp	r3, #11
 80114c8:	d805      	bhi.n	80114d6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80114ca:	4b37      	ldr	r3, [pc, #220]	; (80115a8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80114cc:	4a33      	ldr	r2, [pc, #204]	; (801159c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80114ce:	21c4      	movs	r1, #196	; 0xc4
 80114d0:	4833      	ldr	r0, [pc, #204]	; (80115a0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80114d2:	f017 f897 	bl	8028604 <__assert_func>
 80114d6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80114d8:	683a      	ldr	r2, [r7, #0]
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	f7ff fd34 	bl	8010f4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	2100      	movs	r1, #0
 80114e8:	4618      	mov	r0, r3
 80114ea:	f000 f9b7 	bl	801185c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4619      	mov	r1, r3
 80114f2:	200c      	movs	r0, #12
 80114f4:	f7ff fb1c 	bl	8010b30 <_ZnwjPv>
 80114f8:	4604      	mov	r4, r0
 80114fa:	4620      	mov	r0, r4
 80114fc:	f7ff fde0 	bl	80110c0 <_ZN8touchgfx12NoTransitionC1Ev>
 8011500:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	689b      	ldr	r3, [r3, #8]
 8011506:	2100      	movs	r1, #0
 8011508:	4618      	mov	r0, r3
 801150a:	f000 f9ba 	bl	8011882 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 801150e:	4603      	mov	r3, r0
 8011510:	4619      	mov	r1, r3
 8011512:	f642 0044 	movw	r0, #10308	; 0x2844
 8011516:	f7ff fb0b 	bl	8010b30 <_ZnwjPv>
 801151a:	4604      	mov	r4, r0
 801151c:	4620      	mov	r0, r4
 801151e:	f004 fb05 	bl	8015b2c <_ZN8MainViewC1Ev>
 8011522:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	2100      	movs	r1, #0
 801152a:	4618      	mov	r0, r3
 801152c:	f000 f9bc 	bl	80118a8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8011530:	4603      	mov	r3, r0
 8011532:	4619      	mov	r1, r3
 8011534:	2010      	movs	r0, #16
 8011536:	f7ff fafb 	bl	8010b30 <_ZnwjPv>
 801153a:	4604      	mov	r4, r0
 801153c:	69b9      	ldr	r1, [r7, #24]
 801153e:	4620      	mov	r0, r4
 8011540:	f004 fa48 	bl	80159d4 <_ZN13MainPresenterC1ER8MainView>
 8011544:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	69fa      	ldr	r2, [r7, #28]
 801154a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	697a      	ldr	r2, [r7, #20]
 8011550:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	69ba      	ldr	r2, [r7, #24]
 8011556:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d002      	beq.n	8011564 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	3304      	adds	r3, #4
 8011562:	e000      	b.n	8011566 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
 8011564:	2300      	movs	r3, #0
 8011566:	4619      	mov	r1, r3
 8011568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801156a:	f7ff fd71 	bl	8011050 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	3304      	adds	r3, #4
 8011572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011574:	4618      	mov	r0, r3
 8011576:	f7ff fde4 	bl	8011142 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801157a:	69bb      	ldr	r3, [r7, #24]
 801157c:	6979      	ldr	r1, [r7, #20]
 801157e:	4618      	mov	r0, r3
 8011580:	f000 f9a5 	bl	80118ce <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8011584:	69fa      	ldr	r2, [r7, #28]
 8011586:	6979      	ldr	r1, [r7, #20]
 8011588:	69b8      	ldr	r0, [r7, #24]
 801158a:	f7ff fd3a 	bl	8011002 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 801158e:	697b      	ldr	r3, [r7, #20]
}
 8011590:	4618      	mov	r0, r3
 8011592:	3724      	adds	r7, #36	; 0x24
 8011594:	46bd      	mov	sp, r7
 8011596:	bd90      	pop	{r4, r7, pc}
 8011598:	080298a8 	.word	0x080298a8
 801159c:	08029938 	.word	0x08029938
 80115a0:	08029a38 	.word	0x08029a38
 80115a4:	08029a7c 	.word	0x08029a7c
 80115a8:	08029b20 	.word	0x08029b20

080115ac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80115ac:	b590      	push	{r4, r7, lr}
 80115ae:	b089      	sub	sp, #36	; 0x24
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	607a      	str	r2, [r7, #4]
 80115b8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	689a      	ldr	r2, [r3, #8]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	3320      	adds	r3, #32
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4610      	mov	r0, r2
 80115ca:	4798      	blx	r3
 80115cc:	4603      	mov	r3, r0
 80115ce:	f642 0243 	movw	r2, #10307	; 0x2843
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d805      	bhi.n	80115e2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80115d6:	4b47      	ldr	r3, [pc, #284]	; (80116f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80115d8:	4a47      	ldr	r2, [pc, #284]	; (80116f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80115da:	21c2      	movs	r1, #194	; 0xc2
 80115dc:	4847      	ldr	r0, [pc, #284]	; (80116fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80115de:	f017 f811 	bl	8028604 <__assert_func>
 80115e2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	685a      	ldr	r2, [r3, #4]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	3320      	adds	r3, #32
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	4610      	mov	r0, r2
 80115f4:	4798      	blx	r3
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b0f      	cmp	r3, #15
 80115fa:	d805      	bhi.n	8011608 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80115fc:	4b40      	ldr	r3, [pc, #256]	; (8011700 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 80115fe:	4a3e      	ldr	r2, [pc, #248]	; (80116f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8011600:	21c3      	movs	r1, #195	; 0xc3
 8011602:	483e      	ldr	r0, [pc, #248]	; (80116fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8011604:	f016 fffe 	bl	8028604 <__assert_func>
 8011608:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68da      	ldr	r2, [r3, #12]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	3320      	adds	r3, #32
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4610      	mov	r0, r2
 801161a:	4798      	blx	r3
 801161c:	4603      	mov	r3, r0
 801161e:	2b53      	cmp	r3, #83	; 0x53
 8011620:	d805      	bhi.n	801162e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8011622:	4b38      	ldr	r3, [pc, #224]	; (8011704 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 8011624:	4a34      	ldr	r2, [pc, #208]	; (80116f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8011626:	21c4      	movs	r1, #196	; 0xc4
 8011628:	4834      	ldr	r0, [pc, #208]	; (80116fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 801162a:	f016 ffeb 	bl	8028604 <__assert_func>
 801162e:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011630:	683a      	ldr	r2, [r7, #0]
 8011632:	68b9      	ldr	r1, [r7, #8]
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f7ff fc88 	bl	8010f4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	2100      	movs	r1, #0
 8011640:	4618      	mov	r0, r3
 8011642:	f000 f952 	bl	80118ea <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8011646:	4603      	mov	r3, r0
 8011648:	4619      	mov	r1, r3
 801164a:	2054      	movs	r0, #84	; 0x54
 801164c:	f7ff fa70 	bl	8010b30 <_ZnwjPv>
 8011650:	4604      	mov	r4, r0
 8011652:	2114      	movs	r1, #20
 8011654:	4620      	mov	r0, r4
 8011656:	f000 f97d 	bl	8011954 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 801165a:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	689b      	ldr	r3, [r3, #8]
 8011660:	2100      	movs	r1, #0
 8011662:	4618      	mov	r0, r3
 8011664:	f000 f90d 	bl	8011882 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011668:	4603      	mov	r3, r0
 801166a:	4619      	mov	r1, r3
 801166c:	f642 0044 	movw	r0, #10308	; 0x2844
 8011670:	f7ff fa5e 	bl	8010b30 <_ZnwjPv>
 8011674:	4604      	mov	r4, r0
 8011676:	4620      	mov	r0, r4
 8011678:	f004 fa58 	bl	8015b2c <_ZN8MainViewC1Ev>
 801167c:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	2100      	movs	r1, #0
 8011684:	4618      	mov	r0, r3
 8011686:	f000 f90f 	bl	80118a8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 801168a:	4603      	mov	r3, r0
 801168c:	4619      	mov	r1, r3
 801168e:	2010      	movs	r0, #16
 8011690:	f7ff fa4e 	bl	8010b30 <_ZnwjPv>
 8011694:	4604      	mov	r4, r0
 8011696:	69b9      	ldr	r1, [r7, #24]
 8011698:	4620      	mov	r0, r4
 801169a:	f004 f99b 	bl	80159d4 <_ZN13MainPresenterC1ER8MainView>
 801169e:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	69fa      	ldr	r2, [r7, #28]
 80116a4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	697a      	ldr	r2, [r7, #20]
 80116aa:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	69ba      	ldr	r2, [r7, #24]
 80116b0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d002      	beq.n	80116be <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	3304      	adds	r3, #4
 80116bc:	e000      	b.n	80116c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
 80116be:	2300      	movs	r3, #0
 80116c0:	4619      	mov	r1, r3
 80116c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116c4:	f7ff fcc4 	bl	8011050 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	3304      	adds	r3, #4
 80116cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7ff fd37 	bl	8011142 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	6979      	ldr	r1, [r7, #20]
 80116d8:	4618      	mov	r0, r3
 80116da:	f000 f8f8 	bl	80118ce <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80116de:	69fa      	ldr	r2, [r7, #28]
 80116e0:	6979      	ldr	r1, [r7, #20]
 80116e2:	69b8      	ldr	r0, [r7, #24]
 80116e4:	f7ff fc8d 	bl	8011002 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80116e8:	697b      	ldr	r3, [r7, #20]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3724      	adds	r7, #36	; 0x24
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd90      	pop	{r4, r7, pc}
 80116f2:	bf00      	nop
 80116f4:	080298a8 	.word	0x080298a8
 80116f8:	08029bc4 	.word	0x08029bc4
 80116fc:	08029a38 	.word	0x08029a38
 8011700:	08029a7c 	.word	0x08029a7c
 8011704:	08029b20 	.word	0x08029b20

08011708 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011708:	b590      	push	{r4, r7, lr}
 801170a:	b089      	sub	sp, #36	; 0x24
 801170c:	af00      	add	r7, sp, #0
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
 8011714:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	689a      	ldr	r2, [r3, #8]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	689b      	ldr	r3, [r3, #8]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	3320      	adds	r3, #32
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4610      	mov	r0, r2
 8011726:	4798      	blx	r3
 8011728:	4603      	mov	r3, r0
 801172a:	2bf7      	cmp	r3, #247	; 0xf7
 801172c:	d805      	bhi.n	801173a <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 801172e:	4b46      	ldr	r3, [pc, #280]	; (8011848 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8011730:	4a46      	ldr	r2, [pc, #280]	; (801184c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8011732:	21c2      	movs	r1, #194	; 0xc2
 8011734:	4846      	ldr	r0, [pc, #280]	; (8011850 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8011736:	f016 ff65 	bl	8028604 <__assert_func>
 801173a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	685a      	ldr	r2, [r3, #4]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	3320      	adds	r3, #32
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	4610      	mov	r0, r2
 801174c:	4798      	blx	r3
 801174e:	4603      	mov	r3, r0
 8011750:	2b0f      	cmp	r3, #15
 8011752:	d805      	bhi.n	8011760 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8011754:	4b3f      	ldr	r3, [pc, #252]	; (8011854 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8011756:	4a3d      	ldr	r2, [pc, #244]	; (801184c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8011758:	21c3      	movs	r1, #195	; 0xc3
 801175a:	483d      	ldr	r0, [pc, #244]	; (8011850 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801175c:	f016 ff52 	bl	8028604 <__assert_func>
 8011760:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	68da      	ldr	r2, [r3, #12]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3320      	adds	r3, #32
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4610      	mov	r0, r2
 8011772:	4798      	blx	r3
 8011774:	4603      	mov	r3, r0
 8011776:	2b53      	cmp	r3, #83	; 0x53
 8011778:	d805      	bhi.n	8011786 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 801177a:	4b37      	ldr	r3, [pc, #220]	; (8011858 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 801177c:	4a33      	ldr	r2, [pc, #204]	; (801184c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801177e:	21c4      	movs	r1, #196	; 0xc4
 8011780:	4833      	ldr	r0, [pc, #204]	; (8011850 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8011782:	f016 ff3f 	bl	8028604 <__assert_func>
 8011786:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	68b9      	ldr	r1, [r7, #8]
 801178c:	68f8      	ldr	r0, [r7, #12]
 801178e:	f7ff fbdc 	bl	8010f4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	2100      	movs	r1, #0
 8011798:	4618      	mov	r0, r3
 801179a:	f000 f8a6 	bl	80118ea <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801179e:	4603      	mov	r3, r0
 80117a0:	4619      	mov	r1, r3
 80117a2:	2054      	movs	r0, #84	; 0x54
 80117a4:	f7ff f9c4 	bl	8010b30 <_ZnwjPv>
 80117a8:	4604      	mov	r4, r0
 80117aa:	2114      	movs	r1, #20
 80117ac:	4620      	mov	r0, r4
 80117ae:	f000 f8d1 	bl	8011954 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80117b2:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	2100      	movs	r1, #0
 80117ba:	4618      	mov	r0, r3
 80117bc:	f000 f95e 	bl	8011a7c <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>
 80117c0:	4603      	mov	r3, r0
 80117c2:	4619      	mov	r1, r3
 80117c4:	20f8      	movs	r0, #248	; 0xf8
 80117c6:	f7ff f9b3 	bl	8010b30 <_ZnwjPv>
 80117ca:	4604      	mov	r4, r0
 80117cc:	4620      	mov	r0, r4
 80117ce:	f004 fe09 	bl	80163e4 <_ZN16SecondScreenViewC1Ev>
 80117d2:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	2100      	movs	r1, #0
 80117da:	4618      	mov	r0, r3
 80117dc:	f000 f961 	bl	8011aa2 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>
 80117e0:	4603      	mov	r3, r0
 80117e2:	4619      	mov	r1, r3
 80117e4:	2010      	movs	r0, #16
 80117e6:	f7ff f9a3 	bl	8010b30 <_ZnwjPv>
 80117ea:	4604      	mov	r4, r0
 80117ec:	69b9      	ldr	r1, [r7, #24]
 80117ee:	4620      	mov	r0, r4
 80117f0:	f004 fda2 	bl	8016338 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>
 80117f4:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	69fa      	ldr	r2, [r7, #28]
 80117fa:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	697a      	ldr	r2, [r7, #20]
 8011800:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	69ba      	ldr	r2, [r7, #24]
 8011806:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d002      	beq.n	8011814 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	3304      	adds	r3, #4
 8011812:	e000      	b.n	8011816 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8011814:	2300      	movs	r3, #0
 8011816:	4619      	mov	r1, r3
 8011818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801181a:	f7ff fc19 	bl	8011050 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	3304      	adds	r3, #4
 8011822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011824:	4618      	mov	r0, r3
 8011826:	f7ff fc8c 	bl	8011142 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	6979      	ldr	r1, [r7, #20]
 801182e:	4618      	mov	r0, r3
 8011830:	f000 f94a 	bl	8011ac8 <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8011834:	69fa      	ldr	r2, [r7, #28]
 8011836:	6979      	ldr	r1, [r7, #20]
 8011838:	69b8      	ldr	r0, [r7, #24]
 801183a:	f7ff fbe2 	bl	8011002 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801183e:	697b      	ldr	r3, [r7, #20]
}
 8011840:	4618      	mov	r0, r3
 8011842:	3724      	adds	r7, #36	; 0x24
 8011844:	46bd      	mov	sp, r7
 8011846:	bd90      	pop	{r4, r7, pc}
 8011848:	080298a8 	.word	0x080298a8
 801184c:	08029cd8 	.word	0x08029cd8
 8011850:	08029a38 	.word	0x08029a38
 8011854:	08029a7c 	.word	0x08029a7c
 8011858:	08029b20 	.word	0x08029b20

0801185c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	460b      	mov	r3, r1
 8011866:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	3324      	adds	r3, #36	; 0x24
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	887a      	ldrh	r2, [r7, #2]
 8011872:	4611      	mov	r1, r2
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	4798      	blx	r3
 8011878:	4603      	mov	r3, r0
    }
 801187a:	4618      	mov	r0, r3
 801187c:	3708      	adds	r7, #8
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8011882:	b580      	push	{r7, lr}
 8011884:	b082      	sub	sp, #8
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	460b      	mov	r3, r1
 801188c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	3324      	adds	r3, #36	; 0x24
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	887a      	ldrh	r2, [r7, #2]
 8011898:	4611      	mov	r1, r2
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	4798      	blx	r3
 801189e:	4603      	mov	r3, r0
    }
 80118a0:	4618      	mov	r0, r3
 80118a2:	3708      	adds	r7, #8
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	460b      	mov	r3, r1
 80118b2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	3324      	adds	r3, #36	; 0x24
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	887a      	ldrh	r2, [r7, #2]
 80118be:	4611      	mov	r1, r2
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	4798      	blx	r3
 80118c4:	4603      	mov	r3, r0
    }
 80118c6:	4618      	mov	r0, r3
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80118ce:	b480      	push	{r7}
 80118d0:	b083      	sub	sp, #12
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	683a      	ldr	r2, [r7, #0]
 80118dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80118de:	bf00      	nop
 80118e0:	370c      	adds	r7, #12
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr

080118ea <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b082      	sub	sp, #8
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
 80118f2:	460b      	mov	r3, r1
 80118f4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	3324      	adds	r3, #36	; 0x24
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	887a      	ldrh	r2, [r7, #2]
 8011900:	4611      	mov	r1, r2
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	4798      	blx	r3
 8011906:	4603      	mov	r3, r0
    }
 8011908:	4618      	mov	r0, r3
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	4a05      	ldr	r2, [pc, #20]	; (8011930 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	601a      	str	r2, [r3, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	4618      	mov	r0, r3
 8011922:	f000 f943 	bl	8011bac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	4618      	mov	r0, r3
 801192a:	3708      	adds	r7, #8
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}
 8011930:	0802a4e0 	.word	0x0802a4e0

08011934 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f7ff ffe7 	bl	8011910 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011942:	2110      	movs	r1, #16
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f016 fe2f 	bl	80285a8 <_ZdlPvj>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4618      	mov	r0, r3
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8011954:	b590      	push	{r4, r7, lr}
 8011956:	b087      	sub	sp, #28
 8011958:	af02      	add	r7, sp, #8
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	460b      	mov	r3, r1
 801195e:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4618      	mov	r0, r3
 8011964:	f7ff f952 	bl	8010c0c <_ZN8touchgfx10TransitionC1Ev>
 8011968:	4a3f      	ldr	r2, [pc, #252]	; (8011a68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	601a      	str	r2, [r3, #0]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	330c      	adds	r3, #12
 8011972:	4618      	mov	r0, r3
 8011974:	f009 f918 	bl	801aba8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	639a      	str	r2, [r3, #56]	; 0x38
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8011988:	4a38      	ldr	r2, [pc, #224]	; (8011a6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 801198a:	f107 0308 	add.w	r3, r7, #8
 801198e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011992:	e883 0003 	stmia.w	r3, {r0, r1}
 8011996:	f107 0308 	add.w	r3, r7, #8
 801199a:	cb0c      	ldmia	r3, {r2, r3}
 801199c:	6879      	ldr	r1, [r7, #4]
 801199e:	4620      	mov	r0, r4
 80119a0:	f000 f8e4 	bl	8011b6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2202      	movs	r2, #2
 80119a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	78fa      	ldrb	r2, [r7, #3]
 80119b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2200      	movs	r2, #0
 80119b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2200      	movs	r2, #0
 80119c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 80119c4:	4b2a      	ldr	r3, [pc, #168]	; (8011a70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d047      	beq.n	8011a5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f103 000c 	add.w	r0, r3, #12
 80119d2:	4b28      	ldr	r3, [pc, #160]	; (8011a74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	b21a      	sxth	r2, r3
 80119d8:	4b27      	ldr	r3, [pc, #156]	; (8011a78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	b21b      	sxth	r3, r3
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	4613      	mov	r3, r2
 80119e2:	2200      	movs	r2, #0
 80119e4:	2100      	movs	r1, #0
 80119e6:	f7ff f99f 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	330c      	adds	r3, #12
 80119ee:	4618      	mov	r0, r3
 80119f0:	f009 f856 	bl	801aaa0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80119fa:	2b03      	cmp	r3, #3
 80119fc:	d82a      	bhi.n	8011a54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 80119fe:	a201      	add	r2, pc, #4	; (adr r2, 8011a04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8011a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a04:	08011a35 	.word	0x08011a35
 8011a08:	08011a43 	.word	0x08011a43
 8011a0c:	08011a15 	.word	0x08011a15
 8011a10:	08011a27 	.word	0x08011a27
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8011a14:	4b17      	ldr	r3, [pc, #92]	; (8011a74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	425b      	negs	r3, r3
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	b21a      	sxth	r2, r3
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a24:	e01a      	b.n	8011a5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 8011a26:	4b13      	ldr	r3, [pc, #76]	; (8011a74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011a28:	881b      	ldrh	r3, [r3, #0]
 8011a2a:	b21a      	sxth	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a32:	e013      	b.n	8011a5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 8011a34:	4b10      	ldr	r3, [pc, #64]	; (8011a78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011a36:	881b      	ldrh	r3, [r3, #0]
 8011a38:	b21a      	sxth	r2, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a40:	e00c      	b.n	8011a5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 8011a42:	4b0d      	ldr	r3, [pc, #52]	; (8011a78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	425b      	negs	r3, r3
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	b21a      	sxth	r2, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a52:	e003      	b.n	8011a5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2201      	movs	r2, #1
 8011a58:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 8011a5a:	bf00      	nop
            }
        }
    }
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3714      	adds	r7, #20
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd90      	pop	{r4, r7, pc}
 8011a66:	bf00      	nop
 8011a68:	0802a4b8 	.word	0x0802a4b8
 8011a6c:	08029dfc 	.word	0x08029dfc
 8011a70:	2000beed 	.word	0x2000beed
 8011a74:	2000bee2 	.word	0x2000bee2
 8011a78:	2000bee4 	.word	0x2000bee4

08011a7c <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>:
    T& at(const uint16_t index)
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	460b      	mov	r3, r1
 8011a86:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	3324      	adds	r3, #36	; 0x24
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	887a      	ldrh	r2, [r7, #2]
 8011a92:	4611      	mov	r1, r2
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	4798      	blx	r3
 8011a98:	4603      	mov	r3, r0
    }
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3708      	adds	r7, #8
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}

08011aa2 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8011aa2:	b580      	push	{r7, lr}
 8011aa4:	b082      	sub	sp, #8
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
 8011aaa:	460b      	mov	r3, r1
 8011aac:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	3324      	adds	r3, #36	; 0x24
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	887a      	ldrh	r2, [r7, #2]
 8011ab8:	4611      	mov	r1, r2
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	4798      	blx	r3
 8011abe:	4603      	mov	r3, r0
    }
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 8011ac8:	b480      	push	{r7}
 8011aca:	b083      	sub	sp, #12
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	683a      	ldr	r2, [r7, #0]
 8011ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011ad8:	bf00      	nop
 8011ada:	370c      	adds	r7, #12
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr

08011ae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011af2:	683a      	ldr	r2, [r7, #0]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d024      	beq.n	8011b42 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5e>
        {
            return;
        }

        switch (direction)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011afe:	2b01      	cmp	r3, #1
 8011b00:	dc02      	bgt.n	8011b08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da0e      	bge.n	8011b24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x40>
 8011b06:	e018      	b.n	8011b3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x56>
 8011b08:	3b02      	subs	r3, #2
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	d815      	bhi.n	8011b3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x56>
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	3354      	adds	r3, #84	; 0x54
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	6838      	ldr	r0, [r7, #0]
 8011b20:	4798      	blx	r3
            break;
 8011b22:	e00f      	b.n	8011b44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	3354      	adds	r3, #84	; 0x54
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011b32:	2100      	movs	r1, #0
 8011b34:	6838      	ldr	r0, [r7, #0]
 8011b36:	4798      	blx	r3
            break;
 8011b38:	e004      	b.n	8011b44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	721a      	strb	r2, [r3, #8]
            break;
 8011b40:	e000      	b.n	8011b44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
            return;
 8011b42:	bf00      	nop
        }
    }
 8011b44:	3708      	adds	r7, #8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
	...

08011b4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	4a04      	ldr	r2, [pc, #16]	; (8011b68 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr
 8011b68:	0802a4f8 	.word	0x0802a4f8

08011b6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	4639      	mov	r1, r7
 8011b78:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff ffe4 	bl	8011b4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011b84:	4a08      	ldr	r2, [pc, #32]	; (8011ba8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	3308      	adds	r3, #8
 8011b94:	463a      	mov	r2, r7
 8011b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3710      	adds	r7, #16
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	0802a4e0 	.word	0x0802a4e0

08011bac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
    }
 8011bb4:	4a04      	ldr	r2, [pc, #16]	; (8011bc8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr
 8011bc8:	0802a4f8 	.word	0x0802a4f8

08011bcc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    }
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f7ff ffe9 	bl	8011bac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011bda:	2104      	movs	r1, #4
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f016 fce3 	bl	80285a8 <_ZdlPvj>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	4618      	mov	r0, r3
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	4a05      	ldr	r2, [pc, #20]	; (8011c0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7ff f873 	bl	8010ce8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	4618      	mov	r0, r3
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	0802a56c 	.word	0x0802a56c

08011c10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f7ff ffe7 	bl	8011bec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011c1e:	2110      	movs	r1, #16
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f016 fcc1 	bl	80285a8 <_ZdlPvj>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
    }
 8011c38:	4a0a      	ldr	r2, [pc, #40]	; (8011c64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	601a      	str	r2, [r3, #0]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	333c      	adds	r3, #60	; 0x3c
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7ff fe64 	bl	8011910 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	330c      	adds	r3, #12
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f008 ff26 	bl	801aa9e <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fe ffef 	bl	8010c38 <_ZN8touchgfx10TransitionD1Ev>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3708      	adds	r7, #8
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	0802a4b8 	.word	0x0802a4b8

08011c68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
    }
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7ff ffdd 	bl	8011c30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8011c76:	2154      	movs	r1, #84	; 0x54
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f016 fc95 	bl	80285a8 <_ZdlPvj>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4618      	mov	r0, r3
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011c90:	4b56      	ldr	r3, [pc, #344]	; (8011dec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x164>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f083 0301 	eor.w	r3, r3, #1
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d003      	beq.n	8011ca6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	721a      	strb	r2, [r3, #8]
            return;
 8011ca4:	e09f      	b.n	8011de6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x15e>
        Transition::handleTickEvent();
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7fe ffe5 	bl	8010c78 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	b2da      	uxtb	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d82f      	bhi.n	8011d2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011cd4:	b298      	uxth	r0, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	f00b fd86 	bl	801d7f6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011cea:	4603      	mov	r3, r0
 8011cec:	461a      	mov	r2, r3
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	f003 0301 	and.w	r3, r3, #1
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d01b      	beq.n	8011d3e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011d14:	2a00      	cmp	r2, #0
 8011d16:	dd01      	ble.n	8011d1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8011d18:	2201      	movs	r2, #1
 8011d1a:	e001      	b.n	8011d20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8011d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d20:	4413      	add	r3, r2
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	b21a      	sxth	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011d2c:	e007      	b.n	8011d3e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2201      	movs	r2, #1
 8011d32:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2200      	movs	r2, #0
 8011d38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8011d3c:	e053      	b.n	8011de6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x15e>
        switch (direction)
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	dc02      	bgt.n	8011d4e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc6>
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	da20      	bge.n	8011d8e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
 8011d4c:	e03c      	b.n	8011dc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x140>
 8011d4e:	3b02      	subs	r3, #2
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d839      	bhi.n	8011dc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x140>
            calculatedValue -= snapshot.getX();
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	330c      	adds	r3, #12
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7ff f812 	bl	8010d82 <_ZNK8touchgfx8Drawable4getXEv>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	4619      	mov	r1, r3
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011d68:	b29a      	uxth	r2, r3
 8011d6a:	b28b      	uxth	r3, r1
 8011d6c:	1ad3      	subs	r3, r2, r3
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	b21a      	sxth	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f103 000c 	add.w	r0, r3, #12
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011d84:	2200      	movs	r2, #0
 8011d86:	4619      	mov	r1, r3
 8011d88:	f00b f86c 	bl	801ce64 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011d8c:	e020      	b.n	8011dd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x148>
            calculatedValue -= snapshot.getY();
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	330c      	adds	r3, #12
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7ff f802 	bl	8010d9c <_ZNK8touchgfx8Drawable4getYEv>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	b28b      	uxth	r3, r1
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	b21a      	sxth	r2, r3
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f103 000c 	add.w	r0, r3, #12
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	f00b f84f 	bl	801ce64 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011dc6:	e003      	b.n	8011dd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x148>
            done = true;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	721a      	strb	r2, [r3, #8]
            break;
 8011dce:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6858      	ldr	r0, [r3, #4]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	3378      	adds	r3, #120	; 0x78
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	323c      	adds	r2, #60	; 0x3c
 8011de2:	4611      	mov	r1, r2
 8011de4:	4798      	blx	r3
    }
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	2000beed 	.word	0x2000beed

08011df0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8011df8:	4b0b      	ldr	r3, [pc, #44]	; (8011e28 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d00e      	beq.n	8011e1e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00a      	beq.n	8011e1e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6858      	ldr	r0, [r3, #4]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	3364      	adds	r3, #100	; 0x64
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	320c      	adds	r2, #12
 8011e1a:	4611      	mov	r1, r2
 8011e1c:	4798      	blx	r3
    }
 8011e1e:	bf00      	nop
 8011e20:	3708      	adds	r7, #8
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	2000beed 	.word	0x2000beed

08011e2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b088      	sub	sp, #32
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8011e34:	4b1a      	ldr	r3, [pc, #104]	; (8011ea0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d02d      	beq.n	8011e98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fe ff2e 	bl	8010ca0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011e44:	4a17      	ldr	r2, [pc, #92]	; (8011ea4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8011e46:	f107 0318 	add.w	r3, r7, #24
 8011e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e52:	f107 0008 	add.w	r0, r7, #8
 8011e56:	f107 0318 	add.w	r3, r7, #24
 8011e5a:	cb0c      	ldmia	r3, {r2, r3}
 8011e5c:	6879      	ldr	r1, [r7, #4]
 8011e5e:	f7ff fe85 	bl	8011b6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	685a      	ldr	r2, [r3, #4]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	3378      	adds	r3, #120	; 0x78
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	f107 0108 	add.w	r1, r7, #8
 8011e74:	4610      	mov	r0, r2
 8011e76:	4798      	blx	r3
            screenContainer->add(snapshot);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6858      	ldr	r0, [r3, #4]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	3360      	adds	r3, #96	; 0x60
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	320c      	adds	r2, #12
 8011e8a:	4611      	mov	r1, r2
 8011e8c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011e8e:	f107 0308 	add.w	r3, r7, #8
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff fd3c 	bl	8011910 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8011e98:	bf00      	nop
 8011e9a:	3720      	adds	r7, #32
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	2000beed 	.word	0x2000beed
 8011ea4:	08029e04 	.word	0x08029e04

08011ea8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
 8011eb0:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011eb8:	2b03      	cmp	r3, #3
 8011eba:	d83b      	bhi.n	8011f34 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8011ebc:	a201      	add	r2, pc, #4	; (adr r2, 8011ec4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8011ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec2:	bf00      	nop
 8011ec4:	08011f05 	.word	0x08011f05
 8011ec8:	08011f1f 	.word	0x08011f1f
 8011ecc:	08011ed5 	.word	0x08011ed5
 8011ed0:	08011eeb 	.word	0x08011eeb
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	3354      	adds	r3, #84	; 0x54
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4a18      	ldr	r2, [pc, #96]	; (8011f40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011ede:	8812      	ldrh	r2, [r2, #0]
 8011ee0:	b211      	sxth	r1, r2
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	6838      	ldr	r0, [r7, #0]
 8011ee6:	4798      	blx	r3
            break;
 8011ee8:	e025      	b.n	8011f36 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	3354      	adds	r3, #84	; 0x54
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	4a13      	ldr	r2, [pc, #76]	; (8011f40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011ef4:	8812      	ldrh	r2, [r2, #0]
 8011ef6:	4252      	negs	r2, r2
 8011ef8:	b292      	uxth	r2, r2
 8011efa:	b211      	sxth	r1, r2
 8011efc:	2200      	movs	r2, #0
 8011efe:	6838      	ldr	r0, [r7, #0]
 8011f00:	4798      	blx	r3
            break;
 8011f02:	e018      	b.n	8011f36 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	3354      	adds	r3, #84	; 0x54
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	4a0d      	ldr	r2, [pc, #52]	; (8011f44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011f0e:	8812      	ldrh	r2, [r2, #0]
 8011f10:	4252      	negs	r2, r2
 8011f12:	b292      	uxth	r2, r2
 8011f14:	b212      	sxth	r2, r2
 8011f16:	2100      	movs	r1, #0
 8011f18:	6838      	ldr	r0, [r7, #0]
 8011f1a:	4798      	blx	r3
            break;
 8011f1c:	e00b      	b.n	8011f36 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	3354      	adds	r3, #84	; 0x54
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4a07      	ldr	r2, [pc, #28]	; (8011f44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011f28:	8812      	ldrh	r2, [r2, #0]
 8011f2a:	b212      	sxth	r2, r2
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	6838      	ldr	r0, [r7, #0]
 8011f30:	4798      	blx	r3
            break;
 8011f32:	e000      	b.n	8011f36 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8011f34:	bf00      	nop
    }
 8011f36:	bf00      	nop
 8011f38:	3708      	adds	r7, #8
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	2000bee2 	.word	0x2000bee2
 8011f44:	2000bee4 	.word	0x2000bee4

08011f48 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	68d2      	ldr	r2, [r2, #12]
 8011f5a:	1052      	asrs	r2, r2, #1
 8011f5c:	1898      	adds	r0, r3, r2
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	f003 0301 	and.w	r3, r3, #1
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d102      	bne.n	8011f70 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	689b      	ldr	r3, [r3, #8]
 8011f6e:	e00a      	b.n	8011f86 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	68d2      	ldr	r2, [r2, #12]
 8011f78:	1052      	asrs	r2, r2, #1
 8011f7a:	4413      	add	r3, r2
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	6892      	ldr	r2, [r2, #8]
 8011f82:	4413      	add	r3, r2
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	6839      	ldr	r1, [r7, #0]
 8011f88:	4798      	blx	r3
    }
 8011f8a:	bf00      	nop
 8011f8c:	3708      	adds	r7, #8
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8011f92:	b480      	push	{r7}
 8011f94:	b083      	sub	sp, #12
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d010      	beq.n	8011fc4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	689b      	ldr	r3, [r3, #8]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d107      	bne.n	8011fba <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	f003 0301 	and.w	r3, r3, #1
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d101      	bne.n	8011fba <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	e000      	b.n	8011fbc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011fba:	2300      	movs	r3, #0
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d001      	beq.n	8011fc4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	e000      	b.n	8011fc6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011fc4:	2300      	movs	r3, #0
    }
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	370c      	adds	r7, #12
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr

08011fd2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8011fd2:	b580      	push	{r7, lr}
 8011fd4:	b082      	sub	sp, #8
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	687a      	ldr	r2, [r7, #4]
 8011fe0:	68d2      	ldr	r2, [r2, #12]
 8011fe2:	1052      	asrs	r2, r2, #1
 8011fe4:	1899      	adds	r1, r3, r2
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	f003 0301 	and.w	r3, r3, #1
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d102      	bne.n	8011ff8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	e00a      	b.n	801200e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	68d2      	ldr	r2, [r2, #12]
 8012000:	1052      	asrs	r2, r2, #1
 8012002:	4413      	add	r3, r2
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	687a      	ldr	r2, [r7, #4]
 8012008:	6892      	ldr	r2, [r2, #8]
 801200a:	4413      	add	r3, r2
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	4608      	mov	r0, r1
 8012010:	4798      	blx	r3
    }
 8012012:	bf00      	nop
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}

0801201a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801201a:	b480      	push	{r7}
 801201c:	b083      	sub	sp, #12
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d010      	beq.n	801204c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d107      	bne.n	8012042 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	f003 0301 	and.w	r3, r3, #1
 801203a:	2b00      	cmp	r3, #0
 801203c:	d101      	bne.n	8012042 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801203e:	2301      	movs	r3, #1
 8012040:	e000      	b.n	8012044 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8012042:	2300      	movs	r3, #0
 8012044:	2b01      	cmp	r3, #1
 8012046:	d001      	beq.n	801204c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8012048:	2301      	movs	r3, #1
 801204a:	e000      	b.n	801204e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801204c:	2300      	movs	r3, #0
    }
 801204e:	4618      	mov	r0, r3
 8012050:	370c      	adds	r7, #12
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr

0801205a <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 801205a:	b480      	push	{r7}
 801205c:	b083      	sub	sp, #12
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2200      	movs	r2, #0
 8012066:	601a      	str	r2, [r3, #0]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	4618      	mov	r0, r3
 801206c:	370c      	adds	r7, #12
 801206e:	46bd      	mov	sp, r7
 8012070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012074:	4770      	bx	lr

08012076 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8012076:	b480      	push	{r7}
 8012078:	b083      	sub	sp, #12
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
 801207e:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	683a      	ldr	r2, [r7, #0]
 8012084:	601a      	str	r2, [r3, #0]
    }
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	4618      	mov	r0, r3
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2200      	movs	r2, #0
 80120a6:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2200      	movs	r2, #0
 80120ac:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2200      	movs	r2, #0
 80120b2:	80da      	strh	r2, [r3, #6]
    }
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	4618      	mov	r0, r3
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr

080120c2 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80120c2:	b480      	push	{r7}
 80120c4:	b085      	sub	sp, #20
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	60f8      	str	r0, [r7, #12]
 80120ca:	4608      	mov	r0, r1
 80120cc:	4611      	mov	r1, r2
 80120ce:	461a      	mov	r2, r3
 80120d0:	4603      	mov	r3, r0
 80120d2:	817b      	strh	r3, [r7, #10]
 80120d4:	460b      	mov	r3, r1
 80120d6:	813b      	strh	r3, [r7, #8]
 80120d8:	4613      	mov	r3, r2
 80120da:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	897a      	ldrh	r2, [r7, #10]
 80120e0:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	893a      	ldrh	r2, [r7, #8]
 80120e6:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	88fa      	ldrh	r2, [r7, #6]
 80120ec:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	8b3a      	ldrh	r2, [r7, #24]
 80120f2:	80da      	strh	r2, [r3, #6]
    }
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	4618      	mov	r0, r3
 80120f8:	3714      	adds	r7, #20
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8012102:	b480      	push	{r7}
 8012104:	b083      	sub	sp, #12
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
    {
        return _type;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	791b      	ldrb	r3, [r3, #4]
    }
 801210e:	4618      	mov	r0, r3
 8012110:	370c      	adds	r7, #12
 8012112:	46bd      	mov	sp, r7
 8012114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012118:	4770      	bx	lr

0801211a <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 801211a:	b480      	push	{r7}
 801211c:	b083      	sub	sp, #12
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
 8012122:	460b      	mov	r3, r1
 8012124:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	887a      	ldrh	r2, [r7, #2]
 801212a:	801a      	strh	r2, [r3, #0]
    {
    }
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	4618      	mov	r0, r3
 8012130:	370c      	adds	r7, #12
 8012132:	46bd      	mov	sp, r7
 8012134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012138:	4770      	bx	lr
	...

0801213c <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af02      	add	r7, sp, #8
 8012142:	6078      	str	r0, [r7, #4]
        visible(true)
 8012144:	4a13      	ldr	r2, [pc, #76]	; (8012194 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	601a      	str	r2, [r3, #0]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	1d18      	adds	r0, r3, #4
 801214e:	2300      	movs	r3, #0
 8012150:	9300      	str	r3, [sp, #0]
 8012152:	2300      	movs	r3, #0
 8012154:	2200      	movs	r2, #0
 8012156:	2100      	movs	r1, #0
 8012158:	f7ff ffb3 	bl	80120c2 <_ZN8touchgfx4RectC1Essss>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	330c      	adds	r3, #12
 8012160:	4618      	mov	r0, r3
 8012162:	f7ff ff97 	bl	8012094 <_ZN8touchgfx4RectC1Ev>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	615a      	str	r2, [r3, #20]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2200      	movs	r2, #0
 8012170:	619a      	str	r2, [r3, #24]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	61da      	str	r2, [r3, #28]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2201      	movs	r2, #1
 8012184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4618      	mov	r0, r3
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	0802c9d4 	.word	0x0802c9d4

08012198 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	4a04      	ldr	r2, [pc, #16]	; (80121b4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	601a      	str	r2, [r3, #0]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4618      	mov	r0, r3
 80121aa:	370c      	adds	r7, #12
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr
 80121b4:	0802c9d4 	.word	0x0802c9d4

080121b8 <_ZN8touchgfx8DrawableD0Ev>:
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f7ff ffe9 	bl	8012198 <_ZN8touchgfx8DrawableD1Ev>
 80121c6:	2128      	movs	r1, #40	; 0x28
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f016 f9ed 	bl	80285a8 <_ZdlPvj>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	4618      	mov	r0, r3
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	460b      	mov	r3, r1
 80121e2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	887a      	ldrh	r2, [r7, #2]
 80121e8:	809a      	strh	r2, [r3, #4]
    }
 80121ea:	bf00      	nop
 80121ec:	370c      	adds	r7, #12
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr

080121f6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 80121f6:	b480      	push	{r7}
 80121f8:	b083      	sub	sp, #12
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	6078      	str	r0, [r7, #4]
 80121fe:	460b      	mov	r3, r1
 8012200:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	887a      	ldrh	r2, [r7, #2]
 8012206:	80da      	strh	r2, [r3, #6]
    }
 8012208:	bf00      	nop
 801220a:	370c      	adds	r7, #12
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	460b      	mov	r3, r1
 801221e:	807b      	strh	r3, [r7, #2]
 8012220:	4613      	mov	r3, r2
 8012222:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	332c      	adds	r3, #44	; 0x2c
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012230:	4611      	mov	r1, r2
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	4798      	blx	r3
        setY(y);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	3330      	adds	r3, #48	; 0x30
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012242:	4611      	mov	r1, r2
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	4798      	blx	r3
    }
 8012248:	bf00      	nop
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8012250:	b480      	push	{r7}
 8012252:	b083      	sub	sp, #12
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	460b      	mov	r3, r1
 801225a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	887a      	ldrh	r2, [r7, #2]
 8012260:	811a      	strh	r2, [r3, #8]
    }
 8012262:	bf00      	nop
 8012264:	370c      	adds	r7, #12
 8012266:	46bd      	mov	sp, r7
 8012268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226c:	4770      	bx	lr

0801226e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 801226e:	b480      	push	{r7}
 8012270:	b083      	sub	sp, #12
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
 8012276:	460b      	mov	r3, r1
 8012278:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	887a      	ldrh	r2, [r7, #2]
 801227e:	815a      	strh	r2, [r3, #10]
    }
 8012280:	bf00      	nop
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228a:	4770      	bx	lr

0801228c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801228c:	b480      	push	{r7}
 801228e:	b083      	sub	sp, #12
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	bf00      	nop
 8012296:	370c      	adds	r7, #12
 8012298:	46bd      	mov	sp, r7
 801229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229e:	4770      	bx	lr

080122a0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 80122a0:	b480      	push	{r7}
 80122a2:	b083      	sub	sp, #12
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]
 80122aa:	bf00      	nop
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 80122b6:	b480      	push	{r7}
 80122b8:	b083      	sub	sp, #12
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
 80122be:	6039      	str	r1, [r7, #0]
 80122c0:	bf00      	nop
 80122c2:	370c      	adds	r7, #12
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6039      	str	r1, [r7, #0]
 80122d6:	bf00      	nop
 80122d8:	370c      	adds	r7, #12
 80122da:	46bd      	mov	sp, r7
 80122dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e0:	4770      	bx	lr

080122e2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 80122e2:	b480      	push	{r7}
 80122e4:	b083      	sub	sp, #12
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	bf00      	nop
 80122ec:	370c      	adds	r7, #12
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr

080122f6 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 80122f6:	b480      	push	{r7}
 80122f8:	b083      	sub	sp, #12
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
 80122fe:	460b      	mov	r3, r1
 8012300:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	78fa      	ldrb	r2, [r7, #3]
 8012306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801230a:	bf00      	nop
 801230c:	370c      	adds	r7, #12
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr

08012316 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8012316:	b480      	push	{r7}
 8012318:	b083      	sub	sp, #12
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
 801231e:	460b      	mov	r3, r1
 8012320:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	78fa      	ldrb	r2, [r7, #3]
 8012326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801232a:	bf00      	nop
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8012336:	b480      	push	{r7}
 8012338:	b083      	sub	sp, #12
 801233a:	af00      	add	r7, sp, #0
 801233c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8012344:	4618      	mov	r0, r3
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr

08012350 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 801235e:	4618      	mov	r0, r3
 8012360:	370c      	adds	r7, #12
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr

0801236a <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801236a:	b580      	push	{r7, lr}
 801236c:	b082      	sub	sp, #8
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
 8012372:	460b      	mov	r3, r1
 8012374:	807b      	strh	r3, [r7, #2]
 8012376:	4613      	mov	r3, r2
 8012378:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	3354      	adds	r3, #84	; 0x54
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	8879      	ldrh	r1, [r7, #2]
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801238a:	b292      	uxth	r2, r2
 801238c:	1a8a      	subs	r2, r1, r2
 801238e:	b292      	uxth	r2, r2
 8012390:	b210      	sxth	r0, r2
 8012392:	8839      	ldrh	r1, [r7, #0]
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801239a:	b292      	uxth	r2, r2
 801239c:	1a8a      	subs	r2, r1, r2
 801239e:	b292      	uxth	r2, r2
 80123a0:	b212      	sxth	r2, r2
 80123a2:	4601      	mov	r1, r0
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	4798      	blx	r3
    }
 80123a8:	bf00      	nop
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123be:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123c6:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123ce:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80123d0:	bf00      	nop
 80123d2:	370c      	adds	r7, #12
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr

080123dc <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f7ff ffe1 	bl	80123b0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	68fa      	ldr	r2, [r7, #12]
 80123fa:	601a      	str	r2, [r3, #0]
    }
 80123fc:	bf00      	nop
 80123fe:	3710      	adds	r7, #16
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
        firstChild(0)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	4618      	mov	r0, r3
 8012410:	f7ff fe94 	bl	801213c <_ZN8touchgfx8DrawableC1Ev>
 8012414:	4a05      	ldr	r2, [pc, #20]	; (801242c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	601a      	str	r2, [r3, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2200      	movs	r2, #0
 801241e:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	4618      	mov	r0, r3
 8012424:	3708      	adds	r7, #8
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}
 801242a:	bf00      	nop
 801242c:	0802b6c8 	.word	0x0802b6c8

08012430 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	4a05      	ldr	r2, [pc, #20]	; (8012450 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	601a      	str	r2, [r3, #0]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	4618      	mov	r0, r3
 8012442:	f7ff fea9 	bl	8012198 <_ZN8touchgfx8DrawableD1Ev>
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	0802b6c8 	.word	0x0802b6c8

08012454 <_ZN8touchgfx9ContainerD0Ev>:
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f7ff ffe7 	bl	8012430 <_ZN8touchgfx9ContainerD1Ev>
 8012462:	212c      	movs	r1, #44	; 0x2c
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f016 f89f 	bl	80285a8 <_ZdlPvj>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	4618      	mov	r0, r3
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	4a06      	ldr	r2, [pc, #24]	; (8012498 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	3304      	adds	r3, #4
 8012486:	4618      	mov	r0, r3
 8012488:	f7ff ffd2 	bl	8012430 <_ZN8touchgfx9ContainerD1Ev>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	0802cacc 	.word	0x0802cacc

0801249c <_ZN8touchgfx6ScreenD0Ev>:
 801249c:	b580      	push	{r7, lr}
 801249e:	b082      	sub	sp, #8
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7ff ffe5 	bl	8012474 <_ZN8touchgfx6ScreenD1Ev>
 80124aa:	213c      	movs	r1, #60	; 0x3c
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f016 f87b 	bl	80285a8 <_ZdlPvj>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4618      	mov	r0, r3
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80124bc:	b480      	push	{r7}
 80124be:	b083      	sub	sp, #12
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	bf00      	nop
 80124c6:	370c      	adds	r7, #12
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80124d0:	b480      	push	{r7}
 80124d2:	b083      	sub	sp, #12
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	bf00      	nop
 80124da:	370c      	adds	r7, #12
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr

080124e4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	bf00      	nop
 80124ee:	370c      	adds	r7, #12
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr

080124f8 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
    {
    }
 8012500:	bf00      	nop
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	460b      	mov	r3, r1
 8012516:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012518:	bf00      	nop
 801251a:	370c      	adds	r7, #12
 801251c:	46bd      	mov	sp, r7
 801251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012522:	4770      	bx	lr

08012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	3304      	adds	r3, #4
 8012532:	6839      	ldr	r1, [r7, #0]
 8012534:	4618      	mov	r0, r3
 8012536:	f006 fd6d 	bl	8019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801253a:	bf00      	nop
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8012544:	b580      	push	{r7, lr}
 8012546:	b082      	sub	sp, #8
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4618      	mov	r0, r3
 8012550:	f7ff fdf4 	bl	801213c <_ZN8touchgfx8DrawableC1Ev>
 8012554:	4a03      	ldr	r2, [pc, #12]	; (8012564 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	601a      	str	r2, [r3, #0]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4618      	mov	r0, r3
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	0802a8f0 	.word	0x0802a8f0

08012568 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	4a05      	ldr	r2, [pc, #20]	; (8012588 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	601a      	str	r2, [r3, #0]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4618      	mov	r0, r3
 801257a:	f7ff fe0d 	bl	8012198 <_ZN8touchgfx8DrawableD1Ev>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4618      	mov	r0, r3
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}
 8012588:	0802a8f0 	.word	0x0802a8f0

0801258c <_ZN8touchgfx6WidgetD0Ev>:
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f7ff ffe7 	bl	8012568 <_ZN8touchgfx6WidgetD1Ev>
 801259a:	2128      	movs	r1, #40	; 0x28
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f016 f803 	bl	80285a8 <_ZdlPvj>
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	4618      	mov	r0, r3
 80125a6:	3708      	adds	r7, #8
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	607b      	str	r3, [r7, #4]
 80125b6:	460b      	mov	r3, r1
 80125b8:	817b      	strh	r3, [r7, #10]
 80125ba:	4613      	mov	r3, r2
 80125bc:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7ff feb8 	bl	8012336 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d008      	beq.n	80125de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7ff febe 	bl	8012350 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80125d4:	4603      	mov	r3, r0
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d001      	beq.n	80125de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80125da:	2301      	movs	r3, #1
 80125dc:	e000      	b.n	80125e0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80125de:	2300      	movs	r3, #0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d002      	beq.n	80125ea <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	601a      	str	r2, [r3, #0]
        }
    }
 80125ea:	bf00      	nop
 80125ec:	3710      	adds	r7, #16
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
	...

080125f4 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	4618      	mov	r0, r3
 8012600:	f7ff ffa0 	bl	8012544 <_ZN8touchgfx6WidgetC1Ev>
 8012604:	4a0a      	ldr	r2, [pc, #40]	; (8012630 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	22ff      	movs	r2, #255	; 0xff
 801260e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3328      	adds	r3, #40	; 0x28
 8012616:	2100      	movs	r1, #0
 8012618:	4618      	mov	r0, r3
 801261a:	f7ff fd2c 	bl	8012076 <_ZN8touchgfx9colortypeC1Em>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2200      	movs	r2, #0
 8012622:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	4618      	mov	r0, r3
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	0802c470 	.word	0x0802c470

08012634 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	4a05      	ldr	r2, [pc, #20]	; (8012654 <_ZN8touchgfx3BoxD1Ev+0x20>)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	601a      	str	r2, [r3, #0]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4618      	mov	r0, r3
 8012646:	f7ff ff8f 	bl	8012568 <_ZN8touchgfx6WidgetD1Ev>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4618      	mov	r0, r3
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}
 8012654:	0802c470 	.word	0x0802c470

08012658 <_ZN8touchgfx3BoxD0Ev>:
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7ff ffe7 	bl	8012634 <_ZN8touchgfx3BoxD1Ev>
 8012666:	2130      	movs	r1, #48	; 0x30
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f015 ff9d 	bl	80285a8 <_ZdlPvj>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	3708      	adds	r7, #8
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	683a      	ldr	r2, [r7, #0]
 8012686:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012688:	bf00      	nop
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	460b      	mov	r3, r1
 801269e:	807b      	strh	r3, [r7, #2]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	887a      	ldrh	r2, [r7, #2]
 80126a4:	801a      	strh	r2, [r3, #0]
    }
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	4618      	mov	r0, r3
 80126aa:	370c      	adds	r7, #12
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr

080126b4 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
        assertValid();
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f7fd ff15 	bl	80104ec <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 80126c2:	4b06      	ldr	r3, [pc, #24]	; (80126dc <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	881b      	ldrh	r3, [r3, #0]
 80126ca:	4619      	mov	r1, r3
 80126cc:	4610      	mov	r0, r2
 80126ce:	f003 f809 	bl	80156e4 <_ZNK8touchgfx5Texts7getTextEt>
 80126d2:	4603      	mov	r3, r0
    }
 80126d4:	4618      	mov	r0, r3
 80126d6:	3708      	adds	r7, #8
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}
 80126dc:	2000bf8c 	.word	0x2000bf8c

080126e0 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7ff ff2a 	bl	8012544 <_ZN8touchgfx6WidgetC1Ev>
 80126f0:	4a13      	ldr	r2, [pc, #76]	; (8012740 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	601a      	str	r2, [r3, #0]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	3326      	adds	r3, #38	; 0x26
 80126fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80126fe:	4618      	mov	r0, r3
 8012700:	f7ff ffc8 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	3328      	adds	r3, #40	; 0x28
 8012708:	2100      	movs	r1, #0
 801270a:	4618      	mov	r0, r3
 801270c:	f7ff fcb3 	bl	8012076 <_ZN8touchgfx9colortypeC1Em>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2200      	movs	r2, #0
 8012714:	859a      	strh	r2, [r3, #44]	; 0x2c
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	22ff      	movs	r2, #255	; 0xff
 801271a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2200      	movs	r2, #0
 8012722:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2200      	movs	r2, #0
 801272a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2200      	movs	r2, #0
 8012732:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4618      	mov	r0, r3
 801273a:	3708      	adds	r7, #8
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	0802c3f4 	.word	0x0802c3f4

08012744 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8012744:	b580      	push	{r7, lr}
 8012746:	b084      	sub	sp, #16
 8012748:	af02      	add	r7, sp, #8
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 801274e:	2300      	movs	r3, #0
 8012750:	9300      	str	r3, [sp, #0]
 8012752:	2300      	movs	r3, #0
 8012754:	2200      	movs	r2, #0
 8012756:	2100      	movs	r1, #0
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7ff fcb2 	bl	80120c2 <_ZN8touchgfx4RectC1Essss>
    }
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	3708      	adds	r7, #8
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}

08012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8012766:	b480      	push	{r7}
 8012768:	b083      	sub	sp, #12
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
 801276e:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	683a      	ldr	r2, [r7, #0]
 8012774:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012776:	bf00      	nop
 8012778:	370c      	adds	r7, #12
 801277a:	46bd      	mov	sp, r7
 801277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012780:	4770      	bx	lr

08012782 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8012782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012784:	b085      	sub	sp, #20
 8012786:	af00      	add	r7, sp, #0
 8012788:	6078      	str	r0, [r7, #4]
 801278a:	460b      	mov	r3, r1
 801278c:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 801278e:	687e      	ldr	r6, [r7, #4]
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	3330      	adds	r3, #48	; 0x30
 8012796:	681c      	ldr	r4, [r3, #0]
 8012798:	887d      	ldrh	r5, [r7, #2]
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f000 f845 	bl	801282a <_ZNK8touchgfx8TextArea12getTypedTextEv>
 80127a0:	4603      	mov	r3, r0
 80127a2:	81bb      	strh	r3, [r7, #12]
 80127a4:	f107 030c 	add.w	r3, r7, #12
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7fd fe6b 	bl	8010484 <_ZNK8touchgfx9TypedText7getFontEv>
 80127ae:	4603      	mov	r3, r0
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	322c      	adds	r2, #44	; 0x2c
 80127b4:	6812      	ldr	r2, [r2, #0]
 80127b6:	4618      	mov	r0, r3
 80127b8:	4790      	blx	r2
 80127ba:	4603      	mov	r3, r0
 80127bc:	1aeb      	subs	r3, r5, r3
 80127be:	b29b      	uxth	r3, r3
 80127c0:	b21b      	sxth	r3, r3
 80127c2:	4619      	mov	r1, r3
 80127c4:	4630      	mov	r0, r6
 80127c6:	47a0      	blx	r4
    }
 80127c8:	bf00      	nop
 80127ca:	3714      	adds	r7, #20
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080127d0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	807b      	strh	r3, [r7, #2]
 80127dc:	4613      	mov	r3, r2
 80127de:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	332c      	adds	r3, #44	; 0x2c
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80127ee:	4610      	mov	r0, r2
 80127f0:	4798      	blx	r3
        setBaselineY(baselineY);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	3360      	adds	r3, #96	; 0x60
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80127fe:	4611      	mov	r1, r2
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	4798      	blx	r3
    }
 8012804:	bf00      	nop
 8012806:	3708      	adds	r7, #8
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 801280c:	b480      	push	{r7}
 801280e:	b083      	sub	sp, #12
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	460b      	mov	r3, r1
 8012816:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	887a      	ldrh	r2, [r7, #2]
 801281c:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 801281e:	bf00      	nop
 8012820:	370c      	adds	r7, #12
 8012822:	46bd      	mov	sp, r7
 8012824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012828:	4770      	bx	lr

0801282a <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 801282a:	b480      	push	{r7}
 801282c:	b083      	sub	sp, #12
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8012836:	4618      	mov	r0, r3
 8012838:	370c      	adds	r7, #12
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr
	...

08012844 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	4a05      	ldr	r2, [pc, #20]	; (8012864 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	601a      	str	r2, [r3, #0]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	4618      	mov	r0, r3
 8012856:	f7ff fe87 	bl	8012568 <_ZN8touchgfx6WidgetD1Ev>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4618      	mov	r0, r3
 801285e:	3708      	adds	r7, #8
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	0802c3f4 	.word	0x0802c3f4

08012868 <_ZN8touchgfx8TextAreaD0Ev>:
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7ff ffe7 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012876:	2134      	movs	r1, #52	; 0x34
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f015 fe95 	bl	80285a8 <_ZdlPvj>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	4618      	mov	r0, r3
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
        : TextArea()
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4618      	mov	r0, r3
 8012894:	f7ff ff24 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8012898:	4a03      	ldr	r2, [pc, #12]	; (80128a8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	601a      	str	r2, [r3, #0]
    {
    }
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	4618      	mov	r0, r3
 80128a2:	3708      	adds	r7, #8
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	0802a874 	.word	0x0802a874

080128ac <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b082      	sub	sp, #8
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	4a05      	ldr	r2, [pc, #20]	; (80128cc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	601a      	str	r2, [r3, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff ffc1 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	4618      	mov	r0, r3
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	0802a874 	.word	0x0802a874

080128d0 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f7ff ffe7 	bl	80128ac <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80128de:	2134      	movs	r1, #52	; 0x34
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f015 fe61 	bl	80285a8 <_ZdlPvj>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7ff ffc4 	bl	8012888 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8012900:	4a05      	ldr	r2, [pc, #20]	; (8012918 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2200      	movs	r2, #0
 801290a:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	4618      	mov	r0, r3
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	0802c55c 	.word	0x0802c55c

0801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	683a      	ldr	r2, [r7, #0]
 801292a:	635a      	str	r2, [r3, #52]	; 0x34
    }
 801292c:	bf00      	nop
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4618      	mov	r0, r3
 8012946:	f7ff fdfd 	bl	8012544 <_ZN8touchgfx6WidgetC1Ev>
 801294a:	4a0b      	ldr	r2, [pc, #44]	; (8012978 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	601a      	str	r2, [r3, #0]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	3326      	adds	r3, #38	; 0x26
 8012954:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012958:	4618      	mov	r0, r3
 801295a:	f7ff fbde 	bl	801211a <_ZN8touchgfx6BitmapC1Et>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	22ff      	movs	r2, #255	; 0xff
 8012962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f008 fd6f 	bl	801b44c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	0802c640 	.word	0x0802c640

0801297c <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	683a      	ldr	r2, [r7, #0]
 801298a:	601a      	str	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	4618      	mov	r0, r3
 8012990:	370c      	adds	r7, #12
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr

0801299a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 801299a:	b480      	push	{r7}
 801299c:	b083      	sub	sp, #12
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
        {
            return v;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
        }
 80129a6:	4618      	mov	r0, r3
 80129a8:	370c      	adds	r7, #12
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr

080129b2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 80129b2:	b590      	push	{r4, r7, lr}
 80129b4:	b083      	sub	sp, #12
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
 80129ba:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	3340      	adds	r3, #64	; 0x40
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7ff ffea 	bl	801299a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80129c6:	4604      	mov	r4, r0
 80129c8:	463b      	mov	r3, r7
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7ff ffe5 	bl	801299a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80129d0:	4603      	mov	r3, r0
 80129d2:	429c      	cmp	r4, r3
 80129d4:	bf0c      	ite	eq
 80129d6:	2301      	moveq	r3, #1
 80129d8:	2300      	movne	r3, #0
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d106      	bne.n	80129ee <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f007 fe7c 	bl	801a6e4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80129ec:	e000      	b.n	80129f0 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 80129ee:	bf00      	nop
    }
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd90      	pop	{r4, r7, pc}
	...

080129f8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	4a05      	ldr	r2, [pc, #20]	; (8012a18 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	601a      	str	r2, [r3, #0]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f007 fc7f 	bl	801a30c <_ZN8touchgfx15AbstractPainterD1Ev>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	4618      	mov	r0, r3
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	0802bed8 	.word	0x0802bed8

08012a1c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7ff ffe7 	bl	80129f8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012a2a:	2114      	movs	r1, #20
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f015 fdbb 	bl	80285a8 <_ZdlPvj>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4618      	mov	r0, r3
 8012a36:	3708      	adds	r7, #8
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	4a05      	ldr	r2, [pc, #20]	; (8012a5c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	601a      	str	r2, [r3, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7ff fd8b 	bl	8012568 <_ZN8touchgfx6WidgetD1Ev>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	4618      	mov	r0, r3
 8012a56:	3708      	adds	r7, #8
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}
 8012a5c:	0802c640 	.word	0x0802c640

08012a60 <_ZN8touchgfx5ImageD0Ev>:
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7ff ffe7 	bl	8012a3c <_ZN8touchgfx5ImageD1Ev>
 8012a6e:	212c      	movs	r1, #44	; 0x2c
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f015 fd99 	bl	80285a8 <_ZdlPvj>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7ff fcba 	bl	8012404 <_ZN8touchgfx9ContainerC1Ev>
 8012a90:	4a0b      	ldr	r2, [pc, #44]	; (8012ac0 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	601a      	str	r2, [r3, #0]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	22ff      	movs	r2, #255	; 0xff
 8012aa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2101      	movs	r1, #1
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7ff fc30 	bl	8012316 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	0802a7e0 	.word	0x0802a7e0

08012ac4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	4a05      	ldr	r2, [pc, #20]	; (8012ae4 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	601a      	str	r2, [r3, #0]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7ff fcab 	bl	8012430 <_ZN8touchgfx9ContainerD1Ev>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4618      	mov	r0, r3
 8012ade:	3708      	adds	r7, #8
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	0802a7e0 	.word	0x0802a7e0

08012ae8 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f7ff ffe7 	bl	8012ac4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8012af6:	2134      	movs	r1, #52	; 0x34
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f015 fd55 	bl	80285a8 <_ZdlPvj>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4618      	mov	r0, r3
 8012b02:	3708      	adds	r7, #8
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	460b      	mov	r3, r1
 8012b12:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	78fa      	ldrb	r2, [r7, #3]
 8012b18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	3384      	adds	r3, #132	; 0x84
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	4798      	blx	r3
    }
 8012b28:	bf00      	nop
 8012b2a:	3708      	adds	r7, #8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 8012b30:	b480      	push	{r7}
 8012b32:	b083      	sub	sp, #12
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8012b3e:	4618      	mov	r0, r3
 8012b40:	370c      	adds	r7, #12
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr

08012b4a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
     *
     * @brief Sets an alpha value.
     *
     * @param newAlpha The new alpha.
     */
    void setAlpha(uint8_t newAlpha)
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b082      	sub	sp, #8
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
 8012b52:	460b      	mov	r3, r1
 8012b54:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	78fa      	ldrb	r2, [r7, #3]
 8012b5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	3388      	adds	r3, #136	; 0x88
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	4798      	blx	r3
    }
 8012b6a:	bf00      	nop
 8012b6c:	3708      	adds	r7, #8
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}

08012b72 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 8012b72:	b480      	push	{r7}
 8012b74:	b083      	sub	sp, #12
 8012b76:	af00      	add	r7, sp, #0
 8012b78:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8012b80:	4618      	mov	r0, r3
 8012b82:	370c      	adds	r7, #12
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr

08012b8c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	683a      	ldr	r2, [r7, #0]
 8012b9a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012b9c:	bf00      	nop
 8012b9e:	370c      	adds	r7, #12
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr

08012ba8 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {}
 8012ba8:	b480      	push	{r7}
 8012baa:	b083      	sub	sp, #12
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	bf00      	nop
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {}
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	bf00      	nop
 8012bc6:	370c      	adds	r7, #12
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bce:	4770      	bx	lr

08012bd0 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
    /**
     * @fn TouchButtonTrigger::TouchButtonTrigger()
     *
     * @brief Default constructor.
     */
    TouchButtonTrigger() :
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7ff ff50 	bl	8012a80 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8012be0:	4a03      	ldr	r2, [pc, #12]	; (8012bf0 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	601a      	str	r2, [r3, #0]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	3708      	adds	r7, #8
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	0802a734 	.word	0x0802a734

08012bf4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
    /**
     * @fn virtual TouchButtonTrigger::~TouchButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~TouchButtonTrigger() { }
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	4a05      	ldr	r2, [pc, #20]	; (8012c14 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	601a      	str	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7ff ff5d 	bl	8012ac4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	0802a734 	.word	0x0802a734

08012c18 <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f7ff ffe7 	bl	8012bf4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8012c26:	2134      	movs	r1, #52	; 0x34
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f015 fcbd 	bl	80285a8 <_ZdlPvj>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	4618      	mov	r0, r3
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b084      	sub	sp, #16
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff ff73 	bl	8012b30 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8012c4e:	6838      	ldr	r0, [r7, #0]
 8012c50:	f7ff fa57 	bl	8012102 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	bf0c      	ite	eq
 8012c5a:	2301      	moveq	r3, #1
 8012c5c:	2300      	movne	r3, #0
 8012c5e:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8012c60:	7bbb      	ldrb	r3, [r7, #14]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d005      	beq.n	8012c72 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8012c66:	7bfb      	ldrb	r3, [r7, #15]
 8012c68:	f083 0301 	eor.w	r3, r3, #1
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d108      	bne.n	8012c84 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8012c72:	7bbb      	ldrb	r3, [r7, #14]
 8012c74:	f083 0301 	eor.w	r3, r3, #1
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d00f      	beq.n	8012c9e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8012c7e:	7bfb      	ldrb	r3, [r7, #15]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d00c      	beq.n	8012c9e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	7bba      	ldrb	r2, [r7, #14]
 8012c88:	4611      	mov	r1, r2
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7ff ff3c 	bl	8012b08 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	3314      	adds	r3, #20
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4610      	mov	r0, r2
 8012c9c:	4798      	blx	r3
        }
        if (newPressedValue && action)
 8012c9e:	7bbb      	ldrb	r3, [r7, #14]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d019      	beq.n	8012cd8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d015      	beq.n	8012cd8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        {
            if (action->isValid())
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	330c      	adds	r3, #12
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	4610      	mov	r0, r2
 8012cbc:	4798      	blx	r3
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d009      	beq.n	8012cd8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
            {
                action->execute(*this);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	3308      	adds	r3, #8
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	6879      	ldr	r1, [r7, #4]
 8012cd4:	4610      	mov	r0, r2
 8012cd6:	4798      	blx	r3
            }
        }
    }
 8012cd8:	bf00      	nop
 8012cda:	3710      	adds	r7, #16
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7ff fc2a 	bl	8012544 <_ZN8touchgfx6WidgetC1Ev>
 8012cf0:	4a0d      	ldr	r2, [pc, #52]	; (8012d28 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	601a      	str	r2, [r3, #0]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	22ff      	movs	r2, #255	; 0xff
 8012cfa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	3328      	adds	r3, #40	; 0x28
 8012d02:	2100      	movs	r1, #0
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ff f9b6 	bl	8012076 <_ZN8touchgfx9colortypeC1Em>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	332c      	adds	r3, #44	; 0x2c
 8012d0e:	2100      	movs	r1, #0
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7ff f9b0 	bl	8012076 <_ZN8touchgfx9colortypeC1Em>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4618      	mov	r0, r3
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	0802c5d8 	.word	0x0802c5d8

08012d2c <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	4a05      	ldr	r2, [pc, #20]	; (8012d4c <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	601a      	str	r2, [r3, #0]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7ff fc13 	bl	8012568 <_ZN8touchgfx6WidgetD1Ev>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4618      	mov	r0, r3
 8012d46:	3708      	adds	r7, #8
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}
 8012d4c:	0802c5d8 	.word	0x0802c5d8

08012d50 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7ff ffe7 	bl	8012d2c <_ZN8touchgfx13BoxWithBorderD1Ev>
 8012d5e:	2134      	movs	r1, #52	; 0x34
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f015 fc21 	bl	80285a8 <_ZdlPvj>
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	683a      	ldr	r2, [r7, #0]
 8012d7e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012d80:	bf00      	nop
 8012d82:	370c      	adds	r7, #12
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr

08012d8c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	683a      	ldr	r2, [r7, #0]
 8012d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8012d9c:	bf00      	nop
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8012da8:	b480      	push	{r7}
 8012daa:	b083      	sub	sp, #12
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	460b      	mov	r3, r1
 8012db2:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	78fa      	ldrb	r2, [r7, #3]
 8012db8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8012dbc:	bf00      	nop
 8012dbe:	370c      	adds	r7, #12
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc6:	4770      	bx	lr

08012dc8 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
     *
     * @brief Sets an alpha.
     *
     * @param alpha The alpha.
     */
    void setAlpha(uint8_t alpha)
 8012dc8:	b480      	push	{r7}
 8012dca:	b083      	sub	sp, #12
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	78fa      	ldrb	r2, [r7, #3]
 8012dd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8012ddc:	bf00      	nop
 8012dde:	370c      	adds	r7, #12
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr

08012de8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	4a05      	ldr	r2, [pc, #20]	; (8012e08 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	601a      	str	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7ff fb3b 	bl	8012474 <_ZN8touchgfx6ScreenD1Ev>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	4618      	mov	r0, r3
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}
 8012e08:	0802a700 	.word	0x0802a700

08012e0c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f7ff ffe7 	bl	8012de8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8012e1a:	2140      	movs	r1, #64	; 0x40
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f015 fbc3 	bl	80285a8 <_ZdlPvj>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	4618      	mov	r0, r3
 8012e26:	3708      	adds	r7, #8
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	4a8a      	ldr	r2, [pc, #552]	; (8013060 <_ZN12MainViewBaseD1Ev+0x234>)
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	601a      	str	r2, [r3, #0]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 8012e40:	4618      	mov	r0, r3
 8012e42:	f001 ff97 	bl	8014d74 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f001 fde5 	bl	8014a1c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f001 ffad 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7ff fced 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8012e70:	4618      	mov	r0, r3
 8012e72:	f001 ffa1 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff fce1 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f001 ff95 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8012e94:	4618      	mov	r0, r3
 8012e96:	f001 ff8f 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f001 ff89 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ff fcc9 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f001 ff7d 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f005 fda9 	bl	8018a1c <_ZN8touchgfx13ImageProgressD1Ev>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f001 ff71 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8012edc:	4618      	mov	r0, r3
 8012ede:	f001 ffaf 	bl	8014e40 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f001 ff87 	bl	8014dfc <_ZN8touchgfx4LineD1Ev>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f001 ffa3 	bl	8014e40 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8012f00:	4618      	mov	r0, r3
 8012f02:	f001 ff7b 	bl	8014dfc <_ZN8touchgfx4LineD1Ev>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f005 fc85 	bl	801881c <_ZN8touchgfx11BoxProgressD1Ev>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff fc93 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8012f24:	4618      	mov	r0, r3
 8012f26:	f001 ff47 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8012f30:	4618      	mov	r0, r3
 8012f32:	f001 ff41 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7ff fc81 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7ff fc7b 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8012f54:	4618      	mov	r0, r3
 8012f56:	f001 ff2f 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012f60:	4618      	mov	r0, r3
 8012f62:	f001 ff29 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7ff fc69 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7ff fc63 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012f84:	4618      	mov	r0, r3
 8012f86:	f001 ff5b 	bl	8014e40 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8012f90:	4618      	mov	r0, r3
 8012f92:	f001 ff33 	bl	8014dfc <_ZN8touchgfx4LineD1Ev>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f001 ff0b 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f001 ff05 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f001 feff 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f001 fef9 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f001 fef3 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f001 feed 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f001 fee7 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f001 fee1 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff fd1d 	bl	8012a3c <_ZN8touchgfx5ImageD1Ev>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013008:	4618      	mov	r0, r3
 801300a:	f001 fed5 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013014:	4618      	mov	r0, r3
 8013016:	f001 fecf 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013020:	4618      	mov	r0, r3
 8013022:	f7ff fc0f 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	33d8      	adds	r3, #216	; 0xd8
 801302a:	4618      	mov	r0, r3
 801302c:	f7ff fc0a 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	33a4      	adds	r3, #164	; 0xa4
 8013034:	4618      	mov	r0, r3
 8013036:	f7ff fc05 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	3370      	adds	r3, #112	; 0x70
 801303e:	4618      	mov	r0, r3
 8013040:	f7ff fc00 	bl	8012844 <_ZN8touchgfx8TextAreaD1Ev>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	3340      	adds	r3, #64	; 0x40
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff faf3 	bl	8012634 <_ZN8touchgfx3BoxD1Ev>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4618      	mov	r0, r3
 8013052:	f7ff fec9 	bl	8012de8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	4618      	mov	r0, r3
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}
 8013060:	0802a620 	.word	0x0802a620

08013064 <_ZN12MainViewBaseD0Ev>:
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7ff fedd 	bl	8012e2c <_ZN12MainViewBaseD1Ev>
 8013072:	f642 0144 	movw	r1, #10308	; 0x2844
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f015 fa96 	bl	80285a8 <_ZdlPvj>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	4618      	mov	r0, r3
 8013080:	3708      	adds	r7, #8
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}

08013086 <_ZN12MainViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8013086:	b580      	push	{r7, lr}
 8013088:	b082      	sub	sp, #8
 801308a:	af00      	add	r7, sp, #0
 801308c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801308e:	f009 fa8b 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 8013092:	4603      	mov	r3, r0
    }
 8013094:	4618      	mov	r0, r3
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 801309c:	b590      	push	{r4, r7, lr}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	4603      	mov	r3, r0
 80130a4:	71fb      	strb	r3, [r7, #7]
 80130a6:	460b      	mov	r3, r1
 80130a8:	71bb      	strb	r3, [r7, #6]
 80130aa:	4613      	mov	r3, r2
 80130ac:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80130ae:	f7fd fe83 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 80130b2:	4603      	mov	r3, r0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d105      	bne.n	80130c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80130b8:	4b0a      	ldr	r3, [pc, #40]	; (80130e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80130ba:	4a0b      	ldr	r2, [pc, #44]	; (80130e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80130bc:	2138      	movs	r1, #56	; 0x38
 80130be:	480b      	ldr	r0, [pc, #44]	; (80130ec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 80130c0:	f015 faa0 	bl	8028604 <__assert_func>
 80130c4:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80130c6:	f7fd fe83 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 80130ca:	6803      	ldr	r3, [r0, #0]
 80130cc:	332c      	adds	r3, #44	; 0x2c
 80130ce:	681c      	ldr	r4, [r3, #0]
 80130d0:	797b      	ldrb	r3, [r7, #5]
 80130d2:	79ba      	ldrb	r2, [r7, #6]
 80130d4:	79f9      	ldrb	r1, [r7, #7]
 80130d6:	47a0      	blx	r4
 80130d8:	4603      	mov	r3, r0
    }
 80130da:	4618      	mov	r0, r3
 80130dc:	370c      	adds	r7, #12
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd90      	pop	{r4, r7, pc}
 80130e2:	bf00      	nop
 80130e4:	08029f18 	.word	0x08029f18
 80130e8:	08029f5c 	.word	0x08029f5c
 80130ec:	08029fb8 	.word	0x08029fb8

080130f0 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase() :
 80130f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130f4:	b0c2      	sub	sp, #264	; 0x108
 80130f6:	af02      	add	r7, sp, #8
 80130f8:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	4618      	mov	r0, r3
 80130fe:	f001 fcb5 	bl	8014a6c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8013102:	4ada      	ldr	r2, [pc, #872]	; (801346c <_ZN12MainViewBaseC1Ev+0x37c>)
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	601a      	str	r2, [r3, #0]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	3340      	adds	r3, #64	; 0x40
 801310c:	4618      	mov	r0, r3
 801310e:	f7ff fa71 	bl	80125f4 <_ZN8touchgfx3BoxC1Ev>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	3370      	adds	r3, #112	; 0x70
 8013116:	4618      	mov	r0, r3
 8013118:	f7ff fae2 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	33a4      	adds	r3, #164	; 0xa4
 8013120:	4618      	mov	r0, r3
 8013122:	f7ff fadd 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	33d8      	adds	r3, #216	; 0xd8
 801312a:	4618      	mov	r0, r3
 801312c:	f7ff fad8 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013136:	4618      	mov	r0, r3
 8013138:	f7ff fad2 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013142:	4618      	mov	r0, r3
 8013144:	f7ff fbd4 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801314e:	4618      	mov	r0, r3
 8013150:	f7ff fbce 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 801315a:	f107 030c 	add.w	r3, r7, #12
 801315e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013162:	4618      	mov	r0, r3
 8013164:	f7fe ffd9 	bl	801211a <_ZN8touchgfx6BitmapC1Et>
 8013168:	f107 030c 	add.w	r3, r7, #12
 801316c:	4619      	mov	r1, r3
 801316e:	4620      	mov	r0, r4
 8013170:	f7ff fbe2 	bl	8012938 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801317a:	4618      	mov	r0, r3
 801317c:	f7ff fbb8 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013186:	4618      	mov	r0, r3
 8013188:	f7ff fbb2 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013192:	4618      	mov	r0, r3
 8013194:	f7ff fbac 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801319e:	4618      	mov	r0, r3
 80131a0:	f7ff fba6 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff fba0 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7ff fb9a 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7ff fb94 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7ff fb8e 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80131da:	4618      	mov	r0, r3
 80131dc:	f007 fa62 	bl	801a6a4 <_ZN8touchgfx4LineC1Ev>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 80131e6:	f107 0310 	add.w	r3, r7, #16
 80131ea:	2100      	movs	r1, #0
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7fe ff42 	bl	8012076 <_ZN8touchgfx9colortypeC1Em>
 80131f2:	22ff      	movs	r2, #255	; 0xff
 80131f4:	6939      	ldr	r1, [r7, #16]
 80131f6:	4620      	mov	r0, r4
 80131f8:	f007 f846 	bl	801a288 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013202:	4618      	mov	r0, r3
 8013204:	f7ff fa6c 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801320e:	4618      	mov	r0, r3
 8013210:	f7ff fa66 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801321a:	4618      	mov	r0, r3
 801321c:	f7ff fb68 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013226:	4618      	mov	r0, r3
 8013228:	f7ff fb62 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013232:	4618      	mov	r0, r3
 8013234:	f7ff fa54 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801323e:	4618      	mov	r0, r3
 8013240:	f7ff fa4e 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801324a:	4618      	mov	r0, r3
 801324c:	f7ff fb50 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013256:	4618      	mov	r0, r3
 8013258:	f7ff fb4a 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013262:	4618      	mov	r0, r3
 8013264:	f7ff fa3c 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801326e:	4618      	mov	r0, r3
 8013270:	f005 fae8 	bl	8018844 <_ZN8touchgfx11BoxProgressC1Ev>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 801327a:	4618      	mov	r0, r3
 801327c:	f007 fa12 	bl	801a6a4 <_ZN8touchgfx4LineC1Ev>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8013286:	f107 0314 	add.w	r3, r7, #20
 801328a:	2100      	movs	r1, #0
 801328c:	4618      	mov	r0, r3
 801328e:	f7fe fef2 	bl	8012076 <_ZN8touchgfx9colortypeC1Em>
 8013292:	22ff      	movs	r2, #255	; 0xff
 8013294:	6979      	ldr	r1, [r7, #20]
 8013296:	4620      	mov	r0, r4
 8013298:	f006 fff6 	bl	801a288 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80132a2:	4618      	mov	r0, r3
 80132a4:	f007 f9fe 	bl	801a6a4 <_ZN8touchgfx4LineC1Ev>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 80132ae:	f107 0318 	add.w	r3, r7, #24
 80132b2:	2100      	movs	r1, #0
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7fe fede 	bl	8012076 <_ZN8touchgfx9colortypeC1Em>
 80132ba:	22ff      	movs	r2, #255	; 0xff
 80132bc:	69b9      	ldr	r1, [r7, #24]
 80132be:	4620      	mov	r0, r4
 80132c0:	f006 ffe2 	bl	801a288 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ff fb10 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80132d6:	4618      	mov	r0, r3
 80132d8:	f005 fbca 	bl	8018a70 <_ZN8touchgfx13ImageProgressC1Ev>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7ff fb04 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7ff f9f6 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7ff faf8 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013306:	4618      	mov	r0, r3
 8013308:	f7ff faf2 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8013312:	4618      	mov	r0, r3
 8013314:	f7ff faec 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 801331e:	4618      	mov	r0, r3
 8013320:	f7ff f9de 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff fae0 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8013336:	4618      	mov	r0, r3
 8013338:	f7ff f9d2 	bl	80126e0 <_ZN8touchgfx8TextAreaC1Ev>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8013342:	4618      	mov	r0, r3
 8013344:	f7ff fad4 	bl	80128f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 801334e:	4618      	mov	r0, r3
 8013350:	f001 fba2 	bl	8014a98 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f603 4014 	addw	r0, r3, #3092	; 0xc14
 801335a:	4b45      	ldr	r3, [pc, #276]	; (8013470 <_ZN12MainViewBaseC1Ev+0x380>)
 801335c:	61fb      	str	r3, [r7, #28]
 801335e:	2300      	movs	r3, #0
 8013360:	623b      	str	r3, [r7, #32]
 8013362:	f107 031c 	add.w	r3, r7, #28
 8013366:	cb0c      	ldmia	r3, {r2, r3}
 8013368:	6879      	ldr	r1, [r7, #4]
 801336a:	f001 fbdf 	bl	8014b2c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8013374:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8013378:	4618      	mov	r0, r3
 801337a:	f008 f8d5 	bl	801b528 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013384:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013388:	9300      	str	r3, [sp, #0]
 801338a:	f44f 7348 	mov.w	r3, #800	; 0x320
 801338e:	2200      	movs	r2, #0
 8013390:	2100      	movs	r1, #0
 8013392:	f7fd fcc9 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801339c:	2200      	movs	r2, #0
 801339e:	2100      	movs	r1, #0
 80133a0:	2000      	movs	r0, #0
 80133a2:	f7ff fe7b 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133a6:	4603      	mov	r3, r0
 80133a8:	4619      	mov	r1, r3
 80133aa:	4620      	mov	r0, r4
 80133ac:	f7ff f964 	bl	8012678 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(224, 218);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	3370      	adds	r3, #112	; 0x70
 80133b4:	22da      	movs	r2, #218	; 0xda
 80133b6:	21e0      	movs	r1, #224	; 0xe0
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7fe ff2b 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80133c4:	2200      	movs	r2, #0
 80133c6:	21dc      	movs	r1, #220	; 0xdc
 80133c8:	20ff      	movs	r0, #255	; 0xff
 80133ca:	f7ff fe67 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133ce:	4603      	mov	r3, r0
 80133d0:	4619      	mov	r1, r3
 80133d2:	4620      	mov	r0, r4
 80133d4:	f7ff f9c7 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	3370      	adds	r3, #112	; 0x70
 80133dc:	2100      	movs	r1, #0
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ff fa14 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80133ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133ee:	211a      	movs	r1, #26
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7ff f94f 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80133f6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80133f8:	4620      	mov	r0, r4
 80133fa:	f007 fcfb 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(338, 126);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	33a4      	adds	r3, #164	; 0xa4
 8013402:	227e      	movs	r2, #126	; 0x7e
 8013404:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8013408:	4618      	mov	r0, r3
 801340a:	f7fe ff03 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013414:	2200      	movs	r2, #0
 8013416:	21dc      	movs	r1, #220	; 0xdc
 8013418:	20ff      	movs	r0, #255	; 0xff
 801341a:	f7ff fe3f 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801341e:	4603      	mov	r3, r0
 8013420:	4619      	mov	r1, r3
 8013422:	4620      	mov	r0, r4
 8013424:	f7ff f99f 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	33a4      	adds	r3, #164	; 0xa4
 801342c:	2100      	movs	r1, #0
 801342e:	4618      	mov	r0, r3
 8013430:	f7ff f9ec 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801343a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801343e:	2119      	movs	r1, #25
 8013440:	4618      	mov	r0, r3
 8013442:	f7ff f927 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013446:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8013448:	4620      	mov	r0, r4
 801344a:	f007 fcd3 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(216, 136);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	33d8      	adds	r3, #216	; 0xd8
 8013452:	2288      	movs	r2, #136	; 0x88
 8013454:	21d8      	movs	r1, #216	; 0xd8
 8013456:	4618      	mov	r0, r3
 8013458:	f7fe fedc 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013462:	2200      	movs	r2, #0
 8013464:	21dc      	movs	r1, #220	; 0xdc
 8013466:	20ff      	movs	r0, #255	; 0xff
 8013468:	e004      	b.n	8013474 <_ZN12MainViewBaseC1Ev+0x384>
 801346a:	bf00      	nop
 801346c:	0802a620 	.word	0x0802a620
 8013470:	080149f1 	.word	0x080149f1
 8013474:	f7ff fe12 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013478:	4603      	mov	r3, r0
 801347a:	4619      	mov	r1, r3
 801347c:	4620      	mov	r0, r4
 801347e:	f7ff f972 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	33d8      	adds	r3, #216	; 0xd8
 8013486:	2100      	movs	r1, #0
 8013488:	4618      	mov	r0, r3
 801348a:	f7ff f9bf 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013498:	2113      	movs	r1, #19
 801349a:	4618      	mov	r0, r3
 801349c:	f7ff f8fa 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80134a0:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80134a2:	4620      	mov	r0, r4
 80134a4:	f007 fca6 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(116, 126);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80134ae:	227e      	movs	r2, #126	; 0x7e
 80134b0:	2174      	movs	r1, #116	; 0x74
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fe feae 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80134be:	2200      	movs	r2, #0
 80134c0:	21dc      	movs	r1, #220	; 0xdc
 80134c2:	20ff      	movs	r0, #255	; 0xff
 80134c4:	f7ff fdea 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80134c8:	4603      	mov	r3, r0
 80134ca:	4619      	mov	r1, r3
 80134cc:	4620      	mov	r0, r4
 80134ce:	f7ff f94a 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80134d8:	2100      	movs	r1, #0
 80134da:	4618      	mov	r0, r3
 80134dc:	f7ff f996 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80134e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80134ea:	2112      	movs	r1, #18
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff f8d1 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80134f2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80134f4:	4620      	mov	r0, r4
 80134f6:	f007 fc7d 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8013500:	233e      	movs	r3, #62	; 0x3e
 8013502:	9300      	str	r3, [sp, #0]
 8013504:	2372      	movs	r3, #114	; 0x72
 8013506:	224d      	movs	r2, #77	; 0x4d
 8013508:	21bb      	movs	r1, #187	; 0xbb
 801350a:	f7fd fc0d 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013514:	22ff      	movs	r2, #255	; 0xff
 8013516:	21ff      	movs	r1, #255	; 0xff
 8013518:	20ff      	movs	r0, #255	; 0xff
 801351a:	f7ff fdbf 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801351e:	4603      	mov	r3, r0
 8013520:	4619      	mov	r1, r3
 8013522:	4620      	mov	r0, r4
 8013524:	f7ff f91f 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801352e:	2100      	movs	r1, #0
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff f96b 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 801353c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013540:	2103      	movs	r1, #3
 8013542:	4618      	mov	r0, r3
 8013544:	f7ff f8a6 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013548:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801354c:	4618      	mov	r0, r3
 801354e:	f7ff f8b1 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013552:	4603      	mov	r3, r0
 8013554:	4ae1      	ldr	r2, [pc, #900]	; (80138dc <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013556:	2105      	movs	r1, #5
 8013558:	4620      	mov	r0, r4
 801355a:	f00b f8bb 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 801356a:	4619      	mov	r1, r3
 801356c:	4610      	mov	r0, r2
 801356e:	f7ff f9d5 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013578:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801357c:	2102      	movs	r1, #2
 801357e:	4618      	mov	r0, r3
 8013580:	f7ff f888 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013584:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8013586:	4620      	mov	r0, r4
 8013588:	f007 fc34 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(102, 85, 71, 41);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8013592:	2329      	movs	r3, #41	; 0x29
 8013594:	9300      	str	r3, [sp, #0]
 8013596:	2347      	movs	r3, #71	; 0x47
 8013598:	2255      	movs	r2, #85	; 0x55
 801359a:	2166      	movs	r1, #102	; 0x66
 801359c:	f7fd fbc4 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80135a6:	22ff      	movs	r2, #255	; 0xff
 80135a8:	21ff      	movs	r1, #255	; 0xff
 80135aa:	20ff      	movs	r0, #255	; 0xff
 80135ac:	f7ff fd76 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80135b0:	4603      	mov	r3, r0
 80135b2:	4619      	mov	r1, r3
 80135b4:	4620      	mov	r0, r4
 80135b6:	f7ff f8d6 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80135c0:	2100      	movs	r1, #0
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7ff f922 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f603 347a 	addw	r4, r3, #2938	; 0xb7a
 80135ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80135d2:	2101      	movs	r1, #1
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7ff f85d 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80135da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80135de:	4618      	mov	r0, r3
 80135e0:	f7ff f868 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 80135e4:	4603      	mov	r3, r0
 80135e6:	4abd      	ldr	r2, [pc, #756]	; (80138dc <_ZN12MainViewBaseC1Ev+0x7ec>)
 80135e8:	2105      	movs	r1, #5
 80135ea:	4620      	mov	r0, r4
 80135ec:	f00b f872 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f603 337a 	addw	r3, r3, #2938	; 0xb7a
 80135fc:	4619      	mov	r1, r3
 80135fe:	4610      	mov	r0, r2
 8013600:	f7ff f98c 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 801360a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801360e:	2100      	movs	r1, #0
 8013610:	4618      	mov	r0, r3
 8013612:	f7ff f83f 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013616:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801361a:	4620      	mov	r0, r4
 801361c:	f007 fbea 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013626:	223f      	movs	r2, #63	; 0x3f
 8013628:	21b3      	movs	r1, #179	; 0xb3
 801362a:	4618      	mov	r0, r3
 801362c:	f7fe fdf2 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013636:	2100      	movs	r1, #0
 8013638:	4618      	mov	r0, r3
 801363a:	f7fe fe5c 	bl	80122f6 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8013644:	230e      	movs	r3, #14
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	2312      	movs	r3, #18
 801364a:	223f      	movs	r2, #63	; 0x3f
 801364c:	2136      	movs	r1, #54	; 0x36
 801364e:	f7fd fb6b 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013658:	22ff      	movs	r2, #255	; 0xff
 801365a:	21ff      	movs	r1, #255	; 0xff
 801365c:	20ff      	movs	r0, #255	; 0xff
 801365e:	f7ff fd1d 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013662:	4603      	mov	r3, r0
 8013664:	4619      	mov	r1, r3
 8013666:	4620      	mov	r0, r4
 8013668:	f7ff f87d 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8013672:	2100      	movs	r1, #0
 8013674:	4618      	mov	r0, r3
 8013676:	f7ff f8c9 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 8013680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013684:	2126      	movs	r1, #38	; 0x26
 8013686:	4618      	mov	r0, r3
 8013688:	f7ff f804 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 801368c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013690:	4618      	mov	r0, r3
 8013692:	f7ff f80f 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013696:	4603      	mov	r3, r0
 8013698:	4a90      	ldr	r2, [pc, #576]	; (80138dc <_ZN12MainViewBaseC1Ev+0x7ec>)
 801369a:	2102      	movs	r1, #2
 801369c:	4620      	mov	r0, r4
 801369e:	f00b f819 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 80136ae:	4619      	mov	r1, r3
 80136b0:	4610      	mov	r0, r2
 80136b2:	f7ff f933 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 80136bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136c0:	2104      	movs	r1, #4
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7fe ffe6 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80136c8:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80136cc:	4620      	mov	r0, r4
 80136ce:	f007 fb91 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80136d8:	230e      	movs	r3, #14
 80136da:	9300      	str	r3, [sp, #0]
 80136dc:	2312      	movs	r3, #18
 80136de:	223f      	movs	r2, #63	; 0x3f
 80136e0:	2173      	movs	r1, #115	; 0x73
 80136e2:	f7fd fb21 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80136ec:	22ff      	movs	r2, #255	; 0xff
 80136ee:	21ff      	movs	r1, #255	; 0xff
 80136f0:	20ff      	movs	r0, #255	; 0xff
 80136f2:	f7ff fcd3 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80136f6:	4603      	mov	r3, r0
 80136f8:	4619      	mov	r1, r3
 80136fa:	4620      	mov	r0, r4
 80136fc:	f7ff f833 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013706:	2100      	movs	r1, #0
 8013708:	4618      	mov	r0, r3
 801370a:	f7ff f87f 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 8013714:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013718:	2127      	movs	r1, #39	; 0x27
 801371a:	4618      	mov	r0, r3
 801371c:	f7fe ffba 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013720:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013724:	4618      	mov	r0, r3
 8013726:	f7fe ffc5 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 801372a:	4603      	mov	r3, r0
 801372c:	4a6b      	ldr	r2, [pc, #428]	; (80138dc <_ZN12MainViewBaseC1Ev+0x7ec>)
 801372e:	2102      	movs	r1, #2
 8013730:	4620      	mov	r0, r4
 8013732:	f00a ffcf 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f503 7205 	add.w	r2, r3, #532	; 0x214
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8013742:	4619      	mov	r1, r3
 8013744:	4610      	mov	r0, r2
 8013746:	f7ff f8e9 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013750:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013754:	2105      	movs	r1, #5
 8013756:	4618      	mov	r0, r3
 8013758:	f7fe ff9c 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 801375c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8013760:	4620      	mov	r0, r4
 8013762:	f007 fb47 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 801376c:	230e      	movs	r3, #14
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	2312      	movs	r3, #18
 8013772:	223e      	movs	r2, #62	; 0x3e
 8013774:	21ad      	movs	r1, #173	; 0xad
 8013776:	f7fd fad7 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013780:	22ff      	movs	r2, #255	; 0xff
 8013782:	21ff      	movs	r1, #255	; 0xff
 8013784:	20ff      	movs	r0, #255	; 0xff
 8013786:	f7ff fc89 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801378a:	4603      	mov	r3, r0
 801378c:	4619      	mov	r1, r3
 801378e:	4620      	mov	r0, r4
 8013790:	f7fe ffe9 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801379a:	2100      	movs	r1, #0
 801379c:	4618      	mov	r0, r3
 801379e:	f7ff f835 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 80137a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80137ac:	2128      	movs	r1, #40	; 0x28
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7fe ff70 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80137b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fe ff7b 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 80137be:	4603      	mov	r3, r0
 80137c0:	4a46      	ldr	r2, [pc, #280]	; (80138dc <_ZN12MainViewBaseC1Ev+0x7ec>)
 80137c2:	2102      	movs	r1, #2
 80137c4:	4620      	mov	r0, r4
 80137c6:	f00a ff85 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 80137d6:	4619      	mov	r1, r3
 80137d8:	4610      	mov	r0, r2
 80137da:	f7ff f89f 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 80137e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80137e8:	2106      	movs	r1, #6
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7fe ff52 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80137f0:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80137f4:	4620      	mov	r0, r4
 80137f6:	f007 fafd 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8013800:	230e      	movs	r3, #14
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	2312      	movs	r3, #18
 8013806:	223e      	movs	r2, #62	; 0x3e
 8013808:	21e7      	movs	r1, #231	; 0xe7
 801380a:	f7fd fa8d 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013814:	22ff      	movs	r2, #255	; 0xff
 8013816:	21ff      	movs	r1, #255	; 0xff
 8013818:	20ff      	movs	r0, #255	; 0xff
 801381a:	f7ff fc3f 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801381e:	4603      	mov	r3, r0
 8013820:	4619      	mov	r1, r3
 8013822:	4620      	mov	r0, r4
 8013824:	f7fe ff9f 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801382e:	2100      	movs	r1, #0
 8013830:	4618      	mov	r0, r3
 8013832:	f7fe ffeb 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 801383c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013840:	2129      	movs	r1, #41	; 0x29
 8013842:	4618      	mov	r0, r3
 8013844:	f7fe ff26 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013848:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801384c:	4618      	mov	r0, r3
 801384e:	f7fe ff31 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013852:	4603      	mov	r3, r0
 8013854:	4a21      	ldr	r2, [pc, #132]	; (80138dc <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013856:	2102      	movs	r1, #2
 8013858:	4620      	mov	r0, r4
 801385a:	f00a ff3b 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 801386a:	4619      	mov	r1, r3
 801386c:	4610      	mov	r0, r2
 801386e:	f7ff f855 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013878:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801387c:	2107      	movs	r1, #7
 801387e:	4618      	mov	r0, r3
 8013880:	f7fe ff08 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013884:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8013888:	4620      	mov	r0, r4
 801388a:	f007 fab3 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8013894:	230e      	movs	r3, #14
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	2312      	movs	r3, #18
 801389a:	223f      	movs	r2, #63	; 0x3f
 801389c:	f44f 7192 	mov.w	r1, #292	; 0x124
 80138a0:	f7fd fa42 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80138aa:	22ff      	movs	r2, #255	; 0xff
 80138ac:	21ff      	movs	r1, #255	; 0xff
 80138ae:	20ff      	movs	r0, #255	; 0xff
 80138b0:	f7ff fbf4 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80138b4:	4603      	mov	r3, r0
 80138b6:	4619      	mov	r1, r3
 80138b8:	4620      	mov	r0, r4
 80138ba:	f7fe ff54 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80138c4:	2100      	movs	r1, #0
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7fe ffa0 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f603 3494 	addw	r4, r3, #2964	; 0xb94
 80138d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80138d6:	212a      	movs	r1, #42	; 0x2a
 80138d8:	4618      	mov	r0, r3
 80138da:	e001      	b.n	80138e0 <_ZN12MainViewBaseC1Ev+0x7f0>
 80138dc:	08029ff8 	.word	0x08029ff8
 80138e0:	f7fe fed8 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80138e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fe fee3 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 80138ee:	4603      	mov	r3, r0
 80138f0:	4ae2      	ldr	r2, [pc, #904]	; (8013c7c <_ZN12MainViewBaseC1Ev+0xb8c>)
 80138f2:	2102      	movs	r1, #2
 80138f4:	4620      	mov	r0, r4
 80138f6:	f00a feed 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8013906:	4619      	mov	r1, r3
 8013908:	4610      	mov	r0, r2
 801390a:	f7ff f807 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8013914:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013918:	2108      	movs	r1, #8
 801391a:	4618      	mov	r0, r3
 801391c:	f7fe feba 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013920:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8013924:	4620      	mov	r0, r4
 8013926:	f007 fa65 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8013930:	230e      	movs	r3, #14
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	2312      	movs	r3, #18
 8013936:	223f      	movs	r2, #63	; 0x3f
 8013938:	f240 115d 	movw	r1, #349	; 0x15d
 801393c:	f7fd f9f4 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8013946:	22ff      	movs	r2, #255	; 0xff
 8013948:	21ff      	movs	r1, #255	; 0xff
 801394a:	20ff      	movs	r0, #255	; 0xff
 801394c:	f7ff fba6 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013950:	4603      	mov	r3, r0
 8013952:	4619      	mov	r1, r3
 8013954:	4620      	mov	r0, r4
 8013956:	f7fe ff06 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013960:	2100      	movs	r1, #0
 8013962:	4618      	mov	r0, r3
 8013964:	f7fe ff52 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f603 3498 	addw	r4, r3, #2968	; 0xb98
 801396e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013972:	212b      	movs	r1, #43	; 0x2b
 8013974:	4618      	mov	r0, r3
 8013976:	f7fe fe8d 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 801397a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801397e:	4618      	mov	r0, r3
 8013980:	f7fe fe98 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013984:	4603      	mov	r3, r0
 8013986:	4abd      	ldr	r2, [pc, #756]	; (8013c7c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013988:	2102      	movs	r1, #2
 801398a:	4620      	mov	r0, r4
 801398c:	f00a fea2 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 801399c:	4619      	mov	r1, r3
 801399e:	4610      	mov	r0, r2
 80139a0:	f7fe ffbc 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 80139aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80139ae:	2109      	movs	r1, #9
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7fe fe6f 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80139b6:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 80139ba:	4620      	mov	r0, r4
 80139bc:	f007 fa1a 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 80139c6:	230f      	movs	r3, #15
 80139c8:	9300      	str	r3, [sp, #0]
 80139ca:	2312      	movs	r3, #18
 80139cc:	223e      	movs	r2, #62	; 0x3e
 80139ce:	f240 119b 	movw	r1, #411	; 0x19b
 80139d2:	f7fd f9a9 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 80139dc:	22ff      	movs	r2, #255	; 0xff
 80139de:	21ff      	movs	r1, #255	; 0xff
 80139e0:	20ff      	movs	r0, #255	; 0xff
 80139e2:	f7ff fb5b 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80139e6:	4603      	mov	r3, r0
 80139e8:	4619      	mov	r1, r3
 80139ea:	4620      	mov	r0, r4
 80139ec:	f7fe febb 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80139f6:	2100      	movs	r1, #0
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fe ff07 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	f603 349c 	addw	r4, r3, #2972	; 0xb9c
 8013a04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013a08:	212c      	movs	r1, #44	; 0x2c
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fe fe42 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013a10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7fe fe4d 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	4a97      	ldr	r2, [pc, #604]	; (8013c7c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013a1e:	2102      	movs	r1, #2
 8013a20:	4620      	mov	r0, r4
 8013a22:	f00a fe57 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 8013a32:	4619      	mov	r1, r3
 8013a34:	4610      	mov	r0, r2
 8013a36:	f7fe ff71 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8013a40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013a44:	210a      	movs	r1, #10
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7fe fe24 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013a4c:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8013a50:	4620      	mov	r0, r4
 8013a52:	f007 f9cf 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8013a5c:	230e      	movs	r3, #14
 8013a5e:	9300      	str	r3, [sp, #0]
 8013a60:	2312      	movs	r3, #18
 8013a62:	223e      	movs	r2, #62	; 0x3e
 8013a64:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8013a68:	f7fd f95e 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8013a72:	22ff      	movs	r2, #255	; 0xff
 8013a74:	21ff      	movs	r1, #255	; 0xff
 8013a76:	20ff      	movs	r0, #255	; 0xff
 8013a78:	f7ff fb10 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	4619      	mov	r1, r3
 8013a80:	4620      	mov	r0, r4
 8013a82:	f7fe fe70 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8013a8c:	2100      	movs	r1, #0
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7fe febc 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 8013a9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013a9e:	212d      	movs	r1, #45	; 0x2d
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7fe fdf7 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013aa6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fe fe02 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	4a72      	ldr	r2, [pc, #456]	; (8013c7c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013ab4:	2102      	movs	r1, #2
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f00a fe0c 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4610      	mov	r0, r2
 8013acc:	f7fe ff26 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8013ad6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013ada:	210b      	movs	r1, #11
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7fe fdd9 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013ae2:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	f007 f984 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8013af2:	2305      	movs	r3, #5
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8013afa:	223a      	movs	r2, #58	; 0x3a
 8013afc:	f06f 0101 	mvn.w	r1, #1
 8013b00:	f7fd f912 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8013b0a:	22ff      	movs	r2, #255	; 0xff
 8013b0c:	21ff      	movs	r1, #255	; 0xff
 8013b0e:	20ff      	movs	r0, #255	; 0xff
 8013b10:	f7ff fac4 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b14:	4603      	mov	r3, r0
 8013b16:	22ff      	movs	r2, #255	; 0xff
 8013b18:	4619      	mov	r1, r3
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	f006 fb99 	bl	801a252 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	4610      	mov	r0, r2
 8013b30:	f006 fbf8 	bl	801a324 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013b3a:	2203      	movs	r2, #3
 8013b3c:	2100      	movs	r1, #0
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f001 f814 	bl	8014b6c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013b4a:	2203      	movs	r2, #3
 8013b4c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8013b50:	4618      	mov	r0, r3
 8013b52:	f001 f831 	bl	8014bb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013b5c:	2102      	movs	r1, #2
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f001 f850 	bl	8014c04 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013b6a:	2101      	movs	r1, #1
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f006 fef3 	bl	801a958 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(43, 126);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013b78:	227e      	movs	r2, #126	; 0x7e
 8013b7a:	212b      	movs	r1, #43	; 0x2b
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7fe fb49 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8013b88:	2200      	movs	r2, #0
 8013b8a:	21dc      	movs	r1, #220	; 0xdc
 8013b8c:	20ff      	movs	r0, #255	; 0xff
 8013b8e:	f7ff fa85 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b92:	4603      	mov	r3, r0
 8013b94:	4619      	mov	r1, r3
 8013b96:	4620      	mov	r0, r4
 8013b98:	f7fe fde5 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7fe fe31 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8013bb0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013bb4:	2110      	movs	r1, #16
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7fe fd6c 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013bbc:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8013bc0:	4620      	mov	r0, r4
 8013bc2:	f007 f917 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(42, 193);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8013bcc:	22c1      	movs	r2, #193	; 0xc1
 8013bce:	212a      	movs	r1, #42	; 0x2a
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fe fb1f 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8013bdc:	2200      	movs	r2, #0
 8013bde:	21dc      	movs	r1, #220	; 0xdc
 8013be0:	20ff      	movs	r0, #255	; 0xff
 8013be2:	f7ff fa5b 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013be6:	4603      	mov	r3, r0
 8013be8:	4619      	mov	r1, r3
 8013bea:	4620      	mov	r0, r4
 8013bec:	f7fe fdbb 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8013bf6:	2100      	movs	r1, #0
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fe fe07 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8013c04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013c08:	2111      	movs	r1, #17
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fe fd42 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013c10:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8013c14:	4620      	mov	r0, r4
 8013c16:	f007 f8ed 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 85, 60, 42);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 8013c20:	232a      	movs	r3, #42	; 0x2a
 8013c22:	9300      	str	r3, [sp, #0]
 8013c24:	233c      	movs	r3, #60	; 0x3c
 8013c26:	2255      	movs	r2, #85	; 0x55
 8013c28:	2119      	movs	r1, #25
 8013c2a:	f7fd f87d 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8013c34:	22ff      	movs	r2, #255	; 0xff
 8013c36:	21ff      	movs	r1, #255	; 0xff
 8013c38:	20ff      	movs	r0, #255	; 0xff
 8013c3a:	f7ff fa2f 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	4619      	mov	r1, r3
 8013c42:	4620      	mov	r0, r4
 8013c44:	f7fe fd8f 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013c4e:	2100      	movs	r1, #0
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fe fddb 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f603 34a4 	addw	r4, r3, #2980	; 0xba4
 8013c5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013c60:	210d      	movs	r1, #13
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7fe fd16 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013c68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7fe fd21 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013c72:	4603      	mov	r3, r0
 8013c74:	4a01      	ldr	r2, [pc, #4]	; (8013c7c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013c76:	2105      	movs	r1, #5
 8013c78:	4620      	mov	r0, r4
 8013c7a:	e001      	b.n	8013c80 <_ZN12MainViewBaseC1Ev+0xb90>
 8013c7c:	08029ff8 	.word	0x08029ff8
 8013c80:	f00a fd28 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8013c90:	4619      	mov	r1, r3
 8013c92:	4610      	mov	r0, r2
 8013c94:	f7fe fe42 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8013c9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013ca2:	210c      	movs	r1, #12
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7fe fcf5 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013caa:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f007 f8a0 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 67, 42);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 8013cba:	232a      	movs	r3, #42	; 0x2a
 8013cbc:	9300      	str	r3, [sp, #0]
 8013cbe:	2343      	movs	r3, #67	; 0x43
 8013cc0:	2299      	movs	r2, #153	; 0x99
 8013cc2:	2119      	movs	r1, #25
 8013cc4:	f7fd f830 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8013cce:	22ff      	movs	r2, #255	; 0xff
 8013cd0:	21ff      	movs	r1, #255	; 0xff
 8013cd2:	20ff      	movs	r0, #255	; 0xff
 8013cd4:	f7ff f9e2 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	4619      	mov	r1, r3
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f7fe fd42 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013ce8:	2100      	movs	r1, #0
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7fe fd8e 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f603 34ae 	addw	r4, r3, #2990	; 0xbae
 8013cf6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013cfa:	210f      	movs	r1, #15
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7fe fcc9 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013d02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7fe fcd4 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	4ae3      	ldr	r2, [pc, #908]	; (801409c <_ZN12MainViewBaseC1Ev+0xfac>)
 8013d10:	2105      	movs	r1, #5
 8013d12:	4620      	mov	r0, r4
 8013d14:	f00a fcde 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f603 33ae 	addw	r3, r3, #2990	; 0xbae
 8013d24:	4619      	mov	r1, r3
 8013d26:	4610      	mov	r0, r2
 8013d28:	f7fe fdf8 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8013d32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013d36:	210e      	movs	r1, #14
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fe fcab 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013d3e:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8013d42:	4620      	mov	r0, r4
 8013d44:	f007 f856 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 193);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013d4e:	22c1      	movs	r2, #193	; 0xc1
 8013d50:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fe fa5d 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8013d60:	2200      	movs	r2, #0
 8013d62:	21dc      	movs	r1, #220	; 0xdc
 8013d64:	20ff      	movs	r0, #255	; 0xff
 8013d66:	f7ff f999 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	4620      	mov	r0, r4
 8013d70:	f7fe fcf9 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013d7a:	2100      	movs	r1, #0
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7fe fd45 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8013d88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013d8c:	2114      	movs	r1, #20
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fe fc80 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013d94:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8013d98:	4620      	mov	r0, r4
 8013d9a:	f007 f82b 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 193);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013da4:	22c1      	movs	r2, #193	; 0xc1
 8013da6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe fa32 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8013db6:	2200      	movs	r2, #0
 8013db8:	21dc      	movs	r1, #220	; 0xdc
 8013dba:	20ff      	movs	r0, #255	; 0xff
 8013dbc:	f7ff f96e 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f7fe fcce 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013dd0:	2100      	movs	r1, #0
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fe fd1a 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8013dde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013de2:	2115      	movs	r1, #21
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7fe fc55 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013dea:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8013dee:	4620      	mov	r0, r4
 8013df0:	f007 f800 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 153, 75, 42);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 8013dfa:	232a      	movs	r3, #42	; 0x2a
 8013dfc:	9300      	str	r3, [sp, #0]
 8013dfe:	234b      	movs	r3, #75	; 0x4b
 8013e00:	2299      	movs	r2, #153	; 0x99
 8013e02:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8013e06:	f7fc ff8f 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8013e10:	22ff      	movs	r2, #255	; 0xff
 8013e12:	21ff      	movs	r1, #255	; 0xff
 8013e14:	20ff      	movs	r0, #255	; 0xff
 8013e16:	f7ff f941 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	4620      	mov	r0, r4
 8013e20:	f7fe fca1 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8013e2a:	2100      	movs	r1, #0
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7fe fced 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 8013e38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013e3c:	2117      	movs	r1, #23
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7fe fc28 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013e44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7fe fc33 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	4a92      	ldr	r2, [pc, #584]	; (801409c <_ZN12MainViewBaseC1Ev+0xfac>)
 8013e52:	2105      	movs	r1, #5
 8013e54:	4620      	mov	r0, r4
 8013e56:	f00a fc3d 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8013e66:	4619      	mov	r1, r3
 8013e68:	4610      	mov	r0, r2
 8013e6a:	f7fe fd57 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8013e74:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013e78:	2116      	movs	r1, #22
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fe fc0a 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013e80:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8013e84:	4620      	mov	r0, r4
 8013e86:	f006 ffb5 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 153, 71, 40);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8013e90:	2328      	movs	r3, #40	; 0x28
 8013e92:	9300      	str	r3, [sp, #0]
 8013e94:	2347      	movs	r3, #71	; 0x47
 8013e96:	2299      	movs	r2, #153	; 0x99
 8013e98:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8013e9c:	f7fc ff44 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8013ea6:	22ff      	movs	r2, #255	; 0xff
 8013ea8:	21ff      	movs	r1, #255	; 0xff
 8013eaa:	20ff      	movs	r0, #255	; 0xff
 8013eac:	f7ff f8f6 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	f7fe fc56 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fe fca2 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f603 34c2 	addw	r4, r3, #3010	; 0xbc2
 8013ece:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013ed2:	2125      	movs	r1, #37	; 0x25
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7fe fbdd 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013eda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7fe fbe8 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	4a6d      	ldr	r2, [pc, #436]	; (801409c <_ZN12MainViewBaseC1Ev+0xfac>)
 8013ee8:	2105      	movs	r1, #5
 8013eea:	4620      	mov	r0, r4
 8013eec:	f00a fbf2 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f603 33c2 	addw	r3, r3, #3010	; 0xbc2
 8013efc:	4619      	mov	r1, r3
 8013efe:	4610      	mov	r0, r2
 8013f00:	f7fe fd0c 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8013f0a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013f0e:	2118      	movs	r1, #24
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fe fbbf 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013f16:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	f006 ff6a 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013f26:	22f0      	movs	r2, #240	; 0xf0
 8013f28:	f240 1197 	movw	r1, #407	; 0x197
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fe f971 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8013f38:	2200      	movs	r2, #0
 8013f3a:	21dc      	movs	r1, #220	; 0xdc
 8013f3c:	20ff      	movs	r0, #255	; 0xff
 8013f3e:	f7ff f8ad 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f42:	4603      	mov	r3, r0
 8013f44:	4619      	mov	r1, r3
 8013f46:	4620      	mov	r0, r4
 8013f48:	f7fe fc0d 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013f52:	2100      	movs	r1, #0
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fe fc59 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8013f60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013f64:	211b      	movs	r1, #27
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7fe fb94 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8013f6c:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8013f70:	4620      	mov	r0, r4
 8013f72:	f006 ff3f 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013f7c:	22e2      	movs	r2, #226	; 0xe2
 8013f7e:	f240 116f 	movw	r1, #367	; 0x16f
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7fe f946 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8013f8e:	230a      	movs	r3, #10
 8013f90:	9300      	str	r3, [sp, #0]
 8013f92:	2364      	movs	r3, #100	; 0x64
 8013f94:	2202      	movs	r2, #2
 8013f96:	2102      	movs	r1, #2
 8013f98:	f004 fc8a 	bl	80188b0 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	9300      	str	r3, [sp, #0]
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	2264      	movs	r2, #100	; 0x64
 8013faa:	2100      	movs	r1, #0
 8013fac:	f004 fefe 	bl	8018dac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013fb6:	2100      	movs	r1, #0
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f004 fcd9 	bl	8018970 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8013fc4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013fc8:	2100      	movs	r1, #0
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fe f8a5 	bl	801211a <_ZN8touchgfx6BitmapC1Et>
 8013fd0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	4620      	mov	r0, r4
 8013fd8:	f004 fedd 	bl	8018d96 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	21dc      	movs	r1, #220	; 0xdc
 8013fe6:	20ff      	movs	r0, #255	; 0xff
 8013fe8:	f7ff f858 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013fec:	4603      	mov	r3, r0
 8013fee:	4619      	mov	r1, r3
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	f004 fc07 	bl	8018804 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013ffc:	213c      	movs	r1, #60	; 0x3c
 8013ffe:	4618      	mov	r0, r3
 8014000:	f004 fc6e 	bl	80188e0 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 801400a:	230a      	movs	r3, #10
 801400c:	9300      	str	r3, [sp, #0]
 801400e:	23b4      	movs	r3, #180	; 0xb4
 8014010:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014014:	210e      	movs	r1, #14
 8014016:	f7fc fe87 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8014020:	22ff      	movs	r2, #255	; 0xff
 8014022:	21ff      	movs	r1, #255	; 0xff
 8014024:	20ff      	movs	r0, #255	; 0xff
 8014026:	f7ff f839 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801402a:	4603      	mov	r3, r0
 801402c:	22ff      	movs	r2, #255	; 0xff
 801402e:	4619      	mov	r1, r3
 8014030:	4620      	mov	r0, r4
 8014032:	f006 f90e 	bl	801a252 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8014042:	4619      	mov	r1, r3
 8014044:	4610      	mov	r0, r2
 8014046:	f006 f96d 	bl	801a324 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8014050:	2205      	movs	r2, #5
 8014052:	2100      	movs	r1, #0
 8014054:	4618      	mov	r0, r3
 8014056:	f000 fd89 	bl	8014b6c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8014060:	2205      	movs	r2, #5
 8014062:	21b4      	movs	r1, #180	; 0xb4
 8014064:	4618      	mov	r0, r3
 8014066:	f000 fda7 	bl	8014bb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8014070:	2102      	movs	r1, #2
 8014072:	4618      	mov	r0, r3
 8014074:	f000 fdc6 	bl	8014c04 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 801407e:	2100      	movs	r1, #0
 8014080:	4618      	mov	r0, r3
 8014082:	f006 fc69 	bl	801a958 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 801408c:	230a      	movs	r3, #10
 801408e:	9300      	str	r3, [sp, #0]
 8014090:	23b4      	movs	r3, #180	; 0xb4
 8014092:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014096:	f240 111f 	movw	r1, #287	; 0x11f
 801409a:	e001      	b.n	80140a0 <_ZN12MainViewBaseC1Ev+0xfb0>
 801409c:	08029ff8 	.word	0x08029ff8
 80140a0:	f7fc fe42 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 80140aa:	22ff      	movs	r2, #255	; 0xff
 80140ac:	21ff      	movs	r1, #255	; 0xff
 80140ae:	20ff      	movs	r0, #255	; 0xff
 80140b0:	f7fe fff4 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80140b4:	4603      	mov	r3, r0
 80140b6:	22ff      	movs	r2, #255	; 0xff
 80140b8:	4619      	mov	r1, r3
 80140ba:	4620      	mov	r0, r4
 80140bc:	f006 f8c9 	bl	801a252 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 80140cc:	4619      	mov	r1, r3
 80140ce:	4610      	mov	r0, r2
 80140d0:	f006 f928 	bl	801a324 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80140da:	2205      	movs	r2, #5
 80140dc:	2100      	movs	r1, #0
 80140de:	4618      	mov	r0, r3
 80140e0:	f000 fd44 	bl	8014b6c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80140ea:	2205      	movs	r2, #5
 80140ec:	21b4      	movs	r1, #180	; 0xb4
 80140ee:	4618      	mov	r0, r3
 80140f0:	f000 fd62 	bl	8014bb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80140fa:	2102      	movs	r1, #2
 80140fc:	4618      	mov	r0, r3
 80140fe:	f000 fd81 	bl	8014c04 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8014108:	2100      	movs	r1, #0
 801410a:	4618      	mov	r0, r3
 801410c:	f006 fc24 	bl	801a958 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 8014116:	2315      	movs	r3, #21
 8014118:	9300      	str	r3, [sp, #0]
 801411a:	233c      	movs	r3, #60	; 0x3c
 801411c:	22f7      	movs	r2, #247	; 0xf7
 801411e:	21d2      	movs	r1, #210	; 0xd2
 8014120:	f7fc fe02 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 801412a:	22ff      	movs	r2, #255	; 0xff
 801412c:	21ff      	movs	r1, #255	; 0xff
 801412e:	20ff      	movs	r0, #255	; 0xff
 8014130:	f7fe ffb4 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014134:	4603      	mov	r3, r0
 8014136:	4619      	mov	r1, r3
 8014138:	4620      	mov	r0, r4
 801413a:	f7fe fb14 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8014144:	2100      	movs	r1, #0
 8014146:	4618      	mov	r0, r3
 8014148:	f7fe fb60 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f603 34cc 	addw	r4, r3, #3020	; 0xbcc
 8014152:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014156:	211d      	movs	r1, #29
 8014158:	4618      	mov	r0, r3
 801415a:	f7fe fa9b 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 801415e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014162:	4618      	mov	r0, r3
 8014164:	f7fe faa6 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014168:	4603      	mov	r3, r0
 801416a:	4ae2      	ldr	r2, [pc, #904]	; (80144f4 <_ZN12MainViewBaseC1Ev+0x1404>)
 801416c:	2105      	movs	r1, #5
 801416e:	4620      	mov	r0, r4
 8014170:	f00a fab0 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
 8014180:	4619      	mov	r1, r3
 8014182:	4610      	mov	r0, r2
 8014184:	f7fe fbca 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 801418e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014192:	211c      	movs	r1, #28
 8014194:	4618      	mov	r0, r3
 8014196:	f7fe fa7d 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 801419a:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 801419e:	4620      	mov	r0, r4
 80141a0:	f006 fe28 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80141aa:	2201      	movs	r2, #1
 80141ac:	2101      	movs	r1, #1
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7fe f830 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 80141ba:	2337      	movs	r3, #55	; 0x37
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80141c2:	2202      	movs	r2, #2
 80141c4:	2102      	movs	r1, #2
 80141c6:	f004 fcc3 	bl	8018b50 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 80141d0:	2300      	movs	r3, #0
 80141d2:	9300      	str	r3, [sp, #0]
 80141d4:	2300      	movs	r3, #0
 80141d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80141da:	2100      	movs	r1, #0
 80141dc:	f004 fde6 	bl	8018dac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80141e6:	2100      	movs	r1, #0
 80141e8:	4618      	mov	r0, r3
 80141ea:	f004 fbc1 	bl	8018970 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80141f4:	2101      	movs	r1, #1
 80141f6:	4618      	mov	r0, r3
 80141f8:	f004 fc05 	bl	8018a06 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014202:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8014206:	4618      	mov	r0, r3
 8014208:	f004 fcba 	bl	8018b80 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014212:	2101      	movs	r1, #1
 8014214:	4618      	mov	r0, r3
 8014216:	f004 fbdf 	bl	80189d8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8014220:	2316      	movs	r3, #22
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	2337      	movs	r3, #55	; 0x37
 8014226:	2204      	movs	r2, #4
 8014228:	2119      	movs	r1, #25
 801422a:	f7fc fd7d 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8014234:	22ff      	movs	r2, #255	; 0xff
 8014236:	21ff      	movs	r1, #255	; 0xff
 8014238:	20ff      	movs	r0, #255	; 0xff
 801423a:	f7fe ff2f 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801423e:	4603      	mov	r3, r0
 8014240:	4619      	mov	r1, r3
 8014242:	4620      	mov	r0, r4
 8014244:	f7fe fa8f 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 801424e:	2100      	movs	r1, #0
 8014250:	4618      	mov	r0, r3
 8014252:	f7fe fadb 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f603 34d6 	addw	r4, r3, #3030	; 0xbd6
 801425c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014260:	211f      	movs	r1, #31
 8014262:	4618      	mov	r0, r3
 8014264:	f7fe fa16 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8014268:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801426c:	4618      	mov	r0, r3
 801426e:	f7fe fa21 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014272:	4603      	mov	r3, r0
 8014274:	4a9f      	ldr	r2, [pc, #636]	; (80144f4 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014276:	2105      	movs	r1, #5
 8014278:	4620      	mov	r0, r4
 801427a:	f00a fa2b 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f603 33d6 	addw	r3, r3, #3030	; 0xbd6
 801428a:	4619      	mov	r1, r3
 801428c:	4610      	mov	r0, r2
 801428e:	f7fe fb45 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8014298:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801429c:	211e      	movs	r1, #30
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fe f9f8 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80142a4:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80142a8:	4620      	mov	r0, r4
 80142aa:	f006 fda3 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80142b4:	220f      	movs	r2, #15
 80142b6:	2152      	movs	r1, #82	; 0x52
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fd ffab 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f603 1444 	addw	r4, r3, #2372	; 0x944
 80142c4:	22ff      	movs	r2, #255	; 0xff
 80142c6:	21ff      	movs	r1, #255	; 0xff
 80142c8:	20ff      	movs	r0, #255	; 0xff
 80142ca:	f7fe fee7 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80142ce:	4603      	mov	r3, r0
 80142d0:	4619      	mov	r1, r3
 80142d2:	4620      	mov	r0, r4
 80142d4:	f7fe fa47 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80142de:	2100      	movs	r1, #0
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7fe fa93 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f603 1444 	addw	r4, r3, #2372	; 0x944
 80142ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80142f0:	2120      	movs	r1, #32
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fe f9ce 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80142f8:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 80142fc:	4620      	mov	r0, r4
 80142fe:	f006 fd79 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f603 1078 	addw	r0, r3, #2424	; 0x978
 8014308:	232a      	movs	r3, #42	; 0x2a
 801430a:	9300      	str	r3, [sp, #0]
 801430c:	2348      	movs	r3, #72	; 0x48
 801430e:	2255      	movs	r2, #85	; 0x55
 8014310:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8014314:	f7fc fd08 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f603 1478 	addw	r4, r3, #2424	; 0x978
 801431e:	22ff      	movs	r2, #255	; 0xff
 8014320:	21ff      	movs	r1, #255	; 0xff
 8014322:	20ff      	movs	r0, #255	; 0xff
 8014324:	f7fe feba 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014328:	4603      	mov	r3, r0
 801432a:	4619      	mov	r1, r3
 801432c:	4620      	mov	r0, r4
 801432e:	f7fe fa1a 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8014338:	2100      	movs	r1, #0
 801433a:	4618      	mov	r0, r3
 801433c:	f7fe fa66 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
 8014346:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801434a:	2122      	movs	r1, #34	; 0x22
 801434c:	4618      	mov	r0, r3
 801434e:	f7fe f9a1 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8014352:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8014356:	4618      	mov	r0, r3
 8014358:	f7fe f9ac 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 801435c:	4603      	mov	r3, r0
 801435e:	4a65      	ldr	r2, [pc, #404]	; (80144f4 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014360:	2105      	movs	r1, #5
 8014362:	4620      	mov	r0, r4
 8014364:	f00a f9b6 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f603 1278 	addw	r2, r3, #2424	; 0x978
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8014374:	4619      	mov	r1, r3
 8014376:	4610      	mov	r0, r2
 8014378:	f7fe fad0 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8014382:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014386:	2121      	movs	r1, #33	; 0x21
 8014388:	4618      	mov	r0, r3
 801438a:	f7fe f983 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 801438e:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8014392:	4620      	mov	r0, r4
 8014394:	f006 fd2e 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(195, 158, 96, 60);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 801439e:	233c      	movs	r3, #60	; 0x3c
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	2360      	movs	r3, #96	; 0x60
 80143a4:	229e      	movs	r2, #158	; 0x9e
 80143a6:	21c3      	movs	r1, #195	; 0xc3
 80143a8:	f7fc fcbe 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 80143b2:	22ff      	movs	r2, #255	; 0xff
 80143b4:	21ff      	movs	r1, #255	; 0xff
 80143b6:	20ff      	movs	r0, #255	; 0xff
 80143b8:	f7fe fe70 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143bc:	4603      	mov	r3, r0
 80143be:	4619      	mov	r1, r3
 80143c0:	4620      	mov	r0, r4
 80143c2:	f7fe f9d0 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80143cc:	2100      	movs	r1, #0
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7fe fa1c 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f603 34ea 	addw	r4, r3, #3050	; 0xbea
 80143da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80143de:	2124      	movs	r1, #36	; 0x24
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7fe f957 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80143e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7fe f962 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 80143f0:	4603      	mov	r3, r0
 80143f2:	4a40      	ldr	r2, [pc, #256]	; (80144f4 <_ZN12MainViewBaseC1Ev+0x1404>)
 80143f4:	2105      	movs	r1, #5
 80143f6:	4620      	mov	r0, r4
 80143f8:	f00a f96c 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f603 33ea 	addw	r3, r3, #3050	; 0xbea
 8014408:	4619      	mov	r1, r3
 801440a:	4610      	mov	r0, r2
 801440c:	f7fe fa86 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014416:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801441a:	2123      	movs	r1, #35	; 0x23
 801441c:	4618      	mov	r0, r3
 801441e:	f7fe f939 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8014422:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8014426:	4620      	mov	r0, r4
 8014428:	f006 fce4 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(100, 153, 78, 42);
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 8014432:	232a      	movs	r3, #42	; 0x2a
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	234e      	movs	r3, #78	; 0x4e
 8014438:	2299      	movs	r2, #153	; 0x99
 801443a:	2164      	movs	r1, #100	; 0x64
 801443c:	f7fc fc74 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 8014446:	22ff      	movs	r2, #255	; 0xff
 8014448:	21ff      	movs	r1, #255	; 0xff
 801444a:	20ff      	movs	r0, #255	; 0xff
 801444c:	f7fe fe26 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014450:	4603      	mov	r3, r0
 8014452:	4619      	mov	r1, r3
 8014454:	4620      	mov	r0, r4
 8014456:	f7fe f986 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014460:	2100      	movs	r1, #0
 8014462:	4618      	mov	r0, r3
 8014464:	f7fe f9d2 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f603 34f4 	addw	r4, r3, #3060	; 0xbf4
 801446e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014472:	212f      	movs	r1, #47	; 0x2f
 8014474:	4618      	mov	r0, r3
 8014476:	f7fe f90d 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 801447a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801447e:	4618      	mov	r0, r3
 8014480:	f7fe f918 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014484:	4603      	mov	r3, r0
 8014486:	4a1b      	ldr	r2, [pc, #108]	; (80144f4 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014488:	2105      	movs	r1, #5
 801448a:	4620      	mov	r0, r4
 801448c:	f00a f922 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 801449c:	4619      	mov	r1, r3
 801449e:	4610      	mov	r0, r2
 80144a0:	f7fe fa3c 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 80144aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80144ae:	212e      	movs	r1, #46	; 0x2e
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7fe f8ef 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80144b6:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 80144ba:	4620      	mov	r0, r4
 80144bc:	f006 fc9a 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(114, 193);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80144c6:	22c1      	movs	r2, #193	; 0xc1
 80144c8:	2172      	movs	r1, #114	; 0x72
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7fd fea2 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 80144d6:	2200      	movs	r2, #0
 80144d8:	21dc      	movs	r1, #220	; 0xdc
 80144da:	20ff      	movs	r0, #255	; 0xff
 80144dc:	f7fe fdde 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80144e0:	4603      	mov	r3, r0
 80144e2:	4619      	mov	r1, r3
 80144e4:	4620      	mov	r0, r4
 80144e6:	f7fe f93e 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80144f0:	2100      	movs	r1, #0
 80144f2:	e001      	b.n	80144f8 <_ZN12MainViewBaseC1Ev+0x1408>
 80144f4:	08029ff8 	.word	0x08029ff8
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7fe f987 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014504:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014508:	2130      	movs	r1, #48	; 0x30
 801450a:	4618      	mov	r0, r3
 801450c:	f7fe f8c2 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8014510:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 8014514:	4620      	mov	r0, r4
 8014516:	f006 fc6d 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(399, 85, 68, 42);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 8014520:	232a      	movs	r3, #42	; 0x2a
 8014522:	9300      	str	r3, [sp, #0]
 8014524:	2344      	movs	r3, #68	; 0x44
 8014526:	2255      	movs	r2, #85	; 0x55
 8014528:	f240 118f 	movw	r1, #399	; 0x18f
 801452c:	f7fc fbfc 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8014536:	22ff      	movs	r2, #255	; 0xff
 8014538:	21ff      	movs	r1, #255	; 0xff
 801453a:	20ff      	movs	r0, #255	; 0xff
 801453c:	f7fe fdae 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014540:	4603      	mov	r3, r0
 8014542:	4619      	mov	r1, r3
 8014544:	4620      	mov	r0, r4
 8014546:	f7fe f90e 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8014550:	2100      	movs	r1, #0
 8014552:	4618      	mov	r0, r3
 8014554:	f7fe f95a 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f603 34fe 	addw	r4, r3, #3070	; 0xbfe
 801455e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8014562:	2132      	movs	r1, #50	; 0x32
 8014564:	4618      	mov	r0, r3
 8014566:	f7fe f895 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 801456a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801456e:	4618      	mov	r0, r3
 8014570:	f7fe f8a0 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014574:	4603      	mov	r3, r0
 8014576:	4ad7      	ldr	r2, [pc, #860]	; (80148d4 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8014578:	2105      	movs	r1, #5
 801457a:	4620      	mov	r0, r4
 801457c:	f00a f8aa 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f603 33fe 	addw	r3, r3, #3070	; 0xbfe
 801458c:	4619      	mov	r1, r3
 801458e:	4610      	mov	r0, r2
 8014590:	f7fe f9c4 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 801459a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801459e:	2131      	movs	r1, #49	; 0x31
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fe f877 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80145a6:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 80145aa:	4620      	mov	r0, r4
 80145ac:	f006 fc22 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(407, 126);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80145b6:	227e      	movs	r2, #126	; 0x7e
 80145b8:	f240 1197 	movw	r1, #407	; 0x197
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fd fe29 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 80145c8:	2200      	movs	r2, #0
 80145ca:	21dc      	movs	r1, #220	; 0xdc
 80145cc:	20ff      	movs	r0, #255	; 0xff
 80145ce:	f7fe fd65 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80145d2:	4603      	mov	r3, r0
 80145d4:	4619      	mov	r1, r3
 80145d6:	4620      	mov	r0, r4
 80145d8:	f7fe f8c5 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80145e2:	2100      	movs	r1, #0
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7fe f911 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 80145f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80145f4:	2133      	movs	r1, #51	; 0x33
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7fe f84c 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 80145fc:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 8014600:	4620      	mov	r0, r4
 8014602:	f006 fbf7 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 801460c:	2311      	movs	r3, #17
 801460e:	9300      	str	r3, [sp, #0]
 8014610:	2313      	movs	r3, #19
 8014612:	22e2      	movs	r2, #226	; 0xe2
 8014614:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8014618:	f7fc fb86 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014622:	220d      	movs	r2, #13
 8014624:	210d      	movs	r1, #13
 8014626:	200d      	movs	r0, #13
 8014628:	f7fe fd38 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801462c:	4603      	mov	r3, r0
 801462e:	4619      	mov	r1, r3
 8014630:	4620      	mov	r0, r4
 8014632:	f7fe f898 	bl	8012766 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 801463c:	2100      	movs	r1, #0
 801463e:	4618      	mov	r0, r3
 8014640:	f7fe f8e4 	bl	801280c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f603 4408 	addw	r4, r3, #3080	; 0xc08
 801464a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801464e:	2135      	movs	r1, #53	; 0x35
 8014650:	4618      	mov	r0, r3
 8014652:	f7fe f81f 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8014656:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801465a:	4618      	mov	r0, r3
 801465c:	f7fe f82a 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014660:	4603      	mov	r3, r0
 8014662:	4a9c      	ldr	r2, [pc, #624]	; (80148d4 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8014664:	2105      	movs	r1, #5
 8014666:	4620      	mov	r0, r4
 8014668:	f00a f834 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8014678:	4619      	mov	r1, r3
 801467a:	4610      	mov	r0, r2
 801467c:	f7fe f94e 	bl	801291c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014686:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801468a:	2134      	movs	r1, #52	; 0x34
 801468c:	4618      	mov	r0, r3
 801468e:	f7fe f801 	bl	8012694 <_ZN8touchgfx9TypedTextC1Et>
 8014692:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8014696:	4620      	mov	r0, r4
 8014698:	f006 fbac 	bl	801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BtnGoToSecondScreen.setBoxWithBorderPosition(0, 0, 122, 272);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 80146a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80146a6:	9300      	str	r3, [sp, #0]
 80146a8:	237a      	movs	r3, #122	; 0x7a
 80146aa:	2200      	movs	r2, #0
 80146ac:	2100      	movs	r1, #0
 80146ae:	f000 fac1 	bl	8014c34 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    BtnGoToSecondScreen.setBorderSize(5);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80146b8:	2105      	movs	r1, #5
 80146ba:	4618      	mov	r0, r3
 80146bc:	f000 fada 	bl	8014c74 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    BtnGoToSecondScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 80146c6:	2299      	movs	r2, #153	; 0x99
 80146c8:	2166      	movs	r1, #102	; 0x66
 80146ca:	2000      	movs	r0, #0
 80146cc:	f7fe fce6 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146d0:	4605      	mov	r5, r0
 80146d2:	22cc      	movs	r2, #204	; 0xcc
 80146d4:	2199      	movs	r1, #153	; 0x99
 80146d6:	2000      	movs	r0, #0
 80146d8:	f7fe fce0 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146dc:	4606      	mov	r6, r0
 80146de:	2266      	movs	r2, #102	; 0x66
 80146e0:	2133      	movs	r1, #51	; 0x33
 80146e2:	2000      	movs	r0, #0
 80146e4:	f7fe fcda 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146e8:	4680      	mov	r8, r0
 80146ea:	2299      	movs	r2, #153	; 0x99
 80146ec:	2166      	movs	r1, #102	; 0x66
 80146ee:	2033      	movs	r0, #51	; 0x33
 80146f0:	f7fe fcd4 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146f4:	4603      	mov	r3, r0
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	4643      	mov	r3, r8
 80146fa:	4632      	mov	r2, r6
 80146fc:	4629      	mov	r1, r5
 80146fe:	4620      	mov	r0, r4
 8014700:	f000 fac9 	bl	8014c96 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BtnGoToSecondScreen.setPosition(358, 0, 122, 272);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 801470a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801470e:	9300      	str	r3, [sp, #0]
 8014710:	237a      	movs	r3, #122	; 0x7a
 8014712:	2200      	movs	r2, #0
 8014714:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8014718:	f7fc fb06 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    BtnGoToSecondScreen.setAlpha(0);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014722:	2100      	movs	r1, #0
 8014724:	4618      	mov	r0, r3
 8014726:	f7fe fa10 	bl	8012b4a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    BtnGoToSecondScreen.setAction(flexButtonCallback);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f603 22f8 	addw	r2, r3, #2808	; 0xaf8
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 8014736:	4619      	mov	r1, r3
 8014738:	4610      	mov	r0, r2
 801473a:	f7fe fa27 	bl	8012b8c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 801473e:	687a      	ldr	r2, [r7, #4]
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	3340      	adds	r3, #64	; 0x40
 8014744:	4619      	mov	r1, r3
 8014746:	4610      	mov	r0, r2
 8014748:	f7fd feec 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 801474c:	687a      	ldr	r2, [r7, #4]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	3370      	adds	r3, #112	; 0x70
 8014752:	4619      	mov	r1, r3
 8014754:	4610      	mov	r0, r2
 8014756:	f7fd fee5 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	33a4      	adds	r3, #164	; 0xa4
 8014760:	4619      	mov	r1, r3
 8014762:	4610      	mov	r0, r2
 8014764:	f7fd fede 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	33d8      	adds	r3, #216	; 0xd8
 801476e:	4619      	mov	r1, r3
 8014770:	4610      	mov	r0, r2
 8014772:	f7fd fed7 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8014776:	687a      	ldr	r2, [r7, #4]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801477e:	4619      	mov	r1, r3
 8014780:	4610      	mov	r0, r2
 8014782:	f7fd fecf 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801478e:	4619      	mov	r1, r3
 8014790:	4610      	mov	r0, r2
 8014792:	f7fd fec7 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801479e:	4619      	mov	r1, r3
 80147a0:	4610      	mov	r0, r2
 80147a2:	f7fd febf 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80147ae:	4619      	mov	r1, r3
 80147b0:	4610      	mov	r0, r2
 80147b2:	f7fd feb7 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80147be:	4619      	mov	r1, r3
 80147c0:	4610      	mov	r0, r2
 80147c2:	f7fd feaf 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 80147c6:	687a      	ldr	r2, [r7, #4]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80147ce:	4619      	mov	r1, r3
 80147d0:	4610      	mov	r0, r2
 80147d2:	f7fd fea7 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 80147d6:	687a      	ldr	r2, [r7, #4]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80147de:	4619      	mov	r1, r3
 80147e0:	4610      	mov	r0, r2
 80147e2:	f7fd fe9f 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80147ee:	4619      	mov	r1, r3
 80147f0:	4610      	mov	r0, r2
 80147f2:	f7fd fe97 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80147fe:	4619      	mov	r1, r3
 8014800:	4610      	mov	r0, r2
 8014802:	f7fd fe8f 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 801480e:	4619      	mov	r1, r3
 8014810:	4610      	mov	r0, r2
 8014812:	f7fd fe87 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 801481e:	4619      	mov	r1, r3
 8014820:	4610      	mov	r0, r2
 8014822:	f7fd fe7f 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801482e:	4619      	mov	r1, r3
 8014830:	4610      	mov	r0, r2
 8014832:	f7fd fe77 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801483e:	4619      	mov	r1, r3
 8014840:	4610      	mov	r0, r2
 8014842:	f7fd fe6f 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8014846:	687a      	ldr	r2, [r7, #4]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801484e:	4619      	mov	r1, r3
 8014850:	4610      	mov	r0, r2
 8014852:	f7fd fe67 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801485e:	4619      	mov	r1, r3
 8014860:	4610      	mov	r0, r2
 8014862:	f7fd fe5f 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801486e:	4619      	mov	r1, r3
 8014870:	4610      	mov	r0, r2
 8014872:	f7fd fe57 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801487e:	4619      	mov	r1, r3
 8014880:	4610      	mov	r0, r2
 8014882:	f7fd fe4f 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8014886:	687a      	ldr	r2, [r7, #4]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801488e:	4619      	mov	r1, r3
 8014890:	4610      	mov	r0, r2
 8014892:	f7fd fe47 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8014896:	687a      	ldr	r2, [r7, #4]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801489e:	4619      	mov	r1, r3
 80148a0:	4610      	mov	r0, r2
 80148a2:	f7fd fe3f 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80148ae:	4619      	mov	r1, r3
 80148b0:	4610      	mov	r0, r2
 80148b2:	f7fd fe37 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80148be:	4619      	mov	r1, r3
 80148c0:	4610      	mov	r0, r2
 80148c2:	f7fd fe2f 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80148ce:	4619      	mov	r1, r3
 80148d0:	e002      	b.n	80148d8 <_ZN12MainViewBaseC1Ev+0x17e8>
 80148d2:	bf00      	nop
 80148d4:	08029ff8 	.word	0x08029ff8
 80148d8:	4610      	mov	r0, r2
 80148da:	f7fd fe23 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80148e6:	4619      	mov	r1, r3
 80148e8:	4610      	mov	r0, r2
 80148ea:	f7fd fe1b 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 80148ee:	687a      	ldr	r2, [r7, #4]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80148f6:	4619      	mov	r1, r3
 80148f8:	4610      	mov	r0, r2
 80148fa:	f7fd fe13 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8014906:	4619      	mov	r1, r3
 8014908:	4610      	mov	r0, r2
 801490a:	f7fd fe0b 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8014916:	4619      	mov	r1, r3
 8014918:	4610      	mov	r0, r2
 801491a:	f7fd fe03 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014926:	4619      	mov	r1, r3
 8014928:	4610      	mov	r0, r2
 801492a:	f7fd fdfb 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8014936:	4619      	mov	r1, r3
 8014938:	4610      	mov	r0, r2
 801493a:	f7fd fdf3 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014946:	4619      	mov	r1, r3
 8014948:	4610      	mov	r0, r2
 801494a:	f7fd fdeb 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 801494e:	687a      	ldr	r2, [r7, #4]
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8014956:	4619      	mov	r1, r3
 8014958:	4610      	mov	r0, r2
 801495a:	f7fd fde3 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8014966:	4619      	mov	r1, r3
 8014968:	4610      	mov	r0, r2
 801496a:	f7fd fddb 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014976:	4619      	mov	r1, r3
 8014978:	4610      	mov	r0, r2
 801497a:	f7fd fdd3 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 801497e:	687a      	ldr	r2, [r7, #4]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014986:	4619      	mov	r1, r3
 8014988:	4610      	mov	r0, r2
 801498a:	f7fd fdcb 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 801498e:	687a      	ldr	r2, [r7, #4]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8014996:	4619      	mov	r1, r3
 8014998:	4610      	mov	r0, r2
 801499a:	f7fd fdc3 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 801499e:	687a      	ldr	r2, [r7, #4]
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80149a6:	4619      	mov	r1, r3
 80149a8:	4610      	mov	r0, r2
 80149aa:	f7fd fdbb 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 80149ae:	687a      	ldr	r2, [r7, #4]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80149b6:	4619      	mov	r1, r3
 80149b8:	4610      	mov	r0, r2
 80149ba:	f7fd fdb3 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BtnGoToSecondScreen);
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80149c6:	4619      	mov	r1, r3
 80149c8:	4610      	mov	r0, r2
 80149ca:	f7fd fdab 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	4618      	mov	r0, r3
 80149d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80149d6:	46bd      	mov	sp, r7
 80149d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080149dc <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 80149dc:	b480      	push	{r7}
 80149de:	b083      	sub	sp, #12
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]

}
 80149e4:	bf00      	nop
 80149e6:	370c      	adds	r7, #12
 80149e8:	46bd      	mov	sp, r7
 80149ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ee:	4770      	bx	lr

080149f0 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
    if (&src == &BtnGoToSecondScreen)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014a00:	683a      	ldr	r2, [r7, #0]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d106      	bne.n	8014a14 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When BtnGoToSecondScreen clicked change screen to SecondScreen
        //Go to SecondScreen with screen transition towards East
        application().gotoSecondScreenScreenSlideTransitionEast();
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f7fe fb3d 	bl	8013086 <_ZN12MainViewBase11applicationEv>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fc fc8e 	bl	8011330 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
    }
}
 8014a14:	bf00      	nop
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
    /**
     * @fn virtual BoxWithBorderButtonStyle::~BoxWithBorderButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorderButtonStyle() { }
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	4a08      	ldr	r2, [pc, #32]	; (8014a48 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	601a      	str	r2, [r3, #0]
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	3334      	adds	r3, #52	; 0x34
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7fe f97c 	bl	8012d2c <_ZN8touchgfx13BoxWithBorderD1Ev>
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fe f8dc 	bl	8012bf4 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3708      	adds	r7, #8
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	0802a66c 	.word	0x0802a66c

08014a4c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f7ff ffe1 	bl	8014a1c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8014a5a:	2178      	movs	r1, #120	; 0x78
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f013 fda3 	bl	80285a8 <_ZdlPvj>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	4618      	mov	r0, r3
 8014a66:	3708      	adds	r7, #8
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}

08014a6c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	4618      	mov	r0, r3
 8014a78:	f008 fd2c 	bl	801d4d4 <_ZN8touchgfx6ScreenC1Ev>
 8014a7c:	4a05      	ldr	r2, [pc, #20]	; (8014a94 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	601a      	str	r2, [r3, #0]
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2200      	movs	r2, #0
 8014a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	3708      	adds	r7, #8
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}
 8014a92:	bf00      	nop
 8014a94:	0802a700 	.word	0x0802a700

08014a98 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fe f894 	bl	8012bd0 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 8014aa8:	4a17      	ldr	r2, [pc, #92]	; (8014b08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x70>)
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	601a      	str	r2, [r3, #0]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	3334      	adds	r3, #52	; 0x34
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7fe f914 	bl	8012ce0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	3368      	adds	r3, #104	; 0x68
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7fd facc 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	336c      	adds	r3, #108	; 0x6c
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7fd fac7 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	3370      	adds	r3, #112	; 0x70
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7fd fac2 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	3374      	adds	r3, #116	; 0x74
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7fd fabd 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	3334      	adds	r3, #52	; 0x34
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	2100      	movs	r1, #0
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7fd fb93 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8014aee:	687a      	ldr	r2, [r7, #4]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	3334      	adds	r3, #52	; 0x34
 8014af4:	4619      	mov	r1, r3
 8014af6:	4610      	mov	r0, r2
 8014af8:	f004 fa8c 	bl	8019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	4618      	mov	r0, r3
 8014b00:	3708      	adds	r7, #8
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	0802a66c 	.word	0x0802a66c

08014b0c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8014b0c:	b480      	push	{r7}
 8014b0e:	b083      	sub	sp, #12
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	4a04      	ldr	r2, [pc, #16]	; (8014b28 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	601a      	str	r2, [r3, #0]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	370c      	adds	r7, #12
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr
 8014b28:	0802a7c8 	.word	0x0802a7c8

08014b2c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	4639      	mov	r1, r7
 8014b38:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7ff ffe4 	bl	8014b0c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8014b44:	4a08      	ldr	r2, [pc, #32]	; (8014b68 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	68ba      	ldr	r2, [r7, #8]
 8014b4e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	3308      	adds	r3, #8
 8014b54:	463a      	mov	r2, r7
 8014b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b5a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	4618      	mov	r0, r3
 8014b62:	3710      	adds	r7, #16
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	0802a654 	.word	0x0802a654

08014b6c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8014b6c:	b590      	push	{r4, r7, lr}
 8014b6e:	b089      	sub	sp, #36	; 0x24
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	607a      	str	r2, [r7, #4]
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8014b7c:	69bb      	ldr	r3, [r7, #24]
 8014b7e:	015a      	lsls	r2, r3, #5
 8014b80:	f107 0314 	add.w	r3, r7, #20
 8014b84:	4611      	mov	r1, r2
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7fd fef8 	bl	801297c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	461c      	mov	r4, r3
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	61fb      	str	r3, [r7, #28]
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	015a      	lsls	r2, r3, #5
 8014b98:	f107 0310 	add.w	r3, r7, #16
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7fd feec 	bl	801297c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014ba4:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8014ba6:	461a      	mov	r2, r3
 8014ba8:	4621      	mov	r1, r4
 8014baa:	68f8      	ldr	r0, [r7, #12]
 8014bac:	f005 febe 	bl	801a92c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8014bb0:	bf00      	nop
 8014bb2:	3724      	adds	r7, #36	; 0x24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd90      	pop	{r4, r7, pc}

08014bb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8014bb8:	b590      	push	{r4, r7, lr}
 8014bba:	b089      	sub	sp, #36	; 0x24
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	607a      	str	r2, [r7, #4]
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	61bb      	str	r3, [r7, #24]
 8014bc8:	69bb      	ldr	r3, [r7, #24]
 8014bca:	015a      	lsls	r2, r3, #5
 8014bcc:	f107 0314 	add.w	r3, r7, #20
 8014bd0:	4611      	mov	r1, r2
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7fd fed2 	bl	801297c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	461c      	mov	r4, r3
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	61fb      	str	r3, [r7, #28]
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	015a      	lsls	r2, r3, #5
 8014be4:	f107 0310 	add.w	r3, r7, #16
 8014be8:	4611      	mov	r1, r2
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7fd fec6 	bl	801297c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014bf0:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	4621      	mov	r1, r4
 8014bf6:	68f8      	ldr	r0, [r7, #12]
 8014bf8:	f005 fea3 	bl	801a942 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8014bfc:	bf00      	nop
 8014bfe:	3724      	adds	r7, #36	; 0x24
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd90      	pop	{r4, r7, pc}

08014c04 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6039      	str	r1, [r7, #0]
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	60fb      	str	r3, [r7, #12]
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	015a      	lsls	r2, r3, #5
 8014c16:	f107 0308 	add.w	r3, r7, #8
 8014c1a:	4611      	mov	r1, r2
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7fd fead 	bl	801297c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014c22:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8014c24:	4619      	mov	r1, r3
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7fd fec3 	bl	80129b2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8014c2c:	bf00      	nop
 8014c2e:	3710      	adds	r7, #16
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8014c34:	b590      	push	{r4, r7, lr}
 8014c36:	b087      	sub	sp, #28
 8014c38:	af02      	add	r7, sp, #8
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	4608      	mov	r0, r1
 8014c3e:	4611      	mov	r1, r2
 8014c40:	461a      	mov	r2, r3
 8014c42:	4603      	mov	r3, r0
 8014c44:	817b      	strh	r3, [r7, #10]
 8014c46:	460b      	mov	r3, r1
 8014c48:	813b      	strh	r3, [r7, #8]
 8014c4a:	4613      	mov	r3, r2
 8014c4c:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8014c54:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8014c58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014c5c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014c60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c64:	9300      	str	r3, [sp, #0]
 8014c66:	4623      	mov	r3, r4
 8014c68:	f7fc f85e 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8014c6c:	bf00      	nop
 8014c6e:	3714      	adds	r7, #20
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd90      	pop	{r4, r7, pc}

08014c74 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b082      	sub	sp, #8
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	3334      	adds	r3, #52	; 0x34
 8014c84:	78fa      	ldrb	r2, [r7, #3]
 8014c86:	4611      	mov	r1, r2
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f7fe f88d 	bl	8012da8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8014c8e:	bf00      	nop
 8014c90:	3708      	adds	r7, #8
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}

08014c96 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8014c96:	b580      	push	{r7, lr}
 8014c98:	b084      	sub	sp, #16
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	60f8      	str	r0, [r7, #12]
 8014c9e:	60b9      	str	r1, [r7, #8]
 8014ca0:	607a      	str	r2, [r7, #4]
 8014ca2:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	68ba      	ldr	r2, [r7, #8]
 8014ca8:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	683a      	ldr	r2, [r7, #0]
 8014cb4:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	69ba      	ldr	r2, [r7, #24]
 8014cba:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	3384      	adds	r3, #132	; 0x84
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	68f8      	ldr	r0, [r7, #12]
 8014cc6:	4798      	blx	r3
    }
 8014cc8:	bf00      	nop
 8014cca:	3710      	adds	r7, #16
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8014cd0:	b480      	push	{r7}
 8014cd2:	b083      	sub	sp, #12
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
    }
 8014cd8:	4a04      	ldr	r2, [pc, #16]	; (8014cec <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	601a      	str	r2, [r3, #0]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	370c      	adds	r7, #12
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr
 8014cec:	0802a7c8 	.word	0x0802a7c8

08014cf0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
    }
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7ff ffe9 	bl	8014cd0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8014cfe:	2104      	movs	r1, #4
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f013 fc51 	bl	80285a8 <_ZdlPvj>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3708      	adds	r7, #8
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8014d10:	b590      	push	{r4, r7, lr}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7fd ff05 	bl	8012b30 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014d26:	4603      	mov	r3, r0
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	336c      	adds	r3, #108	; 0x6c
 8014d30:	e001      	b.n	8014d36 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	3368      	adds	r3, #104	; 0x68
 8014d36:	6819      	ldr	r1, [r3, #0]
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f7fe f819 	bl	8012d70 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7fd fef2 	bl	8012b30 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d002      	beq.n	8014d58 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	3374      	adds	r3, #116	; 0x74
 8014d56:	e001      	b.n	8014d5c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	3370      	adds	r3, #112	; 0x70
 8014d5c:	6819      	ldr	r1, [r3, #0]
 8014d5e:	4620      	mov	r0, r4
 8014d60:	f7fe f814 	bl	8012d8c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7fd ff1e 	bl	8012ba8 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8014d6c:	bf00      	nop
 8014d6e:	370c      	adds	r7, #12
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd90      	pop	{r4, r7, pc}

08014d74 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	4a05      	ldr	r2, [pc, #20]	; (8014d94 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	601a      	str	r2, [r3, #0]
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7ff ffa3 	bl	8014cd0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	3708      	adds	r7, #8
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}
 8014d94:	0802a654 	.word	0x0802a654

08014d98 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7ff ffe7 	bl	8014d74 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8014da6:	2110      	movs	r1, #16
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f013 fbfd 	bl	80285a8 <_ZdlPvj>
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	4618      	mov	r0, r3
 8014db2:	3708      	adds	r7, #8
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}

08014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	4a05      	ldr	r2, [pc, #20]	; (8014dd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	601a      	str	r2, [r3, #0]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7fd fd6f 	bl	80128ac <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3708      	adds	r7, #8
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}
 8014dd8:	0802c55c 	.word	0x0802c55c

08014ddc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f7ff ffe7 	bl	8014db8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014dea:	2138      	movs	r1, #56	; 0x38
 8014dec:	6878      	ldr	r0, [r7, #4]
 8014dee:	f013 fbdb 	bl	80285a8 <_ZdlPvj>
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	4618      	mov	r0, r3
 8014df6:	3708      	adds	r7, #8
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}

08014dfc <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	4a05      	ldr	r2, [pc, #20]	; (8014e1c <_ZN8touchgfx4LineD1Ev+0x20>)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	601a      	str	r2, [r3, #0]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f005 fb67 	bl	801a4e0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	4618      	mov	r0, r3
 8014e16:	3708      	adds	r7, #8
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}
 8014e1c:	0802c298 	.word	0x0802c298

08014e20 <_ZN8touchgfx4LineD0Ev>:
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7ff ffe7 	bl	8014dfc <_ZN8touchgfx4LineD1Ev>
 8014e2e:	2174      	movs	r1, #116	; 0x74
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f013 fbb9 	bl	80285a8 <_ZdlPvj>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3708      	adds	r7, #8
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}

08014e40 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b082      	sub	sp, #8
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	4a05      	ldr	r2, [pc, #20]	; (8014e60 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	601a      	str	r2, [r3, #0]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7fd fdd1 	bl	80129f8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	4618      	mov	r0, r3
 8014e5a:	3708      	adds	r7, #8
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd80      	pop	{r7, pc}
 8014e60:	0802bf9c 	.word	0x0802bf9c

08014e64 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f7ff ffe7 	bl	8014e40 <_ZN8touchgfx13PainterRGB888D1Ev>
 8014e72:	2118      	movs	r1, #24
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f013 fb97 	bl	80285a8 <_ZdlPvj>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3708      	adds	r7, #8
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	68d2      	ldr	r2, [r2, #12]
 8014e96:	1052      	asrs	r2, r2, #1
 8014e98:	1898      	adds	r0, r3, r2
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	68db      	ldr	r3, [r3, #12]
 8014e9e:	f003 0301 	and.w	r3, r3, #1
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d102      	bne.n	8014eac <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	689b      	ldr	r3, [r3, #8]
 8014eaa:	e00a      	b.n	8014ec2 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	687a      	ldr	r2, [r7, #4]
 8014eb2:	68d2      	ldr	r2, [r2, #12]
 8014eb4:	1052      	asrs	r2, r2, #1
 8014eb6:	4413      	add	r3, r2
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	6892      	ldr	r2, [r2, #8]
 8014ebe:	4413      	add	r3, r2
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	6839      	ldr	r1, [r7, #0]
 8014ec4:	4798      	blx	r3
    }
 8014ec6:	bf00      	nop
 8014ec8:	3708      	adds	r7, #8
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}

08014ece <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8014ece:	b480      	push	{r7}
 8014ed0:	b083      	sub	sp, #12
 8014ed2:	af00      	add	r7, sp, #0
 8014ed4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d010      	beq.n	8014f00 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	689b      	ldr	r3, [r3, #8]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d107      	bne.n	8014ef6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	68db      	ldr	r3, [r3, #12]
 8014eea:	f003 0301 	and.w	r3, r3, #1
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d101      	bne.n	8014ef6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	e000      	b.n	8014ef8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	2b01      	cmp	r3, #1
 8014efa:	d001      	beq.n	8014f00 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014efc:	2301      	movs	r3, #1
 8014efe:	e000      	b.n	8014f02 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8014f00:	2300      	movs	r3, #0
    }
 8014f02:	4618      	mov	r0, r3
 8014f04:	370c      	adds	r7, #12
 8014f06:	46bd      	mov	sp, r7
 8014f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0c:	4770      	bx	lr

08014f0e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 8014f0e:	b590      	push	{r4, r7, lr}
 8014f10:	b083      	sub	sp, #12
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7fd fe27 	bl	8012b72 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8014f24:	4603      	mov	r3, r0
 8014f26:	4619      	mov	r1, r3
 8014f28:	4620      	mov	r0, r4
 8014f2a:	f7fd ff4d 	bl	8012dc8 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7fd fe43 	bl	8012bbc <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8014f36:	bf00      	nop
 8014f38:	370c      	adds	r7, #12
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd90      	pop	{r4, r7, pc}
	...

08014f40 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7fd fd98 	bl	8012a80 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8014f50:	4a03      	ldr	r2, [pc, #12]	; (8014f60 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	601a      	str	r2, [r3, #0]
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3708      	adds	r7, #8
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	0802aa6c 	.word	0x0802aa6c

08014f64 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b082      	sub	sp, #8
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	4a05      	ldr	r2, [pc, #20]	; (8014f84 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	601a      	str	r2, [r3, #0]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7fd fda5 	bl	8012ac4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3708      	adds	r7, #8
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}
 8014f84:	0802aa6c 	.word	0x0802aa6c

08014f88 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f7ff ffe7 	bl	8014f64 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8014f96:	2134      	movs	r1, #52	; 0x34
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f013 fb05 	bl	80285a8 <_ZdlPvj>
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	3708      	adds	r7, #8
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}

08014fa8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7fd fdbb 	bl	8012b30 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8014fbe:	6838      	ldr	r0, [r7, #0]
 8014fc0:	f7fd f89f 	bl	8012102 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	bf0c      	ite	eq
 8014fca:	2301      	moveq	r3, #1
 8014fcc:	2300      	movne	r3, #0
 8014fce:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8014fd0:	7bbb      	ldrb	r3, [r7, #14]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d005      	beq.n	8014fe2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8014fd6:	7bfb      	ldrb	r3, [r7, #15]
 8014fd8:	f083 0301 	eor.w	r3, r3, #1
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d108      	bne.n	8014ff4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8014fe2:	7bbb      	ldrb	r3, [r7, #14]
 8014fe4:	f083 0301 	eor.w	r3, r3, #1
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00f      	beq.n	801500e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8014fee:	7bfb      	ldrb	r3, [r7, #15]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d00c      	beq.n	801500e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	7bba      	ldrb	r2, [r7, #14]
 8014ff8:	4611      	mov	r1, r2
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7fd fd84 	bl	8012b08 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8015000:	687a      	ldr	r2, [r7, #4]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	3314      	adds	r3, #20
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	4610      	mov	r0, r2
 801500c:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 801500e:	7bfb      	ldrb	r3, [r7, #15]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d00b      	beq.n	801502c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015014:	6838      	ldr	r0, [r7, #0]
 8015016:	f7fd f874 	bl	8012102 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 801501a:	4603      	mov	r3, r0
 801501c:	2b01      	cmp	r3, #1
 801501e:	d105      	bne.n	801502c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015024:	2b00      	cmp	r3, #0
 8015026:	d001      	beq.n	801502c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015028:	2301      	movs	r3, #1
 801502a:	e000      	b.n	801502e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 801502c:	2300      	movs	r3, #0
 801502e:	2b00      	cmp	r3, #0
 8015030:	d015      	beq.n	801505e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	330c      	adds	r3, #12
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	4610      	mov	r0, r2
 8015042:	4798      	blx	r3
 8015044:	4603      	mov	r3, r0
 8015046:	2b00      	cmp	r3, #0
 8015048:	d009      	beq.n	801505e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	3308      	adds	r3, #8
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	6879      	ldr	r1, [r7, #4]
 801505a:	4610      	mov	r0, r2
 801505c:	4798      	blx	r3
            }
        }
    }
 801505e:	bf00      	nop
 8015060:	3710      	adds	r7, #16
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}
	...

08015068 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>:
class View : public Screen
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	4a05      	ldr	r2, [pc, #20]	; (8015088 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev+0x20>)
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	601a      	str	r2, [r3, #0]
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	4618      	mov	r0, r3
 801507a:	f7fd f9fb 	bl	8012474 <_ZN8touchgfx6ScreenD1Ev>
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	4618      	mov	r0, r3
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	0802aa38 	.word	0x0802aa38

0801508c <_ZN8touchgfx4ViewI21SecondScreenPresenterED0Ev>:
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f7ff ffe7 	bl	8015068 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 801509a:	2140      	movs	r1, #64	; 0x40
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f013 fa83 	bl	80285a8 <_ZdlPvj>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	4618      	mov	r0, r3
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <_ZN20SecondScreenViewBaseD1Ev>:

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	4a0d      	ldr	r2, [pc, #52]	; (80150ec <_ZN20SecondScreenViewBaseD1Ev+0x40>)
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	601a      	str	r2, [r3, #0]
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	33e8      	adds	r3, #232	; 0xe8
 80150be:	4618      	mov	r0, r3
 80150c0:	f000 fa0c 	bl	80154dc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3370      	adds	r3, #112	; 0x70
 80150c8:	4618      	mov	r0, r3
 80150ca:	f000 f8ef 	bl	80152ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	3340      	adds	r3, #64	; 0x40
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fd faae 	bl	8012634 <_ZN8touchgfx3BoxD1Ev>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	4618      	mov	r0, r3
 80150dc:	f7ff ffc4 	bl	8015068 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	4618      	mov	r0, r3
 80150e4:	3708      	adds	r7, #8
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
 80150ea:	bf00      	nop
 80150ec:	0802a958 	.word	0x0802a958

080150f0 <_ZN20SecondScreenViewBaseD0Ev>:
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f7ff ffd7 	bl	80150ac <_ZN20SecondScreenViewBaseD1Ev>
 80150fe:	21f8      	movs	r1, #248	; 0xf8
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f013 fa51 	bl	80285a8 <_ZdlPvj>
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	4618      	mov	r0, r3
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <_ZN20SecondScreenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8015118:	f007 fa46 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 801511c:	4603      	mov	r3, r0
    }
 801511e:	4618      	mov	r0, r3
 8015120:	3708      	adds	r7, #8
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
	...

08015128 <_ZN20SecondScreenViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/secondscreen_screen/SecondScreenViewBase.hpp>
#include <touchgfx/Color.hpp>

SecondScreenViewBase::SecondScreenViewBase() :
 8015128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801512c:	b086      	sub	sp, #24
 801512e:	af02      	add	r7, sp, #8
 8015130:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &SecondScreenViewBase::flexButtonCallbackHandler)
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	4618      	mov	r0, r3
 8015136:	f000 f8e1 	bl	80152fc <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>
 801513a:	4a4a      	ldr	r2, [pc, #296]	; (8015264 <_ZN20SecondScreenViewBaseC1Ev+0x13c>)
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	601a      	str	r2, [r3, #0]
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	3340      	adds	r3, #64	; 0x40
 8015144:	4618      	mov	r0, r3
 8015146:	f7fd fa55 	bl	80125f4 <_ZN8touchgfx3BoxC1Ev>
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	3370      	adds	r3, #112	; 0x70
 801514e:	4618      	mov	r0, r3
 8015150:	f000 f8ea 	bl	8015328 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 801515a:	4b43      	ldr	r3, [pc, #268]	; (8015268 <_ZN20SecondScreenViewBaseC1Ev+0x140>)
 801515c:	60bb      	str	r3, [r7, #8]
 801515e:	2300      	movs	r3, #0
 8015160:	60fb      	str	r3, [r7, #12]
 8015162:	f107 0308 	add.w	r3, r7, #8
 8015166:	cb0c      	ldmia	r3, {r2, r3}
 8015168:	6879      	ldr	r1, [r7, #4]
 801516a:	f000 f917 	bl	801539c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    backgroundBox.setPosition(0, 0, 480, 272);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8015174:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015178:	9300      	str	r3, [sp, #0]
 801517a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801517e:	2200      	movs	r2, #0
 8015180:	2100      	movs	r1, #0
 8015182:	f7fb fdd1 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801518c:	2200      	movs	r2, #0
 801518e:	2100      	movs	r1, #0
 8015190:	2000      	movs	r0, #0
 8015192:	f7fd ff83 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015196:	4603      	mov	r3, r0
 8015198:	4619      	mov	r1, r3
 801519a:	4620      	mov	r0, r4
 801519c:	f7fd fa6c 	bl	8012678 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ButtonGoToMainScreen.setBoxWithBorderPosition(0, 0, 133, 272);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80151a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80151aa:	9300      	str	r3, [sp, #0]
 80151ac:	2385      	movs	r3, #133	; 0x85
 80151ae:	2200      	movs	r2, #0
 80151b0:	2100      	movs	r1, #0
 80151b2:	f000 f913 	bl	80153dc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    ButtonGoToMainScreen.setBorderSize(5);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	3370      	adds	r3, #112	; 0x70
 80151ba:	2105      	movs	r1, #5
 80151bc:	4618      	mov	r0, r3
 80151be:	f000 f92d 	bl	801541c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    ButtonGoToMainScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80151c8:	2299      	movs	r2, #153	; 0x99
 80151ca:	2166      	movs	r1, #102	; 0x66
 80151cc:	2000      	movs	r0, #0
 80151ce:	f7fd ff65 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80151d2:	4605      	mov	r5, r0
 80151d4:	22cc      	movs	r2, #204	; 0xcc
 80151d6:	2199      	movs	r1, #153	; 0x99
 80151d8:	2000      	movs	r0, #0
 80151da:	f7fd ff5f 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80151de:	4606      	mov	r6, r0
 80151e0:	2266      	movs	r2, #102	; 0x66
 80151e2:	2133      	movs	r1, #51	; 0x33
 80151e4:	2000      	movs	r0, #0
 80151e6:	f7fd ff59 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80151ea:	4680      	mov	r8, r0
 80151ec:	2299      	movs	r2, #153	; 0x99
 80151ee:	2166      	movs	r1, #102	; 0x66
 80151f0:	2033      	movs	r0, #51	; 0x33
 80151f2:	f7fd ff53 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80151f6:	4603      	mov	r3, r0
 80151f8:	9300      	str	r3, [sp, #0]
 80151fa:	4643      	mov	r3, r8
 80151fc:	4632      	mov	r2, r6
 80151fe:	4629      	mov	r1, r5
 8015200:	4620      	mov	r0, r4
 8015202:	f000 f91c 	bl	801543e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    ButtonGoToMainScreen.setPosition(0, 0, 133, 272);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801520c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015210:	9300      	str	r3, [sp, #0]
 8015212:	2385      	movs	r3, #133	; 0x85
 8015214:	2200      	movs	r2, #0
 8015216:	2100      	movs	r1, #0
 8015218:	f7fb fd86 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    ButtonGoToMainScreen.setAlpha(0);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	3370      	adds	r3, #112	; 0x70
 8015220:	2100      	movs	r1, #0
 8015222:	4618      	mov	r0, r3
 8015224:	f7fd fc91 	bl	8012b4a <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    ButtonGoToMainScreen.setAction(flexButtonCallback);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	33e8      	adds	r3, #232	; 0xe8
 8015232:	4619      	mov	r1, r3
 8015234:	4610      	mov	r0, r2
 8015236:	f7fd fca9 	bl	8012b8c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 801523a:	687a      	ldr	r2, [r7, #4]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	3340      	adds	r3, #64	; 0x40
 8015240:	4619      	mov	r1, r3
 8015242:	4610      	mov	r0, r2
 8015244:	f7fd f96e 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ButtonGoToMainScreen);
 8015248:	687a      	ldr	r2, [r7, #4]
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	3370      	adds	r3, #112	; 0x70
 801524e:	4619      	mov	r1, r3
 8015250:	4610      	mov	r0, r2
 8015252:	f7fd f967 	bl	8012524 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	4618      	mov	r0, r3
 801525a:	3710      	adds	r7, #16
 801525c:	46bd      	mov	sp, r7
 801525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015262:	bf00      	nop
 8015264:	0802a958 	.word	0x0802a958
 8015268:	08015281 	.word	0x08015281

0801526c <_ZN20SecondScreenViewBase11setupScreenEv>:

void SecondScreenViewBase::setupScreen()
{
 801526c:	b480      	push	{r7}
 801526e:	b083      	sub	sp, #12
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]

}
 8015274:	bf00      	nop
 8015276:	370c      	adds	r7, #12
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr

08015280 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SecondScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonGoToMainScreen)
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	3370      	adds	r3, #112	; 0x70
 801528e:	683a      	ldr	r2, [r7, #0]
 8015290:	429a      	cmp	r2, r3
 8015292:	d106      	bne.n	80152a2 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //Interaction1
        //When ButtonGoToMainScreen clicked change screen to Main
        //Go to Main with screen transition towards East
        application().gotoMainScreenSlideTransitionEast();
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f7ff ff3b 	bl	8015110 <_ZN20SecondScreenViewBase11applicationEv>
 801529a:	4603      	mov	r3, r0
 801529c:	4618      	mov	r0, r3
 801529e:	f7fc f801 	bl	80112a4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv>
    }
}
 80152a2:	bf00      	nop
 80152a4:	3708      	adds	r7, #8
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}
	...

080152ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	4a08      	ldr	r2, [pc, #32]	; (80152d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	601a      	str	r2, [r3, #0]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	3334      	adds	r3, #52	; 0x34
 80152be:	4618      	mov	r0, r3
 80152c0:	f7fd fd34 	bl	8012d2c <_ZN8touchgfx13BoxWithBorderD1Ev>
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7ff fe4c 	bl	8014f64 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	4618      	mov	r0, r3
 80152d0:	3708      	adds	r7, #8
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	0802a9a4 	.word	0x0802a9a4

080152dc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f7ff ffe1 	bl	80152ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 80152ea:	2178      	movs	r1, #120	; 0x78
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f013 f95b 	bl	80285a8 <_ZdlPvj>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	4618      	mov	r0, r3
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}

080152fc <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>:
    View() : presenter(0)
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	4618      	mov	r0, r3
 8015308:	f008 f8e4 	bl	801d4d4 <_ZN8touchgfx6ScreenC1Ev>
 801530c:	4a05      	ldr	r2, [pc, #20]	; (8015324 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev+0x28>)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	601a      	str	r2, [r3, #0]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	2200      	movs	r2, #0
 8015316:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	4618      	mov	r0, r3
 801531c:	3708      	adds	r7, #8
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
 8015322:	bf00      	nop
 8015324:	0802aa38 	.word	0x0802aa38

08015328 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	4618      	mov	r0, r3
 8015334:	f7ff fe04 	bl	8014f40 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8015338:	4a17      	ldr	r2, [pc, #92]	; (8015398 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	601a      	str	r2, [r3, #0]
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	3334      	adds	r3, #52	; 0x34
 8015342:	4618      	mov	r0, r3
 8015344:	f7fd fccc 	bl	8012ce0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	3368      	adds	r3, #104	; 0x68
 801534c:	4618      	mov	r0, r3
 801534e:	f7fc fe84 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	336c      	adds	r3, #108	; 0x6c
 8015356:	4618      	mov	r0, r3
 8015358:	f7fc fe7f 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	3370      	adds	r3, #112	; 0x70
 8015360:	4618      	mov	r0, r3
 8015362:	f7fc fe7a 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	3374      	adds	r3, #116	; 0x74
 801536a:	4618      	mov	r0, r3
 801536c:	f7fc fe75 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	3334      	adds	r3, #52	; 0x34
 8015374:	2200      	movs	r2, #0
 8015376:	2100      	movs	r1, #0
 8015378:	4618      	mov	r0, r3
 801537a:	f7fc ff4b 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	3334      	adds	r3, #52	; 0x34
 8015384:	4619      	mov	r1, r3
 8015386:	4610      	mov	r0, r2
 8015388:	f003 fe44 	bl	8019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	4618      	mov	r0, r3
 8015390:	3708      	adds	r7, #8
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}
 8015396:	bf00      	nop
 8015398:	0802a9a4 	.word	0x0802a9a4

0801539c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	4639      	mov	r1, r7
 80153a8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7ff fbac 	bl	8014b0c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 80153b4:	4a08      	ldr	r2, [pc, #32]	; (80153d8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	68ba      	ldr	r2, [r7, #8]
 80153be:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	3308      	adds	r3, #8
 80153c4:	463a      	mov	r2, r7
 80153c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80153ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	4618      	mov	r0, r3
 80153d2:	3710      	adds	r7, #16
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}
 80153d8:	0802a98c 	.word	0x0802a98c

080153dc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80153dc:	b590      	push	{r4, r7, lr}
 80153de:	b087      	sub	sp, #28
 80153e0:	af02      	add	r7, sp, #8
 80153e2:	60f8      	str	r0, [r7, #12]
 80153e4:	4608      	mov	r0, r1
 80153e6:	4611      	mov	r1, r2
 80153e8:	461a      	mov	r2, r3
 80153ea:	4603      	mov	r3, r0
 80153ec:	817b      	strh	r3, [r7, #10]
 80153ee:	460b      	mov	r3, r1
 80153f0:	813b      	strh	r3, [r7, #8]
 80153f2:	4613      	mov	r3, r2
 80153f4:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80153fc:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8015400:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015404:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8015408:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	4623      	mov	r3, r4
 8015410:	f7fb fc8a 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8015414:	bf00      	nop
 8015416:	3714      	adds	r7, #20
 8015418:	46bd      	mov	sp, r7
 801541a:	bd90      	pop	{r4, r7, pc}

0801541c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
 8015424:	460b      	mov	r3, r1
 8015426:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	3334      	adds	r3, #52	; 0x34
 801542c:	78fa      	ldrb	r2, [r7, #3]
 801542e:	4611      	mov	r1, r2
 8015430:	4618      	mov	r0, r3
 8015432:	f7fd fcb9 	bl	8012da8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8015436:	bf00      	nop
 8015438:	3708      	adds	r7, #8
 801543a:	46bd      	mov	sp, r7
 801543c:	bd80      	pop	{r7, pc}

0801543e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 801543e:	b580      	push	{r7, lr}
 8015440:	b084      	sub	sp, #16
 8015442:	af00      	add	r7, sp, #0
 8015444:	60f8      	str	r0, [r7, #12]
 8015446:	60b9      	str	r1, [r7, #8]
 8015448:	607a      	str	r2, [r7, #4]
 801544a:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	68ba      	ldr	r2, [r7, #8]
 8015450:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	687a      	ldr	r2, [r7, #4]
 8015456:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	683a      	ldr	r2, [r7, #0]
 801545c:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	69ba      	ldr	r2, [r7, #24]
 8015462:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	3384      	adds	r3, #132	; 0x84
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	68f8      	ldr	r0, [r7, #12]
 801546e:	4798      	blx	r3
    }
 8015470:	bf00      	nop
 8015472:	3710      	adds	r7, #16
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}

08015478 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8015478:	b590      	push	{r4, r7, lr}
 801547a:	b083      	sub	sp, #12
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	4618      	mov	r0, r3
 801548a:	f7fd fb51 	bl	8012b30 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801548e:	4603      	mov	r3, r0
 8015490:	2b00      	cmp	r3, #0
 8015492:	d002      	beq.n	801549a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	336c      	adds	r3, #108	; 0x6c
 8015498:	e001      	b.n	801549e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	3368      	adds	r3, #104	; 0x68
 801549e:	6819      	ldr	r1, [r3, #0]
 80154a0:	4620      	mov	r0, r4
 80154a2:	f7fd fc65 	bl	8012d70 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7fd fb3e 	bl	8012b30 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80154b4:	4603      	mov	r3, r0
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d002      	beq.n	80154c0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	3374      	adds	r3, #116	; 0x74
 80154be:	e001      	b.n	80154c4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	3370      	adds	r3, #112	; 0x70
 80154c4:	6819      	ldr	r1, [r3, #0]
 80154c6:	4620      	mov	r0, r4
 80154c8:	f7fd fc60 	bl	8012d8c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7fd fb6a 	bl	8012ba8 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80154d4:	bf00      	nop
 80154d6:	370c      	adds	r7, #12
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd90      	pop	{r4, r7, pc}

080154dc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80154dc:	b580      	push	{r7, lr}
 80154de:	b082      	sub	sp, #8
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	4a05      	ldr	r2, [pc, #20]	; (80154fc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	601a      	str	r2, [r3, #0]
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7ff fbef 	bl	8014cd0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	4618      	mov	r0, r3
 80154f6:	3708      	adds	r7, #8
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}
 80154fc:	0802a98c 	.word	0x0802a98c

08015500 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8015500:	b580      	push	{r7, lr}
 8015502:	b082      	sub	sp, #8
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f7ff ffe7 	bl	80154dc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 801550e:	2110      	movs	r1, #16
 8015510:	6878      	ldr	r0, [r7, #4]
 8015512:	f013 f849 	bl	80285a8 <_ZdlPvj>
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	4618      	mov	r0, r3
 801551a:	3708      	adds	r7, #8
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015520:	b580      	push	{r7, lr}
 8015522:	b082      	sub	sp, #8
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	687a      	ldr	r2, [r7, #4]
 8015530:	68d2      	ldr	r2, [r2, #12]
 8015532:	1052      	asrs	r2, r2, #1
 8015534:	1898      	adds	r0, r3, r2
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	f003 0301 	and.w	r3, r3, #1
 801553e:	2b00      	cmp	r3, #0
 8015540:	d102      	bne.n	8015548 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	689b      	ldr	r3, [r3, #8]
 8015546:	e00a      	b.n	801555e <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	687a      	ldr	r2, [r7, #4]
 801554e:	68d2      	ldr	r2, [r2, #12]
 8015550:	1052      	asrs	r2, r2, #1
 8015552:	4413      	add	r3, r2
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	687a      	ldr	r2, [r7, #4]
 8015558:	6892      	ldr	r2, [r2, #8]
 801555a:	4413      	add	r3, r2
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	6839      	ldr	r1, [r7, #0]
 8015560:	4798      	blx	r3
    }
 8015562:	bf00      	nop
 8015564:	3708      	adds	r7, #8
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}

0801556a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 801556a:	b480      	push	{r7}
 801556c:	b083      	sub	sp, #12
 801556e:	af00      	add	r7, sp, #0
 8015570:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	685b      	ldr	r3, [r3, #4]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d010      	beq.n	801559c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	689b      	ldr	r3, [r3, #8]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d107      	bne.n	8015592 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	68db      	ldr	r3, [r3, #12]
 8015586:	f003 0301 	and.w	r3, r3, #1
 801558a:	2b00      	cmp	r3, #0
 801558c:	d101      	bne.n	8015592 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801558e:	2301      	movs	r3, #1
 8015590:	e000      	b.n	8015594 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8015592:	2300      	movs	r3, #0
 8015594:	2b01      	cmp	r3, #1
 8015596:	d001      	beq.n	801559c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8015598:	2301      	movs	r3, #1
 801559a:	e000      	b.n	801559e <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 801559c:	2300      	movs	r3, #0
    }
 801559e:	4618      	mov	r0, r3
 80155a0:	370c      	adds	r7, #12
 80155a2:	46bd      	mov	sp, r7
 80155a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a8:	4770      	bx	lr

080155aa <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 80155aa:	b590      	push	{r4, r7, lr}
 80155ac:	b083      	sub	sp, #12
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7fd fad9 	bl	8012b72 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 80155c0:	4603      	mov	r3, r0
 80155c2:	4619      	mov	r1, r3
 80155c4:	4620      	mov	r0, r4
 80155c6:	f7fd fbff 	bl	8012dc8 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7fd faf5 	bl	8012bbc <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 80155d2:	bf00      	nop
 80155d4:	370c      	adds	r7, #12
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd90      	pop	{r4, r7, pc}
	...

080155dc <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80155dc:	b480      	push	{r7}
 80155de:	af00      	add	r7, sp, #0
    return bitmap_database;
 80155e0:	4b02      	ldr	r3, [pc, #8]	; (80155ec <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	46bd      	mov	sp, r7
 80155e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ea:	4770      	bx	lr
 80155ec:	0802aaf8 	.word	0x0802aaf8

080155f0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80155f0:	b480      	push	{r7}
 80155f2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80155f4:	2303      	movs	r3, #3
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	46bd      	mov	sp, r7
 80155fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fe:	4770      	bx	lr

08015600 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8015600:	b480      	push	{r7}
 8015602:	b085      	sub	sp, #20
 8015604:	af00      	add	r7, sp, #0
 8015606:	60f8      	str	r0, [r7, #12]
 8015608:	60b9      	str	r1, [r7, #8]
 801560a:	4613      	mov	r3, r2
 801560c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801560e:	4a07      	ldr	r2, [pc, #28]	; (801562c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	6013      	str	r3, [r2, #0]
        fonts = f;
 8015614:	4a06      	ldr	r2, [pc, #24]	; (8015630 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801561a:	4a06      	ldr	r2, [pc, #24]	; (8015634 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801561c:	88fb      	ldrh	r3, [r7, #6]
 801561e:	8013      	strh	r3, [r2, #0]
    }
 8015620:	bf00      	nop
 8015622:	3714      	adds	r7, #20
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr
 801562c:	2000bf80 	.word	0x2000bf80
 8015630:	2000bf88 	.word	0x2000bf88
 8015634:	2000bf84 	.word	0x2000bf84

08015638 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8015638:	b590      	push	{r4, r7, lr}
 801563a:	b085      	sub	sp, #20
 801563c:	af00      	add	r7, sp, #0
 801563e:	4603      	mov	r3, r0
 8015640:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8015642:	2300      	movs	r3, #0
 8015644:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8015646:	88fb      	ldrh	r3, [r7, #6]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d127      	bne.n	801569c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 801564c:	88fb      	ldrh	r3, [r7, #6]
 801564e:	4a1e      	ldr	r2, [pc, #120]	; (80156c8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d016      	beq.n	8015686 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8015658:	88fb      	ldrh	r3, [r7, #6]
 801565a:	4a1b      	ldr	r2, [pc, #108]	; (80156c8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801565c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015660:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	4413      	add	r3, r2
 801566a:	4a18      	ldr	r2, [pc, #96]	; (80156cc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801566c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	68ba      	ldr	r2, [r7, #8]
 8015674:	4413      	add	r3, r2
 8015676:	4a16      	ldr	r2, [pc, #88]	; (80156d0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015678:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	689b      	ldr	r3, [r3, #8]
 801567e:	68ba      	ldr	r2, [r7, #8]
 8015680:	4413      	add	r3, r2
 8015682:	60fb      	str	r3, [r7, #12]
 8015684:	e00a      	b.n	801569c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015686:	4b11      	ldr	r3, [pc, #68]	; (80156cc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015688:	4a12      	ldr	r2, [pc, #72]	; (80156d4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801568a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801568c:	4a12      	ldr	r2, [pc, #72]	; (80156d8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801568e:	4b10      	ldr	r3, [pc, #64]	; (80156d0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015690:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015692:	88fb      	ldrh	r3, [r7, #6]
 8015694:	4a11      	ldr	r2, [pc, #68]	; (80156dc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801569a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d00d      	beq.n	80156be <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80156a2:	4a0f      	ldr	r2, [pc, #60]	; (80156e0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80156a4:	88fb      	ldrh	r3, [r7, #6]
 80156a6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80156a8:	f000 f83e 	bl	8015728 <_ZN17TypedTextDatabase8getFontsEv>
 80156ac:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80156ae:	f000 f833 	bl	8015718 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80156b2:	4603      	mov	r3, r0
 80156b4:	461a      	mov	r2, r3
 80156b6:	4621      	mov	r1, r4
 80156b8:	68f8      	ldr	r0, [r7, #12]
 80156ba:	f7ff ffa1 	bl	8015600 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80156be:	bf00      	nop
 80156c0:	3714      	adds	r7, #20
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd90      	pop	{r4, r7, pc}
 80156c6:	bf00      	nop
 80156c8:	200086f4 	.word	0x200086f4
 80156cc:	200086fc 	.word	0x200086fc
 80156d0:	20008700 	.word	0x20008700
 80156d4:	08065760 	.word	0x08065760
 80156d8:	08065688 	.word	0x08065688
 80156dc:	080658c4 	.word	0x080658c4
 80156e0:	200086f8 	.word	0x200086f8

080156e4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	460b      	mov	r3, r1
 80156ee:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80156f0:	4b07      	ldr	r3, [pc, #28]	; (8015710 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	4b07      	ldr	r3, [pc, #28]	; (8015714 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80156f6:	6819      	ldr	r1, [r3, #0]
 80156f8:	887b      	ldrh	r3, [r7, #2]
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	440b      	add	r3, r1
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	005b      	lsls	r3, r3, #1
 8015702:	4413      	add	r3, r2
}
 8015704:	4618      	mov	r0, r3
 8015706:	370c      	adds	r7, #12
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr
 8015710:	200086fc 	.word	0x200086fc
 8015714:	20008700 	.word	0x20008700

08015718 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8015718:	b480      	push	{r7}
 801571a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801571c:	2336      	movs	r3, #54	; 0x36
}
 801571e:	4618      	mov	r0, r3
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8015728:	b480      	push	{r7}
 801572a:	af00      	add	r7, sp, #0
    return _fonts;
 801572c:	4b02      	ldr	r3, [pc, #8]	; (8015738 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801572e:	4618      	mov	r0, r3
 8015730:	46bd      	mov	sp, r7
 8015732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015736:	4770      	bx	lr
 8015738:	20008704 	.word	0x20008704

0801573c <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 801573c:	b580      	push	{r7, lr}
 801573e:	b082      	sub	sp, #8
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
 8015744:	6039      	str	r1, [r7, #0]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2b01      	cmp	r3, #1
 801574a:	d127      	bne.n	801579c <_Z41__static_initialization_and_destruction_0ii+0x60>
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015752:	4293      	cmp	r3, r2
 8015754:	d122      	bne.n	801579c <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 8015756:	f7fb f84f 	bl	80107f8 <_Z25getFont_Asap_Bold_18_4bppv>
 801575a:	4603      	mov	r3, r0
};
 801575c:	4a11      	ldr	r2, [pc, #68]	; (80157a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801575e:	6013      	str	r3, [r2, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8015760:	f7fb f946 	bl	80109f0 <_Z25getFont_Asap_Bold_40_4bppv>
 8015764:	4603      	mov	r3, r0
};
 8015766:	4a0f      	ldr	r2, [pc, #60]	; (80157a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015768:	6053      	str	r3, [r2, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 801576a:	f7fb f8ed 	bl	8010948 <_Z25getFont_Asap_Bold_30_4bppv>
 801576e:	4603      	mov	r3, r0
};
 8015770:	4a0c      	ldr	r2, [pc, #48]	; (80157a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015772:	6093      	str	r3, [r2, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8015774:	f7fa ffec 	bl	8010750 <_Z25getFont_Asap_Bold_12_4bppv>
 8015778:	4603      	mov	r3, r0
};
 801577a:	4a0a      	ldr	r2, [pc, #40]	; (80157a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801577c:	60d3      	str	r3, [r2, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 801577e:	f7fb f98b 	bl	8010a98 <_Z25getFont_Asap_Bold_60_4bppv>
 8015782:	4603      	mov	r3, r0
};
 8015784:	4a07      	ldr	r2, [pc, #28]	; (80157a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015786:	6113      	str	r3, [r2, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8015788:	f7fb f88a 	bl	80108a0 <_Z25getFont_Asap_Bold_21_4bppv>
 801578c:	4603      	mov	r3, r0
};
 801578e:	4a05      	ldr	r2, [pc, #20]	; (80157a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015790:	6153      	str	r3, [r2, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8015792:	f7fa ff89 	bl	80106a8 <_Z25getFont_Asap_Bold_10_4bppv>
 8015796:	4603      	mov	r3, r0
};
 8015798:	4a02      	ldr	r2, [pc, #8]	; (80157a4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801579a:	6193      	str	r3, [r2, #24]
}  // namespace TypedTextDatabase
 801579c:	bf00      	nop
 801579e:	3708      	adds	r7, #8
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	20008704 	.word	0x20008704

080157a8 <_GLOBAL__sub_I__fonts>:
 80157a8:	b580      	push	{r7, lr}
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80157b0:	2001      	movs	r0, #1
 80157b2:	f7ff ffc3 	bl	801573c <_Z41__static_initialization_and_destruction_0ii>
 80157b6:	bd80      	pop	{r7, pc}

080157b8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	4a05      	ldr	r2, [pc, #20]	; (80157d8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	601a      	str	r2, [r3, #0]
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7fb fc4f 	bl	801106c <_ZN23FrontendApplicationBaseD1Ev>
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	4618      	mov	r0, r3
 80157d2:	3708      	adds	r7, #8
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}
 80157d8:	0802ab3c 	.word	0x0802ab3c

080157dc <_ZN19FrontendApplicationD0Ev>:
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	6878      	ldr	r0, [r7, #4]
 80157e6:	f7ff ffe7 	bl	80157b8 <_ZN19FrontendApplicationD1Ev>
 80157ea:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80157ee:	6878      	ldr	r0, [r7, #4]
 80157f0:	f012 feda 	bl	80285a8 <_ZdlPvj>
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	4618      	mov	r0, r3
 80157f8:	3708      	adds	r7, #8
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}

080157fe <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80157fe:	b580      	push	{r7, lr}
 8015800:	b082      	sub	sp, #8
 8015802:	af00      	add	r7, sp, #0
 8015804:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801580c:	4618      	mov	r0, r3
 801580e:	f000 fd1d 	bl	801624c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	4618      	mov	r0, r3
 8015816:	f006 fde1 	bl	801c3dc <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801581a:	bf00      	nop
 801581c:	3708      	adds	r7, #8
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
	...

08015824 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	60b9      	str	r1, [r7, #8]
 801582e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	68b9      	ldr	r1, [r7, #8]
 8015836:	4618      	mov	r0, r3
 8015838:	f7fb fc92 	bl	8011160 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801583c:	4a03      	ldr	r2, [pc, #12]	; (801584c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	601a      	str	r2, [r3, #0]
{
}
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	4618      	mov	r0, r3
 8015846:	3710      	adds	r7, #16
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	0802ab3c 	.word	0x0802ab3c

08015850 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8015850:	b480      	push	{r7}
 8015852:	b083      	sub	sp, #12
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
    {
    }
 8015858:	bf00      	nop
 801585a:	370c      	adds	r7, #12
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr

08015864 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8015864:	b480      	push	{r7}
 8015866:	b083      	sub	sp, #12
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
    {
    }
 801586c:	bf00      	nop
 801586e:	370c      	adds	r7, #12
 8015870:	46bd      	mov	sp, r7
 8015872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015876:	4770      	bx	lr

08015878 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
    {
 8015880:	4a04      	ldr	r2, [pc, #16]	; (8015894 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	601a      	str	r2, [r3, #0]
    }
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	4618      	mov	r0, r3
 801588a:	370c      	adds	r7, #12
 801588c:	46bd      	mov	sp, r7
 801588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015892:	4770      	bx	lr
 8015894:	0802abc8 	.word	0x0802abc8

08015898 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
    }
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f7ff ffe9 	bl	8015878 <_ZN8touchgfx9PresenterD1Ev>
 80158a6:	2104      	movs	r1, #4
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f012 fe7d 	bl	80285a8 <_ZdlPvj>
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4618      	mov	r0, r3
 80158b2:	3708      	adds	r7, #8
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 80158b8:	b480      	push	{r7}
 80158ba:	b083      	sub	sp, #12
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
    {
 80158c0:	4a04      	ldr	r2, [pc, #16]	; (80158d4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	601a      	str	r2, [r3, #0]
    }
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	4618      	mov	r0, r3
 80158ca:	370c      	adds	r7, #12
 80158cc:	46bd      	mov	sp, r7
 80158ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d2:	4770      	bx	lr
 80158d4:	0802abc8 	.word	0x0802abc8

080158d8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80158d8:	b480      	push	{r7}
 80158da:	b083      	sub	sp, #12
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	4a06      	ldr	r2, [pc, #24]	; (80158fc <_ZN13ModelListenerC1Ev+0x24>)
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	601a      	str	r2, [r3, #0]
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2200      	movs	r2, #0
 80158ea:	605a      	str	r2, [r3, #4]
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	4618      	mov	r0, r3
 80158f0:	370c      	adds	r7, #12
 80158f2:	46bd      	mov	sp, r7
 80158f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f8:	4770      	bx	lr
 80158fa:	bf00      	nop
 80158fc:	0802abb0 	.word	0x0802abb0

08015900 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	4a04      	ldr	r2, [pc, #16]	; (801591c <_ZN13ModelListenerD1Ev+0x1c>)
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	601a      	str	r2, [r3, #0]
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4618      	mov	r0, r3
 8015912:	370c      	adds	r7, #12
 8015914:	46bd      	mov	sp, r7
 8015916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591a:	4770      	bx	lr
 801591c:	0802abb0 	.word	0x0802abb0

08015920 <_ZN13ModelListenerD0Ev>:
 8015920:	b580      	push	{r7, lr}
 8015922:	b082      	sub	sp, #8
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	f7ff ffe9 	bl	8015900 <_ZN13ModelListenerD1Ev>
 801592e:	2108      	movs	r1, #8
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f012 fe39 	bl	80285a8 <_ZdlPvj>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	4618      	mov	r0, r3
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8015940:	b480      	push	{r7}
 8015942:	b083      	sub	sp, #12
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	6039      	str	r1, [r7, #0]
 801594a:	bf00      	nop
 801594c:	370c      	adds	r7, #12
 801594e:	46bd      	mov	sp, r7
 8015950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015954:	4770      	bx	lr

08015956 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8015956:	b480      	push	{r7}
 8015958:	b083      	sub	sp, #12
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
 801595e:	6039      	str	r1, [r7, #0]
 8015960:	bf00      	nop
 8015962:	370c      	adds	r7, #12
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr

0801596c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 801596c:	b580      	push	{r7, lr}
 801596e:	b082      	sub	sp, #8
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	4a09      	ldr	r2, [pc, #36]	; (801599c <_ZN13MainPresenterD1Ev+0x30>)
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	601a      	str	r2, [r3, #0]
 801597a:	4a09      	ldr	r2, [pc, #36]	; (80159a0 <_ZN13MainPresenterD1Ev+0x34>)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	605a      	str	r2, [r3, #4]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	3304      	adds	r3, #4
 8015984:	4618      	mov	r0, r3
 8015986:	f7ff ffbb 	bl	8015900 <_ZN13ModelListenerD1Ev>
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	4618      	mov	r0, r3
 801598e:	f7ff ff73 	bl	8015878 <_ZN8touchgfx9PresenterD1Ev>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	4618      	mov	r0, r3
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	0802ab78 	.word	0x0802ab78
 80159a0:	0802ab98 	.word	0x0802ab98

080159a4 <_ZThn4_N13MainPresenterD1Ev>:
 80159a4:	f1a0 0004 	sub.w	r0, r0, #4
 80159a8:	e7e0      	b.n	801596c <_ZN13MainPresenterD1Ev>
 80159aa:	bf00      	nop

080159ac <_ZN13MainPresenterD0Ev>:
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b082      	sub	sp, #8
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f7ff ffd9 	bl	801596c <_ZN13MainPresenterD1Ev>
 80159ba:	2110      	movs	r1, #16
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f012 fdf3 	bl	80285a8 <_ZdlPvj>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	4618      	mov	r0, r3
 80159c6:	3708      	adds	r7, #8
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <_ZThn4_N13MainPresenterD0Ev>:
 80159cc:	f1a0 0004 	sub.w	r0, r0, #4
 80159d0:	e7ec      	b.n	80159ac <_ZN13MainPresenterD0Ev>
	...

080159d4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b082      	sub	sp, #8
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	6039      	str	r1, [r7, #0]
    : view(v)
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7ff ff69 	bl	80158b8 <_ZN8touchgfx9PresenterC1Ev>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	3304      	adds	r3, #4
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7ff ff74 	bl	80158d8 <_ZN13ModelListenerC1Ev>
 80159f0:	4a06      	ldr	r2, [pc, #24]	; (8015a0c <_ZN13MainPresenterC1ER8MainView+0x38>)
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	601a      	str	r2, [r3, #0]
 80159f6:	4a06      	ldr	r2, [pc, #24]	; (8015a10 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	605a      	str	r2, [r3, #4]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	683a      	ldr	r2, [r7, #0]
 8015a00:	60da      	str	r2, [r3, #12]
{
}
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	4618      	mov	r0, r3
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	0802ab78 	.word	0x0802ab78
 8015a10:	0802ab98 	.word	0x0802ab98

08015a14 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
}
 8015a1c:	bf00      	nop
 8015a1e:	370c      	adds	r7, #12
 8015a20:	46bd      	mov	sp, r7
 8015a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a26:	4770      	bx	lr

08015a28 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b083      	sub	sp, #12
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
}
 8015a30:	bf00      	nop
 8015a32:	370c      	adds	r7, #12
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr

08015a3c <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	68db      	ldr	r3, [r3, #12]
 8015a4a:	6839      	ldr	r1, [r7, #0]
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f000 f9e9 	bl	8015e24 <_ZN8MainView9updateValEPh>
}
 8015a52:	bf00      	nop
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}

08015a5a <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 8015a5a:	f1a0 0004 	sub.w	r0, r0, #4
 8015a5e:	f7ff bfed 	b.w	8015a3c <_ZN13MainPresenter11setNewValueEPh>

08015a62 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8015a62:	b580      	push	{r7, lr}
 8015a64:	b082      	sub	sp, #8
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	6078      	str	r0, [r7, #4]
 8015a6a:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	6839      	ldr	r1, [r7, #0]
 8015a72:	4618      	mov	r0, r3
 8015a74:	f000 f8fa 	bl	8015c6c <_ZN8MainView14updateSettingsEPh>
}
 8015a78:	bf00      	nop
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8015a80:	f1a0 0004 	sub.w	r0, r0, #4
 8015a84:	f7ff bfed 	b.w	8015a62 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08015a88 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	60f8      	str	r0, [r7, #12]
 8015a90:	460b      	mov	r3, r1
 8015a92:	607a      	str	r2, [r7, #4]
 8015a94:	ed87 0a00 	vstr	s0, [r7]
 8015a98:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8015a9a:	463b      	mov	r3, r7
 8015a9c:	8979      	ldrh	r1, [r7, #10]
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	68f8      	ldr	r0, [r7, #12]
 8015aa2:	f008 ff71 	bl	801e988 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8015aa6:	4603      	mov	r3, r0
    }
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3710      	adds	r7, #16
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8015ab0:	b480      	push	{r7}
 8015ab2:	b083      	sub	sp, #12
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
        return rect.width;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8015abe:	4618      	mov	r0, r3
 8015ac0:	370c      	adds	r7, #12
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac8:	4770      	bx	lr

08015aca <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8015aca:	b480      	push	{r7}
 8015acc:	b083      	sub	sp, #12
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6078      	str	r0, [r7, #4]
        return rect.height;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8015ad8:	4618      	mov	r0, r3
 8015ada:	370c      	adds	r7, #12
 8015adc:	46bd      	mov	sp, r7
 8015ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae2:	4770      	bx	lr

08015ae4 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b082      	sub	sp, #8
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	4a05      	ldr	r2, [pc, #20]	; (8015b04 <_ZN8MainViewD1Ev+0x20>)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	601a      	str	r2, [r3, #0]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7fd f999 	bl	8012e2c <_ZN12MainViewBaseD1Ev>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	4618      	mov	r0, r3
 8015afe:	3708      	adds	r7, #8
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	0802abe0 	.word	0x0802abe0

08015b08 <_ZN8MainViewD0Ev>:
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b082      	sub	sp, #8
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f7ff ffe7 	bl	8015ae4 <_ZN8MainViewD1Ev>
 8015b16:	f642 0144 	movw	r1, #10308	; 0x2844
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f012 fd44 	bl	80285a8 <_ZdlPvj>
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	4618      	mov	r0, r3
 8015b24:	3708      	adds	r7, #8
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
	...

08015b2c <_ZN8MainViewC1Ev>:
static int prev_egt = 0;
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView()
 8015b2c:	b590      	push	{r4, r7, lr}
 8015b2e:	b083      	sub	sp, #12
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7fd fada 	bl	80130f0 <_ZN12MainViewBaseC1Ev>
 8015b3c:	4a15      	ldr	r2, [pc, #84]	; (8015b94 <_ZN8MainViewC1Ev+0x68>)
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8015b42:	4b15      	ldr	r3, [pc, #84]	; (8015b98 <_ZN8MainViewC1Ev+0x6c>)
 8015b44:	881b      	ldrh	r3, [r3, #0]
 8015b46:	461c      	mov	r4, r3
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7ff ffae 	bl	8015ab0 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015b54:	4603      	mov	r3, r0
 8015b56:	429c      	cmp	r4, r3
 8015b58:	dc0b      	bgt.n	8015b72 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8015b5a:	4b10      	ldr	r3, [pc, #64]	; (8015b9c <_ZN8MainViewC1Ev+0x70>)
 8015b5c:	881b      	ldrh	r3, [r3, #0]
 8015b5e:	461c      	mov	r4, r3
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7ff ffaf 	bl	8015aca <_ZNK8touchgfx8Drawable9getHeightEv>
 8015b6c:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8015b6e:	429c      	cmp	r4, r3
 8015b70:	dd01      	ble.n	8015b76 <_ZN8MainViewC1Ev+0x4a>
 8015b72:	2301      	movs	r3, #1
 8015b74:	e000      	b.n	8015b78 <_ZN8MainViewC1Ev+0x4c>
 8015b76:	2300      	movs	r3, #0
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d005      	beq.n	8015b88 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	3340      	adds	r3, #64	; 0x40
 8015b80:	2101      	movs	r1, #1
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7fc fbb7 	bl	80122f6 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	370c      	adds	r7, #12
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd90      	pop	{r4, r7, pc}
 8015b92:	bf00      	nop
 8015b94:	0802abe0 	.word	0x0802abe0
 8015b98:	2000bee2 	.word	0x2000bee2
 8015b9c:	2000bee4 	.word	0x2000bee4

08015ba0 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b083      	sub	sp, #12
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
}
 8015ba8:	bf00      	nop
 8015baa:	370c      	adds	r7, #12
 8015bac:	46bd      	mov	sp, r7
 8015bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb2:	4770      	bx	lr

08015bb4 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b083      	sub	sp, #12
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
}
 8015bbc:	bf00      	nop
 8015bbe:	370c      	adds	r7, #12
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8015bce:	2200      	movs	r2, #0
 8015bd0:	2100      	movs	r1, #0
 8015bd2:	2000      	movs	r0, #0
 8015bd4:	f7fd fa62 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	607b      	str	r3, [r7, #4]
}
 8015bdc:	bf00      	nop
 8015bde:	4618      	mov	r0, r3
 8015be0:	3708      	adds	r7, #8
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
	...

08015be8 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b084      	sub	sp, #16
 8015bec:	af00      	add	r7, sp, #0

	color_index ++;
 8015bee:	4b1e      	ldr	r3, [pc, #120]	; (8015c68 <_ZL20getColorFromRevLimitv+0x80>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	4a1c      	ldr	r2, [pc, #112]	; (8015c68 <_ZL20getColorFromRevLimitv+0x80>)
 8015bf6:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8015bf8:	4b1b      	ldr	r3, [pc, #108]	; (8015c68 <_ZL20getColorFromRevLimitv+0x80>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	2b02      	cmp	r3, #2
 8015bfe:	dd02      	ble.n	8015c06 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8015c00:	4b19      	ldr	r3, [pc, #100]	; (8015c68 <_ZL20getColorFromRevLimitv+0x80>)
 8015c02:	2200      	movs	r2, #0
 8015c04:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8015c06:	2200      	movs	r2, #0
 8015c08:	2100      	movs	r1, #0
 8015c0a:	20ff      	movs	r0, #255	; 0xff
 8015c0c:	f7fd fa46 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015c10:	4603      	mov	r3, r0
 8015c12:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8015c14:	2200      	movs	r2, #0
 8015c16:	2100      	movs	r1, #0
 8015c18:	2000      	movs	r0, #0
 8015c1a:	f7fd fa3f 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8015c22:	22ff      	movs	r2, #255	; 0xff
 8015c24:	21ff      	movs	r1, #255	; 0xff
 8015c26:	20ff      	movs	r0, #255	; 0xff
 8015c28:	f7fd fa38 	bl	801309c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8015c30:	463b      	mov	r3, r7
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7fc fa11 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8015c38:	4b0b      	ldr	r3, [pc, #44]	; (8015c68 <_ZL20getColorFromRevLimitv+0x80>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d101      	bne.n	8015c44 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8015c44:	4b08      	ldr	r3, [pc, #32]	; (8015c68 <_ZL20getColorFromRevLimitv+0x80>)
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	d101      	bne.n	8015c50 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8015c50:	4b05      	ldr	r3, [pc, #20]	; (8015c68 <_ZL20getColorFromRevLimitv+0x80>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	2b02      	cmp	r3, #2
 8015c56:	d101      	bne.n	8015c5c <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8015c5c:	683b      	ldr	r3, [r7, #0]
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3710      	adds	r7, #16
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}
 8015c66:	bf00      	nop
 8015c68:	20008720 	.word	0x20008720

08015c6c <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b086      	sub	sp, #24
 8015c70:	af02      	add	r7, sp, #8
 8015c72:	6078      	str	r0, [r7, #4]
 8015c74:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	4a66      	ldr	r2, [pc, #408]	; (8015e18 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8015c80:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	6a1b      	ldr	r3, [r3, #32]
 8015c8c:	ee07 3a90 	vmov	s15, r3
 8015c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c94:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8015e1c <_ZN8MainView14updateSettingsEPh+0x1b0>
 8015c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015ca0:	ee17 3a90 	vmov	r3, s15
 8015ca4:	b21a      	sxth	r2, r3
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	9300      	str	r3, [sp, #0]
 8015caa:	2300      	movs	r3, #0
 8015cac:	2100      	movs	r1, #0
 8015cae:	f003 f87d 	bl	8018dac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f007 f8a3 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	4a55      	ldr	r2, [pc, #340]	; (8015e20 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015cca:	2102      	movs	r1, #2
 8015ccc:	f008 fd02 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f005 f862 	bl	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f007 f88e 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f603 3088 	addw	r0, r3, #2952	; 0xb88
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	689b      	ldr	r3, [r3, #8]
 8015cf2:	4a4b      	ldr	r2, [pc, #300]	; (8015e20 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015cf4:	2102      	movs	r1, #2
 8015cf6:	f008 fced 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015d00:	4618      	mov	r0, r3
 8015d02:	f005 f84d 	bl	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f007 f879 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	68db      	ldr	r3, [r3, #12]
 8015d1c:	4a40      	ldr	r2, [pc, #256]	; (8015e20 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015d1e:	2102      	movs	r1, #2
 8015d20:	f008 fcd8 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f005 f838 	bl	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8015d36:	4618      	mov	r0, r3
 8015d38:	f007 f864 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	691b      	ldr	r3, [r3, #16]
 8015d46:	4a36      	ldr	r2, [pc, #216]	; (8015e20 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015d48:	2102      	movs	r1, #2
 8015d4a:	f008 fcc3 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8015d54:	4618      	mov	r0, r3
 8015d56:	f005 f823 	bl	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8015d60:	4618      	mov	r0, r3
 8015d62:	f007 f84f 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f603 3094 	addw	r0, r3, #2964	; 0xb94
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	695b      	ldr	r3, [r3, #20]
 8015d70:	4a2b      	ldr	r2, [pc, #172]	; (8015e20 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015d72:	2102      	movs	r1, #2
 8015d74:	f008 fcae 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f005 f80e 	bl	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f007 f83a 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f603 3098 	addw	r0, r3, #2968	; 0xb98
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	699b      	ldr	r3, [r3, #24]
 8015d9a:	4a21      	ldr	r2, [pc, #132]	; (8015e20 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015d9c:	2102      	movs	r1, #2
 8015d9e:	f008 fc99 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8015da8:	4618      	mov	r0, r3
 8015daa:	f004 fff9 	bl	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8015db4:	4618      	mov	r0, r3
 8015db6:	f007 f825 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	f603 309c 	addw	r0, r3, #2972	; 0xb9c
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	69db      	ldr	r3, [r3, #28]
 8015dc4:	4a16      	ldr	r2, [pc, #88]	; (8015e20 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015dc6:	2102      	movs	r1, #2
 8015dc8:	f008 fc84 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f004 ffe4 	bl	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015dde:	4618      	mov	r0, r3
 8015de0:	f007 f810 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f503 603a 	add.w	r0, r3, #2976	; 0xba0
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	6a1b      	ldr	r3, [r3, #32]
 8015dee:	4a0c      	ldr	r2, [pc, #48]	; (8015e20 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015df0:	2102      	movs	r1, #2
 8015df2:	f008 fc6f 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f004 ffcf 	bl	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f006 fffb 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8015e0e:	bf00      	nop
 8015e10:	3710      	adds	r7, #16
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}
 8015e16:	bf00      	nop
 8015e18:	20000038 	.word	0x20000038
 8015e1c:	447a0000 	.word	0x447a0000
 8015e20:	0802a1e8 	.word	0x0802a1e8

08015e24 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8015e24:	b590      	push	{r4, r7, lr}
 8015e26:	b085      	sub	sp, #20
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	4b0e      	ldr	r3, [pc, #56]	; (8015e70 <_ZN8MainView9updateValEPh+0x4c>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	bfac      	ite	ge
 8015e3e:	2301      	movge	r3, #1
 8015e40:	2300      	movlt	r3, #0
 8015e42:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8015e44:	7afb      	ldrb	r3, [r7, #11]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d016      	beq.n	8015e78 <_ZN8MainView9updateValEPh+0x54>
	{
		background_is_black = false;
 8015e4a:	4b0a      	ldr	r3, [pc, #40]	; (8015e74 <_ZN8MainView9updateValEPh+0x50>)
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015e56:	f7ff fec7 	bl	8015be8 <_ZL20getColorFromRevLimitv>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	4619      	mov	r1, r3
 8015e5e:	4620      	mov	r0, r4
 8015e60:	f7fc fc0a 	bl	8012678 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	3340      	adds	r3, #64	; 0x40
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f006 ffcb 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015e6e:	e01c      	b.n	8015eaa <_ZN8MainView9updateValEPh+0x86>
 8015e70:	20000038 	.word	0x20000038
 8015e74:	20008744 	.word	0x20008744
	}
	else if(!background_is_black){
 8015e78:	4bac      	ldr	r3, [pc, #688]	; (801612c <_ZN8MainView9updateValEPh+0x308>)
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	f083 0301 	eor.w	r3, r3, #1
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d011      	beq.n	8015eaa <_ZN8MainView9updateValEPh+0x86>
		backgroundBox.setColor(getBlackColor());
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015e8c:	f7ff fe9c 	bl	8015bc8 <_ZL13getBlackColorv>
 8015e90:	4603      	mov	r3, r0
 8015e92:	4619      	mov	r1, r3
 8015e94:	4620      	mov	r0, r4
 8015e96:	f7fc fbef 	bl	8012678 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	3340      	adds	r3, #64	; 0x40
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f006 ffb0 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8015ea4:	4ba1      	ldr	r3, [pc, #644]	; (801612c <_ZN8MainView9updateValEPh+0x308>)
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	681a      	ldr	r2, [r3, #0]
 8015eae:	4ba0      	ldr	r3, [pc, #640]	; (8016130 <_ZN8MainView9updateValEPh+0x30c>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d021      	beq.n	8015efa <_ZN8MainView9updateValEPh+0xd6>
		prev_rpm = values->rpm;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	4a9d      	ldr	r2, [pc, #628]	; (8016130 <_ZN8MainView9updateValEPh+0x30c>)
 8015ebc:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	4619      	mov	r1, r3
 8015eca:	4610      	mov	r0, r2
 8015ecc:	f002 fe58 	bl	8018b80 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f006 ff94 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f603 30d6 	addw	r0, r3, #3030	; 0xbd6
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	4a93      	ldr	r2, [pc, #588]	; (8016134 <_ZN8MainView9updateValEPh+0x310>)
 8015ee8:	2105      	movs	r1, #5
 8015eea:	f008 fbf3 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f006 ff85 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->map != prev_map) {
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	689a      	ldr	r2, [r3, #8]
 8015efe:	4b8e      	ldr	r3, [pc, #568]	; (8016138 <_ZN8MainView9updateValEPh+0x314>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	429a      	cmp	r2, r3
 8015f04:	d012      	beq.n	8015f2c <_ZN8MainView9updateValEPh+0x108>
		prev_map = values->map;
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	689b      	ldr	r3, [r3, #8]
 8015f0a:	4a8b      	ldr	r2, [pc, #556]	; (8016138 <_ZN8MainView9updateValEPh+0x314>)
 8015f0c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f603 30ea 	addw	r0, r3, #3050	; 0xbea
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	689b      	ldr	r3, [r3, #8]
 8015f18:	4a86      	ldr	r2, [pc, #536]	; (8016134 <_ZN8MainView9updateValEPh+0x310>)
 8015f1a:	2105      	movs	r1, #5
 8015f1c:	f008 fbda 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8015f26:	4618      	mov	r0, r3
 8015f28:	f006 ff6c 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	685a      	ldr	r2, [r3, #4]
 8015f30:	4b82      	ldr	r3, [pc, #520]	; (801613c <_ZN8MainView9updateValEPh+0x318>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	429a      	cmp	r2, r3
 8015f36:	d012      	beq.n	8015f5e <_ZN8MainView9updateValEPh+0x13a>
		prev_clt = values->clt;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	4a7f      	ldr	r2, [pc, #508]	; (801613c <_ZN8MainView9updateValEPh+0x318>)
 8015f3e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f503 603e 	add.w	r0, r3, #3040	; 0xbe0
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	4a7a      	ldr	r2, [pc, #488]	; (8016134 <_ZN8MainView9updateValEPh+0x310>)
 8015f4c:	2105      	movs	r1, #5
 8015f4e:	f008 fbc1 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f006 ff53 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	ed93 7a03 	vldr	s14, [r3, #12]
 8015f64:	4b76      	ldr	r3, [pc, #472]	; (8016140 <_ZN8MainView9updateValEPh+0x31c>)
 8015f66:	edd3 7a00 	vldr	s15, [r3]
 8015f6a:	eeb4 7a67 	vcmp.f32	s14, s15
 8015f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f72:	d015      	beq.n	8015fa0 <_ZN8MainView9updateValEPh+0x17c>
		prev_lambda = values->lambda;
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	68db      	ldr	r3, [r3, #12]
 8015f78:	4a71      	ldr	r2, [pc, #452]	; (8016140 <_ZN8MainView9updateValEPh+0x31c>)
 8015f7a:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	edd3 7a03 	vldr	s15, [r3, #12]
 8015f88:	eeb0 0a67 	vmov.f32	s0, s15
 8015f8c:	4a6d      	ldr	r2, [pc, #436]	; (8016144 <_ZN8MainView9updateValEPh+0x320>)
 8015f8e:	2105      	movs	r1, #5
 8015f90:	f7ff fd7a 	bl	8015a88 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f006 ff32 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda_trgt != prev_lambda_targ) {
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	ed93 7a04 	vldr	s14, [r3, #16]
 8015fa6:	4b68      	ldr	r3, [pc, #416]	; (8016148 <_ZN8MainView9updateValEPh+0x324>)
 8015fa8:	edd3 7a00 	vldr	s15, [r3]
 8015fac:	eeb4 7a67 	vcmp.f32	s14, s15
 8015fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb4:	d015      	beq.n	8015fe2 <_ZN8MainView9updateValEPh+0x1be>
		prev_lambda_targ = values->lambda_trgt;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	691b      	ldr	r3, [r3, #16]
 8015fba:	4a63      	ldr	r2, [pc, #396]	; (8016148 <_ZN8MainView9updateValEPh+0x324>)
 8015fbc:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f603 307a 	addw	r0, r3, #2938	; 0xb7a
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8015fca:	eeb0 0a67 	vmov.f32	s0, s15
 8015fce:	4a5d      	ldr	r2, [pc, #372]	; (8016144 <_ZN8MainView9updateValEPh+0x320>)
 8015fd0:	2105      	movs	r1, #5
 8015fd2:	f7ff fd59 	bl	8015a88 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TrgtValue.invalidate();
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f006 ff11 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	ed93 7a06 	vldr	s14, [r3, #24]
 8015fe8:	4b58      	ldr	r3, [pc, #352]	; (801614c <_ZN8MainView9updateValEPh+0x328>)
 8015fea:	edd3 7a00 	vldr	s15, [r3]
 8015fee:	eeb4 7a67 	vcmp.f32	s14, s15
 8015ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff6:	d015      	beq.n	8016024 <_ZN8MainView9updateValEPh+0x200>
		prev_oil_press = values->oil_press;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	699b      	ldr	r3, [r3, #24]
 8015ffc:	4a53      	ldr	r2, [pc, #332]	; (801614c <_ZN8MainView9updateValEPh+0x328>)
 8015ffe:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f603 30c2 	addw	r0, r3, #3010	; 0xbc2
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	edd3 7a06 	vldr	s15, [r3, #24]
 801600c:	eeb0 0a67 	vmov.f32	s0, s15
 8016010:	4a4f      	ldr	r2, [pc, #316]	; (8016150 <_ZN8MainView9updateValEPh+0x32c>)
 8016012:	2105      	movs	r1, #5
 8016014:	f7ff fd38 	bl	8015a88 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 801601e:	4618      	mov	r0, r3
 8016020:	f006 fef0 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	69da      	ldr	r2, [r3, #28]
 8016028:	4b4a      	ldr	r3, [pc, #296]	; (8016154 <_ZN8MainView9updateValEPh+0x330>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	429a      	cmp	r2, r3
 801602e:	d012      	beq.n	8016056 <_ZN8MainView9updateValEPh+0x232>
		prev_fuel_press = values->fuel_press;
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	69db      	ldr	r3, [r3, #28]
 8016034:	4a47      	ldr	r2, [pc, #284]	; (8016154 <_ZN8MainView9updateValEPh+0x330>)
 8016036:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",values->fuel_press);
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f603 30fe 	addw	r0, r3, #3070	; 0xbfe
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	69db      	ldr	r3, [r3, #28]
 8016042:	4a3c      	ldr	r2, [pc, #240]	; (8016134 <_ZN8MainView9updateValEPh+0x310>)
 8016044:	2105      	movs	r1, #5
 8016046:	f008 fb45 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelPValue.invalidate();
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8016050:	4618      	mov	r0, r3
 8016052:	f006 fed7 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	695a      	ldr	r2, [r3, #20]
 801605a:	4b3f      	ldr	r3, [pc, #252]	; (8016158 <_ZN8MainView9updateValEPh+0x334>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	429a      	cmp	r2, r3
 8016060:	d012      	beq.n	8016088 <_ZN8MainView9updateValEPh+0x264>
		prev_oil_tmp = values->oil_tmp;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	695b      	ldr	r3, [r3, #20]
 8016066:	4a3c      	ldr	r2, [pc, #240]	; (8016158 <_ZN8MainView9updateValEPh+0x334>)
 8016068:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f603 30b8 	addw	r0, r3, #3000	; 0xbb8
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	695b      	ldr	r3, [r3, #20]
 8016074:	4a2f      	ldr	r2, [pc, #188]	; (8016134 <_ZN8MainView9updateValEPh+0x310>)
 8016076:	2105      	movs	r1, #5
 8016078:	f008 fb2c 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8016082:	4618      	mov	r0, r3
 8016084:	f006 febe 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	6a1a      	ldr	r2, [r3, #32]
 801608c:	4b33      	ldr	r3, [pc, #204]	; (801615c <_ZN8MainView9updateValEPh+0x338>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	429a      	cmp	r2, r3
 8016092:	d012      	beq.n	80160ba <_ZN8MainView9updateValEPh+0x296>
		prev_iat = values->iat;
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	6a1b      	ldr	r3, [r3, #32]
 8016098:	4a30      	ldr	r2, [pc, #192]	; (801615c <_ZN8MainView9updateValEPh+0x338>)
 801609a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f603 30a4 	addw	r0, r3, #2980	; 0xba4
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	6a1b      	ldr	r3, [r3, #32]
 80160a6:	4a23      	ldr	r2, [pc, #140]	; (8016134 <_ZN8MainView9updateValEPh+0x310>)
 80160a8:	2105      	movs	r1, #5
 80160aa:	f008 fb13 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80160b4:	4618      	mov	r0, r3
 80160b6:	f006 fea5 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt != prev_egt) {
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80160be:	4b28      	ldr	r3, [pc, #160]	; (8016160 <_ZN8MainView9updateValEPh+0x33c>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d012      	beq.n	80160ec <_ZN8MainView9updateValEPh+0x2c8>
		prev_egt = values->egt;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ca:	4a25      	ldr	r2, [pc, #148]	; (8016160 <_ZN8MainView9updateValEPh+0x33c>)
 80160cc:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f603 30ae 	addw	r0, r3, #2990	; 0xbae
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160d8:	4a16      	ldr	r2, [pc, #88]	; (8016134 <_ZN8MainView9updateValEPh+0x310>)
 80160da:	2105      	movs	r1, #5
 80160dc:	f008 fafa 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80160e6:	4618      	mov	r0, r3
 80160e8:	f006 fe8c 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt_2 != prev_egt_2) {
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80160f0:	4b1c      	ldr	r3, [pc, #112]	; (8016164 <_ZN8MainView9updateValEPh+0x340>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d012      	beq.n	801611e <_ZN8MainView9updateValEPh+0x2fa>
		prev_egt_2 = values->egt_2;
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160fc:	4a19      	ldr	r2, [pc, #100]	; (8016164 <_ZN8MainView9updateValEPh+0x340>)
 80160fe:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d",values->egt_2);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f603 30f4 	addw	r0, r3, #3060	; 0xbf4
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801610a:	4a0a      	ldr	r2, [pc, #40]	; (8016134 <_ZN8MainView9updateValEPh+0x310>)
 801610c:	2105      	movs	r1, #5
 801610e:	f008 fae1 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8016118:	4618      	mov	r0, r3
 801611a:	f006 fe73 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016122:	4b11      	ldr	r3, [pc, #68]	; (8016168 <_ZN8MainView9updateValEPh+0x344>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	429a      	cmp	r2, r3
 8016128:	d042      	beq.n	80161b0 <_ZN8MainView9updateValEPh+0x38c>
 801612a:	e01f      	b.n	801616c <_ZN8MainView9updateValEPh+0x348>
 801612c:	20008744 	.word	0x20008744
 8016130:	2000003c 	.word	0x2000003c
 8016134:	0802a1e8 	.word	0x0802a1e8
 8016138:	20000040 	.word	0x20000040
 801613c:	20000044 	.word	0x20000044
 8016140:	20000048 	.word	0x20000048
 8016144:	0802a1ec 	.word	0x0802a1ec
 8016148:	2000004c 	.word	0x2000004c
 801614c:	20008728 	.word	0x20008728
 8016150:	0802a1f4 	.word	0x0802a1f4
 8016154:	2000872c 	.word	0x2000872c
 8016158:	20008724 	.word	0x20008724
 801615c:	20008730 	.word	0x20008730
 8016160:	20008734 	.word	0x20008734
 8016164:	20008738 	.word	0x20008738
 8016168:	2000873c 	.word	0x2000873c
		prev_tps = values->tps;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016170:	4a22      	ldr	r2, [pc, #136]	; (80161fc <_ZN8MainView9updateValEPh+0x3d8>)
 8016172:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801617e:	4619      	mov	r1, r3
 8016180:	4610      	mov	r0, r2
 8016182:	f002 fbad 	bl	80188e0 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801618c:	4618      	mov	r0, r3
 801618e:	f006 fe39 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	f603 4008 	addw	r0, r3, #3080	; 0xc08
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801619c:	4a18      	ldr	r2, [pc, #96]	; (8016200 <_ZN8MainView9updateValEPh+0x3dc>)
 801619e:	2105      	movs	r1, #5
 80161a0:	f008 fa98 	bl	801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80161aa:	4618      	mov	r0, r3
 80161ac:	f006 fe2a 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80161b6:	4b13      	ldr	r3, [pc, #76]	; (8016204 <_ZN8MainView9updateValEPh+0x3e0>)
 80161b8:	edd3 7a00 	vldr	s15, [r3]
 80161bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80161c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c4:	d015      	beq.n	80161f2 <_ZN8MainView9updateValEPh+0x3ce>
		prev_batt_v = values->batt_v;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161ca:	4a0e      	ldr	r2, [pc, #56]	; (8016204 <_ZN8MainView9updateValEPh+0x3e0>)
 80161cc:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f603 30cc 	addw	r0, r3, #3020	; 0xbcc
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80161da:	eeb0 0a67 	vmov.f32	s0, s15
 80161de:	4a0a      	ldr	r2, [pc, #40]	; (8016208 <_ZN8MainView9updateValEPh+0x3e4>)
 80161e0:	2105      	movs	r1, #5
 80161e2:	f7ff fc51 	bl	8015a88 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		BatteryVoltage.invalidate();
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80161ec:	4618      	mov	r0, r3
 80161ee:	f006 fe09 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 80161f2:	bf00      	nop
 80161f4:	3714      	adds	r7, #20
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd90      	pop	{r4, r7, pc}
 80161fa:	bf00      	nop
 80161fc:	2000873c 	.word	0x2000873c
 8016200:	0802a1e8 	.word	0x0802a1e8
 8016204:	20008740 	.word	0x20008740
 8016208:	0802a1ec 	.word	0x0802a1ec

0801620c <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2200      	movs	r2, #0
 8016218:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 801621a:	2200      	movs	r2, #0
 801621c:	2134      	movs	r1, #52	; 0x34
 801621e:	2001      	movs	r0, #1
 8016220:	f7f7 f8aa 	bl	800d378 <xQueueGenericCreate>
 8016224:	4603      	mov	r3, r0
 8016226:	4a07      	ldr	r2, [pc, #28]	; (8016244 <_ZN5ModelC1Ev+0x38>)
 8016228:	6013      	str	r3, [r2, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 801622a:	2200      	movs	r2, #0
 801622c:	2128      	movs	r1, #40	; 0x28
 801622e:	2001      	movs	r0, #1
 8016230:	f7f7 f8a2 	bl	800d378 <xQueueGenericCreate>
 8016234:	4603      	mov	r3, r0
 8016236:	4a04      	ldr	r2, [pc, #16]	; (8016248 <_ZN5ModelC1Ev+0x3c>)
 8016238:	6013      	str	r3, [r2, #0]
}
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	4618      	mov	r0, r3
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}
 8016244:	200087a4 	.word	0x200087a4
 8016248:	200087a8 	.word	0x200087a8

0801624c <_ZN5Model4tickEv>:

void Model::tick()
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8016254:	4b1a      	ldr	r3, [pc, #104]	; (80162c0 <_ZN5Model4tickEv+0x74>)
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	2200      	movs	r2, #0
 801625a:	491a      	ldr	r1, [pc, #104]	; (80162c4 <_ZN5Model4tickEv+0x78>)
 801625c:	4618      	mov	r0, r3
 801625e:	f7f7 fb29 	bl	800d8b4 <xQueueReceive>
 8016262:	4603      	mov	r3, r0
 8016264:	2b01      	cmp	r3, #1
 8016266:	bf0c      	ite	eq
 8016268:	2301      	moveq	r3, #1
 801626a:	2300      	movne	r3, #0
 801626c:	b2db      	uxtb	r3, r3
 801626e:	2b00      	cmp	r3, #0
 8016270:	d009      	beq.n	8016286 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681a      	ldr	r2, [r3, #0]
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	3308      	adds	r3, #8
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	4910      	ldr	r1, [pc, #64]	; (80162c4 <_ZN5Model4tickEv+0x78>)
 8016282:	4610      	mov	r0, r2
 8016284:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8016286:	4b10      	ldr	r3, [pc, #64]	; (80162c8 <_ZN5Model4tickEv+0x7c>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	2200      	movs	r2, #0
 801628c:	490f      	ldr	r1, [pc, #60]	; (80162cc <_ZN5Model4tickEv+0x80>)
 801628e:	4618      	mov	r0, r3
 8016290:	f7f7 fb10 	bl	800d8b4 <xQueueReceive>
 8016294:	4603      	mov	r3, r0
 8016296:	2b01      	cmp	r3, #1
 8016298:	bf0c      	ite	eq
 801629a:	2301      	moveq	r3, #1
 801629c:	2300      	movne	r3, #0
 801629e:	b2db      	uxtb	r3, r3
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d009      	beq.n	80162b8 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681a      	ldr	r2, [r3, #0]
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	330c      	adds	r3, #12
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4906      	ldr	r1, [pc, #24]	; (80162cc <_ZN5Model4tickEv+0x80>)
 80162b4:	4610      	mov	r0, r2
 80162b6:	4798      	blx	r3
	}
}
 80162b8:	bf00      	nop
 80162ba:	3708      	adds	r7, #8
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}
 80162c0:	200087a4 	.word	0x200087a4
 80162c4:	20008748 	.word	0x20008748
 80162c8:	200087a8 	.word	0x200087a8
 80162cc:	2000877c 	.word	0x2000877c

080162d0 <_ZN21SecondScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~SecondScreenPresenter() {};
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
 80162d8:	4a09      	ldr	r2, [pc, #36]	; (8016300 <_ZN21SecondScreenPresenterD1Ev+0x30>)
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	601a      	str	r2, [r3, #0]
 80162de:	4a09      	ldr	r2, [pc, #36]	; (8016304 <_ZN21SecondScreenPresenterD1Ev+0x34>)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	605a      	str	r2, [r3, #4]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	3304      	adds	r3, #4
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7ff fb09 	bl	8015900 <_ZN13ModelListenerD1Ev>
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7ff fac1 	bl	8015878 <_ZN8touchgfx9PresenterD1Ev>
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	4618      	mov	r0, r3
 80162fa:	3708      	adds	r7, #8
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	0802ac14 	.word	0x0802ac14
 8016304:	0802ac2c 	.word	0x0802ac2c

08016308 <_ZThn4_N21SecondScreenPresenterD1Ev>:
 8016308:	f1a0 0004 	sub.w	r0, r0, #4
 801630c:	e7e0      	b.n	80162d0 <_ZN21SecondScreenPresenterD1Ev>
 801630e:	bf00      	nop

08016310 <_ZN21SecondScreenPresenterD0Ev>:
 8016310:	b580      	push	{r7, lr}
 8016312:	b082      	sub	sp, #8
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	6878      	ldr	r0, [r7, #4]
 801631a:	f7ff ffd9 	bl	80162d0 <_ZN21SecondScreenPresenterD1Ev>
 801631e:	2110      	movs	r1, #16
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f012 f941 	bl	80285a8 <_ZdlPvj>
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	4618      	mov	r0, r3
 801632a:	3708      	adds	r7, #8
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <_ZThn4_N21SecondScreenPresenterD0Ev>:
 8016330:	f1a0 0004 	sub.w	r0, r0, #4
 8016334:	e7ec      	b.n	8016310 <_ZN21SecondScreenPresenterD0Ev>
	...

08016338 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

SecondScreenPresenter::SecondScreenPresenter(SecondScreenView& v)
 8016338:	b580      	push	{r7, lr}
 801633a:	b082      	sub	sp, #8
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]
    : view(v)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	4618      	mov	r0, r3
 8016346:	f7ff fab7 	bl	80158b8 <_ZN8touchgfx9PresenterC1Ev>
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	3304      	adds	r3, #4
 801634e:	4618      	mov	r0, r3
 8016350:	f7ff fac2 	bl	80158d8 <_ZN13ModelListenerC1Ev>
 8016354:	4a06      	ldr	r2, [pc, #24]	; (8016370 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x38>)
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	601a      	str	r2, [r3, #0]
 801635a:	4a06      	ldr	r2, [pc, #24]	; (8016374 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x3c>)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	605a      	str	r2, [r3, #4]
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	683a      	ldr	r2, [r7, #0]
 8016364:	60da      	str	r2, [r3, #12]
{

}
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	4618      	mov	r0, r3
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}
 8016370:	0802ac14 	.word	0x0802ac14
 8016374:	0802ac2c 	.word	0x0802ac2c

08016378 <_ZN21SecondScreenPresenter8activateEv>:

void SecondScreenPresenter::activate()
{
 8016378:	b480      	push	{r7}
 801637a:	b083      	sub	sp, #12
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]

}
 8016380:	bf00      	nop
 8016382:	370c      	adds	r7, #12
 8016384:	46bd      	mov	sp, r7
 8016386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638a:	4770      	bx	lr

0801638c <_ZN21SecondScreenPresenter10deactivateEv>:

void SecondScreenPresenter::deactivate()
{
 801638c:	b480      	push	{r7}
 801638e:	b083      	sub	sp, #12
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]

}
 8016394:	bf00      	nop
 8016396:	370c      	adds	r7, #12
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr

080163a0 <_ZN16SecondScreenViewD1Ev>:

class SecondScreenView : public SecondScreenViewBase
{
public:
    SecondScreenView();
    virtual ~SecondScreenView() {}
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	4a05      	ldr	r2, [pc, #20]	; (80163c0 <_ZN16SecondScreenViewD1Ev+0x20>)
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	601a      	str	r2, [r3, #0]
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	4618      	mov	r0, r3
 80163b2:	f7fe fe7b 	bl	80150ac <_ZN20SecondScreenViewBaseD1Ev>
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	4618      	mov	r0, r3
 80163ba:	3708      	adds	r7, #8
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}
 80163c0:	0802ac44 	.word	0x0802ac44

080163c4 <_ZN16SecondScreenViewD0Ev>:
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b082      	sub	sp, #8
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	f7ff ffe7 	bl	80163a0 <_ZN16SecondScreenViewD1Ev>
 80163d2:	21f8      	movs	r1, #248	; 0xf8
 80163d4:	6878      	ldr	r0, [r7, #4]
 80163d6:	f012 f8e7 	bl	80285a8 <_ZdlPvj>
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	4618      	mov	r0, r3
 80163de:	3708      	adds	r7, #8
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}

080163e4 <_ZN16SecondScreenViewC1Ev>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>

SecondScreenView::SecondScreenView()
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7fe fe9a 	bl	8015128 <_ZN20SecondScreenViewBaseC1Ev>
 80163f4:	4a03      	ldr	r2, [pc, #12]	; (8016404 <_ZN16SecondScreenViewC1Ev+0x20>)
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	601a      	str	r2, [r3, #0]
{

}
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	4618      	mov	r0, r3
 80163fe:	3708      	adds	r7, #8
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}
 8016404:	0802ac44 	.word	0x0802ac44

08016408 <_ZN16SecondScreenView11setupScreenEv>:

void SecondScreenView::setupScreen()
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b082      	sub	sp, #8
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
    SecondScreenViewBase::setupScreen();
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	4618      	mov	r0, r3
 8016414:	f7fe ff2a 	bl	801526c <_ZN20SecondScreenViewBase11setupScreenEv>
}
 8016418:	bf00      	nop
 801641a:	3708      	adds	r7, #8
 801641c:	46bd      	mov	sp, r7
 801641e:	bd80      	pop	{r7, pc}

08016420 <_ZN16SecondScreenView14tearDownScreenEv>:

void SecondScreenView::tearDownScreen()
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
    SecondScreenViewBase::tearDownScreen();
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	4618      	mov	r0, r3
 801642c:	f7fc f85a 	bl	80124e4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8016430:	bf00      	nop
 8016432:	3708      	adds	r7, #8
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}

08016438 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8016438:	b480      	push	{r7}
 801643a:	b083      	sub	sp, #12
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
    {
 8016440:	4a04      	ldr	r2, [pc, #16]	; (8016454 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	601a      	str	r2, [r3, #0]
    }
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	4618      	mov	r0, r3
 801644a:	370c      	adds	r7, #12
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr
 8016454:	0802ac90 	.word	0x0802ac90

08016458 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
    }
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f7ff ffe9 	bl	8016438 <_ZN8touchgfx15TouchControllerD1Ev>
 8016466:	2104      	movs	r1, #4
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f012 f89d 	bl	80285a8 <_ZdlPvj>
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	4618      	mov	r0, r3
 8016472:	3708      	adds	r7, #8
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}

08016478 <_ZN20STM32TouchController4initEv>:

}


void STM32TouchController::init()
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b082      	sub	sp, #8
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	 BSP_TS_Init(420, 272);
 8016480:	f44f 7188 	mov.w	r1, #272	; 0x110
 8016484:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8016488:	f7f9 fbfa 	bl	800fc80 <BSP_TS_Init>
}
 801648c:	bf00      	nop
 801648e:	3708      	adds	r7, #8
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b090      	sub	sp, #64	; 0x40
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	TS_StateTypeDef state = { 0 };
 80164a0:	f107 0314 	add.w	r3, r7, #20
 80164a4:	222c      	movs	r2, #44	; 0x2c
 80164a6:	2100      	movs	r1, #0
 80164a8:	4618      	mov	r0, r3
 80164aa:	f012 f937 	bl	802871c <memset>
	    BSP_TS_GetState(&state);
 80164ae:	f107 0314 	add.w	r3, r7, #20
 80164b2:	4618      	mov	r0, r3
 80164b4:	f7f9 fc24 	bl	800fd00 <BSP_TS_GetState>
	    if (state.touchDetected)
 80164b8:	7d3b      	ldrb	r3, [r7, #20]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d009      	beq.n	80164d2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
	    {
	        x = state.touchX[0];
 80164be:	8afb      	ldrh	r3, [r7, #22]
 80164c0:	461a      	mov	r2, r3
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	601a      	str	r2, [r3, #0]
	        y = state.touchY[0];
 80164c6:	8c3b      	ldrh	r3, [r7, #32]
 80164c8:	461a      	mov	r2, r3
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	601a      	str	r2, [r3, #0]

	        return true;
 80164ce:	2301      	movs	r3, #1
 80164d0:	e000      	b.n	80164d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    }

    return false;
 80164d2:	2300      	movs	r3, #0
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	3740      	adds	r7, #64	; 0x40
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}

080164dc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80164dc:	b580      	push	{r7, lr}
 80164de:	b082      	sub	sp, #8
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
 80164e4:	4a05      	ldr	r2, [pc, #20]	; (80164fc <_ZN20STM32TouchControllerD1Ev+0x20>)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	601a      	str	r2, [r3, #0]
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7ff ffa3 	bl	8016438 <_ZN8touchgfx15TouchControllerD1Ev>
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	4618      	mov	r0, r3
 80164f6:	3708      	adds	r7, #8
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	0802ac78 	.word	0x0802ac78

08016500 <_ZN20STM32TouchControllerD0Ev>:
 8016500:	b580      	push	{r7, lr}
 8016502:	b082      	sub	sp, #8
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f7ff ffe7 	bl	80164dc <_ZN20STM32TouchControllerD1Ev>
 801650e:	2104      	movs	r1, #4
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f012 f849 	bl	80285a8 <_ZdlPvj>
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	4618      	mov	r0, r3
 801651a:	3708      	adds	r7, #8
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}

08016520 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8016520:	b480      	push	{r7}
 8016522:	b083      	sub	sp, #12
 8016524:	af00      	add	r7, sp, #0
 8016526:	4603      	mov	r3, r0
 8016528:	71fb      	strb	r3, [r7, #7]

}
 801652a:	bf00      	nop
 801652c:	370c      	adds	r7, #12
 801652e:	46bd      	mov	sp, r7
 8016530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016534:	4770      	bx	lr

08016536 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8016536:	b480      	push	{r7}
 8016538:	b083      	sub	sp, #12
 801653a:	af00      	add	r7, sp, #0
 801653c:	4603      	mov	r3, r0
 801653e:	71fb      	strb	r3, [r7, #7]

}
 8016540:	bf00      	nop
 8016542:	370c      	adds	r7, #12
 8016544:	46bd      	mov	sp, r7
 8016546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654a:	4770      	bx	lr

0801654c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801654c:	b480      	push	{r7}
 801654e:	b083      	sub	sp, #12
 8016550:	af00      	add	r7, sp, #0
 8016552:	4603      	mov	r3, r0
 8016554:	71fb      	strb	r3, [r7, #7]

}
 8016556:	bf00      	nop
 8016558:	370c      	adds	r7, #12
 801655a:	46bd      	mov	sp, r7
 801655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016560:	4770      	bx	lr
	...

08016564 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8016564:	b480      	push	{r7}
 8016566:	b083      	sub	sp, #12
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
    {
 801656c:	4a04      	ldr	r2, [pc, #16]	; (8016580 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	601a      	str	r2, [r3, #0]
    }
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	4618      	mov	r0, r3
 8016576:	370c      	adds	r7, #12
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr
 8016580:	0802b970 	.word	0x0802b970

08016584 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8016584:	b580      	push	{r7, lr}
 8016586:	b082      	sub	sp, #8
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
    }
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f7ff ffe9 	bl	8016564 <_ZN8touchgfx3HALD1Ev>
 8016592:	2178      	movs	r1, #120	; 0x78
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f012 f807 	bl	80285a8 <_ZdlPvj>
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	4618      	mov	r0, r3
 801659e:	3708      	adds	r7, #8
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}

080165a4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80165a4:	b480      	push	{r7}
 80165a6:	b083      	sub	sp, #12
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
 80165ac:	460b      	mov	r3, r1
 80165ae:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	78fa      	ldrb	r2, [r7, #3]
 80165b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2201      	movs	r2, #1
 80165bc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80165c0:	bf00      	nop
 80165c2:	370c      	adds	r7, #12
 80165c4:	46bd      	mov	sp, r7
 80165c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ca:	4770      	bx	lr

080165cc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b082      	sub	sp, #8
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	685a      	ldr	r2, [r3, #4]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	4610      	mov	r0, r2
 80165e2:	4798      	blx	r3
 80165e4:	4603      	mov	r3, r0
    }
 80165e6:	4618      	mov	r0, r3
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}

080165ee <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 80165ee:	b580      	push	{r7, lr}
 80165f0:	b082      	sub	sp, #8
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80165f6:	6878      	ldr	r0, [r7, #4]
 80165f8:	f003 fbcc 	bl	8019d94 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	3390      	adds	r3, #144	; 0x90
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	4798      	blx	r3
    }
 8016608:	bf00      	nop
 801660a:	3708      	adds	r7, #8
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}

08016610 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
    {
        return false;
 801661a:	2300      	movs	r3, #0
    }
 801661c:	4618      	mov	r0, r3
 801661e:	370c      	adds	r7, #12
 8016620:	46bd      	mov	sp, r7
 8016622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016626:	4770      	bx	lr

08016628 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8016628:	b590      	push	{r4, r7, lr}
 801662a:	b08b      	sub	sp, #44	; 0x2c
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	4611      	mov	r1, r2
 8016634:	461a      	mov	r2, r3
 8016636:	460b      	mov	r3, r1
 8016638:	80fb      	strh	r3, [r7, #6]
 801663a:	4613      	mov	r3, r2
 801663c:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 801663e:	f7fa fbc7 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8016642:	4603      	mov	r3, r0
 8016644:	681a      	ldr	r2, [r3, #0]
 8016646:	3228      	adds	r2, #40	; 0x28
 8016648:	6812      	ldr	r2, [r2, #0]
 801664a:	4618      	mov	r0, r3
 801664c:	4790      	blx	r2
 801664e:	4603      	mov	r3, r0
 8016650:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8016652:	8b7b      	ldrh	r3, [r7, #26]
 8016654:	4a3d      	ldr	r2, [pc, #244]	; (801674c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8016656:	8812      	ldrh	r2, [r2, #0]
 8016658:	fb02 f303 	mul.w	r3, r2, r3
 801665c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8016662:	2300      	movs	r3, #0
 8016664:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8016666:	2300      	movs	r3, #0
 8016668:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 801666a:	797b      	ldrb	r3, [r7, #5]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d005      	beq.n	801667c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8016670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016672:	697b      	ldr	r3, [r7, #20]
 8016674:	4413      	add	r3, r2
 8016676:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8016678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801667a:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 801667c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016680:	2b00      	cmp	r3, #0
 8016682:	d005      	beq.n	8016690 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8016684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	4413      	add	r3, r2
 801668a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 801668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801668e:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8016690:	88fb      	ldrh	r3, [r7, #6]
 8016692:	3b01      	subs	r3, #1
 8016694:	2b1f      	cmp	r3, #31
 8016696:	d84d      	bhi.n	8016734 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8016698:	a201      	add	r2, pc, #4	; (adr r2, 80166a0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 801669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801669e:	bf00      	nop
 80166a0:	08016721 	.word	0x08016721
 80166a4:	08016721 	.word	0x08016721
 80166a8:	08016735 	.word	0x08016735
 80166ac:	08016721 	.word	0x08016721
 80166b0:	08016735 	.word	0x08016735
 80166b4:	08016735 	.word	0x08016735
 80166b8:	08016735 	.word	0x08016735
 80166bc:	08016721 	.word	0x08016721
 80166c0:	08016735 	.word	0x08016735
 80166c4:	08016735 	.word	0x08016735
 80166c8:	08016735 	.word	0x08016735
 80166cc:	08016735 	.word	0x08016735
 80166d0:	08016735 	.word	0x08016735
 80166d4:	08016735 	.word	0x08016735
 80166d8:	08016735 	.word	0x08016735
 80166dc:	08016721 	.word	0x08016721
 80166e0:	08016735 	.word	0x08016735
 80166e4:	08016735 	.word	0x08016735
 80166e8:	08016735 	.word	0x08016735
 80166ec:	08016735 	.word	0x08016735
 80166f0:	08016735 	.word	0x08016735
 80166f4:	08016735 	.word	0x08016735
 80166f8:	08016735 	.word	0x08016735
 80166fc:	08016721 	.word	0x08016721
 8016700:	08016735 	.word	0x08016735
 8016704:	08016735 	.word	0x08016735
 8016708:	08016735 	.word	0x08016735
 801670c:	08016735 	.word	0x08016735
 8016710:	08016735 	.word	0x08016735
 8016714:	08016735 	.word	0x08016735
 8016718:	08016735 	.word	0x08016735
 801671c:	08016721 	.word	0x08016721
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	3374      	adds	r3, #116	; 0x74
 8016726:	681c      	ldr	r4, [r3, #0]
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	6a3a      	ldr	r2, [r7, #32]
 801672c:	68b9      	ldr	r1, [r7, #8]
 801672e:	68f8      	ldr	r0, [r7, #12]
 8016730:	47a0      	blx	r4
            break;
 8016732:	e006      	b.n	8016742 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8016734:	4b06      	ldr	r3, [pc, #24]	; (8016750 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8016736:	4a07      	ldr	r2, [pc, #28]	; (8016754 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8016738:	f240 3125 	movw	r1, #805	; 0x325
 801673c:	4806      	ldr	r0, [pc, #24]	; (8016758 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 801673e:	f011 ff61 	bl	8028604 <__assert_func>
            break;
        }
    }
 8016742:	bf00      	nop
 8016744:	372c      	adds	r7, #44	; 0x2c
 8016746:	46bd      	mov	sp, r7
 8016748:	bd90      	pop	{r4, r7, pc}
 801674a:	bf00      	nop
 801674c:	2000beea 	.word	0x2000beea
 8016750:	0802a1fc 	.word	0x0802a1fc
 8016754:	0802a21c 	.word	0x0802a21c
 8016758:	0802a270 	.word	0x0802a270

0801675c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af00      	add	r7, sp, #0
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	607a      	str	r2, [r7, #4]
 8016768:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d106      	bne.n	801677e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8016770:	4b11      	ldr	r3, [pc, #68]	; (80167b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8016772:	4a12      	ldr	r2, [pc, #72]	; (80167bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8016774:	f240 3137 	movw	r1, #823	; 0x337
 8016778:	4811      	ldr	r0, [pc, #68]	; (80167c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801677a:	f011 ff43 	bl	8028604 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	68ba      	ldr	r2, [r7, #8]
 8016782:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	687a      	ldr	r2, [r7, #4]
 8016788:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	683a      	ldr	r2, [r7, #0]
 801678e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	2b00      	cmp	r3, #0
 8016794:	bf14      	ite	ne
 8016796:	2301      	movne	r3, #1
 8016798:	2300      	moveq	r3, #0
 801679a:	b2da      	uxtb	r2, r3
 801679c:	4b09      	ldr	r3, [pc, #36]	; (80167c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801679e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	bf14      	ite	ne
 80167a6:	2301      	movne	r3, #1
 80167a8:	2300      	moveq	r3, #0
 80167aa:	b2da      	uxtb	r2, r3
 80167ac:	4b06      	ldr	r3, [pc, #24]	; (80167c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80167ae:	701a      	strb	r2, [r3, #0]
    }
 80167b0:	bf00      	nop
 80167b2:	3710      	adds	r7, #16
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}
 80167b8:	0802a2b4 	.word	0x0802a2b4
 80167bc:	0802a2ec 	.word	0x0802a2ec
 80167c0:	0802a270 	.word	0x0802a270
 80167c4:	2000beec 	.word	0x2000beec
 80167c8:	2000beed 	.word	0x2000beed

080167cc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b082      	sub	sp, #8
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	460b      	mov	r3, r1
 80167d6:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d004      	beq.n	80167ea <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167e4:	887a      	ldrh	r2, [r7, #2]
 80167e6:	4610      	mov	r0, r2
 80167e8:	4798      	blx	r3
        }
    }
 80167ea:	bf00      	nop
 80167ec:	3708      	adds	r7, #8
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}

080167f2 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80167f2:	b580      	push	{r7, lr}
 80167f4:	b082      	sub	sp, #8
 80167f6:	af00      	add	r7, sp, #0
 80167f8:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	685a      	ldr	r2, [r3, #4]
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	685b      	ldr	r3, [r3, #4]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	3318      	adds	r3, #24
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4610      	mov	r0, r2
 801680a:	4798      	blx	r3
 801680c:	4603      	mov	r3, r0
    }
 801680e:	4618      	mov	r0, r3
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
	...

08016818 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8016818:	b480      	push	{r7}
 801681a:	b083      	sub	sp, #12
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801682c:	429a      	cmp	r2, r3
 801682e:	d017      	beq.n	8016860 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016830:	4b1a      	ldr	r3, [pc, #104]	; (801689c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016832:	781b      	ldrb	r3, [r3, #0]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d12a      	bne.n	801688e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016838:	4b19      	ldr	r3, [pc, #100]	; (80168a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801683a:	881a      	ldrh	r2, [r3, #0]
 801683c:	4b19      	ldr	r3, [pc, #100]	; (80168a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801683e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016840:	4b19      	ldr	r3, [pc, #100]	; (80168a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016842:	881a      	ldrh	r2, [r3, #0]
 8016844:	4b19      	ldr	r3, [pc, #100]	; (80168ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016846:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8016848:	4b16      	ldr	r3, [pc, #88]	; (80168a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801684a:	881a      	ldrh	r2, [r3, #0]
 801684c:	4b16      	ldr	r3, [pc, #88]	; (80168a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801684e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8016850:	4b16      	ldr	r3, [pc, #88]	; (80168ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016852:	881a      	ldrh	r2, [r3, #0]
 8016854:	4b12      	ldr	r3, [pc, #72]	; (80168a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016856:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8016858:	4b10      	ldr	r3, [pc, #64]	; (801689c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801685a:	2201      	movs	r2, #1
 801685c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801685e:	e016      	b.n	801688e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8016860:	4b0e      	ldr	r3, [pc, #56]	; (801689c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016862:	781b      	ldrb	r3, [r3, #0]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d012      	beq.n	801688e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8016868:	4b0f      	ldr	r3, [pc, #60]	; (80168a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801686a:	881a      	ldrh	r2, [r3, #0]
 801686c:	4b0d      	ldr	r3, [pc, #52]	; (80168a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801686e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8016870:	4b0b      	ldr	r3, [pc, #44]	; (80168a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016872:	881a      	ldrh	r2, [r3, #0]
 8016874:	4b0d      	ldr	r3, [pc, #52]	; (80168ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016876:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8016878:	4b0c      	ldr	r3, [pc, #48]	; (80168ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801687a:	881a      	ldrh	r2, [r3, #0]
 801687c:	4b0a      	ldr	r3, [pc, #40]	; (80168a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801687e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8016880:	4b08      	ldr	r3, [pc, #32]	; (80168a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016882:	881a      	ldrh	r2, [r3, #0]
 8016884:	4b06      	ldr	r3, [pc, #24]	; (80168a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016886:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8016888:	4b04      	ldr	r3, [pc, #16]	; (801689c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801688a:	2200      	movs	r2, #0
 801688c:	701a      	strb	r2, [r3, #0]
    }
 801688e:	bf00      	nop
 8016890:	370c      	adds	r7, #12
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr
 801689a:	bf00      	nop
 801689c:	2000bee6 	.word	0x2000bee6
 80168a0:	2000bee2 	.word	0x2000bee2
 80168a4:	2000bee8 	.word	0x2000bee8
 80168a8:	2000bee4 	.word	0x2000bee4
 80168ac:	2000beea 	.word	0x2000beea

080168b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	4618      	mov	r0, r3
 80168bc:	f002 fcec 	bl	8019298 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80168c0:	bf00      	nop
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	4a05      	ldr	r2, [pc, #20]	; (80168e8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	601a      	str	r2, [r3, #0]
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	4618      	mov	r0, r3
 80168da:	f7ff fe43 	bl	8016564 <_ZN8touchgfx3HALD1Ev>
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	4618      	mov	r0, r3
 80168e2:	3708      	adds	r7, #8
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	0802aea4 	.word	0x0802aea4

080168ec <_ZN20TouchGFXGeneratedHALD0Ev>:
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f7ff ffe7 	bl	80168c8 <_ZN20TouchGFXGeneratedHALD1Ev>
 80168fa:	2178      	movs	r1, #120	; 0x78
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f011 fe53 	bl	80285a8 <_ZdlPvj>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	4618      	mov	r0, r3
 8016906:	3708      	adds	r7, #8
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}

0801690c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	4618      	mov	r0, r3
 8016918:	f7ff ffca 	bl	80168b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801691c:	bf00      	nop
 801691e:	3708      	adds	r7, #8
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}

08016924 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	4618      	mov	r0, r3
 8016930:	f001 fb18 	bl	8017f64 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8016934:	bf00      	nop
 8016936:	3708      	adds	r7, #8
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}

0801693c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	4618      	mov	r0, r3
 8016948:	f001 fb98 	bl	801807c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 801694c:	4603      	mov	r3, r0
}
 801694e:	4618      	mov	r0, r3
 8016950:	3708      	adds	r7, #8
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}

08016956 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8016956:	b580      	push	{r7, lr}
 8016958:	b082      	sub	sp, #8
 801695a:	af00      	add	r7, sp, #0
 801695c:	6078      	str	r0, [r7, #4]
 801695e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6839      	ldr	r1, [r7, #0]
 8016964:	4618      	mov	r0, r3
 8016966:	f001 fb97 	bl	8018098 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801696a:	bf00      	nop
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016972:	b580      	push	{r7, lr}
 8016974:	b082      	sub	sp, #8
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
 801697a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	6839      	ldr	r1, [r7, #0]
 8016980:	4618      	mov	r0, r3
 8016982:	f001 fb9f 	bl	80180c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8016986:	bf00      	nop
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}

0801698e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801698e:	b580      	push	{r7, lr}
 8016990:	b082      	sub	sp, #8
 8016992:	af00      	add	r7, sp, #0
 8016994:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	4618      	mov	r0, r3
 801699a:	f001 fb15 	bl	8017fc8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801699e:	bf00      	nop
 80169a0:	3708      	adds	r7, #8
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80169a6:	b580      	push	{r7, lr}
 80169a8:	b082      	sub	sp, #8
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	4618      	mov	r0, r3
 80169b2:	f001 fb19 	bl	8017fe8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80169b6:	bf00      	nop
 80169b8:	3708      	adds	r7, #8
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}

080169be <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80169be:	b580      	push	{r7, lr}
 80169c0:	b082      	sub	sp, #8
 80169c2:	af00      	add	r7, sp, #0
 80169c4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	4618      	mov	r0, r3
 80169ca:	f001 fb1b 	bl	8018004 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80169ce:	bf00      	nop
 80169d0:	3708      	adds	r7, #8
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}

080169d6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80169d6:	b580      	push	{r7, lr}
 80169d8:	b082      	sub	sp, #8
 80169da:	af00      	add	r7, sp, #0
 80169dc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	4618      	mov	r0, r3
 80169e2:	f001 fb1d 	bl	8018020 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80169e6:	bf00      	nop
 80169e8:	3708      	adds	r7, #8
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}
	...

080169f0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b082      	sub	sp, #8
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
 80169f8:	4a05      	ldr	r2, [pc, #20]	; (8016a10 <_ZN11TouchGFXHALD1Ev+0x20>)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	601a      	str	r2, [r3, #0]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7ff ff61 	bl	80168c8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3708      	adds	r7, #8
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	0802aca8 	.word	0x0802aca8

08016a14 <_ZN11TouchGFXHALD0Ev>:
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b082      	sub	sp, #8
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f7ff ffe7 	bl	80169f0 <_ZN11TouchGFXHALD1Ev>
 8016a22:	2178      	movs	r1, #120	; 0x78
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f011 fdbf 	bl	80285a8 <_ZdlPvj>
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}

08016a34 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8016a38:	2203      	movs	r2, #3
 8016a3a:	2100      	movs	r1, #0
 8016a3c:	2001      	movs	r0, #1
 8016a3e:	f7f6 fc9b 	bl	800d378 <xQueueGenericCreate>
 8016a42:	4603      	mov	r3, r0
 8016a44:	4a0b      	ldr	r2, [pc, #44]	; (8016a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8016a46:	6013      	str	r3, [r2, #0]
 8016a48:	4b0a      	ldr	r3, [pc, #40]	; (8016a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d006      	beq.n	8016a5e <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8016a50:	4b08      	ldr	r3, [pc, #32]	; (8016a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8016a52:	6818      	ldr	r0, [r3, #0]
 8016a54:	2300      	movs	r3, #0
 8016a56:	2200      	movs	r2, #0
 8016a58:	2100      	movs	r1, #0
 8016a5a:	f7f6 fcef 	bl	800d43c <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8016a5e:	2200      	movs	r2, #0
 8016a60:	2101      	movs	r1, #1
 8016a62:	2001      	movs	r0, #1
 8016a64:	f7f6 fc88 	bl	800d378 <xQueueGenericCreate>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	4a03      	ldr	r2, [pc, #12]	; (8016a78 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8016a6c:	6013      	str	r3, [r2, #0]
}
 8016a6e:	bf00      	nop
 8016a70:	bd80      	pop	{r7, pc}
 8016a72:	bf00      	nop
 8016a74:	200087ac 	.word	0x200087ac
 8016a78:	200087b0 	.word	0x200087b0

08016a7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8016a80:	4b04      	ldr	r3, [pc, #16]	; (8016a94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	f04f 31ff 	mov.w	r1, #4294967295
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f7f6 fff9 	bl	800da80 <xQueueSemaphoreTake>
}
 8016a8e:	bf00      	nop
 8016a90:	bd80      	pop	{r7, pc}
 8016a92:	bf00      	nop
 8016a94:	200087ac 	.word	0x200087ac

08016a98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8016a9c:	4b04      	ldr	r3, [pc, #16]	; (8016ab0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8016a9e:	6818      	ldr	r0, [r3, #0]
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	2100      	movs	r1, #0
 8016aa6:	f7f6 fcc9 	bl	800d43c <xQueueGenericSend>
}
 8016aaa:	bf00      	nop
 8016aac:	bd80      	pop	{r7, pc}
 8016aae:	bf00      	nop
 8016ab0:	200087ac 	.word	0x200087ac

08016ab4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8016ab8:	4b03      	ldr	r3, [pc, #12]	; (8016ac8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	2100      	movs	r1, #0
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f7f6 ffde 	bl	800da80 <xQueueSemaphoreTake>
}
 8016ac4:	bf00      	nop
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	200087ac 	.word	0x200087ac

08016acc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b082      	sub	sp, #8
 8016ad0:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8016ad6:	4b0b      	ldr	r3, [pc, #44]	; (8016b04 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	1d3a      	adds	r2, r7, #4
 8016adc:	4611      	mov	r1, r2
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7f6 fe52 	bl	800d788 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d007      	beq.n	8016afa <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8016aea:	4b07      	ldr	r3, [pc, #28]	; (8016b08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8016aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016af0:	601a      	str	r2, [r3, #0]
 8016af2:	f3bf 8f4f 	dsb	sy
 8016af6:	f3bf 8f6f 	isb	sy
}
 8016afa:	bf00      	nop
 8016afc:	3708      	adds	r7, #8
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}
 8016b02:	bf00      	nop
 8016b04:	200087ac 	.word	0x200087ac
 8016b08:	e000ed04 	.word	0xe000ed04

08016b0c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b082      	sub	sp, #8
 8016b10:	af00      	add	r7, sp, #0
    if (vsync_q)
 8016b12:	4b0e      	ldr	r3, [pc, #56]	; (8016b4c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d013      	beq.n	8016b42 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8016b1e:	4b0b      	ldr	r3, [pc, #44]	; (8016b4c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8016b20:	6818      	ldr	r0, [r3, #0]
 8016b22:	1d3a      	adds	r2, r7, #4
 8016b24:	2300      	movs	r3, #0
 8016b26:	490a      	ldr	r1, [pc, #40]	; (8016b50 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8016b28:	f7f6 fd8e 	bl	800d648 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d007      	beq.n	8016b42 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8016b32:	4b08      	ldr	r3, [pc, #32]	; (8016b54 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8016b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b38:	601a      	str	r2, [r3, #0]
 8016b3a:	f3bf 8f4f 	dsb	sy
 8016b3e:	f3bf 8f6f 	isb	sy
    }
}
 8016b42:	bf00      	nop
 8016b44:	3708      	adds	r7, #8
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}
 8016b4a:	bf00      	nop
 8016b4c:	200087b0 	.word	0x200087b0
 8016b50:	20000050 	.word	0x20000050
 8016b54:	e000ed04 	.word	0xe000ed04

08016b58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8016b5c:	4b08      	ldr	r3, [pc, #32]	; (8016b80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	2200      	movs	r2, #0
 8016b62:	4908      	ldr	r1, [pc, #32]	; (8016b84 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016b64:	4618      	mov	r0, r3
 8016b66:	f7f6 fea5 	bl	800d8b4 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8016b6a:	4b05      	ldr	r3, [pc, #20]	; (8016b80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8016b72:	4904      	ldr	r1, [pc, #16]	; (8016b84 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7f6 fe9d 	bl	800d8b4 <xQueueReceive>
}
 8016b7a:	bf00      	nop
 8016b7c:	bd80      	pop	{r7, pc}
 8016b7e:	bf00      	nop
 8016b80:	200087b0 	.word	0x200087b0
 8016b84:	20000050 	.word	0x20000050

08016b88 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	4603      	mov	r3, r0
 8016b90:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8016b92:	88fb      	ldrh	r3, [r7, #6]
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7f7 fbdb 	bl	800e350 <vTaskDelay>
}
 8016b9a:	bf00      	nop
 8016b9c:	3708      	adds	r7, #8
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
	...

08016ba4 <__NVIC_EnableIRQ>:
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b083      	sub	sp, #12
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	4603      	mov	r3, r0
 8016bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	db0b      	blt.n	8016bce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016bb6:	79fb      	ldrb	r3, [r7, #7]
 8016bb8:	f003 021f 	and.w	r2, r3, #31
 8016bbc:	4907      	ldr	r1, [pc, #28]	; (8016bdc <__NVIC_EnableIRQ+0x38>)
 8016bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016bc2:	095b      	lsrs	r3, r3, #5
 8016bc4:	2001      	movs	r0, #1
 8016bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8016bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016bce:	bf00      	nop
 8016bd0:	370c      	adds	r7, #12
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd8:	4770      	bx	lr
 8016bda:	bf00      	nop
 8016bdc:	e000e100 	.word	0xe000e100

08016be0 <__NVIC_DisableIRQ>:
{
 8016be0:	b480      	push	{r7}
 8016be2:	b083      	sub	sp, #12
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	4603      	mov	r3, r0
 8016be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	db12      	blt.n	8016c18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016bf2:	79fb      	ldrb	r3, [r7, #7]
 8016bf4:	f003 021f 	and.w	r2, r3, #31
 8016bf8:	490a      	ldr	r1, [pc, #40]	; (8016c24 <__NVIC_DisableIRQ+0x44>)
 8016bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016bfe:	095b      	lsrs	r3, r3, #5
 8016c00:	2001      	movs	r0, #1
 8016c02:	fa00 f202 	lsl.w	r2, r0, r2
 8016c06:	3320      	adds	r3, #32
 8016c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016c0c:	f3bf 8f4f 	dsb	sy
}
 8016c10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016c12:	f3bf 8f6f 	isb	sy
}
 8016c16:	bf00      	nop
}
 8016c18:	bf00      	nop
 8016c1a:	370c      	adds	r7, #12
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c22:	4770      	bx	lr
 8016c24:	e000e100 	.word	0xe000e100

08016c28 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8016c28:	b480      	push	{r7}
 8016c2a:	b083      	sub	sp, #12
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
        return color;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
    }
 8016c34:	4618      	mov	r0, r3
 8016c36:	370c      	adds	r7, #12
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8016c40:	b480      	push	{r7}
 8016c42:	b083      	sub	sp, #12
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	b29b      	uxth	r3, r3
    }
 8016c4e:	4618      	mov	r0, r3
 8016c50:	370c      	adds	r7, #12
 8016c52:	46bd      	mov	sp, r7
 8016c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c58:	4770      	bx	lr
	...

08016c5c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8016c5c:	b480      	push	{r7}
 8016c5e:	b083      	sub	sp, #12
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
    {
 8016c64:	4a04      	ldr	r2, [pc, #16]	; (8016c78 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	601a      	str	r2, [r3, #0]
    }
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	370c      	adds	r7, #12
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr
 8016c78:	0802adac 	.word	0x0802adac

08016c7c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
    }
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f7ff ffe9 	bl	8016c5c <_ZN8touchgfx9DMA_QueueD1Ev>
 8016c8a:	2104      	movs	r1, #4
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f011 fc8b 	bl	80285a8 <_ZdlPvj>
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	4618      	mov	r0, r3
 8016c96:	3708      	adds	r7, #8
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	3344      	adds	r3, #68	; 0x44
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	4798      	blx	r3
    }
 8016cb0:	bf00      	nop
 8016cb2:	3708      	adds	r7, #8
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8016cb8:	b480      	push	{r7}
 8016cba:	b083      	sub	sp, #12
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016cc0:	2300      	movs	r3, #0
    }
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	370c      	adds	r7, #12
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ccc:	4770      	bx	lr
	...

08016cd0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8016cd0:	b480      	push	{r7}
 8016cd2:	b083      	sub	sp, #12
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
    {
 8016cd8:	4a04      	ldr	r2, [pc, #16]	; (8016cec <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	601a      	str	r2, [r3, #0]
    }
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	370c      	adds	r7, #12
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cea:	4770      	bx	lr
 8016cec:	0802bdb4 	.word	0x0802bdb4

08016cf0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b082      	sub	sp, #8
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
    }
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f7ff ffe9 	bl	8016cd0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016cfe:	210c      	movs	r1, #12
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f011 fc51 	bl	80285a8 <_ZdlPvj>
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3708      	adds	r7, #8
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}

08016d10 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016d10:	b480      	push	{r7}
 8016d12:	b083      	sub	sp, #12
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
 8016d18:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016d1a:	4a09      	ldr	r2, [pc, #36]	; (8016d40 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	601a      	str	r2, [r3, #0]
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	683a      	ldr	r2, [r7, #0]
 8016d24:	605a      	str	r2, [r3, #4]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	2200      	movs	r2, #0
 8016d2a:	721a      	strb	r2, [r3, #8]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2200      	movs	r2, #0
 8016d30:	725a      	strb	r2, [r3, #9]
    {
    }
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	4618      	mov	r0, r3
 8016d36:	370c      	adds	r7, #12
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3e:	4770      	bx	lr
 8016d40:	0802bdb4 	.word	0x0802bdb4

08016d44 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	685a      	ldr	r2, [r3, #4]
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	685b      	ldr	r3, [r3, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	3314      	adds	r3, #20
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	4610      	mov	r0, r2
 8016d5c:	4798      	blx	r3
    }
 8016d5e:	bf00      	nop
 8016d60:	3708      	adds	r7, #8
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}

08016d66 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8016d66:	b580      	push	{r7, lr}
 8016d68:	b082      	sub	sp, #8
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	3328      	adds	r3, #40	; 0x28
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	4610      	mov	r0, r2
 8016d7a:	4798      	blx	r3
    }
 8016d7c:	bf00      	nop
 8016d7e:	3708      	adds	r7, #8
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}

08016d84 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8016d84:	b480      	push	{r7}
 8016d86:	b085      	sub	sp, #20
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	60f8      	str	r0, [r7, #12]
 8016d8c:	60b9      	str	r1, [r7, #8]
 8016d8e:	607a      	str	r2, [r7, #4]
 8016d90:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	68ba      	ldr	r2, [r7, #8]
 8016da2:	430a      	orrs	r2, r1
 8016da4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016dac:	f023 0107 	bic.w	r1, r3, #7
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	430a      	orrs	r2, r1
 8016db8:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016dc0:	4b06      	ldr	r3, [pc, #24]	; (8016ddc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8016dc2:	4013      	ands	r3, r2
 8016dc4:	68fa      	ldr	r2, [r7, #12]
 8016dc6:	6812      	ldr	r2, [r2, #0]
 8016dc8:	6839      	ldr	r1, [r7, #0]
 8016dca:	430b      	orrs	r3, r1
 8016dcc:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016dce:	2300      	movs	r3, #0
}
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	3714      	adds	r7, #20
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dda:	4770      	bx	lr
 8016ddc:	ffffc000 	.word	0xffffc000

08016de0 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8016de8:	f7f9 ffe6 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 8016dec:	4603      	mov	r3, r0
 8016dee:	4618      	mov	r0, r3
 8016df0:	f7ff ffa8 	bl	8016d44 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8016df4:	bf00      	nop
 8016df6:	3708      	adds	r7, #8
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b082      	sub	sp, #8
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
    assert(0);
 8016e04:	4b02      	ldr	r3, [pc, #8]	; (8016e10 <DMA2D_XferErrorCallback+0x14>)
 8016e06:	4a03      	ldr	r2, [pc, #12]	; (8016e14 <DMA2D_XferErrorCallback+0x18>)
 8016e08:	213e      	movs	r1, #62	; 0x3e
 8016e0a:	4803      	ldr	r0, [pc, #12]	; (8016e18 <DMA2D_XferErrorCallback+0x1c>)
 8016e0c:	f011 fbfa 	bl	8028604 <__assert_func>
 8016e10:	0802a33c 	.word	0x0802a33c
 8016e14:	0802a340 	.word	0x0802a340
 8016e18:	0802a374 	.word	0x0802a374

08016e1c <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	3318      	adds	r3, #24
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7fb f916 	bl	801205a <_ZN8touchgfx9colortypeC1Ev>
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	4618      	mov	r0, r3
 8016e32:	3708      	adds	r7, #8
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}

08016e38 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8016e38:	b5b0      	push	{r4, r5, r7, lr}
 8016e3a:	b082      	sub	sp, #8
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016e40:	687a      	ldr	r2, [r7, #4]
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	330c      	adds	r3, #12
 8016e46:	4619      	mov	r1, r3
 8016e48:	4610      	mov	r0, r2
 8016e4a:	f7ff ff61 	bl	8016d10 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016e4e:	4a0e      	ldr	r2, [pc, #56]	; (8016e88 <_ZN10STM32F7DMAC1Ev+0x50>)
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	601a      	str	r2, [r3, #0]
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f103 000c 	add.w	r0, r3, #12
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	3320      	adds	r3, #32
 8016e5e:	2260      	movs	r2, #96	; 0x60
 8016e60:	4619      	mov	r1, r3
 8016e62:	f003 f8bd 	bl	8019fe0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	3320      	adds	r3, #32
 8016e6a:	245f      	movs	r4, #95	; 0x5f
 8016e6c:	461d      	mov	r5, r3
 8016e6e:	2c00      	cmp	r4, #0
 8016e70:	db05      	blt.n	8016e7e <_ZN10STM32F7DMAC1Ev+0x46>
 8016e72:	4628      	mov	r0, r5
 8016e74:	f7ff ffd2 	bl	8016e1c <_ZN8touchgfx6BlitOpC1Ev>
 8016e78:	3520      	adds	r5, #32
 8016e7a:	3c01      	subs	r4, #1
 8016e7c:	e7f7      	b.n	8016e6e <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	4618      	mov	r0, r3
 8016e82:	3708      	adds	r7, #8
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bdb0      	pop	{r4, r5, r7, pc}
 8016e88:	0802ad5c 	.word	0x0802ad5c

08016e8c <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	4a0b      	ldr	r2, [pc, #44]	; (8016ec4 <_ZN10STM32F7DMAD1Ev+0x38>)
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8016e9a:	480b      	ldr	r0, [pc, #44]	; (8016ec8 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8016e9c:	f7ee f8d8 	bl	8005050 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016ea0:	205a      	movs	r0, #90	; 0x5a
 8016ea2:	f7ff fe9d 	bl	8016be0 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	330c      	adds	r3, #12
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f000 faa4 	bl	80173f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7ff ff0c 	bl	8016cd0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3708      	adds	r7, #8
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}
 8016ec2:	bf00      	nop
 8016ec4:	0802ad5c 	.word	0x0802ad5c
 8016ec8:	2000c774 	.word	0x2000c774

08016ecc <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b082      	sub	sp, #8
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
}
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f7ff ffd9 	bl	8016e8c <_ZN10STM32F7DMAD1Ev>
 8016eda:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f011 fb62 	bl	80285a8 <_ZdlPvj>
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3708      	adds	r7, #8
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
	...

08016ef0 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8016ef8:	4b09      	ldr	r3, [pc, #36]	; (8016f20 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016efa:	4a0a      	ldr	r2, [pc, #40]	; (8016f24 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8016efc:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8016efe:	4808      	ldr	r0, [pc, #32]	; (8016f20 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016f00:	f7ee f85c 	bl	8004fbc <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8016f04:	4b06      	ldr	r3, [pc, #24]	; (8016f20 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016f06:	4a08      	ldr	r2, [pc, #32]	; (8016f28 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8016f08:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8016f0a:	4b05      	ldr	r3, [pc, #20]	; (8016f20 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016f0c:	4a07      	ldr	r2, [pc, #28]	; (8016f2c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8016f0e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016f10:	205a      	movs	r0, #90	; 0x5a
 8016f12:	f7ff fe47 	bl	8016ba4 <__NVIC_EnableIRQ>
}
 8016f16:	bf00      	nop
 8016f18:	3708      	adds	r7, #8
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
 8016f1e:	bf00      	nop
 8016f20:	2000c774 	.word	0x2000c774
 8016f24:	4002b000 	.word	0x4002b000
 8016f28:	08016de1 	.word	0x08016de1
 8016f2c:	08016dfd 	.word	0x08016dfd

08016f30 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8016f30:	b480      	push	{r7}
 8016f32:	b083      	sub	sp, #12
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8016f38:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	370c      	adds	r7, #12
 8016f40:	46bd      	mov	sp, r7
 8016f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f46:	4770      	bx	lr

08016f48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016f48:	b590      	push	{r4, r7, lr}
 8016f4a:	b08d      	sub	sp, #52	; 0x34
 8016f4c:	af02      	add	r7, sp, #8
 8016f4e:	6078      	str	r0, [r7, #4]
 8016f50:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8016f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016f56:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8016f58:	2300      	movs	r3, #0
 8016f5a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016f60:	2b20      	cmp	r3, #32
 8016f62:	d007      	beq.n	8016f74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	2b40      	cmp	r3, #64	; 0x40
 8016f6a:	d003      	beq.n	8016f74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	2b04      	cmp	r3, #4
 8016f72:	d101      	bne.n	8016f78 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8016f74:	2301      	movs	r3, #1
 8016f76:	e000      	b.n	8016f7a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8016f78:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016f7a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8016f80:	2b80      	cmp	r3, #128	; 0x80
 8016f82:	d004      	beq.n	8016f8e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f8c:	d101      	bne.n	8016f92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016f8e:	2301      	movs	r3, #1
 8016f90:	e000      	b.n	8016f94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8016f92:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016f94:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016f96:	f7f9 ff1b 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	3220      	adds	r2, #32
 8016fa0:	6812      	ldr	r2, [r2, #0]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	4790      	blx	r2
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8016faa:	683b      	ldr	r3, [r7, #0]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016fb2:	d012      	beq.n	8016fda <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
 8016fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016fb8:	d820      	bhi.n	8016ffc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8016fba:	2b80      	cmp	r3, #128	; 0x80
 8016fbc:	d00a      	beq.n	8016fd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 8016fbe:	2b80      	cmp	r3, #128	; 0x80
 8016fc0:	d81c      	bhi.n	8016ffc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8016fc2:	2b40      	cmp	r3, #64	; 0x40
 8016fc4:	d017      	beq.n	8016ff6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 8016fc6:	2b40      	cmp	r3, #64	; 0x40
 8016fc8:	d818      	bhi.n	8016ffc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8016fca:	2b04      	cmp	r3, #4
 8016fcc:	d008      	beq.n	8016fe0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x98>
 8016fce:	2b20      	cmp	r3, #32
 8016fd0:	d011      	beq.n	8016ff6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 8016fd2:	e013      	b.n	8016ffc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016fd4:	230a      	movs	r3, #10
 8016fd6:	623b      	str	r3, [r7, #32]
        break;
 8016fd8:	e01a      	b.n	8017010 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016fda:	2309      	movs	r3, #9
 8016fdc:	623b      	str	r3, [r7, #32]
        break;
 8016fde:	e017      	b.n	8017010 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016fe4:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016fe6:	7f7b      	ldrb	r3, [r7, #29]
 8016fe8:	2b10      	cmp	r3, #16
 8016fea:	d101      	bne.n	8016ff0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8016fec:	2302      	movs	r3, #2
 8016fee:	e000      	b.n	8016ff2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	623b      	str	r3, [r7, #32]
        break;
 8016ff4:	e00c      	b.n	8017010 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	623b      	str	r3, [r7, #32]
        break;
 8016ffa:	e009      	b.n	8017010 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8017000:	7f7b      	ldrb	r3, [r7, #29]
 8017002:	2b10      	cmp	r3, #16
 8017004:	d101      	bne.n	801700a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc2>
 8017006:	2302      	movs	r3, #2
 8017008:	e000      	b.n	801700c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc4>
 801700a:	2301      	movs	r3, #1
 801700c:	623b      	str	r3, [r7, #32]
        break;
 801700e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8017010:	4a76      	ldr	r2, [pc, #472]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017014:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8017016:	7f7b      	ldrb	r3, [r7, #29]
 8017018:	2b10      	cmp	r3, #16
 801701a:	d101      	bne.n	8017020 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 801701c:	2302      	movs	r3, #2
 801701e:	e000      	b.n	8017022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xda>
 8017020:	2301      	movs	r3, #1
 8017022:	4a72      	ldr	r2, [pc, #456]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017024:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	8adb      	ldrh	r3, [r3, #22]
 801702a:	461a      	mov	r2, r3
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	8a1b      	ldrh	r3, [r3, #16]
 8017030:	1ad3      	subs	r3, r2, r3
 8017032:	461a      	mov	r2, r3
 8017034:	4b6d      	ldr	r3, [pc, #436]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017036:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8017038:	7f7b      	ldrb	r3, [r7, #29]
 801703a:	2b10      	cmp	r3, #16
 801703c:	d101      	bne.n	8017042 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 801703e:	2202      	movs	r2, #2
 8017040:	e000      	b.n	8017044 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 8017042:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	8adb      	ldrh	r3, [r3, #22]
 8017048:	4619      	mov	r1, r3
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	8a1b      	ldrh	r3, [r3, #16]
 801704e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8017050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017052:	4866      	ldr	r0, [pc, #408]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017054:	f7ff fe96 	bl	8016d84 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8017058:	4a64      	ldr	r2, [pc, #400]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801705a:	6a3b      	ldr	r3, [r7, #32]
 801705c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	8a9b      	ldrh	r3, [r3, #20]
 8017062:	461a      	mov	r2, r3
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	8a1b      	ldrh	r3, [r3, #16]
 8017068:	1ad3      	subs	r3, r2, r3
 801706a:	461a      	mov	r2, r3
 801706c:	4b5f      	ldr	r3, [pc, #380]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801706e:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8017070:	7ffb      	ldrb	r3, [r7, #31]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d103      	bne.n	801707e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8017076:	7fbb      	ldrb	r3, [r7, #30]
 8017078:	2b00      	cmp	r3, #0
 801707a:	f000 8082 	beq.w	8017182 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
    {
        if (blitOp.alpha < 255)
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	7f1b      	ldrb	r3, [r3, #28]
 8017082:	2bff      	cmp	r3, #255	; 0xff
 8017084:	d008      	beq.n	8017098 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8017086:	4b59      	ldr	r3, [pc, #356]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017088:	2202      	movs	r2, #2
 801708a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	7f1b      	ldrb	r3, [r3, #28]
 8017090:	461a      	mov	r2, r3
 8017092:	4b56      	ldr	r3, [pc, #344]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017094:	635a      	str	r2, [r3, #52]	; 0x34
 8017096:	e002      	b.n	801709e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8017098:	4b54      	ldr	r3, [pc, #336]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801709a:	2200      	movs	r2, #0
 801709c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801709e:	7fbb      	ldrb	r3, [r7, #30]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d059      	beq.n	8017158 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
        {
            if (bitDepth == 16)
 80170a4:	7f7b      	ldrb	r3, [r7, #29]
 80170a6:	2b10      	cmp	r3, #16
 80170a8:	d14a      	bne.n	8017140 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	3318      	adds	r3, #24
 80170ae:	4618      	mov	r0, r3
 80170b0:	f7ff fdc6 	bl	8016c40 <_ZNK8touchgfx9colortypecvtEv>
 80170b4:	4603      	mov	r3, r0
 80170b6:	12db      	asrs	r3, r3, #11
 80170b8:	f003 021f 	and.w	r2, r3, #31
 80170bc:	4613      	mov	r3, r2
 80170be:	021b      	lsls	r3, r3, #8
 80170c0:	1a9b      	subs	r3, r3, r2
 80170c2:	4a4b      	ldr	r2, [pc, #300]	; (80171f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80170c4:	fb82 1203 	smull	r1, r2, r2, r3
 80170c8:	441a      	add	r2, r3
 80170ca:	1112      	asrs	r2, r2, #4
 80170cc:	17db      	asrs	r3, r3, #31
 80170ce:	1ad3      	subs	r3, r2, r3
 80170d0:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	3318      	adds	r3, #24
 80170d6:	4618      	mov	r0, r3
 80170d8:	f7ff fdb2 	bl	8016c40 <_ZNK8touchgfx9colortypecvtEv>
 80170dc:	4603      	mov	r3, r0
 80170de:	115b      	asrs	r3, r3, #5
 80170e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80170e4:	4613      	mov	r3, r2
 80170e6:	021b      	lsls	r3, r3, #8
 80170e8:	1a9b      	subs	r3, r3, r2
 80170ea:	4a42      	ldr	r2, [pc, #264]	; (80171f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80170ec:	fb82 1203 	smull	r1, r2, r2, r3
 80170f0:	441a      	add	r2, r3
 80170f2:	1152      	asrs	r2, r2, #5
 80170f4:	17db      	asrs	r3, r3, #31
 80170f6:	1ad3      	subs	r3, r2, r3
 80170f8:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	3318      	adds	r3, #24
 80170fe:	4618      	mov	r0, r3
 8017100:	f7ff fd9e 	bl	8016c40 <_ZNK8touchgfx9colortypecvtEv>
 8017104:	4603      	mov	r3, r0
 8017106:	f003 021f 	and.w	r2, r3, #31
 801710a:	4613      	mov	r3, r2
 801710c:	021b      	lsls	r3, r3, #8
 801710e:	1a9b      	subs	r3, r3, r2
 8017110:	4a37      	ldr	r2, [pc, #220]	; (80171f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8017112:	fb82 1203 	smull	r1, r2, r2, r3
 8017116:	441a      	add	r2, r3
 8017118:	1112      	asrs	r2, r2, #4
 801711a:	17db      	asrs	r3, r3, #31
 801711c:	1ad3      	subs	r3, r2, r3
 801711e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	7f1b      	ldrb	r3, [r3, #28]
 8017124:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	061a      	lsls	r2, r3, #24
 801712a:	69bb      	ldr	r3, [r7, #24]
 801712c:	041b      	lsls	r3, r3, #16
 801712e:	431a      	orrs	r2, r3
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	021b      	lsls	r3, r3, #8
 8017134:	431a      	orrs	r2, r3
 8017136:	693b      	ldr	r3, [r7, #16]
 8017138:	4313      	orrs	r3, r2
 801713a:	4a2c      	ldr	r2, [pc, #176]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801713c:	6353      	str	r3, [r2, #52]	; 0x34
 801713e:	e00b      	b.n	8017158 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8017140:	683b      	ldr	r3, [r7, #0]
 8017142:	3318      	adds	r3, #24
 8017144:	4618      	mov	r0, r3
 8017146:	f7ff fd6f 	bl	8016c28 <_ZNK8touchgfx9colortype10getColor32Ev>
 801714a:	4602      	mov	r2, r0
 801714c:	683b      	ldr	r3, [r7, #0]
 801714e:	7f1b      	ldrb	r3, [r3, #28]
 8017150:	061b      	lsls	r3, r3, #24
 8017152:	4313      	orrs	r3, r2
 8017154:	4a25      	ldr	r2, [pc, #148]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017156:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8017158:	683b      	ldr	r3, [r7, #0]
 801715a:	8adb      	ldrh	r3, [r3, #22]
 801715c:	461a      	mov	r2, r3
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	8a1b      	ldrh	r3, [r3, #16]
 8017162:	1ad3      	subs	r3, r2, r3
 8017164:	461a      	mov	r2, r3
 8017166:	4b21      	ldr	r3, [pc, #132]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017168:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801716a:	7f7b      	ldrb	r3, [r7, #29]
 801716c:	2b10      	cmp	r3, #16
 801716e:	d101      	bne.n	8017174 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>
 8017170:	2302      	movs	r3, #2
 8017172:	e000      	b.n	8017176 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22e>
 8017174:	2301      	movs	r3, #1
 8017176:	4a1d      	ldr	r2, [pc, #116]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017178:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801717a:	2100      	movs	r1, #0
 801717c:	481b      	ldr	r0, [pc, #108]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801717e:	f7ee f9e7 	bl	8005550 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8017182:	2101      	movs	r1, #1
 8017184:	4819      	ldr	r0, [pc, #100]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017186:	f7ee f9e3 	bl	8005550 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 801718a:	7ffb      	ldrb	r3, [r7, #31]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d102      	bne.n	8017196 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24e>
 8017190:	7fbb      	ldrb	r3, [r7, #30]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d015      	beq.n	80171c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27a>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801719a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801719c:	683b      	ldr	r3, [r7, #0]
 801719e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80171a0:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80171a6:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80171ac:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80171b2:	9301      	str	r3, [sp, #4]
 80171b4:	9200      	str	r2, [sp, #0]
 80171b6:	4623      	mov	r3, r4
 80171b8:	4602      	mov	r2, r0
 80171ba:	480c      	ldr	r0, [pc, #48]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80171bc:	f7ed ffeb 	bl	8005196 <HAL_DMA2D_BlendingStart_IT>
 80171c0:	e010      	b.n	80171e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80171c6:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80171cc:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80171d2:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80171d8:	9300      	str	r3, [sp, #0]
 80171da:	4603      	mov	r3, r0
 80171dc:	4803      	ldr	r0, [pc, #12]	; (80171ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80171de:	f7ed ffa7 	bl	8005130 <HAL_DMA2D_Start_IT>
    }
}
 80171e2:	bf00      	nop
 80171e4:	bf00      	nop
 80171e6:	372c      	adds	r7, #44	; 0x2c
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd90      	pop	{r4, r7, pc}
 80171ec:	2000c774 	.word	0x2000c774
 80171f0:	84210843 	.word	0x84210843
 80171f4:	82082083 	.word	0x82082083

080171f8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80171f8:	b590      	push	{r4, r7, lr}
 80171fa:	b08d      	sub	sp, #52	; 0x34
 80171fc:	af02      	add	r7, sp, #8
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8017202:	f7f9 fde5 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8017206:	4603      	mov	r3, r0
 8017208:	681a      	ldr	r2, [r3, #0]
 801720a:	3220      	adds	r2, #32
 801720c:	6812      	ldr	r2, [r2, #0]
 801720e:	4618      	mov	r0, r3
 8017210:	4790      	blx	r2
 8017212:	4603      	mov	r3, r0
 8017214:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8017216:	7ffb      	ldrb	r3, [r7, #31]
 8017218:	2b10      	cmp	r3, #16
 801721a:	d101      	bne.n	8017220 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 801721c:	2302      	movs	r3, #2
 801721e:	e000      	b.n	8017222 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8017220:	2301      	movs	r3, #1
 8017222:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8017224:	2300      	movs	r3, #0
 8017226:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8017228:	7ffb      	ldrb	r3, [r7, #31]
 801722a:	2b10      	cmp	r3, #16
 801722c:	d149      	bne.n	80172c2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	3318      	adds	r3, #24
 8017232:	4618      	mov	r0, r3
 8017234:	f7ff fd04 	bl	8016c40 <_ZNK8touchgfx9colortypecvtEv>
 8017238:	4603      	mov	r3, r0
 801723a:	12db      	asrs	r3, r3, #11
 801723c:	f003 021f 	and.w	r2, r3, #31
 8017240:	4613      	mov	r3, r2
 8017242:	021b      	lsls	r3, r3, #8
 8017244:	1a9b      	subs	r3, r3, r2
 8017246:	4a69      	ldr	r2, [pc, #420]	; (80173ec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8017248:	fb82 1203 	smull	r1, r2, r2, r3
 801724c:	441a      	add	r2, r3
 801724e:	1112      	asrs	r2, r2, #4
 8017250:	17db      	asrs	r3, r3, #31
 8017252:	1ad3      	subs	r3, r2, r3
 8017254:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	3318      	adds	r3, #24
 801725a:	4618      	mov	r0, r3
 801725c:	f7ff fcf0 	bl	8016c40 <_ZNK8touchgfx9colortypecvtEv>
 8017260:	4603      	mov	r3, r0
 8017262:	115b      	asrs	r3, r3, #5
 8017264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8017268:	4613      	mov	r3, r2
 801726a:	021b      	lsls	r3, r3, #8
 801726c:	1a9b      	subs	r3, r3, r2
 801726e:	4a60      	ldr	r2, [pc, #384]	; (80173f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8017270:	fb82 1203 	smull	r1, r2, r2, r3
 8017274:	441a      	add	r2, r3
 8017276:	1152      	asrs	r2, r2, #5
 8017278:	17db      	asrs	r3, r3, #31
 801727a:	1ad3      	subs	r3, r2, r3
 801727c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	3318      	adds	r3, #24
 8017282:	4618      	mov	r0, r3
 8017284:	f7ff fcdc 	bl	8016c40 <_ZNK8touchgfx9colortypecvtEv>
 8017288:	4603      	mov	r3, r0
 801728a:	f003 021f 	and.w	r2, r3, #31
 801728e:	4613      	mov	r3, r2
 8017290:	021b      	lsls	r3, r3, #8
 8017292:	1a9b      	subs	r3, r3, r2
 8017294:	4a55      	ldr	r2, [pc, #340]	; (80173ec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8017296:	fb82 1203 	smull	r1, r2, r2, r3
 801729a:	441a      	add	r2, r3
 801729c:	1112      	asrs	r2, r2, #4
 801729e:	17db      	asrs	r3, r3, #31
 80172a0:	1ad3      	subs	r3, r2, r3
 80172a2:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	7f1b      	ldrb	r3, [r3, #28]
 80172a8:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	061a      	lsls	r2, r3, #24
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	041b      	lsls	r3, r3, #16
 80172b2:	431a      	orrs	r2, r3
 80172b4:	693b      	ldr	r3, [r7, #16]
 80172b6:	021b      	lsls	r3, r3, #8
 80172b8:	4313      	orrs	r3, r2
 80172ba:	68fa      	ldr	r2, [r7, #12]
 80172bc:	4313      	orrs	r3, r2
 80172be:	623b      	str	r3, [r7, #32]
 80172c0:	e00b      	b.n	80172da <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	7f1b      	ldrb	r3, [r3, #28]
 80172c6:	061b      	lsls	r3, r3, #24
 80172c8:	461c      	mov	r4, r3
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	3318      	adds	r3, #24
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7ff fcaa 	bl	8016c28 <_ZNK8touchgfx9colortype10getColor32Ev>
 80172d4:	4603      	mov	r3, r0
 80172d6:	4323      	orrs	r3, r4
 80172d8:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	2b08      	cmp	r3, #8
 80172e0:	d103      	bne.n	80172ea <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80172e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80172e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80172e8:	e003      	b.n	80172f2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80172ea:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80172ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80172f0:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80172f2:	4a40      	ldr	r2, [pc, #256]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80172f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f6:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80172f8:	7ffb      	ldrb	r3, [r7, #31]
 80172fa:	2b10      	cmp	r3, #16
 80172fc:	d101      	bne.n	8017302 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80172fe:	2302      	movs	r3, #2
 8017300:	e000      	b.n	8017304 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8017302:	2301      	movs	r3, #1
 8017304:	4a3b      	ldr	r2, [pc, #236]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017306:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	8adb      	ldrh	r3, [r3, #22]
 801730c:	461a      	mov	r2, r3
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	8a1b      	ldrh	r3, [r3, #16]
 8017312:	1ad3      	subs	r3, r2, r3
 8017314:	461a      	mov	r2, r3
 8017316:	4b37      	ldr	r3, [pc, #220]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017318:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801731a:	7ffb      	ldrb	r3, [r7, #31]
 801731c:	2b10      	cmp	r3, #16
 801731e:	d101      	bne.n	8017324 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8017320:	2202      	movs	r2, #2
 8017322:	e000      	b.n	8017326 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8017324:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	8adb      	ldrh	r3, [r3, #22]
 801732a:	4619      	mov	r1, r3
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	8a1b      	ldrh	r3, [r3, #16]
 8017330:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8017332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017334:	482f      	ldr	r0, [pc, #188]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017336:	f7ff fd25 	bl	8016d84 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017340:	d11e      	bne.n	8017380 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8017342:	4b2c      	ldr	r3, [pc, #176]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017344:	2201      	movs	r2, #1
 8017346:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8017348:	4a2a      	ldr	r2, [pc, #168]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801734a:	6a3b      	ldr	r3, [r7, #32]
 801734c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801734e:	4b29      	ldr	r3, [pc, #164]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017350:	2209      	movs	r2, #9
 8017352:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	8adb      	ldrh	r3, [r3, #22]
 8017358:	461a      	mov	r2, r3
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	8a1b      	ldrh	r3, [r3, #16]
 801735e:	1ad3      	subs	r3, r2, r3
 8017360:	461a      	mov	r2, r3
 8017362:	4b24      	ldr	r3, [pc, #144]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017364:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8017366:	7ffb      	ldrb	r3, [r7, #31]
 8017368:	2b10      	cmp	r3, #16
 801736a:	d101      	bne.n	8017370 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 801736c:	2302      	movs	r3, #2
 801736e:	e000      	b.n	8017372 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8017370:	2301      	movs	r3, #1
 8017372:	4a20      	ldr	r2, [pc, #128]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017374:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8017376:	2100      	movs	r1, #0
 8017378:	481e      	ldr	r0, [pc, #120]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801737a:	f7ee f8e9 	bl	8005550 <HAL_DMA2D_ConfigLayer>
 801737e:	e005      	b.n	801738c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8017380:	4a1c      	ldr	r2, [pc, #112]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017382:	69bb      	ldr	r3, [r7, #24]
 8017384:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8017386:	4b1b      	ldr	r3, [pc, #108]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017388:	2200      	movs	r2, #0
 801738a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801738c:	2101      	movs	r1, #1
 801738e:	4819      	ldr	r0, [pc, #100]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017390:	f7ee f8de 	bl	8005550 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8017394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801739a:	d115      	bne.n	80173c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80173a0:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80173a2:	683b      	ldr	r3, [r7, #0]
 80173a4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80173a6:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80173ac:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80173ae:	683b      	ldr	r3, [r7, #0]
 80173b0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80173b2:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80173b4:	683b      	ldr	r3, [r7, #0]
 80173b6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80173b8:	9301      	str	r3, [sp, #4]
 80173ba:	9200      	str	r2, [sp, #0]
 80173bc:	4623      	mov	r3, r4
 80173be:	4602      	mov	r2, r0
 80173c0:	480c      	ldr	r0, [pc, #48]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80173c2:	f7ed fee8 	bl	8005196 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 80173c6:	e00d      	b.n	80173e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80173c8:	683b      	ldr	r3, [r7, #0]
 80173ca:	68db      	ldr	r3, [r3, #12]
 80173cc:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80173d2:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80173d4:	683b      	ldr	r3, [r7, #0]
 80173d6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80173d8:	9300      	str	r3, [sp, #0]
 80173da:	460b      	mov	r3, r1
 80173dc:	6a39      	ldr	r1, [r7, #32]
 80173de:	4805      	ldr	r0, [pc, #20]	; (80173f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80173e0:	f7ed fea6 	bl	8005130 <HAL_DMA2D_Start_IT>
}
 80173e4:	bf00      	nop
 80173e6:	372c      	adds	r7, #44	; 0x2c
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd90      	pop	{r4, r7, pc}
 80173ec:	84210843 	.word	0x84210843
 80173f0:	82082083 	.word	0x82082083
 80173f4:	2000c774 	.word	0x2000c774

080173f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	4a05      	ldr	r2, [pc, #20]	; (8017418 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	601a      	str	r2, [r3, #0]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4618      	mov	r0, r3
 801740a:	f7ff fc27 	bl	8016c5c <_ZN8touchgfx9DMA_QueueD1Ev>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	4618      	mov	r0, r3
 8017412:	3708      	adds	r7, #8
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}
 8017418:	0802be04 	.word	0x0802be04

0801741c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801741c:	b580      	push	{r7, lr}
 801741e:	b082      	sub	sp, #8
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
 8017424:	6878      	ldr	r0, [r7, #4]
 8017426:	f7ff ffe7 	bl	80173f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801742a:	2114      	movs	r1, #20
 801742c:	6878      	ldr	r0, [r7, #4]
 801742e:	f011 f8bb 	bl	80285a8 <_ZdlPvj>
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	4618      	mov	r0, r3
 8017436:	3708      	adds	r7, #8
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}

0801743c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 801743c:	b480      	push	{r7}
 801743e:	b083      	sub	sp, #12
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
        texts = t;
 8017444:	4a04      	ldr	r2, [pc, #16]	; (8017458 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	6013      	str	r3, [r2, #0]
    }
 801744a:	bf00      	nop
 801744c:	370c      	adds	r7, #12
 801744e:	46bd      	mov	sp, r7
 8017450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017454:	4770      	bx	lr
 8017456:	bf00      	nop
 8017458:	2000bf8c 	.word	0x2000bf8c

0801745c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801745c:	b480      	push	{r7}
 801745e:	b085      	sub	sp, #20
 8017460:	af00      	add	r7, sp, #0
 8017462:	60f8      	str	r0, [r7, #12]
 8017464:	60b9      	str	r1, [r7, #8]
 8017466:	607a      	str	r2, [r7, #4]
 8017468:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801746a:	4a0b      	ldr	r2, [pc, #44]	; (8017498 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	601a      	str	r2, [r3, #0]
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	68ba      	ldr	r2, [r7, #8]
 8017474:	605a      	str	r2, [r3, #4]
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	687a      	ldr	r2, [r7, #4]
 801747a:	609a      	str	r2, [r3, #8]
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	683a      	ldr	r2, [r7, #0]
 8017480:	60da      	str	r2, [r3, #12]
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	69ba      	ldr	r2, [r7, #24]
 8017486:	611a      	str	r2, [r3, #16]
    {
    }
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	4618      	mov	r0, r3
 801748c:	3714      	adds	r7, #20
 801748e:	46bd      	mov	sp, r7
 8017490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017494:	4770      	bx	lr
 8017496:	bf00      	nop
 8017498:	0802ae94 	.word	0x0802ae94

0801749c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801749c:	b480      	push	{r7}
 801749e:	b083      	sub	sp, #12
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
    {
 80174a4:	4a04      	ldr	r2, [pc, #16]	; (80174b8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	601a      	str	r2, [r3, #0]
    }
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	4618      	mov	r0, r3
 80174ae:	370c      	adds	r7, #12
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr
 80174b8:	0802ae94 	.word	0x0802ae94

080174bc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
    }
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f7ff ffe9 	bl	801749c <_ZN8touchgfx7MVPHeapD1Ev>
 80174ca:	2114      	movs	r1, #20
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f011 f86b 	bl	80285a8 <_ZdlPvj>
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	4618      	mov	r0, r3
 80174d6:	3708      	adds	r7, #8
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}

080174dc <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 80174dc:	b480      	push	{r7}
 80174de:	b083      	sub	sp, #12
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
    {
 80174e4:	4a04      	ldr	r2, [pc, #16]	; (80174f8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	601a      	str	r2, [r3, #0]
    }
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	4618      	mov	r0, r3
 80174ee:	370c      	adds	r7, #12
 80174f0:	46bd      	mov	sp, r7
 80174f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f6:	4770      	bx	lr
 80174f8:	0802c7c0 	.word	0x0802c7c0

080174fc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
    }
 8017504:	6878      	ldr	r0, [r7, #4]
 8017506:	f7ff ffe9 	bl	80174dc <_ZN8touchgfx3LCDD1Ev>
 801750a:	2108      	movs	r1, #8
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f011 f84b 	bl	80285a8 <_ZdlPvj>
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	4618      	mov	r0, r3
 8017516:	3708      	adds	r7, #8
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 801751c:	b480      	push	{r7}
 801751e:	b083      	sub	sp, #12
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2200      	movs	r2, #0
 8017528:	801a      	strh	r2, [r3, #0]
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	2200      	movs	r2, #0
 801752e:	805a      	strh	r2, [r3, #2]
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2200      	movs	r2, #0
 8017534:	809a      	strh	r2, [r3, #4]
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2200      	movs	r2, #0
 801753a:	80da      	strh	r2, [r3, #6]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2200      	movs	r2, #0
 8017540:	811a      	strh	r2, [r3, #8]
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	2200      	movs	r2, #0
 8017546:	815a      	strh	r2, [r3, #10]
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2200      	movs	r2, #0
 801754c:	819a      	strh	r2, [r3, #12]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2200      	movs	r2, #0
 8017552:	739a      	strb	r2, [r3, #14]
        {
        }
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	4618      	mov	r0, r3
 8017558:	370c      	adds	r7, #12
 801755a:	46bd      	mov	sp, r7
 801755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017560:	4770      	bx	lr

08017562 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8017562:	b580      	push	{r7, lr}
 8017564:	b082      	sub	sp, #8
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	4618      	mov	r0, r3
 801756e:	f7ff ffd5 	bl	801751c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2200      	movs	r2, #0
 8017576:	611a      	str	r2, [r3, #16]
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	2200      	movs	r2, #0
 801757c:	829a      	strh	r2, [r3, #20]
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	4618      	mov	r0, r3
 8017582:	3708      	adds	r7, #8
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}

08017588 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8017588:	b580      	push	{r7, lr}
 801758a:	b084      	sub	sp, #16
 801758c:	af00      	add	r7, sp, #0
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	607a      	str	r2, [r7, #4]
 8017594:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8017596:	4a44      	ldr	r2, [pc, #272]	; (80176a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	601a      	str	r2, [r3, #0]
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	68ba      	ldr	r2, [r7, #8]
 80175a0:	605a      	str	r2, [r3, #4]
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	687a      	ldr	r2, [r7, #4]
 80175a6:	609a      	str	r2, [r3, #8]
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	683a      	ldr	r2, [r7, #0]
 80175ac:	60da      	str	r2, [r3, #12]
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	2200      	movs	r2, #0
 80175b2:	611a      	str	r2, [r3, #16]
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	2200      	movs	r2, #0
 80175b8:	615a      	str	r2, [r3, #20]
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	2200      	movs	r2, #0
 80175be:	619a      	str	r2, [r3, #24]
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	331c      	adds	r3, #28
 80175c4:	4618      	mov	r0, r3
 80175c6:	f7ff ffcc 	bl	8017562 <_ZN8touchgfx8GesturesC1Ev>
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	2200      	movs	r2, #0
 80175ce:	639a      	str	r2, [r3, #56]	; 0x38
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2200      	movs	r2, #0
 80175d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	2200      	movs	r2, #0
 80175da:	641a      	str	r2, [r3, #64]	; 0x40
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	2200      	movs	r2, #0
 80175e0:	645a      	str	r2, [r3, #68]	; 0x44
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	2200      	movs	r2, #0
 80175e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2201      	movs	r2, #1
 80175ee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	2201      	movs	r2, #1
 80175f6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	2200      	movs	r2, #0
 80175fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	3350      	adds	r3, #80	; 0x50
 8017604:	4618      	mov	r0, r3
 8017606:	f7fa fd45 	bl	8012094 <_ZN8touchgfx4RectC1Ev>
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	2201      	movs	r2, #1
 801760e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	2200      	movs	r2, #0
 8017616:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	2200      	movs	r2, #0
 801761e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2201      	movs	r2, #1
 8017626:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	2200      	movs	r2, #0
 801762e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	2200      	movs	r2, #0
 8017636:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	2200      	movs	r2, #0
 801763e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	2200      	movs	r2, #0
 8017646:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	2200      	movs	r2, #0
 801764e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	2200      	movs	r2, #0
 8017656:	671a      	str	r2, [r3, #112]	; 0x70
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	2200      	movs	r2, #0
 801765c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8017660:	4a12      	ldr	r2, [pc, #72]	; (80176ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8017666:	4a12      	ldr	r2, [pc, #72]	; (80176b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8017668:	8b3b      	ldrh	r3, [r7, #24]
 801766a:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801766c:	4a11      	ldr	r2, [pc, #68]	; (80176b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801766e:	8bbb      	ldrh	r3, [r7, #28]
 8017670:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8017672:	4b11      	ldr	r3, [pc, #68]	; (80176b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8017674:	2200      	movs	r2, #0
 8017676:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8017678:	4b0d      	ldr	r3, [pc, #52]	; (80176b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801767a:	881a      	ldrh	r2, [r3, #0]
 801767c:	4b0f      	ldr	r3, [pc, #60]	; (80176bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801767e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8017680:	4b0c      	ldr	r3, [pc, #48]	; (80176b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8017682:	881a      	ldrh	r2, [r3, #0]
 8017684:	4b0e      	ldr	r3, [pc, #56]	; (80176c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8017686:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8017688:	8b3a      	ldrh	r2, [r7, #24]
 801768a:	8bbb      	ldrh	r3, [r7, #28]
 801768c:	429a      	cmp	r2, r3
 801768e:	bf34      	ite	cc
 8017690:	2301      	movcc	r3, #1
 8017692:	2300      	movcs	r3, #0
 8017694:	b2db      	uxtb	r3, r3
 8017696:	461a      	mov	r2, r3
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	4618      	mov	r0, r3
 80176a2:	3710      	adds	r7, #16
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bd80      	pop	{r7, pc}
 80176a8:	0802b970 	.word	0x0802b970
 80176ac:	2000bef0 	.word	0x2000bef0
 80176b0:	2000bee2 	.word	0x2000bee2
 80176b4:	2000bee4 	.word	0x2000bee4
 80176b8:	2000bee6 	.word	0x2000bee6
 80176bc:	2000bee8 	.word	0x2000bee8
 80176c0:	2000beea 	.word	0x2000beea

080176c4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7f9 fda1 	bl	8011218 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80176d6:	bf00      	nop
 80176d8:	3708      	adds	r7, #8
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}
	...

080176e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b086      	sub	sp, #24
 80176e4:	af02      	add	r7, sp, #8
 80176e6:	60f8      	str	r0, [r7, #12]
 80176e8:	60b9      	str	r1, [r7, #8]
 80176ea:	607a      	str	r2, [r7, #4]
 80176ec:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80176ee:	68f8      	ldr	r0, [r7, #12]
 80176f0:	69bb      	ldr	r3, [r7, #24]
 80176f2:	9300      	str	r3, [sp, #0]
 80176f4:	683b      	ldr	r3, [r7, #0]
 80176f6:	687a      	ldr	r2, [r7, #4]
 80176f8:	68b9      	ldr	r1, [r7, #8]
 80176fa:	f7ff feaf 	bl	801745c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80176fe:	4a04      	ldr	r2, [pc, #16]	; (8017710 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	601a      	str	r2, [r3, #0]
    {

    }
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	4618      	mov	r0, r3
 8017708:	3710      	adds	r7, #16
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}
 801770e:	bf00      	nop
 8017710:	0802ae80 	.word	0x0802ae80

08017714 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8017714:	b580      	push	{r7, lr}
 8017716:	af00      	add	r7, sp, #0
 8017718:	4801      	ldr	r0, [pc, #4]	; (8017720 <__tcf_0+0xc>)
 801771a:	f000 f9f1 	bl	8017b00 <_ZN12FrontendHeapD1Ev>
 801771e:	bd80      	pop	{r7, pc}
 8017720:	200087b4 	.word	0x200087b4

08017724 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8017724:	b580      	push	{r7, lr}
 8017726:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8017728:	4b12      	ldr	r3, [pc, #72]	; (8017774 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801772a:	781b      	ldrb	r3, [r3, #0]
 801772c:	f3bf 8f5b 	dmb	ish
 8017730:	b2db      	uxtb	r3, r3
 8017732:	f003 0301 	and.w	r3, r3, #1
 8017736:	2b00      	cmp	r3, #0
 8017738:	bf0c      	ite	eq
 801773a:	2301      	moveq	r3, #1
 801773c:	2300      	movne	r3, #0
 801773e:	b2db      	uxtb	r3, r3
 8017740:	2b00      	cmp	r3, #0
 8017742:	d013      	beq.n	801776c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8017744:	480b      	ldr	r0, [pc, #44]	; (8017774 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8017746:	f010 ff31 	bl	80285ac <__cxa_guard_acquire>
 801774a:	4603      	mov	r3, r0
 801774c:	2b00      	cmp	r3, #0
 801774e:	bf14      	ite	ne
 8017750:	2301      	movne	r3, #1
 8017752:	2300      	moveq	r3, #0
 8017754:	b2db      	uxtb	r3, r3
 8017756:	2b00      	cmp	r3, #0
 8017758:	d008      	beq.n	801776c <_ZN12FrontendHeap11getInstanceEv+0x48>
 801775a:	4807      	ldr	r0, [pc, #28]	; (8017778 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 801775c:	f000 f832 	bl	80177c4 <_ZN12FrontendHeapC1Ev>
 8017760:	4804      	ldr	r0, [pc, #16]	; (8017774 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8017762:	f010 ff2f 	bl	80285c4 <__cxa_guard_release>
 8017766:	4805      	ldr	r0, [pc, #20]	; (801777c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8017768:	f010 ff6a 	bl	8028640 <atexit>
        return instance;
 801776c:	4b02      	ldr	r3, [pc, #8]	; (8017778 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 801776e:	4618      	mov	r0, r3
 8017770:	bd80      	pop	{r7, pc}
 8017772:	bf00      	nop
 8017774:	2000b1dc 	.word	0x2000b1dc
 8017778:	200087b4 	.word	0x200087b4
 801777c:	08017715 	.word	0x08017715

08017780 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8017780:	b580      	push	{r7, lr}
 8017782:	b082      	sub	sp, #8
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
 8017788:	4a05      	ldr	r2, [pc, #20]	; (80177a0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	601a      	str	r2, [r3, #0]
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	4618      	mov	r0, r3
 8017792:	f7ff fe83 	bl	801749c <_ZN8touchgfx7MVPHeapD1Ev>
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	4618      	mov	r0, r3
 801779a:	3708      	adds	r7, #8
 801779c:	46bd      	mov	sp, r7
 801779e:	bd80      	pop	{r7, pc}
 80177a0:	0802ae80 	.word	0x0802ae80

080177a4 <_ZN16FrontendHeapBaseD0Ev>:
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b082      	sub	sp, #8
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
 80177ac:	6878      	ldr	r0, [r7, #4]
 80177ae:	f7ff ffe7 	bl	8017780 <_ZN16FrontendHeapBaseD1Ev>
 80177b2:	2114      	movs	r1, #20
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f010 fef7 	bl	80285a8 <_ZdlPvj>
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	4618      	mov	r0, r3
 80177be:	3708      	adds	r7, #8
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}

080177c4 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80177c4:	b5b0      	push	{r4, r5, r7, lr}
 80177c6:	b084      	sub	sp, #16
 80177c8:	af02      	add	r7, sp, #8
 80177ca:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80177cc:	6878      	ldr	r0, [r7, #4]
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	f103 0414 	add.w	r4, r3, #20
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	f642 0278 	movw	r2, #10360	; 0x2878
 80177e0:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80177e2:	6879      	ldr	r1, [r7, #4]
 80177e4:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80177e8:	440b      	add	r3, r1
        app(model, *this)
 80177ea:	9300      	str	r3, [sp, #0]
 80177ec:	4613      	mov	r3, r2
 80177ee:	462a      	mov	r2, r5
 80177f0:	4621      	mov	r1, r4
 80177f2:	f7ff ff75 	bl	80176e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80177f6:	4a1a      	ldr	r2, [pc, #104]	; (8017860 <_ZN12FrontendHeapC1Ev+0x9c>)
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	601a      	str	r2, [r3, #0]
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	3314      	adds	r3, #20
 8017800:	4618      	mov	r0, r3
 8017802:	f000 f8df 	bl	80179c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	332c      	adds	r3, #44	; 0x2c
 801780a:	4618      	mov	r0, r3
 801780c:	f000 f90e 	bl	8017a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017810:	687a      	ldr	r2, [r7, #4]
 8017812:	f642 0378 	movw	r3, #10360	; 0x2878
 8017816:	4413      	add	r3, r2
 8017818:	4618      	mov	r0, r3
 801781a:	f000 f93d 	bl	8017a98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 801781e:	687a      	ldr	r2, [r7, #4]
 8017820:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8017824:	4413      	add	r3, r2
 8017826:	687a      	ldr	r2, [r7, #4]
 8017828:	f642 2124 	movw	r1, #10788	; 0x2a24
 801782c:	4411      	add	r1, r2
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	4618      	mov	r0, r3
 8017832:	f7fd fff7 	bl	8015824 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8017836:	687a      	ldr	r2, [r7, #4]
 8017838:	f642 2324 	movw	r3, #10788	; 0x2a24
 801783c:	4413      	add	r3, r2
 801783e:	4618      	mov	r0, r3
 8017840:	f7fe fce4 	bl	801620c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8017844:	6878      	ldr	r0, [r7, #4]
 8017846:	687a      	ldr	r2, [r7, #4]
 8017848:	f642 03d4 	movw	r3, #10452	; 0x28d4
 801784c:	4413      	add	r3, r2
 801784e:	4619      	mov	r1, r3
 8017850:	f7ff ff38 	bl	80176c4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	4618      	mov	r0, r3
 8017858:	3708      	adds	r7, #8
 801785a:	46bd      	mov	sp, r7
 801785c:	bdb0      	pop	{r4, r5, r7, pc}
 801785e:	bf00      	nop
 8017860:	0802add0 	.word	0x0802add0

08017864 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8017864:	b580      	push	{r7, lr}
 8017866:	b082      	sub	sp, #8
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
    {
 801786c:	4a05      	ldr	r2, [pc, #20]	; (8017884 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	601a      	str	r2, [r3, #0]
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	4618      	mov	r0, r3
 8017876:	f7ff fe31 	bl	80174dc <_ZN8touchgfx3LCDD1Ev>
    }
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	4618      	mov	r0, r3
 801787e:	3708      	adds	r7, #8
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}
 8017884:	0802db9c 	.word	0x0802db9c

08017888 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8017888:	b580      	push	{r7, lr}
 801788a:	b082      	sub	sp, #8
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
    }
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7ff ffe7 	bl	8017864 <_ZN8touchgfx8LCD24bppD1Ev>
 8017896:	2158      	movs	r1, #88	; 0x58
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f010 fe85 	bl	80285a8 <_ZdlPvj>
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	4618      	mov	r0, r3
 80178a2:	3708      	adds	r7, #8
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}

080178a8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b086      	sub	sp, #24
 80178ac:	af02      	add	r7, sp, #8
 80178ae:	60f8      	str	r0, [r7, #12]
 80178b0:	60b9      	str	r1, [r7, #8]
 80178b2:	607a      	str	r2, [r7, #4]
 80178b4:	603b      	str	r3, [r7, #0]
 80178b6:	68f8      	ldr	r0, [r7, #12]
 80178b8:	8bbb      	ldrh	r3, [r7, #28]
 80178ba:	9301      	str	r3, [sp, #4]
 80178bc:	8b3b      	ldrh	r3, [r7, #24]
 80178be:	9300      	str	r3, [sp, #0]
 80178c0:	683b      	ldr	r3, [r7, #0]
 80178c2:	687a      	ldr	r2, [r7, #4]
 80178c4:	68b9      	ldr	r1, [r7, #8]
 80178c6:	f7ff fe5f 	bl	8017588 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80178ca:	4a04      	ldr	r2, [pc, #16]	; (80178dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	601a      	str	r2, [r3, #0]
    }
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	4618      	mov	r0, r3
 80178d4:	3710      	adds	r7, #16
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bd80      	pop	{r7, pc}
 80178da:	bf00      	nop
 80178dc:	0802aea4 	.word	0x0802aea4

080178e0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b086      	sub	sp, #24
 80178e4:	af02      	add	r7, sp, #8
 80178e6:	60f8      	str	r0, [r7, #12]
 80178e8:	60b9      	str	r1, [r7, #8]
 80178ea:	607a      	str	r2, [r7, #4]
 80178ec:	603b      	str	r3, [r7, #0]
 80178ee:	68f8      	ldr	r0, [r7, #12]
 80178f0:	8bbb      	ldrh	r3, [r7, #28]
 80178f2:	9301      	str	r3, [sp, #4]
 80178f4:	8b3b      	ldrh	r3, [r7, #24]
 80178f6:	9300      	str	r3, [sp, #0]
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	687a      	ldr	r2, [r7, #4]
 80178fc:	68b9      	ldr	r1, [r7, #8]
 80178fe:	f7ff ffd3 	bl	80178a8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017902:	4a04      	ldr	r2, [pc, #16]	; (8017914 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	601a      	str	r2, [r3, #0]
    }
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	4618      	mov	r0, r3
 801790c:	3710      	adds	r7, #16
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}
 8017912:	bf00      	nop
 8017914:	0802aca8 	.word	0x0802aca8

08017918 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8017918:	b480      	push	{r7}
 801791a:	b083      	sub	sp, #12
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	4a04      	ldr	r2, [pc, #16]	; (8017934 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	601a      	str	r2, [r3, #0]
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	4618      	mov	r0, r3
 801792a:	370c      	adds	r7, #12
 801792c:	46bd      	mov	sp, r7
 801792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017932:	4770      	bx	lr
 8017934:	0802ac90 	.word	0x0802ac90

08017938 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	4618      	mov	r0, r3
 8017944:	f7ff ffe8 	bl	8017918 <_ZN8touchgfx15TouchControllerC1Ev>
 8017948:	4a03      	ldr	r2, [pc, #12]	; (8017958 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	601a      	str	r2, [r3, #0]
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	4618      	mov	r0, r3
 8017952:	3708      	adds	r7, #8
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}
 8017958:	0802ac78 	.word	0x0802ac78

0801795c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 801795c:	b590      	push	{r4, r7, lr}
 801795e:	b085      	sub	sp, #20
 8017960:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8017962:	f7fd fe3b 	bl	80155dc <_ZN14BitmapDatabase11getInstanceEv>
 8017966:	4604      	mov	r4, r0
 8017968:	f7fd fe42 	bl	80155f0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801796c:	4603      	mov	r3, r0
 801796e:	4619      	mov	r1, r3
 8017970:	2300      	movs	r3, #0
 8017972:	9300      	str	r3, [sp, #0]
 8017974:	2300      	movs	r3, #0
 8017976:	2200      	movs	r2, #0
 8017978:	4620      	mov	r0, r4
 801797a:	f007 f8dd 	bl	801eb38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801797e:	4809      	ldr	r0, [pc, #36]	; (80179a4 <touchgfx_init+0x48>)
 8017980:	f7ff fd5c 	bl	801743c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8017984:	2000      	movs	r0, #0
 8017986:	f7fd fe57 	bl	8015638 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801798a:	4807      	ldr	r0, [pc, #28]	; (80179a8 <touchgfx_init+0x4c>)
 801798c:	f007 f822 	bl	801e9d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8017990:	f7ff fec8 	bl	8017724 <_ZN12FrontendHeap11getInstanceEv>
 8017994:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8017996:	4805      	ldr	r0, [pc, #20]	; (80179ac <touchgfx_init+0x50>)
 8017998:	f7fe ffc4 	bl	8016924 <_ZN11TouchGFXHAL10initializeEv>
}
 801799c:	bf00      	nop
 801799e:	370c      	adds	r7, #12
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd90      	pop	{r4, r7, pc}
 80179a4:	2000be5c 	.word	0x2000be5c
 80179a8:	20000054 	.word	0x20000054
 80179ac:	2000be60 	.word	0x2000be60

080179b0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80179b4:	4802      	ldr	r0, [pc, #8]	; (80179c0 <touchgfx_taskEntry+0x10>)
 80179b6:	f001 fca0 	bl	80192fa <_ZN8touchgfx3HAL9taskEntryEv>
}
 80179ba:	bf00      	nop
 80179bc:	bd80      	pop	{r7, pc}
 80179be:	bf00      	nop
 80179c0:	2000be60 	.word	0x2000be60

080179c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b082      	sub	sp, #8
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	4618      	mov	r0, r3
 80179d0:	f000 ff10 	bl	80187f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80179d4:	4a03      	ldr	r2, [pc, #12]	; (80179e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	601a      	str	r2, [r3, #0]
    {
    }
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	4618      	mov	r0, r3
 80179de:	3708      	adds	r7, #8
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	0802ae4c 	.word	0x0802ae4c

080179e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b082      	sub	sp, #8
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
    {
    }
 80179f0:	4a05      	ldr	r2, [pc, #20]	; (8017a08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	4618      	mov	r0, r3
 80179fa:	f000 fef9 	bl	80187f0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	4618      	mov	r0, r3
 8017a02:	3708      	adds	r7, #8
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}
 8017a08:	0802ae4c 	.word	0x0802ae4c

08017a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
    }
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	f7ff ffe7 	bl	80179e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017a1a:	2118      	movs	r1, #24
 8017a1c:	6878      	ldr	r0, [r7, #4]
 8017a1e:	f010 fdc3 	bl	80285a8 <_ZdlPvj>
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	4618      	mov	r0, r3
 8017a26:	3708      	adds	r7, #8
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}

08017a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	4618      	mov	r0, r3
 8017a38:	f000 fedc 	bl	80187f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017a3c:	4a03      	ldr	r2, [pc, #12]	; (8017a4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	601a      	str	r2, [r3, #0]
    }
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	4618      	mov	r0, r3
 8017a46:	3708      	adds	r7, #8
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}
 8017a4c:	0802ae18 	.word	0x0802ae18

08017a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
    }
 8017a58:	4a05      	ldr	r2, [pc, #20]	; (8017a70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	601a      	str	r2, [r3, #0]
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	4618      	mov	r0, r3
 8017a62:	f000 fec5 	bl	80187f0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3708      	adds	r7, #8
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}
 8017a70:	0802ae18 	.word	0x0802ae18

08017a74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
    }
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7ff ffe7 	bl	8017a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017a82:	f642 014c 	movw	r1, #10316	; 0x284c
 8017a86:	6878      	ldr	r0, [r7, #4]
 8017a88:	f010 fd8e 	bl	80285a8 <_ZdlPvj>
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	4618      	mov	r0, r3
 8017a90:	3708      	adds	r7, #8
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
	...

08017a98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f000 fea6 	bl	80187f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017aa8:	4a03      	ldr	r2, [pc, #12]	; (8017ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	601a      	str	r2, [r3, #0]
    }
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3708      	adds	r7, #8
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}
 8017ab8:	0802ade4 	.word	0x0802ade4

08017abc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b082      	sub	sp, #8
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
    }
 8017ac4:	4a05      	ldr	r2, [pc, #20]	; (8017adc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	601a      	str	r2, [r3, #0]
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	4618      	mov	r0, r3
 8017ace:	f000 fe8f 	bl	80187f0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	3708      	adds	r7, #8
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}
 8017adc:	0802ade4 	.word	0x0802ade4

08017ae0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b082      	sub	sp, #8
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
    }
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f7ff ffe7 	bl	8017abc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8017aee:	215c      	movs	r1, #92	; 0x5c
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f010 fd59 	bl	80285a8 <_ZdlPvj>
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	4618      	mov	r0, r3
 8017afa:	3708      	adds	r7, #8
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}

08017b00 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b082      	sub	sp, #8
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
 8017b08:	4a11      	ldr	r2, [pc, #68]	; (8017b50 <_ZN12FrontendHeapD1Ev+0x50>)
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	601a      	str	r2, [r3, #0]
 8017b0e:	687a      	ldr	r2, [r7, #4]
 8017b10:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8017b14:	4413      	add	r3, r2
 8017b16:	4618      	mov	r0, r3
 8017b18:	f7fd fe4e 	bl	80157b8 <_ZN19FrontendApplicationD1Ev>
 8017b1c:	687a      	ldr	r2, [r7, #4]
 8017b1e:	f642 0378 	movw	r3, #10360	; 0x2878
 8017b22:	4413      	add	r3, r2
 8017b24:	4618      	mov	r0, r3
 8017b26:	f7ff ffc9 	bl	8017abc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	332c      	adds	r3, #44	; 0x2c
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7ff ff8e 	bl	8017a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	3314      	adds	r3, #20
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f7ff ff55 	bl	80179e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7ff fe1d 	bl	8017780 <_ZN16FrontendHeapBaseD1Ev>
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	4618      	mov	r0, r3
 8017b4a:	3708      	adds	r7, #8
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	0802add0 	.word	0x0802add0

08017b54 <_ZN12FrontendHeapD0Ev>:
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b082      	sub	sp, #8
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
 8017b5c:	6878      	ldr	r0, [r7, #4]
 8017b5e:	f7ff ffcf 	bl	8017b00 <_ZN12FrontendHeapD1Ev>
 8017b62:	f642 2128 	movw	r1, #10792	; 0x2a28
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f010 fd1e 	bl	80285a8 <_ZdlPvj>
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	4618      	mov	r0, r3
 8017b70:	3708      	adds	r7, #8
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}
	...

08017b78 <_Z41__static_initialization_and_destruction_0ii>:
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b084      	sub	sp, #16
 8017b7c:	af02      	add	r7, sp, #8
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	6039      	str	r1, [r7, #0]
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	d119      	bne.n	8017bbc <_Z41__static_initialization_and_destruction_0ii+0x44>
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b8e:	4293      	cmp	r3, r2
 8017b90:	d114      	bne.n	8017bbc <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8017b92:	4818      	ldr	r0, [pc, #96]	; (8017bf4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017b94:	f7ff fed0 	bl	8017938 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8017b98:	4817      	ldr	r0, [pc, #92]	; (8017bf8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017b9a:	f7ff f94d 	bl	8016e38 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8017b9e:	4817      	ldr	r0, [pc, #92]	; (8017bfc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017ba0:	f009 f9f0 	bl	8020f84 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8017ba4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017ba8:	9301      	str	r3, [sp, #4]
 8017baa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8017bae:	9300      	str	r3, [sp, #0]
 8017bb0:	4b10      	ldr	r3, [pc, #64]	; (8017bf4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017bb2:	4a12      	ldr	r2, [pc, #72]	; (8017bfc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017bb4:	4910      	ldr	r1, [pc, #64]	; (8017bf8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017bb6:	4812      	ldr	r0, [pc, #72]	; (8017c00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017bb8:	f7ff fe92 	bl	80178e0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d113      	bne.n	8017bea <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bc8:	4293      	cmp	r3, r2
 8017bca:	d10e      	bne.n	8017bea <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017bcc:	480c      	ldr	r0, [pc, #48]	; (8017c00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017bce:	f7fe ff0f 	bl	80169f0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8017bd2:	480c      	ldr	r0, [pc, #48]	; (8017c04 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8017bd4:	f7f8 fb62 	bl	801029c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8017bd8:	4808      	ldr	r0, [pc, #32]	; (8017bfc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017bda:	f7ff fe43 	bl	8017864 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8017bde:	4806      	ldr	r0, [pc, #24]	; (8017bf8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017be0:	f7ff f954 	bl	8016e8c <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8017be4:	4803      	ldr	r0, [pc, #12]	; (8017bf4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017be6:	f7fe fc79 	bl	80164dc <_ZN20STM32TouchControllerD1Ev>
}
 8017bea:	bf00      	nop
 8017bec:	3708      	adds	r7, #8
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}
 8017bf2:	bf00      	nop
 8017bf4:	2000b1e0 	.word	0x2000b1e0
 8017bf8:	2000b1e4 	.word	0x2000b1e4
 8017bfc:	2000be04 	.word	0x2000be04
 8017c00:	2000be60 	.word	0x2000be60
 8017c04:	20000054 	.word	0x20000054

08017c08 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8017c08:	b480      	push	{r7}
 8017c0a:	b083      	sub	sp, #12
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8017c10:	2301      	movs	r3, #1
    }
 8017c12:	4618      	mov	r0, r3
 8017c14:	370c      	adds	r7, #12
 8017c16:	46bd      	mov	sp, r7
 8017c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1c:	4770      	bx	lr

08017c1e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8017c1e:	b480      	push	{r7}
 8017c20:	b083      	sub	sp, #12
 8017c22:	af00      	add	r7, sp, #0
 8017c24:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8017c26:	2354      	movs	r3, #84	; 0x54
    }
 8017c28:	4618      	mov	r0, r3
 8017c2a:	370c      	adds	r7, #12
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c32:	4770      	bx	lr

08017c34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8017c34:	b480      	push	{r7}
 8017c36:	b083      	sub	sp, #12
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	460b      	mov	r3, r1
 8017c3e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017c40:	887b      	ldrh	r3, [r7, #2]
 8017c42:	2254      	movs	r2, #84	; 0x54
 8017c44:	fb02 f303 	mul.w	r3, r2, r3
 8017c48:	3308      	adds	r3, #8
 8017c4a:	687a      	ldr	r2, [r7, #4]
 8017c4c:	4413      	add	r3, r2
    }
 8017c4e:	4618      	mov	r0, r3
 8017c50:	370c      	adds	r7, #12
 8017c52:	46bd      	mov	sp, r7
 8017c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c58:	4770      	bx	lr

08017c5a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8017c5a:	b480      	push	{r7}
 8017c5c:	b083      	sub	sp, #12
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
 8017c62:	460b      	mov	r3, r1
 8017c64:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017c66:	887b      	ldrh	r3, [r7, #2]
 8017c68:	2254      	movs	r2, #84	; 0x54
 8017c6a:	fb02 f303 	mul.w	r3, r2, r3
 8017c6e:	3308      	adds	r3, #8
 8017c70:	687a      	ldr	r2, [r7, #4]
 8017c72:	4413      	add	r3, r2
    }
 8017c74:	4618      	mov	r0, r3
 8017c76:	370c      	adds	r7, #12
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7e:	4770      	bx	lr

08017c80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017c80:	b480      	push	{r7}
 8017c82:	b083      	sub	sp, #12
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017c88:	2301      	movs	r3, #1
    }
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	370c      	adds	r7, #12
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c94:	4770      	bx	lr

08017c96 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017c96:	b480      	push	{r7}
 8017c98:	b083      	sub	sp, #12
 8017c9a:	af00      	add	r7, sp, #0
 8017c9c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017c9e:	f642 0344 	movw	r3, #10308	; 0x2844
    }
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	370c      	adds	r7, #12
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr

08017cae <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017cae:	b480      	push	{r7}
 8017cb0:	b083      	sub	sp, #12
 8017cb2:	af00      	add	r7, sp, #0
 8017cb4:	6078      	str	r0, [r7, #4]
 8017cb6:	460b      	mov	r3, r1
 8017cb8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017cba:	887b      	ldrh	r3, [r7, #2]
 8017cbc:	f642 0244 	movw	r2, #10308	; 0x2844
 8017cc0:	fb02 f303 	mul.w	r3, r2, r3
 8017cc4:	3308      	adds	r3, #8
 8017cc6:	687a      	ldr	r2, [r7, #4]
 8017cc8:	4413      	add	r3, r2
    }
 8017cca:	4618      	mov	r0, r3
 8017ccc:	370c      	adds	r7, #12
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd4:	4770      	bx	lr

08017cd6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017cd6:	b480      	push	{r7}
 8017cd8:	b083      	sub	sp, #12
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	6078      	str	r0, [r7, #4]
 8017cde:	460b      	mov	r3, r1
 8017ce0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017ce2:	887b      	ldrh	r3, [r7, #2]
 8017ce4:	f642 0244 	movw	r2, #10308	; 0x2844
 8017ce8:	fb02 f303 	mul.w	r3, r2, r3
 8017cec:	3308      	adds	r3, #8
 8017cee:	687a      	ldr	r2, [r7, #4]
 8017cf0:	4413      	add	r3, r2
    }
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	370c      	adds	r7, #12
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfc:	4770      	bx	lr

08017cfe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017cfe:	b480      	push	{r7}
 8017d00:	b083      	sub	sp, #12
 8017d02:	af00      	add	r7, sp, #0
 8017d04:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017d06:	2301      	movs	r3, #1
    }
 8017d08:	4618      	mov	r0, r3
 8017d0a:	370c      	adds	r7, #12
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d12:	4770      	bx	lr

08017d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017d14:	b480      	push	{r7}
 8017d16:	b083      	sub	sp, #12
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017d1c:	2310      	movs	r3, #16
    }
 8017d1e:	4618      	mov	r0, r3
 8017d20:	370c      	adds	r7, #12
 8017d22:	46bd      	mov	sp, r7
 8017d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d28:	4770      	bx	lr

08017d2a <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017d2a:	b480      	push	{r7}
 8017d2c:	b083      	sub	sp, #12
 8017d2e:	af00      	add	r7, sp, #0
 8017d30:	6078      	str	r0, [r7, #4]
 8017d32:	460b      	mov	r3, r1
 8017d34:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017d36:	887b      	ldrh	r3, [r7, #2]
 8017d38:	011b      	lsls	r3, r3, #4
 8017d3a:	3308      	adds	r3, #8
 8017d3c:	687a      	ldr	r2, [r7, #4]
 8017d3e:	4413      	add	r3, r2
    }
 8017d40:	4618      	mov	r0, r3
 8017d42:	370c      	adds	r7, #12
 8017d44:	46bd      	mov	sp, r7
 8017d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4a:	4770      	bx	lr

08017d4c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017d4c:	b480      	push	{r7}
 8017d4e:	b083      	sub	sp, #12
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
 8017d54:	460b      	mov	r3, r1
 8017d56:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017d58:	887b      	ldrh	r3, [r7, #2]
 8017d5a:	011b      	lsls	r3, r3, #4
 8017d5c:	3308      	adds	r3, #8
 8017d5e:	687a      	ldr	r2, [r7, #4]
 8017d60:	4413      	add	r3, r2
    }
 8017d62:	4618      	mov	r0, r3
 8017d64:	370c      	adds	r7, #12
 8017d66:	46bd      	mov	sp, r7
 8017d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6c:	4770      	bx	lr

08017d6e <_GLOBAL__sub_I_touchgfx_init>:
 8017d6e:	b580      	push	{r7, lr}
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017d76:	2001      	movs	r0, #1
 8017d78:	f7ff fefe 	bl	8017b78 <_Z41__static_initialization_and_destruction_0ii>
 8017d7c:	bd80      	pop	{r7, pc}

08017d7e <_GLOBAL__sub_D_touchgfx_init>:
 8017d7e:	b580      	push	{r7, lr}
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017d86:	2000      	movs	r0, #0
 8017d88:	f7ff fef6 	bl	8017b78 <_Z41__static_initialization_and_destruction_0ii>
 8017d8c:	bd80      	pop	{r7, pc}

08017d8e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8017d8e:	b580      	push	{r7, lr}
 8017d90:	b082      	sub	sp, #8
 8017d92:	af00      	add	r7, sp, #0
 8017d94:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	3318      	adds	r3, #24
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	6878      	ldr	r0, [r7, #4]
 8017da0:	4798      	blx	r3
    }
 8017da2:	bf00      	nop
 8017da4:	3708      	adds	r7, #8
 8017da6:	46bd      	mov	sp, r7
 8017da8:	bd80      	pop	{r7, pc}

08017daa <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8017daa:	b480      	push	{r7}
 8017dac:	b083      	sub	sp, #12
 8017dae:	af00      	add	r7, sp, #0
 8017db0:	6078      	str	r0, [r7, #4]
 8017db2:	460b      	mov	r3, r1
 8017db4:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	78fa      	ldrb	r2, [r7, #3]
 8017dba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8017dbe:	bf00      	nop
 8017dc0:	370c      	adds	r7, #12
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc8:	4770      	bx	lr

08017dca <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8017dca:	b480      	push	{r7}
 8017dcc:	b083      	sub	sp, #12
 8017dce:	af00      	add	r7, sp, #0
 8017dd0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017dd8:	3301      	adds	r3, #1
 8017dda:	b2da      	uxtb	r2, r3
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8017de2:	bf00      	nop
 8017de4:	370c      	adds	r7, #12
 8017de6:	46bd      	mov	sp, r7
 8017de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dec:	4770      	bx	lr
	...

08017df0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b082      	sub	sp, #8
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
 8017df8:	460b      	mov	r3, r1
 8017dfa:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8017dfc:	78fb      	ldrb	r3, [r7, #3]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d002      	beq.n	8017e08 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8017e02:	78fb      	ldrb	r3, [r7, #3]
 8017e04:	2b02      	cmp	r3, #2
 8017e06:	d105      	bne.n	8017e14 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	78fa      	ldrb	r2, [r7, #3]
 8017e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8017e10:	2301      	movs	r3, #1
 8017e12:	e027      	b.n	8017e64 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8017e14:	78fb      	ldrb	r3, [r7, #3]
 8017e16:	2b01      	cmp	r3, #1
 8017e18:	d123      	bne.n	8017e62 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d014      	beq.n	8017e4c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	3380      	adds	r3, #128	; 0x80
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	4798      	blx	r3
 8017e2e:	4603      	mov	r3, r0
 8017e30:	461a      	mov	r2, r3
 8017e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d008      	beq.n	8017e4c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017e3a:	4b0c      	ldr	r3, [pc, #48]	; (8017e6c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8017e3c:	781b      	ldrb	r3, [r3, #0]
 8017e3e:	f083 0301 	eor.w	r3, r3, #1
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d001      	beq.n	8017e4c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017e48:	2301      	movs	r3, #1
 8017e4a:	e000      	b.n	8017e4e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d005      	beq.n	8017e5e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	78fa      	ldrb	r2, [r7, #3]
 8017e56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	e002      	b.n	8017e64 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	e000      	b.n	8017e64 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8017e62:	2300      	movs	r3, #0
    }
 8017e64:	4618      	mov	r0, r3
 8017e66:	3708      	adds	r7, #8
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}
 8017e6c:	2000beec 	.word	0x2000beec

08017e70 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8017e70:	b480      	push	{r7}
 8017e72:	b083      	sub	sp, #12
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]
 8017e78:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	683a      	ldr	r2, [r7, #0]
 8017e7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8017e80:	bf00      	nop
 8017e82:	370c      	adds	r7, #12
 8017e84:	46bd      	mov	sp, r7
 8017e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8a:	4770      	bx	lr

08017e8c <__NVIC_EnableIRQ>:
{
 8017e8c:	b480      	push	{r7}
 8017e8e:	b083      	sub	sp, #12
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	4603      	mov	r3, r0
 8017e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	db0b      	blt.n	8017eb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017e9e:	79fb      	ldrb	r3, [r7, #7]
 8017ea0:	f003 021f 	and.w	r2, r3, #31
 8017ea4:	4907      	ldr	r1, [pc, #28]	; (8017ec4 <__NVIC_EnableIRQ+0x38>)
 8017ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017eaa:	095b      	lsrs	r3, r3, #5
 8017eac:	2001      	movs	r0, #1
 8017eae:	fa00 f202 	lsl.w	r2, r0, r2
 8017eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017eb6:	bf00      	nop
 8017eb8:	370c      	adds	r7, #12
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec0:	4770      	bx	lr
 8017ec2:	bf00      	nop
 8017ec4:	e000e100 	.word	0xe000e100

08017ec8 <__NVIC_DisableIRQ>:
{
 8017ec8:	b480      	push	{r7}
 8017eca:	b083      	sub	sp, #12
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	4603      	mov	r3, r0
 8017ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	db12      	blt.n	8017f00 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017eda:	79fb      	ldrb	r3, [r7, #7]
 8017edc:	f003 021f 	and.w	r2, r3, #31
 8017ee0:	490a      	ldr	r1, [pc, #40]	; (8017f0c <__NVIC_DisableIRQ+0x44>)
 8017ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ee6:	095b      	lsrs	r3, r3, #5
 8017ee8:	2001      	movs	r0, #1
 8017eea:	fa00 f202 	lsl.w	r2, r0, r2
 8017eee:	3320      	adds	r3, #32
 8017ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017ef4:	f3bf 8f4f 	dsb	sy
}
 8017ef8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017efa:	f3bf 8f6f 	isb	sy
}
 8017efe:	bf00      	nop
}
 8017f00:	bf00      	nop
 8017f02:	370c      	adds	r7, #12
 8017f04:	46bd      	mov	sp, r7
 8017f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0a:	4770      	bx	lr
 8017f0c:	e000e100 	.word	0xe000e100

08017f10 <__NVIC_SetPriority>:
{
 8017f10:	b480      	push	{r7}
 8017f12:	b083      	sub	sp, #12
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	4603      	mov	r3, r0
 8017f18:	6039      	str	r1, [r7, #0]
 8017f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	db0a      	blt.n	8017f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017f24:	683b      	ldr	r3, [r7, #0]
 8017f26:	b2da      	uxtb	r2, r3
 8017f28:	490c      	ldr	r1, [pc, #48]	; (8017f5c <__NVIC_SetPriority+0x4c>)
 8017f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f2e:	0112      	lsls	r2, r2, #4
 8017f30:	b2d2      	uxtb	r2, r2
 8017f32:	440b      	add	r3, r1
 8017f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017f38:	e00a      	b.n	8017f50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	b2da      	uxtb	r2, r3
 8017f3e:	4908      	ldr	r1, [pc, #32]	; (8017f60 <__NVIC_SetPriority+0x50>)
 8017f40:	79fb      	ldrb	r3, [r7, #7]
 8017f42:	f003 030f 	and.w	r3, r3, #15
 8017f46:	3b04      	subs	r3, #4
 8017f48:	0112      	lsls	r2, r2, #4
 8017f4a:	b2d2      	uxtb	r2, r2
 8017f4c:	440b      	add	r3, r1
 8017f4e:	761a      	strb	r2, [r3, #24]
}
 8017f50:	bf00      	nop
 8017f52:	370c      	adds	r7, #12
 8017f54:	46bd      	mov	sp, r7
 8017f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5a:	4770      	bx	lr
 8017f5c:	e000e100 	.word	0xe000e100
 8017f60:	e000ed00 	.word	0xe000ed00

08017f64 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8017f64:	b5b0      	push	{r4, r5, r7, lr}
 8017f66:	b082      	sub	sp, #8
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f001 fc88 	bl	8019884 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8017f74:	687d      	ldr	r5, [r7, #4]
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	334c      	adds	r3, #76	; 0x4c
 8017f7c:	681c      	ldr	r4, [r3, #0]
 8017f7e:	f004 fb13 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 8017f82:	4603      	mov	r3, r0
 8017f84:	4619      	mov	r1, r3
 8017f86:	4628      	mov	r0, r5
 8017f88:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	490d      	ldr	r1, [pc, #52]	; (8017fc4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8017f8e:	4618      	mov	r0, r3
 8017f90:	f7ff ff6e 	bl	8017e70 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	2101      	movs	r1, #1
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f7ff ff29 	bl	8017df0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8017f9e:	6878      	ldr	r0, [r7, #4]
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	3374      	adds	r3, #116	; 0x74
 8017fa6:	681c      	ldr	r4, [r3, #0]
 8017fa8:	2300      	movs	r3, #0
 8017faa:	2200      	movs	r2, #0
 8017fac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8017fb0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	2101      	movs	r1, #1
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7ff fef7 	bl	8017daa <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8017fbc:	bf00      	nop
 8017fbe:	3708      	adds	r7, #8
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8017fc4:	08016b89 	.word	0x08016b89

08017fc8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b082      	sub	sp, #8
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017fd0:	2109      	movs	r1, #9
 8017fd2:	205a      	movs	r0, #90	; 0x5a
 8017fd4:	f7ff ff9c 	bl	8017f10 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017fd8:	2109      	movs	r1, #9
 8017fda:	2058      	movs	r0, #88	; 0x58
 8017fdc:	f7ff ff98 	bl	8017f10 <__NVIC_SetPriority>
}
 8017fe0:	bf00      	nop
 8017fe2:	3708      	adds	r7, #8
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bd80      	pop	{r7, pc}

08017fe8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b082      	sub	sp, #8
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017ff0:	205a      	movs	r0, #90	; 0x5a
 8017ff2:	f7ff ff4b 	bl	8017e8c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8017ff6:	2058      	movs	r0, #88	; 0x58
 8017ff8:	f7ff ff48 	bl	8017e8c <__NVIC_EnableIRQ>
}
 8017ffc:	bf00      	nop
 8017ffe:	3708      	adds	r7, #8
 8018000:	46bd      	mov	sp, r7
 8018002:	bd80      	pop	{r7, pc}

08018004 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b082      	sub	sp, #8
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801800c:	205a      	movs	r0, #90	; 0x5a
 801800e:	f7ff ff5b 	bl	8017ec8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8018012:	2058      	movs	r0, #88	; 0x58
 8018014:	f7ff ff58 	bl	8017ec8 <__NVIC_DisableIRQ>
}
 8018018:	bf00      	nop
 801801a:	3708      	adds	r7, #8
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8018020:	b480      	push	{r7}
 8018022:	b083      	sub	sp, #12
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8018028:	4b11      	ldr	r3, [pc, #68]	; (8018070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801802a:	68db      	ldr	r3, [r3, #12]
 801802c:	b29b      	uxth	r3, r3
 801802e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018032:	b29b      	uxth	r3, r3
 8018034:	3b01      	subs	r3, #1
 8018036:	b29a      	uxth	r2, r3
 8018038:	4b0e      	ldr	r3, [pc, #56]	; (8018074 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801803a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801803c:	4b0c      	ldr	r3, [pc, #48]	; (8018070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801803e:	691b      	ldr	r3, [r3, #16]
 8018040:	b29b      	uxth	r3, r3
 8018042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018046:	b29b      	uxth	r3, r3
 8018048:	3b01      	subs	r3, #1
 801804a:	b29a      	uxth	r2, r3
 801804c:	4b0a      	ldr	r3, [pc, #40]	; (8018078 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801804e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8018050:	4b08      	ldr	r3, [pc, #32]	; (8018074 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8018052:	881a      	ldrh	r2, [r3, #0]
 8018054:	4b06      	ldr	r3, [pc, #24]	; (8018070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8018056:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8018058:	4b05      	ldr	r3, [pc, #20]	; (8018070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801805a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801805c:	4a04      	ldr	r2, [pc, #16]	; (8018070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801805e:	f043 0301 	orr.w	r3, r3, #1
 8018062:	6353      	str	r3, [r2, #52]	; 0x34
}
 8018064:	bf00      	nop
 8018066:	370c      	adds	r7, #12
 8018068:	46bd      	mov	sp, r7
 801806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806e:	4770      	bx	lr
 8018070:	40016800 	.word	0x40016800
 8018074:	2000bed8 	.word	0x2000bed8
 8018078:	2000beda 	.word	0x2000beda

0801807c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801807c:	b480      	push	{r7}
 801807e:	b083      	sub	sp, #12
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8018084:	4b03      	ldr	r3, [pc, #12]	; (8018094 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8018086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8018088:	4618      	mov	r0, r3
 801808a:	370c      	adds	r7, #12
 801808c:	46bd      	mov	sp, r7
 801808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018092:	4770      	bx	lr
 8018094:	40016884 	.word	0x40016884

08018098 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8018098:	b480      	push	{r7}
 801809a:	b083      	sub	sp, #12
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
 80180a0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80180a2:	4a06      	ldr	r2, [pc, #24]	; (80180bc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80180a4:	683b      	ldr	r3, [r7, #0]
 80180a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80180a8:	4b05      	ldr	r3, [pc, #20]	; (80180c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80180aa:	2201      	movs	r2, #1
 80180ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80180ae:	bf00      	nop
 80180b0:	370c      	adds	r7, #12
 80180b2:	46bd      	mov	sp, r7
 80180b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b8:	4770      	bx	lr
 80180ba:	bf00      	nop
 80180bc:	40016884 	.word	0x40016884
 80180c0:	40016800 	.word	0x40016800

080180c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
 80180cc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6839      	ldr	r1, [r7, #0]
 80180d2:	4618      	mov	r0, r3
 80180d4:	f001 f8e6 	bl	80192a4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80180d8:	bf00      	nop
 80180da:	3708      	adds	r7, #8
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}

080180e0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80180e0:	b480      	push	{r7}
 80180e2:	b085      	sub	sp, #20
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80180e8:	4b0d      	ldr	r3, [pc, #52]	; (8018120 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80180ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180ec:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80180ee:	4b0c      	ldr	r3, [pc, #48]	; (8018120 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80180f0:	68db      	ldr	r3, [r3, #12]
 80180f2:	b29b      	uxth	r3, r3
 80180f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80180f8:	b29b      	uxth	r3, r3
 80180fa:	3301      	adds	r3, #1
 80180fc:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80180fe:	89fa      	ldrh	r2, [r7, #14]
 8018100:	89bb      	ldrh	r3, [r7, #12]
 8018102:	429a      	cmp	r2, r3
 8018104:	d201      	bcs.n	801810a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8018106:	2300      	movs	r3, #0
 8018108:	e003      	b.n	8018112 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801810a:	89fa      	ldrh	r2, [r7, #14]
 801810c:	89bb      	ldrh	r3, [r7, #12]
 801810e:	1ad3      	subs	r3, r2, r3
 8018110:	b29b      	uxth	r3, r3
    }
}
 8018112:	4618      	mov	r0, r3
 8018114:	3714      	adds	r7, #20
 8018116:	46bd      	mov	sp, r7
 8018118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811c:	4770      	bx	lr
 801811e:	bf00      	nop
 8018120:	40016800 	.word	0x40016800

08018124 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8018124:	b580      	push	{r7, lr}
 8018126:	b082      	sub	sp, #8
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801812c:	4b1a      	ldr	r3, [pc, #104]	; (8018198 <HAL_LTDC_LineEventCallback+0x74>)
 801812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018130:	4a1a      	ldr	r2, [pc, #104]	; (801819c <HAL_LTDC_LineEventCallback+0x78>)
 8018132:	8812      	ldrh	r2, [r2, #0]
 8018134:	4293      	cmp	r3, r2
 8018136:	bf0c      	ite	eq
 8018138:	2301      	moveq	r3, #1
 801813a:	2300      	movne	r3, #0
 801813c:	b2db      	uxtb	r3, r3
 801813e:	2b00      	cmp	r3, #0
 8018140:	d017      	beq.n	8018172 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8018142:	4b17      	ldr	r3, [pc, #92]	; (80181a0 <HAL_LTDC_LineEventCallback+0x7c>)
 8018144:	881b      	ldrh	r3, [r3, #0]
 8018146:	4619      	mov	r1, r3
 8018148:	6878      	ldr	r0, [r7, #4]
 801814a:	f7ee fbff 	bl	800694c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801814e:	f7f8 fe33 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 8018152:	4603      	mov	r3, r0
 8018154:	4618      	mov	r0, r3
 8018156:	f7ff fe38 	bl	8017dca <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801815a:	f7fe fcd7 	bl	8016b0c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801815e:	f7f8 fe2b 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 8018162:	4603      	mov	r3, r0
 8018164:	4618      	mov	r0, r3
 8018166:	f001 fe15 	bl	8019d94 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801816a:	2000      	movs	r0, #0
 801816c:	f7fe f9d8 	bl	8016520 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8018170:	e00e      	b.n	8018190 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8018172:	4b0a      	ldr	r3, [pc, #40]	; (801819c <HAL_LTDC_LineEventCallback+0x78>)
 8018174:	881b      	ldrh	r3, [r3, #0]
 8018176:	4619      	mov	r1, r3
 8018178:	6878      	ldr	r0, [r7, #4]
 801817a:	f7ee fbe7 	bl	800694c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801817e:	2000      	movs	r0, #0
 8018180:	f7fe f9d9 	bl	8016536 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8018184:	f7f8 fe18 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 8018188:	4603      	mov	r3, r0
 801818a:	4618      	mov	r0, r3
 801818c:	f7ff fdff 	bl	8017d8e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8018190:	bf00      	nop
 8018192:	3708      	adds	r7, #8
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}
 8018198:	40016800 	.word	0x40016800
 801819c:	2000bed8 	.word	0x2000bed8
 80181a0:	2000beda 	.word	0x2000beda

080181a4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b082      	sub	sp, #8
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	4603      	mov	r3, r0
 80181ac:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80181ae:	20c8      	movs	r0, #200	; 0xc8
 80181b0:	f7f7 fd5a 	bl	800fc68 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80181b4:	f000 fa7a 	bl	80186ac <ft5336_I2C_InitializeIfRequired>
}
 80181b8:	bf00      	nop
 80181ba:	3708      	adds	r7, #8
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}

080181c0 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b083      	sub	sp, #12
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	4603      	mov	r3, r0
 80181c8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80181ca:	bf00      	nop
 80181cc:	370c      	adds	r7, #12
 80181ce:	46bd      	mov	sp, r7
 80181d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d4:	4770      	bx	lr

080181d6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80181d6:	b580      	push	{r7, lr}
 80181d8:	b084      	sub	sp, #16
 80181da:	af00      	add	r7, sp, #0
 80181dc:	4603      	mov	r3, r0
 80181de:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80181e0:	2300      	movs	r3, #0
 80181e2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80181e4:	2300      	movs	r3, #0
 80181e6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80181e8:	2300      	movs	r3, #0
 80181ea:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80181ec:	f000 fa5e 	bl	80186ac <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80181f0:	2300      	movs	r3, #0
 80181f2:	73fb      	strb	r3, [r7, #15]
 80181f4:	e010      	b.n	8018218 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80181f6:	88fb      	ldrh	r3, [r7, #6]
 80181f8:	b2db      	uxtb	r3, r3
 80181fa:	21a8      	movs	r1, #168	; 0xa8
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7f7 fd15 	bl	800fc2c <TS_IO_Read>
 8018202:	4603      	mov	r3, r0
 8018204:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8018206:	7b7b      	ldrb	r3, [r7, #13]
 8018208:	b2db      	uxtb	r3, r3
 801820a:	2b51      	cmp	r3, #81	; 0x51
 801820c:	d101      	bne.n	8018212 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 801820e:	2301      	movs	r3, #1
 8018210:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8018212:	7bfb      	ldrb	r3, [r7, #15]
 8018214:	3301      	adds	r3, #1
 8018216:	73fb      	strb	r3, [r7, #15]
 8018218:	7bfb      	ldrb	r3, [r7, #15]
 801821a:	2b02      	cmp	r3, #2
 801821c:	d802      	bhi.n	8018224 <ft5336_ReadID+0x4e>
 801821e:	7bbb      	ldrb	r3, [r7, #14]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d0e8      	beq.n	80181f6 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8018224:	7b7b      	ldrb	r3, [r7, #13]
 8018226:	b2db      	uxtb	r3, r3
 8018228:	b29b      	uxth	r3, r3
}
 801822a:	4618      	mov	r0, r3
 801822c:	3710      	adds	r7, #16
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}

08018232 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8018232:	b580      	push	{r7, lr}
 8018234:	b082      	sub	sp, #8
 8018236:	af00      	add	r7, sp, #0
 8018238:	4603      	mov	r3, r0
 801823a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 801823c:	88fb      	ldrh	r3, [r7, #6]
 801823e:	4618      	mov	r0, r3
 8018240:	f000 fa44 	bl	80186cc <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8018244:	88fb      	ldrh	r3, [r7, #6]
 8018246:	4618      	mov	r0, r3
 8018248:	f000 f932 	bl	80184b0 <ft5336_TS_DisableIT>
}
 801824c:	bf00      	nop
 801824e:	3708      	adds	r7, #8
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}

08018254 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b084      	sub	sp, #16
 8018258:	af00      	add	r7, sp, #0
 801825a:	4603      	mov	r3, r0
 801825c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 801825e:	2300      	movs	r3, #0
 8018260:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8018262:	88fb      	ldrh	r3, [r7, #6]
 8018264:	b2db      	uxtb	r3, r3
 8018266:	2102      	movs	r1, #2
 8018268:	4618      	mov	r0, r3
 801826a:	f7f7 fcdf 	bl	800fc2c <TS_IO_Read>
 801826e:	4603      	mov	r3, r0
 8018270:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8018272:	7bfb      	ldrb	r3, [r7, #15]
 8018274:	b2db      	uxtb	r3, r3
 8018276:	f003 030f 	and.w	r3, r3, #15
 801827a:	b2db      	uxtb	r3, r3
 801827c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 801827e:	7bfb      	ldrb	r3, [r7, #15]
 8018280:	b2db      	uxtb	r3, r3
 8018282:	2b05      	cmp	r3, #5
 8018284:	d901      	bls.n	801828a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8018286:	2300      	movs	r3, #0
 8018288:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 801828a:	7bfb      	ldrb	r3, [r7, #15]
 801828c:	b2da      	uxtb	r2, r3
 801828e:	4b05      	ldr	r3, [pc, #20]	; (80182a4 <ft5336_TS_DetectTouch+0x50>)
 8018290:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8018292:	4b04      	ldr	r3, [pc, #16]	; (80182a4 <ft5336_TS_DetectTouch+0x50>)
 8018294:	2200      	movs	r2, #0
 8018296:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8018298:	7bfb      	ldrb	r3, [r7, #15]
 801829a:	b2db      	uxtb	r3, r3
}
 801829c:	4618      	mov	r0, r3
 801829e:	3710      	adds	r7, #16
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}
 80182a4:	2000bedc 	.word	0x2000bedc

080182a8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b086      	sub	sp, #24
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	4603      	mov	r3, r0
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
 80182b4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80182b6:	2300      	movs	r3, #0
 80182b8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80182ba:	2300      	movs	r3, #0
 80182bc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80182be:	2300      	movs	r3, #0
 80182c0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80182c2:	2300      	movs	r3, #0
 80182c4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80182c6:	2300      	movs	r3, #0
 80182c8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80182ca:	4b6d      	ldr	r3, [pc, #436]	; (8018480 <ft5336_TS_GetXY+0x1d8>)
 80182cc:	789a      	ldrb	r2, [r3, #2]
 80182ce:	4b6c      	ldr	r3, [pc, #432]	; (8018480 <ft5336_TS_GetXY+0x1d8>)
 80182d0:	785b      	ldrb	r3, [r3, #1]
 80182d2:	429a      	cmp	r2, r3
 80182d4:	f080 80cf 	bcs.w	8018476 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80182d8:	4b69      	ldr	r3, [pc, #420]	; (8018480 <ft5336_TS_GetXY+0x1d8>)
 80182da:	789b      	ldrb	r3, [r3, #2]
 80182dc:	2b09      	cmp	r3, #9
 80182de:	d871      	bhi.n	80183c4 <ft5336_TS_GetXY+0x11c>
 80182e0:	a201      	add	r2, pc, #4	; (adr r2, 80182e8 <ft5336_TS_GetXY+0x40>)
 80182e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182e6:	bf00      	nop
 80182e8:	08018311 	.word	0x08018311
 80182ec:	08018323 	.word	0x08018323
 80182f0:	08018335 	.word	0x08018335
 80182f4:	08018347 	.word	0x08018347
 80182f8:	08018359 	.word	0x08018359
 80182fc:	0801836b 	.word	0x0801836b
 8018300:	0801837d 	.word	0x0801837d
 8018304:	0801838f 	.word	0x0801838f
 8018308:	080183a1 	.word	0x080183a1
 801830c:	080183b3 	.word	0x080183b3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8018310:	2304      	movs	r3, #4
 8018312:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8018314:	2303      	movs	r3, #3
 8018316:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8018318:	2306      	movs	r3, #6
 801831a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 801831c:	2305      	movs	r3, #5
 801831e:	753b      	strb	r3, [r7, #20]
      break;
 8018320:	e051      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8018322:	230a      	movs	r3, #10
 8018324:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8018326:	2309      	movs	r3, #9
 8018328:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 801832a:	230c      	movs	r3, #12
 801832c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 801832e:	230b      	movs	r3, #11
 8018330:	753b      	strb	r3, [r7, #20]
      break;
 8018332:	e048      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8018334:	2310      	movs	r3, #16
 8018336:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8018338:	230f      	movs	r3, #15
 801833a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 801833c:	2312      	movs	r3, #18
 801833e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8018340:	2311      	movs	r3, #17
 8018342:	753b      	strb	r3, [r7, #20]
      break;
 8018344:	e03f      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8018346:	2316      	movs	r3, #22
 8018348:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 801834a:	2315      	movs	r3, #21
 801834c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 801834e:	2318      	movs	r3, #24
 8018350:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8018352:	2317      	movs	r3, #23
 8018354:	753b      	strb	r3, [r7, #20]
      break;
 8018356:	e036      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8018358:	231c      	movs	r3, #28
 801835a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 801835c:	231b      	movs	r3, #27
 801835e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8018360:	231e      	movs	r3, #30
 8018362:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8018364:	231d      	movs	r3, #29
 8018366:	753b      	strb	r3, [r7, #20]
      break;
 8018368:	e02d      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 801836a:	2322      	movs	r3, #34	; 0x22
 801836c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 801836e:	2321      	movs	r3, #33	; 0x21
 8018370:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8018372:	2324      	movs	r3, #36	; 0x24
 8018374:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8018376:	2323      	movs	r3, #35	; 0x23
 8018378:	753b      	strb	r3, [r7, #20]
      break;
 801837a:	e024      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 801837c:	2328      	movs	r3, #40	; 0x28
 801837e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8018380:	2327      	movs	r3, #39	; 0x27
 8018382:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8018384:	232a      	movs	r3, #42	; 0x2a
 8018386:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8018388:	2329      	movs	r3, #41	; 0x29
 801838a:	753b      	strb	r3, [r7, #20]
      break;
 801838c:	e01b      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 801838e:	232e      	movs	r3, #46	; 0x2e
 8018390:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8018392:	232d      	movs	r3, #45	; 0x2d
 8018394:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8018396:	2330      	movs	r3, #48	; 0x30
 8018398:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 801839a:	232f      	movs	r3, #47	; 0x2f
 801839c:	753b      	strb	r3, [r7, #20]
      break;
 801839e:	e012      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80183a0:	2334      	movs	r3, #52	; 0x34
 80183a2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80183a4:	2333      	movs	r3, #51	; 0x33
 80183a6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80183a8:	2336      	movs	r3, #54	; 0x36
 80183aa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80183ac:	2335      	movs	r3, #53	; 0x35
 80183ae:	753b      	strb	r3, [r7, #20]
      break;
 80183b0:	e009      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80183b2:	233a      	movs	r3, #58	; 0x3a
 80183b4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80183b6:	2339      	movs	r3, #57	; 0x39
 80183b8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80183ba:	233c      	movs	r3, #60	; 0x3c
 80183bc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80183be:	233b      	movs	r3, #59	; 0x3b
 80183c0:	753b      	strb	r3, [r7, #20]
      break;
 80183c2:	e000      	b.n	80183c6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80183c4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80183c6:	89fb      	ldrh	r3, [r7, #14]
 80183c8:	b2db      	uxtb	r3, r3
 80183ca:	7dfa      	ldrb	r2, [r7, #23]
 80183cc:	4611      	mov	r1, r2
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7f7 fc2c 	bl	800fc2c <TS_IO_Read>
 80183d4:	4603      	mov	r3, r0
 80183d6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80183d8:	7cfb      	ldrb	r3, [r7, #19]
 80183da:	b2db      	uxtb	r3, r3
 80183dc:	b29a      	uxth	r2, r3
 80183de:	4b29      	ldr	r3, [pc, #164]	; (8018484 <ft5336_TS_GetXY+0x1dc>)
 80183e0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80183e2:	89fb      	ldrh	r3, [r7, #14]
 80183e4:	b2db      	uxtb	r3, r3
 80183e6:	7dba      	ldrb	r2, [r7, #22]
 80183e8:	4611      	mov	r1, r2
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7f7 fc1e 	bl	800fc2c <TS_IO_Read>
 80183f0:	4603      	mov	r3, r0
 80183f2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80183f4:	7cfb      	ldrb	r3, [r7, #19]
 80183f6:	b2db      	uxtb	r3, r3
 80183f8:	021b      	lsls	r3, r3, #8
 80183fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80183fe:	b21a      	sxth	r2, r3
 8018400:	4b20      	ldr	r3, [pc, #128]	; (8018484 <ft5336_TS_GetXY+0x1dc>)
 8018402:	881b      	ldrh	r3, [r3, #0]
 8018404:	b21b      	sxth	r3, r3
 8018406:	4313      	orrs	r3, r2
 8018408:	b21b      	sxth	r3, r3
 801840a:	b29a      	uxth	r2, r3
 801840c:	4b1d      	ldr	r3, [pc, #116]	; (8018484 <ft5336_TS_GetXY+0x1dc>)
 801840e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8018410:	4b1c      	ldr	r3, [pc, #112]	; (8018484 <ft5336_TS_GetXY+0x1dc>)
 8018412:	881a      	ldrh	r2, [r3, #0]
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8018418:	89fb      	ldrh	r3, [r7, #14]
 801841a:	b2db      	uxtb	r3, r3
 801841c:	7d7a      	ldrb	r2, [r7, #21]
 801841e:	4611      	mov	r1, r2
 8018420:	4618      	mov	r0, r3
 8018422:	f7f7 fc03 	bl	800fc2c <TS_IO_Read>
 8018426:	4603      	mov	r3, r0
 8018428:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801842a:	7cfb      	ldrb	r3, [r7, #19]
 801842c:	b2db      	uxtb	r3, r3
 801842e:	b29a      	uxth	r2, r3
 8018430:	4b14      	ldr	r3, [pc, #80]	; (8018484 <ft5336_TS_GetXY+0x1dc>)
 8018432:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8018434:	89fb      	ldrh	r3, [r7, #14]
 8018436:	b2db      	uxtb	r3, r3
 8018438:	7d3a      	ldrb	r2, [r7, #20]
 801843a:	4611      	mov	r1, r2
 801843c:	4618      	mov	r0, r3
 801843e:	f7f7 fbf5 	bl	800fc2c <TS_IO_Read>
 8018442:	4603      	mov	r3, r0
 8018444:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8018446:	7cfb      	ldrb	r3, [r7, #19]
 8018448:	b2db      	uxtb	r3, r3
 801844a:	021b      	lsls	r3, r3, #8
 801844c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8018450:	b21a      	sxth	r2, r3
 8018452:	4b0c      	ldr	r3, [pc, #48]	; (8018484 <ft5336_TS_GetXY+0x1dc>)
 8018454:	881b      	ldrh	r3, [r3, #0]
 8018456:	b21b      	sxth	r3, r3
 8018458:	4313      	orrs	r3, r2
 801845a:	b21b      	sxth	r3, r3
 801845c:	b29a      	uxth	r2, r3
 801845e:	4b09      	ldr	r3, [pc, #36]	; (8018484 <ft5336_TS_GetXY+0x1dc>)
 8018460:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8018462:	4b08      	ldr	r3, [pc, #32]	; (8018484 <ft5336_TS_GetXY+0x1dc>)
 8018464:	881a      	ldrh	r2, [r3, #0]
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 801846a:	4b05      	ldr	r3, [pc, #20]	; (8018480 <ft5336_TS_GetXY+0x1d8>)
 801846c:	789b      	ldrb	r3, [r3, #2]
 801846e:	3301      	adds	r3, #1
 8018470:	b2da      	uxtb	r2, r3
 8018472:	4b03      	ldr	r3, [pc, #12]	; (8018480 <ft5336_TS_GetXY+0x1d8>)
 8018474:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8018476:	bf00      	nop
 8018478:	3718      	adds	r7, #24
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}
 801847e:	bf00      	nop
 8018480:	2000bedc 	.word	0x2000bedc
 8018484:	2000bee0 	.word	0x2000bee0

08018488 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8018488:	b580      	push	{r7, lr}
 801848a:	b084      	sub	sp, #16
 801848c:	af00      	add	r7, sp, #0
 801848e:	4603      	mov	r3, r0
 8018490:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8018492:	2300      	movs	r3, #0
 8018494:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8018496:	2301      	movs	r3, #1
 8018498:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801849a:	88fb      	ldrh	r3, [r7, #6]
 801849c:	b2db      	uxtb	r3, r3
 801849e:	7bfa      	ldrb	r2, [r7, #15]
 80184a0:	21a4      	movs	r1, #164	; 0xa4
 80184a2:	4618      	mov	r0, r3
 80184a4:	f7f7 fba8 	bl	800fbf8 <TS_IO_Write>
}
 80184a8:	bf00      	nop
 80184aa:	3710      	adds	r7, #16
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}

080184b0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b084      	sub	sp, #16
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	4603      	mov	r3, r0
 80184b8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80184ba:	2300      	movs	r3, #0
 80184bc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80184be:	2300      	movs	r3, #0
 80184c0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80184c2:	88fb      	ldrh	r3, [r7, #6]
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	7bfa      	ldrb	r2, [r7, #15]
 80184c8:	21a4      	movs	r1, #164	; 0xa4
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7f7 fb94 	bl	800fbf8 <TS_IO_Write>
}
 80184d0:	bf00      	nop
 80184d2:	3710      	adds	r7, #16
 80184d4:	46bd      	mov	sp, r7
 80184d6:	bd80      	pop	{r7, pc}

080184d8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80184d8:	b480      	push	{r7}
 80184da:	b083      	sub	sp, #12
 80184dc:	af00      	add	r7, sp, #0
 80184de:	4603      	mov	r3, r0
 80184e0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80184e2:	2300      	movs	r3, #0
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	370c      	adds	r7, #12
 80184e8:	46bd      	mov	sp, r7
 80184ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ee:	4770      	bx	lr

080184f0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80184f0:	b480      	push	{r7}
 80184f2:	b083      	sub	sp, #12
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	4603      	mov	r3, r0
 80184f8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80184fa:	bf00      	nop
 80184fc:	370c      	adds	r7, #12
 80184fe:	46bd      	mov	sp, r7
 8018500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018504:	4770      	bx	lr

08018506 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8018506:	b580      	push	{r7, lr}
 8018508:	b084      	sub	sp, #16
 801850a:	af00      	add	r7, sp, #0
 801850c:	4603      	mov	r3, r0
 801850e:	6039      	str	r1, [r7, #0]
 8018510:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8018512:	2300      	movs	r3, #0
 8018514:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8018516:	88fb      	ldrh	r3, [r7, #6]
 8018518:	b2db      	uxtb	r3, r3
 801851a:	2101      	movs	r1, #1
 801851c:	4618      	mov	r0, r3
 801851e:	f7f7 fb85 	bl	800fc2c <TS_IO_Read>
 8018522:	4603      	mov	r3, r0
 8018524:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8018526:	7bfb      	ldrb	r3, [r7, #15]
 8018528:	b2db      	uxtb	r3, r3
 801852a:	461a      	mov	r2, r3
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	601a      	str	r2, [r3, #0]
}
 8018530:	bf00      	nop
 8018532:	3710      	adds	r7, #16
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}

08018538 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b086      	sub	sp, #24
 801853c:	af00      	add	r7, sp, #0
 801853e:	60b9      	str	r1, [r7, #8]
 8018540:	607a      	str	r2, [r7, #4]
 8018542:	603b      	str	r3, [r7, #0]
 8018544:	4603      	mov	r3, r0
 8018546:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8018548:	2300      	movs	r3, #0
 801854a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 801854c:	2300      	movs	r3, #0
 801854e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8018550:	2300      	movs	r3, #0
 8018552:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8018554:	2300      	movs	r3, #0
 8018556:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8018558:	4b4d      	ldr	r3, [pc, #308]	; (8018690 <ft5336_TS_GetTouchInfo+0x158>)
 801855a:	785b      	ldrb	r3, [r3, #1]
 801855c:	461a      	mov	r2, r3
 801855e:	68bb      	ldr	r3, [r7, #8]
 8018560:	4293      	cmp	r3, r2
 8018562:	f080 8090 	bcs.w	8018686 <ft5336_TS_GetTouchInfo+0x14e>
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	2b09      	cmp	r3, #9
 801856a:	d85d      	bhi.n	8018628 <ft5336_TS_GetTouchInfo+0xf0>
 801856c:	a201      	add	r2, pc, #4	; (adr r2, 8018574 <ft5336_TS_GetTouchInfo+0x3c>)
 801856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018572:	bf00      	nop
 8018574:	0801859d 	.word	0x0801859d
 8018578:	080185ab 	.word	0x080185ab
 801857c:	080185b9 	.word	0x080185b9
 8018580:	080185c7 	.word	0x080185c7
 8018584:	080185d5 	.word	0x080185d5
 8018588:	080185e3 	.word	0x080185e3
 801858c:	080185f1 	.word	0x080185f1
 8018590:	080185ff 	.word	0x080185ff
 8018594:	0801860d 	.word	0x0801860d
 8018598:	0801861b 	.word	0x0801861b
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 801859c:	2303      	movs	r3, #3
 801859e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80185a0:	2307      	movs	r3, #7
 80185a2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80185a4:	2308      	movs	r3, #8
 80185a6:	757b      	strb	r3, [r7, #21]
      break;
 80185a8:	e03f      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80185aa:	2309      	movs	r3, #9
 80185ac:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80185ae:	230d      	movs	r3, #13
 80185b0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80185b2:	230e      	movs	r3, #14
 80185b4:	757b      	strb	r3, [r7, #21]
      break;
 80185b6:	e038      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80185b8:	230f      	movs	r3, #15
 80185ba:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80185bc:	2313      	movs	r3, #19
 80185be:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80185c0:	2314      	movs	r3, #20
 80185c2:	757b      	strb	r3, [r7, #21]
      break;
 80185c4:	e031      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80185c6:	2315      	movs	r3, #21
 80185c8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80185ca:	2319      	movs	r3, #25
 80185cc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80185ce:	231a      	movs	r3, #26
 80185d0:	757b      	strb	r3, [r7, #21]
      break;
 80185d2:	e02a      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80185d4:	231b      	movs	r3, #27
 80185d6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80185d8:	231f      	movs	r3, #31
 80185da:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80185dc:	2320      	movs	r3, #32
 80185de:	757b      	strb	r3, [r7, #21]
      break;
 80185e0:	e023      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80185e2:	2321      	movs	r3, #33	; 0x21
 80185e4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80185e6:	2325      	movs	r3, #37	; 0x25
 80185e8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80185ea:	2326      	movs	r3, #38	; 0x26
 80185ec:	757b      	strb	r3, [r7, #21]
      break;
 80185ee:	e01c      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80185f0:	2327      	movs	r3, #39	; 0x27
 80185f2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80185f4:	232b      	movs	r3, #43	; 0x2b
 80185f6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80185f8:	232c      	movs	r3, #44	; 0x2c
 80185fa:	757b      	strb	r3, [r7, #21]
      break;
 80185fc:	e015      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80185fe:	232d      	movs	r3, #45	; 0x2d
 8018600:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8018602:	2331      	movs	r3, #49	; 0x31
 8018604:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8018606:	2332      	movs	r3, #50	; 0x32
 8018608:	757b      	strb	r3, [r7, #21]
      break;
 801860a:	e00e      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 801860c:	2333      	movs	r3, #51	; 0x33
 801860e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8018610:	2337      	movs	r3, #55	; 0x37
 8018612:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8018614:	2338      	movs	r3, #56	; 0x38
 8018616:	757b      	strb	r3, [r7, #21]
      break;
 8018618:	e007      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 801861a:	2339      	movs	r3, #57	; 0x39
 801861c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 801861e:	233d      	movs	r3, #61	; 0x3d
 8018620:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8018622:	233e      	movs	r3, #62	; 0x3e
 8018624:	757b      	strb	r3, [r7, #21]
      break;
 8018626:	e000      	b.n	801862a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8018628:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801862a:	89fb      	ldrh	r3, [r7, #14]
 801862c:	b2db      	uxtb	r3, r3
 801862e:	7dfa      	ldrb	r2, [r7, #23]
 8018630:	4611      	mov	r1, r2
 8018632:	4618      	mov	r0, r3
 8018634:	f7f7 fafa 	bl	800fc2c <TS_IO_Read>
 8018638:	4603      	mov	r3, r0
 801863a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 801863c:	7d3b      	ldrb	r3, [r7, #20]
 801863e:	b2db      	uxtb	r3, r3
 8018640:	119b      	asrs	r3, r3, #6
 8018642:	f003 0203 	and.w	r2, r3, #3
 8018646:	6a3b      	ldr	r3, [r7, #32]
 8018648:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 801864a:	89fb      	ldrh	r3, [r7, #14]
 801864c:	b2db      	uxtb	r3, r3
 801864e:	7dba      	ldrb	r2, [r7, #22]
 8018650:	4611      	mov	r1, r2
 8018652:	4618      	mov	r0, r3
 8018654:	f7f7 faea 	bl	800fc2c <TS_IO_Read>
 8018658:	4603      	mov	r3, r0
 801865a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 801865c:	7d3b      	ldrb	r3, [r7, #20]
 801865e:	b2db      	uxtb	r3, r3
 8018660:	461a      	mov	r2, r3
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8018666:	89fb      	ldrh	r3, [r7, #14]
 8018668:	b2db      	uxtb	r3, r3
 801866a:	7d7a      	ldrb	r2, [r7, #21]
 801866c:	4611      	mov	r1, r2
 801866e:	4618      	mov	r0, r3
 8018670:	f7f7 fadc 	bl	800fc2c <TS_IO_Read>
 8018674:	4603      	mov	r3, r0
 8018676:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8018678:	7d3b      	ldrb	r3, [r7, #20]
 801867a:	b2db      	uxtb	r3, r3
 801867c:	111b      	asrs	r3, r3, #4
 801867e:	f003 0204 	and.w	r2, r3, #4
 8018682:	683b      	ldr	r3, [r7, #0]
 8018684:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8018686:	bf00      	nop
 8018688:	3718      	adds	r7, #24
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	2000bedc 	.word	0x2000bedc

08018694 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8018694:	b480      	push	{r7}
 8018696:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8018698:	4b03      	ldr	r3, [pc, #12]	; (80186a8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 801869a:	781b      	ldrb	r3, [r3, #0]
}
 801869c:	4618      	mov	r0, r3
 801869e:	46bd      	mov	sp, r7
 80186a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a4:	4770      	bx	lr
 80186a6:	bf00      	nop
 80186a8:	2000bedc 	.word	0x2000bedc

080186ac <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80186b0:	f7ff fff0 	bl	8018694 <ft5336_Get_I2C_InitializedStatus>
 80186b4:	4603      	mov	r3, r0
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d104      	bne.n	80186c4 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80186ba:	f7f7 fa93 	bl	800fbe4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80186be:	4b02      	ldr	r3, [pc, #8]	; (80186c8 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80186c0:	2201      	movs	r2, #1
 80186c2:	701a      	strb	r2, [r3, #0]
  }
}
 80186c4:	bf00      	nop
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	2000bedc 	.word	0x2000bedc

080186cc <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80186cc:	b480      	push	{r7}
 80186ce:	b085      	sub	sp, #20
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	4603      	mov	r3, r0
 80186d4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80186d6:	2300      	movs	r3, #0
 80186d8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80186da:	68fb      	ldr	r3, [r7, #12]
}
 80186dc:	4618      	mov	r0, r3
 80186de:	3714      	adds	r7, #20
 80186e0:	46bd      	mov	sp, r7
 80186e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e6:	4770      	bx	lr

080186e8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80186e8:	8880      	ldrh	r0, [r0, #4]
 80186ea:	4770      	bx	lr

080186ec <_ZN8touchgfx17AbstractPartition5clearEv>:
 80186ec:	2300      	movs	r3, #0
 80186ee:	8083      	strh	r3, [r0, #4]
 80186f0:	4770      	bx	lr
	...

080186f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80186f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186f6:	6803      	ldr	r3, [r0, #0]
 80186f8:	460e      	mov	r6, r1
 80186fa:	2100      	movs	r1, #0
 80186fc:	4605      	mov	r5, r0
 80186fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018700:	4798      	blx	r3
 8018702:	4604      	mov	r4, r0
 8018704:	682b      	ldr	r3, [r5, #0]
 8018706:	4628      	mov	r0, r5
 8018708:	1b34      	subs	r4, r6, r4
 801870a:	6a1b      	ldr	r3, [r3, #32]
 801870c:	b2a4      	uxth	r4, r4
 801870e:	4798      	blx	r3
 8018710:	88ab      	ldrh	r3, [r5, #4]
 8018712:	fbb4 f4f0 	udiv	r4, r4, r0
 8018716:	42a3      	cmp	r3, r4
 8018718:	d805      	bhi.n	8018726 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801871a:	4b0e      	ldr	r3, [pc, #56]	; (8018754 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801871c:	211e      	movs	r1, #30
 801871e:	4a0e      	ldr	r2, [pc, #56]	; (8018758 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8018720:	480e      	ldr	r0, [pc, #56]	; (801875c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8018722:	f00f ff6f 	bl	8028604 <__assert_func>
 8018726:	682b      	ldr	r3, [r5, #0]
 8018728:	2100      	movs	r1, #0
 801872a:	4628      	mov	r0, r5
 801872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801872e:	4798      	blx	r3
 8018730:	682b      	ldr	r3, [r5, #0]
 8018732:	4607      	mov	r7, r0
 8018734:	4628      	mov	r0, r5
 8018736:	6a1b      	ldr	r3, [r3, #32]
 8018738:	4798      	blx	r3
 801873a:	1bf3      	subs	r3, r6, r7
 801873c:	b29b      	uxth	r3, r3
 801873e:	fbb3 f2f0 	udiv	r2, r3, r0
 8018742:	fb02 3010 	mls	r0, r2, r0, r3
 8018746:	b118      	cbz	r0, 8018750 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8018748:	4b05      	ldr	r3, [pc, #20]	; (8018760 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801874a:	211f      	movs	r1, #31
 801874c:	4a02      	ldr	r2, [pc, #8]	; (8018758 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801874e:	e7e7      	b.n	8018720 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8018750:	4620      	mov	r0, r4
 8018752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018754:	0802af50 	.word	0x0802af50
 8018758:	0802b0be 	.word	0x0802b0be
 801875c:	0802af65 	.word	0x0802af65
 8018760:	0802af93 	.word	0x0802af93

08018764 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018764:	b538      	push	{r3, r4, r5, lr}
 8018766:	6803      	ldr	r3, [r0, #0]
 8018768:	460d      	mov	r5, r1
 801876a:	4604      	mov	r4, r0
 801876c:	6a1b      	ldr	r3, [r3, #32]
 801876e:	4798      	blx	r3
 8018770:	4285      	cmp	r5, r0
 8018772:	d905      	bls.n	8018780 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8018774:	4b0c      	ldr	r3, [pc, #48]	; (80187a8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8018776:	212f      	movs	r1, #47	; 0x2f
 8018778:	4a0c      	ldr	r2, [pc, #48]	; (80187ac <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801877a:	480d      	ldr	r0, [pc, #52]	; (80187b0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801877c:	f00f ff42 	bl	8028604 <__assert_func>
 8018780:	6823      	ldr	r3, [r4, #0]
 8018782:	4620      	mov	r0, r4
 8018784:	88a5      	ldrh	r5, [r4, #4]
 8018786:	69db      	ldr	r3, [r3, #28]
 8018788:	4798      	blx	r3
 801878a:	4285      	cmp	r5, r0
 801878c:	d303      	bcc.n	8018796 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801878e:	4b09      	ldr	r3, [pc, #36]	; (80187b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8018790:	2130      	movs	r1, #48	; 0x30
 8018792:	4a06      	ldr	r2, [pc, #24]	; (80187ac <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018794:	e7f1      	b.n	801877a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8018796:	6823      	ldr	r3, [r4, #0]
 8018798:	4620      	mov	r0, r4
 801879a:	88a1      	ldrh	r1, [r4, #4]
 801879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801879e:	4798      	blx	r3
 80187a0:	88a3      	ldrh	r3, [r4, #4]
 80187a2:	3301      	adds	r3, #1
 80187a4:	80a3      	strh	r3, [r4, #4]
 80187a6:	bd38      	pop	{r3, r4, r5, pc}
 80187a8:	0802b00d 	.word	0x0802b00d
 80187ac:	0802b101 	.word	0x0802b101
 80187b0:	0802af65 	.word	0x0802af65
 80187b4:	0802b024 	.word	0x0802b024

080187b8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80187b8:	b570      	push	{r4, r5, r6, lr}
 80187ba:	6803      	ldr	r3, [r0, #0]
 80187bc:	4616      	mov	r6, r2
 80187be:	4604      	mov	r4, r0
 80187c0:	460d      	mov	r5, r1
 80187c2:	6a1b      	ldr	r3, [r3, #32]
 80187c4:	4798      	blx	r3
 80187c6:	4286      	cmp	r6, r0
 80187c8:	d905      	bls.n	80187d6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80187ca:	4b06      	ldr	r3, [pc, #24]	; (80187e4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80187cc:	2139      	movs	r1, #57	; 0x39
 80187ce:	4a06      	ldr	r2, [pc, #24]	; (80187e8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80187d0:	4806      	ldr	r0, [pc, #24]	; (80187ec <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80187d2:	f00f ff17 	bl	8028604 <__assert_func>
 80187d6:	6823      	ldr	r3, [r4, #0]
 80187d8:	4629      	mov	r1, r5
 80187da:	4620      	mov	r0, r4
 80187dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187e2:	4718      	bx	r3
 80187e4:	0802b00d 	.word	0x0802b00d
 80187e8:	0802b074 	.word	0x0802b074
 80187ec:	0802af65 	.word	0x0802af65

080187f0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80187f0:	4770      	bx	lr
	...

080187f4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80187f4:	4a02      	ldr	r2, [pc, #8]	; (8018800 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80187f6:	6002      	str	r2, [r0, #0]
 80187f8:	2200      	movs	r2, #0
 80187fa:	8082      	strh	r2, [r0, #4]
 80187fc:	4770      	bx	lr
 80187fe:	bf00      	nop
 8018800:	0802b048 	.word	0x0802b048

08018804 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8018804:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8018808:	4770      	bx	lr

0801880a <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801880a:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801880e:	4770      	bx	lr

08018810 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8018810:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8018814:	4770      	bx	lr

08018816 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8018816:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801881a:	4770      	bx	lr

0801881c <_ZN8touchgfx11BoxProgressD1Ev>:
 801881c:	4b03      	ldr	r3, [pc, #12]	; (801882c <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 801881e:	b510      	push	{r4, lr}
 8018820:	4604      	mov	r4, r0
 8018822:	6003      	str	r3, [r0, #0]
 8018824:	f000 f8b6 	bl	8018994 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8018828:	4620      	mov	r0, r4
 801882a:	bd10      	pop	{r4, pc}
 801882c:	0802b148 	.word	0x0802b148

08018830 <_ZN8touchgfx11BoxProgressD0Ev>:
 8018830:	b510      	push	{r4, lr}
 8018832:	4604      	mov	r4, r0
 8018834:	f7ff fff2 	bl	801881c <_ZN8touchgfx11BoxProgressD1Ev>
 8018838:	21c0      	movs	r1, #192	; 0xc0
 801883a:	4620      	mov	r0, r4
 801883c:	f00f feb4 	bl	80285a8 <_ZdlPvj>
 8018840:	4620      	mov	r0, r4
 8018842:	bd10      	pop	{r4, pc}

08018844 <_ZN8touchgfx11BoxProgressC1Ev>:
 8018844:	b510      	push	{r4, lr}
 8018846:	4604      	mov	r4, r0
 8018848:	f000 f8b8 	bl	80189bc <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801884c:	2201      	movs	r2, #1
 801884e:	4b16      	ldr	r3, [pc, #88]	; (80188a8 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8018850:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018854:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8018858:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 801885c:	4a13      	ldr	r2, [pc, #76]	; (80188ac <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 801885e:	6023      	str	r3, [r4, #0]
 8018860:	2300      	movs	r3, #0
 8018862:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8018866:	22ff      	movs	r2, #255	; 0xff
 8018868:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 801886c:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8018870:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8018874:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8018878:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 801887c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8018880:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8018884:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8018888:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 801888c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8018890:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8018894:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8018898:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 801889c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80188a0:	f000 fbb8 	bl	8019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80188a4:	4620      	mov	r0, r4
 80188a6:	bd10      	pop	{r4, pc}
 80188a8:	0802b148 	.word	0x0802b148
 80188ac:	0802c470 	.word	0x0802c470

080188b0 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80188b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80188b4:	4617      	mov	r7, r2
 80188b6:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80188ba:	2200      	movs	r2, #0
 80188bc:	4604      	mov	r4, r0
 80188be:	460e      	mov	r6, r1
 80188c0:	4698      	mov	r8, r3
 80188c2:	4611      	mov	r1, r2
 80188c4:	9500      	str	r5, [sp, #0]
 80188c6:	3090      	adds	r0, #144	; 0x90
 80188c8:	f7f8 fa2e 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 80188cc:	4643      	mov	r3, r8
 80188ce:	463a      	mov	r2, r7
 80188d0:	4631      	mov	r1, r6
 80188d2:	4620      	mov	r0, r4
 80188d4:	9508      	str	r5, [sp, #32]
 80188d6:	b002      	add	sp, #8
 80188d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188dc:	f000 b9fa 	b.w	8018cd4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080188e0 <_ZN8touchgfx11BoxProgress8setValueEi>:
 80188e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188e2:	4604      	mov	r4, r0
 80188e4:	f000 fa40 	bl	8018d68 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80188e8:	f104 0590 	add.w	r5, r4, #144	; 0x90
 80188ec:	4628      	mov	r0, r5
 80188ee:	f004 fa89 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
 80188f2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80188f6:	2b03      	cmp	r3, #3
 80188f8:	d814      	bhi.n	8018924 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 80188fa:	e8df f003 	tbb	[pc, r3]
 80188fe:	0202      	.short	0x0202
 8018900:	1010      	.short	0x1010
 8018902:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8018906:	4620      	mov	r0, r4
 8018908:	f000 fa88 	bl	8018e1c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801890c:	b200      	sxth	r0, r0
 801890e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018912:	2b03      	cmp	r3, #3
 8018914:	d81a      	bhi.n	801894c <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8018916:	e8df f003 	tbb	[pc, r3]
 801891a:	0e07      	.short	0x0e07
 801891c:	231f      	.short	0x231f
 801891e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8018922:	e7f0      	b.n	8018906 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8018924:	2000      	movs	r0, #0
 8018926:	e7f2      	b.n	801890e <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8018928:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801892c:	9300      	str	r3, [sp, #0]
 801892e:	4603      	mov	r3, r0
 8018930:	2200      	movs	r2, #0
 8018932:	2100      	movs	r1, #0
 8018934:	e007      	b.n	8018946 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8018936:	8921      	ldrh	r1, [r4, #8]
 8018938:	2200      	movs	r2, #0
 801893a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801893e:	1a09      	subs	r1, r1, r0
 8018940:	9300      	str	r3, [sp, #0]
 8018942:	4603      	mov	r3, r0
 8018944:	b209      	sxth	r1, r1
 8018946:	4628      	mov	r0, r5
 8018948:	f7f8 f9ee 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801894c:	4628      	mov	r0, r5
 801894e:	b003      	add	sp, #12
 8018950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018954:	f004 ba56 	b.w	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018958:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801895c:	9000      	str	r0, [sp, #0]
 801895e:	e7e7      	b.n	8018930 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8018960:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018964:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018968:	1a12      	subs	r2, r2, r0
 801896a:	9000      	str	r0, [sp, #0]
 801896c:	b212      	sxth	r2, r2
 801896e:	e7e0      	b.n	8018932 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08018970 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8018970:	b570      	push	{r4, r5, r6, lr}
 8018972:	6803      	ldr	r3, [r0, #0]
 8018974:	4604      	mov	r4, r0
 8018976:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801897a:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801897e:	4798      	blx	r3
 8018980:	4601      	mov	r1, r0
 8018982:	462b      	mov	r3, r5
 8018984:	4620      	mov	r0, r4
 8018986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801898a:	4718      	bx	r3

0801898c <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 801898c:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8018990:	4770      	bx	lr
	...

08018994 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8018994:	4b03      	ldr	r3, [pc, #12]	; (80189a4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8018996:	b510      	push	{r4, lr}
 8018998:	4604      	mov	r4, r0
 801899a:	6003      	str	r3, [r0, #0]
 801899c:	f000 f999 	bl	8018cd2 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80189a0:	4620      	mov	r0, r4
 80189a2:	bd10      	pop	{r4, pc}
 80189a4:	0802b220 	.word	0x0802b220

080189a8 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80189a8:	b510      	push	{r4, lr}
 80189aa:	4604      	mov	r4, r0
 80189ac:	f7ff fff2 	bl	8018994 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80189b0:	2190      	movs	r1, #144	; 0x90
 80189b2:	4620      	mov	r0, r4
 80189b4:	f00f fdf8 	bl	80285a8 <_ZdlPvj>
 80189b8:	4620      	mov	r0, r4
 80189ba:	bd10      	pop	{r4, pc}

080189bc <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80189bc:	b510      	push	{r4, lr}
 80189be:	4604      	mov	r4, r0
 80189c0:	f000 fa4c 	bl	8018e5c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80189c4:	4b03      	ldr	r3, [pc, #12]	; (80189d4 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80189c6:	2100      	movs	r1, #0
 80189c8:	4620      	mov	r0, r4
 80189ca:	6023      	str	r3, [r4, #0]
 80189cc:	f7ff ffd0 	bl	8018970 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 80189d0:	4620      	mov	r0, r4
 80189d2:	bd10      	pop	{r4, pc}
 80189d4:	0802b220 	.word	0x0802b220

080189d8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 80189d8:	b570      	push	{r4, r5, r6, lr}
 80189da:	6803      	ldr	r3, [r0, #0]
 80189dc:	4604      	mov	r4, r0
 80189de:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 80189e2:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80189e6:	4798      	blx	r3
 80189e8:	4601      	mov	r1, r0
 80189ea:	462b      	mov	r3, r5
 80189ec:	4620      	mov	r0, r4
 80189ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189f2:	4718      	bx	r3

080189f4 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 80189f4:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 80189f8:	4770      	bx	lr

080189fa <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 80189fa:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 80189fe:	4770      	bx	lr

08018a00 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8018a00:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8018a04:	4770      	bx	lr

08018a06 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8018a06:	b507      	push	{r0, r1, r2, lr}
 8018a08:	ab02      	add	r3, sp, #8
 8018a0a:	30bc      	adds	r0, #188	; 0xbc
 8018a0c:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8018a10:	4619      	mov	r1, r3
 8018a12:	f002 fa4b 	bl	801aeac <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8018a16:	b003      	add	sp, #12
 8018a18:	f85d fb04 	ldr.w	pc, [sp], #4

08018a1c <_ZN8touchgfx13ImageProgressD1Ev>:
 8018a1c:	4b03      	ldr	r3, [pc, #12]	; (8018a2c <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8018a1e:	b510      	push	{r4, lr}
 8018a20:	4604      	mov	r4, r0
 8018a22:	6003      	str	r3, [r0, #0]
 8018a24:	f7ff ffb6 	bl	8018994 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8018a28:	4620      	mov	r0, r4
 8018a2a:	bd10      	pop	{r4, pc}
 8018a2c:	0802b34c 	.word	0x0802b34c

08018a30 <_ZN8touchgfx13ImageProgressD0Ev>:
 8018a30:	b510      	push	{r4, lr}
 8018a32:	4604      	mov	r4, r0
 8018a34:	f7ff fff2 	bl	8018a1c <_ZN8touchgfx13ImageProgressD1Ev>
 8018a38:	21f0      	movs	r1, #240	; 0xf0
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f00f fdb4 	bl	80285a8 <_ZdlPvj>
 8018a40:	4620      	mov	r0, r4
 8018a42:	bd10      	pop	{r4, pc}

08018a44 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8018a44:	b508      	push	{r3, lr}
 8018a46:	4b06      	ldr	r3, [pc, #24]	; (8018a60 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	b92b      	cbnz	r3, 8018a58 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8018a4c:	4b05      	ldr	r3, [pc, #20]	; (8018a64 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8018a4e:	21b8      	movs	r1, #184	; 0xb8
 8018a50:	4a05      	ldr	r2, [pc, #20]	; (8018a68 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8018a52:	4806      	ldr	r0, [pc, #24]	; (8018a6c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8018a54:	f00f fdd6 	bl	8028604 <__assert_func>
 8018a58:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8018a5c:	bd08      	pop	{r3, pc}
 8018a5e:	bf00      	nop
 8018a60:	2000bfb8 	.word	0x2000bfb8
 8018a64:	0802b2e0 	.word	0x0802b2e0
 8018a68:	0802b424 	.word	0x0802b424
 8018a6c:	0802b31c 	.word	0x0802b31c

08018a70 <_ZN8touchgfx13ImageProgressC1Ev>:
 8018a70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018a74:	4604      	mov	r4, r0
 8018a76:	f7ff ffa1 	bl	80189bc <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8018a7a:	4b31      	ldr	r3, [pc, #196]	; (8018b40 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8018a7c:	a902      	add	r1, sp, #8
 8018a7e:	4626      	mov	r6, r4
 8018a80:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8018a84:	2500      	movs	r5, #0
 8018a86:	4a2f      	ldr	r2, [pc, #188]	; (8018b44 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8018a88:	f846 3b90 	str.w	r3, [r6], #144
 8018a8c:	2701      	movs	r7, #1
 8018a8e:	4b2e      	ldr	r3, [pc, #184]	; (8018b48 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8018a90:	4640      	mov	r0, r8
 8018a92:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8018a96:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8018a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a9e:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8018aa2:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8018aa6:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8018aaa:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8018aae:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8018ab2:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8018ab6:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8018aba:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8018abe:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8018ac2:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8018ac6:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8018aca:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8018ace:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8018ad2:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8018ad6:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8018ada:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8018ade:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8018ae2:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8018ae6:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8018aea:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8018aee:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8018af2:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8018af6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8018afa:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8018afe:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8018b02:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8018b06:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8018b0a:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8018b0e:	f002 fc9d 	bl	801b44c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018b12:	4b0e      	ldr	r3, [pc, #56]	; (8018b4c <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8018b14:	4641      	mov	r1, r8
 8018b16:	4630      	mov	r0, r6
 8018b18:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8018b1c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8018b20:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8018b24:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8018b28:	f000 fa74 	bl	8019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018b30:	4631      	mov	r1, r6
 8018b32:	f000 fa6f 	bl	8019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018b36:	4620      	mov	r0, r4
 8018b38:	b002      	add	sp, #8
 8018b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b3e:	bf00      	nop
 8018b40:	0802b34c 	.word	0x0802b34c
 8018b44:	0802c640 	.word	0x0802c640
 8018b48:	0802b6c8 	.word	0x0802b6c8
 8018b4c:	0802c4d8 	.word	0x0802c4d8

08018b50 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8018b50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018b54:	4617      	mov	r7, r2
 8018b56:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	4604      	mov	r4, r0
 8018b5e:	460e      	mov	r6, r1
 8018b60:	4698      	mov	r8, r3
 8018b62:	4611      	mov	r1, r2
 8018b64:	9500      	str	r5, [sp, #0]
 8018b66:	3090      	adds	r0, #144	; 0x90
 8018b68:	f7f8 f8de 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018b6c:	4643      	mov	r3, r8
 8018b6e:	463a      	mov	r2, r7
 8018b70:	4631      	mov	r1, r6
 8018b72:	4620      	mov	r0, r4
 8018b74:	9508      	str	r5, [sp, #32]
 8018b76:	b002      	add	sp, #8
 8018b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b7c:	f000 b8aa 	b.w	8018cd4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08018b80 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8018b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b82:	4604      	mov	r4, r0
 8018b84:	f000 f8f0 	bl	8018d68 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8018b88:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8018b8c:	4638      	mov	r0, r7
 8018b8e:	f004 f939 	bl	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018b92:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018b96:	4620      	mov	r0, r4
 8018b98:	2b01      	cmp	r3, #1
 8018b9a:	bf94      	ite	ls
 8018b9c:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8018ba0:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8018ba4:	f000 f93a 	bl	8018e1c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8018ba8:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8018bac:	4606      	mov	r6, r0
 8018bae:	b205      	sxth	r5, r0
 8018bb0:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018bb4:	2a00      	cmp	r2, #0
 8018bb6:	d056      	beq.n	8018c66 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8018bb8:	2b03      	cmp	r3, #3
 8018bba:	d82c      	bhi.n	8018c16 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8018bbc:	e8df f003 	tbb	[pc, r3]
 8018bc0:	3d311202 	.word	0x3d311202
 8018bc4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018bc8:	2200      	movs	r2, #0
 8018bca:	9300      	str	r3, [sp, #0]
 8018bcc:	4611      	mov	r1, r2
 8018bce:	462b      	mov	r3, r5
 8018bd0:	4638      	mov	r0, r7
 8018bd2:	f7f8 f8a9 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018bd6:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018bda:	9300      	str	r3, [sp, #0]
 8018bdc:	462b      	mov	r3, r5
 8018bde:	2200      	movs	r2, #0
 8018be0:	4611      	mov	r1, r2
 8018be2:	e014      	b.n	8018c0e <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8018be4:	8921      	ldrh	r1, [r4, #8]
 8018be6:	2200      	movs	r2, #0
 8018be8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018bec:	1a09      	subs	r1, r1, r0
 8018bee:	4638      	mov	r0, r7
 8018bf0:	9300      	str	r3, [sp, #0]
 8018bf2:	462b      	mov	r3, r5
 8018bf4:	b209      	sxth	r1, r1
 8018bf6:	f7f8 f897 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018bfa:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8018bfe:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c02:	4249      	negs	r1, r1
 8018c04:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8018c08:	9200      	str	r2, [sp, #0]
 8018c0a:	b209      	sxth	r1, r1
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8018c12:	f7f8 f889 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018c16:	4638      	mov	r0, r7
 8018c18:	b003      	add	sp, #12
 8018c1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018c1e:	f004 b8f1 	b.w	801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018c22:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c26:	2200      	movs	r2, #0
 8018c28:	9500      	str	r5, [sp, #0]
 8018c2a:	2100      	movs	r1, #0
 8018c2c:	4638      	mov	r0, r7
 8018c2e:	f7f8 f87b 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018c32:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c36:	9500      	str	r5, [sp, #0]
 8018c38:	e7d1      	b.n	8018bde <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8018c3a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018c3e:	2100      	movs	r1, #0
 8018c40:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c44:	1a12      	subs	r2, r2, r0
 8018c46:	9500      	str	r5, [sp, #0]
 8018c48:	4638      	mov	r0, r7
 8018c4a:	b212      	sxth	r2, r2
 8018c4c:	f7f8 f86c 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018c50:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8018c54:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8018c58:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c5c:	4252      	negs	r2, r2
 8018c5e:	9100      	str	r1, [sp, #0]
 8018c60:	b212      	sxth	r2, r2
 8018c62:	2100      	movs	r1, #0
 8018c64:	e7d3      	b.n	8018c0e <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8018c66:	2b03      	cmp	r3, #3
 8018c68:	d8d5      	bhi.n	8018c16 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8018c6a:	e8df f003 	tbb	[pc, r3]
 8018c6e:	1102      	.short	0x1102
 8018c70:	2a1b      	.short	0x2a1b
 8018c72:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018c76:	2200      	movs	r2, #0
 8018c78:	4638      	mov	r0, r7
 8018c7a:	4611      	mov	r1, r2
 8018c7c:	9300      	str	r3, [sp, #0]
 8018c7e:	462b      	mov	r3, r5
 8018c80:	f7f8 f852 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018c84:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c88:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018c8c:	1af1      	subs	r1, r6, r3
 8018c8e:	e7bb      	b.n	8018c08 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8018c90:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8018c94:	2200      	movs	r2, #0
 8018c96:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018c9a:	1a09      	subs	r1, r1, r0
 8018c9c:	9300      	str	r3, [sp, #0]
 8018c9e:	462b      	mov	r3, r5
 8018ca0:	b209      	sxth	r1, r1
 8018ca2:	e795      	b.n	8018bd0 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018caa:	4638      	mov	r0, r7
 8018cac:	9500      	str	r5, [sp, #0]
 8018cae:	4611      	mov	r1, r2
 8018cb0:	f7f8 f83a 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018cb4:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8018cb8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018cbc:	1a32      	subs	r2, r6, r0
 8018cbe:	9000      	str	r0, [sp, #0]
 8018cc0:	e7ce      	b.n	8018c60 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8018cc2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018cc6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018cca:	1a12      	subs	r2, r2, r0
 8018ccc:	9500      	str	r5, [sp, #0]
 8018cce:	b212      	sxth	r2, r2
 8018cd0:	e7ab      	b.n	8018c2a <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08018cd2 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8018cd2:	4770      	bx	lr

08018cd4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8018cd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018cd8:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8018cdc:	4604      	mov	r4, r0
 8018cde:	460e      	mov	r6, r1
 8018ce0:	4698      	mov	r8, r3
 8018ce2:	9700      	str	r7, [sp, #0]
 8018ce4:	3058      	adds	r0, #88	; 0x58
 8018ce6:	4615      	mov	r5, r2
 8018ce8:	f7f8 f81e 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018cec:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8018cf0:	eb06 0308 	add.w	r3, r6, r8
 8018cf4:	429a      	cmp	r2, r3
 8018cf6:	eb05 0207 	add.w	r2, r5, r7
 8018cfa:	bfb8      	it	lt
 8018cfc:	8123      	strhlt	r3, [r4, #8]
 8018cfe:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018d02:	4293      	cmp	r3, r2
 8018d04:	bfb8      	it	lt
 8018d06:	8162      	strhlt	r2, [r4, #10]
 8018d08:	b002      	add	sp, #8
 8018d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d0e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8018d0e:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8018d12:	4770      	bx	lr

08018d14 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8018d14:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8018d18:	4770      	bx	lr

08018d1a <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8018d1a:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8018d1e:	4770      	bx	lr

08018d20 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8018d20:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8018d24:	4770      	bx	lr

08018d26 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8018d26:	b510      	push	{r4, lr}
 8018d28:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8018d2c:	800c      	strh	r4, [r1, #0]
 8018d2e:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8018d32:	8011      	strh	r1, [r2, #0]
 8018d34:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8018d38:	801a      	strh	r2, [r3, #0]
 8018d3a:	9b02      	ldr	r3, [sp, #8]
 8018d3c:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8018d40:	801a      	strh	r2, [r3, #0]
 8018d42:	bd10      	pop	{r4, pc}

08018d44 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8018d44:	b510      	push	{r4, lr}
 8018d46:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8018d4a:	800c      	strh	r4, [r1, #0]
 8018d4c:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8018d50:	8011      	strh	r1, [r2, #0]
 8018d52:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8018d56:	801a      	strh	r2, [r3, #0]
 8018d58:	bd10      	pop	{r4, pc}

08018d5a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8018d5a:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8018d5e:	800b      	strh	r3, [r1, #0]
 8018d60:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8018d64:	8013      	strh	r3, [r2, #0]
 8018d66:	4770      	bx	lr

08018d68 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8018d68:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8018d6c:	4299      	cmp	r1, r3
 8018d6e:	bfb8      	it	lt
 8018d70:	4619      	movlt	r1, r3
 8018d72:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8018d76:	4299      	cmp	r1, r3
 8018d78:	bfa8      	it	ge
 8018d7a:	4619      	movge	r1, r3
 8018d7c:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8018d80:	4770      	bx	lr

08018d82 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8018d82:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8018d86:	4770      	bx	lr

08018d88 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8018d88:	b510      	push	{r4, lr}
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	2190      	movs	r1, #144	; 0x90
 8018d8e:	f00f fc0b 	bl	80285a8 <_ZdlPvj>
 8018d92:	4620      	mov	r0, r4
 8018d94:	bd10      	pop	{r4, pc}

08018d96 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8018d96:	b510      	push	{r4, lr}
 8018d98:	4604      	mov	r4, r0
 8018d9a:	302c      	adds	r0, #44	; 0x2c
 8018d9c:	f002 fb56 	bl	801b44c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018da0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018da2:	8123      	strh	r3, [r4, #8]
 8018da4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018da6:	8163      	strh	r3, [r4, #10]
 8018da8:	bd10      	pop	{r4, pc}
	...

08018dac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8018dac:	4291      	cmp	r1, r2
 8018dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018db2:	4604      	mov	r4, r0
 8018db4:	460e      	mov	r6, r1
 8018db6:	4615      	mov	r5, r2
 8018db8:	4698      	mov	r8, r3
 8018dba:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8018dbe:	db05      	blt.n	8018dcc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8018dc0:	4b12      	ldr	r3, [pc, #72]	; (8018e0c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8018dc2:	214d      	movs	r1, #77	; 0x4d
 8018dc4:	4a12      	ldr	r2, [pc, #72]	; (8018e10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8018dc6:	4813      	ldr	r0, [pc, #76]	; (8018e14 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8018dc8:	f00f fc1c 	bl	8028604 <__assert_func>
 8018dcc:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8018dd0:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8018dd4:	6803      	ldr	r3, [r0, #0]
 8018dd6:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8018dda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018dde:	4798      	blx	r3
 8018de0:	f1b8 0f00 	cmp.w	r8, #0
 8018de4:	d10c      	bne.n	8018e00 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8018de6:	1bad      	subs	r5, r5, r6
 8018de8:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8018dec:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8018df0:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8018df4:	42bb      	cmp	r3, r7
 8018df6:	d806      	bhi.n	8018e06 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8018df8:	4b07      	ldr	r3, [pc, #28]	; (8018e18 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8018dfa:	215a      	movs	r1, #90	; 0x5a
 8018dfc:	4a04      	ldr	r2, [pc, #16]	; (8018e10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8018dfe:	e7e2      	b.n	8018dc6 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8018e00:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8018e04:	e7f2      	b.n	8018dec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8018e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e0a:	bf00      	nop
 8018e0c:	0802b457 	.word	0x0802b457
 8018e10:	0802b594 	.word	0x0802b594
 8018e14:	0802b461 	.word	0x0802b461
 8018e18:	0802b4b8 	.word	0x0802b4b8

08018e1c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8018e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018e1e:	4604      	mov	r4, r0
 8018e20:	460d      	mov	r5, r1
 8018e22:	b1b9      	cbz	r1, 8018e54 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8018e24:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8018e28:	ab01      	add	r3, sp, #4
 8018e2a:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8018e2e:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8018e32:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8018e36:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8018e3a:	1a12      	subs	r2, r2, r0
 8018e3c:	1b89      	subs	r1, r1, r6
 8018e3e:	1a38      	subs	r0, r7, r0
 8018e40:	f004 f921 	bl	801d086 <_ZN8touchgfx6muldivElllRl>
 8018e44:	4629      	mov	r1, r5
 8018e46:	ab01      	add	r3, sp, #4
 8018e48:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8018e4c:	4430      	add	r0, r6
 8018e4e:	f004 f91a 	bl	801d086 <_ZN8touchgfx6muldivElllRl>
 8018e52:	b285      	uxth	r5, r0
 8018e54:	4628      	mov	r0, r5
 8018e56:	b003      	add	sp, #12
 8018e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018e5c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8018e5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018e60:	4604      	mov	r4, r0
 8018e62:	2600      	movs	r6, #0
 8018e64:	f7f9 f96a 	bl	801213c <_ZN8touchgfx8DrawableC1Ev>
 8018e68:	4b1b      	ldr	r3, [pc, #108]	; (8018ed8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8018e6a:	4625      	mov	r5, r4
 8018e6c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018e70:	af02      	add	r7, sp, #8
 8018e72:	62a6      	str	r6, [r4, #40]	; 0x28
 8018e74:	f845 3b2c 	str.w	r3, [r5], #44
 8018e78:	4628      	mov	r0, r5
 8018e7a:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8018e7e:	f7f9 f95d 	bl	801213c <_ZN8touchgfx8DrawableC1Ev>
 8018e82:	4b16      	ldr	r3, [pc, #88]	; (8018edc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8018e84:	4639      	mov	r1, r7
 8018e86:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8018e8a:	4628      	mov	r0, r5
 8018e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e8e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8018e92:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8018e96:	f002 fad9 	bl	801b44c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018e9a:	4638      	mov	r0, r7
 8018e9c:	f7f9 f94e 	bl	801213c <_ZN8touchgfx8DrawableC1Ev>
 8018ea0:	4b0f      	ldr	r3, [pc, #60]	; (8018ee0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8018ea2:	4632      	mov	r2, r6
 8018ea4:	4631      	mov	r1, r6
 8018ea6:	65a3      	str	r3, [r4, #88]	; 0x58
 8018ea8:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8018eac:	4628      	mov	r0, r5
 8018eae:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8018eb2:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8018eb6:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8018eba:	f7f9 f9ab 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
 8018ebe:	4629      	mov	r1, r5
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f000 f8a7 	bl	8019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018ec6:	4620      	mov	r0, r4
 8018ec8:	4639      	mov	r1, r7
 8018eca:	f000 f8a3 	bl	8019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018ece:	4620      	mov	r0, r4
 8018ed0:	b002      	add	sp, #8
 8018ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ed6:	bf00      	nop
 8018ed8:	0802b4dc 	.word	0x0802b4dc
 8018edc:	0802c640 	.word	0x0802c640
 8018ee0:	0802b6c8 	.word	0x0802b6c8

08018ee4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018ee4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018ee6:	2000      	movs	r0, #0
 8018ee8:	b12b      	cbz	r3, 8018ef6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018eea:	b920      	cbnz	r0, 8018ef6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018eec:	1a5a      	subs	r2, r3, r1
 8018eee:	699b      	ldr	r3, [r3, #24]
 8018ef0:	4250      	negs	r0, r2
 8018ef2:	4150      	adcs	r0, r2
 8018ef4:	e7f8      	b.n	8018ee8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8018ef6:	4770      	bx	lr

08018ef8 <_ZN8touchgfx9Container9removeAllEv>:
 8018ef8:	2200      	movs	r2, #0
 8018efa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018efc:	b123      	cbz	r3, 8018f08 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018efe:	6999      	ldr	r1, [r3, #24]
 8018f00:	6281      	str	r1, [r0, #40]	; 0x28
 8018f02:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018f06:	e7f8      	b.n	8018efa <_ZN8touchgfx9Container9removeAllEv+0x2>
 8018f08:	4770      	bx	lr

08018f0a <_ZN8touchgfx9Container6unlinkEv>:
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	6283      	str	r3, [r0, #40]	; 0x28
 8018f0e:	4770      	bx	lr

08018f10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f14:	461f      	mov	r7, r3
 8018f16:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8018f1a:	460d      	mov	r5, r1
 8018f1c:	4616      	mov	r6, r2
 8018f1e:	b103      	cbz	r3, 8018f22 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018f20:	6038      	str	r0, [r7, #0]
 8018f22:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018f24:	b314      	cbz	r4, 8018f6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018f26:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018f2a:	b1eb      	cbz	r3, 8018f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018f2c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018f30:	428d      	cmp	r5, r1
 8018f32:	db19      	blt.n	8018f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018f34:	b289      	uxth	r1, r1
 8018f36:	8923      	ldrh	r3, [r4, #8]
 8018f38:	440b      	add	r3, r1
 8018f3a:	b21b      	sxth	r3, r3
 8018f3c:	429d      	cmp	r5, r3
 8018f3e:	da13      	bge.n	8018f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018f40:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018f44:	4296      	cmp	r6, r2
 8018f46:	db0f      	blt.n	8018f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018f48:	b292      	uxth	r2, r2
 8018f4a:	8963      	ldrh	r3, [r4, #10]
 8018f4c:	4413      	add	r3, r2
 8018f4e:	b21b      	sxth	r3, r3
 8018f50:	429e      	cmp	r6, r3
 8018f52:	da09      	bge.n	8018f68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018f54:	6823      	ldr	r3, [r4, #0]
 8018f56:	1ab2      	subs	r2, r6, r2
 8018f58:	1a69      	subs	r1, r5, r1
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8018f60:	b212      	sxth	r2, r2
 8018f62:	463b      	mov	r3, r7
 8018f64:	b209      	sxth	r1, r1
 8018f66:	47c0      	blx	r8
 8018f68:	69a4      	ldr	r4, [r4, #24]
 8018f6a:	e7db      	b.n	8018f24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8018f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f70 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8018f70:	2200      	movs	r2, #0
 8018f72:	8002      	strh	r2, [r0, #0]
 8018f74:	8042      	strh	r2, [r0, #2]
 8018f76:	8082      	strh	r2, [r0, #4]
 8018f78:	80c2      	strh	r2, [r0, #6]
 8018f7a:	4770      	bx	lr

08018f7c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8018f7c:	b570      	push	{r4, r5, r6, lr}
 8018f7e:	460d      	mov	r5, r1
 8018f80:	4616      	mov	r6, r2
 8018f82:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018f84:	b13c      	cbz	r4, 8018f96 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018f86:	6823      	ldr	r3, [r4, #0]
 8018f88:	4620      	mov	r0, r4
 8018f8a:	4632      	mov	r2, r6
 8018f8c:	4629      	mov	r1, r5
 8018f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f90:	4798      	blx	r3
 8018f92:	69a4      	ldr	r4, [r4, #24]
 8018f94:	e7f6      	b.n	8018f84 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018f96:	bd70      	pop	{r4, r5, r6, pc}

08018f98 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8018f98:	b538      	push	{r3, r4, r5, lr}
 8018f9a:	460d      	mov	r5, r1
 8018f9c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018f9e:	b134      	cbz	r4, 8018fae <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018fa0:	682b      	ldr	r3, [r5, #0]
 8018fa2:	4621      	mov	r1, r4
 8018fa4:	4628      	mov	r0, r5
 8018fa6:	689b      	ldr	r3, [r3, #8]
 8018fa8:	4798      	blx	r3
 8018faa:	69a4      	ldr	r4, [r4, #24]
 8018fac:	e7f7      	b.n	8018f9e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8018fae:	bd38      	pop	{r3, r4, r5, pc}

08018fb0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8018fb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018fb2:	b19b      	cbz	r3, 8018fdc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018fb4:	428b      	cmp	r3, r1
 8018fb6:	d109      	bne.n	8018fcc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8018fb8:	699a      	ldr	r2, [r3, #24]
 8018fba:	2100      	movs	r1, #0
 8018fbc:	6159      	str	r1, [r3, #20]
 8018fbe:	6282      	str	r2, [r0, #40]	; 0x28
 8018fc0:	b902      	cbnz	r2, 8018fc4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018fc2:	4770      	bx	lr
 8018fc4:	6199      	str	r1, [r3, #24]
 8018fc6:	4770      	bx	lr
 8018fc8:	4613      	mov	r3, r2
 8018fca:	b13a      	cbz	r2, 8018fdc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018fcc:	699a      	ldr	r2, [r3, #24]
 8018fce:	428a      	cmp	r2, r1
 8018fd0:	d1fa      	bne.n	8018fc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018fd2:	698a      	ldr	r2, [r1, #24]
 8018fd4:	619a      	str	r2, [r3, #24]
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8018fdc:	4770      	bx	lr

08018fde <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8018fde:	b410      	push	{r4}
 8018fe0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018fe2:	4604      	mov	r4, r0
 8018fe4:	b92b      	cbnz	r3, 8018ff2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8018fe6:	6803      	ldr	r3, [r0, #0]
 8018fe8:	4611      	mov	r1, r2
 8018fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018ff0:	4718      	bx	r3
 8018ff2:	b941      	cbnz	r1, 8019006 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8018ff4:	6193      	str	r3, [r2, #24]
 8018ff6:	6282      	str	r2, [r0, #40]	; 0x28
 8018ff8:	6154      	str	r4, [r2, #20]
 8018ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ffe:	4770      	bx	lr
 8019000:	4603      	mov	r3, r0
 8019002:	2800      	cmp	r0, #0
 8019004:	d0f9      	beq.n	8018ffa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8019006:	4299      	cmp	r1, r3
 8019008:	6998      	ldr	r0, [r3, #24]
 801900a:	d1f9      	bne.n	8019000 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801900c:	6190      	str	r0, [r2, #24]
 801900e:	618a      	str	r2, [r1, #24]
 8019010:	e7f2      	b.n	8018ff8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08019014 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8019014:	4288      	cmp	r0, r1
 8019016:	b508      	push	{r3, lr}
 8019018:	d105      	bne.n	8019026 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801901a:	4b11      	ldr	r3, [pc, #68]	; (8019060 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801901c:	2123      	movs	r1, #35	; 0x23
 801901e:	4a11      	ldr	r2, [pc, #68]	; (8019064 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8019020:	4811      	ldr	r0, [pc, #68]	; (8019068 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8019022:	f00f faef 	bl	8028604 <__assert_func>
 8019026:	694b      	ldr	r3, [r1, #20]
 8019028:	b11b      	cbz	r3, 8019032 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801902a:	4b10      	ldr	r3, [pc, #64]	; (801906c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801902c:	2124      	movs	r1, #36	; 0x24
 801902e:	4a0d      	ldr	r2, [pc, #52]	; (8019064 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8019030:	e7f6      	b.n	8019020 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8019032:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8019036:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019038:	b913      	cbnz	r3, 8019040 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801903a:	6281      	str	r1, [r0, #40]	; 0x28
 801903c:	bd08      	pop	{r3, pc}
 801903e:	4613      	mov	r3, r2
 8019040:	699a      	ldr	r2, [r3, #24]
 8019042:	b12a      	cbz	r2, 8019050 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8019044:	428b      	cmp	r3, r1
 8019046:	d1fa      	bne.n	801903e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8019048:	4b09      	ldr	r3, [pc, #36]	; (8019070 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801904a:	2135      	movs	r1, #53	; 0x35
 801904c:	4a05      	ldr	r2, [pc, #20]	; (8019064 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801904e:	e7e7      	b.n	8019020 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8019050:	428b      	cmp	r3, r1
 8019052:	d103      	bne.n	801905c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8019054:	4b06      	ldr	r3, [pc, #24]	; (8019070 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8019056:	2138      	movs	r1, #56	; 0x38
 8019058:	4a02      	ldr	r2, [pc, #8]	; (8019064 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801905a:	e7e1      	b.n	8019020 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801905c:	6199      	str	r1, [r3, #24]
 801905e:	e7ed      	b.n	801903c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8019060:	0802b5f5 	.word	0x0802b5f5
 8019064:	0802b74c 	.word	0x0802b74c
 8019068:	0802b621 	.word	0x0802b621
 801906c:	0802b654 	.word	0x0802b654
 8019070:	0802b68a 	.word	0x0802b68a

08019074 <_ZN8touchgfx4RectaNERKS0_>:
 8019074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019078:	888b      	ldrh	r3, [r1, #4]
 801907a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801907e:	f9b0 a000 	ldrsh.w	sl, [r0]
 8019082:	444b      	add	r3, r9
 8019084:	b29b      	uxth	r3, r3
 8019086:	fa0f f883 	sxth.w	r8, r3
 801908a:	45c2      	cmp	sl, r8
 801908c:	da30      	bge.n	80190f0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801908e:	8882      	ldrh	r2, [r0, #4]
 8019090:	4452      	add	r2, sl
 8019092:	b292      	uxth	r2, r2
 8019094:	fa0f fe82 	sxth.w	lr, r2
 8019098:	45f1      	cmp	r9, lr
 801909a:	da29      	bge.n	80190f0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801909c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80190a0:	88cc      	ldrh	r4, [r1, #6]
 80190a2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80190a6:	442c      	add	r4, r5
 80190a8:	b224      	sxth	r4, r4
 80190aa:	42a6      	cmp	r6, r4
 80190ac:	da20      	bge.n	80190f0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80190ae:	88c7      	ldrh	r7, [r0, #6]
 80190b0:	4437      	add	r7, r6
 80190b2:	b2bf      	uxth	r7, r7
 80190b4:	fa0f fc87 	sxth.w	ip, r7
 80190b8:	4565      	cmp	r5, ip
 80190ba:	da19      	bge.n	80190f0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80190bc:	45ca      	cmp	sl, r9
 80190be:	4654      	mov	r4, sl
 80190c0:	bfb8      	it	lt
 80190c2:	464c      	movlt	r4, r9
 80190c4:	42b5      	cmp	r5, r6
 80190c6:	bfb8      	it	lt
 80190c8:	4635      	movlt	r5, r6
 80190ca:	45f0      	cmp	r8, lr
 80190cc:	bfc8      	it	gt
 80190ce:	4613      	movgt	r3, r2
 80190d0:	1b1b      	subs	r3, r3, r4
 80190d2:	8083      	strh	r3, [r0, #4]
 80190d4:	88ca      	ldrh	r2, [r1, #6]
 80190d6:	884b      	ldrh	r3, [r1, #2]
 80190d8:	8004      	strh	r4, [r0, #0]
 80190da:	4413      	add	r3, r2
 80190dc:	8045      	strh	r5, [r0, #2]
 80190de:	b29b      	uxth	r3, r3
 80190e0:	b21a      	sxth	r2, r3
 80190e2:	4594      	cmp	ip, r2
 80190e4:	bfb8      	it	lt
 80190e6:	463b      	movlt	r3, r7
 80190e8:	1b5b      	subs	r3, r3, r5
 80190ea:	80c3      	strh	r3, [r0, #6]
 80190ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190f0:	2300      	movs	r3, #0
 80190f2:	8003      	strh	r3, [r0, #0]
 80190f4:	8043      	strh	r3, [r0, #2]
 80190f6:	8083      	strh	r3, [r0, #4]
 80190f8:	80c3      	strh	r3, [r0, #6]
 80190fa:	e7f7      	b.n	80190ec <_ZN8touchgfx4RectaNERKS0_+0x78>

080190fc <_ZNK8touchgfx4Rect7isEmptyEv>:
 80190fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019100:	b12b      	cbz	r3, 801910e <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8019102:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8019106:	fab0 f080 	clz	r0, r0
 801910a:	0940      	lsrs	r0, r0, #5
 801910c:	4770      	bx	lr
 801910e:	2001      	movs	r0, #1
 8019110:	4770      	bx	lr

08019112 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8019112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019116:	2300      	movs	r3, #0
 8019118:	4604      	mov	r4, r0
 801911a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801911c:	8003      	strh	r3, [r0, #0]
 801911e:	8043      	strh	r3, [r0, #2]
 8019120:	8083      	strh	r3, [r0, #4]
 8019122:	80c3      	strh	r3, [r0, #6]
 8019124:	2d00      	cmp	r5, #0
 8019126:	d040      	beq.n	80191aa <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8019128:	1d28      	adds	r0, r5, #4
 801912a:	f7ff ffe7 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 801912e:	b988      	cbnz	r0, 8019154 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019130:	4620      	mov	r0, r4
 8019132:	f7ff ffe3 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 8019136:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801913a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801913e:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8019142:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8019146:	b138      	cbz	r0, 8019158 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8019148:	8022      	strh	r2, [r4, #0]
 801914a:	8063      	strh	r3, [r4, #2]
 801914c:	f8a4 e004 	strh.w	lr, [r4, #4]
 8019150:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019154:	69ad      	ldr	r5, [r5, #24]
 8019156:	e7e5      	b.n	8019124 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8019158:	f9b4 0000 	ldrsh.w	r0, [r4]
 801915c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019160:	4290      	cmp	r0, r2
 8019162:	4607      	mov	r7, r0
 8019164:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8019168:	460e      	mov	r6, r1
 801916a:	bfa8      	it	ge
 801916c:	4617      	movge	r7, r2
 801916e:	4299      	cmp	r1, r3
 8019170:	4472      	add	r2, lr
 8019172:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8019176:	bfa8      	it	ge
 8019178:	461e      	movge	r6, r3
 801917a:	4440      	add	r0, r8
 801917c:	4471      	add	r1, lr
 801917e:	4463      	add	r3, ip
 8019180:	b200      	sxth	r0, r0
 8019182:	8027      	strh	r7, [r4, #0]
 8019184:	b212      	sxth	r2, r2
 8019186:	8066      	strh	r6, [r4, #2]
 8019188:	b209      	sxth	r1, r1
 801918a:	b21b      	sxth	r3, r3
 801918c:	4290      	cmp	r0, r2
 801918e:	bfac      	ite	ge
 8019190:	ebc7 0200 	rsbge	r2, r7, r0
 8019194:	ebc7 0202 	rsblt	r2, r7, r2
 8019198:	4299      	cmp	r1, r3
 801919a:	bfac      	ite	ge
 801919c:	ebc6 0301 	rsbge	r3, r6, r1
 80191a0:	ebc6 0303 	rsblt	r3, r6, r3
 80191a4:	80a2      	strh	r2, [r4, #4]
 80191a6:	80e3      	strh	r3, [r4, #6]
 80191a8:	e7d4      	b.n	8019154 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80191aa:	4620      	mov	r0, r4
 80191ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080191b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80191b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80191b4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80191b8:	b383      	cbz	r3, 801921c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80191ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80191bc:	b374      	cbz	r4, 801921c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80191be:	f9b1 5000 	ldrsh.w	r5, [r1]
 80191c2:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80191c6:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80191ca:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80191ce:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80191d2:	b303      	cbz	r3, 8019216 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80191d4:	4668      	mov	r0, sp
 80191d6:	1d21      	adds	r1, r4, #4
 80191d8:	f8ad 5000 	strh.w	r5, [sp]
 80191dc:	f8ad 6002 	strh.w	r6, [sp, #2]
 80191e0:	f8ad 7004 	strh.w	r7, [sp, #4]
 80191e4:	f8ad 8006 	strh.w	r8, [sp, #6]
 80191e8:	f7ff ff44 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 80191ec:	4668      	mov	r0, sp
 80191ee:	f7ff ff85 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 80191f2:	b980      	cbnz	r0, 8019216 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80191f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80191f8:	4669      	mov	r1, sp
 80191fa:	88a2      	ldrh	r2, [r4, #4]
 80191fc:	4620      	mov	r0, r4
 80191fe:	1a9b      	subs	r3, r3, r2
 8019200:	88e2      	ldrh	r2, [r4, #6]
 8019202:	f8ad 3000 	strh.w	r3, [sp]
 8019206:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801920a:	1a9b      	subs	r3, r3, r2
 801920c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019210:	6823      	ldr	r3, [r4, #0]
 8019212:	689b      	ldr	r3, [r3, #8]
 8019214:	4798      	blx	r3
 8019216:	69a4      	ldr	r4, [r4, #24]
 8019218:	2c00      	cmp	r4, #0
 801921a:	d1d8      	bne.n	80191ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801921c:	b002      	add	sp, #8
 801921e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019222 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8019222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019224:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019228:	460d      	mov	r5, r1
 801922a:	4616      	mov	r6, r2
 801922c:	b323      	cbz	r3, 8019278 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801922e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019230:	b314      	cbz	r4, 8019278 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019232:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019236:	b1eb      	cbz	r3, 8019274 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019238:	6828      	ldr	r0, [r5, #0]
 801923a:	466b      	mov	r3, sp
 801923c:	6869      	ldr	r1, [r5, #4]
 801923e:	c303      	stmia	r3!, {r0, r1}
 8019240:	4668      	mov	r0, sp
 8019242:	1d21      	adds	r1, r4, #4
 8019244:	f7ff ff16 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 8019248:	4668      	mov	r0, sp
 801924a:	f7ff ff57 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 801924e:	b988      	cbnz	r0, 8019274 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019250:	f8bd 3000 	ldrh.w	r3, [sp]
 8019254:	4669      	mov	r1, sp
 8019256:	88a2      	ldrh	r2, [r4, #4]
 8019258:	4620      	mov	r0, r4
 801925a:	1a9b      	subs	r3, r3, r2
 801925c:	88e2      	ldrh	r2, [r4, #6]
 801925e:	f8ad 3000 	strh.w	r3, [sp]
 8019262:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019266:	1a9b      	subs	r3, r3, r2
 8019268:	4632      	mov	r2, r6
 801926a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801926e:	6823      	ldr	r3, [r4, #0]
 8019270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019272:	4798      	blx	r3
 8019274:	69a4      	ldr	r4, [r4, #24]
 8019276:	e7db      	b.n	8019230 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8019278:	b002      	add	sp, #8
 801927a:	bd70      	pop	{r4, r5, r6, pc}

0801927c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801927c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019280:	4770      	bx	lr

08019282 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019282:	6803      	ldr	r3, [r0, #0]
 8019284:	b513      	push	{r0, r1, r4, lr}
 8019286:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801928a:	2300      	movs	r3, #0
 801928c:	e9cd 3300 	strd	r3, r3, [sp]
 8019290:	466b      	mov	r3, sp
 8019292:	47a0      	blx	r4
 8019294:	b002      	add	sp, #8
 8019296:	bd10      	pop	{r4, pc}

08019298 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8019298:	2301      	movs	r3, #1
 801929a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801929e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80192a2:	4770      	bx	lr

080192a4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80192a4:	2301      	movs	r3, #1
 80192a6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80192aa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80192ae:	4770      	bx	lr

080192b0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80192b0:	6843      	ldr	r3, [r0, #4]
 80192b2:	2201      	movs	r2, #1
 80192b4:	725a      	strb	r2, [r3, #9]
 80192b6:	6840      	ldr	r0, [r0, #4]
 80192b8:	6803      	ldr	r3, [r0, #0]
 80192ba:	691b      	ldr	r3, [r3, #16]
 80192bc:	4718      	bx	r3

080192be <_ZN8touchgfx3HAL8flushDMAEv>:
 80192be:	6840      	ldr	r0, [r0, #4]
 80192c0:	6803      	ldr	r3, [r0, #0]
 80192c2:	689b      	ldr	r3, [r3, #8]
 80192c4:	4718      	bx	r3
	...

080192c8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80192c8:	4b04      	ldr	r3, [pc, #16]	; (80192dc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80192ca:	781b      	ldrb	r3, [r3, #0]
 80192cc:	b123      	cbz	r3, 80192d8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80192ce:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80192d2:	f080 0001 	eor.w	r0, r0, #1
 80192d6:	4770      	bx	lr
 80192d8:	2001      	movs	r0, #1
 80192da:	4770      	bx	lr
 80192dc:	2000beec 	.word	0x2000beec

080192e0 <_ZN8touchgfx3HAL8endFrameEv>:
 80192e0:	b510      	push	{r4, lr}
 80192e2:	4604      	mov	r4, r0
 80192e4:	6840      	ldr	r0, [r0, #4]
 80192e6:	6803      	ldr	r3, [r0, #0]
 80192e8:	689b      	ldr	r3, [r3, #8]
 80192ea:	4798      	blx	r3
 80192ec:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80192f0:	b113      	cbz	r3, 80192f8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80192f2:	2301      	movs	r3, #1
 80192f4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80192f8:	bd10      	pop	{r4, pc}

080192fa <_ZN8touchgfx3HAL9taskEntryEv>:
 80192fa:	b508      	push	{r3, lr}
 80192fc:	6803      	ldr	r3, [r0, #0]
 80192fe:	4604      	mov	r4, r0
 8019300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019302:	4798      	blx	r3
 8019304:	6823      	ldr	r3, [r4, #0]
 8019306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019308:	4620      	mov	r0, r4
 801930a:	4798      	blx	r3
 801930c:	f7fd fc24 	bl	8016b58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8019310:	6823      	ldr	r3, [r4, #0]
 8019312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019314:	e7f8      	b.n	8019308 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08019318 <_ZN8touchgfx3HAL4tickEv>:
 8019318:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801931a:	6803      	ldr	r3, [r0, #0]
 801931c:	4604      	mov	r4, r0
 801931e:	4d5c      	ldr	r5, [pc, #368]	; (8019490 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8019320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019324:	4798      	blx	r3
 8019326:	2800      	cmp	r0, #0
 8019328:	f000 8097 	beq.w	801945a <_ZN8touchgfx3HAL4tickEv+0x142>
 801932c:	2001      	movs	r0, #1
 801932e:	2600      	movs	r6, #0
 8019330:	f7fd f8f6 	bl	8016520 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019334:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8019338:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801933c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019340:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8019344:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8019348:	b133      	cbz	r3, 8019358 <_ZN8touchgfx3HAL4tickEv+0x40>
 801934a:	6823      	ldr	r3, [r4, #0]
 801934c:	4620      	mov	r0, r4
 801934e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8019352:	4798      	blx	r3
 8019354:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8019358:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801935c:	2601      	movs	r6, #1
 801935e:	6862      	ldr	r2, [r4, #4]
 8019360:	f083 0301 	eor.w	r3, r3, #1
 8019364:	702e      	strb	r6, [r5, #0]
 8019366:	7253      	strb	r3, [r2, #9]
 8019368:	f003 f91e 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 801936c:	6803      	ldr	r3, [r0, #0]
 801936e:	4631      	mov	r1, r6
 8019370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019372:	4798      	blx	r3
 8019374:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019378:	b90b      	cbnz	r3, 801937e <_ZN8touchgfx3HAL4tickEv+0x66>
 801937a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801937e:	f003 f913 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 8019382:	6803      	ldr	r3, [r0, #0]
 8019384:	695b      	ldr	r3, [r3, #20]
 8019386:	4798      	blx	r3
 8019388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801938a:	6803      	ldr	r3, [r0, #0]
 801938c:	691b      	ldr	r3, [r3, #16]
 801938e:	4798      	blx	r3
 8019390:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019394:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8019398:	3b01      	subs	r3, #1
 801939a:	b2db      	uxtb	r3, r3
 801939c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80193a0:	b10a      	cbz	r2, 80193a6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d1eb      	bne.n	801937e <_ZN8touchgfx3HAL4tickEv+0x66>
 80193a6:	4a3b      	ldr	r2, [pc, #236]	; (8019494 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80193a8:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80193ac:	7813      	ldrb	r3, [r2, #0]
 80193ae:	3301      	adds	r3, #1
 80193b0:	b25b      	sxtb	r3, r3
 80193b2:	4299      	cmp	r1, r3
 80193b4:	7013      	strb	r3, [r2, #0]
 80193b6:	dc10      	bgt.n	80193da <_ZN8touchgfx3HAL4tickEv+0xc2>
 80193b8:	2300      	movs	r3, #0
 80193ba:	68e0      	ldr	r0, [r4, #12]
 80193bc:	a902      	add	r1, sp, #8
 80193be:	7013      	strb	r3, [r2, #0]
 80193c0:	aa03      	add	r2, sp, #12
 80193c2:	6803      	ldr	r3, [r0, #0]
 80193c4:	68db      	ldr	r3, [r3, #12]
 80193c6:	4798      	blx	r3
 80193c8:	6823      	ldr	r3, [r4, #0]
 80193ca:	2800      	cmp	r0, #0
 80193cc:	d051      	beq.n	8019472 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80193ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80193d2:	4620      	mov	r0, r4
 80193d4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80193d8:	4798      	blx	r3
 80193da:	2300      	movs	r3, #0
 80193dc:	6960      	ldr	r0, [r4, #20]
 80193de:	f88d 3007 	strb.w	r3, [sp, #7]
 80193e2:	b158      	cbz	r0, 80193fc <_ZN8touchgfx3HAL4tickEv+0xe4>
 80193e4:	6803      	ldr	r3, [r0, #0]
 80193e6:	f10d 0107 	add.w	r1, sp, #7
 80193ea:	68db      	ldr	r3, [r3, #12]
 80193ec:	4798      	blx	r3
 80193ee:	b128      	cbz	r0, 80193fc <_ZN8touchgfx3HAL4tickEv+0xe4>
 80193f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80193f6:	6803      	ldr	r3, [r0, #0]
 80193f8:	68db      	ldr	r3, [r3, #12]
 80193fa:	4798      	blx	r3
 80193fc:	f104 001c 	add.w	r0, r4, #28
 8019400:	f00d fc34 	bl	8026c6c <_ZN8touchgfx8Gestures4tickEv>
 8019404:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8019408:	b30b      	cbz	r3, 801944e <_ZN8touchgfx3HAL4tickEv+0x136>
 801940a:	6920      	ldr	r0, [r4, #16]
 801940c:	6803      	ldr	r3, [r0, #0]
 801940e:	691b      	ldr	r3, [r3, #16]
 8019410:	4798      	blx	r3
 8019412:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019414:	4606      	mov	r6, r0
 8019416:	b903      	cbnz	r3, 801941a <_ZN8touchgfx3HAL4tickEv+0x102>
 8019418:	6720      	str	r0, [r4, #112]	; 0x70
 801941a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801941c:	4a1e      	ldr	r2, [pc, #120]	; (8019498 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801941e:	1af3      	subs	r3, r6, r3
 8019420:	4293      	cmp	r3, r2
 8019422:	d914      	bls.n	801944e <_ZN8touchgfx3HAL4tickEv+0x136>
 8019424:	6920      	ldr	r0, [r4, #16]
 8019426:	6803      	ldr	r3, [r0, #0]
 8019428:	699b      	ldr	r3, [r3, #24]
 801942a:	4798      	blx	r3
 801942c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801942e:	2264      	movs	r2, #100	; 0x64
 8019430:	1af3      	subs	r3, r6, r3
 8019432:	fbb3 f3f2 	udiv	r3, r3, r2
 8019436:	fbb0 f0f3 	udiv	r0, r0, r3
 801943a:	2800      	cmp	r0, #0
 801943c:	dc1e      	bgt.n	801947c <_ZN8touchgfx3HAL4tickEv+0x164>
 801943e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8019442:	6920      	ldr	r0, [r4, #16]
 8019444:	2100      	movs	r1, #0
 8019446:	6803      	ldr	r3, [r0, #0]
 8019448:	69db      	ldr	r3, [r3, #28]
 801944a:	4798      	blx	r3
 801944c:	6726      	str	r6, [r4, #112]	; 0x70
 801944e:	f003 f8ab 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 8019452:	6803      	ldr	r3, [r0, #0]
 8019454:	2100      	movs	r1, #0
 8019456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019458:	4798      	blx	r3
 801945a:	6823      	ldr	r3, [r4, #0]
 801945c:	4620      	mov	r0, r4
 801945e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019462:	4798      	blx	r3
 8019464:	2001      	movs	r0, #1
 8019466:	f7fd f866 	bl	8016536 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801946a:	2300      	movs	r3, #0
 801946c:	702b      	strb	r3, [r5, #0]
 801946e:	b004      	add	sp, #16
 8019470:	bd70      	pop	{r4, r5, r6, pc}
 8019472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019476:	4620      	mov	r0, r4
 8019478:	4798      	blx	r3
 801947a:	e7ae      	b.n	80193da <_ZN8touchgfx3HAL4tickEv+0xc2>
 801947c:	2863      	cmp	r0, #99	; 0x63
 801947e:	bfcb      	itete	gt
 8019480:	2300      	movgt	r3, #0
 8019482:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8019486:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801948a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801948e:	e7d8      	b.n	8019442 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8019490:	2000bef4 	.word	0x2000bef4
 8019494:	2000bef5 	.word	0x2000bef5
 8019498:	05f5e100 	.word	0x05f5e100

0801949c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801949c:	f7fd bafc 	b.w	8016a98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080194a0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80194a0:	6581      	str	r1, [r0, #88]	; 0x58
 80194a2:	301c      	adds	r0, #28
 80194a4:	f00d bbe0 	b.w	8026c68 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080194a8 <_ZN8touchgfx3HAL5touchEll>:
 80194a8:	b530      	push	{r4, r5, lr}
 80194aa:	b087      	sub	sp, #28
 80194ac:	4604      	mov	r4, r0
 80194ae:	a804      	add	r0, sp, #16
 80194b0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80194b4:	f002 fe7c 	bl	801c1b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80194b8:	9b04      	ldr	r3, [sp, #16]
 80194ba:	a906      	add	r1, sp, #24
 80194bc:	a803      	add	r0, sp, #12
 80194be:	f8ad 300c 	strh.w	r3, [sp, #12]
 80194c2:	9b05      	ldr	r3, [sp, #20]
 80194c4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80194c8:	f002 fec0 	bl	801c24c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80194cc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80194d0:	f104 001c 	add.w	r0, r4, #28
 80194d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80194d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80194dc:	b189      	cbz	r1, 8019502 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80194de:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80194e2:	9300      	str	r3, [sp, #0]
 80194e4:	4613      	mov	r3, r2
 80194e6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80194ea:	462a      	mov	r2, r5
 80194ec:	f00d fbcc 	bl	8026c88 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80194f0:	b128      	cbz	r0, 80194fe <_ZN8touchgfx3HAL5touchEll+0x56>
 80194f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80194f6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80194f8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80194fc:	6623      	str	r3, [r4, #96]	; 0x60
 80194fe:	b007      	add	sp, #28
 8019500:	bd30      	pop	{r4, r5, pc}
 8019502:	f00d fc05 	bl	8026d10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019506:	2301      	movs	r3, #1
 8019508:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801950c:	e7f1      	b.n	80194f2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801950e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801950e:	b570      	push	{r4, r5, r6, lr}
 8019510:	2b00      	cmp	r3, #0
 8019512:	d050      	beq.n	80195b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8019514:	ea81 0002 	eor.w	r0, r1, r2
 8019518:	07c6      	lsls	r6, r0, #31
 801951a:	d508      	bpl.n	801952e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801951c:	3a01      	subs	r2, #1
 801951e:	18cc      	adds	r4, r1, r3
 8019520:	42a1      	cmp	r1, r4
 8019522:	d048      	beq.n	80195b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8019524:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019528:	f801 0b01 	strb.w	r0, [r1], #1
 801952c:	e7f8      	b.n	8019520 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801952e:	07d5      	lsls	r5, r2, #31
 8019530:	bf42      	ittt	mi
 8019532:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8019536:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801953a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801953e:	2b01      	cmp	r3, #1
 8019540:	d915      	bls.n	801956e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8019542:	ea82 0001 	eor.w	r0, r2, r1
 8019546:	0784      	lsls	r4, r0, #30
 8019548:	d02d      	beq.n	80195a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801954a:	1e94      	subs	r4, r2, #2
 801954c:	4608      	mov	r0, r1
 801954e:	18ce      	adds	r6, r1, r3
 8019550:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8019554:	f820 5b02 	strh.w	r5, [r0], #2
 8019558:	1a35      	subs	r5, r6, r0
 801955a:	2d01      	cmp	r5, #1
 801955c:	d8f8      	bhi.n	8019550 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801955e:	1e98      	subs	r0, r3, #2
 8019560:	f003 0301 	and.w	r3, r3, #1
 8019564:	f020 0001 	bic.w	r0, r0, #1
 8019568:	3002      	adds	r0, #2
 801956a:	4401      	add	r1, r0
 801956c:	4402      	add	r2, r0
 801956e:	1f14      	subs	r4, r2, #4
 8019570:	4608      	mov	r0, r1
 8019572:	18ce      	adds	r6, r1, r3
 8019574:	1a35      	subs	r5, r6, r0
 8019576:	2d03      	cmp	r5, #3
 8019578:	d810      	bhi.n	801959c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801957a:	089c      	lsrs	r4, r3, #2
 801957c:	00a0      	lsls	r0, r4, #2
 801957e:	4401      	add	r1, r0
 8019580:	3801      	subs	r0, #1
 8019582:	4402      	add	r2, r0
 8019584:	f06f 0003 	mvn.w	r0, #3
 8019588:	fb00 3404 	mla	r4, r0, r4, r3
 801958c:	440c      	add	r4, r1
 801958e:	42a1      	cmp	r1, r4
 8019590:	d011      	beq.n	80195b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8019592:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8019596:	f801 3b01 	strb.w	r3, [r1], #1
 801959a:	e7f8      	b.n	801958e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801959c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80195a0:	f840 5b04 	str.w	r5, [r0], #4
 80195a4:	e7e6      	b.n	8019574 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80195a6:	0790      	lsls	r0, r2, #30
 80195a8:	d0e1      	beq.n	801956e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80195aa:	f832 0b02 	ldrh.w	r0, [r2], #2
 80195ae:	3b02      	subs	r3, #2
 80195b0:	f821 0b02 	strh.w	r0, [r1], #2
 80195b4:	e7db      	b.n	801956e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80195b6:	2001      	movs	r0, #1
 80195b8:	bd70      	pop	{r4, r5, r6, pc}

080195ba <_ZN8touchgfx3HAL7noTouchEv>:
 80195ba:	b510      	push	{r4, lr}
 80195bc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80195c0:	4604      	mov	r4, r0
 80195c2:	b153      	cbz	r3, 80195da <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80195c4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80195c8:	2101      	movs	r1, #1
 80195ca:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80195ce:	301c      	adds	r0, #28
 80195d0:	f00d fb9e 	bl	8026d10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80195d4:	2300      	movs	r3, #0
 80195d6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80195da:	bd10      	pop	{r4, pc}

080195dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80195dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195e0:	4605      	mov	r5, r0
 80195e2:	6980      	ldr	r0, [r0, #24]
 80195e4:	b085      	sub	sp, #20
 80195e6:	460f      	mov	r7, r1
 80195e8:	4690      	mov	r8, r2
 80195ea:	4699      	mov	r9, r3
 80195ec:	b930      	cbnz	r0, 80195fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80195ee:	4b1f      	ldr	r3, [pc, #124]	; (801966c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80195f0:	f44f 7198 	mov.w	r1, #304	; 0x130
 80195f4:	4a1e      	ldr	r2, [pc, #120]	; (8019670 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80195f6:	481f      	ldr	r0, [pc, #124]	; (8019674 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80195f8:	f00f f804 	bl	8028604 <__assert_func>
 80195fc:	ac04      	add	r4, sp, #16
 80195fe:	2600      	movs	r6, #0
 8019600:	f844 6d04 	str.w	r6, [r4, #-4]!
 8019604:	6806      	ldr	r6, [r0, #0]
 8019606:	9401      	str	r4, [sp, #4]
 8019608:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801960c:	9400      	str	r4, [sp, #0]
 801960e:	6834      	ldr	r4, [r6, #0]
 8019610:	47a0      	blx	r4
 8019612:	4c19      	ldr	r4, [pc, #100]	; (8019678 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8019614:	4606      	mov	r6, r0
 8019616:	f8a4 9000 	strh.w	r9, [r4]
 801961a:	f7f7 fbd9 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801961e:	6803      	ldr	r3, [r0, #0]
 8019620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019622:	4798      	blx	r3
 8019624:	280c      	cmp	r0, #12
 8019626:	d80f      	bhi.n	8019648 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8019628:	e8df f000 	tbb	[pc, r0]
 801962c:	1b1b1207 	.word	0x1b1b1207
 8019630:	1b1b1b1b 	.word	0x1b1b1b1b
 8019634:	1b1b1b1b 	.word	0x1b1b1b1b
 8019638:	1b          	.byte	0x1b
 8019639:	00          	.byte	0x00
 801963a:	8823      	ldrh	r3, [r4, #0]
 801963c:	fb08 7203 	mla	r2, r8, r3, r7
 8019640:	9b03      	ldr	r3, [sp, #12]
 8019642:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8019646:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019648:	4630      	mov	r0, r6
 801964a:	b005      	add	sp, #20
 801964c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019650:	8822      	ldrh	r2, [r4, #0]
 8019652:	9b03      	ldr	r3, [sp, #12]
 8019654:	fb08 7202 	mla	r2, r8, r2, r7
 8019658:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801965c:	1a9a      	subs	r2, r3, r2
 801965e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8019660:	e7f2      	b.n	8019648 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8019662:	4b06      	ldr	r3, [pc, #24]	; (801967c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8019664:	f240 114d 	movw	r1, #333	; 0x14d
 8019668:	4a01      	ldr	r2, [pc, #4]	; (8019670 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801966a:	e7c4      	b.n	80195f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801966c:	0802b7f5 	.word	0x0802b7f5
 8019670:	0802bb06 	.word	0x0802bb06
 8019674:	0802b83a 	.word	0x0802b83a
 8019678:	2000bee8 	.word	0x2000bee8
 801967c:	0802b860 	.word	0x0802b860

08019680 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8019680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019684:	4698      	mov	r8, r3
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	b087      	sub	sp, #28
 801968a:	460e      	mov	r6, r1
 801968c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801968e:	4617      	mov	r7, r2
 8019690:	4b0d      	ldr	r3, [pc, #52]	; (80196c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8019692:	4604      	mov	r4, r0
 8019694:	f8b3 9000 	ldrh.w	r9, [r3]
 8019698:	f7f7 fb9a 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801969c:	6803      	ldr	r3, [r0, #0]
 801969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a0:	4798      	blx	r3
 80196a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80196a6:	463a      	mov	r2, r7
 80196a8:	4631      	mov	r1, r6
 80196aa:	9302      	str	r3, [sp, #8]
 80196ac:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80196b0:	9301      	str	r3, [sp, #4]
 80196b2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80196b6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80196ba:	9300      	str	r3, [sp, #0]
 80196bc:	4620      	mov	r0, r4
 80196be:	4643      	mov	r3, r8
 80196c0:	47a8      	blx	r5
 80196c2:	b007      	add	sp, #28
 80196c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196c8:	2000bee8 	.word	0x2000bee8

080196cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80196cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d0:	4606      	mov	r6, r0
 80196d2:	b089      	sub	sp, #36	; 0x24
 80196d4:	4610      	mov	r0, r2
 80196d6:	460c      	mov	r4, r1
 80196d8:	4691      	mov	r9, r2
 80196da:	4698      	mov	r8, r3
 80196dc:	f005 f980 	bl	801e9e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80196e0:	2800      	cmp	r0, #0
 80196e2:	f000 8092 	beq.w	801980a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80196e6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8019824 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80196ea:	ad08      	add	r5, sp, #32
 80196ec:	f8df b138 	ldr.w	fp, [pc, #312]	; 8019828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80196f0:	f8da 0000 	ldr.w	r0, [sl]
 80196f4:	4f4a      	ldr	r7, [pc, #296]	; (8019820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80196f6:	6802      	ldr	r2, [r0, #0]
 80196f8:	6a12      	ldr	r2, [r2, #32]
 80196fa:	4790      	blx	r2
 80196fc:	f8da 0000 	ldr.w	r0, [sl]
 8019700:	6802      	ldr	r2, [r0, #0]
 8019702:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019704:	4790      	blx	r2
 8019706:	f8bb 3000 	ldrh.w	r3, [fp]
 801970a:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801970e:	4628      	mov	r0, r5
 8019710:	9300      	str	r3, [sp, #0]
 8019712:	883b      	ldrh	r3, [r7, #0]
 8019714:	9301      	str	r3, [sp, #4]
 8019716:	f005 fa23 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801971a:	f8ab 0000 	strh.w	r0, [fp]
 801971e:	4628      	mov	r0, r5
 8019720:	f005 fa58 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019724:	f8da b000 	ldr.w	fp, [sl]
 8019728:	8038      	strh	r0, [r7, #0]
 801972a:	4648      	mov	r0, r9
 801972c:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8019730:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8019734:	9302      	str	r3, [sp, #8]
 8019736:	f005 f953 	bl	801e9e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801973a:	f8da 2000 	ldr.w	r2, [sl]
 801973e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8019742:	63d0      	str	r0, [r2, #60]	; 0x3c
 8019744:	4620      	mov	r0, r4
 8019746:	6822      	ldr	r2, [r4, #0]
 8019748:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801974c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801974e:	2200      	movs	r2, #0
 8019750:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8019754:	4611      	mov	r1, r2
 8019756:	4798      	blx	r3
 8019758:	2201      	movs	r2, #1
 801975a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801975e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8019762:	1d22      	adds	r2, r4, #4
 8019764:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8019768:	2900      	cmp	r1, #0
 801976a:	d051      	beq.n	8019810 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801976c:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8019770:	2900      	cmp	r1, #0
 8019772:	d04d      	beq.n	8019810 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8019774:	6810      	ldr	r0, [r2, #0]
 8019776:	f10d 0c18 	add.w	ip, sp, #24
 801977a:	6851      	ldr	r1, [r2, #4]
 801977c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019780:	4641      	mov	r1, r8
 8019782:	a806      	add	r0, sp, #24
 8019784:	f7ff fc76 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 8019788:	4628      	mov	r0, r5
 801978a:	f005 fb75 	bl	801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801978e:	4680      	mov	r8, r0
 8019790:	f7f7 fb1e 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8019794:	6802      	ldr	r2, [r0, #0]
 8019796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019798:	4790      	blx	r2
 801979a:	4580      	cmp	r8, r0
 801979c:	d03d      	beq.n	801981a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801979e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80197a0:	b150      	cbz	r0, 80197b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80197a2:	4628      	mov	r0, r5
 80197a4:	f005 fb68 	bl	801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80197a8:	4605      	mov	r5, r0
 80197aa:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80197ac:	6803      	ldr	r3, [r0, #0]
 80197ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197b0:	4798      	blx	r3
 80197b2:	1a2b      	subs	r3, r5, r0
 80197b4:	4258      	negs	r0, r3
 80197b6:	4158      	adcs	r0, r3
 80197b8:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80197bc:	2500      	movs	r5, #0
 80197be:	6963      	ldr	r3, [r4, #20]
 80197c0:	4620      	mov	r0, r4
 80197c2:	6822      	ldr	r2, [r4, #0]
 80197c4:	a906      	add	r1, sp, #24
 80197c6:	6165      	str	r5, [r4, #20]
 80197c8:	9303      	str	r3, [sp, #12]
 80197ca:	6892      	ldr	r2, [r2, #8]
 80197cc:	4790      	blx	r2
 80197ce:	9b03      	ldr	r3, [sp, #12]
 80197d0:	4620      	mov	r0, r4
 80197d2:	4652      	mov	r2, sl
 80197d4:	6163      	str	r3, [r4, #20]
 80197d6:	4649      	mov	r1, r9
 80197d8:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80197dc:	6823      	ldr	r3, [r4, #0]
 80197de:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80197e2:	4c10      	ldr	r4, [pc, #64]	; (8019824 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80197e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197e6:	4798      	blx	r3
 80197e8:	6820      	ldr	r0, [r4, #0]
 80197ea:	9b02      	ldr	r3, [sp, #8]
 80197ec:	9a00      	ldr	r2, [sp, #0]
 80197ee:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80197f2:	4b0d      	ldr	r3, [pc, #52]	; (8019828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80197f4:	801a      	strh	r2, [r3, #0]
 80197f6:	4b0a      	ldr	r3, [pc, #40]	; (8019820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80197f8:	9a01      	ldr	r2, [sp, #4]
 80197fa:	801a      	strh	r2, [r3, #0]
 80197fc:	6803      	ldr	r3, [r0, #0]
 80197fe:	6a1b      	ldr	r3, [r3, #32]
 8019800:	4798      	blx	r3
 8019802:	6820      	ldr	r0, [r4, #0]
 8019804:	6803      	ldr	r3, [r0, #0]
 8019806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019808:	4798      	blx	r3
 801980a:	b009      	add	sp, #36	; 0x24
 801980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019810:	ab06      	add	r3, sp, #24
 8019812:	6810      	ldr	r0, [r2, #0]
 8019814:	6851      	ldr	r1, [r2, #4]
 8019816:	c303      	stmia	r3!, {r0, r1}
 8019818:	e7b6      	b.n	8019788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801981a:	2000      	movs	r0, #0
 801981c:	e7cc      	b.n	80197b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801981e:	bf00      	nop
 8019820:	2000beea 	.word	0x2000beea
 8019824:	2000bef0 	.word	0x2000bef0
 8019828:	2000bee8 	.word	0x2000bee8

0801982c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801982c:	4b07      	ldr	r3, [pc, #28]	; (801984c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801982e:	b510      	push	{r4, lr}
 8019830:	781b      	ldrb	r3, [r3, #0]
 8019832:	4604      	mov	r4, r0
 8019834:	b13b      	cbz	r3, 8019846 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019836:	6803      	ldr	r3, [r0, #0]
 8019838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801983a:	4798      	blx	r3
 801983c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801983e:	4283      	cmp	r3, r0
 8019840:	d101      	bne.n	8019846 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019842:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019844:	bd10      	pop	{r4, pc}
 8019846:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019848:	e7fc      	b.n	8019844 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801984a:	bf00      	nop
 801984c:	2000beec 	.word	0x2000beec

08019850 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019850:	4b0b      	ldr	r3, [pc, #44]	; (8019880 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8019852:	b510      	push	{r4, lr}
 8019854:	781b      	ldrb	r3, [r3, #0]
 8019856:	4604      	mov	r4, r0
 8019858:	b95b      	cbnz	r3, 8019872 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801985a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801985e:	2b02      	cmp	r3, #2
 8019860:	d007      	beq.n	8019872 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019862:	6840      	ldr	r0, [r0, #4]
 8019864:	f000 fbc8 	bl	8019ff8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019868:	b118      	cbz	r0, 8019872 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801986a:	6862      	ldr	r2, [r4, #4]
 801986c:	7a53      	ldrb	r3, [r2, #9]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d0fc      	beq.n	801986c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019872:	f7fd f903 	bl	8016a7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019876:	4620      	mov	r0, r4
 8019878:	f7ff ffd8 	bl	801982c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801987c:	bd10      	pop	{r4, pc}
 801987e:	bf00      	nop
 8019880:	2000beec 	.word	0x2000beec

08019884 <_ZN8touchgfx3HAL10initializeEv>:
 8019884:	b510      	push	{r4, lr}
 8019886:	4604      	mov	r4, r0
 8019888:	f7fd f8d4 	bl	8016a34 <_ZN8touchgfx10OSWrappers10initializeEv>
 801988c:	6860      	ldr	r0, [r4, #4]
 801988e:	6803      	ldr	r3, [r0, #0]
 8019890:	68db      	ldr	r3, [r3, #12]
 8019892:	4798      	blx	r3
 8019894:	68e0      	ldr	r0, [r4, #12]
 8019896:	6803      	ldr	r3, [r0, #0]
 8019898:	689b      	ldr	r3, [r3, #8]
 801989a:	4798      	blx	r3
 801989c:	6823      	ldr	r3, [r4, #0]
 801989e:	4620      	mov	r0, r4
 80198a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198a6:	4718      	bx	r3

080198a8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80198a8:	b508      	push	{r3, lr}
 80198aa:	290c      	cmp	r1, #12
 80198ac:	d817      	bhi.n	80198de <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80198ae:	e8df f001 	tbb	[pc, r1]
 80198b2:	090b      	.short	0x090b
 80198b4:	0d0d0d07 	.word	0x0d0d0d07
 80198b8:	1414140d 	.word	0x1414140d
 80198bc:	1414      	.short	0x1414
 80198be:	0d          	.byte	0x0d
 80198bf:	00          	.byte	0x00
 80198c0:	2020      	movs	r0, #32
 80198c2:	bd08      	pop	{r3, pc}
 80198c4:	2018      	movs	r0, #24
 80198c6:	e7fc      	b.n	80198c2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80198c8:	2010      	movs	r0, #16
 80198ca:	e7fa      	b.n	80198c2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80198cc:	4b05      	ldr	r3, [pc, #20]	; (80198e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80198ce:	f44f 710c 	mov.w	r1, #560	; 0x230
 80198d2:	4a05      	ldr	r2, [pc, #20]	; (80198e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80198d4:	4805      	ldr	r0, [pc, #20]	; (80198ec <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80198d6:	f00e fe95 	bl	8028604 <__assert_func>
 80198da:	2008      	movs	r0, #8
 80198dc:	e7f1      	b.n	80198c2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80198de:	2000      	movs	r0, #0
 80198e0:	e7ef      	b.n	80198c2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80198e2:	bf00      	nop
 80198e4:	0802b933 	.word	0x0802b933
 80198e8:	0802bcc8 	.word	0x0802bcc8
 80198ec:	0802b83a 	.word	0x0802b83a

080198f0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80198f0:	b570      	push	{r4, r5, r6, lr}
 80198f2:	460d      	mov	r5, r1
 80198f4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80198f8:	4616      	mov	r6, r2
 80198fa:	461c      	mov	r4, r3
 80198fc:	f7ff ffd4 	bl	80198a8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8019900:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8019904:	10c0      	asrs	r0, r0, #3
 8019906:	fb06 5101 	mla	r1, r6, r1, r5
 801990a:	fb00 4001 	mla	r0, r0, r1, r4
 801990e:	bd70      	pop	{r4, r5, r6, pc}

08019910 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8019910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019914:	b08a      	sub	sp, #40	; 0x28
 8019916:	f04f 0c00 	mov.w	ip, #0
 801991a:	4604      	mov	r4, r0
 801991c:	469a      	mov	sl, r3
 801991e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8019922:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8019926:	f1b8 0f02 	cmp.w	r8, #2
 801992a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801992e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019932:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8019936:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801993a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801993e:	f8cd c020 	str.w	ip, [sp, #32]
 8019942:	d030      	beq.n	80199a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8019944:	2bff      	cmp	r3, #255	; 0xff
 8019946:	d12c      	bne.n	80199a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8019948:	4560      	cmp	r0, ip
 801994a:	bf14      	ite	ne
 801994c:	2004      	movne	r0, #4
 801994e:	2001      	moveq	r0, #1
 8019950:	9204      	str	r2, [sp, #16]
 8019952:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8019956:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801995a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801995e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019962:	f8ad 501a 	strh.w	r5, [sp, #26]
 8019966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801996a:	4620      	mov	r0, r4
 801996c:	f7ff ff5e 	bl	801982c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019970:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8019974:	4603      	mov	r3, r0
 8019976:	4651      	mov	r1, sl
 8019978:	4620      	mov	r0, r4
 801997a:	e9cd 9700 	strd	r9, r7, [sp]
 801997e:	f7ff ffb7 	bl	80198f0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019982:	f8ad 901e 	strh.w	r9, [sp, #30]
 8019986:	9005      	str	r0, [sp, #20]
 8019988:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801998c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8019990:	b106      	cbz	r6, 8019994 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8019992:	b98d      	cbnz	r5, 80199b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8019994:	4b12      	ldr	r3, [pc, #72]	; (80199e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8019996:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801999a:	4a12      	ldr	r2, [pc, #72]	; (80199e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801999c:	4812      	ldr	r0, [pc, #72]	; (80199e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801999e:	f00e fe31 	bl	8028604 <__assert_func>
 80199a2:	2004      	movs	r0, #4
 80199a4:	e7d4      	b.n	8019950 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80199a6:	2bff      	cmp	r3, #255	; 0xff
 80199a8:	d104      	bne.n	80199b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80199aa:	2800      	cmp	r0, #0
 80199ac:	bf14      	ite	ne
 80199ae:	2040      	movne	r0, #64	; 0x40
 80199b0:	2020      	moveq	r0, #32
 80199b2:	e7cd      	b.n	8019950 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80199b4:	2040      	movs	r0, #64	; 0x40
 80199b6:	e7cb      	b.n	8019950 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80199b8:	6823      	ldr	r3, [r4, #0]
 80199ba:	4620      	mov	r0, r4
 80199bc:	9d02      	ldr	r5, [sp, #8]
 80199be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199c0:	4798      	blx	r3
 80199c2:	4228      	tst	r0, r5
 80199c4:	d104      	bne.n	80199d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80199c6:	4b09      	ldr	r3, [pc, #36]	; (80199ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80199c8:	f240 11b1 	movw	r1, #433	; 0x1b1
 80199cc:	4a05      	ldr	r2, [pc, #20]	; (80199e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80199ce:	e7e5      	b.n	801999c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80199d0:	6860      	ldr	r0, [r4, #4]
 80199d2:	a902      	add	r1, sp, #8
 80199d4:	6803      	ldr	r3, [r0, #0]
 80199d6:	685b      	ldr	r3, [r3, #4]
 80199d8:	4798      	blx	r3
 80199da:	b00a      	add	sp, #40	; 0x28
 80199dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199e0:	0802b8b6 	.word	0x0802b8b6
 80199e4:	0802bb6a 	.word	0x0802bb6a
 80199e8:	0802b83a 	.word	0x0802b83a
 80199ec:	0802b8ee 	.word	0x0802b8ee

080199f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80199f0:	b510      	push	{r4, lr}
 80199f2:	b08a      	sub	sp, #40	; 0x28
 80199f4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80199f8:	9408      	str	r4, [sp, #32]
 80199fa:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80199fe:	9407      	str	r4, [sp, #28]
 8019a00:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8019a04:	9406      	str	r4, [sp, #24]
 8019a06:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8019a0a:	9405      	str	r4, [sp, #20]
 8019a0c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8019a10:	9404      	str	r4, [sp, #16]
 8019a12:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8019a16:	9403      	str	r4, [sp, #12]
 8019a18:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8019a1c:	9402      	str	r4, [sp, #8]
 8019a1e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8019a22:	e9cd 3400 	strd	r3, r4, [sp]
 8019a26:	4613      	mov	r3, r2
 8019a28:	2200      	movs	r2, #0
 8019a2a:	f7ff ff71 	bl	8019910 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019a2e:	b00a      	add	sp, #40	; 0x28
 8019a30:	bd10      	pop	{r4, pc}
	...

08019a34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8019a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a36:	b08b      	sub	sp, #44	; 0x2c
 8019a38:	4616      	mov	r6, r2
 8019a3a:	460d      	mov	r5, r1
 8019a3c:	461f      	mov	r7, r3
 8019a3e:	4604      	mov	r4, r0
 8019a40:	f7f7 f9c6 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8019a44:	6803      	ldr	r3, [r0, #0]
 8019a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a48:	4798      	blx	r3
 8019a4a:	4b0e      	ldr	r3, [pc, #56]	; (8019a84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8019a4c:	2200      	movs	r2, #0
 8019a4e:	4629      	mov	r1, r5
 8019a50:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019a54:	881b      	ldrh	r3, [r3, #0]
 8019a56:	4620      	mov	r0, r4
 8019a58:	9306      	str	r3, [sp, #24]
 8019a5a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019a5e:	9305      	str	r3, [sp, #20]
 8019a60:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019a64:	9304      	str	r3, [sp, #16]
 8019a66:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019a6a:	9303      	str	r3, [sp, #12]
 8019a6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019a70:	9302      	str	r3, [sp, #8]
 8019a72:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019a76:	e9cd 7300 	strd	r7, r3, [sp]
 8019a7a:	4633      	mov	r3, r6
 8019a7c:	f7ff ff48 	bl	8019910 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019a80:	b00b      	add	sp, #44	; 0x2c
 8019a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a84:	2000bee8 	.word	0x2000bee8

08019a88 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8019a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a8c:	461f      	mov	r7, r3
 8019a8e:	4b14      	ldr	r3, [pc, #80]	; (8019ae0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8019a90:	b08a      	sub	sp, #40	; 0x28
 8019a92:	4616      	mov	r6, r2
 8019a94:	f8b3 8000 	ldrh.w	r8, [r3]
 8019a98:	460d      	mov	r5, r1
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	f7f7 f998 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8019aa0:	6803      	ldr	r3, [r0, #0]
 8019aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aa4:	4798      	blx	r3
 8019aa6:	2302      	movs	r3, #2
 8019aa8:	9008      	str	r0, [sp, #32]
 8019aaa:	2200      	movs	r2, #0
 8019aac:	4629      	mov	r1, r5
 8019aae:	4620      	mov	r0, r4
 8019ab0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8019ab4:	2301      	movs	r3, #1
 8019ab6:	9305      	str	r3, [sp, #20]
 8019ab8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019abc:	9304      	str	r3, [sp, #16]
 8019abe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019ac2:	9303      	str	r3, [sp, #12]
 8019ac4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019ac8:	9302      	str	r3, [sp, #8]
 8019aca:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019ace:	e9cd 7300 	strd	r7, r3, [sp]
 8019ad2:	4633      	mov	r3, r6
 8019ad4:	f7ff ff1c 	bl	8019910 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019ad8:	b00a      	add	sp, #40	; 0x28
 8019ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ade:	bf00      	nop
 8019ae0:	2000bee8 	.word	0x2000bee8

08019ae4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8019ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ae8:	b08b      	sub	sp, #44	; 0x2c
 8019aea:	469b      	mov	fp, r3
 8019aec:	4604      	mov	r4, r0
 8019aee:	4692      	mov	sl, r2
 8019af0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8019af4:	2600      	movs	r6, #0
 8019af6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8019afa:	4689      	mov	r9, r1
 8019afc:	2fff      	cmp	r7, #255	; 0xff
 8019afe:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8019b02:	9608      	str	r6, [sp, #32]
 8019b04:	bf14      	ite	ne
 8019b06:	2308      	movne	r3, #8
 8019b08:	2302      	moveq	r3, #2
 8019b0a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8019b0e:	f7ff fe8d 	bl	801982c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019b12:	465a      	mov	r2, fp
 8019b14:	4603      	mov	r3, r0
 8019b16:	4651      	mov	r1, sl
 8019b18:	4620      	mov	r0, r4
 8019b1a:	e9cd 8500 	strd	r8, r5, [sp]
 8019b1e:	f7ff fee7 	bl	80198f0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019b22:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019b26:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8019b2a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019b2e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019b32:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8019b36:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019b3a:	6823      	ldr	r3, [r4, #0]
 8019b3c:	9d02      	ldr	r5, [sp, #8]
 8019b3e:	9005      	str	r0, [sp, #20]
 8019b40:	4620      	mov	r0, r4
 8019b42:	f8ad 601c 	strh.w	r6, [sp, #28]
 8019b46:	f8ad 801e 	strh.w	r8, [sp, #30]
 8019b4a:	f8cd 9020 	str.w	r9, [sp, #32]
 8019b4e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8019b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b54:	4798      	blx	r3
 8019b56:	4228      	tst	r0, r5
 8019b58:	d106      	bne.n	8019b68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8019b5a:	4b07      	ldr	r3, [pc, #28]	; (8019b78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8019b5c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8019b60:	4a06      	ldr	r2, [pc, #24]	; (8019b7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8019b62:	4807      	ldr	r0, [pc, #28]	; (8019b80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8019b64:	f00e fd4e 	bl	8028604 <__assert_func>
 8019b68:	6860      	ldr	r0, [r4, #4]
 8019b6a:	a902      	add	r1, sp, #8
 8019b6c:	6803      	ldr	r3, [r0, #0]
 8019b6e:	685b      	ldr	r3, [r3, #4]
 8019b70:	4798      	blx	r3
 8019b72:	b00b      	add	sp, #44	; 0x2c
 8019b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b78:	0802b8ee 	.word	0x0802b8ee
 8019b7c:	0802bc33 	.word	0x0802bc33
 8019b80:	0802b83a 	.word	0x0802b83a

08019b84 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019b88:	461f      	mov	r7, r3
 8019b8a:	4b0b      	ldr	r3, [pc, #44]	; (8019bb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019b8c:	460d      	mov	r5, r1
 8019b8e:	4616      	mov	r6, r2
 8019b90:	f8b3 8000 	ldrh.w	r8, [r3]
 8019b94:	4604      	mov	r4, r0
 8019b96:	f7f7 f91b 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8019b9a:	6803      	ldr	r3, [r0, #0]
 8019b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b9e:	4798      	blx	r3
 8019ba0:	463b      	mov	r3, r7
 8019ba2:	4632      	mov	r2, r6
 8019ba4:	4629      	mov	r1, r5
 8019ba6:	e9cd 8000 	strd	r8, r0, [sp]
 8019baa:	4620      	mov	r0, r4
 8019bac:	f7ff fea0 	bl	80198f0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019bb0:	b002      	add	sp, #8
 8019bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bb6:	bf00      	nop
 8019bb8:	2000bee8 	.word	0x2000bee8

08019bbc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8019bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bc0:	4698      	mov	r8, r3
 8019bc2:	b088      	sub	sp, #32
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	4617      	mov	r7, r2
 8019bc8:	4604      	mov	r4, r0
 8019bca:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8019bce:	9306      	str	r3, [sp, #24]
 8019bd0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019bd4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019bd8:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019bdc:	f8ad 5012 	strh.w	r5, [sp, #18]
 8019be0:	e9cd 3100 	strd	r3, r1, [sp]
 8019be4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019be8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019bec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019bf0:	f88d 301c 	strb.w	r3, [sp, #28]
 8019bf4:	f7ff fe1a 	bl	801982c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019bf8:	4642      	mov	r2, r8
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	4639      	mov	r1, r7
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f7ff ffc0 	bl	8019b84 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019c04:	4b16      	ldr	r3, [pc, #88]	; (8019c60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8019c06:	9003      	str	r0, [sp, #12]
 8019c08:	881b      	ldrh	r3, [r3, #0]
 8019c0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c0e:	f7f7 f8df 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8019c12:	6803      	ldr	r3, [r0, #0]
 8019c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c16:	4798      	blx	r3
 8019c18:	f88d 001e 	strb.w	r0, [sp, #30]
 8019c1c:	f88d 001d 	strb.w	r0, [sp, #29]
 8019c20:	b106      	cbz	r6, 8019c24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8019c22:	b935      	cbnz	r5, 8019c32 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8019c24:	4b0f      	ldr	r3, [pc, #60]	; (8019c64 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8019c26:	f240 11cd 	movw	r1, #461	; 0x1cd
 8019c2a:	4a0f      	ldr	r2, [pc, #60]	; (8019c68 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8019c2c:	480f      	ldr	r0, [pc, #60]	; (8019c6c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8019c2e:	f00e fce9 	bl	8028604 <__assert_func>
 8019c32:	6823      	ldr	r3, [r4, #0]
 8019c34:	4620      	mov	r0, r4
 8019c36:	9d00      	ldr	r5, [sp, #0]
 8019c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c3a:	4798      	blx	r3
 8019c3c:	4228      	tst	r0, r5
 8019c3e:	d104      	bne.n	8019c4a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8019c40:	4b0b      	ldr	r3, [pc, #44]	; (8019c70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8019c42:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8019c46:	4a08      	ldr	r2, [pc, #32]	; (8019c68 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8019c48:	e7f0      	b.n	8019c2c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8019c4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019c4c:	4669      	mov	r1, sp
 8019c4e:	6860      	ldr	r0, [r4, #4]
 8019c50:	9306      	str	r3, [sp, #24]
 8019c52:	6803      	ldr	r3, [r0, #0]
 8019c54:	685b      	ldr	r3, [r3, #4]
 8019c56:	4798      	blx	r3
 8019c58:	b008      	add	sp, #32
 8019c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c5e:	bf00      	nop
 8019c60:	2000bee8 	.word	0x2000bee8
 8019c64:	0802b8b6 	.word	0x0802b8b6
 8019c68:	0802ba1c 	.word	0x0802ba1c
 8019c6c:	0802b83a 	.word	0x0802b83a
 8019c70:	0802b8ee 	.word	0x0802b8ee

08019c74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019c74:	b570      	push	{r4, r5, r6, lr}
 8019c76:	b08a      	sub	sp, #40	; 0x28
 8019c78:	4604      	mov	r4, r0
 8019c7a:	466b      	mov	r3, sp
 8019c7c:	e883 0006 	stmia.w	r3, {r1, r2}
 8019c80:	4b1f      	ldr	r3, [pc, #124]	; (8019d00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8019c82:	781b      	ldrb	r3, [r3, #0]
 8019c84:	b933      	cbnz	r3, 8019c94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8019c86:	4b1f      	ldr	r3, [pc, #124]	; (8019d04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8019c88:	f240 11f9 	movw	r1, #505	; 0x1f9
 8019c8c:	4a1e      	ldr	r2, [pc, #120]	; (8019d08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8019c8e:	481f      	ldr	r0, [pc, #124]	; (8019d0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8019c90:	f00e fcb8 	bl	8028604 <__assert_func>
 8019c94:	2300      	movs	r3, #0
 8019c96:	f8bd 5000 	ldrh.w	r5, [sp]
 8019c9a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8019c9e:	9308      	str	r3, [sp, #32]
 8019ca0:	2301      	movs	r3, #1
 8019ca2:	9302      	str	r3, [sp, #8]
 8019ca4:	6803      	ldr	r3, [r0, #0]
 8019ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ca8:	4798      	blx	r3
 8019caa:	4632      	mov	r2, r6
 8019cac:	4629      	mov	r1, r5
 8019cae:	4603      	mov	r3, r0
 8019cb0:	4620      	mov	r0, r4
 8019cb2:	f7ff ff67 	bl	8019b84 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019cb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019cb8:	9003      	str	r0, [sp, #12]
 8019cba:	9305      	str	r3, [sp, #20]
 8019cbc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019cc0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019cc4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019cc8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019ccc:	4b10      	ldr	r3, [pc, #64]	; (8019d10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8019cce:	881b      	ldrh	r3, [r3, #0]
 8019cd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019cd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019cd8:	f7f7 f87a 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8019cdc:	6803      	ldr	r3, [r0, #0]
 8019cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ce0:	4798      	blx	r3
 8019ce2:	23ff      	movs	r3, #255	; 0xff
 8019ce4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019ce8:	a902      	add	r1, sp, #8
 8019cea:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019cee:	6860      	ldr	r0, [r4, #4]
 8019cf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019cf4:	6803      	ldr	r3, [r0, #0]
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	4798      	blx	r3
 8019cfa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019cfc:	b00a      	add	sp, #40	; 0x28
 8019cfe:	bd70      	pop	{r4, r5, r6, pc}
 8019d00:	2000beed 	.word	0x2000beed
 8019d04:	0802b787 	.word	0x0802b787
 8019d08:	0802bac0 	.word	0x0802bac0
 8019d0c:	0802b83a 	.word	0x0802b83a
 8019d10:	2000bee8 	.word	0x2000bee8

08019d14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d16:	b08b      	sub	sp, #44	; 0x2c
 8019d18:	4604      	mov	r4, r0
 8019d1a:	466d      	mov	r5, sp
 8019d1c:	e885 0006 	stmia.w	r5, {r1, r2}
 8019d20:	461d      	mov	r5, r3
 8019d22:	2300      	movs	r3, #0
 8019d24:	f8bd 6000 	ldrh.w	r6, [sp]
 8019d28:	9308      	str	r3, [sp, #32]
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019d30:	9302      	str	r3, [sp, #8]
 8019d32:	6803      	ldr	r3, [r0, #0]
 8019d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d36:	4798      	blx	r3
 8019d38:	463a      	mov	r2, r7
 8019d3a:	4631      	mov	r1, r6
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	4620      	mov	r0, r4
 8019d40:	f7ff ff20 	bl	8019b84 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019d44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019d48:	9003      	str	r0, [sp, #12]
 8019d4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019d4e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019d52:	9505      	str	r5, [sp, #20]
 8019d54:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019d58:	4b0d      	ldr	r3, [pc, #52]	; (8019d90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8019d5a:	881b      	ldrh	r3, [r3, #0]
 8019d5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d62:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019d66:	f7f7 f833 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8019d6a:	6803      	ldr	r3, [r0, #0]
 8019d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d6e:	4798      	blx	r3
 8019d70:	23ff      	movs	r3, #255	; 0xff
 8019d72:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019d76:	a902      	add	r1, sp, #8
 8019d78:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019d7c:	6860      	ldr	r0, [r4, #4]
 8019d7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019d82:	6803      	ldr	r3, [r0, #0]
 8019d84:	685b      	ldr	r3, [r3, #4]
 8019d86:	4798      	blx	r3
 8019d88:	4628      	mov	r0, r5
 8019d8a:	b00b      	add	sp, #44	; 0x2c
 8019d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d8e:	bf00      	nop
 8019d90:	2000bee8 	.word	0x2000bee8

08019d94 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019d94:	b570      	push	{r4, r5, r6, lr}
 8019d96:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019d9a:	4604      	mov	r4, r0
 8019d9c:	b19b      	cbz	r3, 8019dc6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019d9e:	2002      	movs	r0, #2
 8019da0:	f7fc fbd4 	bl	801654c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019da4:	2300      	movs	r3, #0
 8019da6:	4620      	mov	r0, r4
 8019da8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019dac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019db0:	6823      	ldr	r3, [r4, #0]
 8019db2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8019db6:	f7ff fd39 	bl	801982c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019dba:	4601      	mov	r1, r0
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	462b      	mov	r3, r5
 8019dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019dc4:	4718      	bx	r3
 8019dc6:	bd70      	pop	{r4, r5, r6, pc}

08019dc8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019dc8:	4770      	bx	lr

08019dca <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019dca:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8019dce:	1a13      	subs	r3, r2, r0
 8019dd0:	4258      	negs	r0, r3
 8019dd2:	4158      	adcs	r0, r3
 8019dd4:	4770      	bx	lr

08019dd6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019dd6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019dda:	1a9b      	subs	r3, r3, r2
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	bfdc      	itt	le
 8019de0:	6882      	ldrle	r2, [r0, #8]
 8019de2:	189b      	addle	r3, r3, r2
 8019de4:	2b01      	cmp	r3, #1
 8019de6:	bfcc      	ite	gt
 8019de8:	2000      	movgt	r0, #0
 8019dea:	2001      	movle	r0, #1
 8019dec:	4770      	bx	lr

08019dee <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019dee:	6902      	ldr	r2, [r0, #16]
 8019df0:	6840      	ldr	r0, [r0, #4]
 8019df2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019df6:	4770      	bx	lr

08019df8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019df8:	6803      	ldr	r3, [r0, #0]
 8019dfa:	691b      	ldr	r3, [r3, #16]
 8019dfc:	4718      	bx	r3

08019dfe <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019dfe:	4770      	bx	lr

08019e00 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019e00:	4770      	bx	lr
	...

08019e04 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019e04:	2301      	movs	r3, #1
 8019e06:	b570      	push	{r4, r5, r6, lr}
 8019e08:	7203      	strb	r3, [r0, #8]
 8019e0a:	4604      	mov	r4, r0
 8019e0c:	6840      	ldr	r0, [r0, #4]
 8019e0e:	6803      	ldr	r3, [r0, #0]
 8019e10:	699b      	ldr	r3, [r3, #24]
 8019e12:	4798      	blx	r3
 8019e14:	6803      	ldr	r3, [r0, #0]
 8019e16:	4605      	mov	r5, r0
 8019e18:	2b08      	cmp	r3, #8
 8019e1a:	d01e      	beq.n	8019e5a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8019e1c:	d80b      	bhi.n	8019e36 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019e1e:	2b02      	cmp	r3, #2
 8019e20:	d027      	beq.n	8019e72 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019e22:	2b04      	cmp	r3, #4
 8019e24:	d011      	beq.n	8019e4a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019e26:	2b01      	cmp	r3, #1
 8019e28:	d028      	beq.n	8019e7c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019e2a:	4b17      	ldr	r3, [pc, #92]	; (8019e88 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8019e2c:	218b      	movs	r1, #139	; 0x8b
 8019e2e:	4a17      	ldr	r2, [pc, #92]	; (8019e8c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019e30:	4817      	ldr	r0, [pc, #92]	; (8019e90 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8019e32:	f00e fbe7 	bl	8028604 <__assert_func>
 8019e36:	2b40      	cmp	r3, #64	; 0x40
 8019e38:	d020      	beq.n	8019e7c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019e3a:	d801      	bhi.n	8019e40 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019e3c:	2b20      	cmp	r3, #32
 8019e3e:	e7f3      	b.n	8019e28 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019e40:	2b80      	cmp	r3, #128	; 0x80
 8019e42:	d01b      	beq.n	8019e7c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019e48:	e7ee      	b.n	8019e28 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019e4a:	6823      	ldr	r3, [r4, #0]
 8019e4c:	7f01      	ldrb	r1, [r0, #28]
 8019e4e:	4620      	mov	r0, r4
 8019e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e52:	4798      	blx	r3
 8019e54:	6823      	ldr	r3, [r4, #0]
 8019e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e58:	e006      	b.n	8019e68 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019e5a:	6823      	ldr	r3, [r4, #0]
 8019e5c:	7f01      	ldrb	r1, [r0, #28]
 8019e5e:	4620      	mov	r0, r4
 8019e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e62:	4798      	blx	r3
 8019e64:	6823      	ldr	r3, [r4, #0]
 8019e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e68:	4629      	mov	r1, r5
 8019e6a:	4620      	mov	r0, r4
 8019e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e70:	4718      	bx	r3
 8019e72:	6823      	ldr	r3, [r4, #0]
 8019e74:	4620      	mov	r0, r4
 8019e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e78:	4798      	blx	r3
 8019e7a:	e7f3      	b.n	8019e64 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8019e7c:	6823      	ldr	r3, [r4, #0]
 8019e7e:	4620      	mov	r0, r4
 8019e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e82:	4798      	blx	r3
 8019e84:	e7e6      	b.n	8019e54 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8019e86:	bf00      	nop
 8019e88:	0802bd11 	.word	0x0802bd11
 8019e8c:	0802be20 	.word	0x0802be20
 8019e90:	0802bd36 	.word	0x0802bd36

08019e94 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019e94:	b570      	push	{r4, r5, r6, lr}
 8019e96:	4604      	mov	r4, r0
 8019e98:	460e      	mov	r6, r1
 8019e9a:	6860      	ldr	r0, [r4, #4]
 8019e9c:	6803      	ldr	r3, [r0, #0]
 8019e9e:	685b      	ldr	r3, [r3, #4]
 8019ea0:	4798      	blx	r3
 8019ea2:	2800      	cmp	r0, #0
 8019ea4:	d1f9      	bne.n	8019e9a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019ea6:	4d0b      	ldr	r5, [pc, #44]	; (8019ed4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8019ea8:	6828      	ldr	r0, [r5, #0]
 8019eaa:	6803      	ldr	r3, [r0, #0]
 8019eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019eae:	4798      	blx	r3
 8019eb0:	f7fc fe00 	bl	8016ab4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019eb4:	6860      	ldr	r0, [r4, #4]
 8019eb6:	4631      	mov	r1, r6
 8019eb8:	6803      	ldr	r3, [r0, #0]
 8019eba:	689b      	ldr	r3, [r3, #8]
 8019ebc:	4798      	blx	r3
 8019ebe:	6823      	ldr	r3, [r4, #0]
 8019ec0:	4620      	mov	r0, r4
 8019ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ec4:	4798      	blx	r3
 8019ec6:	6828      	ldr	r0, [r5, #0]
 8019ec8:	6803      	ldr	r3, [r0, #0]
 8019eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019ed0:	4718      	bx	r3
 8019ed2:	bf00      	nop
 8019ed4:	2000bef0 	.word	0x2000bef0

08019ed8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019ed8:	b508      	push	{r3, lr}
 8019eda:	f7fc fdcf 	bl	8016a7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019ee2:	f7fc bdd9 	b.w	8016a98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019ee6 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019ee6:	b510      	push	{r4, lr}
 8019ee8:	4604      	mov	r4, r0
 8019eea:	6840      	ldr	r0, [r0, #4]
 8019eec:	6803      	ldr	r3, [r0, #0]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	4798      	blx	r3
 8019ef2:	b948      	cbnz	r0, 8019f08 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019ef4:	7a63      	ldrb	r3, [r4, #9]
 8019ef6:	b13b      	cbz	r3, 8019f08 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019ef8:	7a23      	ldrb	r3, [r4, #8]
 8019efa:	b92b      	cbnz	r3, 8019f08 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019efc:	6823      	ldr	r3, [r4, #0]
 8019efe:	4620      	mov	r0, r4
 8019f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f06:	4718      	bx	r3
 8019f08:	bd10      	pop	{r4, pc}
	...

08019f0c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019f0c:	b510      	push	{r4, lr}
 8019f0e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8019f12:	1b12      	subs	r2, r2, r4
 8019f14:	2a00      	cmp	r2, #0
 8019f16:	bfdc      	itt	le
 8019f18:	6883      	ldrle	r3, [r0, #8]
 8019f1a:	18d2      	addle	r2, r2, r3
 8019f1c:	2a01      	cmp	r2, #1
 8019f1e:	dd18      	ble.n	8019f52 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8019f20:	6843      	ldr	r3, [r0, #4]
 8019f22:	f101 021c 	add.w	r2, r1, #28
 8019f26:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8019f2a:	f851 4b04 	ldr.w	r4, [r1], #4
 8019f2e:	4291      	cmp	r1, r2
 8019f30:	f843 4b04 	str.w	r4, [r3], #4
 8019f34:	d1f9      	bne.n	8019f2a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8019f36:	880a      	ldrh	r2, [r1, #0]
 8019f38:	801a      	strh	r2, [r3, #0]
 8019f3a:	788a      	ldrb	r2, [r1, #2]
 8019f3c:	709a      	strb	r2, [r3, #2]
 8019f3e:	68c3      	ldr	r3, [r0, #12]
 8019f40:	6882      	ldr	r2, [r0, #8]
 8019f42:	f3bf 8f5b 	dmb	ish
 8019f46:	3301      	adds	r3, #1
 8019f48:	429a      	cmp	r2, r3
 8019f4a:	bfd8      	it	le
 8019f4c:	1a9b      	suble	r3, r3, r2
 8019f4e:	60c3      	str	r3, [r0, #12]
 8019f50:	bd10      	pop	{r4, pc}
 8019f52:	4b03      	ldr	r3, [pc, #12]	; (8019f60 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019f54:	2139      	movs	r1, #57	; 0x39
 8019f56:	4a03      	ldr	r2, [pc, #12]	; (8019f64 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8019f58:	4803      	ldr	r0, [pc, #12]	; (8019f68 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8019f5a:	f00e fb53 	bl	8028604 <__assert_func>
 8019f5e:	bf00      	nop
 8019f60:	0802bd5c 	.word	0x0802bd5c
 8019f64:	0802be50 	.word	0x0802be50
 8019f68:	0802bd36 	.word	0x0802bd36

08019f6c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019f6c:	b510      	push	{r4, lr}
 8019f6e:	6803      	ldr	r3, [r0, #0]
 8019f70:	4604      	mov	r4, r0
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	4798      	blx	r3
 8019f76:	b128      	cbz	r0, 8019f84 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019f78:	4b07      	ldr	r3, [pc, #28]	; (8019f98 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8019f7a:	213f      	movs	r1, #63	; 0x3f
 8019f7c:	4a07      	ldr	r2, [pc, #28]	; (8019f9c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019f7e:	4808      	ldr	r0, [pc, #32]	; (8019fa0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019f80:	f00e fb40 	bl	8028604 <__assert_func>
 8019f84:	6923      	ldr	r3, [r4, #16]
 8019f86:	68a2      	ldr	r2, [r4, #8]
 8019f88:	f3bf 8f5b 	dmb	ish
 8019f8c:	3301      	adds	r3, #1
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	bfd8      	it	le
 8019f92:	1a9b      	suble	r3, r3, r2
 8019f94:	6123      	str	r3, [r4, #16]
 8019f96:	bd10      	pop	{r4, pc}
 8019f98:	0802bd7f 	.word	0x0802bd7f
 8019f9c:	0802be9e 	.word	0x0802be9e
 8019fa0:	0802bd36 	.word	0x0802bd36

08019fa4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019fa4:	b570      	push	{r4, r5, r6, lr}
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	6840      	ldr	r0, [r0, #4]
 8019faa:	6803      	ldr	r3, [r0, #0]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	4798      	blx	r3
 8019fb0:	4605      	mov	r5, r0
 8019fb2:	b930      	cbnz	r0, 8019fc2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019fb4:	7a23      	ldrb	r3, [r4, #8]
 8019fb6:	b123      	cbz	r3, 8019fc2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019fb8:	6860      	ldr	r0, [r4, #4]
 8019fba:	6803      	ldr	r3, [r0, #0]
 8019fbc:	695b      	ldr	r3, [r3, #20]
 8019fbe:	4798      	blx	r3
 8019fc0:	7225      	strb	r5, [r4, #8]
 8019fc2:	6860      	ldr	r0, [r4, #4]
 8019fc4:	6803      	ldr	r3, [r0, #0]
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	4798      	blx	r3
 8019fca:	b928      	cbnz	r0, 8019fd8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019fcc:	6823      	ldr	r3, [r4, #0]
 8019fce:	4620      	mov	r0, r4
 8019fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019fd6:	4718      	bx	r3
 8019fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019fdc:	f7fc bd76 	b.w	8016acc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019fe0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019fe0:	b510      	push	{r4, lr}
 8019fe2:	6082      	str	r2, [r0, #8]
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	4c03      	ldr	r4, [pc, #12]	; (8019ff4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019fe8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019fec:	e9c0 4100 	strd	r4, r1, [r0]
 8019ff0:	bd10      	pop	{r4, pc}
 8019ff2:	bf00      	nop
 8019ff4:	0802be04 	.word	0x0802be04

08019ff8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019ff8:	6840      	ldr	r0, [r0, #4]
 8019ffa:	6803      	ldr	r3, [r0, #0]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	4718      	bx	r3

0801a000 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 801a000:	2001      	movs	r0, #1
 801a002:	4770      	bx	lr

0801a004 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801a004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a008:	460d      	mov	r5, r1
 801a00a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a00e:	b085      	sub	sp, #20
 801a010:	4690      	mov	r8, r2
 801a012:	4411      	add	r1, r2
 801a014:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a018:	4699      	mov	r9, r3
 801a01a:	6803      	ldr	r3, [r0, #0]
 801a01c:	60c1      	str	r1, [r0, #12]
 801a01e:	4604      	mov	r4, r0
 801a020:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a022:	440a      	add	r2, r1
 801a024:	6102      	str	r2, [r0, #16]
 801a026:	68db      	ldr	r3, [r3, #12]
 801a028:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801a02c:	4798      	blx	r3
 801a02e:	2800      	cmp	r0, #0
 801a030:	d039      	beq.n	801a0a6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801a032:	44c8      	add	r8, r9
 801a034:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a038:	4445      	add	r5, r8
 801a03a:	6823      	ldr	r3, [r4, #0]
 801a03c:	f10d 020f 	add.w	r2, sp, #15
 801a040:	a903      	add	r1, sp, #12
 801a042:	4620      	mov	r0, r4
 801a044:	9200      	str	r2, [sp, #0]
 801a046:	f10d 020d 	add.w	r2, sp, #13
 801a04a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801a04e:	f10d 030e 	add.w	r3, sp, #14
 801a052:	47c0      	blx	r8
 801a054:	b1f8      	cbz	r0, 801a096 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801a056:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801a05a:	7a20      	ldrb	r0, [r4, #8]
 801a05c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801a060:	4358      	muls	r0, r3
 801a062:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801a066:	1c43      	adds	r3, r0, #1
 801a068:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a06c:	f817 0b01 	ldrb.w	r0, [r7], #1
 801a070:	121b      	asrs	r3, r3, #8
 801a072:	fb10 f003 	smulbb	r0, r0, r3
 801a076:	b283      	uxth	r3, r0
 801a078:	1c58      	adds	r0, r3, #1
 801a07a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a07e:	6823      	ldr	r3, [r4, #0]
 801a080:	1200      	asrs	r0, r0, #8
 801a082:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801a086:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801a08a:	28ff      	cmp	r0, #255	; 0xff
 801a08c:	d10e      	bne.n	801a0ac <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801a08e:	9100      	str	r1, [sp, #0]
 801a090:	4629      	mov	r1, r5
 801a092:	4620      	mov	r0, r4
 801a094:	47c0      	blx	r8
 801a096:	68e3      	ldr	r3, [r4, #12]
 801a098:	3e01      	subs	r6, #1
 801a09a:	f105 0503 	add.w	r5, r5, #3
 801a09e:	f103 0301 	add.w	r3, r3, #1
 801a0a2:	60e3      	str	r3, [r4, #12]
 801a0a4:	d1c9      	bne.n	801a03a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801a0a6:	b005      	add	sp, #20
 801a0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0ac:	fa1f fc80 	uxth.w	ip, r0
 801a0b0:	43c0      	mvns	r0, r0
 801a0b2:	f895 e002 	ldrb.w	lr, [r5, #2]
 801a0b6:	fb12 f20c 	smulbb	r2, r2, ip
 801a0ba:	b2c0      	uxtb	r0, r0
 801a0bc:	fb13 f30c 	smulbb	r3, r3, ip
 801a0c0:	fb0e 2200 	mla	r2, lr, r0, r2
 801a0c4:	f895 e001 	ldrb.w	lr, [r5, #1]
 801a0c8:	fb11 f10c 	smulbb	r1, r1, ip
 801a0cc:	fb0e 3300 	mla	r3, lr, r0, r3
 801a0d0:	f895 e000 	ldrb.w	lr, [r5]
 801a0d4:	b292      	uxth	r2, r2
 801a0d6:	b29b      	uxth	r3, r3
 801a0d8:	fb0e 1000 	mla	r0, lr, r0, r1
 801a0dc:	1c59      	adds	r1, r3, #1
 801a0de:	b280      	uxth	r0, r0
 801a0e0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a0e4:	1c51      	adds	r1, r2, #1
 801a0e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a0ea:	1c41      	adds	r1, r0, #1
 801a0ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a0f0:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801a0f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a0f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a0fc:	9000      	str	r0, [sp, #0]
 801a0fe:	e7c7      	b.n	801a090 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

0801a100 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801a100:	f89d 0000 	ldrb.w	r0, [sp]
 801a104:	704b      	strb	r3, [r1, #1]
 801a106:	7008      	strb	r0, [r1, #0]
 801a108:	708a      	strb	r2, [r1, #2]
 801a10a:	4770      	bx	lr

0801a10c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801a10c:	4413      	add	r3, r2
 801a10e:	7dc2      	ldrb	r2, [r0, #23]
 801a110:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a114:	4419      	add	r1, r3
 801a116:	7a03      	ldrb	r3, [r0, #8]
 801a118:	435a      	muls	r2, r3
 801a11a:	1c53      	adds	r3, r2, #1
 801a11c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a120:	121b      	asrs	r3, r3, #8
 801a122:	2bff      	cmp	r3, #255	; 0xff
 801a124:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a126:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801a12a:	d13e      	bne.n	801a1aa <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801a12c:	4427      	add	r7, r4
 801a12e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a132:	3103      	adds	r1, #3
 801a134:	7d86      	ldrb	r6, [r0, #22]
 801a136:	2bff      	cmp	r3, #255	; 0xff
 801a138:	d10a      	bne.n	801a150 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801a13a:	f801 6c03 	strb.w	r6, [r1, #-3]
 801a13e:	7d43      	ldrb	r3, [r0, #21]
 801a140:	f801 3c02 	strb.w	r3, [r1, #-2]
 801a144:	7d03      	ldrb	r3, [r0, #20]
 801a146:	f801 3c01 	strb.w	r3, [r1, #-1]
 801a14a:	42a7      	cmp	r7, r4
 801a14c:	d1ef      	bne.n	801a12e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801a14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a150:	b29a      	uxth	r2, r3
 801a152:	43db      	mvns	r3, r3
 801a154:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801a158:	fb16 f602 	smulbb	r6, r6, r2
 801a15c:	b2db      	uxtb	r3, r3
 801a15e:	fb05 6503 	mla	r5, r5, r3, r6
 801a162:	b2ad      	uxth	r5, r5
 801a164:	1c6e      	adds	r6, r5, #1
 801a166:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801a16a:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801a16e:	fb16 f603 	smulbb	r6, r6, r3
 801a172:	122d      	asrs	r5, r5, #8
 801a174:	f801 5c03 	strb.w	r5, [r1, #-3]
 801a178:	7d45      	ldrb	r5, [r0, #21]
 801a17a:	fb05 6502 	mla	r5, r5, r2, r6
 801a17e:	b2ad      	uxth	r5, r5
 801a180:	1c6e      	adds	r6, r5, #1
 801a182:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801a186:	122d      	asrs	r5, r5, #8
 801a188:	f801 5c02 	strb.w	r5, [r1, #-2]
 801a18c:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801a190:	7d06      	ldrb	r6, [r0, #20]
 801a192:	fb15 f303 	smulbb	r3, r5, r3
 801a196:	fb06 3202 	mla	r2, r6, r2, r3
 801a19a:	b292      	uxth	r2, r2
 801a19c:	1c53      	adds	r3, r2, #1
 801a19e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a1a2:	1212      	asrs	r2, r2, #8
 801a1a4:	f801 2c01 	strb.w	r2, [r1, #-1]
 801a1a8:	e7cf      	b.n	801a14a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801a1aa:	b2de      	uxtb	r6, r3
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d0ce      	beq.n	801a14e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801a1b0:	3103      	adds	r1, #3
 801a1b2:	4427      	add	r7, r4
 801a1b4:	f814 2b01 	ldrb.w	r2, [r4], #1
 801a1b8:	3103      	adds	r1, #3
 801a1ba:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801a1be:	fb02 f306 	mul.w	r3, r2, r6
 801a1c2:	42bc      	cmp	r4, r7
 801a1c4:	f103 0201 	add.w	r2, r3, #1
 801a1c8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a1cc:	ea4f 2222 	mov.w	r2, r2, asr #8
 801a1d0:	b295      	uxth	r5, r2
 801a1d2:	ea6f 0202 	mvn.w	r2, r2
 801a1d6:	b2d3      	uxtb	r3, r2
 801a1d8:	7d82      	ldrb	r2, [r0, #22]
 801a1da:	fb1c fc03 	smulbb	ip, ip, r3
 801a1de:	fb02 c205 	mla	r2, r2, r5, ip
 801a1e2:	b292      	uxth	r2, r2
 801a1e4:	f102 0c01 	add.w	ip, r2, #1
 801a1e8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a1ec:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801a1f0:	fb1c fc03 	smulbb	ip, ip, r3
 801a1f4:	ea4f 2222 	mov.w	r2, r2, asr #8
 801a1f8:	f801 2c06 	strb.w	r2, [r1, #-6]
 801a1fc:	7d42      	ldrb	r2, [r0, #21]
 801a1fe:	fb02 c205 	mla	r2, r2, r5, ip
 801a202:	b292      	uxth	r2, r2
 801a204:	f102 0c01 	add.w	ip, r2, #1
 801a208:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a20c:	ea4f 2222 	mov.w	r2, r2, asr #8
 801a210:	f801 2c05 	strb.w	r2, [r1, #-5]
 801a214:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801a218:	f890 c014 	ldrb.w	ip, [r0, #20]
 801a21c:	fb12 f303 	smulbb	r3, r2, r3
 801a220:	fb0c 3305 	mla	r3, ip, r5, r3
 801a224:	b29b      	uxth	r3, r3
 801a226:	f103 0201 	add.w	r2, r3, #1
 801a22a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a22e:	ea4f 2323 	mov.w	r3, r3, asr #8
 801a232:	f801 3c04 	strb.w	r3, [r1, #-4]
 801a236:	d1bd      	bne.n	801a1b4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801a238:	e789      	b.n	801a14e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801a23a <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801a23a:	b510      	push	{r4, lr}
 801a23c:	7d04      	ldrb	r4, [r0, #20]
 801a23e:	700c      	strb	r4, [r1, #0]
 801a240:	7d41      	ldrb	r1, [r0, #21]
 801a242:	7011      	strb	r1, [r2, #0]
 801a244:	7d82      	ldrb	r2, [r0, #22]
 801a246:	701a      	strb	r2, [r3, #0]
 801a248:	9b02      	ldr	r3, [sp, #8]
 801a24a:	7dc2      	ldrb	r2, [r0, #23]
 801a24c:	2001      	movs	r0, #1
 801a24e:	701a      	strb	r2, [r3, #0]
 801a250:	bd10      	pop	{r4, pc}

0801a252 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801a252:	b570      	push	{r4, r5, r6, lr}
 801a254:	4616      	mov	r6, r2
 801a256:	4604      	mov	r4, r0
 801a258:	460d      	mov	r5, r1
 801a25a:	f7f6 fdb9 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801a25e:	6803      	ldr	r3, [r0, #0]
 801a260:	4629      	mov	r1, r5
 801a262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a264:	4798      	blx	r3
 801a266:	7520      	strb	r0, [r4, #20]
 801a268:	f7f6 fdb2 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801a26c:	6803      	ldr	r3, [r0, #0]
 801a26e:	4629      	mov	r1, r5
 801a270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a272:	4798      	blx	r3
 801a274:	7560      	strb	r0, [r4, #21]
 801a276:	f7f6 fdab 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801a27a:	6803      	ldr	r3, [r0, #0]
 801a27c:	4629      	mov	r1, r5
 801a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a280:	4798      	blx	r3
 801a282:	75e6      	strb	r6, [r4, #23]
 801a284:	75a0      	strb	r0, [r4, #22]
 801a286:	bd70      	pop	{r4, r5, r6, pc}

0801a288 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a28a:	460e      	mov	r6, r1
 801a28c:	4617      	mov	r7, r2
 801a28e:	4604      	mov	r4, r0
 801a290:	f000 f832 	bl	801a2f8 <_ZN8touchgfx15AbstractPainterC1Ev>
 801a294:	4b12      	ldr	r3, [pc, #72]	; (801a2e0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801a296:	6023      	str	r3, [r4, #0]
 801a298:	f7f6 fd9a 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801a29c:	6803      	ldr	r3, [r0, #0]
 801a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2a0:	4798      	blx	r3
 801a2a2:	1e43      	subs	r3, r0, #1
 801a2a4:	425d      	negs	r5, r3
 801a2a6:	415d      	adcs	r5, r3
 801a2a8:	4b0e      	ldr	r3, [pc, #56]	; (801a2e4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a2ae:	b130      	cbz	r0, 801a2be <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801a2b0:	6803      	ldr	r3, [r0, #0]
 801a2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2b4:	4798      	blx	r3
 801a2b6:	2801      	cmp	r0, #1
 801a2b8:	bf08      	it	eq
 801a2ba:	f045 0501 	orreq.w	r5, r5, #1
 801a2be:	b92d      	cbnz	r5, 801a2cc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801a2c0:	4b09      	ldr	r3, [pc, #36]	; (801a2e8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801a2c2:	2129      	movs	r1, #41	; 0x29
 801a2c4:	4a09      	ldr	r2, [pc, #36]	; (801a2ec <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801a2c6:	480a      	ldr	r0, [pc, #40]	; (801a2f0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801a2c8:	f00e f99c 	bl	8028604 <__assert_func>
 801a2cc:	4b09      	ldr	r3, [pc, #36]	; (801a2f4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	463a      	mov	r2, r7
 801a2d2:	4631      	mov	r1, r6
 801a2d4:	6023      	str	r3, [r4, #0]
 801a2d6:	f7ff ffbc 	bl	801a252 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801a2da:	4620      	mov	r0, r4
 801a2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2de:	bf00      	nop
 801a2e0:	0802bed8 	.word	0x0802bed8
 801a2e4:	2000bef0 	.word	0x2000bef0
 801a2e8:	0802bef0 	.word	0x0802bef0
 801a2ec:	0802bfb4 	.word	0x0802bfb4
 801a2f0:	0802bf4e 	.word	0x0802bf4e
 801a2f4:	0802bf9c 	.word	0x0802bf9c

0801a2f8 <_ZN8touchgfx15AbstractPainterC1Ev>:
 801a2f8:	4a03      	ldr	r2, [pc, #12]	; (801a308 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801a2fa:	6002      	str	r2, [r0, #0]
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	6042      	str	r2, [r0, #4]
 801a300:	22ff      	movs	r2, #255	; 0xff
 801a302:	7202      	strb	r2, [r0, #8]
 801a304:	4770      	bx	lr
 801a306:	bf00      	nop
 801a308:	0802bff8 	.word	0x0802bff8

0801a30c <_ZN8touchgfx15AbstractPainterD1Ev>:
 801a30c:	4770      	bx	lr

0801a30e <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801a30e:	8081      	strh	r1, [r0, #4]
 801a310:	80c2      	strh	r2, [r0, #6]
 801a312:	4770      	bx	lr

0801a314 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 801a314:	7201      	strb	r1, [r0, #8]
 801a316:	4770      	bx	lr

0801a318 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801a318:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801a31c:	4770      	bx	lr

0801a31e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801a31e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801a322:	4770      	bx	lr

0801a324 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801a324:	6281      	str	r1, [r0, #40]	; 0x28
 801a326:	4770      	bx	lr

0801a328 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a328:	b513      	push	{r0, r1, r4, lr}
 801a32a:	6803      	ldr	r3, [r0, #0]
 801a32c:	4604      	mov	r4, r0
 801a32e:	4601      	mov	r1, r0
 801a330:	4668      	mov	r0, sp
 801a332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a334:	4798      	blx	r3
 801a336:	6823      	ldr	r3, [r4, #0]
 801a338:	4669      	mov	r1, sp
 801a33a:	4620      	mov	r0, r4
 801a33c:	691b      	ldr	r3, [r3, #16]
 801a33e:	4798      	blx	r3
 801a340:	b002      	add	sp, #8
 801a342:	bd10      	pop	{r4, pc}

0801a344 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801a344:	b510      	push	{r4, lr}
 801a346:	2200      	movs	r2, #0
 801a348:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a34c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801a350:	8002      	strh	r2, [r0, #0]
 801a352:	8042      	strh	r2, [r0, #2]
 801a354:	8084      	strh	r4, [r0, #4]
 801a356:	80c1      	strh	r1, [r0, #6]
 801a358:	bd10      	pop	{r4, pc}

0801a35a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801a35a:	2200      	movs	r2, #0
 801a35c:	8002      	strh	r2, [r0, #0]
 801a35e:	8042      	strh	r2, [r0, #2]
 801a360:	8082      	strh	r2, [r0, #4]
 801a362:	80c2      	strh	r2, [r0, #6]
 801a364:	4770      	bx	lr
	...

0801a368 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801a368:	b508      	push	{r3, lr}
 801a36a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a36c:	b928      	cbnz	r0, 801a37a <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801a36e:	4b03      	ldr	r3, [pc, #12]	; (801a37c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801a370:	2127      	movs	r1, #39	; 0x27
 801a372:	4a03      	ldr	r2, [pc, #12]	; (801a380 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801a374:	4803      	ldr	r0, [pc, #12]	; (801a384 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801a376:	f00e f945 	bl	8028604 <__assert_func>
 801a37a:	bd08      	pop	{r3, pc}
 801a37c:	0802c004 	.word	0x0802c004
 801a380:	0802c0e8 	.word	0x0802c0e8
 801a384:	0802c02b 	.word	0x0802c02b

0801a388 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a38c:	b089      	sub	sp, #36	; 0x24
 801a38e:	4604      	mov	r4, r0
 801a390:	6808      	ldr	r0, [r1, #0]
 801a392:	f04f 0a00 	mov.w	sl, #0
 801a396:	6849      	ldr	r1, [r1, #4]
 801a398:	ab02      	add	r3, sp, #8
 801a39a:	f04f 0b01 	mov.w	fp, #1
 801a39e:	c303      	stmia	r3!, {r0, r1}
 801a3a0:	4b3f      	ldr	r3, [pc, #252]	; (801a4a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801a3a2:	4621      	mov	r1, r4
 801a3a4:	a804      	add	r0, sp, #16
 801a3a6:	781b      	ldrb	r3, [r3, #0]
 801a3a8:	2b01      	cmp	r3, #1
 801a3aa:	6823      	ldr	r3, [r4, #0]
 801a3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3ae:	bf1f      	itttt	ne
 801a3b0:	f10d 0906 	addne.w	r9, sp, #6
 801a3b4:	ae03      	addne	r6, sp, #12
 801a3b6:	f10d 050e 	addne.w	r5, sp, #14
 801a3ba:	f10d 080a 	addne.w	r8, sp, #10
 801a3be:	bf01      	itttt	eq
 801a3c0:	f10d 090e 	addeq.w	r9, sp, #14
 801a3c4:	f10d 0606 	addeq.w	r6, sp, #6
 801a3c8:	ad03      	addeq	r5, sp, #12
 801a3ca:	f10d 0808 	addeq.w	r8, sp, #8
 801a3ce:	4798      	blx	r3
 801a3d0:	f9b5 3000 	ldrsh.w	r3, [r5]
 801a3d4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d056      	beq.n	801a48a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801a3dc:	4293      	cmp	r3, r2
 801a3de:	bfa8      	it	ge
 801a3e0:	4613      	movge	r3, r2
 801a3e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a3e6:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801a3ea:	2f00      	cmp	r7, #0
 801a3ec:	dd34      	ble.n	801a458 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801a3ee:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801a3f2:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801a3f6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801a3fa:	4484      	add	ip, r0
 801a3fc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a400:	f9b6 e000 	ldrsh.w	lr, [r6]
 801a404:	fa0f fc8c 	sxth.w	ip, ip
 801a408:	f9b9 1000 	ldrsh.w	r1, [r9]
 801a40c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a410:	4562      	cmp	r2, ip
 801a412:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a416:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a41a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a41e:	da29      	bge.n	801a474 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a420:	4472      	add	r2, lr
 801a422:	b212      	sxth	r2, r2
 801a424:	4290      	cmp	r0, r2
 801a426:	da25      	bge.n	801a474 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a428:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a42c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a430:	4402      	add	r2, r0
 801a432:	b212      	sxth	r2, r2
 801a434:	4293      	cmp	r3, r2
 801a436:	da1d      	bge.n	801a474 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a438:	440b      	add	r3, r1
 801a43a:	b21b      	sxth	r3, r3
 801a43c:	4298      	cmp	r0, r3
 801a43e:	da19      	bge.n	801a474 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a440:	6823      	ldr	r3, [r4, #0]
 801a442:	a906      	add	r1, sp, #24
 801a444:	4620      	mov	r0, r4
 801a446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a448:	4798      	blx	r3
 801a44a:	b998      	cbnz	r0, 801a474 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a44c:	107f      	asrs	r7, r7, #1
 801a44e:	f04f 0a01 	mov.w	sl, #1
 801a452:	f8ad 7006 	strh.w	r7, [sp, #6]
 801a456:	e7c6      	b.n	801a3e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a458:	d10c      	bne.n	801a474 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a45a:	f8ad b006 	strh.w	fp, [sp, #6]
 801a45e:	f8b8 2000 	ldrh.w	r2, [r8]
 801a462:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801a466:	440a      	add	r2, r1
 801a468:	f8a8 2000 	strh.w	r2, [r8]
 801a46c:	882b      	ldrh	r3, [r5, #0]
 801a46e:	1a5b      	subs	r3, r3, r1
 801a470:	802b      	strh	r3, [r5, #0]
 801a472:	e7ad      	b.n	801a3d0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a474:	f1ba 0f00 	cmp.w	sl, #0
 801a478:	d0f1      	beq.n	801a45e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801a47a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801a47e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a482:	429a      	cmp	r2, r3
 801a484:	bf08      	it	eq
 801a486:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801a488:	e7e9      	b.n	801a45e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801a48a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a48e:	429a      	cmp	r2, r3
 801a490:	bf04      	itt	eq
 801a492:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801a496:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801a498:	b009      	add	sp, #36	; 0x24
 801a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a49e:	bf00      	nop
 801a4a0:	2000bee6 	.word	0x2000bee6

0801a4a4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	2101      	movs	r1, #1
 801a4a8:	8082      	strh	r2, [r0, #4]
 801a4aa:	80c2      	strh	r2, [r0, #6]
 801a4ac:	8102      	strh	r2, [r0, #8]
 801a4ae:	8142      	strh	r2, [r0, #10]
 801a4b0:	8182      	strh	r2, [r0, #12]
 801a4b2:	81c2      	strh	r2, [r0, #14]
 801a4b4:	8202      	strh	r2, [r0, #16]
 801a4b6:	8242      	strh	r2, [r0, #18]
 801a4b8:	61c2      	str	r2, [r0, #28]
 801a4ba:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a4be:	6282      	str	r2, [r0, #40]	; 0x28
 801a4c0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801a4c4:	4905      	ldr	r1, [pc, #20]	; (801a4dc <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801a4c6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a4ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a4ce:	6001      	str	r1, [r0, #0]
 801a4d0:	8582      	strh	r2, [r0, #44]	; 0x2c
 801a4d2:	22ff      	movs	r2, #255	; 0xff
 801a4d4:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801a4d8:	4770      	bx	lr
 801a4da:	bf00      	nop
 801a4dc:	0802c070 	.word	0x0802c070

0801a4e0 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801a4e0:	4770      	bx	lr

0801a4e2 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801a4e2:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801a4e6:	4602      	mov	r2, r0
 801a4e8:	cb03      	ldmia	r3!, {r0, r1}
 801a4ea:	6010      	str	r0, [r2, #0]
 801a4ec:	4610      	mov	r0, r2
 801a4ee:	6051      	str	r1, [r2, #4]
 801a4f0:	4770      	bx	lr

0801a4f2 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4f6:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801a4fa:	b395      	cbz	r5, 801a562 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801a4fc:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 801a500:	f1bc 0f00 	cmp.w	ip, #0
 801a504:	d02d      	beq.n	801a562 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801a506:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a50a:	f9b1 e000 	ldrsh.w	lr, [r1]
 801a50e:	b354      	cbz	r4, 801a566 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801a510:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801a514:	b33f      	cbz	r7, 801a566 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801a516:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a51a:	4475      	add	r5, lr
 801a51c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a520:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a524:	45f0      	cmp	r8, lr
 801a526:	4646      	mov	r6, r8
 801a528:	4444      	add	r4, r8
 801a52a:	bfa8      	it	ge
 801a52c:	4676      	movge	r6, lr
 801a52e:	4293      	cmp	r3, r2
 801a530:	4619      	mov	r1, r3
 801a532:	443b      	add	r3, r7
 801a534:	bfa8      	it	ge
 801a536:	4611      	movge	r1, r2
 801a538:	4462      	add	r2, ip
 801a53a:	b22d      	sxth	r5, r5
 801a53c:	8006      	strh	r6, [r0, #0]
 801a53e:	b224      	sxth	r4, r4
 801a540:	8041      	strh	r1, [r0, #2]
 801a542:	b212      	sxth	r2, r2
 801a544:	b21b      	sxth	r3, r3
 801a546:	42a5      	cmp	r5, r4
 801a548:	bfac      	ite	ge
 801a54a:	ebc6 0405 	rsbge	r4, r6, r5
 801a54e:	ebc6 0404 	rsblt	r4, r6, r4
 801a552:	429a      	cmp	r2, r3
 801a554:	bfac      	ite	ge
 801a556:	ebc1 0302 	rsbge	r3, r1, r2
 801a55a:	ebc1 0303 	rsblt	r3, r1, r3
 801a55e:	8084      	strh	r4, [r0, #4]
 801a560:	80c3      	strh	r3, [r0, #6]
 801a562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a566:	f8a0 e000 	strh.w	lr, [r0]
 801a56a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a56e:	8043      	strh	r3, [r0, #2]
 801a570:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a574:	8083      	strh	r3, [r0, #4]
 801a576:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a57a:	e7f1      	b.n	801a560 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

0801a57c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801a57c:	b507      	push	{r0, r1, r2, lr}
 801a57e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a582:	ab01      	add	r3, sp, #4
 801a584:	6809      	ldr	r1, [r1, #0]
 801a586:	6800      	ldr	r0, [r0, #0]
 801a588:	f002 fd7d 	bl	801d086 <_ZN8touchgfx6muldivElllRl>
 801a58c:	b003      	add	sp, #12
 801a58e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801a594 <_ZN8touchgfx7CWRUtil4sineEi>:
 801a594:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801a598:	fb90 f3f2 	sdiv	r3, r0, r2
 801a59c:	fb03 0312 	mls	r3, r3, r2, r0
 801a5a0:	4413      	add	r3, r2
 801a5a2:	fb93 f0f2 	sdiv	r0, r3, r2
 801a5a6:	fb02 3010 	mls	r0, r2, r0, r3
 801a5aa:	4b0a      	ldr	r3, [pc, #40]	; (801a5d4 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801a5ac:	285a      	cmp	r0, #90	; 0x5a
 801a5ae:	dc02      	bgt.n	801a5b6 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801a5b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a5b4:	4770      	bx	lr
 801a5b6:	28b4      	cmp	r0, #180	; 0xb4
 801a5b8:	dc02      	bgt.n	801a5c0 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801a5ba:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801a5be:	e7f7      	b.n	801a5b0 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801a5c0:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801a5c4:	bfd4      	ite	le
 801a5c6:	38b4      	suble	r0, #180	; 0xb4
 801a5c8:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801a5cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a5d0:	4240      	negs	r0, r0
 801a5d2:	4770      	bx	lr
 801a5d4:	0802c192 	.word	0x0802c192

0801a5d8 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801a5d8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801a5dc:	f04f 0300 	mov.w	r3, #0
 801a5e0:	bf2c      	ite	cs
 801a5e2:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801a5e6:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801a5ea:	1899      	adds	r1, r3, r2
 801a5ec:	4288      	cmp	r0, r1
 801a5ee:	bf24      	itt	cs
 801a5f0:	1853      	addcs	r3, r2, r1
 801a5f2:	1a40      	subcs	r0, r0, r1
 801a5f4:	0892      	lsrs	r2, r2, #2
 801a5f6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a5fa:	d1f6      	bne.n	801a5ea <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	4770      	bx	lr

0801a600 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801a600:	2800      	cmp	r0, #0
 801a602:	b508      	push	{r3, lr}
 801a604:	da05      	bge.n	801a612 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801a606:	4240      	negs	r0, r0
 801a608:	f7ff fffa 	bl	801a600 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a60c:	4240      	negs	r0, r0
 801a60e:	b240      	sxtb	r0, r0
 801a610:	bd08      	pop	{r3, pc}
 801a612:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a616:	dc11      	bgt.n	801a63c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801a618:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801a61c:	dd09      	ble.n	801a632 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801a61e:	4340      	muls	r0, r0
 801a620:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801a624:	f7ff ffd8 	bl	801a5d8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a628:	f7ff ffea 	bl	801a600 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a62c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801a630:	e7ed      	b.n	801a60e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801a632:	3003      	adds	r0, #3
 801a634:	4b02      	ldr	r3, [pc, #8]	; (801a640 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801a636:	10c0      	asrs	r0, r0, #3
 801a638:	5618      	ldrsb	r0, [r3, r0]
 801a63a:	e7e9      	b.n	801a610 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801a63c:	2000      	movs	r0, #0
 801a63e:	e7e7      	b.n	801a610 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801a640:	0802c136 	.word	0x0802c136

0801a644 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801a644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a646:	460c      	mov	r4, r1
 801a648:	1e01      	subs	r1, r0, #0
 801a64a:	4615      	mov	r5, r2
 801a64c:	db01      	blt.n	801a652 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801a64e:	2c00      	cmp	r4, #0
 801a650:	da06      	bge.n	801a660 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801a652:	4b11      	ldr	r3, [pc, #68]	; (801a698 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801a654:	f240 3197 	movw	r1, #919	; 0x397
 801a658:	4a10      	ldr	r2, [pc, #64]	; (801a69c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801a65a:	4811      	ldr	r0, [pc, #68]	; (801a6a0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 801a65c:	f00d ffd2 	bl	8028604 <__assert_func>
 801a660:	428c      	cmp	r4, r1
 801a662:	dd06      	ble.n	801a672 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801a664:	4620      	mov	r0, r4
 801a666:	f7ff ffed 	bl	801a644 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a66a:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801a66e:	b003      	add	sp, #12
 801a670:	bd30      	pop	{r4, r5, pc}
 801a672:	4349      	muls	r1, r1
 801a674:	fb04 1004 	mla	r0, r4, r4, r1
 801a678:	f7ff ffae 	bl	801a5d8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a67c:	6028      	str	r0, [r5, #0]
 801a67e:	2800      	cmp	r0, #0
 801a680:	d0f5      	beq.n	801a66e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801a682:	4602      	mov	r2, r0
 801a684:	ab01      	add	r3, sp, #4
 801a686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a68a:	4620      	mov	r0, r4
 801a68c:	f002 fcfb 	bl	801d086 <_ZN8touchgfx6muldivElllRl>
 801a690:	f7ff ffb6 	bl	801a600 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a694:	e7eb      	b.n	801a66e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801a696:	bf00      	nop
 801a698:	0802c248 	.word	0x0802c248
 801a69c:	0802c310 	.word	0x0802c310
 801a6a0:	0802c259 	.word	0x0802c259

0801a6a4 <_ZN8touchgfx4LineC1Ev>:
 801a6a4:	b510      	push	{r4, lr}
 801a6a6:	4604      	mov	r4, r0
 801a6a8:	f7ff fefc 	bl	801a4a4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801a6ac:	4b0c      	ldr	r3, [pc, #48]	; (801a6e0 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801a6ae:	2220      	movs	r2, #32
 801a6b0:	4620      	mov	r0, r4
 801a6b2:	6023      	str	r3, [r4, #0]
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	6422      	str	r2, [r4, #64]	; 0x40
 801a6b8:	2212      	movs	r2, #18
 801a6ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801a6be:	6722      	str	r2, [r4, #112]	; 0x70
 801a6c0:	60a3      	str	r3, [r4, #8]
 801a6c2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801a6c6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801a6ca:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a6ce:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801a6d2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801a6d6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801a6da:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801a6de:	bd10      	pop	{r4, pc}
 801a6e0:	0802c298 	.word	0x0802c298

0801a6e4 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801a6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6e8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801a6ea:	b085      	sub	sp, #20
 801a6ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a6ee:	4604      	mov	r4, r0
 801a6f0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a6f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801a6f4:	1af6      	subs	r6, r6, r3
 801a6f6:	eba5 0502 	sub.w	r5, r5, r2
 801a6fa:	f040 809b 	bne.w	801a834 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801a6fe:	b955      	cbnz	r5, 801a716 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801a700:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801a704:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a708:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a70c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a710:	b005      	add	sp, #20
 801a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a716:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801a71a:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801a71e:	f04f 0802 	mov.w	r8, #2
 801a722:	463a      	mov	r2, r7
 801a724:	4629      	mov	r1, r5
 801a726:	ab03      	add	r3, sp, #12
 801a728:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a72a:	f002 fcac 	bl	801d086 <_ZN8touchgfx6muldivElllRl>
 801a72e:	ab03      	add	r3, sp, #12
 801a730:	463a      	mov	r2, r7
 801a732:	4631      	mov	r1, r6
 801a734:	fb90 f5f8 	sdiv	r5, r0, r8
 801a738:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a73a:	f002 fca4 	bl	801d086 <_ZN8touchgfx6muldivElllRl>
 801a73e:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801a742:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801a746:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801a74a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801a74c:	fb90 f0f8 	sdiv	r0, r0, r8
 801a750:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801a754:	eba8 0305 	sub.w	r3, r8, r5
 801a758:	f1ba 0f00 	cmp.w	sl, #0
 801a75c:	f040 80c3 	bne.w	801a8e6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801a760:	64a3      	str	r3, [r4, #72]	; 0x48
 801a762:	19c3      	adds	r3, r0, r7
 801a764:	65a3      	str	r3, [r4, #88]	; 0x58
 801a766:	ebae 0305 	sub.w	r3, lr, r5
 801a76a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a76c:	eb00 030c 	add.w	r3, r0, ip
 801a770:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a772:	eb05 030e 	add.w	r3, r5, lr
 801a776:	6523      	str	r3, [r4, #80]	; 0x50
 801a778:	ebac 0300 	sub.w	r3, ip, r0
 801a77c:	6623      	str	r3, [r4, #96]	; 0x60
 801a77e:	eb05 0308 	add.w	r3, r5, r8
 801a782:	6563      	str	r3, [r4, #84]	; 0x54
 801a784:	1a3b      	subs	r3, r7, r0
 801a786:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801a788:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801a78c:	6663      	str	r3, [r4, #100]	; 0x64
 801a78e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801a792:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a794:	4632      	mov	r2, r6
 801a796:	9301      	str	r3, [sp, #4]
 801a798:	9100      	str	r1, [sp, #0]
 801a79a:	f859 bb04 	ldr.w	fp, [r9], #4
 801a79e:	9b00      	ldr	r3, [sp, #0]
 801a7a0:	455e      	cmp	r6, fp
 801a7a2:	bfa8      	it	ge
 801a7a4:	465e      	movge	r6, fp
 801a7a6:	455a      	cmp	r2, fp
 801a7a8:	bfb8      	it	lt
 801a7aa:	465a      	movlt	r2, fp
 801a7ac:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801a7b0:	4559      	cmp	r1, fp
 801a7b2:	bfa8      	it	ge
 801a7b4:	4659      	movge	r1, fp
 801a7b6:	455b      	cmp	r3, fp
 801a7b8:	bfb8      	it	lt
 801a7ba:	465b      	movlt	r3, fp
 801a7bc:	9300      	str	r3, [sp, #0]
 801a7be:	9b01      	ldr	r3, [sp, #4]
 801a7c0:	454b      	cmp	r3, r9
 801a7c2:	d1ea      	bne.n	801a79a <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801a7c4:	f04f 0b20 	mov.w	fp, #32
 801a7c8:	b209      	sxth	r1, r1
 801a7ca:	b212      	sxth	r2, r2
 801a7cc:	f1ba 0f01 	cmp.w	sl, #1
 801a7d0:	b236      	sxth	r6, r6
 801a7d2:	fb91 f9fb 	sdiv	r9, r1, fp
 801a7d6:	f9bd 1000 	ldrsh.w	r1, [sp]
 801a7da:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801a7de:	fb92 f2fb 	sdiv	r2, r2, fp
 801a7e2:	fb91 f1fb 	sdiv	r1, r1, fp
 801a7e6:	fb96 f6fb 	sdiv	r6, r6, fp
 801a7ea:	f102 0201 	add.w	r2, r2, #1
 801a7ee:	f101 0101 	add.w	r1, r1, #1
 801a7f2:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801a7f6:	eba1 0109 	sub.w	r1, r1, r9
 801a7fa:	eba2 0606 	sub.w	r6, r2, r6
 801a7fe:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801a802:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801a806:	d183      	bne.n	801a710 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a808:	eba8 0305 	sub.w	r3, r8, r5
 801a80c:	64a3      	str	r3, [r4, #72]	; 0x48
 801a80e:	19c3      	adds	r3, r0, r7
 801a810:	65a3      	str	r3, [r4, #88]	; 0x58
 801a812:	ebae 0305 	sub.w	r3, lr, r5
 801a816:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a818:	eb00 030c 	add.w	r3, r0, ip
 801a81c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a81e:	eb05 030e 	add.w	r3, r5, lr
 801a822:	4445      	add	r5, r8
 801a824:	6523      	str	r3, [r4, #80]	; 0x50
 801a826:	ebac 0300 	sub.w	r3, ip, r0
 801a82a:	1a38      	subs	r0, r7, r0
 801a82c:	6565      	str	r5, [r4, #84]	; 0x54
 801a82e:	6623      	str	r3, [r4, #96]	; 0x60
 801a830:	6660      	str	r0, [r4, #100]	; 0x64
 801a832:	e76d      	b.n	801a710 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a834:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801a838:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801a83c:	2d00      	cmp	r5, #0
 801a83e:	f43f af6e 	beq.w	801a71e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a842:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801a846:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801a84a:	fb93 f2f7 	sdiv	r2, r3, r7
 801a84e:	fb07 3312 	mls	r3, r7, r2, r3
 801a852:	b34b      	cbz	r3, 801a8a8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801a854:	fb97 f2f3 	sdiv	r2, r7, r3
 801a858:	fb03 7712 	mls	r7, r3, r2, r7
 801a85c:	2f00      	cmp	r7, #0
 801a85e:	d1f4      	bne.n	801a84a <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801a860:	2b01      	cmp	r3, #1
 801a862:	f24b 5204 	movw	r2, #46340	; 0xb504
 801a866:	bf18      	it	ne
 801a868:	fb96 f6f3 	sdivne	r6, r6, r3
 801a86c:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801a870:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801a874:	bf18      	it	ne
 801a876:	fb95 f5f3 	sdivne	r5, r5, r3
 801a87a:	4291      	cmp	r1, r2
 801a87c:	dd16      	ble.n	801a8ac <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801a87e:	2d00      	cmp	r5, #0
 801a880:	da4d      	bge.n	801a91e <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801a882:	4b29      	ldr	r3, [pc, #164]	; (801a928 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801a884:	429d      	cmp	r5, r3
 801a886:	da27      	bge.n	801a8d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801a888:	426a      	negs	r2, r5
 801a88a:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a88e:	fb91 f1f3 	sdiv	r1, r1, r3
 801a892:	fb92 f3f3 	sdiv	r3, r2, r3
 801a896:	4299      	cmp	r1, r3
 801a898:	bfcc      	ite	gt
 801a89a:	1c4b      	addgt	r3, r1, #1
 801a89c:	3301      	addle	r3, #1
 801a89e:	fb96 f6f3 	sdiv	r6, r6, r3
 801a8a2:	fb95 f5f3 	sdiv	r5, r5, r3
 801a8a6:	e00f      	b.n	801a8c8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801a8a8:	463b      	mov	r3, r7
 801a8aa:	e7d9      	b.n	801a860 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801a8ac:	2d00      	cmp	r5, #0
 801a8ae:	fb92 f2f1 	sdiv	r2, r2, r1
 801a8b2:	da13      	bge.n	801a8dc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801a8b4:	4269      	negs	r1, r5
 801a8b6:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a8ba:	fb93 f3f1 	sdiv	r3, r3, r1
 801a8be:	429a      	cmp	r2, r3
 801a8c0:	bfa8      	it	ge
 801a8c2:	461a      	movge	r2, r3
 801a8c4:	4356      	muls	r6, r2
 801a8c6:	4355      	muls	r5, r2
 801a8c8:	fb05 f005 	mul.w	r0, r5, r5
 801a8cc:	fb06 0006 	mla	r0, r6, r6, r0
 801a8d0:	f7ff fe82 	bl	801a5d8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a8d4:	4607      	mov	r7, r0
 801a8d6:	e722      	b.n	801a71e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a8d8:	2200      	movs	r2, #0
 801a8da:	e7eb      	b.n	801a8b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801a8dc:	4629      	mov	r1, r5
 801a8de:	e7ea      	b.n	801a8b6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a8e0:	4629      	mov	r1, r5
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	e7e7      	b.n	801a8b6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a8e6:	1a1b      	subs	r3, r3, r0
 801a8e8:	64a3      	str	r3, [r4, #72]	; 0x48
 801a8ea:	19c3      	adds	r3, r0, r7
 801a8ec:	1b5b      	subs	r3, r3, r5
 801a8ee:	65a3      	str	r3, [r4, #88]	; 0x58
 801a8f0:	ebae 0305 	sub.w	r3, lr, r5
 801a8f4:	4403      	add	r3, r0
 801a8f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a8f8:	eb00 030c 	add.w	r3, r0, ip
 801a8fc:	442b      	add	r3, r5
 801a8fe:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a900:	eb05 030e 	add.w	r3, r5, lr
 801a904:	4403      	add	r3, r0
 801a906:	6523      	str	r3, [r4, #80]	; 0x50
 801a908:	ebac 0300 	sub.w	r3, ip, r0
 801a90c:	442b      	add	r3, r5
 801a90e:	6623      	str	r3, [r4, #96]	; 0x60
 801a910:	eb05 0308 	add.w	r3, r5, r8
 801a914:	1a1b      	subs	r3, r3, r0
 801a916:	6563      	str	r3, [r4, #84]	; 0x54
 801a918:	1a3b      	subs	r3, r7, r0
 801a91a:	1b5b      	subs	r3, r3, r5
 801a91c:	e733      	b.n	801a786 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801a91e:	4295      	cmp	r5, r2
 801a920:	ddde      	ble.n	801a8e0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801a922:	462a      	mov	r2, r5
 801a924:	e7b1      	b.n	801a88a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801a926:	bf00      	nop
 801a928:	ffff4afc 	.word	0xffff4afc

0801a92c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801a92c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a92e:	428b      	cmp	r3, r1
 801a930:	d102      	bne.n	801a938 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801a932:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801a934:	4293      	cmp	r3, r2
 801a936:	d003      	beq.n	801a940 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801a938:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801a93c:	f7ff bed2 	b.w	801a6e4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a940:	4770      	bx	lr

0801a942 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801a942:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a944:	428b      	cmp	r3, r1
 801a946:	d102      	bne.n	801a94e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801a948:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801a94a:	4293      	cmp	r3, r2
 801a94c:	d003      	beq.n	801a956 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801a94e:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801a952:	f7ff bec7 	b.w	801a6e4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a956:	4770      	bx	lr

0801a958 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801a958:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801a95c:	f7ff bec2 	b.w	801a6e4 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801a960 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801a960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a964:	b0b3      	sub	sp, #204	; 0xcc
 801a966:	4604      	mov	r4, r0
 801a968:	460a      	mov	r2, r1
 801a96a:	4601      	mov	r1, r0
 801a96c:	a804      	add	r0, sp, #16
 801a96e:	ad32      	add	r5, sp, #200	; 0xc8
 801a970:	f00c fa7c 	bl	8026e6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801a974:	2300      	movs	r3, #0
 801a976:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801a978:	f845 3dc4 	str.w	r3, [r5, #-196]!
 801a97c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a97e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a980:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a982:	1ac0      	subs	r0, r0, r3
 801a984:	eba1 0102 	sub.w	r1, r1, r2
 801a988:	d43c      	bmi.n	801aa04 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801a98a:	2900      	cmp	r1, #0
 801a98c:	462a      	mov	r2, r5
 801a98e:	db33      	blt.n	801a9f8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801a990:	f7ff fe58 	bl	801a644 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a994:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801a998:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801a99a:	a804      	add	r0, sp, #16
 801a99c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a99e:	f00c fc2e 	bl	80271fe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801a9a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801a9a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801a9a6:	a804      	add	r0, sp, #16
 801a9a8:	f00c fbb8 	bl	802711c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a9ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a9b0:	2b01      	cmp	r3, #1
 801a9b2:	d137      	bne.n	801aa24 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a9b4:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a9b6:	2eb3      	cmp	r6, #179	; 0xb3
 801a9b8:	dc34      	bgt.n	801aa24 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a9ba:	eba7 0906 	sub.w	r9, r7, r6
 801a9be:	4648      	mov	r0, r9
 801a9c0:	f7ff fde8 	bl	801a594 <_ZN8touchgfx7CWRUtil4sineEi>
 801a9c4:	a902      	add	r1, sp, #8
 801a9c6:	9002      	str	r0, [sp, #8]
 801a9c8:	4628      	mov	r0, r5
 801a9ca:	f7ff fdd7 	bl	801a57c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a9ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a9d0:	eb00 0801 	add.w	r8, r0, r1
 801a9d4:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a9d8:	f7ff fddc 	bl	801a594 <_ZN8touchgfx7CWRUtil4sineEi>
 801a9dc:	a903      	add	r1, sp, #12
 801a9de:	9003      	str	r0, [sp, #12]
 801a9e0:	4628      	mov	r0, r5
 801a9e2:	f7ff fdcb 	bl	801a57c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a9e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a9e8:	4641      	mov	r1, r8
 801a9ea:	1a12      	subs	r2, r2, r0
 801a9ec:	a804      	add	r0, sp, #16
 801a9ee:	f00c fb95 	bl	802711c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a9f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a9f4:	441e      	add	r6, r3
 801a9f6:	e7de      	b.n	801a9b6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801a9f8:	4249      	negs	r1, r1
 801a9fa:	f7ff fe23 	bl	801a644 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a9fe:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801aa02:	e7c9      	b.n	801a998 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801aa04:	2900      	cmp	r1, #0
 801aa06:	f1c0 0000 	rsb	r0, r0, #0
 801aa0a:	462a      	mov	r2, r5
 801aa0c:	db04      	blt.n	801aa18 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801aa0e:	f7ff fe19 	bl	801a644 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801aa12:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801aa16:	e7bf      	b.n	801a998 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801aa18:	4249      	negs	r1, r1
 801aa1a:	f7ff fe13 	bl	801a644 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801aa1e:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801aa22:	e7b9      	b.n	801a998 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801aa24:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801aa26:	a804      	add	r0, sp, #16
 801aa28:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801aa2a:	f00c fb77 	bl	802711c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801aa2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aa30:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801aa32:	a804      	add	r0, sp, #16
 801aa34:	f00c fb72 	bl	802711c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801aa38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801aa3c:	2b01      	cmp	r3, #1
 801aa3e:	d123      	bne.n	801aa88 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801aa40:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801aa42:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801aa46:	2e00      	cmp	r6, #0
 801aa48:	dd1e      	ble.n	801aa88 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801aa4a:	eb06 0907 	add.w	r9, r6, r7
 801aa4e:	4648      	mov	r0, r9
 801aa50:	f7ff fda0 	bl	801a594 <_ZN8touchgfx7CWRUtil4sineEi>
 801aa54:	a902      	add	r1, sp, #8
 801aa56:	9002      	str	r0, [sp, #8]
 801aa58:	4628      	mov	r0, r5
 801aa5a:	f7ff fd8f 	bl	801a57c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801aa5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801aa60:	eb00 0801 	add.w	r8, r0, r1
 801aa64:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801aa68:	f7ff fd94 	bl	801a594 <_ZN8touchgfx7CWRUtil4sineEi>
 801aa6c:	a903      	add	r1, sp, #12
 801aa6e:	9003      	str	r0, [sp, #12]
 801aa70:	4628      	mov	r0, r5
 801aa72:	f7ff fd83 	bl	801a57c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801aa76:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801aa78:	4641      	mov	r1, r8
 801aa7a:	1a12      	subs	r2, r2, r0
 801aa7c:	a804      	add	r0, sp, #16
 801aa7e:	f00c fb4d 	bl	802711c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801aa82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801aa84:	1af6      	subs	r6, r6, r3
 801aa86:	e7de      	b.n	801aa46 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801aa88:	a804      	add	r0, sp, #16
 801aa8a:	f00c fcbc 	bl	8027406 <_ZN8touchgfx6Canvas6renderEv>
 801aa8e:	4604      	mov	r4, r0
 801aa90:	a804      	add	r0, sp, #16
 801aa92:	f00c fcf9 	bl	8027488 <_ZN8touchgfx6CanvasD1Ev>
 801aa96:	4620      	mov	r0, r4
 801aa98:	b033      	add	sp, #204	; 0xcc
 801aa9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801aa9e <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801aa9e:	4770      	bx	lr

0801aaa0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801aaa0:	6803      	ldr	r3, [r0, #0]
 801aaa2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801aaa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801aaa8:	4718      	bx	r3

0801aaaa <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801aaaa:	b510      	push	{r4, lr}
 801aaac:	4604      	mov	r4, r0
 801aaae:	212c      	movs	r1, #44	; 0x2c
 801aab0:	f00d fd7a 	bl	80285a8 <_ZdlPvj>
 801aab4:	4620      	mov	r0, r4
 801aab6:	bd10      	pop	{r4, pc}

0801aab8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801aab8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801aabc:	2bff      	cmp	r3, #255	; 0xff
 801aabe:	b510      	push	{r4, lr}
 801aac0:	d104      	bne.n	801aacc <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801aac2:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801aac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d105      	bne.n	801aad8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801aacc:	2300      	movs	r3, #0
 801aace:	8003      	strh	r3, [r0, #0]
 801aad0:	8043      	strh	r3, [r0, #2]
 801aad2:	8083      	strh	r3, [r0, #4]
 801aad4:	80c3      	strh	r3, [r0, #6]
 801aad6:	bd10      	pop	{r4, pc}
 801aad8:	2300      	movs	r3, #0
 801aada:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801aade:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801aae2:	8003      	strh	r3, [r0, #0]
 801aae4:	8043      	strh	r3, [r0, #2]
 801aae6:	8084      	strh	r4, [r0, #4]
 801aae8:	80c2      	strh	r2, [r0, #6]
 801aaea:	e7f4      	b.n	801aad6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801aaec <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801aaec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aaf0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801aaf4:	b087      	sub	sp, #28
 801aaf6:	4604      	mov	r4, r0
 801aaf8:	4689      	mov	r9, r1
 801aafa:	b363      	cbz	r3, 801ab56 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801aafc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801aafe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab02:	429a      	cmp	r2, r3
 801ab04:	d027      	beq.n	801ab56 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801ab06:	ad06      	add	r5, sp, #24
 801ab08:	2700      	movs	r7, #0
 801ab0a:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801ab0e:	4628      	mov	r0, r5
 801ab10:	f004 f826 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ab14:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801ab18:	a904      	add	r1, sp, #16
 801ab1a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ab1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab22:	4620      	mov	r0, r4
 801ab24:	6823      	ldr	r3, [r4, #0]
 801ab26:	9704      	str	r7, [sp, #16]
 801ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab2a:	4798      	blx	r3
 801ab2c:	f7f6 f950 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801ab30:	6803      	ldr	r3, [r0, #0]
 801ab32:	4606      	mov	r6, r0
 801ab34:	4628      	mov	r0, r5
 801ab36:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801ab3a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801ab3c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ab40:	f004 f916 	bl	801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ab44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801ab48:	4601      	mov	r1, r0
 801ab4a:	9701      	str	r7, [sp, #4]
 801ab4c:	aa04      	add	r2, sp, #16
 801ab4e:	9300      	str	r3, [sp, #0]
 801ab50:	4630      	mov	r0, r6
 801ab52:	464b      	mov	r3, r9
 801ab54:	47c0      	blx	r8
 801ab56:	b007      	add	sp, #28
 801ab58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801ab5c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801ab5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801ab5e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ab62:	460d      	mov	r5, r1
 801ab64:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801ab68:	2100      	movs	r1, #0
 801ab6a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ab6e:	4604      	mov	r4, r0
 801ab70:	6803      	ldr	r3, [r0, #0]
 801ab72:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ab76:	6a1b      	ldr	r3, [r3, #32]
 801ab78:	9100      	str	r1, [sp, #0]
 801ab7a:	4669      	mov	r1, sp
 801ab7c:	4798      	blx	r3
 801ab7e:	4621      	mov	r1, r4
 801ab80:	a802      	add	r0, sp, #8
 801ab82:	f002 f9e6 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ab86:	f7f6 f923 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801ab8a:	6803      	ldr	r3, [r0, #0]
 801ab8c:	aa02      	add	r2, sp, #8
 801ab8e:	4669      	mov	r1, sp
 801ab90:	699e      	ldr	r6, [r3, #24]
 801ab92:	462b      	mov	r3, r5
 801ab94:	47b0      	blx	r6
 801ab96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab9a:	2800      	cmp	r0, #0
 801ab9c:	bf08      	it	eq
 801ab9e:	461d      	moveq	r5, r3
 801aba0:	84e5      	strh	r5, [r4, #38]	; 0x26
 801aba2:	b004      	add	sp, #16
 801aba4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801aba8 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801aba8:	2200      	movs	r2, #0
 801abaa:	8082      	strh	r2, [r0, #4]
 801abac:	80c2      	strh	r2, [r0, #6]
 801abae:	8102      	strh	r2, [r0, #8]
 801abb0:	8142      	strh	r2, [r0, #10]
 801abb2:	8182      	strh	r2, [r0, #12]
 801abb4:	81c2      	strh	r2, [r0, #14]
 801abb6:	8202      	strh	r2, [r0, #16]
 801abb8:	8242      	strh	r2, [r0, #18]
 801abba:	61c2      	str	r2, [r0, #28]
 801abbc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801abc0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801abc4:	2201      	movs	r2, #1
 801abc6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801abca:	4a04      	ldr	r2, [pc, #16]	; (801abdc <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801abcc:	6002      	str	r2, [r0, #0]
 801abce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801abd2:	84c2      	strh	r2, [r0, #38]	; 0x26
 801abd4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801abd8:	4770      	bx	lr
 801abda:	bf00      	nop
 801abdc:	0802c384 	.word	0x0802c384

0801abe0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801abe0:	b570      	push	{r4, r5, r6, lr}
 801abe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801abe6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801abe8:	4604      	mov	r4, r0
 801abea:	429a      	cmp	r2, r3
 801abec:	d00c      	beq.n	801ac08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801abee:	f850 3b26 	ldr.w	r3, [r0], #38
 801abf2:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801abf4:	f7f7 fd5e 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 801abf8:	2300      	movs	r3, #0
 801abfa:	4601      	mov	r1, r0
 801abfc:	46ac      	mov	ip, r5
 801abfe:	4620      	mov	r0, r4
 801ac00:	461a      	mov	r2, r3
 801ac02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac06:	4760      	bx	ip
 801ac08:	2000      	movs	r0, #0
 801ac0a:	bd70      	pop	{r4, r5, r6, pc}

0801ac0c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801ac0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac12:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ac14:	429a      	cmp	r2, r3
 801ac16:	d016      	beq.n	801ac46 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801ac18:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	f7f5 fc31 	bl	8010484 <_ZNK8touchgfx9TypedText7getFontEv>
 801ac22:	6803      	ldr	r3, [r0, #0]
 801ac24:	4605      	mov	r5, r0
 801ac26:	4620      	mov	r0, r4
 801ac28:	69de      	ldr	r6, [r3, #28]
 801ac2a:	f7f5 fc47 	bl	80104bc <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801ac2e:	4607      	mov	r7, r0
 801ac30:	4620      	mov	r0, r4
 801ac32:	f7f7 fd3f 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 801ac36:	2300      	movs	r3, #0
 801ac38:	4602      	mov	r2, r0
 801ac3a:	4639      	mov	r1, r7
 801ac3c:	9300      	str	r3, [sp, #0]
 801ac3e:	4628      	mov	r0, r5
 801ac40:	47b0      	blx	r6
 801ac42:	b003      	add	sp, #12
 801ac44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac46:	2000      	movs	r0, #0
 801ac48:	e7fb      	b.n	801ac42 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801ac4a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801ac4a:	b40e      	push	{r1, r2, r3}
 801ac4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac54:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ac56:	b09b      	sub	sp, #108	; 0x6c
 801ac58:	4604      	mov	r4, r0
 801ac5a:	429a      	cmp	r2, r3
 801ac5c:	d03f      	beq.n	801acde <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801ac5e:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801ac62:	ab22      	add	r3, sp, #136	; 0x88
 801ac64:	4638      	mov	r0, r7
 801ac66:	9303      	str	r3, [sp, #12]
 801ac68:	f7f5 fc0c 	bl	8010484 <_ZNK8touchgfx9TypedText7getFontEv>
 801ac6c:	6803      	ldr	r3, [r0, #0]
 801ac6e:	4680      	mov	r8, r0
 801ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac72:	4798      	blx	r3
 801ac74:	4606      	mov	r6, r0
 801ac76:	b205      	sxth	r5, r0
 801ac78:	a804      	add	r0, sp, #16
 801ac7a:	f003 f845 	bl	801dd08 <_ZN8touchgfx12TextProviderC1Ev>
 801ac7e:	f8d8 3000 	ldr.w	r3, [r8]
 801ac82:	4640      	mov	r0, r8
 801ac84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac86:	4798      	blx	r3
 801ac88:	9a03      	ldr	r2, [sp, #12]
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ac8e:	a804      	add	r0, sp, #16
 801ac90:	f003 f857 	bl	801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ac94:	4638      	mov	r0, r7
 801ac96:	f7f5 fc11 	bl	80104bc <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801ac9a:	4680      	mov	r8, r0
 801ac9c:	4638      	mov	r0, r7
 801ac9e:	f7f5 fbf1 	bl	8010484 <_ZNK8touchgfx9TypedText7getFontEv>
 801aca2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801aca6:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801acaa:	4642      	mov	r2, r8
 801acac:	9300      	str	r3, [sp, #0]
 801acae:	4603      	mov	r3, r0
 801acb0:	a804      	add	r0, sp, #16
 801acb2:	f001 f8a2 	bl	801bdfa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801acb6:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801acba:	b203      	sxth	r3, r0
 801acbc:	18a9      	adds	r1, r5, r2
 801acbe:	2900      	cmp	r1, #0
 801acc0:	dd0b      	ble.n	801acda <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801acc2:	3b01      	subs	r3, #1
 801acc4:	fb13 f302 	smulbb	r3, r3, r2
 801acc8:	fb16 3300 	smlabb	r3, r6, r0, r3
 801accc:	b21d      	sxth	r5, r3
 801acce:	4628      	mov	r0, r5
 801acd0:	b01b      	add	sp, #108	; 0x6c
 801acd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acd6:	b003      	add	sp, #12
 801acd8:	4770      	bx	lr
 801acda:	2b00      	cmp	r3, #0
 801acdc:	dcf7      	bgt.n	801acce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801acde:	2500      	movs	r5, #0
 801ace0:	e7f5      	b.n	801acce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801ace4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ace8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acec:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801acee:	b08d      	sub	sp, #52	; 0x34
 801acf0:	4604      	mov	r4, r0
 801acf2:	429e      	cmp	r6, r3
 801acf4:	4688      	mov	r8, r1
 801acf6:	d04b      	beq.n	801ad90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801acf8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801acfc:	4628      	mov	r0, r5
 801acfe:	f7f5 fbc1 	bl	8010484 <_ZNK8touchgfx9TypedText7getFontEv>
 801ad02:	4607      	mov	r7, r0
 801ad04:	2800      	cmp	r0, #0
 801ad06:	d043      	beq.n	801ad90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801ad08:	4628      	mov	r0, r5
 801ad0a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801ad0e:	f7f5 fbed 	bl	80104ec <_ZNK8touchgfx9TypedText11assertValidEv>
 801ad12:	4b21      	ldr	r3, [pc, #132]	; (801ad98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801ad14:	4628      	mov	r0, r5
 801ad16:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801ad20:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801ad24:	785e      	ldrb	r6, [r3, #1]
 801ad26:	f7f5 fbc9 	bl	80104bc <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801ad2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ad2c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801ad30:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801ad34:	9309      	str	r3, [sp, #36]	; 0x24
 801ad36:	4b19      	ldr	r3, [pc, #100]	; (801ad9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801ad38:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801ad42:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ad46:	9707      	str	r7, [sp, #28]
 801ad48:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801ad4c:	f88d 6020 	strb.w	r6, [sp, #32]
 801ad50:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801ad54:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801ad58:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ad5c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801ad60:	b10a      	cbz	r2, 801ad66 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801ad62:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801ad64:	b906      	cbnz	r6, 801ad68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801ad66:	689e      	ldr	r6, [r3, #8]
 801ad68:	af05      	add	r7, sp, #20
 801ad6a:	4621      	mov	r1, r4
 801ad6c:	4638      	mov	r0, r7
 801ad6e:	f002 f8f0 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ad72:	4628      	mov	r0, r5
 801ad74:	f7f7 fc9e 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 801ad78:	2300      	movs	r3, #0
 801ad7a:	9001      	str	r0, [sp, #4]
 801ad7c:	4630      	mov	r0, r6
 801ad7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ad82:	ab07      	add	r3, sp, #28
 801ad84:	9300      	str	r3, [sp, #0]
 801ad86:	4643      	mov	r3, r8
 801ad88:	e897 0006 	ldmia.w	r7, {r1, r2}
 801ad8c:	f000 fe02 	bl	801b994 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801ad90:	b00d      	add	sp, #52	; 0x34
 801ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad96:	bf00      	nop
 801ad98:	2000bf80 	.word	0x2000bf80
 801ad9c:	2000bef0 	.word	0x2000bef0

0801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801ada0:	b570      	push	{r4, r5, r6, lr}
 801ada2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ada6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ada8:	4604      	mov	r4, r0
 801adaa:	429a      	cmp	r2, r3
 801adac:	d021      	beq.n	801adf2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801adae:	6803      	ldr	r3, [r0, #0]
 801adb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801adb2:	4798      	blx	r3
 801adb4:	6823      	ldr	r3, [r4, #0]
 801adb6:	4605      	mov	r5, r0
 801adb8:	4620      	mov	r0, r4
 801adba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801adbc:	4798      	blx	r3
 801adbe:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801adc2:	4606      	mov	r6, r0
 801adc4:	b22d      	sxth	r5, r5
 801adc6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801adca:	6823      	ldr	r3, [r4, #0]
 801adcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801adce:	d109      	bne.n	801ade4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801add0:	4629      	mov	r1, r5
 801add2:	4620      	mov	r0, r4
 801add4:	4798      	blx	r3
 801add6:	6823      	ldr	r3, [r4, #0]
 801add8:	4631      	mov	r1, r6
 801adda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801addc:	4620      	mov	r0, r4
 801adde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ade2:	4718      	bx	r3
 801ade4:	4601      	mov	r1, r0
 801ade6:	4620      	mov	r0, r4
 801ade8:	4798      	blx	r3
 801adea:	6823      	ldr	r3, [r4, #0]
 801adec:	4629      	mov	r1, r5
 801adee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801adf0:	e7f4      	b.n	801addc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801adf2:	bd70      	pop	{r4, r5, r6, pc}

0801adf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801adf4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801adf8:	84c1      	strh	r1, [r0, #38]	; 0x26
 801adfa:	b922      	cbnz	r2, 801ae06 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801adfc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ae00:	b90b      	cbnz	r3, 801ae06 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801ae02:	f7ff bfcd 	b.w	801ada0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801ae06:	4770      	bx	lr

0801ae08 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801ae08:	2300      	movs	r3, #0
 801ae0a:	8003      	strh	r3, [r0, #0]
 801ae0c:	8043      	strh	r3, [r0, #2]
 801ae0e:	8083      	strh	r3, [r0, #4]
 801ae10:	80c3      	strh	r3, [r0, #6]
 801ae12:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801ae16:	b91b      	cbnz	r3, 801ae20 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801ae18:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801ae1c:	2bff      	cmp	r3, #255	; 0xff
 801ae1e:	d103      	bne.n	801ae28 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801ae20:	890b      	ldrh	r3, [r1, #8]
 801ae22:	8083      	strh	r3, [r0, #4]
 801ae24:	894b      	ldrh	r3, [r1, #10]
 801ae26:	80c3      	strh	r3, [r0, #6]
 801ae28:	4770      	bx	lr
	...

0801ae2c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801ae2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae2e:	4604      	mov	r4, r0
 801ae30:	466b      	mov	r3, sp
 801ae32:	6808      	ldr	r0, [r1, #0]
 801ae34:	6849      	ldr	r1, [r1, #4]
 801ae36:	c303      	stmia	r3!, {r0, r1}
 801ae38:	6823      	ldr	r3, [r4, #0]
 801ae3a:	4669      	mov	r1, sp
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae40:	4798      	blx	r3
 801ae42:	4b08      	ldr	r3, [pc, #32]	; (801ae64 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ae4a:	b10a      	cbz	r2, 801ae50 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801ae4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ae4e:	b900      	cbnz	r0, 801ae52 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801ae50:	6898      	ldr	r0, [r3, #8]
 801ae52:	6803      	ldr	r3, [r0, #0]
 801ae54:	4669      	mov	r1, sp
 801ae56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801ae58:	69dd      	ldr	r5, [r3, #28]
 801ae5a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801ae5e:	47a8      	blx	r5
 801ae60:	b003      	add	sp, #12
 801ae62:	bd30      	pop	{r4, r5, pc}
 801ae64:	2000bef0 	.word	0x2000bef0

0801ae68 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801ae68:	b570      	push	{r4, r5, r6, lr}
 801ae6a:	6803      	ldr	r3, [r0, #0]
 801ae6c:	4604      	mov	r4, r0
 801ae6e:	4615      	mov	r5, r2
 801ae70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ae72:	4798      	blx	r3
 801ae74:	6823      	ldr	r3, [r4, #0]
 801ae76:	4629      	mov	r1, r5
 801ae78:	4620      	mov	r0, r4
 801ae7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae80:	4718      	bx	r3

0801ae82 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801ae82:	b570      	push	{r4, r5, r6, lr}
 801ae84:	6803      	ldr	r3, [r0, #0]
 801ae86:	4604      	mov	r4, r0
 801ae88:	460e      	mov	r6, r1
 801ae8a:	4615      	mov	r5, r2
 801ae8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae8e:	4798      	blx	r3
 801ae90:	8030      	strh	r0, [r6, #0]
 801ae92:	6823      	ldr	r3, [r4, #0]
 801ae94:	4620      	mov	r0, r4
 801ae96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ae98:	4798      	blx	r3
 801ae9a:	8028      	strh	r0, [r5, #0]
 801ae9c:	bd70      	pop	{r4, r5, r6, pc}

0801ae9e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801ae9e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801aea2:	4770      	bx	lr

0801aea4 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801aea4:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801aea8:	4770      	bx	lr

0801aeaa <_ZN8touchgfx10TiledImageD1Ev>:
 801aeaa:	4770      	bx	lr

0801aeac <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801aeac:	b510      	push	{r4, lr}
 801aeae:	4604      	mov	r4, r0
 801aeb0:	f000 facc 	bl	801b44c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801aeb4:	6823      	ldr	r3, [r4, #0]
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801aebc:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801aec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801aec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aec6:	4718      	bx	r3

0801aec8 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeca:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801aece:	4605      	mov	r5, r0
 801aed0:	8541      	strh	r1, [r0, #42]	; 0x2a
 801aed2:	4630      	mov	r0, r6
 801aed4:	f003 fe44 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aed8:	b1a0      	cbz	r0, 801af04 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801aeda:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801aede:	4630      	mov	r0, r6
 801aee0:	f003 fe3e 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aee4:	fb97 f4f0 	sdiv	r4, r7, r0
 801aee8:	fb04 7410 	mls	r4, r4, r0, r7
 801aeec:	4630      	mov	r0, r6
 801aeee:	f003 fe37 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aef2:	4404      	add	r4, r0
 801aef4:	4630      	mov	r0, r6
 801aef6:	f003 fe33 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aefa:	fb94 f3f0 	sdiv	r3, r4, r0
 801aefe:	fb03 4010 	mls	r0, r3, r0, r4
 801af02:	8568      	strh	r0, [r5, #42]	; 0x2a
 801af04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801af06 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801af06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af08:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801af0c:	4605      	mov	r5, r0
 801af0e:	8581      	strh	r1, [r0, #44]	; 0x2c
 801af10:	4630      	mov	r0, r6
 801af12:	f003 fe5f 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af16:	b1a0      	cbz	r0, 801af42 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801af18:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801af1c:	4630      	mov	r0, r6
 801af1e:	f003 fe59 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af22:	fb97 f4f0 	sdiv	r4, r7, r0
 801af26:	fb04 7410 	mls	r4, r4, r0, r7
 801af2a:	4630      	mov	r0, r6
 801af2c:	f003 fe52 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af30:	4404      	add	r4, r0
 801af32:	4630      	mov	r0, r6
 801af34:	f003 fe4e 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af38:	fb94 f3f0 	sdiv	r3, r4, r0
 801af3c:	fb03 4010 	mls	r0, r3, r0, r4
 801af40:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801af42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801af44 <_ZN8touchgfx10TiledImageD0Ev>:
 801af44:	b510      	push	{r4, lr}
 801af46:	4604      	mov	r4, r0
 801af48:	2130      	movs	r1, #48	; 0x30
 801af4a:	f00d fb2d 	bl	80285a8 <_ZdlPvj>
 801af4e:	4620      	mov	r0, r4
 801af50:	bd10      	pop	{r4, pc}
	...

0801af54 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af58:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801af5c:	b093      	sub	sp, #76	; 0x4c
 801af5e:	4607      	mov	r7, r0
 801af60:	460e      	mov	r6, r1
 801af62:	4658      	mov	r0, fp
 801af64:	f003 fdfc 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801af68:	4605      	mov	r5, r0
 801af6a:	4658      	mov	r0, fp
 801af6c:	f003 fe32 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af70:	4680      	mov	r8, r0
 801af72:	2d00      	cmp	r5, #0
 801af74:	f000 80c5 	beq.w	801b102 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801af78:	2800      	cmp	r0, #0
 801af7a:	f000 80c2 	beq.w	801b102 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801af7e:	2300      	movs	r3, #0
 801af80:	a90e      	add	r1, sp, #56	; 0x38
 801af82:	4638      	mov	r0, r7
 801af84:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af8c:	4798      	blx	r3
 801af8e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801af92:	f9b6 3000 	ldrsh.w	r3, [r6]
 801af96:	88b1      	ldrh	r1, [r6, #4]
 801af98:	189c      	adds	r4, r3, r2
 801af9a:	440b      	add	r3, r1
 801af9c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801afa0:	fa02 f383 	sxtah	r3, r2, r3
 801afa4:	3b01      	subs	r3, #1
 801afa6:	fb93 f3f5 	sdiv	r3, r3, r5
 801afaa:	fb94 f4f5 	sdiv	r4, r4, r5
 801afae:	fb13 f305 	smulbb	r3, r3, r5
 801afb2:	fb14 f405 	smulbb	r4, r4, r5
 801afb6:	b21b      	sxth	r3, r3
 801afb8:	1aa4      	subs	r4, r4, r2
 801afba:	930b      	str	r3, [sp, #44]	; 0x2c
 801afbc:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801afc0:	b2a4      	uxth	r4, r4
 801afc2:	185a      	adds	r2, r3, r1
 801afc4:	fb92 f2f8 	sdiv	r2, r2, r8
 801afc8:	fb12 f208 	smulbb	r2, r2, r8
 801afcc:	1a52      	subs	r2, r2, r1
 801afce:	b212      	sxth	r2, r2
 801afd0:	920c      	str	r2, [sp, #48]	; 0x30
 801afd2:	88f2      	ldrh	r2, [r6, #6]
 801afd4:	4413      	add	r3, r2
 801afd6:	fa01 f383 	sxtah	r3, r1, r3
 801afda:	3b01      	subs	r3, #1
 801afdc:	fb93 f3f8 	sdiv	r3, r3, r8
 801afe0:	fb13 f308 	smulbb	r3, r3, r8
 801afe4:	b21b      	sxth	r3, r3
 801afe6:	930d      	str	r3, [sp, #52]	; 0x34
 801afe8:	1963      	adds	r3, r4, r5
 801afea:	fa1f fa83 	uxth.w	sl, r3
 801afee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aff0:	b223      	sxth	r3, r4
 801aff2:	4293      	cmp	r3, r2
 801aff4:	9305      	str	r3, [sp, #20]
 801aff6:	f300 8084 	bgt.w	801b102 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801affa:	fa0f f38a 	sxth.w	r3, sl
 801affe:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801b002:	9309      	str	r3, [sp, #36]	; 0x24
 801b004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b006:	4599      	cmp	r9, r3
 801b008:	dd04      	ble.n	801b014 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801b00a:	442c      	add	r4, r5
 801b00c:	eb05 030a 	add.w	r3, r5, sl
 801b010:	b2a4      	uxth	r4, r4
 801b012:	e7ea      	b.n	801afea <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801b014:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b018:	88b2      	ldrh	r2, [r6, #4]
 801b01a:	4462      	add	r2, ip
 801b01c:	b292      	uxth	r2, r2
 801b01e:	b213      	sxth	r3, r2
 801b020:	9308      	str	r3, [sp, #32]
 801b022:	fa1f f389 	uxth.w	r3, r9
 801b026:	eb08 0103 	add.w	r1, r8, r3
 801b02a:	9307      	str	r3, [sp, #28]
 801b02c:	b289      	uxth	r1, r1
 801b02e:	b208      	sxth	r0, r1
 801b030:	9006      	str	r0, [sp, #24]
 801b032:	9805      	ldr	r0, [sp, #20]
 801b034:	4603      	mov	r3, r0
 801b036:	9808      	ldr	r0, [sp, #32]
 801b038:	4283      	cmp	r3, r0
 801b03a:	da5e      	bge.n	801b0fa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801b03c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b03e:	4584      	cmp	ip, r0
 801b040:	da5b      	bge.n	801b0fa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801b042:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801b046:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801b04a:	4486      	add	lr, r0
 801b04c:	fa1f fe8e 	uxth.w	lr, lr
 801b050:	fa0f f38e 	sxth.w	r3, lr
 801b054:	4599      	cmp	r9, r3
 801b056:	930a      	str	r3, [sp, #40]	; 0x28
 801b058:	da4f      	bge.n	801b0fa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801b05a:	9b06      	ldr	r3, [sp, #24]
 801b05c:	4298      	cmp	r0, r3
 801b05e:	da4c      	bge.n	801b0fa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801b060:	9b05      	ldr	r3, [sp, #20]
 801b062:	459c      	cmp	ip, r3
 801b064:	bfb8      	it	lt
 801b066:	469c      	movlt	ip, r3
 801b068:	4548      	cmp	r0, r9
 801b06a:	9b08      	ldr	r3, [sp, #32]
 801b06c:	bfb8      	it	lt
 801b06e:	4648      	movlt	r0, r9
 801b070:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801b074:	4699      	mov	r9, r3
 801b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b078:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801b07c:	4599      	cmp	r9, r3
 801b07e:	bfc8      	it	gt
 801b080:	4652      	movgt	r2, sl
 801b082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b084:	eba2 020c 	sub.w	r2, r2, ip
 801b088:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801b08c:	9a06      	ldr	r2, [sp, #24]
 801b08e:	4293      	cmp	r3, r2
 801b090:	bfd8      	it	le
 801b092:	4671      	movle	r1, lr
 801b094:	1a09      	subs	r1, r1, r0
 801b096:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801b09a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b09e:	9b07      	ldr	r3, [sp, #28]
 801b0a0:	1b12      	subs	r2, r2, r4
 801b0a2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b0a6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b0aa:	1ad2      	subs	r2, r2, r3
 801b0ac:	4b16      	ldr	r3, [pc, #88]	; (801b108 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801b0ae:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801b0b2:	681a      	ldr	r2, [r3, #0]
 801b0b4:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801b0b8:	b109      	cbz	r1, 801b0be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801b0ba:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801b0bc:	b900      	cbnz	r0, 801b0c0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801b0be:	6890      	ldr	r0, [r2, #8]
 801b0c0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b0c4:	f04f 0c01 	mov.w	ip, #1
 801b0c8:	9b07      	ldr	r3, [sp, #28]
 801b0ca:	6801      	ldr	r1, [r0, #0]
 801b0cc:	4413      	add	r3, r2
 801b0ce:	f8cd c008 	str.w	ip, [sp, #8]
 801b0d2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b0d6:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801b0da:	b21b      	sxth	r3, r3
 801b0dc:	4422      	add	r2, r4
 801b0de:	f8cd c004 	str.w	ip, [sp, #4]
 801b0e2:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801b0e6:	b212      	sxth	r2, r2
 801b0e8:	f8cd c000 	str.w	ip, [sp]
 801b0ec:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801b0f0:	4659      	mov	r1, fp
 801b0f2:	47c8      	blx	r9
 801b0f4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b0f8:	e784      	b.n	801b004 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801b100:	e7cb      	b.n	801b09a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801b102:	b013      	add	sp, #76	; 0x4c
 801b104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b108:	2000bef0 	.word	0x2000bef0

0801b10c <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801b10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b110:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b114:	4606      	mov	r6, r0
 801b116:	4689      	mov	r9, r1
 801b118:	2bff      	cmp	r3, #255	; 0xff
 801b11a:	d008      	beq.n	801b12e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801b11c:	2300      	movs	r3, #0
 801b11e:	8003      	strh	r3, [r0, #0]
 801b120:	8043      	strh	r3, [r0, #2]
 801b122:	8083      	strh	r3, [r0, #4]
 801b124:	4630      	mov	r0, r6
 801b126:	80f3      	strh	r3, [r6, #6]
 801b128:	b003      	add	sp, #12
 801b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b12e:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801b132:	4668      	mov	r0, sp
 801b134:	4659      	mov	r1, fp
 801b136:	f003 fd87 	bl	801ec48 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b13a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801b13e:	4658      	mov	r0, fp
 801b140:	f9bd 7000 	ldrsh.w	r7, [sp]
 801b144:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801b148:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801b14c:	f003 fd08 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b150:	4284      	cmp	r4, r0
 801b152:	d10d      	bne.n	801b170 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801b154:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801b158:	4658      	mov	r0, fp
 801b15a:	f003 fd3b 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b15e:	4580      	cmp	r8, r0
 801b160:	d12a      	bne.n	801b1b8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801b162:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801b166:	8037      	strh	r7, [r6, #0]
 801b168:	f8a6 a002 	strh.w	sl, [r6, #2]
 801b16c:	80b5      	strh	r5, [r6, #4]
 801b16e:	e7d9      	b.n	801b124 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801b170:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801b174:	4658      	mov	r0, fp
 801b176:	f003 fcf3 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b17a:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801b17e:	1b7f      	subs	r7, r7, r5
 801b180:	b2a3      	uxth	r3, r4
 801b182:	b2bd      	uxth	r5, r7
 801b184:	b22f      	sxth	r7, r5
 801b186:	4428      	add	r0, r5
 801b188:	2f00      	cmp	r7, #0
 801b18a:	b280      	uxth	r0, r0
 801b18c:	bfb8      	it	lt
 801b18e:	18ed      	addlt	r5, r5, r3
 801b190:	4403      	add	r3, r0
 801b192:	bfac      	ite	ge
 801b194:	4625      	movge	r5, r4
 801b196:	2700      	movlt	r7, #0
 801b198:	b29b      	uxth	r3, r3
 801b19a:	bfb8      	it	lt
 801b19c:	b22d      	sxthlt	r5, r5
 801b19e:	b219      	sxth	r1, r3
 801b1a0:	bfb8      	it	lt
 801b1a2:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801b1a6:	4291      	cmp	r1, r2
 801b1a8:	bfc4      	itt	gt
 801b1aa:	1a9c      	subgt	r4, r3, r2
 801b1ac:	b224      	sxthgt	r4, r4
 801b1ae:	42ac      	cmp	r4, r5
 801b1b0:	bfc4      	itt	gt
 801b1b2:	b207      	sxthgt	r7, r0
 801b1b4:	4625      	movgt	r5, r4
 801b1b6:	e7cf      	b.n	801b158 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801b1b8:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801b1bc:	4658      	mov	r0, fp
 801b1be:	f003 fd09 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b1c2:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801b1c6:	ebaa 0404 	sub.w	r4, sl, r4
 801b1ca:	fa1f f288 	uxth.w	r2, r8
 801b1ce:	b2a4      	uxth	r4, r4
 801b1d0:	fa0f fa84 	sxth.w	sl, r4
 801b1d4:	4420      	add	r0, r4
 801b1d6:	f1ba 0f00 	cmp.w	sl, #0
 801b1da:	b280      	uxth	r0, r0
 801b1dc:	bfb8      	it	lt
 801b1de:	18a3      	addlt	r3, r4, r2
 801b1e0:	4402      	add	r2, r0
 801b1e2:	bfac      	ite	ge
 801b1e4:	4643      	movge	r3, r8
 801b1e6:	f04f 0a00 	movlt.w	sl, #0
 801b1ea:	b292      	uxth	r2, r2
 801b1ec:	bfb8      	it	lt
 801b1ee:	b21b      	sxthlt	r3, r3
 801b1f0:	b214      	sxth	r4, r2
 801b1f2:	bfb8      	it	lt
 801b1f4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b1f8:	428c      	cmp	r4, r1
 801b1fa:	bfc4      	itt	gt
 801b1fc:	eba2 0801 	subgt.w	r8, r2, r1
 801b200:	fa0f f888 	sxthgt.w	r8, r8
 801b204:	4543      	cmp	r3, r8
 801b206:	bfbc      	itt	lt
 801b208:	fa0f fa80 	sxthlt.w	sl, r0
 801b20c:	4643      	movlt	r3, r8
 801b20e:	e7aa      	b.n	801b166 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801b210 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801b210:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b218:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801b21a:	4604      	mov	r4, r0
 801b21c:	429a      	cmp	r2, r3
 801b21e:	d018      	beq.n	801b252 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 801b220:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801b224:	4628      	mov	r0, r5
 801b226:	f7f5 f92d 	bl	8010484 <_ZNK8touchgfx9TypedText7getFontEv>
 801b22a:	6803      	ldr	r3, [r0, #0]
 801b22c:	4606      	mov	r6, r0
 801b22e:	4628      	mov	r0, r5
 801b230:	69df      	ldr	r7, [r3, #28]
 801b232:	f7f5 f943 	bl	80104bc <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801b236:	4680      	mov	r8, r0
 801b238:	4628      	mov	r0, r5
 801b23a:	f7f7 fa3b 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 801b23e:	2300      	movs	r3, #0
 801b240:	4602      	mov	r2, r0
 801b242:	4641      	mov	r1, r8
 801b244:	9300      	str	r3, [sp, #0]
 801b246:	4630      	mov	r0, r6
 801b248:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b24a:	47b8      	blx	r7
 801b24c:	b002      	add	sp, #8
 801b24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b252:	2000      	movs	r0, #0
 801b254:	e7fa      	b.n	801b24c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801b256 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801b256:	b570      	push	{r4, r5, r6, lr}
 801b258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b25c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801b25e:	4604      	mov	r4, r0
 801b260:	429a      	cmp	r2, r3
 801b262:	d00c      	beq.n	801b27e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801b264:	f850 3b26 	ldr.w	r3, [r0], #38
 801b268:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801b26a:	f7f7 fa23 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 801b26e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801b270:	4601      	mov	r1, r0
 801b272:	46ac      	mov	ip, r5
 801b274:	4620      	mov	r0, r4
 801b276:	2300      	movs	r3, #0
 801b278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b27c:	4760      	bx	ip
 801b27e:	2000      	movs	r0, #0
 801b280:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b284 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801b284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b28c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801b28e:	b08d      	sub	sp, #52	; 0x34
 801b290:	4604      	mov	r4, r0
 801b292:	429e      	cmp	r6, r3
 801b294:	460f      	mov	r7, r1
 801b296:	d048      	beq.n	801b32a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801b298:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801b29c:	4628      	mov	r0, r5
 801b29e:	f7f5 f8f1 	bl	8010484 <_ZNK8touchgfx9TypedText7getFontEv>
 801b2a2:	4680      	mov	r8, r0
 801b2a4:	2800      	cmp	r0, #0
 801b2a6:	d040      	beq.n	801b32a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801b2a8:	4628      	mov	r0, r5
 801b2aa:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801b2ae:	f7f5 f91d 	bl	80104ec <_ZNK8touchgfx9TypedText11assertValidEv>
 801b2b2:	4b1f      	ldr	r3, [pc, #124]	; (801b330 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801b2b4:	4628      	mov	r0, r5
 801b2b6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801b2c0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801b2c4:	785e      	ldrb	r6, [r3, #1]
 801b2c6:	f7f5 f8f9 	bl	80104bc <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801b2ca:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801b2ce:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801b2d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b2d4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801b2d8:	f88d 6020 	strb.w	r6, [sp, #32]
 801b2dc:	ae05      	add	r6, sp, #20
 801b2de:	9309      	str	r3, [sp, #36]	; 0x24
 801b2e0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801b2e4:	f8cd 801c 	str.w	r8, [sp, #28]
 801b2e8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801b2ec:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801b2f0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801b2f4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801b2f8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801b2fc:	f7f5 fd68 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801b300:	4621      	mov	r1, r4
 801b302:	4680      	mov	r8, r0
 801b304:	4630      	mov	r0, r6
 801b306:	f001 fe24 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b30a:	4628      	mov	r0, r5
 801b30c:	f7f7 f9d2 	bl	80126b4 <_ZNK8touchgfx9TypedText7getTextEv>
 801b310:	2300      	movs	r3, #0
 801b312:	9303      	str	r3, [sp, #12]
 801b314:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b316:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801b31a:	ab07      	add	r3, sp, #28
 801b31c:	4640      	mov	r0, r8
 801b31e:	9300      	str	r3, [sp, #0]
 801b320:	463b      	mov	r3, r7
 801b322:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b326:	f000 fb35 	bl	801b994 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b32a:	b00d      	add	sp, #52	; 0x34
 801b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b330:	2000bf80 	.word	0x2000bf80

0801b334 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 801b334:	2300      	movs	r3, #0
 801b336:	8083      	strh	r3, [r0, #4]
 801b338:	80c3      	strh	r3, [r0, #6]
 801b33a:	8003      	strh	r3, [r0, #0]
 801b33c:	8043      	strh	r3, [r0, #2]
 801b33e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b342:	2bff      	cmp	r3, #255	; 0xff
 801b344:	bf01      	itttt	eq
 801b346:	890b      	ldrheq	r3, [r1, #8]
 801b348:	8083      	strheq	r3, [r0, #4]
 801b34a:	894b      	ldrheq	r3, [r1, #10]
 801b34c:	80c3      	strheq	r3, [r0, #6]
 801b34e:	4770      	bx	lr

0801b350 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801b350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b354:	4604      	mov	r4, r0
 801b356:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801b35a:	460e      	mov	r6, r1
 801b35c:	b08c      	sub	sp, #48	; 0x30
 801b35e:	8962      	ldrh	r2, [r4, #10]
 801b360:	b218      	sxth	r0, r3
 801b362:	8921      	ldrh	r1, [r4, #8]
 801b364:	005b      	lsls	r3, r3, #1
 801b366:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b36a:	1ac9      	subs	r1, r1, r3
 801b36c:	1ad3      	subs	r3, r2, r3
 801b36e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b372:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b376:	6830      	ldr	r0, [r6, #0]
 801b378:	6871      	ldr	r1, [r6, #4]
 801b37a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b37e:	466b      	mov	r3, sp
 801b380:	c303      	stmia	r3!, {r0, r1}
 801b382:	a904      	add	r1, sp, #16
 801b384:	4668      	mov	r0, sp
 801b386:	f7fd fe75 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801b38a:	6823      	ldr	r3, [r4, #0]
 801b38c:	4669      	mov	r1, sp
 801b38e:	4620      	mov	r0, r4
 801b390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b392:	4798      	blx	r3
 801b394:	f7f5 fd1c 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801b398:	6803      	ldr	r3, [r0, #0]
 801b39a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b39c:	4669      	mov	r1, sp
 801b39e:	69dd      	ldr	r5, [r3, #28]
 801b3a0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b3a4:	47a8      	blx	r5
 801b3a6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801b3aa:	2a00      	cmp	r2, #0
 801b3ac:	d04b      	beq.n	801b446 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 801b3ae:	b211      	sxth	r1, r2
 801b3b0:	8963      	ldrh	r3, [r4, #10]
 801b3b2:	b292      	uxth	r2, r2
 801b3b4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801b3b8:	2500      	movs	r5, #0
 801b3ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b3be:	1a9f      	subs	r7, r3, r2
 801b3c0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801b3c4:	1a82      	subs	r2, r0, r2
 801b3c6:	9504      	str	r5, [sp, #16]
 801b3c8:	b21b      	sxth	r3, r3
 801b3ca:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b3ce:	af02      	add	r7, sp, #8
 801b3d0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b3d4:	f8ad 5018 	strh.w	r5, [sp, #24]
 801b3d8:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b3dc:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b3e0:	f8ad 5020 	strh.w	r5, [sp, #32]
 801b3e4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801b3e8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801b3ec:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b3f0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b3f4:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801b3f8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801b3fc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b400:	ab04      	add	r3, sp, #16
 801b402:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b406:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b40a:	e887 0003 	stmia.w	r7, {r0, r1}
 801b40e:	4631      	mov	r1, r6
 801b410:	4638      	mov	r0, r7
 801b412:	f7fd fe2f 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801b416:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b41a:	b18b      	cbz	r3, 801b440 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801b41c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b420:	b173      	cbz	r3, 801b440 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801b422:	6823      	ldr	r3, [r4, #0]
 801b424:	4639      	mov	r1, r7
 801b426:	4620      	mov	r0, r4
 801b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b42a:	4798      	blx	r3
 801b42c:	f7f5 fcd0 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801b430:	6803      	ldr	r3, [r0, #0]
 801b432:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b434:	4639      	mov	r1, r7
 801b436:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801b43a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b43e:	47c0      	blx	r8
 801b440:	3501      	adds	r5, #1
 801b442:	2d04      	cmp	r5, #4
 801b444:	d1dc      	bne.n	801b400 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 801b446:	b00c      	add	sp, #48	; 0x30
 801b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b44c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801b44c:	b570      	push	{r4, r5, r6, lr}
 801b44e:	4605      	mov	r5, r0
 801b450:	880b      	ldrh	r3, [r1, #0]
 801b452:	4604      	mov	r4, r0
 801b454:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b456:	f855 3b26 	ldr.w	r3, [r5], #38
 801b45a:	4628      	mov	r0, r5
 801b45c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801b45e:	f003 fb7f 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b462:	b201      	sxth	r1, r0
 801b464:	4620      	mov	r0, r4
 801b466:	47b0      	blx	r6
 801b468:	6823      	ldr	r3, [r4, #0]
 801b46a:	4628      	mov	r0, r5
 801b46c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801b46e:	f003 fbb1 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b472:	b201      	sxth	r1, r0
 801b474:	4620      	mov	r0, r4
 801b476:	47b0      	blx	r6
 801b478:	4628      	mov	r0, r5
 801b47a:	f003 fc3f 	bl	801ecfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b47e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801b482:	bd70      	pop	{r4, r5, r6, pc}

0801b484 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801b484:	b510      	push	{r4, lr}
 801b486:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b48a:	4604      	mov	r4, r0
 801b48c:	2bff      	cmp	r3, #255	; 0xff
 801b48e:	d006      	beq.n	801b49e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801b490:	2300      	movs	r3, #0
 801b492:	8003      	strh	r3, [r0, #0]
 801b494:	8043      	strh	r3, [r0, #2]
 801b496:	8083      	strh	r3, [r0, #4]
 801b498:	80c3      	strh	r3, [r0, #6]
 801b49a:	4620      	mov	r0, r4
 801b49c:	bd10      	pop	{r4, pc}
 801b49e:	3126      	adds	r1, #38	; 0x26
 801b4a0:	f003 fbd2 	bl	801ec48 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b4a4:	e7f9      	b.n	801b49a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801b4a8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801b4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4ac:	4604      	mov	r4, r0
 801b4ae:	b088      	sub	sp, #32
 801b4b0:	2500      	movs	r5, #0
 801b4b2:	460f      	mov	r7, r1
 801b4b4:	f854 3b26 	ldr.w	r3, [r4], #38
 801b4b8:	a904      	add	r1, sp, #16
 801b4ba:	4606      	mov	r6, r0
 801b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b4c2:	4798      	blx	r3
 801b4c4:	4620      	mov	r0, r4
 801b4c6:	f003 fb4b 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b4ca:	4680      	mov	r8, r0
 801b4cc:	4620      	mov	r0, r4
 801b4ce:	f003 fb81 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b4d2:	9506      	str	r5, [sp, #24]
 801b4d4:	ad06      	add	r5, sp, #24
 801b4d6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b4da:	4639      	mov	r1, r7
 801b4dc:	f8ad 801c 	strh.w	r8, [sp, #28]
 801b4e0:	4628      	mov	r0, r5
 801b4e2:	f7fd fdc7 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801b4e6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b4ea:	b1c3      	cbz	r3, 801b51e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801b4ec:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b4f0:	b1ab      	cbz	r3, 801b51e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801b4f2:	4b0c      	ldr	r3, [pc, #48]	; (801b524 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b4fa:	b10a      	cbz	r2, 801b500 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801b4fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b4fe:	b900      	cbnz	r0, 801b502 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801b500:	6898      	ldr	r0, [r3, #8]
 801b502:	2701      	movs	r7, #1
 801b504:	6801      	ldr	r1, [r0, #0]
 801b506:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b50a:	9702      	str	r7, [sp, #8]
 801b50c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801b510:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b514:	e9cd 5600 	strd	r5, r6, [sp]
 801b518:	68cd      	ldr	r5, [r1, #12]
 801b51a:	4621      	mov	r1, r4
 801b51c:	47a8      	blx	r5
 801b51e:	b008      	add	sp, #32
 801b520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b524:	2000bef0 	.word	0x2000bef0

0801b528 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801b528:	4b02      	ldr	r3, [pc, #8]	; (801b534 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801b52a:	6018      	str	r0, [r3, #0]
 801b52c:	4b02      	ldr	r3, [pc, #8]	; (801b538 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801b52e:	6019      	str	r1, [r3, #0]
 801b530:	4770      	bx	lr
 801b532:	bf00      	nop
 801b534:	2000bef8 	.word	0x2000bef8
 801b538:	2000bf0c 	.word	0x2000bf0c

0801b53c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801b53c:	b538      	push	{r3, r4, r5, lr}
 801b53e:	4c2b      	ldr	r4, [pc, #172]	; (801b5ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801b540:	4b2b      	ldr	r3, [pc, #172]	; (801b5f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801b542:	6821      	ldr	r1, [r4, #0]
 801b544:	681a      	ldr	r2, [r3, #0]
 801b546:	4281      	cmp	r1, r0
 801b548:	4d2a      	ldr	r5, [pc, #168]	; (801b5f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801b54a:	492b      	ldr	r1, [pc, #172]	; (801b5f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801b54c:	d108      	bne.n	801b560 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801b54e:	682b      	ldr	r3, [r5, #0]
 801b550:	4293      	cmp	r3, r2
 801b552:	d105      	bne.n	801b560 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801b554:	6808      	ldr	r0, [r1, #0]
 801b556:	280f      	cmp	r0, #15
 801b558:	bf94      	ite	ls
 801b55a:	2000      	movls	r0, #0
 801b55c:	2001      	movhi	r0, #1
 801b55e:	bd38      	pop	{r3, r4, r5, pc}
 801b560:	4b26      	ldr	r3, [pc, #152]	; (801b5fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801b562:	6020      	str	r0, [r4, #0]
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	602a      	str	r2, [r5, #0]
 801b568:	4298      	cmp	r0, r3
 801b56a:	d905      	bls.n	801b578 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801b56c:	4b24      	ldr	r3, [pc, #144]	; (801b600 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b56e:	2137      	movs	r1, #55	; 0x37
 801b570:	4a24      	ldr	r2, [pc, #144]	; (801b604 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b572:	4825      	ldr	r0, [pc, #148]	; (801b608 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801b574:	f00d f846 	bl	8028604 <__assert_func>
 801b578:	f010 0403 	ands.w	r4, r0, #3
 801b57c:	bf1f      	itttt	ne
 801b57e:	f1c4 0504 	rsbne	r5, r4, #4
 801b582:	3b04      	subne	r3, #4
 801b584:	1952      	addne	r2, r2, r5
 801b586:	191b      	addne	r3, r3, r4
 801b588:	4d20      	ldr	r5, [pc, #128]	; (801b60c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801b58a:	4402      	add	r2, r0
 801b58c:	1a1b      	subs	r3, r3, r0
 801b58e:	3001      	adds	r0, #1
 801b590:	602a      	str	r2, [r5, #0]
 801b592:	f020 0401 	bic.w	r4, r0, #1
 801b596:	42a3      	cmp	r3, r4
 801b598:	d203      	bcs.n	801b5a2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801b59a:	4b19      	ldr	r3, [pc, #100]	; (801b600 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b59c:	214a      	movs	r1, #74	; 0x4a
 801b59e:	4a19      	ldr	r2, [pc, #100]	; (801b604 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b5a0:	e7e7      	b.n	801b572 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b5a2:	f010 0002 	ands.w	r0, r0, #2
 801b5a6:	bf1f      	itttt	ne
 801b5a8:	f1c0 0504 	rsbne	r5, r0, #4
 801b5ac:	1952      	addne	r2, r2, r5
 801b5ae:	1f05      	subne	r5, r0, #4
 801b5b0:	195b      	addne	r3, r3, r5
 801b5b2:	4422      	add	r2, r4
 801b5b4:	4d16      	ldr	r5, [pc, #88]	; (801b610 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801b5b6:	1b1b      	subs	r3, r3, r4
 801b5b8:	602a      	str	r2, [r5, #0]
 801b5ba:	429c      	cmp	r4, r3
 801b5bc:	d903      	bls.n	801b5c6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801b5be:	4b10      	ldr	r3, [pc, #64]	; (801b600 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b5c0:	215d      	movs	r1, #93	; 0x5d
 801b5c2:	4a10      	ldr	r2, [pc, #64]	; (801b604 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b5c4:	e7d5      	b.n	801b572 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b5c6:	b120      	cbz	r0, 801b5d2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801b5c8:	f1c0 0504 	rsb	r5, r0, #4
 801b5cc:	3804      	subs	r0, #4
 801b5ce:	442a      	add	r2, r5
 801b5d0:	4403      	add	r3, r0
 801b5d2:	1b1b      	subs	r3, r3, r4
 801b5d4:	4422      	add	r2, r4
 801b5d6:	480f      	ldr	r0, [pc, #60]	; (801b614 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801b5d8:	2b0f      	cmp	r3, #15
 801b5da:	600b      	str	r3, [r1, #0]
 801b5dc:	6002      	str	r2, [r0, #0]
 801b5de:	d803      	bhi.n	801b5e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801b5e0:	4b0d      	ldr	r3, [pc, #52]	; (801b618 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801b5e2:	2170      	movs	r1, #112	; 0x70
 801b5e4:	4a07      	ldr	r2, [pc, #28]	; (801b604 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b5e6:	e7c4      	b.n	801b572 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b5e8:	2001      	movs	r0, #1
 801b5ea:	e7b8      	b.n	801b55e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801b5ec:	2000bf00 	.word	0x2000bf00
 801b5f0:	2000bef8 	.word	0x2000bef8
 801b5f4:	2000bf08 	.word	0x2000bf08
 801b5f8:	2000bf10 	.word	0x2000bf10
 801b5fc:	2000bf0c 	.word	0x2000bf0c
 801b600:	0802c6a4 	.word	0x0802c6a4
 801b604:	0802c76c 	.word	0x0802c76c
 801b608:	0802c6dd 	.word	0x0802c6dd
 801b60c:	2000bf14 	.word	0x2000bf14
 801b610:	2000bf04 	.word	0x2000bf04
 801b614:	2000befc 	.word	0x2000befc
 801b618:	0802c727 	.word	0x0802c727

0801b61c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801b61c:	4b04      	ldr	r3, [pc, #16]	; (801b630 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801b61e:	6818      	ldr	r0, [r3, #0]
 801b620:	b120      	cbz	r0, 801b62c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801b622:	4b04      	ldr	r3, [pc, #16]	; (801b634 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801b624:	6818      	ldr	r0, [r3, #0]
 801b626:	3000      	adds	r0, #0
 801b628:	bf18      	it	ne
 801b62a:	2001      	movne	r0, #1
 801b62c:	4770      	bx	lr
 801b62e:	bf00      	nop
 801b630:	2000bef8 	.word	0x2000bef8
 801b634:	2000bf0c 	.word	0x2000bf0c

0801b638 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801b638:	4b01      	ldr	r3, [pc, #4]	; (801b640 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801b63a:	6818      	ldr	r0, [r3, #0]
 801b63c:	4770      	bx	lr
 801b63e:	bf00      	nop
 801b640:	2000bf00 	.word	0x2000bf00

0801b644 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801b644:	4b01      	ldr	r3, [pc, #4]	; (801b64c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801b646:	6818      	ldr	r0, [r3, #0]
 801b648:	4770      	bx	lr
 801b64a:	bf00      	nop
 801b64c:	2000bf08 	.word	0x2000bf08

0801b650 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801b650:	4b01      	ldr	r3, [pc, #4]	; (801b658 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801b652:	6818      	ldr	r0, [r3, #0]
 801b654:	4770      	bx	lr
 801b656:	bf00      	nop
 801b658:	2000bf14 	.word	0x2000bf14

0801b65c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801b65c:	4b01      	ldr	r3, [pc, #4]	; (801b664 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801b65e:	6818      	ldr	r0, [r3, #0]
 801b660:	4770      	bx	lr
 801b662:	bf00      	nop
 801b664:	2000bf04 	.word	0x2000bf04

0801b668 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801b668:	4b01      	ldr	r3, [pc, #4]	; (801b670 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801b66a:	6818      	ldr	r0, [r3, #0]
 801b66c:	4770      	bx	lr
 801b66e:	bf00      	nop
 801b670:	2000befc 	.word	0x2000befc

0801b674 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801b674:	4b01      	ldr	r3, [pc, #4]	; (801b67c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801b676:	6818      	ldr	r0, [r3, #0]
 801b678:	4770      	bx	lr
 801b67a:	bf00      	nop
 801b67c:	2000bf10 	.word	0x2000bf10

0801b680 <_ZN8touchgfx3LCD4initEv>:
 801b680:	4770      	bx	lr

0801b682 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b682:	2000      	movs	r0, #0
 801b684:	4770      	bx	lr

0801b686 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b686:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b68a:	b091      	sub	sp, #68	; 0x44
 801b68c:	4699      	mov	r9, r3
 801b68e:	4617      	mov	r7, r2
 801b690:	2500      	movs	r5, #0
 801b692:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801b696:	4680      	mov	r8, r0
 801b698:	a80e      	add	r0, sp, #56	; 0x38
 801b69a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801b69c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801b6a0:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801b6a4:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801b6a8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b6ac:	910d      	str	r1, [sp, #52]	; 0x34
 801b6ae:	950e      	str	r5, [sp, #56]	; 0x38
 801b6b0:	f000 fe3a 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b6b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b6b6:	f8d9 6000 	ldr.w	r6, [r9]
 801b6ba:	6818      	ldr	r0, [r3, #0]
 801b6bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b6be:	f9b4 b000 	ldrsh.w	fp, [r4]
 801b6c2:	1b80      	subs	r0, r0, r6
 801b6c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b6c8:	eb02 0c06 	add.w	ip, r2, r6
 801b6cc:	ebab 0e0c 	sub.w	lr, fp, ip
 801b6d0:	4570      	cmp	r0, lr
 801b6d2:	f340 80bc 	ble.w	801b84e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b6d6:	88a1      	ldrh	r1, [r4, #4]
 801b6d8:	4459      	add	r1, fp
 801b6da:	b209      	sxth	r1, r1
 801b6dc:	458c      	cmp	ip, r1
 801b6de:	f300 80b6 	bgt.w	801b84e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b6e2:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801b6e6:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801b6ea:	4283      	cmp	r3, r0
 801b6ec:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801b6f0:	edd9 6a07 	vldr	s13, [r9, #28]
 801b6f4:	bfa8      	it	ge
 801b6f6:	4603      	movge	r3, r0
 801b6f8:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801b6fc:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801b700:	45e3      	cmp	fp, ip
 801b702:	ee07 3a90 	vmov	s15, r3
 801b706:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b70a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b70e:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b712:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b716:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b71a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b71e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b722:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b726:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b72a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b72e:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b732:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b736:	f340 808d 	ble.w	801b854 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801b73a:	fb9e f5f3 	sdiv	r5, lr, r3
 801b73e:	ee07 5a10 	vmov	s14, r5
 801b742:	2d00      	cmp	r5, #0
 801b744:	fb03 e415 	mls	r4, r3, r5, lr
 801b748:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b74c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b750:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b754:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b758:	dd12      	ble.n	801b780 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801b75a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b75e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b762:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b766:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b76e:	bf14      	ite	ne
 801b770:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b774:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b778:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b77c:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b780:	fb05 f703 	mul.w	r7, r5, r3
 801b784:	1bc0      	subs	r0, r0, r7
 801b786:	443e      	add	r6, r7
 801b788:	1997      	adds	r7, r2, r6
 801b78a:	4407      	add	r7, r0
 801b78c:	42b9      	cmp	r1, r7
 801b78e:	bfbc      	itt	lt
 801b790:	1a88      	sublt	r0, r1, r2
 801b792:	1b80      	sublt	r0, r0, r6
 801b794:	2800      	cmp	r0, #0
 801b796:	dd5a      	ble.n	801b84e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b798:	fb90 f1f3 	sdiv	r1, r0, r3
 801b79c:	fb03 0211 	mls	r2, r3, r1, r0
 801b7a0:	b90a      	cbnz	r2, 801b7a6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801b7a2:	3901      	subs	r1, #1
 801b7a4:	461a      	mov	r2, r3
 801b7a6:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b7aa:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801b7ae:	44a4      	add	ip, r4
 801b7b0:	2900      	cmp	r1, #0
 801b7b2:	bfcc      	ite	gt
 801b7b4:	469e      	movgt	lr, r3
 801b7b6:	4696      	movle	lr, r2
 801b7b8:	fb03 c505 	mla	r5, r3, r5, ip
 801b7bc:	eef0 6a42 	vmov.f32	s13, s4
 801b7c0:	eeb0 7a61 	vmov.f32	s14, s3
 801b7c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b7c8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b7cc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b7d0:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b7d4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b7d8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b7dc:	ee17 0a90 	vmov	r0, s15
 801b7e0:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b7e4:	fb90 f6f3 	sdiv	r6, r0, r3
 801b7e8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b7ec:	ee17 0a90 	vmov	r0, s15
 801b7f0:	fb90 f7f3 	sdiv	r7, r0, r3
 801b7f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b7f8:	f8d0 8000 	ldr.w	r8, [r0]
 801b7fc:	900c      	str	r0, [sp, #48]	; 0x30
 801b7fe:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b800:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b804:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801b808:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801b80c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801b810:	f8cd a020 	str.w	sl, [sp, #32]
 801b814:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801b818:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b81a:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801b81e:	9603      	str	r6, [sp, #12]
 801b820:	44ca      	add	sl, r9
 801b822:	9506      	str	r5, [sp, #24]
 801b824:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801b828:	ee16 0a90 	vmov	r0, s13
 801b82c:	f8cd a01c 	str.w	sl, [sp, #28]
 801b830:	fb07 0704 	mla	r7, r7, r4, r0
 801b834:	ee17 0a10 	vmov	r0, s14
 801b838:	fb06 0604 	mla	r6, r6, r4, r0
 801b83c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b83e:	9702      	str	r7, [sp, #8]
 801b840:	e9cd 3600 	strd	r3, r6, [sp]
 801b844:	ebae 0304 	sub.w	r3, lr, r4
 801b848:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b84c:	47a8      	blx	r5
 801b84e:	b011      	add	sp, #68	; 0x44
 801b850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b854:	462c      	mov	r4, r5
 801b856:	e797      	b.n	801b788 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801b858 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b858:	b570      	push	{r4, r5, r6, lr}
 801b85a:	4604      	mov	r4, r0
 801b85c:	2500      	movs	r5, #0
 801b85e:	9804      	ldr	r0, [sp, #16]
 801b860:	7223      	strb	r3, [r4, #8]
 801b862:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b866:	8025      	strh	r5, [r4, #0]
 801b868:	6061      	str	r1, [r4, #4]
 801b86a:	7263      	strb	r3, [r4, #9]
 801b86c:	60e0      	str	r0, [r4, #12]
 801b86e:	8222      	strh	r2, [r4, #16]
 801b870:	8265      	strh	r5, [r4, #18]
 801b872:	82a5      	strh	r5, [r4, #20]
 801b874:	82e5      	strh	r5, [r4, #22]
 801b876:	8325      	strh	r5, [r4, #24]
 801b878:	8365      	strh	r5, [r4, #26]
 801b87a:	83a5      	strh	r5, [r4, #28]
 801b87c:	77a5      	strb	r5, [r4, #30]
 801b87e:	6803      	ldr	r3, [r0, #0]
 801b880:	695b      	ldr	r3, [r3, #20]
 801b882:	4798      	blx	r3
 801b884:	4606      	mov	r6, r0
 801b886:	b1f8      	cbz	r0, 801b8c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b888:	68e0      	ldr	r0, [r4, #12]
 801b88a:	4631      	mov	r1, r6
 801b88c:	6803      	ldr	r3, [r0, #0]
 801b88e:	68db      	ldr	r3, [r3, #12]
 801b890:	4798      	blx	r3
 801b892:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801b896:	4605      	mov	r5, r0
 801b898:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b89c:	7a83      	ldrb	r3, [r0, #10]
 801b89e:	4313      	orrs	r3, r2
 801b8a0:	83a3      	strh	r3, [r4, #28]
 801b8a2:	7a63      	ldrb	r3, [r4, #9]
 801b8a4:	2b04      	cmp	r3, #4
 801b8a6:	d10f      	bne.n	801b8c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b8a8:	68e0      	ldr	r0, [r4, #12]
 801b8aa:	462a      	mov	r2, r5
 801b8ac:	4631      	mov	r1, r6
 801b8ae:	6803      	ldr	r3, [r0, #0]
 801b8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8b2:	4798      	blx	r3
 801b8b4:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801b8b8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b8bc:	7aab      	ldrb	r3, [r5, #10]
 801b8be:	4313      	orrs	r3, r2
 801b8c0:	4418      	add	r0, r3
 801b8c2:	8ba3      	ldrh	r3, [r4, #28]
 801b8c4:	4418      	add	r0, r3
 801b8c6:	83a0      	strh	r0, [r4, #28]
 801b8c8:	4620      	mov	r0, r4
 801b8ca:	bd70      	pop	{r4, r5, r6, pc}

0801b8cc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8d0:	2400      	movs	r4, #0
 801b8d2:	b085      	sub	sp, #20
 801b8d4:	4681      	mov	r9, r0
 801b8d6:	460f      	mov	r7, r1
 801b8d8:	4692      	mov	sl, r2
 801b8da:	469b      	mov	fp, r3
 801b8dc:	46a0      	mov	r8, r4
 801b8de:	4626      	mov	r6, r4
 801b8e0:	4554      	cmp	r4, sl
 801b8e2:	da21      	bge.n	801b928 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	463a      	mov	r2, r7
 801b8e8:	4659      	mov	r1, fp
 801b8ea:	4648      	mov	r0, r9
 801b8ec:	9303      	str	r3, [sp, #12]
 801b8ee:	ab03      	add	r3, sp, #12
 801b8f0:	f002 fb8c 	bl	801e00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b8f4:	4605      	mov	r5, r0
 801b8f6:	b1b8      	cbz	r0, 801b928 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b8f8:	280a      	cmp	r0, #10
 801b8fa:	d015      	beq.n	801b928 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b8fc:	9a03      	ldr	r2, [sp, #12]
 801b8fe:	b182      	cbz	r2, 801b922 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801b900:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801b904:	4641      	mov	r1, r8
 801b906:	7a93      	ldrb	r3, [r2, #10]
 801b908:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b90c:	8895      	ldrh	r5, [r2, #4]
 801b90e:	4303      	orrs	r3, r0
 801b910:	4638      	mov	r0, r7
 801b912:	9301      	str	r3, [sp, #4]
 801b914:	683b      	ldr	r3, [r7, #0]
 801b916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b918:	4798      	blx	r3
 801b91a:	9b01      	ldr	r3, [sp, #4]
 801b91c:	4418      	add	r0, r3
 801b91e:	4406      	add	r6, r0
 801b920:	b2b6      	uxth	r6, r6
 801b922:	3401      	adds	r4, #1
 801b924:	46a8      	mov	r8, r5
 801b926:	e7db      	b.n	801b8e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801b928:	4630      	mov	r0, r6
 801b92a:	b005      	add	sp, #20
 801b92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b930 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b930:	2a02      	cmp	r2, #2
 801b932:	b530      	push	{r4, r5, lr}
 801b934:	d011      	beq.n	801b95a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b936:	2a03      	cmp	r2, #3
 801b938:	d01c      	beq.n	801b974 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b93a:	2a01      	cmp	r2, #1
 801b93c:	d10c      	bne.n	801b958 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b93e:	888b      	ldrh	r3, [r1, #4]
 801b940:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b944:	8801      	ldrh	r1, [r0, #0]
 801b946:	1a9b      	subs	r3, r3, r2
 801b948:	8844      	ldrh	r4, [r0, #2]
 801b94a:	1a5b      	subs	r3, r3, r1
 801b94c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b950:	8004      	strh	r4, [r0, #0]
 801b952:	8043      	strh	r3, [r0, #2]
 801b954:	8081      	strh	r1, [r0, #4]
 801b956:	80c2      	strh	r2, [r0, #6]
 801b958:	bd30      	pop	{r4, r5, pc}
 801b95a:	88cb      	ldrh	r3, [r1, #6]
 801b95c:	88c2      	ldrh	r2, [r0, #6]
 801b95e:	1a9b      	subs	r3, r3, r2
 801b960:	8842      	ldrh	r2, [r0, #2]
 801b962:	1a9b      	subs	r3, r3, r2
 801b964:	888a      	ldrh	r2, [r1, #4]
 801b966:	8881      	ldrh	r1, [r0, #4]
 801b968:	8043      	strh	r3, [r0, #2]
 801b96a:	1a52      	subs	r2, r2, r1
 801b96c:	8801      	ldrh	r1, [r0, #0]
 801b96e:	1a52      	subs	r2, r2, r1
 801b970:	8002      	strh	r2, [r0, #0]
 801b972:	e7f1      	b.n	801b958 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b974:	88cb      	ldrh	r3, [r1, #6]
 801b976:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b97a:	8841      	ldrh	r1, [r0, #2]
 801b97c:	1a9b      	subs	r3, r3, r2
 801b97e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b982:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b986:	1a5b      	subs	r3, r3, r1
 801b988:	8045      	strh	r5, [r0, #2]
 801b98a:	8082      	strh	r2, [r0, #4]
 801b98c:	8003      	strh	r3, [r0, #0]
 801b98e:	80c4      	strh	r4, [r0, #6]
 801b990:	e7e2      	b.n	801b958 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801b994 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801b994:	b570      	push	{r4, r5, r6, lr}
 801b996:	b086      	sub	sp, #24
 801b998:	ac02      	add	r4, sp, #8
 801b99a:	e884 0006 	stmia.w	r4, {r1, r2}
 801b99e:	461a      	mov	r2, r3
 801b9a0:	ab0c      	add	r3, sp, #48	; 0x30
 801b9a2:	9305      	str	r3, [sp, #20]
 801b9a4:	4b0a      	ldr	r3, [pc, #40]	; (801b9d0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801b9a6:	685d      	ldr	r5, [r3, #4]
 801b9a8:	1069      	asrs	r1, r5, #1
 801b9aa:	07ed      	lsls	r5, r5, #31
 801b9ac:	eb00 0601 	add.w	r6, r0, r1
 801b9b0:	bf46      	itte	mi
 801b9b2:	681b      	ldrmi	r3, [r3, #0]
 801b9b4:	5841      	ldrmi	r1, [r0, r1]
 801b9b6:	681d      	ldrpl	r5, [r3, #0]
 801b9b8:	4630      	mov	r0, r6
 801b9ba:	bf48      	it	mi
 801b9bc:	58cd      	ldrmi	r5, [r1, r3]
 801b9be:	4621      	mov	r1, r4
 801b9c0:	9b05      	ldr	r3, [sp, #20]
 801b9c2:	9301      	str	r3, [sp, #4]
 801b9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b9c6:	9300      	str	r3, [sp, #0]
 801b9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9ca:	47a8      	blx	r5
 801b9cc:	b006      	add	sp, #24
 801b9ce:	bd70      	pop	{r4, r5, r6, pc}
 801b9d0:	20000030 	.word	0x20000030

0801b9d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9d8:	b09d      	sub	sp, #116	; 0x74
 801b9da:	9114      	str	r1, [sp, #80]	; 0x50
 801b9dc:	9315      	str	r3, [sp, #84]	; 0x54
 801b9de:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b9e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b9e2:	8809      	ldrh	r1, [r1, #0]
 801b9e4:	889b      	ldrh	r3, [r3, #4]
 801b9e6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801b9e8:	440b      	add	r3, r1
 801b9ea:	9210      	str	r2, [sp, #64]	; 0x40
 801b9ec:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801b9f0:	b21b      	sxth	r3, r3
 801b9f2:	900f      	str	r0, [sp, #60]	; 0x3c
 801b9f4:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801b9f8:	930e      	str	r3, [sp, #56]	; 0x38
 801b9fa:	6833      	ldr	r3, [r6, #0]
 801b9fc:	7a59      	ldrb	r1, [r3, #9]
 801b9fe:	7a1b      	ldrb	r3, [r3, #8]
 801ba00:	9113      	str	r1, [sp, #76]	; 0x4c
 801ba02:	9312      	str	r3, [sp, #72]	; 0x48
 801ba04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ba06:	f9b3 4000 	ldrsh.w	r4, [r3]
 801ba0a:	2a00      	cmp	r2, #0
 801ba0c:	d059      	beq.n	801bac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801ba0e:	7c33      	ldrb	r3, [r6, #16]
 801ba10:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ba12:	2b04      	cmp	r3, #4
 801ba14:	bf14      	ite	ne
 801ba16:	2301      	movne	r3, #1
 801ba18:	2302      	moveq	r3, #2
 801ba1a:	4413      	add	r3, r2
 801ba1c:	f04f 0800 	mov.w	r8, #0
 801ba20:	930d      	str	r3, [sp, #52]	; 0x34
 801ba22:	4645      	mov	r5, r8
 801ba24:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801ba28:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801ba2c:	4293      	cmp	r3, r2
 801ba2e:	da75      	bge.n	801bb1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801ba30:	2300      	movs	r3, #0
 801ba32:	992b      	ldr	r1, [sp, #172]	; 0xac
 801ba34:	6832      	ldr	r2, [r6, #0]
 801ba36:	931a      	str	r3, [sp, #104]	; 0x68
 801ba38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba3a:	428b      	cmp	r3, r1
 801ba3c:	db43      	blt.n	801bac6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801ba3e:	6813      	ldr	r3, [r2, #0]
 801ba40:	4610      	mov	r0, r2
 801ba42:	695b      	ldr	r3, [r3, #20]
 801ba44:	4798      	blx	r3
 801ba46:	4681      	mov	r9, r0
 801ba48:	6830      	ldr	r0, [r6, #0]
 801ba4a:	aa1b      	add	r2, sp, #108	; 0x6c
 801ba4c:	4649      	mov	r1, r9
 801ba4e:	6803      	ldr	r3, [r0, #0]
 801ba50:	689f      	ldr	r7, [r3, #8]
 801ba52:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801ba56:	47b8      	blx	r7
 801ba58:	901a      	str	r0, [sp, #104]	; 0x68
 801ba5a:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801ba5e:	45d1      	cmp	r9, sl
 801ba60:	d045      	beq.n	801baee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801ba62:	f242 070b 	movw	r7, #8203	; 0x200b
 801ba66:	45b9      	cmp	r9, r7
 801ba68:	d041      	beq.n	801baee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801ba6a:	f1b9 0f00 	cmp.w	r9, #0
 801ba6e:	f000 80ee 	beq.w	801bc4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801ba72:	f1b9 0f0a 	cmp.w	r9, #10
 801ba76:	d057      	beq.n	801bb28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801ba78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ba7a:	b383      	cbz	r3, 801bade <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801ba7c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801ba80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ba82:	2a00      	cmp	r2, #0
 801ba84:	f000 80d2 	beq.w	801bc2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801ba88:	f1bb 0f00 	cmp.w	fp, #0
 801ba8c:	d100      	bne.n	801ba90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801ba8e:	4444      	add	r4, r8
 801ba90:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801ba94:	f1bb 0f01 	cmp.w	fp, #1
 801ba98:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801ba9c:	f892 800a 	ldrb.w	r8, [r2, #10]
 801baa0:	ea48 0803 	orr.w	r8, r8, r3
 801baa4:	d128      	bne.n	801baf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801baa6:	eba4 0408 	sub.w	r4, r4, r8
 801baaa:	2d00      	cmp	r5, #0
 801baac:	d143      	bne.n	801bb36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801baae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bab0:	eb08 0304 	add.w	r3, r8, r4
 801bab4:	4413      	add	r3, r2
 801bab6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801bab8:	f9b2 2000 	ldrsh.w	r2, [r2]
 801babc:	4293      	cmp	r3, r2
 801babe:	da44      	bge.n	801bb4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801bac0:	e02b      	b.n	801bb1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801bac2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bac4:	e7aa      	b.n	801ba1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801bac6:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801baca:	4659      	mov	r1, fp
 801bacc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801bace:	9301      	str	r3, [sp, #4]
 801bad0:	ab1b      	add	r3, sp, #108	; 0x6c
 801bad2:	9300      	str	r3, [sp, #0]
 801bad4:	ab1a      	add	r3, sp, #104	; 0x68
 801bad6:	f002 facd 	bl	801e074 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801bada:	4681      	mov	r9, r0
 801badc:	e7bd      	b.n	801ba5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801bade:	6830      	ldr	r0, [r6, #0]
 801bae0:	6803      	ldr	r3, [r0, #0]
 801bae2:	691b      	ldr	r3, [r3, #16]
 801bae4:	4798      	blx	r3
 801bae6:	4550      	cmp	r0, sl
 801bae8:	d001      	beq.n	801baee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801baea:	42b8      	cmp	r0, r7
 801baec:	d1c8      	bne.n	801ba80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801baee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801baf0:	464d      	mov	r5, r9
 801baf2:	3301      	adds	r3, #1
 801baf4:	930c      	str	r3, [sp, #48]	; 0x30
 801baf6:	e797      	b.n	801ba28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801baf8:	2d00      	cmp	r5, #0
 801bafa:	f000 80aa 	beq.w	801bc52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801bafe:	f1bb 0f00 	cmp.w	fp, #0
 801bb02:	d118      	bne.n	801bb36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801bb04:	6830      	ldr	r0, [r6, #0]
 801bb06:	4629      	mov	r1, r5
 801bb08:	6803      	ldr	r3, [r0, #0]
 801bb0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb0c:	4798      	blx	r3
 801bb0e:	4404      	add	r4, r0
 801bb10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bb12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb14:	1ae3      	subs	r3, r4, r3
 801bb16:	4293      	cmp	r3, r2
 801bb18:	dd17      	ble.n	801bb4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801bb1a:	464d      	mov	r5, r9
 801bb1c:	2d00      	cmp	r5, #0
 801bb1e:	f000 8096 	beq.w	801bc4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801bb22:	2d0a      	cmp	r5, #10
 801bb24:	f040 8084 	bne.w	801bc30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801bb28:	250a      	movs	r5, #10
 801bb2a:	fab5 f085 	clz	r0, r5
 801bb2e:	0940      	lsrs	r0, r0, #5
 801bb30:	b01d      	add	sp, #116	; 0x74
 801bb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb36:	6830      	ldr	r0, [r6, #0]
 801bb38:	4629      	mov	r1, r5
 801bb3a:	6803      	ldr	r3, [r0, #0]
 801bb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb3e:	4798      	blx	r3
 801bb40:	f1bb 0f01 	cmp.w	fp, #1
 801bb44:	eba4 0400 	sub.w	r4, r4, r0
 801bb48:	d0b1      	beq.n	801baae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801bb4a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801bb4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bb4e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801bb52:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bb56:	7b43      	ldrb	r3, [r0, #13]
 801bb58:	4421      	add	r1, r4
 801bb5a:	015b      	lsls	r3, r3, #5
 801bb5c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb60:	7983      	ldrb	r3, [r0, #6]
 801bb62:	4313      	orrs	r3, r2
 801bb64:	440b      	add	r3, r1
 801bb66:	42ab      	cmp	r3, r5
 801bb68:	dbc1      	blt.n	801baee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bb6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb6c:	4299      	cmp	r1, r3
 801bb6e:	dabe      	bge.n	801baee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bb70:	6830      	ldr	r0, [r6, #0]
 801bb72:	42a5      	cmp	r5, r4
 801bb74:	6803      	ldr	r3, [r0, #0]
 801bb76:	bfcc      	ite	gt
 801bb78:	1b2d      	subgt	r5, r5, r4
 801bb7a:	2500      	movle	r5, #0
 801bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb7e:	bfc8      	it	gt
 801bb80:	b2ad      	uxthgt	r5, r5
 801bb82:	4798      	blx	r3
 801bb84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801bb86:	4935      	ldr	r1, [pc, #212]	; (801bc5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801bb88:	7b5a      	ldrb	r2, [r3, #13]
 801bb8a:	f893 e008 	ldrb.w	lr, [r3, #8]
 801bb8e:	f012 0f40 	tst.w	r2, #64	; 0x40
 801bb92:	bf18      	it	ne
 801bb94:	468c      	movne	ip, r1
 801bb96:	9915      	ldr	r1, [sp, #84]	; 0x54
 801bb98:	bf08      	it	eq
 801bb9a:	f04f 0c00 	moveq.w	ip, #0
 801bb9e:	4408      	add	r0, r1
 801bba0:	00d1      	lsls	r1, r2, #3
 801bba2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bba6:	ea41 070e 	orr.w	r7, r1, lr
 801bbaa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801bbac:	ea4c 0707 	orr.w	r7, ip, r7
 801bbb0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801bbb4:	1bc7      	subs	r7, r0, r7
 801bbb6:	b2bf      	uxth	r7, r7
 801bbb8:	fa0f fa87 	sxth.w	sl, r7
 801bbbc:	4551      	cmp	r1, sl
 801bbbe:	dd33      	ble.n	801bc28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801bbc0:	0112      	lsls	r2, r2, #4
 801bbc2:	79d8      	ldrb	r0, [r3, #7]
 801bbc4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bbc8:	4302      	orrs	r2, r0
 801bbca:	4492      	add	sl, r2
 801bbcc:	4551      	cmp	r1, sl
 801bbce:	dc8e      	bgt.n	801baee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bbd0:	1bcf      	subs	r7, r1, r7
 801bbd2:	468a      	mov	sl, r1
 801bbd4:	b2bf      	uxth	r7, r7
 801bbd6:	9317      	str	r3, [sp, #92]	; 0x5c
 801bbd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bbda:	6830      	ldr	r0, [r6, #0]
 801bbdc:	681a      	ldr	r2, [r3, #0]
 801bbde:	6801      	ldr	r1, [r0, #0]
 801bbe0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801bbe2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801bbe4:	9311      	str	r3, [sp, #68]	; 0x44
 801bbe6:	9216      	str	r2, [sp, #88]	; 0x58
 801bbe8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801bbea:	4788      	blx	r1
 801bbec:	79b1      	ldrb	r1, [r6, #6]
 801bbee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bbf0:	910b      	str	r1, [sp, #44]	; 0x2c
 801bbf2:	7bb1      	ldrb	r1, [r6, #14]
 801bbf4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bbf6:	910a      	str	r1, [sp, #40]	; 0x28
 801bbf8:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801bbfc:	9109      	str	r1, [sp, #36]	; 0x24
 801bbfe:	68b1      	ldr	r1, [r6, #8]
 801bc00:	9305      	str	r3, [sp, #20]
 801bc02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bc04:	9206      	str	r2, [sp, #24]
 801bc06:	e9cd a501 	strd	sl, r5, [sp, #4]
 801bc0a:	4425      	add	r5, r4
 801bc0c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801bc10:	b22d      	sxth	r5, r5
 801bc12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc14:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801bc18:	9500      	str	r5, [sp, #0]
 801bc1a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801bc1c:	681a      	ldr	r2, [r3, #0]
 801bc1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bc20:	685b      	ldr	r3, [r3, #4]
 801bc22:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bc24:	47a8      	blx	r5
 801bc26:	e762      	b.n	801baee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bc28:	2700      	movs	r7, #0
 801bc2a:	e7d4      	b.n	801bbd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801bc2c:	4690      	mov	r8, r2
 801bc2e:	e75e      	b.n	801baee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bc30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bc32:	3401      	adds	r4, #1
 801bc34:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bc36:	429c      	cmp	r4, r3
 801bc38:	f6bf af77 	bge.w	801bb2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801bc3c:	4659      	mov	r1, fp
 801bc3e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801bc40:	f002 f9a4 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bc44:	4605      	mov	r5, r0
 801bc46:	b110      	cbz	r0, 801bc4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801bc48:	280a      	cmp	r0, #10
 801bc4a:	d1f2      	bne.n	801bc32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801bc4c:	e76c      	b.n	801bb28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801bc4e:	2500      	movs	r5, #0
 801bc50:	e76b      	b.n	801bb2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801bc52:	f1bb 0f00 	cmp.w	fp, #0
 801bc56:	f43f af5b 	beq.w	801bb10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801bc5a:	e776      	b.n	801bb4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801bc5c:	fffffe00 	.word	0xfffffe00

0801bc60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801bc60:	b530      	push	{r4, r5, lr}
 801bc62:	8a44      	ldrh	r4, [r0, #18]
 801bc64:	8ac5      	ldrh	r5, [r0, #22]
 801bc66:	82c3      	strh	r3, [r0, #22]
 801bc68:	442c      	add	r4, r5
 801bc6a:	1ae4      	subs	r4, r4, r3
 801bc6c:	8b03      	ldrh	r3, [r0, #24]
 801bc6e:	8244      	strh	r4, [r0, #18]
 801bc70:	8a84      	ldrh	r4, [r0, #20]
 801bc72:	4422      	add	r2, r4
 801bc74:	440c      	add	r4, r1
 801bc76:	1a59      	subs	r1, r3, r1
 801bc78:	8342      	strh	r2, [r0, #26]
 801bc7a:	8284      	strh	r4, [r0, #20]
 801bc7c:	8301      	strh	r1, [r0, #24]
 801bc7e:	bd30      	pop	{r4, r5, pc}

0801bc80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc84:	7a45      	ldrb	r5, [r0, #9]
 801bc86:	b085      	sub	sp, #20
 801bc88:	4604      	mov	r4, r0
 801bc8a:	4689      	mov	r9, r1
 801bc8c:	1eeb      	subs	r3, r5, #3
 801bc8e:	b2db      	uxtb	r3, r3
 801bc90:	b329      	cbz	r1, 801bcde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801bc92:	2b01      	cmp	r3, #1
 801bc94:	d921      	bls.n	801bcda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801bc96:	1e69      	subs	r1, r5, #1
 801bc98:	f1d1 0b00 	rsbs	fp, r1, #0
 801bc9c:	eb4b 0b01 	adc.w	fp, fp, r1
 801bca0:	1eaa      	subs	r2, r5, #2
 801bca2:	2500      	movs	r5, #0
 801bca4:	4253      	negs	r3, r2
 801bca6:	9500      	str	r5, [sp, #0]
 801bca8:	4153      	adcs	r3, r2
 801bcaa:	9301      	str	r3, [sp, #4]
 801bcac:	2600      	movs	r6, #0
 801bcae:	f242 080b 	movw	r8, #8203	; 0x200b
 801bcb2:	8266      	strh	r6, [r4, #18]
 801bcb4:	82a6      	strh	r6, [r4, #20]
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	68e2      	ldr	r2, [r4, #12]
 801bcba:	7a21      	ldrb	r1, [r4, #8]
 801bcbc:	9303      	str	r3, [sp, #12]
 801bcbe:	ab03      	add	r3, sp, #12
 801bcc0:	6860      	ldr	r0, [r4, #4]
 801bcc2:	8827      	ldrh	r7, [r4, #0]
 801bcc4:	f002 f9a2 	bl	801e00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bcc8:	8020      	strh	r0, [r4, #0]
 801bcca:	b9b0      	cbnz	r0, 801bcfa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801bccc:	8b22      	ldrh	r2, [r4, #24]
 801bcce:	2300      	movs	r3, #0
 801bcd0:	4611      	mov	r1, r2
 801bcd2:	4620      	mov	r0, r4
 801bcd4:	f7ff ffc4 	bl	801bc60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801bcd8:	e062      	b.n	801bda0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801bcda:	468b      	mov	fp, r1
 801bcdc:	e7e0      	b.n	801bca0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801bcde:	2b01      	cmp	r3, #1
 801bce0:	f105 35ff 	add.w	r5, r5, #4294967295
 801bce4:	9101      	str	r1, [sp, #4]
 801bce6:	468b      	mov	fp, r1
 801bce8:	bf8c      	ite	hi
 801bcea:	2300      	movhi	r3, #0
 801bcec:	2301      	movls	r3, #1
 801bcee:	2d01      	cmp	r5, #1
 801bcf0:	9300      	str	r3, [sp, #0]
 801bcf2:	bf8c      	ite	hi
 801bcf4:	2500      	movhi	r5, #0
 801bcf6:	2501      	movls	r5, #1
 801bcf8:	e7d8      	b.n	801bcac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801bcfa:	8ae3      	ldrh	r3, [r4, #22]
 801bcfc:	280a      	cmp	r0, #10
 801bcfe:	f103 0301 	add.w	r3, r3, #1
 801bd02:	82e3      	strh	r3, [r4, #22]
 801bd04:	d0e2      	beq.n	801bccc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801bd06:	9a03      	ldr	r2, [sp, #12]
 801bd08:	b972      	cbnz	r2, 801bd28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801bd0a:	4540      	cmp	r0, r8
 801bd0c:	d1d3      	bne.n	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd0e:	8823      	ldrh	r3, [r4, #0]
 801bd10:	8b21      	ldrh	r1, [r4, #24]
 801bd12:	2b20      	cmp	r3, #32
 801bd14:	d001      	beq.n	801bd1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801bd16:	4543      	cmp	r3, r8
 801bd18:	d11d      	bne.n	801bd56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801bd1a:	2f20      	cmp	r7, #32
 801bd1c:	d002      	beq.n	801bd24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801bd1e:	4547      	cmp	r7, r8
 801bd20:	bf18      	it	ne
 801bd22:	460e      	movne	r6, r1
 801bd24:	2001      	movs	r0, #1
 801bd26:	e017      	b.n	801bd58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801bd28:	4540      	cmp	r0, r8
 801bd2a:	d012      	beq.n	801bd52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801bd2c:	8893      	ldrh	r3, [r2, #4]
 801bd2e:	4639      	mov	r1, r7
 801bd30:	8023      	strh	r3, [r4, #0]
 801bd32:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801bd36:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801bd3a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801bd3e:	ea4a 0a00 	orr.w	sl, sl, r0
 801bd42:	68e0      	ldr	r0, [r4, #12]
 801bd44:	6803      	ldr	r3, [r0, #0]
 801bd46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd48:	4798      	blx	r3
 801bd4a:	eb0a 0200 	add.w	r2, sl, r0
 801bd4e:	b292      	uxth	r2, r2
 801bd50:	e7dd      	b.n	801bd0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801bd52:	2200      	movs	r2, #0
 801bd54:	e7db      	b.n	801bd0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801bd56:	2000      	movs	r0, #0
 801bd58:	440a      	add	r2, r1
 801bd5a:	8aa3      	ldrh	r3, [r4, #20]
 801bd5c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801bd60:	b292      	uxth	r2, r2
 801bd62:	8322      	strh	r2, [r4, #24]
 801bd64:	4413      	add	r3, r2
 801bd66:	f1b9 0f00 	cmp.w	r9, #0
 801bd6a:	d022      	beq.n	801bdb2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801bd6c:	f1bb 0f00 	cmp.w	fp, #0
 801bd70:	d102      	bne.n	801bd78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801bd72:	9901      	ldr	r1, [sp, #4]
 801bd74:	b149      	cbz	r1, 801bd8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801bd76:	b140      	cbz	r0, 801bd8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801bd78:	8ba1      	ldrh	r1, [r4, #28]
 801bd7a:	4419      	add	r1, r3
 801bd7c:	458c      	cmp	ip, r1
 801bd7e:	da12      	bge.n	801bda6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801bd80:	8a61      	ldrh	r1, [r4, #18]
 801bd82:	b181      	cbz	r1, 801bda6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801bd84:	4563      	cmp	r3, ip
 801bd86:	dd96      	ble.n	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd88:	e004      	b.n	801bd94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801bd8a:	4563      	cmp	r3, ip
 801bd8c:	dd93      	ble.n	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd8e:	8a63      	ldrh	r3, [r4, #18]
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d090      	beq.n	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd94:	2301      	movs	r3, #1
 801bd96:	8ba2      	ldrh	r2, [r4, #28]
 801bd98:	77a3      	strb	r3, [r4, #30]
 801bd9a:	8b63      	ldrh	r3, [r4, #26]
 801bd9c:	4413      	add	r3, r2
 801bd9e:	8363      	strh	r3, [r4, #26]
 801bda0:	b005      	add	sp, #20
 801bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bda6:	2300      	movs	r3, #0
 801bda8:	4611      	mov	r1, r2
 801bdaa:	4620      	mov	r0, r4
 801bdac:	f7ff ff58 	bl	801bc60 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801bdb0:	e781      	b.n	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bdb2:	4563      	cmp	r3, ip
 801bdb4:	dd16      	ble.n	801bde4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801bdb6:	9b00      	ldr	r3, [sp, #0]
 801bdb8:	b113      	cbz	r3, 801bdc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801bdba:	2301      	movs	r3, #1
 801bdbc:	460a      	mov	r2, r1
 801bdbe:	e787      	b.n	801bcd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801bdc0:	2d00      	cmp	r5, #0
 801bdc2:	f43f af78 	beq.w	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bdc6:	2800      	cmp	r0, #0
 801bdc8:	f47f af75 	bne.w	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bdcc:	2f20      	cmp	r7, #32
 801bdce:	d001      	beq.n	801bdd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801bdd0:	4547      	cmp	r7, r8
 801bdd2:	d102      	bne.n	801bdda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801bdd4:	2301      	movs	r3, #1
 801bdd6:	4632      	mov	r2, r6
 801bdd8:	e77b      	b.n	801bcd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801bdda:	8a63      	ldrh	r3, [r4, #18]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	f43f af6a 	beq.w	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bde2:	e7dd      	b.n	801bda0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801bde4:	2800      	cmp	r0, #0
 801bde6:	f47f af66 	bne.w	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bdea:	2f20      	cmp	r7, #32
 801bdec:	d002      	beq.n	801bdf4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801bdee:	4547      	cmp	r7, r8
 801bdf0:	f47f af61 	bne.w	801bcb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	4632      	mov	r2, r6
 801bdf8:	e7d7      	b.n	801bdaa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801bdfa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801bdfa:	b570      	push	{r4, r5, r6, lr}
 801bdfc:	4606      	mov	r6, r0
 801bdfe:	b08a      	sub	sp, #40	; 0x28
 801be00:	4615      	mov	r5, r2
 801be02:	b191      	cbz	r1, 801be2a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801be04:	2401      	movs	r4, #1
 801be06:	e9cd 3100 	strd	r3, r1, [sp]
 801be0a:	4613      	mov	r3, r2
 801be0c:	4601      	mov	r1, r0
 801be0e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801be12:	a802      	add	r0, sp, #8
 801be14:	f7ff fd20 	bl	801b858 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801be18:	2100      	movs	r1, #0
 801be1a:	a802      	add	r0, sp, #8
 801be1c:	f7ff ff30 	bl	801bc80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801be20:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801be24:	b173      	cbz	r3, 801be44 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801be26:	3401      	adds	r4, #1
 801be28:	e7f6      	b.n	801be18 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801be2a:	2401      	movs	r4, #1
 801be2c:	4611      	mov	r1, r2
 801be2e:	f002 f8ad 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801be32:	280a      	cmp	r0, #10
 801be34:	4629      	mov	r1, r5
 801be36:	4630      	mov	r0, r6
 801be38:	bf08      	it	eq
 801be3a:	3401      	addeq	r4, #1
 801be3c:	f002 f8a6 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801be40:	2800      	cmp	r0, #0
 801be42:	d1f6      	bne.n	801be32 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801be44:	b2a0      	uxth	r0, r4
 801be46:	b00a      	add	sp, #40	; 0x28
 801be48:	bd70      	pop	{r4, r5, r6, pc}

0801be4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801be4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be4e:	b0db      	sub	sp, #364	; 0x16c
 801be50:	468a      	mov	sl, r1
 801be52:	461c      	mov	r4, r3
 801be54:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801be58:	9009      	str	r0, [sp, #36]	; 0x24
 801be5a:	f1bb 0f00 	cmp.w	fp, #0
 801be5e:	f000 80c7 	beq.w	801bff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	2b00      	cmp	r3, #0
 801be66:	f000 80c3 	beq.w	801bff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be6a:	7ba3      	ldrb	r3, [r4, #14]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	f000 80bf 	beq.w	801bff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be72:	af0c      	add	r7, sp, #48	; 0x30
 801be74:	6810      	ldr	r0, [r2, #0]
 801be76:	6851      	ldr	r1, [r2, #4]
 801be78:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801be7c:	463b      	mov	r3, r7
 801be7e:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801be82:	c303      	stmia	r3!, {r0, r1}
 801be84:	2100      	movs	r1, #0
 801be86:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801be8a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801be8e:	4638      	mov	r0, r7
 801be90:	910e      	str	r1, [sp, #56]	; 0x38
 801be92:	a90e      	add	r1, sp, #56	; 0x38
 801be94:	79a2      	ldrb	r2, [r4, #6]
 801be96:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801be9a:	f7ff fd49 	bl	801b930 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801be9e:	a90e      	add	r1, sp, #56	; 0x38
 801bea0:	79a2      	ldrb	r2, [r4, #6]
 801bea2:	4608      	mov	r0, r1
 801bea4:	f7ff fd44 	bl	801b930 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801bea8:	4648      	mov	r0, r9
 801beaa:	f001 ff2d 	bl	801dd08 <_ZN8touchgfx12TextProviderC1Ev>
 801beae:	6820      	ldr	r0, [r4, #0]
 801beb0:	6803      	ldr	r3, [r0, #0]
 801beb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801beb4:	4798      	blx	r3
 801beb6:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801beb8:	4603      	mov	r3, r0
 801beba:	4659      	mov	r1, fp
 801bebc:	4648      	mov	r0, r9
 801bebe:	f001 ff40 	bl	801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bec2:	a82e      	add	r0, sp, #184	; 0xb8
 801bec4:	f001 ff20 	bl	801dd08 <_ZN8touchgfx12TextProviderC1Ev>
 801bec8:	f894 8004 	ldrb.w	r8, [r4, #4]
 801becc:	f1b8 0f00 	cmp.w	r8, #0
 801bed0:	d009      	beq.n	801bee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801bed2:	6820      	ldr	r0, [r4, #0]
 801bed4:	6803      	ldr	r3, [r0, #0]
 801bed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bed8:	4798      	blx	r3
 801beda:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801bedc:	4603      	mov	r3, r0
 801bede:	4659      	mov	r1, fp
 801bee0:	a82e      	add	r0, sp, #184	; 0xb8
 801bee2:	f001 ff2e 	bl	801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bee6:	6820      	ldr	r0, [r4, #0]
 801bee8:	6803      	ldr	r3, [r0, #0]
 801beea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801beec:	4798      	blx	r3
 801beee:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bef2:	182e      	adds	r6, r5, r0
 801bef4:	2e00      	cmp	r6, #0
 801bef6:	dd45      	ble.n	801bf84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801bef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801befc:	4283      	cmp	r3, r0
 801befe:	db41      	blt.n	801bf84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801bf00:	441d      	add	r5, r3
 801bf02:	fb95 f5f6 	sdiv	r5, r5, r6
 801bf06:	a844      	add	r0, sp, #272	; 0x110
 801bf08:	f001 fefe 	bl	801dd08 <_ZN8touchgfx12TextProviderC1Ev>
 801bf0c:	7c23      	ldrb	r3, [r4, #16]
 801bf0e:	b14b      	cbz	r3, 801bf24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801bf10:	6820      	ldr	r0, [r4, #0]
 801bf12:	6803      	ldr	r3, [r0, #0]
 801bf14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf16:	4798      	blx	r3
 801bf18:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	4659      	mov	r1, fp
 801bf1e:	a844      	add	r0, sp, #272	; 0x110
 801bf20:	f001 ff0f 	bl	801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bf24:	7c21      	ldrb	r1, [r4, #16]
 801bf26:	a810      	add	r0, sp, #64	; 0x40
 801bf28:	7963      	ldrb	r3, [r4, #5]
 801bf2a:	9101      	str	r1, [sp, #4]
 801bf2c:	6821      	ldr	r1, [r4, #0]
 801bf2e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801bf32:	9100      	str	r1, [sp, #0]
 801bf34:	a944      	add	r1, sp, #272	; 0x110
 801bf36:	f7ff fc8f 	bl	801b858 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801bf3a:	7c23      	ldrb	r3, [r4, #16]
 801bf3c:	bb23      	cbnz	r3, 801bf88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801bf3e:	fa1f fb86 	uxth.w	fp, r6
 801bf42:	2d00      	cmp	r5, #0
 801bf44:	dd57      	ble.n	801bff6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801bf46:	7961      	ldrb	r1, [r4, #5]
 801bf48:	4648      	mov	r0, r9
 801bf4a:	f002 f81f 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bf4e:	4603      	mov	r3, r0
 801bf50:	f1b8 0f00 	cmp.w	r8, #0
 801bf54:	d005      	beq.n	801bf62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801bf56:	9008      	str	r0, [sp, #32]
 801bf58:	a82e      	add	r0, sp, #184	; 0xb8
 801bf5a:	7961      	ldrb	r1, [r4, #5]
 801bf5c:	f002 f816 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bf60:	9b08      	ldr	r3, [sp, #32]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d044      	beq.n	801bff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801bf66:	2b0a      	cmp	r3, #10
 801bf68:	d1eb      	bne.n	801bf42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801bf6a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801bf6e:	3d01      	subs	r5, #1
 801bf70:	445b      	add	r3, fp
 801bf72:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bf76:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bf7a:	eba3 030b 	sub.w	r3, r3, fp
 801bf7e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bf82:	e7de      	b.n	801bf42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801bf84:	2500      	movs	r5, #0
 801bf86:	e7be      	b.n	801bf06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801bf88:	0073      	lsls	r3, r6, #1
 801bf8a:	9308      	str	r3, [sp, #32]
 801bf8c:	2d00      	cmp	r5, #0
 801bf8e:	dd32      	ble.n	801bff6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801bf90:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801bf94:	a810      	add	r0, sp, #64	; 0x40
 801bf96:	9b08      	ldr	r3, [sp, #32]
 801bf98:	428b      	cmp	r3, r1
 801bf9a:	bfd4      	ite	le
 801bf9c:	2100      	movle	r1, #0
 801bf9e:	2101      	movgt	r1, #1
 801bfa0:	f7ff fe6e 	bl	801bc80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bfa4:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801bfa8:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bfac:	fa1f fb83 	uxth.w	fp, r3
 801bfb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bfb4:	459b      	cmp	fp, r3
 801bfb6:	d00b      	beq.n	801bfd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801bfb8:	7961      	ldrb	r1, [r4, #5]
 801bfba:	4648      	mov	r0, r9
 801bfbc:	f001 ffe6 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bfc0:	f1b8 0f00 	cmp.w	r8, #0
 801bfc4:	d0f0      	beq.n	801bfa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801bfc6:	7961      	ldrb	r1, [r4, #5]
 801bfc8:	a82e      	add	r0, sp, #184	; 0xb8
 801bfca:	f001 ffdf 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bfce:	e7eb      	b.n	801bfa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801bfd0:	b2b3      	uxth	r3, r6
 801bfd2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801bfd6:	3d01      	subs	r5, #1
 801bfd8:	441a      	add	r2, r3
 801bfda:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801bfde:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801bfe2:	1ad3      	subs	r3, r2, r3
 801bfe4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bfe8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d1cd      	bne.n	801bf8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801bff0:	b05b      	add	sp, #364	; 0x16c
 801bff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bff6:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801bffa:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801bffe:	7c23      	ldrb	r3, [r4, #16]
 801c000:	2b00      	cmp	r3, #0
 801c002:	d05f      	beq.n	801c0c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801c004:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801c008:	a810      	add	r0, sp, #64	; 0x40
 801c00a:	458b      	cmp	fp, r1
 801c00c:	bfd4      	ite	le
 801c00e:	2100      	movle	r1, #0
 801c010:	2101      	movgt	r1, #1
 801c012:	f7ff fe35 	bl	801bc80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801c016:	f1b8 0f00 	cmp.w	r8, #0
 801c01a:	d04c      	beq.n	801c0b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801c01c:	7c23      	ldrb	r3, [r4, #16]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d053      	beq.n	801c0ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801c022:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801c026:	7922      	ldrb	r2, [r4, #4]
 801c028:	2a01      	cmp	r2, #1
 801c02a:	d13c      	bne.n	801c0a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801c02c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801c030:	1ac0      	subs	r0, r0, r3
 801c032:	2302      	movs	r3, #2
 801c034:	fb90 f0f3 	sdiv	r0, r0, r3
 801c038:	b200      	sxth	r0, r0
 801c03a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c03e:	4418      	add	r0, r3
 801c040:	7c23      	ldrb	r3, [r4, #16]
 801c042:	8028      	strh	r0, [r5, #0]
 801c044:	2b00      	cmp	r3, #0
 801c046:	d03a      	beq.n	801c0be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801c048:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801c04c:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801c050:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c054:	f8cd 9010 	str.w	r9, [sp, #16]
 801c058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c05a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801c05e:	2200      	movs	r2, #0
 801c060:	2100      	movs	r1, #0
 801c062:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801c066:	e9cd 5700 	strd	r5, r7, [sp]
 801c06a:	4652      	mov	r2, sl
 801c06c:	f7ff fcb2 	bl	801b9d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801c070:	2800      	cmp	r0, #0
 801c072:	d1bd      	bne.n	801bff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801c074:	b2b2      	uxth	r2, r6
 801c076:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801c07a:	4611      	mov	r1, r2
 801c07c:	4413      	add	r3, r2
 801c07e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801c082:	b21b      	sxth	r3, r3
 801c084:	1a52      	subs	r2, r2, r1
 801c086:	7c21      	ldrb	r1, [r4, #16]
 801c088:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c08c:	b212      	sxth	r2, r2
 801c08e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c092:	b109      	cbz	r1, 801c098 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801c094:	42b2      	cmp	r2, r6
 801c096:	dbab      	blt.n	801bff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801c098:	887a      	ldrh	r2, [r7, #2]
 801c09a:	88f9      	ldrh	r1, [r7, #6]
 801c09c:	440a      	add	r2, r1
 801c09e:	b212      	sxth	r2, r2
 801c0a0:	4293      	cmp	r3, r2
 801c0a2:	ddac      	ble.n	801bffe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801c0a4:	e7a4      	b.n	801bff0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801c0a6:	2a02      	cmp	r2, #2
 801c0a8:	d107      	bne.n	801c0ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801c0aa:	7be2      	ldrb	r2, [r4, #15]
 801c0ac:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801c0b0:	1a80      	subs	r0, r0, r2
 801c0b2:	1ac0      	subs	r0, r0, r3
 801c0b4:	e7c0      	b.n	801c038 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801c0b6:	7be0      	ldrb	r0, [r4, #15]
 801c0b8:	e7bf      	b.n	801c03a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801c0ba:	2000      	movs	r0, #0
 801c0bc:	e7bd      	b.n	801c03a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801c0be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c0c2:	e7c3      	b.n	801c04c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801c0c4:	f1b8 0f00 	cmp.w	r8, #0
 801c0c8:	d0f5      	beq.n	801c0b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801c0ca:	2300      	movs	r3, #0
 801c0cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c0d0:	6821      	ldr	r1, [r4, #0]
 801c0d2:	a82e      	add	r0, sp, #184	; 0xb8
 801c0d4:	f7ff fbfa 	bl	801b8cc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801c0d8:	b203      	sxth	r3, r0
 801c0da:	e7a4      	b.n	801c026 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801c0dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c0dc:	2b02      	cmp	r3, #2
 801c0de:	b510      	push	{r4, lr}
 801c0e0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c0e4:	d00b      	beq.n	801c0fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801c0e6:	2b03      	cmp	r3, #3
 801c0e8:	d00e      	beq.n	801c108 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801c0ea:	2b01      	cmp	r3, #1
 801c0ec:	d001      	beq.n	801c0f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801c0ee:	1860      	adds	r0, r4, r1
 801c0f0:	bd10      	pop	{r4, pc}
 801c0f2:	8880      	ldrh	r0, [r0, #4]
 801c0f4:	4420      	add	r0, r4
 801c0f6:	b200      	sxth	r0, r0
 801c0f8:	1a80      	subs	r0, r0, r2
 801c0fa:	3801      	subs	r0, #1
 801c0fc:	e7f8      	b.n	801c0f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801c0fe:	8880      	ldrh	r0, [r0, #4]
 801c100:	4420      	add	r0, r4
 801c102:	b200      	sxth	r0, r0
 801c104:	1a40      	subs	r0, r0, r1
 801c106:	e7f8      	b.n	801c0fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c108:	18a0      	adds	r0, r4, r2
 801c10a:	e7f1      	b.n	801c0f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801c10c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c10c:	2b02      	cmp	r3, #2
 801c10e:	b510      	push	{r4, lr}
 801c110:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801c114:	d006      	beq.n	801c124 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801c116:	2b03      	cmp	r3, #3
 801c118:	d00a      	beq.n	801c130 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c11a:	2b01      	cmp	r3, #1
 801c11c:	bf14      	ite	ne
 801c11e:	18a0      	addne	r0, r4, r2
 801c120:	1860      	addeq	r0, r4, r1
 801c122:	bd10      	pop	{r4, pc}
 801c124:	88c0      	ldrh	r0, [r0, #6]
 801c126:	4420      	add	r0, r4
 801c128:	b200      	sxth	r0, r0
 801c12a:	1a80      	subs	r0, r0, r2
 801c12c:	3801      	subs	r0, #1
 801c12e:	e7f8      	b.n	801c122 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801c130:	88c0      	ldrh	r0, [r0, #6]
 801c132:	4420      	add	r0, r4
 801c134:	b200      	sxth	r0, r0
 801c136:	1a40      	subs	r0, r0, r1
 801c138:	e7f8      	b.n	801c12c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801c13c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801c13c:	4b01      	ldr	r3, [pc, #4]	; (801c144 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801c13e:	2200      	movs	r2, #0
 801c140:	601a      	str	r2, [r3, #0]
 801c142:	4770      	bx	lr
 801c144:	2000bf18 	.word	0x2000bf18

0801c148 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801c148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c14a:	1e05      	subs	r5, r0, #0
 801c14c:	f04f 0601 	mov.w	r6, #1
 801c150:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c154:	bfba      	itte	lt
 801c156:	f04f 37ff 	movlt.w	r7, #4294967295
 801c15a:	426d      	neglt	r5, r5
 801c15c:	2701      	movge	r7, #1
 801c15e:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801c162:	f1be 0f00 	cmp.w	lr, #0
 801c166:	bfbc      	itt	lt
 801c168:	f1ce 0e00 	rsblt	lr, lr, #0
 801c16c:	427f      	neglt	r7, r7
 801c16e:	2c00      	cmp	r4, #0
 801c170:	fa4e f001 	asr.w	r0, lr, r1
 801c174:	fa06 f101 	lsl.w	r1, r6, r1
 801c178:	bfbc      	itt	lt
 801c17a:	4264      	neglt	r4, r4
 801c17c:	427f      	neglt	r7, r7
 801c17e:	3901      	subs	r1, #1
 801c180:	ea01 010e 	and.w	r1, r1, lr
 801c184:	434d      	muls	r5, r1
 801c186:	f8dc 1000 	ldr.w	r1, [ip]
 801c18a:	fb03 1300 	mla	r3, r3, r0, r1
 801c18e:	fb95 f1f4 	sdiv	r1, r5, r4
 801c192:	fb04 5511 	mls	r5, r4, r1, r5
 801c196:	441d      	add	r5, r3
 801c198:	fb95 f3f4 	sdiv	r3, r5, r4
 801c19c:	4419      	add	r1, r3
 801c19e:	fb04 5413 	mls	r4, r4, r3, r5
 801c1a2:	fb02 1000 	mla	r0, r2, r0, r1
 801c1a6:	f8cc 4000 	str.w	r4, [ip]
 801c1aa:	4378      	muls	r0, r7
 801c1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801c1b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801c1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1b4:	4c24      	ldr	r4, [pc, #144]	; (801c248 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801c1b6:	b086      	sub	sp, #24
 801c1b8:	4605      	mov	r5, r0
 801c1ba:	6807      	ldr	r7, [r0, #0]
 801c1bc:	69a3      	ldr	r3, [r4, #24]
 801c1be:	b92b      	cbnz	r3, 801c1cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801c1c0:	6840      	ldr	r0, [r0, #4]
 801c1c2:	e9c5 7000 	strd	r7, r0, [r5]
 801c1c6:	b006      	add	sp, #24
 801c1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1cc:	f04f 0802 	mov.w	r8, #2
 801c1d0:	68a2      	ldr	r2, [r4, #8]
 801c1d2:	ae06      	add	r6, sp, #24
 801c1d4:	6820      	ldr	r0, [r4, #0]
 801c1d6:	fb93 f1f8 	sdiv	r1, r3, r8
 801c1da:	440a      	add	r2, r1
 801c1dc:	69e1      	ldr	r1, [r4, #28]
 801c1de:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c1e2:	9700      	str	r7, [sp, #0]
 801c1e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c1e6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801c1ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c1ec:	f7ff ffac 	bl	801c148 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c1f0:	69a3      	ldr	r3, [r4, #24]
 801c1f2:	4607      	mov	r7, r0
 801c1f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c1f6:	9301      	str	r3, [sp, #4]
 801c1f8:	686b      	ldr	r3, [r5, #4]
 801c1fa:	6a21      	ldr	r1, [r4, #32]
 801c1fc:	9300      	str	r3, [sp, #0]
 801c1fe:	9602      	str	r6, [sp, #8]
 801c200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c202:	6860      	ldr	r0, [r4, #4]
 801c204:	f7ff ffa0 	bl	801c148 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c208:	69a2      	ldr	r2, [r4, #24]
 801c20a:	6963      	ldr	r3, [r4, #20]
 801c20c:	4407      	add	r7, r0
 801c20e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c210:	68e0      	ldr	r0, [r4, #12]
 801c212:	fb92 f8f8 	sdiv	r8, r2, r8
 801c216:	4443      	add	r3, r8
 801c218:	9305      	str	r3, [sp, #20]
 801c21a:	682b      	ldr	r3, [r5, #0]
 801c21c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801c220:	9300      	str	r3, [sp, #0]
 801c222:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801c224:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801c226:	f7ff ff8f 	bl	801c148 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c22a:	69a3      	ldr	r3, [r4, #24]
 801c22c:	4680      	mov	r8, r0
 801c22e:	9602      	str	r6, [sp, #8]
 801c230:	9301      	str	r3, [sp, #4]
 801c232:	686b      	ldr	r3, [r5, #4]
 801c234:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801c236:	9300      	str	r3, [sp, #0]
 801c238:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801c23a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801c23c:	6920      	ldr	r0, [r4, #16]
 801c23e:	f7ff ff83 	bl	801c148 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c242:	4440      	add	r0, r8
 801c244:	e7bd      	b.n	801c1c2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801c246:	bf00      	nop
 801c248:	2000bf1c 	.word	0x2000bf1c

0801c24c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c24c:	4b07      	ldr	r3, [pc, #28]	; (801c26c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c24e:	b510      	push	{r4, lr}
 801c250:	781b      	ldrb	r3, [r3, #0]
 801c252:	2b01      	cmp	r3, #1
 801c254:	d108      	bne.n	801c268 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c256:	4b06      	ldr	r3, [pc, #24]	; (801c270 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c258:	880c      	ldrh	r4, [r1, #0]
 801c25a:	881b      	ldrh	r3, [r3, #0]
 801c25c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c260:	3b01      	subs	r3, #1
 801c262:	1b1b      	subs	r3, r3, r4
 801c264:	8003      	strh	r3, [r0, #0]
 801c266:	800a      	strh	r2, [r1, #0]
 801c268:	bd10      	pop	{r4, pc}
 801c26a:	bf00      	nop
 801c26c:	2000bee6 	.word	0x2000bee6
 801c270:	2000beea 	.word	0x2000beea

0801c274 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c274:	4b0a      	ldr	r3, [pc, #40]	; (801c2a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c276:	b510      	push	{r4, lr}
 801c278:	781b      	ldrb	r3, [r3, #0]
 801c27a:	2b01      	cmp	r3, #1
 801c27c:	d10e      	bne.n	801c29c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c27e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c282:	8843      	ldrh	r3, [r0, #2]
 801c284:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c288:	18ca      	adds	r2, r1, r3
 801c28a:	4b06      	ldr	r3, [pc, #24]	; (801c2a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c28c:	8044      	strh	r4, [r0, #2]
 801c28e:	881b      	ldrh	r3, [r3, #0]
 801c290:	1a9b      	subs	r3, r3, r2
 801c292:	8003      	strh	r3, [r0, #0]
 801c294:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c298:	8081      	strh	r1, [r0, #4]
 801c29a:	80c3      	strh	r3, [r0, #6]
 801c29c:	bd10      	pop	{r4, pc}
 801c29e:	bf00      	nop
 801c2a0:	2000bee6 	.word	0x2000bee6
 801c2a4:	2000bee2 	.word	0x2000bee2

0801c2a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c2a8:	4b07      	ldr	r3, [pc, #28]	; (801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c2aa:	b510      	push	{r4, lr}
 801c2ac:	781b      	ldrb	r3, [r3, #0]
 801c2ae:	2b01      	cmp	r3, #1
 801c2b0:	d108      	bne.n	801c2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c2b2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c2b6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c2ba:	8003      	strh	r3, [r0, #0]
 801c2bc:	8893      	ldrh	r3, [r2, #4]
 801c2be:	3b01      	subs	r3, #1
 801c2c0:	1b1b      	subs	r3, r3, r4
 801c2c2:	800b      	strh	r3, [r1, #0]
 801c2c4:	bd10      	pop	{r4, pc}
 801c2c6:	bf00      	nop
 801c2c8:	2000bee6 	.word	0x2000bee6

0801c2cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c2cc:	4b08      	ldr	r3, [pc, #32]	; (801c2f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c2ce:	b513      	push	{r0, r1, r4, lr}
 801c2d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c2d4:	2400      	movs	r4, #0
 801c2d6:	4b07      	ldr	r3, [pc, #28]	; (801c2f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801c2d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c2dc:	466a      	mov	r2, sp
 801c2de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c2e2:	9400      	str	r4, [sp, #0]
 801c2e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c2e8:	f7ff ffde 	bl	801c2a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c2ec:	b002      	add	sp, #8
 801c2ee:	bd10      	pop	{r4, pc}
 801c2f0:	2000bee2 	.word	0x2000bee2
 801c2f4:	2000bee4 	.word	0x2000bee4

0801c2f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c2f8:	4b0a      	ldr	r3, [pc, #40]	; (801c324 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c2fa:	460a      	mov	r2, r1
 801c2fc:	b510      	push	{r4, lr}
 801c2fe:	781b      	ldrb	r3, [r3, #0]
 801c300:	2b01      	cmp	r3, #1
 801c302:	d10d      	bne.n	801c320 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c304:	8881      	ldrh	r1, [r0, #4]
 801c306:	8803      	ldrh	r3, [r0, #0]
 801c308:	440b      	add	r3, r1
 801c30a:	4601      	mov	r1, r0
 801c30c:	3b01      	subs	r3, #1
 801c30e:	f821 3b02 	strh.w	r3, [r1], #2
 801c312:	f7ff ffc9 	bl	801c2a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c316:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c31a:	88c2      	ldrh	r2, [r0, #6]
 801c31c:	80c3      	strh	r3, [r0, #6]
 801c31e:	8082      	strh	r2, [r0, #4]
 801c320:	bd10      	pop	{r4, pc}
 801c322:	bf00      	nop
 801c324:	2000bee6 	.word	0x2000bee6

0801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c328:	4b09      	ldr	r3, [pc, #36]	; (801c350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c32a:	b507      	push	{r0, r1, r2, lr}
 801c32c:	2100      	movs	r1, #0
 801c32e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c332:	4b08      	ldr	r3, [pc, #32]	; (801c354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801c334:	9100      	str	r1, [sp, #0]
 801c336:	4669      	mov	r1, sp
 801c338:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c33c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c340:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c344:	f7ff ffd8 	bl	801c2f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c348:	b003      	add	sp, #12
 801c34a:	f85d fb04 	ldr.w	pc, [sp], #4
 801c34e:	bf00      	nop
 801c350:	2000bee2 	.word	0x2000bee2
 801c354:	2000bee4 	.word	0x2000bee4

0801c358 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c358:	4b03      	ldr	r3, [pc, #12]	; (801c368 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c35a:	6818      	ldr	r0, [r3, #0]
 801c35c:	b110      	cbz	r0, 801c364 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c35e:	6803      	ldr	r3, [r0, #0]
 801c360:	699b      	ldr	r3, [r3, #24]
 801c362:	4718      	bx	r3
 801c364:	4770      	bx	lr
 801c366:	bf00      	nop
 801c368:	2000bf6c 	.word	0x2000bf6c

0801c36c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c36c:	4770      	bx	lr
	...

0801c370 <_ZN8touchgfx11Application4drawEv>:
 801c370:	4b09      	ldr	r3, [pc, #36]	; (801c398 <_ZN8touchgfx11Application4drawEv+0x28>)
 801c372:	b507      	push	{r0, r1, r2, lr}
 801c374:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c378:	2100      	movs	r1, #0
 801c37a:	4b08      	ldr	r3, [pc, #32]	; (801c39c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c37c:	9100      	str	r1, [sp, #0]
 801c37e:	4669      	mov	r1, sp
 801c380:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c384:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c388:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c38c:	6803      	ldr	r3, [r0, #0]
 801c38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c390:	4798      	blx	r3
 801c392:	b003      	add	sp, #12
 801c394:	f85d fb04 	ldr.w	pc, [sp], #4
 801c398:	2000bee2 	.word	0x2000bee2
 801c39c:	2000bee4 	.word	0x2000bee4

0801c3a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c3a0:	4b03      	ldr	r3, [pc, #12]	; (801c3b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c3a2:	6818      	ldr	r0, [r3, #0]
 801c3a4:	b110      	cbz	r0, 801c3ac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c3a6:	6803      	ldr	r3, [r0, #0]
 801c3a8:	69db      	ldr	r3, [r3, #28]
 801c3aa:	4718      	bx	r3
 801c3ac:	4770      	bx	lr
 801c3ae:	bf00      	nop
 801c3b0:	2000bf6c 	.word	0x2000bf6c

0801c3b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c3b4:	4b03      	ldr	r3, [pc, #12]	; (801c3c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c3b6:	6818      	ldr	r0, [r3, #0]
 801c3b8:	b110      	cbz	r0, 801c3c0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c3ba:	6803      	ldr	r3, [r0, #0]
 801c3bc:	6a1b      	ldr	r3, [r3, #32]
 801c3be:	4718      	bx	r3
 801c3c0:	4770      	bx	lr
 801c3c2:	bf00      	nop
 801c3c4:	2000bf6c 	.word	0x2000bf6c

0801c3c8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c3c8:	4b03      	ldr	r3, [pc, #12]	; (801c3d8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c3ca:	6818      	ldr	r0, [r3, #0]
 801c3cc:	b110      	cbz	r0, 801c3d4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c3ce:	6803      	ldr	r3, [r0, #0]
 801c3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3d2:	4718      	bx	r3
 801c3d4:	4770      	bx	lr
 801c3d6:	bf00      	nop
 801c3d8:	2000bf6c 	.word	0x2000bf6c

0801c3dc <_ZN8touchgfx11Application15handleTickEventEv>:
 801c3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c3e0:	4d3a      	ldr	r5, [pc, #232]	; (801c4cc <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801c3e2:	4604      	mov	r4, r0
 801c3e4:	6828      	ldr	r0, [r5, #0]
 801c3e6:	b140      	cbz	r0, 801c3fa <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801c3e8:	7a03      	ldrb	r3, [r0, #8]
 801c3ea:	b933      	cbnz	r3, 801c3fa <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801c3ec:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801c3f0:	6803      	ldr	r3, [r0, #0]
 801c3f2:	689b      	ldr	r3, [r3, #8]
 801c3f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c3f8:	4718      	bx	r3
 801c3fa:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801c3fe:	b97b      	cbnz	r3, 801c420 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c400:	b170      	cbz	r0, 801c420 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c402:	7a03      	ldrb	r3, [r0, #8]
 801c404:	b163      	cbz	r3, 801c420 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c406:	4b32      	ldr	r3, [pc, #200]	; (801c4d0 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801c408:	6818      	ldr	r0, [r3, #0]
 801c40a:	b110      	cbz	r0, 801c412 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801c40c:	6803      	ldr	r3, [r0, #0]
 801c40e:	691b      	ldr	r3, [r3, #16]
 801c410:	4798      	blx	r3
 801c412:	6828      	ldr	r0, [r5, #0]
 801c414:	6803      	ldr	r3, [r0, #0]
 801c416:	68db      	ldr	r3, [r3, #12]
 801c418:	4798      	blx	r3
 801c41a:	2301      	movs	r3, #1
 801c41c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801c420:	2500      	movs	r5, #0
 801c422:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801c426:	42a8      	cmp	r0, r5
 801c428:	dd0c      	ble.n	801c444 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801c42a:	1963      	adds	r3, r4, r5
 801c42c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c430:	b132      	cbz	r2, 801c440 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801c432:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801c436:	4413      	add	r3, r2
 801c438:	6858      	ldr	r0, [r3, #4]
 801c43a:	6803      	ldr	r3, [r0, #0]
 801c43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c43e:	4798      	blx	r3
 801c440:	3501      	adds	r5, #1
 801c442:	e7ee      	b.n	801c422 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801c444:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801c448:	3801      	subs	r0, #1
 801c44a:	f04f 0c00 	mov.w	ip, #0
 801c44e:	3678      	adds	r6, #120	; 0x78
 801c450:	1c43      	adds	r3, r0, #1
 801c452:	d033      	beq.n	801c4bc <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801c454:	1823      	adds	r3, r4, r0
 801c456:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c45a:	bb6a      	cbnz	r2, 801c4b8 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801c45c:	b281      	uxth	r1, r0
 801c45e:	1d25      	adds	r5, r4, #4
 801c460:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801c464:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801c468:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801c46c:	4293      	cmp	r3, r2
 801c46e:	dc0a      	bgt.n	801c486 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801c470:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801c474:	4422      	add	r2, r4
 801c476:	18b1      	adds	r1, r6, r2
 801c478:	b289      	uxth	r1, r1
 801c47a:	428b      	cmp	r3, r1
 801c47c:	d919      	bls.n	801c4b2 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801c47e:	7851      	ldrb	r1, [r2, #1]
 801c480:	f802 1b01 	strb.w	r1, [r2], #1
 801c484:	e7f7      	b.n	801c476 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801c486:	682f      	ldr	r7, [r5, #0]
 801c488:	f105 0804 	add.w	r8, r5, #4
 801c48c:	45b9      	cmp	r9, r7
 801c48e:	d10d      	bne.n	801c4ac <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801c490:	4696      	mov	lr, r2
 801c492:	f1be 0f1e 	cmp.w	lr, #30
 801c496:	dc06      	bgt.n	801c4a6 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801c498:	f10e 0e01 	add.w	lr, lr, #1
 801c49c:	686f      	ldr	r7, [r5, #4]
 801c49e:	4573      	cmp	r3, lr
 801c4a0:	f845 7b04 	str.w	r7, [r5], #4
 801c4a4:	dcf5      	bgt.n	801c492 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801c4a6:	3b01      	subs	r3, #1
 801c4a8:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801c4ac:	3201      	adds	r2, #1
 801c4ae:	4645      	mov	r5, r8
 801c4b0:	e7da      	b.n	801c468 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801c4b2:	4423      	add	r3, r4
 801c4b4:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801c4b8:	3801      	subs	r0, #1
 801c4ba:	e7c9      	b.n	801c450 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801c4bc:	4b04      	ldr	r3, [pc, #16]	; (801c4d0 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801c4be:	6818      	ldr	r0, [r3, #0]
 801c4c0:	b110      	cbz	r0, 801c4c8 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801c4c2:	6803      	ldr	r3, [r0, #0]
 801c4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4c6:	e795      	b.n	801c3f4 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801c4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4cc:	2000bf70 	.word	0x2000bf70
 801c4d0:	2000bf6c 	.word	0x2000bf6c

0801c4d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801c4d4:	b570      	push	{r4, r5, r6, lr}
 801c4d6:	4606      	mov	r6, r0
 801c4d8:	460c      	mov	r4, r1
 801c4da:	b929      	cbnz	r1, 801c4e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801c4dc:	4b0c      	ldr	r3, [pc, #48]	; (801c510 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801c4de:	2164      	movs	r1, #100	; 0x64
 801c4e0:	4a0c      	ldr	r2, [pc, #48]	; (801c514 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801c4e2:	480d      	ldr	r0, [pc, #52]	; (801c518 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801c4e4:	f00c f88e 	bl	8028604 <__assert_func>
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	4d0c      	ldr	r5, [pc, #48]	; (801c51c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801c4ec:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c4f0:	6828      	ldr	r0, [r5, #0]
 801c4f2:	b110      	cbz	r0, 801c4fa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801c4f4:	6803      	ldr	r3, [r0, #0]
 801c4f6:	695b      	ldr	r3, [r3, #20]
 801c4f8:	4798      	blx	r3
 801c4fa:	602c      	str	r4, [r5, #0]
 801c4fc:	4620      	mov	r0, r4
 801c4fe:	6823      	ldr	r3, [r4, #0]
 801c500:	68db      	ldr	r3, [r3, #12]
 801c502:	4798      	blx	r3
 801c504:	6833      	ldr	r3, [r6, #0]
 801c506:	4630      	mov	r0, r6
 801c508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c50a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c50e:	4718      	bx	r3
 801c510:	0802c808 	.word	0x0802c808
 801c514:	0802c8d0 	.word	0x0802c8d0
 801c518:	0802c812 	.word	0x0802c812
 801c51c:	2000bf6c 	.word	0x2000bf6c

0801c520 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801c520:	b510      	push	{r4, lr}
 801c522:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c526:	888a      	ldrh	r2, [r1, #4]
 801c528:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c52c:	4422      	add	r2, r4
 801c52e:	b212      	sxth	r2, r2
 801c530:	4293      	cmp	r3, r2
 801c532:	da15      	bge.n	801c560 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c534:	8882      	ldrh	r2, [r0, #4]
 801c536:	4413      	add	r3, r2
 801c538:	b21b      	sxth	r3, r3
 801c53a:	429c      	cmp	r4, r3
 801c53c:	da10      	bge.n	801c560 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c53e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c542:	88c9      	ldrh	r1, [r1, #6]
 801c544:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c548:	4419      	add	r1, r3
 801c54a:	b209      	sxth	r1, r1
 801c54c:	428a      	cmp	r2, r1
 801c54e:	da07      	bge.n	801c560 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c550:	88c0      	ldrh	r0, [r0, #6]
 801c552:	4410      	add	r0, r2
 801c554:	b200      	sxth	r0, r0
 801c556:	4283      	cmp	r3, r0
 801c558:	bfac      	ite	ge
 801c55a:	2000      	movge	r0, #0
 801c55c:	2001      	movlt	r0, #1
 801c55e:	bd10      	pop	{r4, pc}
 801c560:	2000      	movs	r0, #0
 801c562:	e7fc      	b.n	801c55e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801c564 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c564:	b570      	push	{r4, r5, r6, lr}
 801c566:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c56a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c56e:	42ac      	cmp	r4, r5
 801c570:	db18      	blt.n	801c5a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c572:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c576:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c57a:	429a      	cmp	r2, r3
 801c57c:	db12      	blt.n	801c5a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c57e:	8886      	ldrh	r6, [r0, #4]
 801c580:	4435      	add	r5, r6
 801c582:	888e      	ldrh	r6, [r1, #4]
 801c584:	4434      	add	r4, r6
 801c586:	b22d      	sxth	r5, r5
 801c588:	b224      	sxth	r4, r4
 801c58a:	42a5      	cmp	r5, r4
 801c58c:	db0a      	blt.n	801c5a4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c58e:	88c0      	ldrh	r0, [r0, #6]
 801c590:	4418      	add	r0, r3
 801c592:	88cb      	ldrh	r3, [r1, #6]
 801c594:	441a      	add	r2, r3
 801c596:	b200      	sxth	r0, r0
 801c598:	b212      	sxth	r2, r2
 801c59a:	4290      	cmp	r0, r2
 801c59c:	bfb4      	ite	lt
 801c59e:	2000      	movlt	r0, #0
 801c5a0:	2001      	movge	r0, #1
 801c5a2:	bd70      	pop	{r4, r5, r6, pc}
 801c5a4:	2000      	movs	r0, #0
 801c5a6:	e7fc      	b.n	801c5a2 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801c5a8 <_ZN8touchgfx11Application11getInstanceEv>:
 801c5a8:	4b01      	ldr	r3, [pc, #4]	; (801c5b0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c5aa:	6818      	ldr	r0, [r3, #0]
 801c5ac:	4770      	bx	lr
 801c5ae:	bf00      	nop
 801c5b0:	2000bf7c 	.word	0x2000bf7c

0801c5b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c5ba:	30a8      	adds	r0, #168	; 0xa8
 801c5bc:	f820 3c24 	strh.w	r3, [r0, #-36]
 801c5c0:	f802 3b01 	strb.w	r3, [r2], #1
 801c5c4:	4282      	cmp	r2, r0
 801c5c6:	d1fb      	bne.n	801c5c0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c5c8:	4770      	bx	lr

0801c5ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c5ca:	4603      	mov	r3, r0
 801c5cc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c5d0:	2200      	movs	r2, #0
 801c5d2:	801a      	strh	r2, [r3, #0]
 801c5d4:	3308      	adds	r3, #8
 801c5d6:	f823 2c06 	strh.w	r2, [r3, #-6]
 801c5da:	f823 2c04 	strh.w	r2, [r3, #-4]
 801c5de:	f823 2c02 	strh.w	r2, [r3, #-2]
 801c5e2:	428b      	cmp	r3, r1
 801c5e4:	d1f5      	bne.n	801c5d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c5e6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c5ea:	4770      	bx	lr

0801c5ec <_ZN8touchgfx11ApplicationC1Ev>:
 801c5ec:	b570      	push	{r4, r5, r6, lr}
 801c5ee:	4b16      	ldr	r3, [pc, #88]	; (801c648 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801c5f0:	2500      	movs	r5, #0
 801c5f2:	4604      	mov	r4, r0
 801c5f4:	30a8      	adds	r0, #168	; 0xa8
 801c5f6:	f840 3ca8 	str.w	r3, [r0, #-168]
 801c5fa:	f820 5c24 	strh.w	r5, [r0, #-36]
 801c5fe:	f7ff ffe4 	bl	801c5ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c602:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c606:	f7ff ffe0 	bl	801c5ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c60a:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801c60e:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801c612:	490e      	ldr	r1, [pc, #56]	; (801c64c <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801c614:	480e      	ldr	r0, [pc, #56]	; (801c650 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801c616:	f00a fadb 	bl	8026bd0 <CRC_Lock>
 801c61a:	4e0e      	ldr	r6, [pc, #56]	; (801c654 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801c61c:	4b0e      	ldr	r3, [pc, #56]	; (801c658 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c61e:	b158      	cbz	r0, 801c638 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801c620:	801d      	strh	r5, [r3, #0]
 801c622:	2300      	movs	r3, #0
 801c624:	4a0d      	ldr	r2, [pc, #52]	; (801c65c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c626:	4620      	mov	r0, r4
 801c628:	6013      	str	r3, [r2, #0]
 801c62a:	4a0d      	ldr	r2, [pc, #52]	; (801c660 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c62c:	6033      	str	r3, [r6, #0]
 801c62e:	6013      	str	r3, [r2, #0]
 801c630:	f7ff ffc0 	bl	801c5b4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c634:	4620      	mov	r0, r4
 801c636:	bd70      	pop	{r4, r5, r6, pc}
 801c638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c63c:	2002      	movs	r0, #2
 801c63e:	801a      	strh	r2, [r3, #0]
 801c640:	6030      	str	r0, [r6, #0]
 801c642:	f000 ff81 	bl	801d548 <_ZN8touchgfx6Screen4drawEv>
 801c646:	e7ec      	b.n	801c622 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801c648:	0802c89c 	.word	0x0802c89c
 801c64c:	b5e8b5cd 	.word	0xb5e8b5cd
 801c650:	f407a5c2 	.word	0xf407a5c2
 801c654:	2000bf6c 	.word	0x2000bf6c
 801c658:	20000080 	.word	0x20000080
 801c65c:	2000bf7c 	.word	0x2000bf7c
 801c660:	2000bf70 	.word	0x2000bf70

0801c664 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c664:	2300      	movs	r3, #0
 801c666:	8003      	strh	r3, [r0, #0]
 801c668:	8043      	strh	r3, [r0, #2]
 801c66a:	8083      	strh	r3, [r0, #4]
 801c66c:	80c3      	strh	r3, [r0, #6]
 801c66e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801c672:	4293      	cmp	r3, r2
 801c674:	b530      	push	{r4, r5, lr}
 801c676:	d912      	bls.n	801c69e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c678:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801c67c:	3b01      	subs	r3, #1
 801c67e:	6825      	ldr	r5, [r4, #0]
 801c680:	b29b      	uxth	r3, r3
 801c682:	6005      	str	r5, [r0, #0]
 801c684:	4293      	cmp	r3, r2
 801c686:	6865      	ldr	r5, [r4, #4]
 801c688:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801c68c:	6045      	str	r5, [r0, #4]
 801c68e:	d906      	bls.n	801c69e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c690:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801c694:	681d      	ldr	r5, [r3, #0]
 801c696:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801c69a:	685d      	ldr	r5, [r3, #4]
 801c69c:	6065      	str	r5, [r4, #4]
 801c69e:	bd30      	pop	{r4, r5, pc}

0801c6a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c6a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c6a2:	466b      	mov	r3, sp
 801c6a4:	4604      	mov	r4, r0
 801c6a6:	e883 0006 	stmia.w	r3, {r1, r2}
 801c6aa:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c6ae:	2a07      	cmp	r2, #7
 801c6b0:	d906      	bls.n	801c6c0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c6b2:	4b09      	ldr	r3, [pc, #36]	; (801c6d8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c6b4:	f44f 7102 	mov.w	r1, #520	; 0x208
 801c6b8:	4a08      	ldr	r2, [pc, #32]	; (801c6dc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c6ba:	4809      	ldr	r0, [pc, #36]	; (801c6e0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c6bc:	f00b ffa2 	bl	8028604 <__assert_func>
 801c6c0:	1c51      	adds	r1, r2, #1
 801c6c2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c6c6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c6ca:	cb03      	ldmia	r3!, {r0, r1}
 801c6cc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c6d0:	6069      	str	r1, [r5, #4]
 801c6d2:	b003      	add	sp, #12
 801c6d4:	bd30      	pop	{r4, r5, pc}
 801c6d6:	bf00      	nop
 801c6d8:	0802c83c 	.word	0x0802c83c
 801c6dc:	0802c914 	.word	0x0802c914
 801c6e0:	0802c86b 	.word	0x0802c86b

0801c6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c6e8:	b089      	sub	sp, #36	; 0x24
 801c6ea:	4606      	mov	r6, r0
 801c6ec:	466c      	mov	r4, sp
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	e884 0006 	stmia.w	r4, {r1, r2}
 801c6f4:	f7fc fd02 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 801c6f8:	bbb0      	cbnz	r0, 801c768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c6fa:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801c6fe:	b1fd      	cbz	r5, 801c740 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801c700:	3d01      	subs	r5, #1
 801c702:	af04      	add	r7, sp, #16
 801c704:	f04f 090a 	mov.w	r9, #10
 801c708:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801c70c:	ab02      	add	r3, sp, #8
 801c70e:	fa1f f885 	uxth.w	r8, r5
 801c712:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c716:	6851      	ldr	r1, [r2, #4]
 801c718:	c303      	stmia	r3!, {r0, r1}
 801c71a:	4621      	mov	r1, r4
 801c71c:	a802      	add	r0, sp, #8
 801c71e:	f7ff ff21 	bl	801c564 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c722:	bb08      	cbnz	r0, 801c768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c724:	a902      	add	r1, sp, #8
 801c726:	4620      	mov	r0, r4
 801c728:	f7ff ff1c 	bl	801c564 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c72c:	b1f8      	cbz	r0, 801c76e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801c72e:	4642      	mov	r2, r8
 801c730:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c734:	a806      	add	r0, sp, #24
 801c736:	f7ff ff95 	bl	801c664 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c73a:	f115 35ff 	adds.w	r5, r5, #4294967295
 801c73e:	d2e3      	bcs.n	801c708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801c740:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801c744:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801c748:	2b08      	cmp	r3, #8
 801c74a:	d108      	bne.n	801c75e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c74c:	4629      	mov	r1, r5
 801c74e:	a806      	add	r0, sp, #24
 801c750:	2207      	movs	r2, #7
 801c752:	f7ff ff87 	bl	801c664 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c756:	a906      	add	r1, sp, #24
 801c758:	4620      	mov	r0, r4
 801c75a:	f7fd feca 	bl	801a4f2 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c75e:	4628      	mov	r0, r5
 801c760:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c764:	f7ff ff9c 	bl	801c6a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c768:	b009      	add	sp, #36	; 0x24
 801c76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c76e:	4621      	mov	r1, r4
 801c770:	a802      	add	r0, sp, #8
 801c772:	f7ff fed5 	bl	801c520 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c776:	b150      	cbz	r0, 801c78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801c778:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c77c:	a806      	add	r0, sp, #24
 801c77e:	4642      	mov	r2, r8
 801c780:	f7ff ff70 	bl	801c664 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c784:	a902      	add	r1, sp, #8
 801c786:	4620      	mov	r0, r4
 801c788:	f7fd feb3 	bl	801a4f2 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c78c:	e7d5      	b.n	801c73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c78e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c792:	e887 0003 	stmia.w	r7, {r0, r1}
 801c796:	a902      	add	r1, sp, #8
 801c798:	4638      	mov	r0, r7
 801c79a:	f7fd feaa 	bl	801a4f2 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c79e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c7a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801c7a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c7aa:	fb13 f302 	smulbb	r3, r3, r2
 801c7ae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c7b2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c7b6:	fb11 f102 	smulbb	r1, r1, r2
 801c7ba:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c7be:	fb09 f303 	mul.w	r3, r9, r3
 801c7c2:	fb12 1100 	smlabb	r1, r2, r0, r1
 801c7c6:	220b      	movs	r2, #11
 801c7c8:	434a      	muls	r2, r1
 801c7ca:	4293      	cmp	r3, r2
 801c7cc:	dab5      	bge.n	801c73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c7ce:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c7d2:	a806      	add	r0, sp, #24
 801c7d4:	4642      	mov	r2, r8
 801c7d6:	f7ff ff45 	bl	801c664 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c7da:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c7de:	e884 0003 	stmia.w	r4, {r0, r1}
 801c7e2:	e7aa      	b.n	801c73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801c7e4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c7e4:	4b1d      	ldr	r3, [pc, #116]	; (801c85c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c7e6:	b530      	push	{r4, r5, lr}
 801c7e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c7ec:	b085      	sub	sp, #20
 801c7ee:	4b1c      	ldr	r3, [pc, #112]	; (801c860 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c7f0:	460c      	mov	r4, r1
 801c7f2:	2100      	movs	r1, #0
 801c7f4:	4605      	mov	r5, r0
 801c7f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7fa:	6820      	ldr	r0, [r4, #0]
 801c7fc:	9100      	str	r1, [sp, #0]
 801c7fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c802:	ab02      	add	r3, sp, #8
 801c804:	6861      	ldr	r1, [r4, #4]
 801c806:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c80a:	c303      	stmia	r3!, {r0, r1}
 801c80c:	4669      	mov	r1, sp
 801c80e:	a802      	add	r0, sp, #8
 801c810:	f7fc fc30 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801c814:	ab02      	add	r3, sp, #8
 801c816:	cb03      	ldmia	r3!, {r0, r1}
 801c818:	4b12      	ldr	r3, [pc, #72]	; (801c864 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c81a:	6020      	str	r0, [r4, #0]
 801c81c:	6818      	ldr	r0, [r3, #0]
 801c81e:	6061      	str	r1, [r4, #4]
 801c820:	b138      	cbz	r0, 801c832 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c822:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801c826:	b133      	cbz	r3, 801c836 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c828:	6821      	ldr	r1, [r4, #0]
 801c82a:	4628      	mov	r0, r5
 801c82c:	6862      	ldr	r2, [r4, #4]
 801c82e:	f7ff ff59 	bl	801c6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c832:	b005      	add	sp, #20
 801c834:	bd30      	pop	{r4, r5, pc}
 801c836:	6803      	ldr	r3, [r0, #0]
 801c838:	4621      	mov	r1, r4
 801c83a:	689b      	ldr	r3, [r3, #8]
 801c83c:	4798      	blx	r3
 801c83e:	4b0a      	ldr	r3, [pc, #40]	; (801c868 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c840:	6818      	ldr	r0, [r3, #0]
 801c842:	b118      	cbz	r0, 801c84c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c844:	6803      	ldr	r3, [r0, #0]
 801c846:	4621      	mov	r1, r4
 801c848:	689b      	ldr	r3, [r3, #8]
 801c84a:	4798      	blx	r3
 801c84c:	4b07      	ldr	r3, [pc, #28]	; (801c86c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c84e:	4621      	mov	r1, r4
 801c850:	6818      	ldr	r0, [r3, #0]
 801c852:	6803      	ldr	r3, [r0, #0]
 801c854:	695b      	ldr	r3, [r3, #20]
 801c856:	4798      	blx	r3
 801c858:	e7eb      	b.n	801c832 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c85a:	bf00      	nop
 801c85c:	2000bee2 	.word	0x2000bee2
 801c860:	2000bee4 	.word	0x2000bee4
 801c864:	2000bf6c 	.word	0x2000bf6c
 801c868:	2000bf68 	.word	0x2000bf68
 801c86c:	2000bef0 	.word	0x2000bef0

0801c870 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c874:	4604      	mov	r4, r0
 801c876:	b09b      	sub	sp, #108	; 0x6c
 801c878:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801c87c:	b129      	cbz	r1, 801c88a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c87e:	2300      	movs	r3, #0
 801c880:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c884:	b01b      	add	sp, #108	; 0x6c
 801c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c88a:	4baf      	ldr	r3, [pc, #700]	; (801cb48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	b33b      	cbz	r3, 801c8e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c890:	4dae      	ldr	r5, [pc, #696]	; (801cb4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c892:	4628      	mov	r0, r5
 801c894:	f7fc fc32 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 801c898:	4606      	mov	r6, r0
 801c89a:	bb08      	cbnz	r0, 801c8e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c89c:	4628      	mov	r0, r5
 801c89e:	f7ff fce9 	bl	801c274 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c8a2:	6829      	ldr	r1, [r5, #0]
 801c8a4:	686a      	ldr	r2, [r5, #4]
 801c8a6:	4620      	mov	r0, r4
 801c8a8:	f7ff ff1c 	bl	801c6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c8ac:	802e      	strh	r6, [r5, #0]
 801c8ae:	806e      	strh	r6, [r5, #2]
 801c8b0:	80ae      	strh	r6, [r5, #4]
 801c8b2:	80ee      	strh	r6, [r5, #6]
 801c8b4:	4fa6      	ldr	r7, [pc, #664]	; (801cb50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c8b6:	a809      	add	r0, sp, #36	; 0x24
 801c8b8:	f7ff fe87 	bl	801c5ca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c8bc:	883d      	ldrh	r5, [r7, #0]
 801c8be:	462e      	mov	r6, r5
 801c8c0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c8c4:	42b3      	cmp	r3, r6
 801c8c6:	d910      	bls.n	801c8ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801c8c8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c8cc:	3601      	adds	r6, #1
 801c8ce:	a809      	add	r0, sp, #36	; 0x24
 801c8d0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c8d4:	b2b6      	uxth	r6, r6
 801c8d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c8da:	f7ff fee1 	bl	801c6a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c8de:	e7ef      	b.n	801c8c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801c8e0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d1e5      	bne.n	801c8b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801c8e8:	e7cc      	b.n	801c884 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c8ea:	462e      	mov	r6, r5
 801c8ec:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c8f0:	42b3      	cmp	r3, r6
 801c8f2:	d90b      	bls.n	801c90c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c8f4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c8f8:	3601      	adds	r6, #1
 801c8fa:	4620      	mov	r0, r4
 801c8fc:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c900:	b2b6      	uxth	r6, r6
 801c902:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c906:	f7ff feed 	bl	801c6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c90a:	e7ef      	b.n	801c8ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801c90c:	4e91      	ldr	r6, [pc, #580]	; (801cb54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c90e:	6833      	ldr	r3, [r6, #0]
 801c910:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c914:	2b01      	cmp	r3, #1
 801c916:	f040 8092 	bne.w	801ca3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801c91a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c91e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801c922:	f04f 0900 	mov.w	r9, #0
 801c926:	33aa      	adds	r3, #170	; 0xaa
 801c928:	42a8      	cmp	r0, r5
 801c92a:	f103 0308 	add.w	r3, r3, #8
 801c92e:	dd0a      	ble.n	801c946 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801c930:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c934:	3501      	adds	r5, #1
 801c936:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c93a:	440a      	add	r2, r1
 801c93c:	b212      	sxth	r2, r2
 801c93e:	4591      	cmp	r9, r2
 801c940:	bfb8      	it	lt
 801c942:	4691      	movlt	r9, r2
 801c944:	e7f0      	b.n	801c928 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801c946:	4b84      	ldr	r3, [pc, #528]	; (801cb58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801c948:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801cb60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801c94c:	881d      	ldrh	r5, [r3, #0]
 801c94e:	2300      	movs	r3, #0
 801c950:	2d0f      	cmp	r5, #15
 801c952:	bf8c      	ite	hi
 801c954:	08ed      	lsrhi	r5, r5, #3
 801c956:	2501      	movls	r5, #1
 801c958:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c95c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c960:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c964:	6830      	ldr	r0, [r6, #0]
 801c966:	440b      	add	r3, r1
 801c968:	6802      	ldr	r2, [r0, #0]
 801c96a:	b21b      	sxth	r3, r3
 801c96c:	4599      	cmp	r9, r3
 801c96e:	dd49      	ble.n	801ca04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801c970:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801c974:	4798      	blx	r3
 801c976:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c97a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c97e:	4413      	add	r3, r2
 801c980:	b21b      	sxth	r3, r3
 801c982:	195a      	adds	r2, r3, r5
 801c984:	4290      	cmp	r0, r2
 801c986:	da07      	bge.n	801c998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801c988:	4581      	cmp	r9, r0
 801c98a:	dd05      	ble.n	801c998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801c98c:	4298      	cmp	r0, r3
 801c98e:	da33      	bge.n	801c9f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801c990:	2b00      	cmp	r3, #0
 801c992:	dd31      	ble.n	801c9f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801c994:	4648      	mov	r0, r9
 801c996:	e004      	b.n	801c9a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801c998:	4298      	cmp	r0, r3
 801c99a:	dbfb      	blt.n	801c994 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801c99c:	4548      	cmp	r0, r9
 801c99e:	bfa8      	it	ge
 801c9a0:	4648      	movge	r0, r9
 801c9a2:	f9b8 2000 	ldrsh.w	r2, [r8]
 801c9a6:	2100      	movs	r1, #0
 801c9a8:	1ac0      	subs	r0, r0, r3
 801c9aa:	f8b7 a000 	ldrh.w	sl, [r7]
 801c9ae:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c9b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c9b6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c9ba:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c9be:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c9c2:	4553      	cmp	r3, sl
 801c9c4:	d9ca      	bls.n	801c95c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801c9c6:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c9ca:	ab07      	add	r3, sp, #28
 801c9cc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c9d0:	6851      	ldr	r1, [r2, #4]
 801c9d2:	c303      	stmia	r3!, {r0, r1}
 801c9d4:	a807      	add	r0, sp, #28
 801c9d6:	a905      	add	r1, sp, #20
 801c9d8:	f7fc fb4c 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801c9dc:	a807      	add	r0, sp, #28
 801c9de:	f7fc fb8d 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 801c9e2:	b920      	cbnz	r0, 801c9ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801c9e4:	6823      	ldr	r3, [r4, #0]
 801c9e6:	a907      	add	r1, sp, #28
 801c9e8:	4620      	mov	r0, r4
 801c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9ec:	4798      	blx	r3
 801c9ee:	f10a 0a01 	add.w	sl, sl, #1
 801c9f2:	fa1f fa8a 	uxth.w	sl, sl
 801c9f6:	e7e2      	b.n	801c9be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801c9f8:	6830      	ldr	r0, [r6, #0]
 801c9fa:	2101      	movs	r1, #1
 801c9fc:	6803      	ldr	r3, [r0, #0]
 801c9fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ca00:	4798      	blx	r3
 801ca02:	e7ab      	b.n	801c95c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801ca04:	69d3      	ldr	r3, [r2, #28]
 801ca06:	4798      	blx	r3
 801ca08:	4b54      	ldr	r3, [pc, #336]	; (801cb5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801ca0a:	781b      	ldrb	r3, [r3, #0]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	f43f af39 	beq.w	801c884 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ca12:	2300      	movs	r3, #0
 801ca14:	883d      	ldrh	r5, [r7, #0]
 801ca16:	34ea      	adds	r4, #234	; 0xea
 801ca18:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801ca1c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801ca20:	42ab      	cmp	r3, r5
 801ca22:	f67f af2f 	bls.w	801c884 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ca26:	ab1a      	add	r3, sp, #104	; 0x68
 801ca28:	4620      	mov	r0, r4
 801ca2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ca2e:	3501      	adds	r5, #1
 801ca30:	3b44      	subs	r3, #68	; 0x44
 801ca32:	b2ad      	uxth	r5, r5
 801ca34:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ca38:	f7ff fe32 	bl	801c6a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ca3c:	e7ee      	b.n	801ca1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801ca3e:	2b02      	cmp	r3, #2
 801ca40:	d16a      	bne.n	801cb18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801ca42:	f8df a120 	ldr.w	sl, [pc, #288]	; 801cb64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801ca46:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ca4a:	42ab      	cmp	r3, r5
 801ca4c:	d9dc      	bls.n	801ca08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801ca4e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ca52:	ab03      	add	r3, sp, #12
 801ca54:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ca58:	6851      	ldr	r1, [r2, #4]
 801ca5a:	c303      	stmia	r3!, {r0, r1}
 801ca5c:	f89a 3000 	ldrb.w	r3, [sl]
 801ca60:	2b01      	cmp	r3, #1
 801ca62:	d102      	bne.n	801ca6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801ca64:	a803      	add	r0, sp, #12
 801ca66:	f7ff fc5f 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca6a:	a803      	add	r0, sp, #12
 801ca6c:	f7fc fb46 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca70:	2800      	cmp	r0, #0
 801ca72:	d14a      	bne.n	801cb0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801ca74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ca78:	f10d 0914 	add.w	r9, sp, #20
 801ca7c:	f10d 081c 	add.w	r8, sp, #28
 801ca80:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ca84:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ca88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801ca8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca90:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ca94:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ca98:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801ca9c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801caa0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801caa4:	44dc      	add	ip, fp
 801caa6:	6830      	ldr	r0, [r6, #0]
 801caa8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801caac:	ebac 0c02 	sub.w	ip, ip, r2
 801cab0:	f8d0 e000 	ldr.w	lr, [r0]
 801cab4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801cab8:	fa1f fc8c 	uxth.w	ip, ip
 801cabc:	f8cd c000 	str.w	ip, [sp]
 801cac0:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801cac4:	47d8      	blx	fp
 801cac6:	f89a 3000 	ldrb.w	r3, [sl]
 801caca:	f8ad 001a 	strh.w	r0, [sp, #26]
 801cace:	2b01      	cmp	r3, #1
 801cad0:	d11e      	bne.n	801cb10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801cad2:	e899 0003 	ldmia.w	r9, {r0, r1}
 801cad6:	e888 0003 	stmia.w	r8, {r0, r1}
 801cada:	4640      	mov	r0, r8
 801cadc:	f7ff fbca 	bl	801c274 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801cae0:	6823      	ldr	r3, [r4, #0]
 801cae2:	4641      	mov	r1, r8
 801cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cae6:	4620      	mov	r0, r4
 801cae8:	4798      	blx	r3
 801caea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801caee:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801caf2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801caf6:	4413      	add	r3, r2
 801caf8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801cafc:	440a      	add	r2, r1
 801cafe:	b21b      	sxth	r3, r3
 801cb00:	b212      	sxth	r2, r2
 801cb02:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb06:	4293      	cmp	r3, r2
 801cb08:	dbc6      	blt.n	801ca98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801cb0a:	3501      	adds	r5, #1
 801cb0c:	b2ad      	uxth	r5, r5
 801cb0e:	e79a      	b.n	801ca46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801cb10:	6823      	ldr	r3, [r4, #0]
 801cb12:	4649      	mov	r1, r9
 801cb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb16:	e7e6      	b.n	801cae6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801cb18:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cb1c:	42ab      	cmp	r3, r5
 801cb1e:	f67f af73 	bls.w	801ca08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801cb22:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801cb26:	ab07      	add	r3, sp, #28
 801cb28:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801cb2c:	6851      	ldr	r1, [r2, #4]
 801cb2e:	c303      	stmia	r3!, {r0, r1}
 801cb30:	a807      	add	r0, sp, #28
 801cb32:	f7fc fae3 	bl	80190fc <_ZNK8touchgfx4Rect7isEmptyEv>
 801cb36:	b920      	cbnz	r0, 801cb42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801cb38:	6823      	ldr	r3, [r4, #0]
 801cb3a:	a907      	add	r1, sp, #28
 801cb3c:	4620      	mov	r0, r4
 801cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb40:	4798      	blx	r3
 801cb42:	3501      	adds	r5, #1
 801cb44:	b2ad      	uxth	r5, r5
 801cb46:	e7e7      	b.n	801cb18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801cb48:	2000bf68 	.word	0x2000bf68
 801cb4c:	2000bf74 	.word	0x2000bf74
 801cb50:	20000080 	.word	0x20000080
 801cb54:	2000bef0 	.word	0x2000bef0
 801cb58:	2000bee4 	.word	0x2000bee4
 801cb5c:	2000beec 	.word	0x2000beec
 801cb60:	2000bee2 	.word	0x2000bee2
 801cb64:	2000bee6 	.word	0x2000bee6

0801cb68 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801cb68:	4b03      	ldr	r3, [pc, #12]	; (801cb78 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	801a      	strh	r2, [r3, #0]
 801cb6e:	805a      	strh	r2, [r3, #2]
 801cb70:	809a      	strh	r2, [r3, #4]
 801cb72:	80da      	strh	r2, [r3, #6]
 801cb74:	4770      	bx	lr
 801cb76:	bf00      	nop
 801cb78:	2000bf74 	.word	0x2000bf74

0801cb7c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801cb7c:	2000      	movs	r0, #0
 801cb7e:	4770      	bx	lr

0801cb80 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801cb80:	2000      	movs	r0, #0
 801cb82:	4770      	bx	lr

0801cb84 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801cb84:	b508      	push	{r3, lr}
 801cb86:	6803      	ldr	r3, [r0, #0]
 801cb88:	68db      	ldr	r3, [r3, #12]
 801cb8a:	4798      	blx	r3
 801cb8c:	b128      	cbz	r0, 801cb9a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801cb8e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801cb92:	7a80      	ldrb	r0, [r0, #10]
 801cb94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cb98:	4318      	orrs	r0, r3
 801cb9a:	bd08      	pop	{r3, pc}

0801cb9c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801cb9c:	b40e      	push	{r1, r2, r3}
 801cb9e:	b533      	push	{r0, r1, r4, r5, lr}
 801cba0:	ab05      	add	r3, sp, #20
 801cba2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cba6:	9301      	str	r3, [sp, #4]
 801cba8:	4b0a      	ldr	r3, [pc, #40]	; (801cbd4 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801cbaa:	685c      	ldr	r4, [r3, #4]
 801cbac:	1061      	asrs	r1, r4, #1
 801cbae:	07e4      	lsls	r4, r4, #31
 801cbb0:	eb00 0501 	add.w	r5, r0, r1
 801cbb4:	bf46      	itte	mi
 801cbb6:	681b      	ldrmi	r3, [r3, #0]
 801cbb8:	5841      	ldrmi	r1, [r0, r1]
 801cbba:	681c      	ldrpl	r4, [r3, #0]
 801cbbc:	4628      	mov	r0, r5
 801cbbe:	bf48      	it	mi
 801cbc0:	58cc      	ldrmi	r4, [r1, r3]
 801cbc2:	2100      	movs	r1, #0
 801cbc4:	9b01      	ldr	r3, [sp, #4]
 801cbc6:	47a0      	blx	r4
 801cbc8:	b002      	add	sp, #8
 801cbca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cbce:	b003      	add	sp, #12
 801cbd0:	4770      	bx	lr
 801cbd2:	bf00      	nop
 801cbd4:	20000028 	.word	0x20000028

0801cbd8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801cbd8:	b40c      	push	{r2, r3}
 801cbda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cbdc:	ab06      	add	r3, sp, #24
 801cbde:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbe2:	9301      	str	r3, [sp, #4]
 801cbe4:	4b09      	ldr	r3, [pc, #36]	; (801cc0c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801cbe6:	685d      	ldr	r5, [r3, #4]
 801cbe8:	106c      	asrs	r4, r5, #1
 801cbea:	07ed      	lsls	r5, r5, #31
 801cbec:	eb00 0604 	add.w	r6, r0, r4
 801cbf0:	bf45      	ittet	mi
 801cbf2:	681b      	ldrmi	r3, [r3, #0]
 801cbf4:	5900      	ldrmi	r0, [r0, r4]
 801cbf6:	681c      	ldrpl	r4, [r3, #0]
 801cbf8:	58c4      	ldrmi	r4, [r0, r3]
 801cbfa:	4630      	mov	r0, r6
 801cbfc:	9b01      	ldr	r3, [sp, #4]
 801cbfe:	47a0      	blx	r4
 801cc00:	b002      	add	sp, #8
 801cc02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc06:	b002      	add	sp, #8
 801cc08:	4770      	bx	lr
 801cc0a:	bf00      	nop
 801cc0c:	20000028 	.word	0x20000028

0801cc10 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cc10:	b40e      	push	{r1, r2, r3}
 801cc12:	b530      	push	{r4, r5, lr}
 801cc14:	b098      	sub	sp, #96	; 0x60
 801cc16:	4604      	mov	r4, r0
 801cc18:	ab1b      	add	r3, sp, #108	; 0x6c
 801cc1a:	a802      	add	r0, sp, #8
 801cc1c:	f853 5b04 	ldr.w	r5, [r3], #4
 801cc20:	9301      	str	r3, [sp, #4]
 801cc22:	f001 f871 	bl	801dd08 <_ZN8touchgfx12TextProviderC1Ev>
 801cc26:	6823      	ldr	r3, [r4, #0]
 801cc28:	4620      	mov	r0, r4
 801cc2a:	2401      	movs	r4, #1
 801cc2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc2e:	4798      	blx	r3
 801cc30:	9a01      	ldr	r2, [sp, #4]
 801cc32:	4603      	mov	r3, r0
 801cc34:	4629      	mov	r1, r5
 801cc36:	a802      	add	r0, sp, #8
 801cc38:	f001 f883 	bl	801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801cc3c:	a802      	add	r0, sp, #8
 801cc3e:	f001 f8b9 	bl	801ddb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cc42:	b2a3      	uxth	r3, r4
 801cc44:	b138      	cbz	r0, 801cc56 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801cc46:	280a      	cmp	r0, #10
 801cc48:	a802      	add	r0, sp, #8
 801cc4a:	bf04      	itt	eq
 801cc4c:	3301      	addeq	r3, #1
 801cc4e:	b21c      	sxtheq	r4, r3
 801cc50:	f001 f8b0 	bl	801ddb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cc54:	e7f5      	b.n	801cc42 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801cc56:	4618      	mov	r0, r3
 801cc58:	b018      	add	sp, #96	; 0x60
 801cc5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cc5e:	b003      	add	sp, #12
 801cc60:	4770      	bx	lr
	...

0801cc64 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801cc64:	b40e      	push	{r1, r2, r3}
 801cc66:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc68:	b098      	sub	sp, #96	; 0x60
 801cc6a:	4605      	mov	r5, r0
 801cc6c:	4f25      	ldr	r7, [pc, #148]	; (801cd04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801cc6e:	ab1d      	add	r3, sp, #116	; 0x74
 801cc70:	a802      	add	r0, sp, #8
 801cc72:	ae18      	add	r6, sp, #96	; 0x60
 801cc74:	f853 4b04 	ldr.w	r4, [r3], #4
 801cc78:	9300      	str	r3, [sp, #0]
 801cc7a:	f001 f845 	bl	801dd08 <_ZN8touchgfx12TextProviderC1Ev>
 801cc7e:	682b      	ldr	r3, [r5, #0]
 801cc80:	4628      	mov	r0, r5
 801cc82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc84:	4798      	blx	r3
 801cc86:	4621      	mov	r1, r4
 801cc88:	2400      	movs	r4, #0
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	9a00      	ldr	r2, [sp, #0]
 801cc8e:	a802      	add	r0, sp, #8
 801cc90:	f001 f857 	bl	801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801cc94:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801cc98:	462a      	mov	r2, r5
 801cc9a:	4633      	mov	r3, r6
 801cc9c:	4621      	mov	r1, r4
 801cc9e:	a802      	add	r0, sp, #8
 801cca0:	f001 f9b4 	bl	801e00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cca4:	b340      	cbz	r0, 801ccf8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801cca6:	280a      	cmp	r0, #10
 801cca8:	d01f      	beq.n	801ccea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ccaa:	9901      	ldr	r1, [sp, #4]
 801ccac:	b1e9      	cbz	r1, 801ccea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ccae:	7b4b      	ldrb	r3, [r1, #13]
 801ccb0:	f891 c008 	ldrb.w	ip, [r1, #8]
 801ccb4:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ccb8:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801ccbc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801ccc0:	79c9      	ldrb	r1, [r1, #7]
 801ccc2:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801ccc6:	bf18      	it	ne
 801ccc8:	4638      	movne	r0, r7
 801ccca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ccce:	bf08      	it	eq
 801ccd0:	2000      	moveq	r0, #0
 801ccd2:	88aa      	ldrh	r2, [r5, #4]
 801ccd4:	ea41 010e 	orr.w	r1, r1, lr
 801ccd8:	ea43 030c 	orr.w	r3, r3, ip
 801ccdc:	440a      	add	r2, r1
 801ccde:	4303      	orrs	r3, r0
 801cce0:	1ad3      	subs	r3, r2, r3
 801cce2:	b29b      	uxth	r3, r3
 801cce4:	42a3      	cmp	r3, r4
 801cce6:	bfc8      	it	gt
 801cce8:	b21c      	sxthgt	r4, r3
 801ccea:	4633      	mov	r3, r6
 801ccec:	462a      	mov	r2, r5
 801ccee:	2100      	movs	r1, #0
 801ccf0:	a802      	add	r0, sp, #8
 801ccf2:	f001 f98b 	bl	801e00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ccf6:	e7d5      	b.n	801cca4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801ccf8:	b2a0      	uxth	r0, r4
 801ccfa:	b018      	add	sp, #96	; 0x60
 801ccfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cd00:	b003      	add	sp, #12
 801cd02:	4770      	bx	lr
 801cd04:	fffffe00 	.word	0xfffffe00

0801cd08 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cd08:	b40e      	push	{r1, r2, r3}
 801cd0a:	b570      	push	{r4, r5, r6, lr}
 801cd0c:	b099      	sub	sp, #100	; 0x64
 801cd0e:	4604      	mov	r4, r0
 801cd10:	26ff      	movs	r6, #255	; 0xff
 801cd12:	ab1d      	add	r3, sp, #116	; 0x74
 801cd14:	a802      	add	r0, sp, #8
 801cd16:	f853 5b04 	ldr.w	r5, [r3], #4
 801cd1a:	9300      	str	r3, [sp, #0]
 801cd1c:	f000 fff4 	bl	801dd08 <_ZN8touchgfx12TextProviderC1Ev>
 801cd20:	6823      	ldr	r3, [r4, #0]
 801cd22:	4620      	mov	r0, r4
 801cd24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd26:	4798      	blx	r3
 801cd28:	4629      	mov	r1, r5
 801cd2a:	4603      	mov	r3, r0
 801cd2c:	9a00      	ldr	r2, [sp, #0]
 801cd2e:	a802      	add	r0, sp, #8
 801cd30:	ad18      	add	r5, sp, #96	; 0x60
 801cd32:	f001 f806 	bl	801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801cd36:	2100      	movs	r1, #0
 801cd38:	4622      	mov	r2, r4
 801cd3a:	a802      	add	r0, sp, #8
 801cd3c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801cd40:	462b      	mov	r3, r5
 801cd42:	f001 f963 	bl	801e00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cd46:	b190      	cbz	r0, 801cd6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801cd48:	280a      	cmp	r0, #10
 801cd4a:	d009      	beq.n	801cd60 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801cd4c:	9a01      	ldr	r2, [sp, #4]
 801cd4e:	b13a      	cbz	r2, 801cd60 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801cd50:	7923      	ldrb	r3, [r4, #4]
 801cd52:	7a12      	ldrb	r2, [r2, #8]
 801cd54:	1a9b      	subs	r3, r3, r2
 801cd56:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801cd5a:	429e      	cmp	r6, r3
 801cd5c:	bf28      	it	cs
 801cd5e:	461e      	movcs	r6, r3
 801cd60:	462b      	mov	r3, r5
 801cd62:	4622      	mov	r2, r4
 801cd64:	2100      	movs	r1, #0
 801cd66:	a802      	add	r0, sp, #8
 801cd68:	f001 f950 	bl	801e00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cd6c:	e7eb      	b.n	801cd46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801cd6e:	4630      	mov	r0, r6
 801cd70:	b019      	add	sp, #100	; 0x64
 801cd72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd76:	b003      	add	sp, #12
 801cd78:	4770      	bx	lr

0801cd7a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cd7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd7e:	b099      	sub	sp, #100	; 0x64
 801cd80:	4606      	mov	r6, r0
 801cd82:	4614      	mov	r4, r2
 801cd84:	4688      	mov	r8, r1
 801cd86:	a802      	add	r0, sp, #8
 801cd88:	461d      	mov	r5, r3
 801cd8a:	f04f 0b00 	mov.w	fp, #0
 801cd8e:	f000 ffbb 	bl	801dd08 <_ZN8touchgfx12TextProviderC1Ev>
 801cd92:	6833      	ldr	r3, [r6, #0]
 801cd94:	4630      	mov	r0, r6
 801cd96:	465f      	mov	r7, fp
 801cd98:	46da      	mov	sl, fp
 801cd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd9c:	46d9      	mov	r9, fp
 801cd9e:	4798      	blx	r3
 801cda0:	462a      	mov	r2, r5
 801cda2:	4603      	mov	r3, r0
 801cda4:	4621      	mov	r1, r4
 801cda6:	a802      	add	r0, sp, #8
 801cda8:	f000 ffcb 	bl	801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801cdac:	ab01      	add	r3, sp, #4
 801cdae:	4632      	mov	r2, r6
 801cdb0:	4641      	mov	r1, r8
 801cdb2:	a802      	add	r0, sp, #8
 801cdb4:	f8cd 9004 	str.w	r9, [sp, #4]
 801cdb8:	f001 f928 	bl	801e00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cdbc:	4605      	mov	r5, r0
 801cdbe:	b108      	cbz	r0, 801cdc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801cdc0:	280a      	cmp	r0, #10
 801cdc2:	d10b      	bne.n	801cddc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801cdc4:	4557      	cmp	r7, sl
 801cdc6:	bf38      	it	cc
 801cdc8:	4657      	movcc	r7, sl
 801cdca:	f04f 0a00 	mov.w	sl, #0
 801cdce:	b91d      	cbnz	r5, 801cdd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801cdd0:	4638      	mov	r0, r7
 801cdd2:	b019      	add	sp, #100	; 0x64
 801cdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdd8:	46ab      	mov	fp, r5
 801cdda:	e7e7      	b.n	801cdac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801cddc:	9a01      	ldr	r2, [sp, #4]
 801cdde:	2a00      	cmp	r2, #0
 801cde0:	d0fa      	beq.n	801cdd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801cde2:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801cde6:	4659      	mov	r1, fp
 801cde8:	6833      	ldr	r3, [r6, #0]
 801cdea:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801cdee:	7a94      	ldrb	r4, [r2, #10]
 801cdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cdf2:	4304      	orrs	r4, r0
 801cdf4:	4630      	mov	r0, r6
 801cdf6:	8895      	ldrh	r5, [r2, #4]
 801cdf8:	4798      	blx	r3
 801cdfa:	4420      	add	r0, r4
 801cdfc:	4450      	add	r0, sl
 801cdfe:	fa1f fa80 	uxth.w	sl, r0
 801ce02:	e7e4      	b.n	801cdce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801ce04 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ce04:	b513      	push	{r0, r1, r4, lr}
 801ce06:	1d01      	adds	r1, r0, #4
 801ce08:	4603      	mov	r3, r0
 801ce0a:	466a      	mov	r2, sp
 801ce0c:	c903      	ldmia	r1, {r0, r1}
 801ce0e:	e882 0003 	stmia.w	r2, {r0, r1}
 801ce12:	2100      	movs	r1, #0
 801ce14:	4618      	mov	r0, r3
 801ce16:	9100      	str	r1, [sp, #0]
 801ce18:	6819      	ldr	r1, [r3, #0]
 801ce1a:	690c      	ldr	r4, [r1, #16]
 801ce1c:	4611      	mov	r1, r2
 801ce1e:	47a0      	blx	r4
 801ce20:	b002      	add	sp, #8
 801ce22:	bd10      	pop	{r4, pc}

0801ce24 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ce24:	b538      	push	{r3, r4, r5, lr}
 801ce26:	680b      	ldr	r3, [r1, #0]
 801ce28:	460c      	mov	r4, r1
 801ce2a:	4605      	mov	r5, r0
 801ce2c:	68db      	ldr	r3, [r3, #12]
 801ce2e:	4798      	blx	r3
 801ce30:	6823      	ldr	r3, [r4, #0]
 801ce32:	4620      	mov	r0, r4
 801ce34:	4629      	mov	r1, r5
 801ce36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce38:	4798      	blx	r3
 801ce3a:	4628      	mov	r0, r5
 801ce3c:	bd38      	pop	{r3, r4, r5, pc}

0801ce3e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ce3e:	b410      	push	{r4}
 801ce40:	880a      	ldrh	r2, [r1, #0]
 801ce42:	8884      	ldrh	r4, [r0, #4]
 801ce44:	4422      	add	r2, r4
 801ce46:	800a      	strh	r2, [r1, #0]
 801ce48:	884a      	ldrh	r2, [r1, #2]
 801ce4a:	88c4      	ldrh	r4, [r0, #6]
 801ce4c:	4422      	add	r2, r4
 801ce4e:	804a      	strh	r2, [r1, #2]
 801ce50:	6940      	ldr	r0, [r0, #20]
 801ce52:	b120      	cbz	r0, 801ce5e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ce54:	6803      	ldr	r3, [r0, #0]
 801ce56:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce5c:	4718      	bx	r3
 801ce5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce62:	4770      	bx	lr

0801ce64 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ce64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce66:	460b      	mov	r3, r1
 801ce68:	b085      	sub	sp, #20
 801ce6a:	4604      	mov	r4, r0
 801ce6c:	b901      	cbnz	r1, 801ce70 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ce6e:	b1fa      	cbz	r2, 801ceb0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801ce70:	1d27      	adds	r7, r4, #4
 801ce72:	466e      	mov	r6, sp
 801ce74:	ad02      	add	r5, sp, #8
 801ce76:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ce7a:	e886 0003 	stmia.w	r6, {r0, r1}
 801ce7e:	88e1      	ldrh	r1, [r4, #6]
 801ce80:	4620      	mov	r0, r4
 801ce82:	440a      	add	r2, r1
 801ce84:	88a1      	ldrh	r1, [r4, #4]
 801ce86:	4419      	add	r1, r3
 801ce88:	6823      	ldr	r3, [r4, #0]
 801ce8a:	b212      	sxth	r2, r2
 801ce8c:	b209      	sxth	r1, r1
 801ce8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce90:	4798      	blx	r3
 801ce92:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ce96:	e885 0003 	stmia.w	r5, {r0, r1}
 801ce9a:	6960      	ldr	r0, [r4, #20]
 801ce9c:	b150      	cbz	r0, 801ceb4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801ce9e:	6803      	ldr	r3, [r0, #0]
 801cea0:	4631      	mov	r1, r6
 801cea2:	691b      	ldr	r3, [r3, #16]
 801cea4:	4798      	blx	r3
 801cea6:	6960      	ldr	r0, [r4, #20]
 801cea8:	6803      	ldr	r3, [r0, #0]
 801ceaa:	691b      	ldr	r3, [r3, #16]
 801ceac:	4629      	mov	r1, r5
 801ceae:	4798      	blx	r3
 801ceb0:	b005      	add	sp, #20
 801ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ceb4:	f7ff fb78 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 801ceb8:	6803      	ldr	r3, [r0, #0]
 801ceba:	4631      	mov	r1, r6
 801cebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cebe:	4798      	blx	r3
 801cec0:	f7ff fb72 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 801cec4:	6803      	ldr	r3, [r0, #0]
 801cec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cec8:	e7f0      	b.n	801ceac <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801ceca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ceca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cecc:	8882      	ldrh	r2, [r0, #4]
 801cece:	4605      	mov	r5, r0
 801ced0:	880b      	ldrh	r3, [r1, #0]
 801ced2:	460c      	mov	r4, r1
 801ced4:	4413      	add	r3, r2
 801ced6:	800b      	strh	r3, [r1, #0]
 801ced8:	884b      	ldrh	r3, [r1, #2]
 801ceda:	88c2      	ldrh	r2, [r0, #6]
 801cedc:	4413      	add	r3, r2
 801cede:	4602      	mov	r2, r0
 801cee0:	804b      	strh	r3, [r1, #2]
 801cee2:	466b      	mov	r3, sp
 801cee4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801cee8:	6851      	ldr	r1, [r2, #4]
 801ceea:	c303      	stmia	r3!, {r0, r1}
 801ceec:	4621      	mov	r1, r4
 801ceee:	4668      	mov	r0, sp
 801cef0:	f7fc f8c0 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801cef4:	466b      	mov	r3, sp
 801cef6:	cb03      	ldmia	r3!, {r0, r1}
 801cef8:	6020      	str	r0, [r4, #0]
 801cefa:	6061      	str	r1, [r4, #4]
 801cefc:	6968      	ldr	r0, [r5, #20]
 801cefe:	b128      	cbz	r0, 801cf0c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801cf00:	6803      	ldr	r3, [r0, #0]
 801cf02:	691b      	ldr	r3, [r3, #16]
 801cf04:	4621      	mov	r1, r4
 801cf06:	4798      	blx	r3
 801cf08:	b003      	add	sp, #12
 801cf0a:	bd30      	pop	{r4, r5, pc}
 801cf0c:	f7ff fb4c 	bl	801c5a8 <_ZN8touchgfx11Application11getInstanceEv>
 801cf10:	6803      	ldr	r3, [r0, #0]
 801cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf14:	e7f6      	b.n	801cf04 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801cf16 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801cf16:	b570      	push	{r4, r5, r6, lr}
 801cf18:	8882      	ldrh	r2, [r0, #4]
 801cf1a:	460c      	mov	r4, r1
 801cf1c:	880b      	ldrh	r3, [r1, #0]
 801cf1e:	4605      	mov	r5, r0
 801cf20:	4413      	add	r3, r2
 801cf22:	800b      	strh	r3, [r1, #0]
 801cf24:	884b      	ldrh	r3, [r1, #2]
 801cf26:	88c2      	ldrh	r2, [r0, #6]
 801cf28:	4413      	add	r3, r2
 801cf2a:	804b      	strh	r3, [r1, #2]
 801cf2c:	1d01      	adds	r1, r0, #4
 801cf2e:	4620      	mov	r0, r4
 801cf30:	f7fc f8a0 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801cf34:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cf38:	b153      	cbz	r3, 801cf50 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801cf3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cf3e:	b13b      	cbz	r3, 801cf50 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801cf40:	6968      	ldr	r0, [r5, #20]
 801cf42:	b128      	cbz	r0, 801cf50 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801cf44:	6803      	ldr	r3, [r0, #0]
 801cf46:	4621      	mov	r1, r4
 801cf48:	6a1b      	ldr	r3, [r3, #32]
 801cf4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf4e:	4718      	bx	r3
 801cf50:	bd70      	pop	{r4, r5, r6, pc}

0801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cf52:	b510      	push	{r4, lr}
 801cf54:	2300      	movs	r3, #0
 801cf56:	4604      	mov	r4, r0
 801cf58:	4608      	mov	r0, r1
 801cf5a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801cf5e:	8023      	strh	r3, [r4, #0]
 801cf60:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cf64:	8063      	strh	r3, [r4, #2]
 801cf66:	6803      	ldr	r3, [r0, #0]
 801cf68:	80a1      	strh	r1, [r4, #4]
 801cf6a:	4621      	mov	r1, r4
 801cf6c:	80e2      	strh	r2, [r4, #6]
 801cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf70:	4798      	blx	r3
 801cf72:	4620      	mov	r0, r4
 801cf74:	bd10      	pop	{r4, pc}
	...

0801cf78 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801cf78:	b530      	push	{r4, r5, lr}
 801cf7a:	8083      	strh	r3, [r0, #4]
 801cf7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801cf80:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801cf84:	7183      	strb	r3, [r0, #6]
 801cf86:	79c3      	ldrb	r3, [r0, #7]
 801cf88:	6101      	str	r1, [r0, #16]
 801cf8a:	f365 0306 	bfi	r3, r5, #0, #7
 801cf8e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801cf92:	8282      	strh	r2, [r0, #20]
 801cf94:	f365 13c7 	bfi	r3, r5, #7, #1
 801cf98:	71c3      	strb	r3, [r0, #7]
 801cf9a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801cf9e:	7203      	strb	r3, [r0, #8]
 801cfa0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801cfa4:	7243      	strb	r3, [r0, #9]
 801cfa6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cfaa:	8143      	strh	r3, [r0, #10]
 801cfac:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cfb0:	8183      	strh	r3, [r0, #12]
 801cfb2:	4b01      	ldr	r3, [pc, #4]	; (801cfb8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801cfb4:	6003      	str	r3, [r0, #0]
 801cfb6:	bd30      	pop	{r4, r5, pc}
 801cfb8:	0802ca3c 	.word	0x0802ca3c

0801cfbc <_ZNK8touchgfx9ConstFont4findEt>:
 801cfbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfbe:	8a84      	ldrh	r4, [r0, #20]
 801cfc0:	2500      	movs	r5, #0
 801cfc2:	260e      	movs	r6, #14
 801cfc4:	3c01      	subs	r4, #1
 801cfc6:	42a5      	cmp	r5, r4
 801cfc8:	dc0c      	bgt.n	801cfe4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801cfca:	192a      	adds	r2, r5, r4
 801cfcc:	6903      	ldr	r3, [r0, #16]
 801cfce:	1052      	asrs	r2, r2, #1
 801cfd0:	fb06 3302 	mla	r3, r6, r2, r3
 801cfd4:	889f      	ldrh	r7, [r3, #4]
 801cfd6:	428f      	cmp	r7, r1
 801cfd8:	d901      	bls.n	801cfde <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801cfda:	1e54      	subs	r4, r2, #1
 801cfdc:	e7f3      	b.n	801cfc6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801cfde:	d202      	bcs.n	801cfe6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801cfe0:	1c55      	adds	r5, r2, #1
 801cfe2:	e7f0      	b.n	801cfc6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801cfe4:	2300      	movs	r3, #0
 801cfe6:	4618      	mov	r0, r3
 801cfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cfea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801cfea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfec:	4605      	mov	r5, r0
 801cfee:	4617      	mov	r7, r2
 801cff0:	461e      	mov	r6, r3
 801cff2:	f7ff ffe3 	bl	801cfbc <_ZNK8touchgfx9ConstFont4findEt>
 801cff6:	b9e0      	cbnz	r0, 801d032 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801cff8:	b911      	cbnz	r1, 801d000 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801cffa:	2400      	movs	r4, #0
 801cffc:	4620      	mov	r0, r4
 801cffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d000:	290a      	cmp	r1, #10
 801d002:	d0fa      	beq.n	801cffa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d004:	682b      	ldr	r3, [r5, #0]
 801d006:	4628      	mov	r0, r5
 801d008:	691b      	ldr	r3, [r3, #16]
 801d00a:	4798      	blx	r3
 801d00c:	4601      	mov	r1, r0
 801d00e:	4628      	mov	r0, r5
 801d010:	f7ff ffd4 	bl	801cfbc <_ZNK8touchgfx9ConstFont4findEt>
 801d014:	4604      	mov	r4, r0
 801d016:	2800      	cmp	r0, #0
 801d018:	d0ef      	beq.n	801cffa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d01a:	682b      	ldr	r3, [r5, #0]
 801d01c:	4621      	mov	r1, r4
 801d01e:	4628      	mov	r0, r5
 801d020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d022:	4798      	blx	r3
 801d024:	6038      	str	r0, [r7, #0]
 801d026:	682b      	ldr	r3, [r5, #0]
 801d028:	4628      	mov	r0, r5
 801d02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d02c:	4798      	blx	r3
 801d02e:	7030      	strb	r0, [r6, #0]
 801d030:	e7e4      	b.n	801cffc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801d032:	4604      	mov	r4, r0
 801d034:	e7f1      	b.n	801d01a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801d036 <_ZN8touchgfx6memsetEPvhm>:
 801d036:	4402      	add	r2, r0
 801d038:	4290      	cmp	r0, r2
 801d03a:	d002      	beq.n	801d042 <_ZN8touchgfx6memsetEPvhm+0xc>
 801d03c:	f800 1b01 	strb.w	r1, [r0], #1
 801d040:	e7fa      	b.n	801d038 <_ZN8touchgfx6memsetEPvhm+0x2>
 801d042:	4770      	bx	lr

0801d044 <_ZN8touchgfx3clzEl>:
 801d044:	b1e8      	cbz	r0, 801d082 <_ZN8touchgfx3clzEl+0x3e>
 801d046:	2800      	cmp	r0, #0
 801d048:	bfb8      	it	lt
 801d04a:	4240      	neglt	r0, r0
 801d04c:	0c03      	lsrs	r3, r0, #16
 801d04e:	041b      	lsls	r3, r3, #16
 801d050:	b9ab      	cbnz	r3, 801d07e <_ZN8touchgfx3clzEl+0x3a>
 801d052:	0400      	lsls	r0, r0, #16
 801d054:	2310      	movs	r3, #16
 801d056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d05a:	bf04      	itt	eq
 801d05c:	0200      	lsleq	r0, r0, #8
 801d05e:	3308      	addeq	r3, #8
 801d060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d064:	bf04      	itt	eq
 801d066:	0100      	lsleq	r0, r0, #4
 801d068:	3304      	addeq	r3, #4
 801d06a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d06e:	bf04      	itt	eq
 801d070:	0080      	lsleq	r0, r0, #2
 801d072:	3302      	addeq	r3, #2
 801d074:	2800      	cmp	r0, #0
 801d076:	bfa8      	it	ge
 801d078:	3301      	addge	r3, #1
 801d07a:	1e58      	subs	r0, r3, #1
 801d07c:	4770      	bx	lr
 801d07e:	2300      	movs	r3, #0
 801d080:	e7e9      	b.n	801d056 <_ZN8touchgfx3clzEl+0x12>
 801d082:	201f      	movs	r0, #31
 801d084:	4770      	bx	lr

0801d086 <_ZN8touchgfx6muldivElllRl>:
 801d086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d08a:	4604      	mov	r4, r0
 801d08c:	4698      	mov	r8, r3
 801d08e:	2601      	movs	r6, #1
 801d090:	f7ff ffd8 	bl	801d044 <_ZN8touchgfx3clzEl>
 801d094:	2c00      	cmp	r4, #0
 801d096:	fa04 f500 	lsl.w	r5, r4, r0
 801d09a:	fa06 f600 	lsl.w	r6, r6, r0
 801d09e:	bfba      	itte	lt
 801d0a0:	f04f 37ff 	movlt.w	r7, #4294967295
 801d0a4:	4264      	neglt	r4, r4
 801d0a6:	2701      	movge	r7, #1
 801d0a8:	2900      	cmp	r1, #0
 801d0aa:	f106 36ff 	add.w	r6, r6, #4294967295
 801d0ae:	bfbc      	itt	lt
 801d0b0:	4249      	neglt	r1, r1
 801d0b2:	427f      	neglt	r7, r7
 801d0b4:	2a00      	cmp	r2, #0
 801d0b6:	fa41 fc00 	asr.w	ip, r1, r0
 801d0ba:	ea01 0106 	and.w	r1, r1, r6
 801d0be:	bfb8      	it	lt
 801d0c0:	427f      	neglt	r7, r7
 801d0c2:	fb04 f401 	mul.w	r4, r4, r1
 801d0c6:	fb95 f3f2 	sdiv	r3, r5, r2
 801d0ca:	fb02 5513 	mls	r5, r2, r3, r5
 801d0ce:	bfb8      	it	lt
 801d0d0:	4252      	neglt	r2, r2
 801d0d2:	fb94 f0f2 	sdiv	r0, r4, r2
 801d0d6:	fb02 4410 	mls	r4, r2, r0, r4
 801d0da:	fb0c 4405 	mla	r4, ip, r5, r4
 801d0de:	fb94 f1f2 	sdiv	r1, r4, r2
 801d0e2:	4408      	add	r0, r1
 801d0e4:	fb02 4211 	mls	r2, r2, r1, r4
 801d0e8:	fb0c 0003 	mla	r0, ip, r3, r0
 801d0ec:	f8c8 2000 	str.w	r2, [r8]
 801d0f0:	4378      	muls	r0, r7
 801d0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d0f6 <_ZN8touchgfx10ClickEventD1Ev>:
 801d0f6:	4770      	bx	lr

0801d0f8 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801d0f8:	2000      	movs	r0, #0
 801d0fa:	4770      	bx	lr

0801d0fc <_ZN8touchgfx9DragEventD1Ev>:
 801d0fc:	4770      	bx	lr

0801d0fe <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801d0fe:	2001      	movs	r0, #1
 801d100:	4770      	bx	lr

0801d102 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801d102:	2002      	movs	r0, #2
 801d104:	4770      	bx	lr

0801d106 <_ZN8touchgfx12GestureEventD1Ev>:
 801d106:	4770      	bx	lr

0801d108 <_ZN8touchgfx10ClickEventD0Ev>:
 801d108:	b510      	push	{r4, lr}
 801d10a:	4604      	mov	r4, r0
 801d10c:	210c      	movs	r1, #12
 801d10e:	f00b fa4b 	bl	80285a8 <_ZdlPvj>
 801d112:	4620      	mov	r0, r4
 801d114:	bd10      	pop	{r4, pc}

0801d116 <_ZN8touchgfx9DragEventD0Ev>:
 801d116:	b510      	push	{r4, lr}
 801d118:	4604      	mov	r4, r0
 801d11a:	2110      	movs	r1, #16
 801d11c:	f00b fa44 	bl	80285a8 <_ZdlPvj>
 801d120:	4620      	mov	r0, r4
 801d122:	bd10      	pop	{r4, pc}

0801d124 <_ZN8touchgfx12GestureEventD0Ev>:
 801d124:	b510      	push	{r4, lr}
 801d126:	4604      	mov	r4, r0
 801d128:	210c      	movs	r1, #12
 801d12a:	f00b fa3d 	bl	80285a8 <_ZdlPvj>
 801d12e:	4620      	mov	r0, r4
 801d130:	bd10      	pop	{r4, pc}
	...

0801d134 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d134:	b530      	push	{r4, r5, lr}
 801d136:	460d      	mov	r5, r1
 801d138:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d13a:	b087      	sub	sp, #28
 801d13c:	4604      	mov	r4, r0
 801d13e:	b301      	cbz	r1, 801d182 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d140:	a801      	add	r0, sp, #4
 801d142:	f7ff ff06 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d146:	892a      	ldrh	r2, [r5, #8]
 801d148:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d14c:	7928      	ldrb	r0, [r5, #4]
 801d14e:	1ad2      	subs	r2, r2, r3
 801d150:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d152:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d156:	441a      	add	r2, r3
 801d158:	896b      	ldrh	r3, [r5, #10]
 801d15a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d15e:	f88d 0010 	strb.w	r0, [sp, #16]
 801d162:	1b5b      	subs	r3, r3, r5
 801d164:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d166:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d168:	442b      	add	r3, r5
 801d16a:	4d07      	ldr	r5, [pc, #28]	; (801d188 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d16c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d170:	a903      	add	r1, sp, #12
 801d172:	9503      	str	r5, [sp, #12]
 801d174:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d178:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d17c:	6803      	ldr	r3, [r0, #0]
 801d17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d180:	4798      	blx	r3
 801d182:	b007      	add	sp, #28
 801d184:	bd30      	pop	{r4, r5, pc}
 801d186:	bf00      	nop
 801d188:	0802cab8 	.word	0x0802cab8

0801d18c <_ZNK8touchgfx4Rect9intersectEss>:
 801d18c:	b510      	push	{r4, lr}
 801d18e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d192:	428b      	cmp	r3, r1
 801d194:	dc10      	bgt.n	801d1b8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801d196:	8884      	ldrh	r4, [r0, #4]
 801d198:	4423      	add	r3, r4
 801d19a:	b21b      	sxth	r3, r3
 801d19c:	4299      	cmp	r1, r3
 801d19e:	da0b      	bge.n	801d1b8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801d1a0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d1a4:	4293      	cmp	r3, r2
 801d1a6:	dc07      	bgt.n	801d1b8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801d1a8:	88c0      	ldrh	r0, [r0, #6]
 801d1aa:	4418      	add	r0, r3
 801d1ac:	b200      	sxth	r0, r0
 801d1ae:	4282      	cmp	r2, r0
 801d1b0:	bfac      	ite	ge
 801d1b2:	2000      	movge	r0, #0
 801d1b4:	2001      	movlt	r0, #1
 801d1b6:	bd10      	pop	{r4, pc}
 801d1b8:	2000      	movs	r0, #0
 801d1ba:	e7fc      	b.n	801d1b6 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801d1bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1be:	460c      	mov	r4, r1
 801d1c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d1c2:	b089      	sub	sp, #36	; 0x24
 801d1c4:	4605      	mov	r5, r0
 801d1c6:	2900      	cmp	r1, #0
 801d1c8:	d054      	beq.n	801d274 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801d1ca:	4668      	mov	r0, sp
 801d1cc:	f7ff fec1 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d1d0:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801d1d2:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801d1d4:	4668      	mov	r0, sp
 801d1d6:	8922      	ldrh	r2, [r4, #8]
 801d1d8:	88e1      	ldrh	r1, [r4, #6]
 801d1da:	443a      	add	r2, r7
 801d1dc:	4431      	add	r1, r6
 801d1de:	b212      	sxth	r2, r2
 801d1e0:	b209      	sxth	r1, r1
 801d1e2:	f7ff ffd3 	bl	801d18c <_ZNK8touchgfx4Rect9intersectEss>
 801d1e6:	b1d0      	cbz	r0, 801d21e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801d1e8:	89a2      	ldrh	r2, [r4, #12]
 801d1ea:	4668      	mov	r0, sp
 801d1ec:	8961      	ldrh	r1, [r4, #10]
 801d1ee:	443a      	add	r2, r7
 801d1f0:	4431      	add	r1, r6
 801d1f2:	b212      	sxth	r2, r2
 801d1f4:	b209      	sxth	r1, r1
 801d1f6:	f7ff ffc9 	bl	801d18c <_ZNK8touchgfx4Rect9intersectEss>
 801d1fa:	4603      	mov	r3, r0
 801d1fc:	b978      	cbnz	r0, 801d21e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801d1fe:	4a1e      	ldr	r2, [pc, #120]	; (801d278 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801d200:	a904      	add	r1, sp, #16
 801d202:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d204:	9204      	str	r2, [sp, #16]
 801d206:	2202      	movs	r2, #2
 801d208:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d20c:	f88d 2014 	strb.w	r2, [sp, #20]
 801d210:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d214:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d218:	6803      	ldr	r3, [r0, #0]
 801d21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d21c:	4798      	blx	r3
 801d21e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801d220:	a802      	add	r0, sp, #8
 801d222:	f7ff fe96 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d226:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d22a:	88e0      	ldrh	r0, [r4, #6]
 801d22c:	8961      	ldrh	r1, [r4, #10]
 801d22e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d232:	1a80      	subs	r0, r0, r2
 801d234:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801d238:	1a89      	subs	r1, r1, r2
 801d23a:	8923      	ldrh	r3, [r4, #8]
 801d23c:	4460      	add	r0, ip
 801d23e:	89a2      	ldrh	r2, [r4, #12]
 801d240:	4461      	add	r1, ip
 801d242:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d244:	eba3 030e 	sub.w	r3, r3, lr
 801d248:	eba2 020e 	sub.w	r2, r2, lr
 801d24c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d250:	7927      	ldrb	r7, [r4, #4]
 801d252:	4433      	add	r3, r6
 801d254:	4432      	add	r2, r6
 801d256:	4c09      	ldr	r4, [pc, #36]	; (801d27c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801d258:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d25a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d25e:	a904      	add	r1, sp, #16
 801d260:	9404      	str	r4, [sp, #16]
 801d262:	f88d 7014 	strb.w	r7, [sp, #20]
 801d266:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d26a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d26e:	6803      	ldr	r3, [r0, #0]
 801d270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d272:	4798      	blx	r3
 801d274:	b009      	add	sp, #36	; 0x24
 801d276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d278:	0802ca90 	.word	0x0802ca90
 801d27c:	0802caa4 	.word	0x0802caa4

0801d280 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d284:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801d288:	b0a1      	sub	sp, #132	; 0x84
 801d28a:	4604      	mov	r4, r0
 801d28c:	460d      	mov	r5, r1
 801d28e:	790b      	ldrb	r3, [r1, #4]
 801d290:	f1b9 0f00 	cmp.w	r9, #0
 801d294:	d00f      	beq.n	801d2b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801d296:	2b00      	cmp	r3, #0
 801d298:	f040 80a2 	bne.w	801d3e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801d29c:	b021      	add	sp, #132	; 0x84
 801d29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2a2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d2a6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801d2aa:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d2ae:	1d20      	adds	r0, r4, #4
 801d2b0:	f7fb fe2e 	bl	8018f10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801d2b4:	e094      	b.n	801d3e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d1f0      	bne.n	801d29c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d2ba:	4b5f      	ldr	r3, [pc, #380]	; (801d438 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801d2c2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801d2c6:	f1ba 0f03 	cmp.w	sl, #3
 801d2ca:	ddea      	ble.n	801d2a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801d2cc:	f1ba 0f0c 	cmp.w	sl, #12
 801d2d0:	f04f 0303 	mov.w	r3, #3
 801d2d4:	f04f 0600 	mov.w	r6, #0
 801d2d8:	4958      	ldr	r1, [pc, #352]	; (801d43c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801d2da:	bfd8      	it	le
 801d2dc:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801d2e0:	960a      	str	r6, [sp, #40]	; 0x28
 801d2e2:	bfd8      	it	le
 801d2e4:	fb92 f3f3 	sdivle	r3, r2, r3
 801d2e8:	9301      	str	r3, [sp, #4]
 801d2ea:	4b55      	ldr	r3, [pc, #340]	; (801d440 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801d2ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d2f0:	4b54      	ldr	r3, [pc, #336]	; (801d444 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801d2f2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801d2f6:	2248      	movs	r2, #72	; 0x48
 801d2f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d2fc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d300:	ab0e      	add	r3, sp, #56	; 0x38
 801d302:	4618      	mov	r0, r3
 801d304:	f00b f9fc 	bl	8028700 <memcpy>
 801d308:	f04f 32ff 	mov.w	r2, #4294967295
 801d30c:	f8cd a008 	str.w	sl, [sp, #8]
 801d310:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801d314:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d318:	46b3      	mov	fp, r6
 801d31a:	fb93 f3f2 	sdiv	r3, r3, r2
 801d31e:	b29b      	uxth	r3, r3
 801d320:	9303      	str	r3, [sp, #12]
 801d322:	2300      	movs	r3, #0
 801d324:	9a03      	ldr	r2, [sp, #12]
 801d326:	88ef      	ldrh	r7, [r5, #6]
 801d328:	a80a      	add	r0, sp, #40	; 0x28
 801d32a:	9309      	str	r3, [sp, #36]	; 0x24
 801d32c:	9b07      	ldr	r3, [sp, #28]
 801d32e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801d332:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801d336:	fb13 f302 	smulbb	r3, r3, r2
 801d33a:	b29b      	uxth	r3, r3
 801d33c:	9304      	str	r3, [sp, #16]
 801d33e:	9b07      	ldr	r3, [sp, #28]
 801d340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d344:	685b      	ldr	r3, [r3, #4]
 801d346:	fb13 f302 	smulbb	r3, r3, r2
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	9305      	str	r3, [sp, #20]
 801d34e:	9b04      	ldr	r3, [sp, #16]
 801d350:	441f      	add	r7, r3
 801d352:	9b05      	ldr	r3, [sp, #20]
 801d354:	4498      	add	r8, r3
 801d356:	b23f      	sxth	r7, r7
 801d358:	fa0f f888 	sxth.w	r8, r8
 801d35c:	4639      	mov	r1, r7
 801d35e:	4642      	mov	r2, r8
 801d360:	f7ff ff14 	bl	801d18c <_ZNK8touchgfx4Rect9intersectEss>
 801d364:	b380      	cbz	r0, 801d3c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d366:	4639      	mov	r1, r7
 801d368:	ab09      	add	r3, sp, #36	; 0x24
 801d36a:	4642      	mov	r2, r8
 801d36c:	1d20      	adds	r0, r4, #4
 801d36e:	f7fb fdcf 	bl	8018f10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801d372:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d374:	b341      	cbz	r1, 801d3c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d376:	4549      	cmp	r1, r9
 801d378:	d026      	beq.n	801d3c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d37a:	a80c      	add	r0, sp, #48	; 0x30
 801d37c:	f7ff fde9 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d380:	2002      	movs	r0, #2
 801d382:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d386:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d38a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801d38e:	fb92 f2f0 	sdiv	r2, r2, r0
 801d392:	440a      	add	r2, r1
 801d394:	1a99      	subs	r1, r3, r2
 801d396:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d39a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801d39e:	fb93 f3f0 	sdiv	r3, r3, r0
 801d3a2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801d3a6:	4403      	add	r3, r0
 801d3a8:	1ad3      	subs	r3, r2, r3
 801d3aa:	9a06      	ldr	r2, [sp, #24]
 801d3ac:	435b      	muls	r3, r3
 801d3ae:	fb01 3301 	mla	r3, r1, r1, r3
 801d3b2:	4293      	cmp	r3, r2
 801d3b4:	d208      	bcs.n	801d3c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d3b6:	9a04      	ldr	r2, [sp, #16]
 801d3b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d3bc:	86a2      	strh	r2, [r4, #52]	; 0x34
 801d3be:	9a05      	ldr	r2, [sp, #20]
 801d3c0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801d3c4:	86e2      	strh	r2, [r4, #54]	; 0x36
 801d3c6:	9306      	str	r3, [sp, #24]
 801d3c8:	f10b 0b02 	add.w	fp, fp, #2
 801d3cc:	f1bb 0f08 	cmp.w	fp, #8
 801d3d0:	dda7      	ble.n	801d322 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801d3d2:	9b02      	ldr	r3, [sp, #8]
 801d3d4:	3601      	adds	r6, #1
 801d3d6:	4453      	add	r3, sl
 801d3d8:	9302      	str	r3, [sp, #8]
 801d3da:	9b01      	ldr	r3, [sp, #4]
 801d3dc:	42b3      	cmp	r3, r6
 801d3de:	d199      	bne.n	801d314 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801d3e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d3e2:	2900      	cmp	r1, #0
 801d3e4:	f43f af5a 	beq.w	801d29c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d3e8:	a80c      	add	r0, sp, #48	; 0x30
 801d3ea:	2600      	movs	r6, #0
 801d3ec:	f7ff fdb1 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d3f0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801d3f4:	88ea      	ldrh	r2, [r5, #6]
 801d3f6:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801d3fa:	1ad2      	subs	r2, r2, r3
 801d3fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d3fe:	7929      	ldrb	r1, [r5, #4]
 801d400:	441a      	add	r2, r3
 801d402:	892b      	ldrh	r3, [r5, #8]
 801d404:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801d408:	a90e      	add	r1, sp, #56	; 0x38
 801d40a:	1a1b      	subs	r3, r3, r0
 801d40c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801d40e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801d412:	4403      	add	r3, r0
 801d414:	480c      	ldr	r0, [pc, #48]	; (801d448 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801d416:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801d41a:	900e      	str	r0, [sp, #56]	; 0x38
 801d41c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d41e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801d422:	6803      	ldr	r3, [r0, #0]
 801d424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d426:	4798      	blx	r3
 801d428:	792b      	ldrb	r3, [r5, #4]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	f43f af36 	beq.w	801d29c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d430:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d434:	e732      	b.n	801d29c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d436:	bf00      	nop
 801d438:	2000bef0 	.word	0x2000bef0
 801d43c:	0802a3a0 	.word	0x0802a3a0
 801d440:	2000bee2 	.word	0x2000bee2
 801d444:	2000bee4 	.word	0x2000bee4
 801d448:	0802ca90 	.word	0x0802ca90

0801d44c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d44e:	4604      	mov	r4, r0
 801d450:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d454:	3201      	adds	r2, #1
 801d456:	d112      	bne.n	801d47e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d458:	2500      	movs	r5, #0
 801d45a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d45e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d462:	6803      	ldr	r3, [r0, #0]
 801d464:	9500      	str	r5, [sp, #0]
 801d466:	466d      	mov	r5, sp
 801d468:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d46c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d470:	4629      	mov	r1, r5
 801d472:	6a1b      	ldr	r3, [r3, #32]
 801d474:	4798      	blx	r3
 801d476:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d47a:	e884 0003 	stmia.w	r4, {r0, r1}
 801d47e:	4620      	mov	r0, r4
 801d480:	b003      	add	sp, #12
 801d482:	bd30      	pop	{r4, r5, pc}

0801d484 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d484:	b513      	push	{r0, r1, r4, lr}
 801d486:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d48a:	4604      	mov	r4, r0
 801d48c:	3301      	adds	r3, #1
 801d48e:	d109      	bne.n	801d4a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d490:	4601      	mov	r1, r0
 801d492:	4668      	mov	r0, sp
 801d494:	f7ff fd5d 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d498:	f8bd 3000 	ldrh.w	r3, [sp]
 801d49c:	8423      	strh	r3, [r4, #32]
 801d49e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d4a2:	8463      	strh	r3, [r4, #34]	; 0x22
 801d4a4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d4a8:	b002      	add	sp, #8
 801d4aa:	bd10      	pop	{r4, pc}

0801d4ac <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d4ac:	b513      	push	{r0, r1, r4, lr}
 801d4ae:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d4b2:	4604      	mov	r4, r0
 801d4b4:	3301      	adds	r3, #1
 801d4b6:	d109      	bne.n	801d4cc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d4b8:	4601      	mov	r1, r0
 801d4ba:	4668      	mov	r0, sp
 801d4bc:	f7ff fd49 	bl	801cf52 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d4c0:	f8bd 3000 	ldrh.w	r3, [sp]
 801d4c4:	8423      	strh	r3, [r4, #32]
 801d4c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d4ca:	8463      	strh	r3, [r4, #34]	; 0x22
 801d4cc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d4d0:	b002      	add	sp, #8
 801d4d2:	bd10      	pop	{r4, pc}

0801d4d4 <_ZN8touchgfx6ScreenC1Ev>:
 801d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4d6:	4605      	mov	r5, r0
 801d4d8:	4b17      	ldr	r3, [pc, #92]	; (801d538 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d4da:	2200      	movs	r2, #0
 801d4dc:	4917      	ldr	r1, [pc, #92]	; (801d53c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d4de:	f845 3b04 	str.w	r3, [r5], #4
 801d4e2:	2301      	movs	r3, #1
 801d4e4:	8102      	strh	r2, [r0, #8]
 801d4e6:	4604      	mov	r4, r0
 801d4e8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801d4ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801d4f0:	4b13      	ldr	r3, [pc, #76]	; (801d540 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d4f2:	8142      	strh	r2, [r0, #10]
 801d4f4:	f9b3 7000 	ldrsh.w	r7, [r3]
 801d4f8:	4b12      	ldr	r3, [pc, #72]	; (801d544 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801d4fa:	8182      	strh	r2, [r0, #12]
 801d4fc:	81c2      	strh	r2, [r0, #14]
 801d4fe:	8202      	strh	r2, [r0, #16]
 801d500:	8242      	strh	r2, [r0, #18]
 801d502:	8282      	strh	r2, [r0, #20]
 801d504:	82c2      	strh	r2, [r0, #22]
 801d506:	6202      	str	r2, [r0, #32]
 801d508:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d50c:	6342      	str	r2, [r0, #52]	; 0x34
 801d50e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d512:	6041      	str	r1, [r0, #4]
 801d514:	4611      	mov	r1, r2
 801d516:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d51a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801d51e:	4628      	mov	r0, r5
 801d520:	f7f4 fe78 	bl	8012214 <_ZN8touchgfx8Drawable5setXYEss>
 801d524:	4639      	mov	r1, r7
 801d526:	4628      	mov	r0, r5
 801d528:	f7f4 fe92 	bl	8012250 <_ZN8touchgfx8Drawable8setWidthEs>
 801d52c:	4628      	mov	r0, r5
 801d52e:	4631      	mov	r1, r6
 801d530:	f7f4 fe9d 	bl	801226e <_ZN8touchgfx8Drawable9setHeightEs>
 801d534:	4620      	mov	r0, r4
 801d536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d538:	0802cacc 	.word	0x0802cacc
 801d53c:	0802b6c8 	.word	0x0802b6c8
 801d540:	2000bee2 	.word	0x2000bee2
 801d544:	2000bee4 	.word	0x2000bee4

0801d548 <_ZN8touchgfx6Screen4drawEv>:
 801d548:	4b09      	ldr	r3, [pc, #36]	; (801d570 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d54a:	b507      	push	{r0, r1, r2, lr}
 801d54c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d550:	2100      	movs	r1, #0
 801d552:	4b08      	ldr	r3, [pc, #32]	; (801d574 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d554:	9100      	str	r1, [sp, #0]
 801d556:	4669      	mov	r1, sp
 801d558:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d55c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d560:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d564:	6803      	ldr	r3, [r0, #0]
 801d566:	689b      	ldr	r3, [r3, #8]
 801d568:	4798      	blx	r3
 801d56a:	b003      	add	sp, #12
 801d56c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d570:	2000bee2 	.word	0x2000bee2
 801d574:	2000bee4 	.word	0x2000bee4

0801d578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d57c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d580:	b089      	sub	sp, #36	; 0x24
 801d582:	4680      	mov	r8, r0
 801d584:	460c      	mov	r4, r1
 801d586:	4615      	mov	r5, r2
 801d588:	b16b      	cbz	r3, 801d5a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d58a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d58e:	b153      	cbz	r3, 801d5a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d590:	4628      	mov	r0, r5
 801d592:	f7ff ff5b 	bl	801d44c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d596:	4621      	mov	r1, r4
 801d598:	f7fe ffc2 	bl	801c520 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d59c:	69eb      	ldr	r3, [r5, #28]
 801d59e:	b928      	cbnz	r0, 801d5ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801d5a0:	461d      	mov	r5, r3
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d1f4      	bne.n	801d590 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801d5a6:	b009      	add	sp, #36	; 0x24
 801d5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5ac:	ae04      	add	r6, sp, #16
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d051      	beq.n	801d656 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d5b2:	682b      	ldr	r3, [r5, #0]
 801d5b4:	4629      	mov	r1, r5
 801d5b6:	a802      	add	r0, sp, #8
 801d5b8:	68db      	ldr	r3, [r3, #12]
 801d5ba:	4798      	blx	r3
 801d5bc:	4628      	mov	r0, r5
 801d5be:	f7ff ff61 	bl	801d484 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d5c2:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d5c6:	4407      	add	r7, r0
 801d5c8:	4628      	mov	r0, r5
 801d5ca:	f7ff ff6f 	bl	801d4ac <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d5ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d5d2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d5d6:	b23f      	sxth	r7, r7
 801d5d8:	4418      	add	r0, r3
 801d5da:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d5de:	4621      	mov	r1, r4
 801d5e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d5e4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d5e8:	4630      	mov	r0, r6
 801d5ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d5ee:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d5f2:	f7fb fd3f 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801d5f6:	4628      	mov	r0, r5
 801d5f8:	f7ff ff28 	bl	801d44c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d5fc:	ab06      	add	r3, sp, #24
 801d5fe:	4602      	mov	r2, r0
 801d600:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d604:	e883 0003 	stmia.w	r3, {r0, r1}
 801d608:	4611      	mov	r1, r2
 801d60a:	4618      	mov	r0, r3
 801d60c:	f7fb fd32 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801d610:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d614:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d618:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d61c:	4299      	cmp	r1, r3
 801d61e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d622:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d626:	d10b      	bne.n	801d640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d628:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d62c:	4552      	cmp	r2, sl
 801d62e:	d107      	bne.n	801d640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d630:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d634:	455a      	cmp	r2, fp
 801d636:	d103      	bne.n	801d640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d638:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d63c:	454a      	cmp	r2, r9
 801d63e:	d00a      	beq.n	801d656 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d640:	f1bb 0f00 	cmp.w	fp, #0
 801d644:	d002      	beq.n	801d64c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801d646:	f1b9 0f00 	cmp.w	r9, #0
 801d64a:	d12e      	bne.n	801d6aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801d64c:	69ea      	ldr	r2, [r5, #28]
 801d64e:	4621      	mov	r1, r4
 801d650:	4640      	mov	r0, r8
 801d652:	f7ff ff91 	bl	801d578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d656:	4628      	mov	r0, r5
 801d658:	f7ff fef8 	bl	801d44c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d65c:	6861      	ldr	r1, [r4, #4]
 801d65e:	4602      	mov	r2, r0
 801d660:	4633      	mov	r3, r6
 801d662:	6820      	ldr	r0, [r4, #0]
 801d664:	c303      	stmia	r3!, {r0, r1}
 801d666:	4611      	mov	r1, r2
 801d668:	4630      	mov	r0, r6
 801d66a:	f7fb fd03 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801d66e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d672:	2b00      	cmp	r3, #0
 801d674:	d097      	beq.n	801d5a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d676:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d093      	beq.n	801d5a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d67e:	4628      	mov	r0, r5
 801d680:	f7ff ff00 	bl	801d484 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d684:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d688:	1a18      	subs	r0, r3, r0
 801d68a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d68e:	4628      	mov	r0, r5
 801d690:	f7ff ff0c 	bl	801d4ac <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d694:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d698:	4631      	mov	r1, r6
 801d69a:	1a18      	subs	r0, r3, r0
 801d69c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d6a0:	4628      	mov	r0, r5
 801d6a2:	682b      	ldr	r3, [r5, #0]
 801d6a4:	689b      	ldr	r3, [r3, #8]
 801d6a6:	4798      	blx	r3
 801d6a8:	e77d      	b.n	801d5a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d6aa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d6ae:	fa1f f08a 	uxth.w	r0, sl
 801d6b2:	4552      	cmp	r2, sl
 801d6b4:	9000      	str	r0, [sp, #0]
 801d6b6:	da12      	bge.n	801d6de <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801d6b8:	9301      	str	r3, [sp, #4]
 801d6ba:	9b00      	ldr	r3, [sp, #0]
 801d6bc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d6c0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d6c4:	1a9a      	subs	r2, r3, r2
 801d6c6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d6ca:	4631      	mov	r1, r6
 801d6cc:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d6d0:	4640      	mov	r0, r8
 801d6d2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d6d6:	69ea      	ldr	r2, [r5, #28]
 801d6d8:	f7ff ff4e 	bl	801d578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d6dc:	9b01      	ldr	r3, [sp, #4]
 801d6de:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d6e2:	b29f      	uxth	r7, r3
 801d6e4:	429a      	cmp	r2, r3
 801d6e6:	da0d      	bge.n	801d704 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801d6e8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d6ec:	1aba      	subs	r2, r7, r2
 801d6ee:	f8ad a012 	strh.w	sl, [sp, #18]
 801d6f2:	4631      	mov	r1, r6
 801d6f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d6f8:	4640      	mov	r0, r8
 801d6fa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d6fe:	69ea      	ldr	r2, [r5, #28]
 801d700:	f7ff ff3a 	bl	801d578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d704:	8822      	ldrh	r2, [r4, #0]
 801d706:	445f      	add	r7, fp
 801d708:	88a3      	ldrh	r3, [r4, #4]
 801d70a:	b2bf      	uxth	r7, r7
 801d70c:	4413      	add	r3, r2
 801d70e:	b23a      	sxth	r2, r7
 801d710:	b29b      	uxth	r3, r3
 801d712:	b219      	sxth	r1, r3
 801d714:	4291      	cmp	r1, r2
 801d716:	dd0d      	ble.n	801d734 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801d718:	1bdb      	subs	r3, r3, r7
 801d71a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d71e:	f8ad a012 	strh.w	sl, [sp, #18]
 801d722:	4631      	mov	r1, r6
 801d724:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d728:	4640      	mov	r0, r8
 801d72a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d72e:	69ea      	ldr	r2, [r5, #28]
 801d730:	f7ff ff22 	bl	801d578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d734:	88e2      	ldrh	r2, [r4, #6]
 801d736:	8863      	ldrh	r3, [r4, #2]
 801d738:	4413      	add	r3, r2
 801d73a:	9a00      	ldr	r2, [sp, #0]
 801d73c:	444a      	add	r2, r9
 801d73e:	b29b      	uxth	r3, r3
 801d740:	fa1f f982 	uxth.w	r9, r2
 801d744:	b219      	sxth	r1, r3
 801d746:	fa0f f289 	sxth.w	r2, r9
 801d74a:	428a      	cmp	r2, r1
 801d74c:	da83      	bge.n	801d656 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d74e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d752:	eba3 0309 	sub.w	r3, r3, r9
 801d756:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d75a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d75e:	4631      	mov	r1, r6
 801d760:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d764:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d768:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d76c:	69ea      	ldr	r2, [r5, #28]
 801d76e:	e76f      	b.n	801d650 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801d770 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d772:	2300      	movs	r3, #0
 801d774:	aa02      	add	r2, sp, #8
 801d776:	4604      	mov	r4, r0
 801d778:	3004      	adds	r0, #4
 801d77a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801d77e:	460d      	mov	r5, r1
 801d780:	f7fb fd4f 	bl	8019222 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d784:	9a01      	ldr	r2, [sp, #4]
 801d786:	b11a      	cbz	r2, 801d790 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801d788:	4629      	mov	r1, r5
 801d78a:	4620      	mov	r0, r4
 801d78c:	f7ff fef4 	bl	801d578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d790:	b003      	add	sp, #12
 801d792:	bd30      	pop	{r4, r5, pc}

0801d794 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d796:	4602      	mov	r2, r0
 801d798:	4604      	mov	r4, r0
 801d79a:	460d      	mov	r5, r1
 801d79c:	466b      	mov	r3, sp
 801d79e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d7a2:	6851      	ldr	r1, [r2, #4]
 801d7a4:	c303      	stmia	r3!, {r0, r1}
 801d7a6:	4629      	mov	r1, r5
 801d7a8:	4668      	mov	r0, sp
 801d7aa:	f7fb fc63 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 801d7ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d7b2:	4669      	mov	r1, sp
 801d7b4:	b123      	cbz	r3, 801d7c0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801d7b6:	4620      	mov	r0, r4
 801d7b8:	f7ff ffda 	bl	801d770 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d7bc:	b003      	add	sp, #12
 801d7be:	bd30      	pop	{r4, r5, pc}
 801d7c0:	1d20      	adds	r0, r4, #4
 801d7c2:	f7fb fcf5 	bl	80191b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d7c6:	e7f9      	b.n	801d7bc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801d7c8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d7c8:	460b      	mov	r3, r1
 801d7ca:	680a      	ldr	r2, [r1, #0]
 801d7cc:	1d01      	adds	r1, r0, #4
 801d7ce:	6952      	ldr	r2, [r2, #20]
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	4710      	bx	r2

0801d7d4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801d7d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d7d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7e0:	bfcc      	ite	gt
 801d7e2:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801d7e6:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801d7ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d7ee:	ee10 3a10 	vmov	r3, s0
 801d7f2:	b218      	sxth	r0, r3
 801d7f4:	4770      	bx	lr

0801d7f6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d7f6:	b510      	push	{r4, lr}
 801d7f8:	4298      	cmp	r0, r3
 801d7fa:	eb01 0402 	add.w	r4, r1, r2
 801d7fe:	b224      	sxth	r4, r4
 801d800:	d21f      	bcs.n	801d842 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d802:	b1f3      	cbz	r3, 801d842 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d804:	ee07 0a90 	vmov	s15, r0
 801d808:	ee06 1a10 	vmov	s12, r1
 801d80c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d810:	ee07 3a90 	vmov	s15, r3
 801d814:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801d818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d81c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d820:	ee06 2a90 	vmov	s13, r2
 801d824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d828:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d82c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d830:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d834:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d838:	eea6 0a87 	vfma.f32	s0, s13, s14
 801d83c:	f7ff ffca 	bl	801d7d4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801d840:	4604      	mov	r4, r0
 801d842:	4620      	mov	r0, r4
 801d844:	bd10      	pop	{r4, pc}
	...

0801d848 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801d848:	f011 0f40 	tst.w	r1, #64	; 0x40
 801d84c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d850:	4b03      	ldr	r3, [pc, #12]	; (801d860 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801d852:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d856:	bf08      	it	eq
 801d858:	2300      	moveq	r3, #0
 801d85a:	4308      	orrs	r0, r1
 801d85c:	4318      	orrs	r0, r3
 801d85e:	4770      	bx	lr
 801d860:	fffffe00 	.word	0xfffffe00

0801d864 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801d864:	7b43      	ldrb	r3, [r0, #13]
 801d866:	7201      	strb	r1, [r0, #8]
 801d868:	b289      	uxth	r1, r1
 801d86a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801d86e:	05ca      	lsls	r2, r1, #23
 801d870:	bf48      	it	mi
 801d872:	f043 0320 	orrmi.w	r3, r3, #32
 801d876:	7343      	strb	r3, [r0, #13]
 801d878:	058b      	lsls	r3, r1, #22
 801d87a:	bf42      	ittt	mi
 801d87c:	7b43      	ldrbmi	r3, [r0, #13]
 801d87e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801d882:	7343      	strbmi	r3, [r0, #13]
 801d884:	4770      	bx	lr

0801d886 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d886:	b530      	push	{r4, r5, lr}
 801d888:	2500      	movs	r5, #0
 801d88a:	2401      	movs	r4, #1
 801d88c:	6843      	ldr	r3, [r0, #4]
 801d88e:	b913      	cbnz	r3, 801d896 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d890:	6803      	ldr	r3, [r0, #0]
 801d892:	b1f3      	cbz	r3, 801d8d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d894:	6043      	str	r3, [r0, #4]
 801d896:	7c03      	ldrb	r3, [r0, #16]
 801d898:	b143      	cbz	r3, 801d8ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d89a:	68c3      	ldr	r3, [r0, #12]
 801d89c:	b12b      	cbz	r3, 801d8aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d89e:	881a      	ldrh	r2, [r3, #0]
 801d8a0:	b11a      	cbz	r2, 801d8aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d8a2:	1c9a      	adds	r2, r3, #2
 801d8a4:	60c2      	str	r2, [r0, #12]
 801d8a6:	8818      	ldrh	r0, [r3, #0]
 801d8a8:	bd30      	pop	{r4, r5, pc}
 801d8aa:	7405      	strb	r5, [r0, #16]
 801d8ac:	6843      	ldr	r3, [r0, #4]
 801d8ae:	8819      	ldrh	r1, [r3, #0]
 801d8b0:	b179      	cbz	r1, 801d8d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d8b2:	1c9a      	adds	r2, r3, #2
 801d8b4:	2902      	cmp	r1, #2
 801d8b6:	6042      	str	r2, [r0, #4]
 801d8b8:	d1f5      	bne.n	801d8a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d8ba:	6883      	ldr	r3, [r0, #8]
 801d8bc:	1d1a      	adds	r2, r3, #4
 801d8be:	6082      	str	r2, [r0, #8]
 801d8c0:	681b      	ldr	r3, [r3, #0]
 801d8c2:	60c3      	str	r3, [r0, #12]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d0e1      	beq.n	801d88c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d8c8:	881b      	ldrh	r3, [r3, #0]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d0de      	beq.n	801d88c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d8ce:	7404      	strb	r4, [r0, #16]
 801d8d0:	e7dc      	b.n	801d88c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d8d2:	2000      	movs	r0, #0
 801d8d4:	e7e8      	b.n	801d8a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d8d6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d8d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8d8:	4605      	mov	r5, r0
 801d8da:	4608      	mov	r0, r1
 801d8dc:	b1f1      	cbz	r1, 801d91c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d8de:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801d8e2:	460b      	mov	r3, r1
 801d8e4:	f101 0708 	add.w	r7, r1, #8
 801d8e8:	4622      	mov	r2, r4
 801d8ea:	6818      	ldr	r0, [r3, #0]
 801d8ec:	3308      	adds	r3, #8
 801d8ee:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d8f2:	4626      	mov	r6, r4
 801d8f4:	42bb      	cmp	r3, r7
 801d8f6:	c603      	stmia	r6!, {r0, r1}
 801d8f8:	4634      	mov	r4, r6
 801d8fa:	d1f6      	bne.n	801d8ea <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d8fc:	6818      	ldr	r0, [r3, #0]
 801d8fe:	6030      	str	r0, [r6, #0]
 801d900:	4610      	mov	r0, r2
 801d902:	889b      	ldrh	r3, [r3, #4]
 801d904:	80b3      	strh	r3, [r6, #4]
 801d906:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801d90a:	015b      	lsls	r3, r3, #5
 801d90c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d910:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801d914:	430b      	orrs	r3, r1
 801d916:	425b      	negs	r3, r3
 801d918:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801d91c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d91e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d91e:	b538      	push	{r3, r4, r5, lr}
 801d920:	460c      	mov	r4, r1
 801d922:	6811      	ldr	r1, [r2, #0]
 801d924:	4610      	mov	r0, r2
 801d926:	68cd      	ldr	r5, [r1, #12]
 801d928:	4619      	mov	r1, r3
 801d92a:	47a8      	blx	r5
 801d92c:	2800      	cmp	r0, #0
 801d92e:	bf08      	it	eq
 801d930:	4620      	moveq	r0, r4
 801d932:	bd38      	pop	{r3, r4, r5, pc}

0801d934 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d934:	b570      	push	{r4, r5, r6, lr}
 801d936:	8810      	ldrh	r0, [r2, #0]
 801d938:	4298      	cmp	r0, r3
 801d93a:	d817      	bhi.n	801d96c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d93c:	1e48      	subs	r0, r1, #1
 801d93e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d942:	4298      	cmp	r0, r3
 801d944:	d312      	bcc.n	801d96c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d946:	2400      	movs	r4, #0
 801d948:	428c      	cmp	r4, r1
 801d94a:	d20f      	bcs.n	801d96c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d94c:	1860      	adds	r0, r4, r1
 801d94e:	1040      	asrs	r0, r0, #1
 801d950:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d954:	0085      	lsls	r5, r0, #2
 801d956:	42b3      	cmp	r3, r6
 801d958:	d902      	bls.n	801d960 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d95a:	3001      	adds	r0, #1
 801d95c:	b284      	uxth	r4, r0
 801d95e:	e7f3      	b.n	801d948 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d960:	d102      	bne.n	801d968 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801d962:	442a      	add	r2, r5
 801d964:	8850      	ldrh	r0, [r2, #2]
 801d966:	bd70      	pop	{r4, r5, r6, pc}
 801d968:	b281      	uxth	r1, r0
 801d96a:	e7ed      	b.n	801d948 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d96c:	2000      	movs	r0, #0
 801d96e:	e7fa      	b.n	801d966 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801d970 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801d970:	b510      	push	{r4, lr}
 801d972:	8ac3      	ldrh	r3, [r0, #22]
 801d974:	428b      	cmp	r3, r1
 801d976:	d805      	bhi.n	801d984 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801d978:	4b07      	ldr	r3, [pc, #28]	; (801d998 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801d97a:	21fd      	movs	r1, #253	; 0xfd
 801d97c:	4a07      	ldr	r2, [pc, #28]	; (801d99c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801d97e:	4808      	ldr	r0, [pc, #32]	; (801d9a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801d980:	f00a fe40 	bl	8028604 <__assert_func>
 801d984:	8a83      	ldrh	r3, [r0, #20]
 801d986:	240a      	movs	r4, #10
 801d988:	4419      	add	r1, r3
 801d98a:	fbb1 f3f4 	udiv	r3, r1, r4
 801d98e:	fb04 1113 	mls	r1, r4, r3, r1
 801d992:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801d996:	bd10      	pop	{r4, pc}
 801d998:	0802cb19 	.word	0x0802cb19
 801d99c:	0802cf48 	.word	0x0802cf48
 801d9a0:	0802cb27 	.word	0x0802cb27

0801d9a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801d9a4:	b508      	push	{r3, lr}
 801d9a6:	8ac3      	ldrh	r3, [r0, #22]
 801d9a8:	428b      	cmp	r3, r1
 801d9aa:	d805      	bhi.n	801d9b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801d9ac:	4b07      	ldr	r3, [pc, #28]	; (801d9cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801d9ae:	21d3      	movs	r1, #211	; 0xd3
 801d9b0:	4a07      	ldr	r2, [pc, #28]	; (801d9d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801d9b2:	4808      	ldr	r0, [pc, #32]	; (801d9d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801d9b4:	f00a fe26 	bl	8028604 <__assert_func>
 801d9b8:	8a83      	ldrh	r3, [r0, #20]
 801d9ba:	220a      	movs	r2, #10
 801d9bc:	4419      	add	r1, r3
 801d9be:	fbb1 f3f2 	udiv	r3, r1, r2
 801d9c2:	fb02 1113 	mls	r1, r2, r3, r1
 801d9c6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801d9ca:	bd08      	pop	{r3, pc}
 801d9cc:	0802cb19 	.word	0x0802cb19
 801d9d0:	0802cc98 	.word	0x0802cc98
 801d9d4:	0802cb27 	.word	0x0802cb27

0801d9d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9dc:	4604      	mov	r4, r0
 801d9de:	4688      	mov	r8, r1
 801d9e0:	4615      	mov	r5, r2
 801d9e2:	b94a      	cbnz	r2, 801d9f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801d9e4:	4691      	mov	r9, r2
 801d9e6:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801d9ea:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801d9ee:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801d9f2:	4648      	mov	r0, r9
 801d9f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9f8:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801d9fc:	8892      	ldrh	r2, [r2, #4]
 801d9fe:	462b      	mov	r3, r5
 801da00:	f105 0c08 	add.w	ip, r5, #8
 801da04:	46b3      	mov	fp, r6
 801da06:	6818      	ldr	r0, [r3, #0]
 801da08:	3308      	adds	r3, #8
 801da0a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801da0e:	4637      	mov	r7, r6
 801da10:	4563      	cmp	r3, ip
 801da12:	c703      	stmia	r7!, {r0, r1}
 801da14:	463e      	mov	r6, r7
 801da16:	d1f6      	bne.n	801da06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801da18:	6818      	ldr	r0, [r3, #0]
 801da1a:	46d9      	mov	r9, fp
 801da1c:	6038      	str	r0, [r7, #0]
 801da1e:	889b      	ldrh	r3, [r3, #4]
 801da20:	80bb      	strh	r3, [r7, #4]
 801da22:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801da26:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801da2a:	18d3      	adds	r3, r2, r3
 801da2c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801da30:	b298      	uxth	r0, r3
 801da32:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801da36:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801da3a:	281d      	cmp	r0, #29
 801da3c:	ea4a 0a01 	orr.w	sl, sl, r1
 801da40:	fa1f f68a 	uxth.w	r6, sl
 801da44:	d842      	bhi.n	801dacc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801da46:	2301      	movs	r3, #1
 801da48:	4950      	ldr	r1, [pc, #320]	; (801db8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801da4a:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801da4e:	4083      	lsls	r3, r0
 801da50:	420b      	tst	r3, r1
 801da52:	d114      	bne.n	801da7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801da54:	f413 7f60 	tst.w	r3, #896	; 0x380
 801da58:	d03c      	beq.n	801dad4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801da5a:	fa1f fa8a 	uxth.w	sl, sl
 801da5e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801da62:	4658      	mov	r0, fp
 801da64:	eba1 010a 	sub.w	r1, r1, sl
 801da68:	b209      	sxth	r1, r1
 801da6a:	f7ff fefb 	bl	801d864 <_ZN8touchgfx9GlyphNode6setTopEs>
 801da6e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801da72:	1b86      	subs	r6, r0, r6
 801da74:	eba6 0a0a 	sub.w	sl, r6, sl
 801da78:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801da7c:	e7b9      	b.n	801d9f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801da7e:	2100      	movs	r1, #0
 801da80:	f104 001a 	add.w	r0, r4, #26
 801da84:	f7ff ff8e 	bl	801d9a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801da88:	f640 6333 	movw	r3, #3635	; 0xe33
 801da8c:	4601      	mov	r1, r0
 801da8e:	4298      	cmp	r0, r3
 801da90:	d10a      	bne.n	801daa8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801da92:	f8d8 3000 	ldr.w	r3, [r8]
 801da96:	4640      	mov	r0, r8
 801da98:	68db      	ldr	r3, [r3, #12]
 801da9a:	4798      	blx	r3
 801da9c:	7b41      	ldrb	r1, [r0, #13]
 801da9e:	7a00      	ldrb	r0, [r0, #8]
 801daa0:	f7ff fed2 	bl	801d848 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801daa4:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801daa8:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801daac:	4658      	mov	r0, fp
 801daae:	4431      	add	r1, r6
 801dab0:	4451      	add	r1, sl
 801dab2:	b209      	sxth	r1, r1
 801dab4:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801dab8:	f7ff fed4 	bl	801d864 <_ZN8touchgfx9GlyphNode6setTopEs>
 801dabc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801dac0:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801dac4:	1a9b      	subs	r3, r3, r2
 801dac6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801daca:	e792      	b.n	801d9f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801dacc:	f640 631b 	movw	r3, #3611	; 0xe1b
 801dad0:	429a      	cmp	r2, r3
 801dad2:	d005      	beq.n	801dae0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801dad4:	f022 0302 	bic.w	r3, r2, #2
 801dad8:	f640 611d 	movw	r1, #3613	; 0xe1d
 801dadc:	428b      	cmp	r3, r1
 801dade:	d119      	bne.n	801db14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801dae0:	1e53      	subs	r3, r2, #1
 801dae2:	4629      	mov	r1, r5
 801dae4:	4642      	mov	r2, r8
 801dae6:	4620      	mov	r0, r4
 801dae8:	b29b      	uxth	r3, r3
 801daea:	f7ff ff18 	bl	801d91e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801daee:	7b41      	ldrb	r1, [r0, #13]
 801daf0:	7a00      	ldrb	r0, [r0, #8]
 801daf2:	f7ff fea9 	bl	801d848 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801daf6:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801dafa:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801dafe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801db02:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801db06:	4313      	orrs	r3, r2
 801db08:	115a      	asrs	r2, r3, #5
 801db0a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801db0e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801db12:	e02e      	b.n	801db72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801db14:	4639      	mov	r1, r7
 801db16:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801db1a:	f7ff fe95 	bl	801d848 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801db1e:	f640 6109 	movw	r1, #3593	; 0xe09
 801db22:	f022 0310 	bic.w	r3, r2, #16
 801db26:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801db2a:	428b      	cmp	r3, r1
 801db2c:	d003      	beq.n	801db36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801db2e:	f640 6313 	movw	r3, #3603	; 0xe13
 801db32:	429a      	cmp	r2, r3
 801db34:	d127      	bne.n	801db86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801db36:	b27f      	sxtb	r7, r7
 801db38:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801db3c:	4629      	mov	r1, r5
 801db3e:	4620      	mov	r0, r4
 801db40:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801db44:	431f      	orrs	r7, r3
 801db46:	f640 6313 	movw	r3, #3603	; 0xe13
 801db4a:	429a      	cmp	r2, r3
 801db4c:	bf14      	ite	ne
 801db4e:	f102 33ff 	addne.w	r3, r2, #4294967295
 801db52:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801db56:	4642      	mov	r2, r8
 801db58:	bf18      	it	ne
 801db5a:	b29b      	uxthne	r3, r3
 801db5c:	f7ff fedf 	bl	801d91e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801db60:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801db64:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801db68:	7a83      	ldrb	r3, [r0, #10]
 801db6a:	4313      	orrs	r3, r2
 801db6c:	1aff      	subs	r7, r7, r3
 801db6e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801db72:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801db76:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801db7a:	f7ff fe65 	bl	801d848 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801db7e:	1b80      	subs	r0, r0, r6
 801db80:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801db84:	e735      	b.n	801d9f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801db86:	2300      	movs	r3, #0
 801db88:	e7c1      	b.n	801db0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801db8a:	bf00      	nop
 801db8c:	3fc00079 	.word	0x3fc00079

0801db90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801db90:	3a01      	subs	r2, #1
 801db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db96:	b292      	uxth	r2, r2
 801db98:	460c      	mov	r4, r1
 801db9a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801db9e:	42b2      	cmp	r2, r6
 801dba0:	d018      	beq.n	801dbd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801dba2:	8b01      	ldrh	r1, [r0, #24]
 801dba4:	f834 5b02 	ldrh.w	r5, [r4], #2
 801dba8:	4291      	cmp	r1, r2
 801dbaa:	d805      	bhi.n	801dbb8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801dbac:	4b13      	ldr	r3, [pc, #76]	; (801dbfc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801dbae:	21d3      	movs	r1, #211	; 0xd3
 801dbb0:	4a13      	ldr	r2, [pc, #76]	; (801dc00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801dbb2:	4814      	ldr	r0, [pc, #80]	; (801dc04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801dbb4:	f00a fd26 	bl	8028604 <__assert_func>
 801dbb8:	8ac1      	ldrh	r1, [r0, #22]
 801dbba:	4411      	add	r1, r2
 801dbbc:	3a01      	subs	r2, #1
 801dbbe:	f001 0101 	and.w	r1, r1, #1
 801dbc2:	b292      	uxth	r2, r2
 801dbc4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dbc8:	8a49      	ldrh	r1, [r1, #18]
 801dbca:	428d      	cmp	r5, r1
 801dbcc:	d0e7      	beq.n	801db9e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801dbce:	2000      	movs	r0, #0
 801dbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbd4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801dbd8:	2600      	movs	r6, #0
 801dbda:	f100 051a 	add.w	r5, r0, #26
 801dbde:	441f      	add	r7, r3
 801dbe0:	b2b1      	uxth	r1, r6
 801dbe2:	42b9      	cmp	r1, r7
 801dbe4:	da08      	bge.n	801dbf8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801dbe6:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801dbea:	4628      	mov	r0, r5
 801dbec:	f7ff feda 	bl	801d9a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801dbf0:	3601      	adds	r6, #1
 801dbf2:	4540      	cmp	r0, r8
 801dbf4:	d0f4      	beq.n	801dbe0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801dbf6:	e7ea      	b.n	801dbce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801dbf8:	2001      	movs	r0, #1
 801dbfa:	e7e9      	b.n	801dbd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801dbfc:	0802cb19 	.word	0x0802cb19
 801dc00:	0802d0a8 	.word	0x0802d0a8
 801dc04:	0802cb27 	.word	0x0802cb27

0801dc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801dc08:	b538      	push	{r3, r4, r5, lr}
 801dc0a:	8ac3      	ldrh	r3, [r0, #22]
 801dc0c:	428b      	cmp	r3, r1
 801dc0e:	d205      	bcs.n	801dc1c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801dc10:	4b08      	ldr	r3, [pc, #32]	; (801dc34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801dc12:	21d8      	movs	r1, #216	; 0xd8
 801dc14:	4a08      	ldr	r2, [pc, #32]	; (801dc38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801dc16:	4809      	ldr	r0, [pc, #36]	; (801dc3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801dc18:	f00a fcf4 	bl	8028604 <__assert_func>
 801dc1c:	8a82      	ldrh	r2, [r0, #20]
 801dc1e:	250a      	movs	r5, #10
 801dc20:	1a5b      	subs	r3, r3, r1
 801dc22:	440a      	add	r2, r1
 801dc24:	82c3      	strh	r3, [r0, #22]
 801dc26:	fbb2 f4f5 	udiv	r4, r2, r5
 801dc2a:	fb05 2214 	mls	r2, r5, r4, r2
 801dc2e:	8282      	strh	r2, [r0, #20]
 801dc30:	bd38      	pop	{r3, r4, r5, pc}
 801dc32:	bf00      	nop
 801dc34:	0802cb0d 	.word	0x0802cb0d
 801dc38:	0802cec4 	.word	0x0802cec4
 801dc3c:	0802cb27 	.word	0x0802cb27

0801dc40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801dc40:	b538      	push	{r3, r4, r5, lr}
 801dc42:	8ac3      	ldrh	r3, [r0, #22]
 801dc44:	2b09      	cmp	r3, #9
 801dc46:	d905      	bls.n	801dc54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801dc48:	4b08      	ldr	r3, [pc, #32]	; (801dc6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801dc4a:	21f7      	movs	r1, #247	; 0xf7
 801dc4c:	4a08      	ldr	r2, [pc, #32]	; (801dc70 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801dc4e:	4809      	ldr	r0, [pc, #36]	; (801dc74 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801dc50:	f00a fcd8 	bl	8028604 <__assert_func>
 801dc54:	8a82      	ldrh	r2, [r0, #20]
 801dc56:	250a      	movs	r5, #10
 801dc58:	441a      	add	r2, r3
 801dc5a:	3301      	adds	r3, #1
 801dc5c:	fbb2 f4f5 	udiv	r4, r2, r5
 801dc60:	fb05 2214 	mls	r2, r5, r4, r2
 801dc64:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801dc68:	82c3      	strh	r3, [r0, #22]
 801dc6a:	bd38      	pop	{r3, r4, r5, pc}
 801dc6c:	0802cb01 	.word	0x0802cb01
 801dc70:	0802ce15 	.word	0x0802ce15
 801dc74:	0802cb27 	.word	0x0802cb27

0801dc78 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801dc78:	b538      	push	{r3, r4, r5, lr}
 801dc7a:	4604      	mov	r4, r0
 801dc7c:	f100 051a 	add.w	r5, r0, #26
 801dc80:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dc82:	2b0a      	cmp	r3, #10
 801dc84:	d01c      	beq.n	801dcc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801dc86:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801dc88:	b962      	cbnz	r2, 801dca4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801dc8a:	f104 051a 	add.w	r5, r4, #26
 801dc8e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dc90:	2b0a      	cmp	r3, #10
 801dc92:	d015      	beq.n	801dcc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801dc94:	4620      	mov	r0, r4
 801dc96:	f7ff fdf6 	bl	801d886 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dc9a:	4601      	mov	r1, r0
 801dc9c:	4628      	mov	r0, r5
 801dc9e:	f7ff ffcf 	bl	801dc40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801dca2:	e7f4      	b.n	801dc8e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801dca4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dca6:	3a01      	subs	r2, #1
 801dca8:	4628      	mov	r0, r5
 801dcaa:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801dcae:	3301      	adds	r3, #1
 801dcb0:	f003 0301 	and.w	r3, r3, #1
 801dcb4:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801dcb6:	8722      	strh	r2, [r4, #56]	; 0x38
 801dcb8:	86e3      	strh	r3, [r4, #54]	; 0x36
 801dcba:	f7ff ffc1 	bl	801dc40 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801dcbe:	e7df      	b.n	801dc80 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801dcc0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801dcc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801dcc4:	2300      	movs	r3, #0
 801dcc6:	b510      	push	{r4, lr}
 801dcc8:	6043      	str	r3, [r0, #4]
 801dcca:	4604      	mov	r4, r0
 801dccc:	60c3      	str	r3, [r0, #12]
 801dcce:	7403      	strb	r3, [r0, #16]
 801dcd0:	8603      	strh	r3, [r0, #48]	; 0x30
 801dcd2:	8303      	strh	r3, [r0, #24]
 801dcd4:	8703      	strh	r3, [r0, #56]	; 0x38
 801dcd6:	f7ff ffcf 	bl	801dc78 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dcda:	4a0a      	ldr	r2, [pc, #40]	; (801dd04 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801dcdc:	6813      	ldr	r3, [r2, #0]
 801dcde:	4611      	mov	r1, r2
 801dce0:	b913      	cbnz	r3, 801dce8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801dce2:	6852      	ldr	r2, [r2, #4]
 801dce4:	07d0      	lsls	r0, r2, #31
 801dce6:	d50b      	bpl.n	801dd00 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801dce8:	6849      	ldr	r1, [r1, #4]
 801dcea:	104a      	asrs	r2, r1, #1
 801dcec:	07c9      	lsls	r1, r1, #31
 801dcee:	eb04 0002 	add.w	r0, r4, r2
 801dcf2:	bf48      	it	mi
 801dcf4:	58a2      	ldrmi	r2, [r4, r2]
 801dcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcfa:	bf48      	it	mi
 801dcfc:	58d3      	ldrmi	r3, [r2, r3]
 801dcfe:	4718      	bx	r3
 801dd00:	bd10      	pop	{r4, pc}
 801dd02:	bf00      	nop
 801dd04:	200086e4 	.word	0x200086e4

0801dd08 <_ZN8touchgfx12TextProviderC1Ev>:
 801dd08:	2300      	movs	r3, #0
 801dd0a:	2201      	movs	r2, #1
 801dd0c:	b510      	push	{r4, lr}
 801dd0e:	4604      	mov	r4, r0
 801dd10:	60c3      	str	r3, [r0, #12]
 801dd12:	7403      	strb	r3, [r0, #16]
 801dd14:	82c3      	strh	r3, [r0, #22]
 801dd16:	8303      	strh	r3, [r0, #24]
 801dd18:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801dd1a:	8603      	strh	r3, [r0, #48]	; 0x30
 801dd1c:	86c3      	strh	r3, [r0, #54]	; 0x36
 801dd1e:	8703      	strh	r3, [r0, #56]	; 0x38
 801dd20:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dd22:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801dd26:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801dd2a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801dd2e:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801dd32:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801dd36:	e9c0 3300 	strd	r3, r3, [r0]
 801dd3a:	f7ff ffc3 	bl	801dcc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801dd3e:	4620      	mov	r0, r4
 801dd40:	bd10      	pop	{r4, pc}

0801dd42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801dd42:	b410      	push	{r4}
 801dd44:	6082      	str	r2, [r0, #8]
 801dd46:	6001      	str	r1, [r0, #0]
 801dd48:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dd4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd4e:	f7ff bfb9 	b.w	801dcc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801dd54 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801dd54:	b508      	push	{r3, lr}
 801dd56:	88c2      	ldrh	r2, [r0, #6]
 801dd58:	440a      	add	r2, r1
 801dd5a:	2a02      	cmp	r2, #2
 801dd5c:	dd05      	ble.n	801dd6a <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801dd5e:	4b06      	ldr	r3, [pc, #24]	; (801dd78 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801dd60:	21ec      	movs	r1, #236	; 0xec
 801dd62:	4a06      	ldr	r2, [pc, #24]	; (801dd7c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801dd64:	4806      	ldr	r0, [pc, #24]	; (801dd80 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801dd66:	f00a fc4d 	bl	8028604 <__assert_func>
 801dd6a:	8883      	ldrh	r3, [r0, #4]
 801dd6c:	80c2      	strh	r2, [r0, #6]
 801dd6e:	1a59      	subs	r1, r3, r1
 801dd70:	f001 0101 	and.w	r1, r1, #1
 801dd74:	8081      	strh	r1, [r0, #4]
 801dd76:	bd08      	pop	{r3, pc}
 801dd78:	0802cb53 	.word	0x0802cb53
 801dd7c:	0802d021 	.word	0x0802d021
 801dd80:	0802cb27 	.word	0x0802cb27

0801dd84 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801dd84:	b508      	push	{r3, lr}
 801dd86:	88c3      	ldrh	r3, [r0, #6]
 801dd88:	428b      	cmp	r3, r1
 801dd8a:	d805      	bhi.n	801dd98 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801dd8c:	4b06      	ldr	r3, [pc, #24]	; (801dda8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801dd8e:	21fd      	movs	r1, #253	; 0xfd
 801dd90:	4a06      	ldr	r2, [pc, #24]	; (801ddac <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801dd92:	4807      	ldr	r0, [pc, #28]	; (801ddb0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801dd94:	f00a fc36 	bl	8028604 <__assert_func>
 801dd98:	8883      	ldrh	r3, [r0, #4]
 801dd9a:	4419      	add	r1, r3
 801dd9c:	f001 0101 	and.w	r1, r1, #1
 801dda0:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801dda4:	bd08      	pop	{r3, pc}
 801dda6:	bf00      	nop
 801dda8:	0802cb19 	.word	0x0802cb19
 801ddac:	0802d179 	.word	0x0802d179
 801ddb0:	0802cb27 	.word	0x0802cb27

0801ddb4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ddb4:	b570      	push	{r4, r5, r6, lr}
 801ddb6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801ddb8:	4604      	mov	r4, r0
 801ddba:	b92a      	cbnz	r2, 801ddc8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ddbc:	4b12      	ldr	r3, [pc, #72]	; (801de08 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801ddbe:	21de      	movs	r1, #222	; 0xde
 801ddc0:	4a12      	ldr	r2, [pc, #72]	; (801de0c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ddc2:	4813      	ldr	r0, [pc, #76]	; (801de10 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801ddc4:	f00a fc1e 	bl	8028604 <__assert_func>
 801ddc8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ddca:	260a      	movs	r6, #10
 801ddcc:	3a01      	subs	r2, #1
 801ddce:	3412      	adds	r4, #18
 801ddd0:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ddd4:	3301      	adds	r3, #1
 801ddd6:	8b4d      	ldrh	r5, [r1, #26]
 801ddd8:	8602      	strh	r2, [r0, #48]	; 0x30
 801ddda:	fbb3 f1f6 	udiv	r1, r3, r6
 801ddde:	fb06 3311 	mls	r3, r6, r1, r3
 801dde2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801dde4:	f7ff ff48 	bl	801dc78 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dde8:	88e3      	ldrh	r3, [r4, #6]
 801ddea:	2101      	movs	r1, #1
 801ddec:	2b02      	cmp	r3, #2
 801ddee:	bf04      	itt	eq
 801ddf0:	2301      	moveq	r3, #1
 801ddf2:	80e3      	strheq	r3, [r4, #6]
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	f7ff ffad 	bl	801dd54 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801ddfa:	4620      	mov	r0, r4
 801ddfc:	462a      	mov	r2, r5
 801ddfe:	2100      	movs	r1, #0
 801de00:	f7ff ffc0 	bl	801dd84 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801de04:	4628      	mov	r0, r5
 801de06:	bd70      	pop	{r4, r5, r6, pc}
 801de08:	0802caf8 	.word	0x0802caf8
 801de0c:	0802cd6a 	.word	0x0802cd6a
 801de10:	0802cb27 	.word	0x0802cb27

0801de14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801de14:	428a      	cmp	r2, r1
 801de16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de1a:	4604      	mov	r4, r0
 801de1c:	460e      	mov	r6, r1
 801de1e:	4615      	mov	r5, r2
 801de20:	469a      	mov	sl, r3
 801de22:	d92b      	bls.n	801de7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801de24:	1a57      	subs	r7, r2, r1
 801de26:	f04f 0800 	mov.w	r8, #0
 801de2a:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801de2e:	f04f 0b0a 	mov.w	fp, #10
 801de32:	b2bf      	uxth	r7, r7
 801de34:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801de36:	b92b      	cbnz	r3, 801de44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801de38:	4b24      	ldr	r3, [pc, #144]	; (801decc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801de3a:	21e6      	movs	r1, #230	; 0xe6
 801de3c:	4a24      	ldr	r2, [pc, #144]	; (801ded0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801de3e:	4825      	ldr	r0, [pc, #148]	; (801ded4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801de40:	f00a fbe0 	bl	8028604 <__assert_func>
 801de44:	3b01      	subs	r3, #1
 801de46:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801de48:	2101      	movs	r1, #1
 801de4a:	4648      	mov	r0, r9
 801de4c:	b29b      	uxth	r3, r3
 801de4e:	f108 0801 	add.w	r8, r8, #1
 801de52:	441a      	add	r2, r3
 801de54:	8623      	strh	r3, [r4, #48]	; 0x30
 801de56:	fbb2 f3fb 	udiv	r3, r2, fp
 801de5a:	fb0b 2313 	mls	r3, fp, r3, r2
 801de5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801de62:	8b5a      	ldrh	r2, [r3, #26]
 801de64:	9201      	str	r2, [sp, #4]
 801de66:	f7ff ff75 	bl	801dd54 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801de6a:	9a01      	ldr	r2, [sp, #4]
 801de6c:	2100      	movs	r1, #0
 801de6e:	4648      	mov	r0, r9
 801de70:	f7ff ff88 	bl	801dd84 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801de74:	fa1f f388 	uxth.w	r3, r8
 801de78:	429f      	cmp	r7, r3
 801de7a:	d8db      	bhi.n	801de34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801de7c:	f104 071a 	add.w	r7, r4, #26
 801de80:	4631      	mov	r1, r6
 801de82:	260a      	movs	r6, #10
 801de84:	4638      	mov	r0, r7
 801de86:	f7ff febf 	bl	801dc08 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801de8a:	b1c5      	cbz	r5, 801debe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801de8c:	3d01      	subs	r5, #1
 801de8e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801de90:	b2ad      	uxth	r5, r5
 801de92:	2b09      	cmp	r3, #9
 801de94:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801de98:	d903      	bls.n	801dea2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801de9a:	4b0f      	ldr	r3, [pc, #60]	; (801ded8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801de9c:	21ec      	movs	r1, #236	; 0xec
 801de9e:	4a0f      	ldr	r2, [pc, #60]	; (801dedc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801dea0:	e7cd      	b.n	801de3e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801dea2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801dea4:	3301      	adds	r3, #1
 801dea6:	3109      	adds	r1, #9
 801dea8:	8623      	strh	r3, [r4, #48]	; 0x30
 801deaa:	fbb1 f0f6 	udiv	r0, r1, r6
 801deae:	fb06 1110 	mls	r1, r6, r0, r1
 801deb2:	4638      	mov	r0, r7
 801deb4:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801deb6:	2100      	movs	r1, #0
 801deb8:	f7ff fd5a 	bl	801d970 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801debc:	e7e5      	b.n	801de8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801debe:	4620      	mov	r0, r4
 801dec0:	b003      	add	sp, #12
 801dec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dec6:	f7ff bed7 	b.w	801dc78 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801deca:	bf00      	nop
 801decc:	0802caf8 	.word	0x0802caf8
 801ded0:	0802cbee 	.word	0x0802cbee
 801ded4:	0802cb27 	.word	0x0802cb27
 801ded8:	0802cb53 	.word	0x0802cb53
 801dedc:	0802cb66 	.word	0x0802cb66

0801dee0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801dee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee4:	4605      	mov	r5, r0
 801dee6:	4616      	mov	r6, r2
 801dee8:	1c8c      	adds	r4, r1, #2
 801deea:	8809      	ldrh	r1, [r1, #0]
 801deec:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801def0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801def4:	42b3      	cmp	r3, r6
 801def6:	d124      	bne.n	801df42 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801def8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801defc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801df00:	f001 070f 	and.w	r7, r1, #15
 801df04:	4652      	mov	r2, sl
 801df06:	f8cd 8000 	str.w	r8, [sp]
 801df0a:	464b      	mov	r3, r9
 801df0c:	4621      	mov	r1, r4
 801df0e:	4628      	mov	r0, r5
 801df10:	f7ff fe3e 	bl	801db90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801df14:	4683      	mov	fp, r0
 801df16:	b168      	cbz	r0, 801df34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801df18:	eb0a 0109 	add.w	r1, sl, r9
 801df1c:	463a      	mov	r2, r7
 801df1e:	4628      	mov	r0, r5
 801df20:	4441      	add	r1, r8
 801df22:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801df26:	4649      	mov	r1, r9
 801df28:	f7ff ff74 	bl	801de14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801df2c:	4658      	mov	r0, fp
 801df2e:	b003      	add	sp, #12
 801df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df34:	eb07 010a 	add.w	r1, r7, sl
 801df38:	4449      	add	r1, r9
 801df3a:	4441      	add	r1, r8
 801df3c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801df40:	e7d2      	b.n	801dee8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801df42:	f04f 0b00 	mov.w	fp, #0
 801df46:	e7f1      	b.n	801df2c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801df48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801df48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df4c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801df4e:	4604      	mov	r4, r0
 801df50:	260b      	movs	r6, #11
 801df52:	f100 091a 	add.w	r9, r0, #26
 801df56:	886f      	ldrh	r7, [r5, #2]
 801df58:	087f      	lsrs	r7, r7, #1
 801df5a:	3e01      	subs	r6, #1
 801df5c:	d013      	beq.n	801df86 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801df5e:	2100      	movs	r1, #0
 801df60:	4648      	mov	r0, r9
 801df62:	f7ff fd1f 	bl	801d9a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801df66:	462a      	mov	r2, r5
 801df68:	4680      	mov	r8, r0
 801df6a:	4603      	mov	r3, r0
 801df6c:	4639      	mov	r1, r7
 801df6e:	4620      	mov	r0, r4
 801df70:	f7ff fce0 	bl	801d934 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801df74:	b138      	cbz	r0, 801df86 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801df76:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801df7a:	4642      	mov	r2, r8
 801df7c:	4620      	mov	r0, r4
 801df7e:	f7ff ffaf 	bl	801dee0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801df82:	2800      	cmp	r0, #0
 801df84:	d1e9      	bne.n	801df5a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801df86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801df8c:	4b1e      	ldr	r3, [pc, #120]	; (801e008 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801df8e:	b570      	push	{r4, r5, r6, lr}
 801df90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df94:	4604      	mov	r4, r0
 801df96:	f003 0501 	and.w	r5, r3, #1
 801df9a:	b902      	cbnz	r2, 801df9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801df9c:	b165      	cbz	r5, 801dfb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801df9e:	105b      	asrs	r3, r3, #1
 801dfa0:	f104 061a 	add.w	r6, r4, #26
 801dfa4:	18e0      	adds	r0, r4, r3
 801dfa6:	b10d      	cbz	r5, 801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801dfa8:	58e3      	ldr	r3, [r4, r3]
 801dfaa:	589a      	ldr	r2, [r3, r2]
 801dfac:	4790      	blx	r2
 801dfae:	2100      	movs	r1, #0
 801dfb0:	4602      	mov	r2, r0
 801dfb2:	4630      	mov	r0, r6
 801dfb4:	f7ff fcdc 	bl	801d970 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801dfb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801dfba:	b303      	cbz	r3, 801dffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801dfbc:	f104 051a 	add.w	r5, r4, #26
 801dfc0:	2100      	movs	r1, #0
 801dfc2:	4628      	mov	r0, r5
 801dfc4:	f7ff fcee 	bl	801d9a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801dfc8:	b1c8      	cbz	r0, 801dffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801dfca:	4620      	mov	r0, r4
 801dfcc:	f7ff ffbc 	bl	801df48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801dfd0:	2101      	movs	r1, #1
 801dfd2:	4628      	mov	r0, r5
 801dfd4:	f7ff fce6 	bl	801d9a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801dfd8:	f640 133f 	movw	r3, #2367	; 0x93f
 801dfdc:	4606      	mov	r6, r0
 801dfde:	4298      	cmp	r0, r3
 801dfe0:	d10d      	bne.n	801dffe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801dfe2:	2100      	movs	r1, #0
 801dfe4:	4628      	mov	r0, r5
 801dfe6:	f7ff fcdd 	bl	801d9a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801dfea:	2101      	movs	r1, #1
 801dfec:	4602      	mov	r2, r0
 801dfee:	4628      	mov	r0, r5
 801dff0:	f7ff fcbe 	bl	801d970 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801dff4:	4632      	mov	r2, r6
 801dff6:	2100      	movs	r1, #0
 801dff8:	4628      	mov	r0, r5
 801dffa:	f7ff fcb9 	bl	801d970 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801dffe:	4620      	mov	r0, r4
 801e000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e004:	f7ff bed6 	b.w	801ddb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e008:	200086ec 	.word	0x200086ec

0801e00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e00e:	4617      	mov	r7, r2
 801e010:	461e      	mov	r6, r3
 801e012:	4605      	mov	r5, r0
 801e014:	f7ff ffba 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e018:	683b      	ldr	r3, [r7, #0]
 801e01a:	4604      	mov	r4, r0
 801e01c:	4601      	mov	r1, r0
 801e01e:	4638      	mov	r0, r7
 801e020:	68db      	ldr	r3, [r3, #12]
 801e022:	4798      	blx	r3
 801e024:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801e028:	4602      	mov	r2, r0
 801e02a:	6030      	str	r0, [r6, #0]
 801e02c:	b29b      	uxth	r3, r3
 801e02e:	2b7f      	cmp	r3, #127	; 0x7f
 801e030:	d813      	bhi.n	801e05a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801e032:	4639      	mov	r1, r7
 801e034:	4628      	mov	r0, r5
 801e036:	f7ff fccf 	bl	801d9d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e03a:	6030      	str	r0, [r6, #0]
 801e03c:	6833      	ldr	r3, [r6, #0]
 801e03e:	b143      	cbz	r3, 801e052 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801e040:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801e044:	7a9b      	ldrb	r3, [r3, #10]
 801e046:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e04a:	4313      	orrs	r3, r2
 801e04c:	bf0c      	ite	eq
 801e04e:	2301      	moveq	r3, #1
 801e050:	2300      	movne	r3, #0
 801e052:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801e056:	4620      	mov	r0, r4
 801e058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e05a:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d0ec      	beq.n	801e03c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801e062:	f640 1302 	movw	r3, #2306	; 0x902
 801e066:	429c      	cmp	r4, r3
 801e068:	d1e8      	bne.n	801e03c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801e06a:	4601      	mov	r1, r0
 801e06c:	4628      	mov	r0, r5
 801e06e:	f7ff fc32 	bl	801d8d6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e072:	e7e2      	b.n	801e03a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801e074 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801e074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e078:	4617      	mov	r7, r2
 801e07a:	461e      	mov	r6, r3
 801e07c:	4605      	mov	r5, r0
 801e07e:	f7ff ff85 	bl	801df8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e082:	683b      	ldr	r3, [r7, #0]
 801e084:	4604      	mov	r4, r0
 801e086:	4601      	mov	r1, r0
 801e088:	4638      	mov	r0, r7
 801e08a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801e08e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e092:	47c0      	blx	r8
 801e094:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801e098:	4602      	mov	r2, r0
 801e09a:	6030      	str	r0, [r6, #0]
 801e09c:	b29b      	uxth	r3, r3
 801e09e:	2b7f      	cmp	r3, #127	; 0x7f
 801e0a0:	d814      	bhi.n	801e0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801e0a2:	4639      	mov	r1, r7
 801e0a4:	4628      	mov	r0, r5
 801e0a6:	f7ff fc97 	bl	801d9d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e0aa:	6030      	str	r0, [r6, #0]
 801e0ac:	6833      	ldr	r3, [r6, #0]
 801e0ae:	b143      	cbz	r3, 801e0c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801e0b0:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801e0b4:	7a9b      	ldrb	r3, [r3, #10]
 801e0b6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e0ba:	4313      	orrs	r3, r2
 801e0bc:	bf0c      	ite	eq
 801e0be:	2301      	moveq	r3, #1
 801e0c0:	2300      	movne	r3, #0
 801e0c2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801e0c6:	4620      	mov	r0, r4
 801e0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0cc:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d0eb      	beq.n	801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801e0d4:	f640 1302 	movw	r3, #2306	; 0x902
 801e0d8:	429c      	cmp	r4, r3
 801e0da:	d1e7      	bne.n	801e0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801e0dc:	4601      	mov	r1, r0
 801e0de:	4628      	mov	r0, r5
 801e0e0:	f7ff fbf9 	bl	801d8d6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e0e4:	e7e1      	b.n	801e0aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801e0e6 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e0e6:	4602      	mov	r2, r0
 801e0e8:	b148      	cbz	r0, 801e0fe <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	b298      	uxth	r0, r3
 801e0ee:	3301      	adds	r3, #1
 801e0f0:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e0f4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e0f8:	2900      	cmp	r1, #0
 801e0fa:	d1f7      	bne.n	801e0ec <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e0fc:	4770      	bx	lr
 801e0fe:	4770      	bx	lr

0801e100 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801e100:	b140      	cbz	r0, 801e114 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801e102:	4602      	mov	r2, r0
 801e104:	1a13      	subs	r3, r2, r0
 801e106:	f812 1b01 	ldrb.w	r1, [r2], #1
 801e10a:	b29b      	uxth	r3, r3
 801e10c:	2900      	cmp	r1, #0
 801e10e:	d1f9      	bne.n	801e104 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801e110:	4618      	mov	r0, r3
 801e112:	4770      	bx	lr
 801e114:	4603      	mov	r3, r0
 801e116:	e7fb      	b.n	801e110 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801e118 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e118:	b530      	push	{r4, r5, lr}
 801e11a:	4604      	mov	r4, r0
 801e11c:	b159      	cbz	r1, 801e136 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e11e:	b148      	cbz	r0, 801e134 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e120:	2300      	movs	r3, #0
 801e122:	b298      	uxth	r0, r3
 801e124:	4282      	cmp	r2, r0
 801e126:	d905      	bls.n	801e134 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e128:	5ccd      	ldrb	r5, [r1, r3]
 801e12a:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e12e:	3301      	adds	r3, #1
 801e130:	2d00      	cmp	r5, #0
 801e132:	d1f6      	bne.n	801e122 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e134:	bd30      	pop	{r4, r5, pc}
 801e136:	4608      	mov	r0, r1
 801e138:	e7fc      	b.n	801e134 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e13a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801e13a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e13c:	468c      	mov	ip, r1
 801e13e:	b08b      	sub	sp, #44	; 0x2c
 801e140:	2100      	movs	r1, #0
 801e142:	ae01      	add	r6, sp, #4
 801e144:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e148:	211f      	movs	r1, #31
 801e14a:	fbb0 f7f3 	udiv	r7, r0, r3
 801e14e:	fb03 0517 	mls	r5, r3, r7, r0
 801e152:	4638      	mov	r0, r7
 801e154:	b2ec      	uxtb	r4, r5
 801e156:	2d09      	cmp	r5, #9
 801e158:	bfd4      	ite	le
 801e15a:	3430      	addle	r4, #48	; 0x30
 801e15c:	3457      	addgt	r4, #87	; 0x57
 801e15e:	b2e4      	uxtb	r4, r4
 801e160:	558c      	strb	r4, [r1, r6]
 801e162:	1e4c      	subs	r4, r1, #1
 801e164:	b92f      	cbnz	r7, 801e172 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801e166:	4431      	add	r1, r6
 801e168:	4660      	mov	r0, ip
 801e16a:	f7ff ffd5 	bl	801e118 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e16e:	b00b      	add	sp, #44	; 0x2c
 801e170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e172:	4621      	mov	r1, r4
 801e174:	e7e9      	b.n	801e14a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801e176 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e176:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e178:	4607      	mov	r7, r0
 801e17a:	b08b      	sub	sp, #44	; 0x2c
 801e17c:	4608      	mov	r0, r1
 801e17e:	b341      	cbz	r1, 801e1d2 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e180:	1e99      	subs	r1, r3, #2
 801e182:	290e      	cmp	r1, #14
 801e184:	d825      	bhi.n	801e1d2 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e186:	2100      	movs	r1, #0
 801e188:	463c      	mov	r4, r7
 801e18a:	261f      	movs	r6, #31
 801e18c:	f10d 0c04 	add.w	ip, sp, #4
 801e190:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e194:	1e71      	subs	r1, r6, #1
 801e196:	fb94 fef3 	sdiv	lr, r4, r3
 801e19a:	fb03 441e 	mls	r4, r3, lr, r4
 801e19e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e1a2:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e1a6:	b2ec      	uxtb	r4, r5
 801e1a8:	2d09      	cmp	r5, #9
 801e1aa:	bfd4      	ite	le
 801e1ac:	3430      	addle	r4, #48	; 0x30
 801e1ae:	3457      	addgt	r4, #87	; 0x57
 801e1b0:	b2e4      	uxtb	r4, r4
 801e1b2:	f80c 4006 	strb.w	r4, [ip, r6]
 801e1b6:	4674      	mov	r4, lr
 801e1b8:	b96c      	cbnz	r4, 801e1d6 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e1ba:	2f00      	cmp	r7, #0
 801e1bc:	da05      	bge.n	801e1ca <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e1be:	ab0a      	add	r3, sp, #40	; 0x28
 801e1c0:	4419      	add	r1, r3
 801e1c2:	232d      	movs	r3, #45	; 0x2d
 801e1c4:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e1c8:	1eb1      	subs	r1, r6, #2
 801e1ca:	3101      	adds	r1, #1
 801e1cc:	4461      	add	r1, ip
 801e1ce:	f7ff ffa3 	bl	801e118 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e1d2:	b00b      	add	sp, #44	; 0x2c
 801e1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1d6:	460e      	mov	r6, r1
 801e1d8:	e7dc      	b.n	801e194 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e1da <_ZN8touchgfx7Unicode4atoiEPKt>:
 801e1da:	b510      	push	{r4, lr}
 801e1dc:	b158      	cbz	r0, 801e1f6 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801e1de:	1e82      	subs	r2, r0, #2
 801e1e0:	210a      	movs	r1, #10
 801e1e2:	2000      	movs	r0, #0
 801e1e4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e1e8:	3b30      	subs	r3, #48	; 0x30
 801e1ea:	b29c      	uxth	r4, r3
 801e1ec:	2c09      	cmp	r4, #9
 801e1ee:	d802      	bhi.n	801e1f6 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801e1f0:	fb01 3000 	mla	r0, r1, r0, r3
 801e1f4:	e7f6      	b.n	801e1e4 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801e1f6:	bd10      	pop	{r4, pc}

0801e1f8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1fc:	b085      	sub	sp, #20
 801e1fe:	f8d0 8000 	ldr.w	r8, [r0]
 801e202:	468a      	mov	sl, r1
 801e204:	461c      	mov	r4, r3
 801e206:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e20a:	4681      	mov	r9, r0
 801e20c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e210:	4640      	mov	r0, r8
 801e212:	9203      	str	r2, [sp, #12]
 801e214:	9102      	str	r1, [sp, #8]
 801e216:	9301      	str	r3, [sp, #4]
 801e218:	f7ff ff65 	bl	801e0e6 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e21c:	9a03      	ldr	r2, [sp, #12]
 801e21e:	f1ba 0f00 	cmp.w	sl, #0
 801e222:	bf0c      	ite	eq
 801e224:	4684      	moveq	ip, r0
 801e226:	f100 0c01 	addne.w	ip, r0, #1
 801e22a:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801e22e:	8812      	ldrh	r2, [r2, #0]
 801e230:	fa1f fc8c 	uxth.w	ip, ip
 801e234:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e236:	2a69      	cmp	r2, #105	; 0x69
 801e238:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e23a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801e23c:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801e240:	d004      	beq.n	801e24c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801e242:	d844      	bhi.n	801e2ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801e244:	2a58      	cmp	r2, #88	; 0x58
 801e246:	d001      	beq.n	801e24c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801e248:	2a64      	cmp	r2, #100	; 0x64
 801e24a:	d14b      	bne.n	801e2e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801e24c:	b1a4      	cbz	r4, 801e278 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e24e:	b956      	cbnz	r6, 801e266 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801e250:	2801      	cmp	r0, #1
 801e252:	d108      	bne.n	801e266 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801e254:	f8b8 2000 	ldrh.w	r2, [r8]
 801e258:	2a30      	cmp	r2, #48	; 0x30
 801e25a:	bf02      	ittt	eq
 801e25c:	f108 0202 	addeq.w	r2, r8, #2
 801e260:	4630      	moveq	r0, r6
 801e262:	f8c9 2000 	streq.w	r2, [r9]
 801e266:	45b4      	cmp	ip, r6
 801e268:	da3e      	bge.n	801e2e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801e26a:	b2b6      	uxth	r6, r6
 801e26c:	eba6 040c 	sub.w	r4, r6, ip
 801e270:	46b4      	mov	ip, r6
 801e272:	b2a4      	uxth	r4, r4
 801e274:	f04f 0b00 	mov.w	fp, #0
 801e278:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e27c:	3a01      	subs	r2, #1
 801e27e:	b169      	cbz	r1, 801e29c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e280:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e282:	458c      	cmp	ip, r1
 801e284:	da09      	bge.n	801e29a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801e286:	eba1 010c 	sub.w	r1, r1, ip
 801e28a:	b289      	uxth	r1, r1
 801e28c:	b933      	cbnz	r3, 801e29c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e28e:	f1bb 0f00 	cmp.w	fp, #0
 801e292:	d02b      	beq.n	801e2ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801e294:	b350      	cbz	r0, 801e2ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801e296:	440c      	add	r4, r1
 801e298:	b2a4      	uxth	r4, r4
 801e29a:	2100      	movs	r1, #0
 801e29c:	682b      	ldr	r3, [r5, #0]
 801e29e:	4293      	cmp	r3, r2
 801e2a0:	da07      	bge.n	801e2b2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801e2a2:	f1ba 0f00 	cmp.w	sl, #0
 801e2a6:	d004      	beq.n	801e2b2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801e2a8:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801e2ac:	682b      	ldr	r3, [r5, #0]
 801e2ae:	3301      	adds	r3, #1
 801e2b0:	602b      	str	r3, [r5, #0]
 801e2b2:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801e2b6:	b354      	cbz	r4, 801e30e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e2b8:	682e      	ldr	r6, [r5, #0]
 801e2ba:	3c01      	subs	r4, #1
 801e2bc:	42b2      	cmp	r2, r6
 801e2be:	b2a4      	uxth	r4, r4
 801e2c0:	dd25      	ble.n	801e30e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e2c2:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801e2c6:	682b      	ldr	r3, [r5, #0]
 801e2c8:	3301      	adds	r3, #1
 801e2ca:	602b      	str	r3, [r5, #0]
 801e2cc:	e7f3      	b.n	801e2b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801e2ce:	2a73      	cmp	r2, #115	; 0x73
 801e2d0:	d003      	beq.n	801e2da <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801e2d2:	2a78      	cmp	r2, #120	; 0x78
 801e2d4:	d0ba      	beq.n	801e24c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801e2d6:	2a6f      	cmp	r2, #111	; 0x6f
 801e2d8:	e7b7      	b.n	801e24a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801e2da:	2c00      	cmp	r4, #0
 801e2dc:	d0cc      	beq.n	801e278 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e2de:	42b0      	cmp	r0, r6
 801e2e0:	dd00      	ble.n	801e2e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801e2e2:	b2b0      	uxth	r0, r6
 801e2e4:	2400      	movs	r4, #0
 801e2e6:	e7c7      	b.n	801e278 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e2e8:	2400      	movs	r4, #0
 801e2ea:	e7c3      	b.n	801e274 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801e2ec:	2900      	cmp	r1, #0
 801e2ee:	d0d5      	beq.n	801e29c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e2f0:	f04f 0c20 	mov.w	ip, #32
 801e2f4:	682e      	ldr	r6, [r5, #0]
 801e2f6:	2900      	cmp	r1, #0
 801e2f8:	d0d0      	beq.n	801e29c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e2fa:	3901      	subs	r1, #1
 801e2fc:	4296      	cmp	r6, r2
 801e2fe:	b289      	uxth	r1, r1
 801e300:	dacb      	bge.n	801e29a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801e302:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801e306:	682b      	ldr	r3, [r5, #0]
 801e308:	3301      	adds	r3, #1
 801e30a:	602b      	str	r3, [r5, #0]
 801e30c:	e7f2      	b.n	801e2f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801e30e:	b198      	cbz	r0, 801e338 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e310:	f8d9 3000 	ldr.w	r3, [r9]
 801e314:	881c      	ldrh	r4, [r3, #0]
 801e316:	b17c      	cbz	r4, 801e338 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e318:	682c      	ldr	r4, [r5, #0]
 801e31a:	3801      	subs	r0, #1
 801e31c:	42a2      	cmp	r2, r4
 801e31e:	b280      	uxth	r0, r0
 801e320:	dd0a      	ble.n	801e338 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e322:	1c9c      	adds	r4, r3, #2
 801e324:	f8c9 4000 	str.w	r4, [r9]
 801e328:	881c      	ldrh	r4, [r3, #0]
 801e32a:	682b      	ldr	r3, [r5, #0]
 801e32c:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801e330:	682b      	ldr	r3, [r5, #0]
 801e332:	3301      	adds	r3, #1
 801e334:	602b      	str	r3, [r5, #0]
 801e336:	e7ea      	b.n	801e30e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e338:	2620      	movs	r6, #32
 801e33a:	b151      	cbz	r1, 801e352 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801e33c:	6828      	ldr	r0, [r5, #0]
 801e33e:	3901      	subs	r1, #1
 801e340:	4282      	cmp	r2, r0
 801e342:	b289      	uxth	r1, r1
 801e344:	dd05      	ble.n	801e352 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801e346:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801e34a:	682b      	ldr	r3, [r5, #0]
 801e34c:	3301      	adds	r3, #1
 801e34e:	602b      	str	r3, [r5, #0]
 801e350:	e7f3      	b.n	801e33a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801e352:	b005      	add	sp, #20
 801e354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e358 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e35c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e35e:	4604      	mov	r4, r0
 801e360:	f04f 0801 	mov.w	r8, #1
 801e364:	2000      	movs	r0, #0
 801e366:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801e36a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801e36e:	8008      	strh	r0, [r1, #0]
 801e370:	7010      	strb	r0, [r2, #0]
 801e372:	7018      	strb	r0, [r3, #0]
 801e374:	f88c 0000 	strb.w	r0, [ip]
 801e378:	f88e 0000 	strb.w	r0, [lr]
 801e37c:	7030      	strb	r0, [r6, #0]
 801e37e:	6820      	ldr	r0, [r4, #0]
 801e380:	8800      	ldrh	r0, [r0, #0]
 801e382:	b190      	cbz	r0, 801e3aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801e384:	282b      	cmp	r0, #43	; 0x2b
 801e386:	d001      	beq.n	801e38c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801e388:	2820      	cmp	r0, #32
 801e38a:	d104      	bne.n	801e396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801e38c:	8008      	strh	r0, [r1, #0]
 801e38e:	6820      	ldr	r0, [r4, #0]
 801e390:	3002      	adds	r0, #2
 801e392:	6020      	str	r0, [r4, #0]
 801e394:	e7f3      	b.n	801e37e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801e396:	282d      	cmp	r0, #45	; 0x2d
 801e398:	d102      	bne.n	801e3a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801e39a:	f882 8000 	strb.w	r8, [r2]
 801e39e:	e7f6      	b.n	801e38e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801e3a0:	2823      	cmp	r0, #35	; 0x23
 801e3a2:	d102      	bne.n	801e3aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801e3a4:	f883 8000 	strb.w	r8, [r3]
 801e3a8:	e7f1      	b.n	801e38e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801e3aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e3ae:	2b09      	cmp	r3, #9
 801e3b0:	d901      	bls.n	801e3b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801e3b2:	282a      	cmp	r0, #42	; 0x2a
 801e3b4:	d114      	bne.n	801e3e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801e3b6:	2201      	movs	r2, #1
 801e3b8:	f88e 2000 	strb.w	r2, [lr]
 801e3bc:	6823      	ldr	r3, [r4, #0]
 801e3be:	8819      	ldrh	r1, [r3, #0]
 801e3c0:	2930      	cmp	r1, #48	; 0x30
 801e3c2:	bf02      	ittt	eq
 801e3c4:	3302      	addeq	r3, #2
 801e3c6:	6023      	streq	r3, [r4, #0]
 801e3c8:	f88c 2000 	strbeq.w	r2, [ip]
 801e3cc:	6820      	ldr	r0, [r4, #0]
 801e3ce:	8803      	ldrh	r3, [r0, #0]
 801e3d0:	2b2a      	cmp	r3, #42	; 0x2a
 801e3d2:	d11e      	bne.n	801e412 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801e3d4:	f04f 33ff 	mov.w	r3, #4294967295
 801e3d8:	603b      	str	r3, [r7, #0]
 801e3da:	6823      	ldr	r3, [r4, #0]
 801e3dc:	3302      	adds	r3, #2
 801e3de:	6023      	str	r3, [r4, #0]
 801e3e0:	6823      	ldr	r3, [r4, #0]
 801e3e2:	881b      	ldrh	r3, [r3, #0]
 801e3e4:	2b2e      	cmp	r3, #46	; 0x2e
 801e3e6:	d112      	bne.n	801e40e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801e3e8:	2301      	movs	r3, #1
 801e3ea:	7033      	strb	r3, [r6, #0]
 801e3ec:	6823      	ldr	r3, [r4, #0]
 801e3ee:	1c98      	adds	r0, r3, #2
 801e3f0:	6020      	str	r0, [r4, #0]
 801e3f2:	885b      	ldrh	r3, [r3, #2]
 801e3f4:	2b2a      	cmp	r3, #42	; 0x2a
 801e3f6:	d117      	bne.n	801e428 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801e3f8:	f04f 33ff 	mov.w	r3, #4294967295
 801e3fc:	602b      	str	r3, [r5, #0]
 801e3fe:	6823      	ldr	r3, [r4, #0]
 801e400:	3302      	adds	r3, #2
 801e402:	6023      	str	r3, [r4, #0]
 801e404:	682b      	ldr	r3, [r5, #0]
 801e406:	2b06      	cmp	r3, #6
 801e408:	bfa8      	it	ge
 801e40a:	2306      	movge	r3, #6
 801e40c:	602b      	str	r3, [r5, #0]
 801e40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e412:	f7ff fee2 	bl	801e1da <_ZN8touchgfx7Unicode4atoiEPKt>
 801e416:	6038      	str	r0, [r7, #0]
 801e418:	6823      	ldr	r3, [r4, #0]
 801e41a:	881a      	ldrh	r2, [r3, #0]
 801e41c:	3a30      	subs	r2, #48	; 0x30
 801e41e:	2a09      	cmp	r2, #9
 801e420:	d8de      	bhi.n	801e3e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801e422:	3302      	adds	r3, #2
 801e424:	6023      	str	r3, [r4, #0]
 801e426:	e7f7      	b.n	801e418 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801e428:	f7ff fed7 	bl	801e1da <_ZN8touchgfx7Unicode4atoiEPKt>
 801e42c:	6028      	str	r0, [r5, #0]
 801e42e:	6823      	ldr	r3, [r4, #0]
 801e430:	881a      	ldrh	r2, [r3, #0]
 801e432:	3a30      	subs	r2, #48	; 0x30
 801e434:	2a09      	cmp	r2, #9
 801e436:	d8e5      	bhi.n	801e404 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801e438:	3302      	adds	r3, #2
 801e43a:	6023      	str	r3, [r4, #0]
 801e43c:	e7f7      	b.n	801e42e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801e43e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801e43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e442:	b0a2      	sub	sp, #136	; 0x88
 801e444:	2500      	movs	r5, #0
 801e446:	4606      	mov	r6, r0
 801e448:	460f      	mov	r7, r1
 801e44a:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801e44e:	9209      	str	r2, [sp, #36]	; 0x24
 801e450:	4629      	mov	r1, r5
 801e452:	2242      	movs	r2, #66	; 0x42
 801e454:	4640      	mov	r0, r8
 801e456:	461c      	mov	r4, r3
 801e458:	950d      	str	r5, [sp, #52]	; 0x34
 801e45a:	f7fe fdec 	bl	801d036 <_ZN8touchgfx6memsetEPvhm>
 801e45e:	b30e      	cbz	r6, 801e4a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801e460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e462:	b1f3      	cbz	r3, 801e4a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801e464:	f107 3aff 	add.w	sl, r7, #4294967295
 801e468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e46c:	8812      	ldrh	r2, [r2, #0]
 801e46e:	2a00      	cmp	r2, #0
 801e470:	f000 80b3 	beq.w	801e5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801e474:	459a      	cmp	sl, r3
 801e476:	f340 80b0 	ble.w	801e5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801e47a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e47e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e480:	f8b9 2000 	ldrh.w	r2, [r9]
 801e484:	2a00      	cmp	r2, #0
 801e486:	d0ef      	beq.n	801e468 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e488:	2a25      	cmp	r2, #37	; 0x25
 801e48a:	f000 80aa 	beq.w	801e5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801e48e:	459a      	cmp	sl, r3
 801e490:	ddea      	ble.n	801e468 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e492:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e496:	f109 0202 	add.w	r2, r9, #2
 801e49a:	3301      	adds	r3, #1
 801e49c:	9209      	str	r2, [sp, #36]	; 0x24
 801e49e:	930d      	str	r3, [sp, #52]	; 0x34
 801e4a0:	e7eb      	b.n	801e47a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801e4a2:	8033      	strh	r3, [r6, #0]
 801e4a4:	4630      	mov	r0, r6
 801e4a6:	b022      	add	sp, #136	; 0x88
 801e4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4ac:	3b63      	subs	r3, #99	; 0x63
 801e4ae:	2b01      	cmp	r3, #1
 801e4b0:	f200 80df 	bhi.w	801e672 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801e4b4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801e4b8:	8813      	ldrh	r3, [r2, #0]
 801e4ba:	2b69      	cmp	r3, #105	; 0x69
 801e4bc:	d058      	beq.n	801e570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801e4be:	d81b      	bhi.n	801e4f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801e4c0:	2b63      	cmp	r3, #99	; 0x63
 801e4c2:	d02e      	beq.n	801e522 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801e4c4:	2b64      	cmp	r3, #100	; 0x64
 801e4c6:	d053      	beq.n	801e570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801e4c8:	2b58      	cmp	r3, #88	; 0x58
 801e4ca:	d06f      	beq.n	801e5ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801e4cc:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801e4d0:	46a1      	mov	r9, r4
 801e4d2:	e02d      	b.n	801e530 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e4d4:	2b73      	cmp	r3, #115	; 0x73
 801e4d6:	d0ed      	beq.n	801e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e4d8:	d803      	bhi.n	801e4e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801e4da:	2b6f      	cmp	r3, #111	; 0x6f
 801e4dc:	f040 80c9 	bne.w	801e672 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801e4e0:	e7e8      	b.n	801e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e4e2:	2b75      	cmp	r3, #117	; 0x75
 801e4e4:	d0e6      	beq.n	801e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e4e6:	2b78      	cmp	r3, #120	; 0x78
 801e4e8:	e7f8      	b.n	801e4dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801e4ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e4ec:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4f2:	3302      	adds	r3, #2
 801e4f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e4f6:	e7b7      	b.n	801e468 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e4f8:	2b73      	cmp	r3, #115	; 0x73
 801e4fa:	d034      	beq.n	801e566 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801e4fc:	d807      	bhi.n	801e50e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801e4fe:	2b6f      	cmp	r3, #111	; 0x6f
 801e500:	d1e4      	bne.n	801e4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801e502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e504:	f104 0904 	add.w	r9, r4, #4
 801e508:	2308      	movs	r3, #8
 801e50a:	1aba      	subs	r2, r7, r2
 801e50c:	e048      	b.n	801e5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801e50e:	2b75      	cmp	r3, #117	; 0x75
 801e510:	d041      	beq.n	801e596 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801e512:	2b78      	cmp	r3, #120	; 0x78
 801e514:	d1da      	bne.n	801e4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801e516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e518:	f104 0904 	add.w	r9, r4, #4
 801e51c:	2310      	movs	r3, #16
 801e51e:	1aba      	subs	r2, r7, r2
 801e520:	e03e      	b.n	801e5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801e522:	7823      	ldrb	r3, [r4, #0]
 801e524:	f104 0904 	add.w	r9, r4, #4
 801e528:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801e52c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801e530:	aa0d      	add	r2, sp, #52	; 0x34
 801e532:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801e536:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e53a:	a810      	add	r0, sp, #64	; 0x40
 801e53c:	9205      	str	r2, [sp, #20]
 801e53e:	464c      	mov	r4, r9
 801e540:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801e544:	9204      	str	r2, [sp, #16]
 801e546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e548:	9203      	str	r2, [sp, #12]
 801e54a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801e54e:	9202      	str	r2, [sp, #8]
 801e550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e552:	9201      	str	r2, [sp, #4]
 801e554:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801e558:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801e55c:	9200      	str	r2, [sp, #0]
 801e55e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e560:	f7ff fe4a 	bl	801e1f8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801e564:	e7c4      	b.n	801e4f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801e566:	f104 0904 	add.w	r9, r4, #4
 801e56a:	6823      	ldr	r3, [r4, #0]
 801e56c:	9310      	str	r3, [sp, #64]	; 0x40
 801e56e:	e7df      	b.n	801e530 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e572:	230a      	movs	r3, #10
 801e574:	4641      	mov	r1, r8
 801e576:	6820      	ldr	r0, [r4, #0]
 801e578:	1aba      	subs	r2, r7, r2
 801e57a:	f104 0904 	add.w	r9, r4, #4
 801e57e:	b292      	uxth	r2, r2
 801e580:	f7ff fdf9 	bl	801e176 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e584:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e588:	2b2d      	cmp	r3, #45	; 0x2d
 801e58a:	d1d1      	bne.n	801e530 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e58c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e592:	3302      	adds	r3, #2
 801e594:	e7ea      	b.n	801e56c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801e596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e598:	f104 0904 	add.w	r9, r4, #4
 801e59c:	230a      	movs	r3, #10
 801e59e:	1aba      	subs	r2, r7, r2
 801e5a0:	b292      	uxth	r2, r2
 801e5a2:	4641      	mov	r1, r8
 801e5a4:	6820      	ldr	r0, [r4, #0]
 801e5a6:	f7ff fdc8 	bl	801e13a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e5aa:	e7c1      	b.n	801e530 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e5ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5ae:	2310      	movs	r3, #16
 801e5b0:	4641      	mov	r1, r8
 801e5b2:	6820      	ldr	r0, [r4, #0]
 801e5b4:	1aba      	subs	r2, r7, r2
 801e5b6:	f104 0904 	add.w	r9, r4, #4
 801e5ba:	b292      	uxth	r2, r2
 801e5bc:	f7ff fdbd 	bl	801e13a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e5c0:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801e5c4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d0b1      	beq.n	801e530 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e5cc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801e5d0:	2919      	cmp	r1, #25
 801e5d2:	d8f7      	bhi.n	801e5c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801e5d4:	3b20      	subs	r3, #32
 801e5d6:	8013      	strh	r3, [r2, #0]
 801e5d8:	e7f4      	b.n	801e5c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801e5da:	2200      	movs	r2, #0
 801e5dc:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e5e0:	e760      	b.n	801e4a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801e5e2:	459a      	cmp	sl, r3
 801e5e4:	f77f af40 	ble.w	801e468 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e5e8:	f109 0302 	add.w	r3, r9, #2
 801e5ec:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801e5f0:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801e5f4:	a809      	add	r0, sp, #36	; 0x24
 801e5f6:	9309      	str	r3, [sp, #36]	; 0x24
 801e5f8:	ab0f      	add	r3, sp, #60	; 0x3c
 801e5fa:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801e5fe:	9304      	str	r3, [sp, #16]
 801e600:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801e604:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801e608:	9303      	str	r3, [sp, #12]
 801e60a:	ab0e      	add	r3, sp, #56	; 0x38
 801e60c:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801e610:	9302      	str	r3, [sp, #8]
 801e612:	ab0c      	add	r3, sp, #48	; 0x30
 801e614:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801e618:	9301      	str	r3, [sp, #4]
 801e61a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801e61e:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801e622:	9300      	str	r3, [sp, #0]
 801e624:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801e628:	950e      	str	r5, [sp, #56]	; 0x38
 801e62a:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801e62e:	950f      	str	r5, [sp, #60]	; 0x3c
 801e630:	f7ff fe92 	bl	801e358 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801e634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e638:	2b00      	cmp	r3, #0
 801e63a:	bfbf      	itttt	lt
 801e63c:	6823      	ldrlt	r3, [r4, #0]
 801e63e:	3404      	addlt	r4, #4
 801e640:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e644:	930e      	strlt	r3, [sp, #56]	; 0x38
 801e646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e648:	2b00      	cmp	r3, #0
 801e64a:	bfbf      	itttt	lt
 801e64c:	6823      	ldrlt	r3, [r4, #0]
 801e64e:	3404      	addlt	r4, #4
 801e650:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e654:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801e656:	8813      	ldrh	r3, [r2, #0]
 801e658:	2b69      	cmp	r3, #105	; 0x69
 801e65a:	f43f af2b 	beq.w	801e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e65e:	f63f af39 	bhi.w	801e4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801e662:	2b58      	cmp	r3, #88	; 0x58
 801e664:	f43f af26 	beq.w	801e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e668:	f63f af20 	bhi.w	801e4ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801e66c:	2b25      	cmp	r3, #37	; 0x25
 801e66e:	f43f af3c 	beq.w	801e4ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801e672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e674:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e678:	f8b9 2000 	ldrh.w	r2, [r9]
 801e67c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e680:	3301      	adds	r3, #1
 801e682:	930d      	str	r3, [sp, #52]	; 0x34
 801e684:	e734      	b.n	801e4f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801e688 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e68a:	4605      	mov	r5, r0
 801e68c:	b0a1      	sub	sp, #132	; 0x84
 801e68e:	4610      	mov	r0, r2
 801e690:	460e      	mov	r6, r1
 801e692:	4614      	mov	r4, r2
 801e694:	461f      	mov	r7, r3
 801e696:	f7ff fd33 	bl	801e100 <_ZN8touchgfx7Unicode6strlenEPKc>
 801e69a:	283f      	cmp	r0, #63	; 0x3f
 801e69c:	d906      	bls.n	801e6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801e69e:	4b0a      	ldr	r3, [pc, #40]	; (801e6c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801e6a0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801e6a4:	4a09      	ldr	r2, [pc, #36]	; (801e6cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801e6a6:	480a      	ldr	r0, [pc, #40]	; (801e6d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801e6a8:	f009 ffac 	bl	8028604 <__assert_func>
 801e6ac:	4621      	mov	r1, r4
 801e6ae:	2240      	movs	r2, #64	; 0x40
 801e6b0:	4668      	mov	r0, sp
 801e6b2:	f7ff fd31 	bl	801e118 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e6b6:	463b      	mov	r3, r7
 801e6b8:	466a      	mov	r2, sp
 801e6ba:	4631      	mov	r1, r6
 801e6bc:	4628      	mov	r0, r5
 801e6be:	f7ff febe 	bl	801e43e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801e6c2:	b021      	add	sp, #132	; 0x84
 801e6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6c6:	bf00      	nop
 801e6c8:	0802d251 	.word	0x0802d251
 801e6cc:	0802d323 	.word	0x0802d323
 801e6d0:	0802d26e 	.word	0x0802d26e

0801e6d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e6d4:	b40c      	push	{r2, r3}
 801e6d6:	b507      	push	{r0, r1, r2, lr}
 801e6d8:	ab04      	add	r3, sp, #16
 801e6da:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6de:	9301      	str	r3, [sp, #4]
 801e6e0:	f7ff ffd2 	bl	801e688 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e6e4:	b003      	add	sp, #12
 801e6e6:	f85d eb04 	ldr.w	lr, [sp], #4
 801e6ea:	b002      	add	sp, #8
 801e6ec:	4770      	bx	lr
	...

0801e6f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801e6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6f4:	b0c3      	sub	sp, #268	; 0x10c
 801e6f6:	2400      	movs	r4, #0
 801e6f8:	4606      	mov	r6, r0
 801e6fa:	4689      	mov	r9, r1
 801e6fc:	af10      	add	r7, sp, #64	; 0x40
 801e6fe:	9209      	str	r2, [sp, #36]	; 0x24
 801e700:	4621      	mov	r1, r4
 801e702:	22c8      	movs	r2, #200	; 0xc8
 801e704:	4638      	mov	r0, r7
 801e706:	469a      	mov	sl, r3
 801e708:	940c      	str	r4, [sp, #48]	; 0x30
 801e70a:	f7fe fc94 	bl	801d036 <_ZN8touchgfx6memsetEPvhm>
 801e70e:	b116      	cbz	r6, 801e716 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801e710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e712:	b923      	cbnz	r3, 801e71e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801e714:	8033      	strh	r3, [r6, #0]
 801e716:	4630      	mov	r0, r6
 801e718:	b043      	add	sp, #268	; 0x10c
 801e71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e71e:	f109 3bff 	add.w	fp, r9, #4294967295
 801e722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e726:	8812      	ldrh	r2, [r2, #0]
 801e728:	2a00      	cmp	r2, #0
 801e72a:	f000 80d1 	beq.w	801e8d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801e72e:	459b      	cmp	fp, r3
 801e730:	f340 80ce 	ble.w	801e8d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801e734:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e738:	882a      	ldrh	r2, [r5, #0]
 801e73a:	2a00      	cmp	r2, #0
 801e73c:	d0f1      	beq.n	801e722 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e73e:	2a25      	cmp	r2, #37	; 0x25
 801e740:	f000 80ca 	beq.w	801e8d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801e744:	459b      	cmp	fp, r3
 801e746:	ddec      	ble.n	801e722 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e748:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e74c:	3502      	adds	r5, #2
 801e74e:	3301      	adds	r3, #1
 801e750:	9509      	str	r5, [sp, #36]	; 0x24
 801e752:	930c      	str	r3, [sp, #48]	; 0x30
 801e754:	e7ee      	b.n	801e734 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801e756:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e75a:	3202      	adds	r2, #2
 801e75c:	920c      	str	r2, [sp, #48]	; 0x30
 801e75e:	e0ac      	b.n	801e8ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801e760:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e764:	970f      	str	r7, [sp, #60]	; 0x3c
 801e766:	3401      	adds	r4, #1
 801e768:	edd3 7a00 	vldr	s15, [r3]
 801e76c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e770:	b923      	cbnz	r3, 801e77c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801e772:	2301      	movs	r3, #1
 801e774:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e778:	2303      	movs	r3, #3
 801e77a:	930e      	str	r3, [sp, #56]	; 0x38
 801e77c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e780:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e782:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801e786:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801e984 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801e78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e78e:	bf42      	ittt	mi
 801e790:	232d      	movmi	r3, #45	; 0x2d
 801e792:	eef1 7a67 	vnegmi.f32	s15, s15
 801e796:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801e79a:	2300      	movs	r3, #0
 801e79c:	4298      	cmp	r0, r3
 801e79e:	dd03      	ble.n	801e7a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801e7a0:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e7a4:	3301      	adds	r3, #1
 801e7a6:	e7f9      	b.n	801e79c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801e7a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e7ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e7b0:	eeb0 7a67 	vmov.f32	s14, s15
 801e7b4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7bc:	da26      	bge.n	801e80c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801e7be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801e7c2:	eba9 0202 	sub.w	r2, r9, r2
 801e7c6:	2100      	movs	r1, #0
 801e7c8:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e7cc:	b28d      	uxth	r5, r1
 801e7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7d2:	db21      	blt.n	801e818 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801e7d4:	1a53      	subs	r3, r2, r1
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	dd1e      	ble.n	801e818 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801e7da:	2963      	cmp	r1, #99	; 0x63
 801e7dc:	d01b      	beq.n	801e816 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801e7de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e7e2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801e7e6:	ee17 3a10 	vmov	r3, s14
 801e7ea:	2b09      	cmp	r3, #9
 801e7ec:	bfa8      	it	ge
 801e7ee:	2309      	movge	r3, #9
 801e7f0:	ee07 3a10 	vmov	s14, r3
 801e7f4:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801e7f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e7fc:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801e800:	3101      	adds	r1, #1
 801e802:	eee7 7a66 	vfms.f32	s15, s14, s13
 801e806:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801e80a:	e7dd      	b.n	801e7c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801e80c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e810:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e814:	e7ce      	b.n	801e7b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801e816:	460d      	mov	r5, r1
 801e818:	2a63      	cmp	r2, #99	; 0x63
 801e81a:	bfd4      	ite	le
 801e81c:	ebc5 0202 	rsble	r2, r5, r2
 801e820:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801e824:	2a00      	cmp	r2, #0
 801e826:	dd4e      	ble.n	801e8c6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801e828:	4603      	mov	r3, r0
 801e82a:	f04f 0801 	mov.w	r8, #1
 801e82e:	2b00      	cmp	r3, #0
 801e830:	dd0e      	ble.n	801e850 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801e832:	ee67 7a86 	vmul.f32	s15, s15, s12
 801e836:	210a      	movs	r1, #10
 801e838:	3b01      	subs	r3, #1
 801e83a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e83e:	ee17 ca10 	vmov	ip, s14
 801e842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e846:	fb01 c808 	mla	r8, r1, r8, ip
 801e84a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e84e:	e7ee      	b.n	801e82e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801e850:	2800      	cmp	r0, #0
 801e852:	f100 33ff 	add.w	r3, r0, #4294967295
 801e856:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801e85a:	bfac      	ite	ge
 801e85c:	1a18      	subge	r0, r3, r0
 801e85e:	4618      	movlt	r0, r3
 801e860:	b292      	uxth	r2, r2
 801e862:	230a      	movs	r3, #10
 801e864:	900e      	str	r0, [sp, #56]	; 0x38
 801e866:	1979      	adds	r1, r7, r5
 801e868:	4640      	mov	r0, r8
 801e86a:	f7ff fc84 	bl	801e176 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e86e:	f1b8 0f01 	cmp.w	r8, #1
 801e872:	dc26      	bgt.n	801e8c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801e874:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801e878:	2b00      	cmp	r3, #0
 801e87a:	bf0c      	ite	eq
 801e87c:	2300      	moveq	r3, #0
 801e87e:	232e      	movne	r3, #46	; 0x2e
 801e880:	aa42      	add	r2, sp, #264	; 0x108
 801e882:	4415      	add	r5, r2
 801e884:	aa0c      	add	r2, sp, #48	; 0x30
 801e886:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801e88a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e88e:	a80f      	add	r0, sp, #60	; 0x3c
 801e890:	9205      	str	r2, [sp, #20]
 801e892:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801e896:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e89a:	9204      	str	r2, [sp, #16]
 801e89c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e89e:	9203      	str	r2, [sp, #12]
 801e8a0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801e8a4:	9202      	str	r2, [sp, #8]
 801e8a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e8a8:	9201      	str	r2, [sp, #4]
 801e8aa:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801e8ae:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801e8b2:	9200      	str	r2, [sp, #0]
 801e8b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8b6:	f7ff fc9f 	bl	801e1f8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801e8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8bc:	3302      	adds	r3, #2
 801e8be:	9309      	str	r3, [sp, #36]	; 0x24
 801e8c0:	e72f      	b.n	801e722 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e8c2:	232e      	movs	r3, #46	; 0x2e
 801e8c4:	e7dc      	b.n	801e880 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801e8c6:	ab42      	add	r3, sp, #264	; 0x108
 801e8c8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e8cc:	2300      	movs	r3, #0
 801e8ce:	e7d9      	b.n	801e884 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801e8d0:	2200      	movs	r2, #0
 801e8d2:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e8d6:	e71e      	b.n	801e716 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801e8d8:	459b      	cmp	fp, r3
 801e8da:	f77f af22 	ble.w	801e722 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e8de:	2300      	movs	r3, #0
 801e8e0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801e8e4:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801e8e8:	a809      	add	r0, sp, #36	; 0x24
 801e8ea:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e8ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e8f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e8f6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801e8fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801e8fe:	930d      	str	r3, [sp, #52]	; 0x34
 801e900:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e904:	930e      	str	r3, [sp, #56]	; 0x38
 801e906:	1cab      	adds	r3, r5, #2
 801e908:	9309      	str	r3, [sp, #36]	; 0x24
 801e90a:	ab0e      	add	r3, sp, #56	; 0x38
 801e90c:	9304      	str	r3, [sp, #16]
 801e90e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801e912:	9303      	str	r3, [sp, #12]
 801e914:	ab0d      	add	r3, sp, #52	; 0x34
 801e916:	9302      	str	r3, [sp, #8]
 801e918:	ab0b      	add	r3, sp, #44	; 0x2c
 801e91a:	9301      	str	r3, [sp, #4]
 801e91c:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801e920:	9300      	str	r3, [sp, #0]
 801e922:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801e926:	f7ff fd17 	bl	801e358 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801e92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	da0b      	bge.n	801e948 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801e930:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e934:	3401      	adds	r4, #1
 801e936:	edd3 7a00 	vldr	s15, [r3]
 801e93a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e93e:	ee17 3a90 	vmov	r3, s15
 801e942:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e946:	930d      	str	r3, [sp, #52]	; 0x34
 801e948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	da0b      	bge.n	801e966 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801e94e:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e952:	3401      	adds	r4, #1
 801e954:	edd3 7a00 	vldr	s15, [r3]
 801e958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e95c:	ee17 3a90 	vmov	r3, s15
 801e960:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e964:	930e      	str	r3, [sp, #56]	; 0x38
 801e966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e96a:	881b      	ldrh	r3, [r3, #0]
 801e96c:	2b25      	cmp	r3, #37	; 0x25
 801e96e:	f43f aef2 	beq.w	801e756 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801e972:	2b66      	cmp	r3, #102	; 0x66
 801e974:	f43f aef4 	beq.w	801e760 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801e978:	9509      	str	r5, [sp, #36]	; 0x24
 801e97a:	882b      	ldrh	r3, [r5, #0]
 801e97c:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e980:	3201      	adds	r2, #1
 801e982:	e6eb      	b.n	801e75c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801e984:	3f000002 	.word	0x3f000002

0801e988 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801e988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e98a:	4605      	mov	r5, r0
 801e98c:	b0a1      	sub	sp, #132	; 0x84
 801e98e:	4610      	mov	r0, r2
 801e990:	460e      	mov	r6, r1
 801e992:	4614      	mov	r4, r2
 801e994:	461f      	mov	r7, r3
 801e996:	f7ff fbb3 	bl	801e100 <_ZN8touchgfx7Unicode6strlenEPKc>
 801e99a:	283f      	cmp	r0, #63	; 0x3f
 801e99c:	d906      	bls.n	801e9ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801e99e:	4b0a      	ldr	r3, [pc, #40]	; (801e9c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801e9a0:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801e9a4:	4a09      	ldr	r2, [pc, #36]	; (801e9cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801e9a6:	480a      	ldr	r0, [pc, #40]	; (801e9d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801e9a8:	f009 fe2c 	bl	8028604 <__assert_func>
 801e9ac:	4621      	mov	r1, r4
 801e9ae:	2240      	movs	r2, #64	; 0x40
 801e9b0:	4668      	mov	r0, sp
 801e9b2:	f7ff fbb1 	bl	801e118 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e9b6:	463b      	mov	r3, r7
 801e9b8:	466a      	mov	r2, sp
 801e9ba:	4631      	mov	r1, r6
 801e9bc:	4628      	mov	r0, r5
 801e9be:	f7ff fe97 	bl	801e6f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801e9c2:	b021      	add	sp, #132	; 0x84
 801e9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9c6:	bf00      	nop
 801e9c8:	0802d251 	.word	0x0802d251
 801e9cc:	0802d294 	.word	0x0802d294
 801e9d0:	0802d26e 	.word	0x0802d26e

0801e9d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e9d4:	4b01      	ldr	r3, [pc, #4]	; (801e9dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e9d6:	6018      	str	r0, [r3, #0]
 801e9d8:	4770      	bx	lr
 801e9da:	bf00      	nop
 801e9dc:	2000bf90 	.word	0x2000bf90

0801e9e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e9e0:	4b07      	ldr	r3, [pc, #28]	; (801ea00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801e9e2:	881a      	ldrh	r2, [r3, #0]
 801e9e4:	4282      	cmp	r2, r0
 801e9e6:	d809      	bhi.n	801e9fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e9e8:	4b06      	ldr	r3, [pc, #24]	; (801ea04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801e9ea:	881b      	ldrh	r3, [r3, #0]
 801e9ec:	4413      	add	r3, r2
 801e9ee:	4298      	cmp	r0, r3
 801e9f0:	da04      	bge.n	801e9fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e9f2:	4b05      	ldr	r3, [pc, #20]	; (801ea08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e9fa:	4770      	bx	lr
 801e9fc:	2000      	movs	r0, #0
 801e9fe:	4770      	bx	lr
 801ea00:	2000bfb0 	.word	0x2000bfb0
 801ea04:	2000bfb4 	.word	0x2000bfb4
 801ea08:	2000bf94 	.word	0x2000bf94

0801ea0c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ea0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea10:	4d26      	ldr	r5, [pc, #152]	; (801eaac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ea12:	682b      	ldr	r3, [r5, #0]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d046      	beq.n	801eaa6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801ea18:	4a25      	ldr	r2, [pc, #148]	; (801eab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ea1a:	4f26      	ldr	r7, [pc, #152]	; (801eab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ea1c:	8810      	ldrh	r0, [r2, #0]
 801ea1e:	883c      	ldrh	r4, [r7, #0]
 801ea20:	4e25      	ldr	r6, [pc, #148]	; (801eab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ea22:	4420      	add	r0, r4
 801ea24:	1c42      	adds	r2, r0, #1
 801ea26:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801ea2a:	f022 0201 	bic.w	r2, r2, #1
 801ea2e:	0412      	lsls	r2, r2, #16
 801ea30:	0c12      	lsrs	r2, r2, #16
 801ea32:	0051      	lsls	r1, r2, #1
 801ea34:	220e      	movs	r2, #14
 801ea36:	eb08 0e01 	add.w	lr, r8, r1
 801ea3a:	fb02 fc04 	mul.w	ip, r2, r4
 801ea3e:	eb03 0208 	add.w	r2, r3, r8
 801ea42:	4c1e      	ldr	r4, [pc, #120]	; (801eabc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ea44:	6022      	str	r2, [r4, #0]
 801ea46:	eb03 020e 	add.w	r2, r3, lr
 801ea4a:	44e6      	add	lr, ip
 801ea4c:	6032      	str	r2, [r6, #0]
 801ea4e:	4473      	add	r3, lr
 801ea50:	4a1b      	ldr	r2, [pc, #108]	; (801eac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ea52:	6013      	str	r3, [r2, #0]
 801ea54:	2300      	movs	r3, #0
 801ea56:	4a1b      	ldr	r2, [pc, #108]	; (801eac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ea58:	8013      	strh	r3, [r2, #0]
 801ea5a:	4a1b      	ldr	r2, [pc, #108]	; (801eac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ea5c:	6812      	ldr	r2, [r2, #0]
 801ea5e:	eba2 0208 	sub.w	r2, r2, r8
 801ea62:	1a52      	subs	r2, r2, r1
 801ea64:	4919      	ldr	r1, [pc, #100]	; (801eacc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ea66:	eba2 020c 	sub.w	r2, r2, ip
 801ea6a:	469c      	mov	ip, r3
 801ea6c:	600a      	str	r2, [r1, #0]
 801ea6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ea72:	4a17      	ldr	r2, [pc, #92]	; (801ead0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ea74:	8013      	strh	r3, [r2, #0]
 801ea76:	4283      	cmp	r3, r0
 801ea78:	d10d      	bne.n	801ea96 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801ea7a:	883d      	ldrh	r5, [r7, #0]
 801ea7c:	2300      	movs	r3, #0
 801ea7e:	6830      	ldr	r0, [r6, #0]
 801ea80:	240e      	movs	r4, #14
 801ea82:	429d      	cmp	r5, r3
 801ea84:	d90f      	bls.n	801eaa6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801ea86:	fb04 0203 	mla	r2, r4, r3, r0
 801ea8a:	3301      	adds	r3, #1
 801ea8c:	7b11      	ldrb	r1, [r2, #12]
 801ea8e:	f36f 1145 	bfc	r1, #5, #1
 801ea92:	7311      	strb	r1, [r2, #12]
 801ea94:	e7f5      	b.n	801ea82 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801ea96:	682a      	ldr	r2, [r5, #0]
 801ea98:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ea9c:	6822      	ldr	r2, [r4, #0]
 801ea9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801eaa2:	3301      	adds	r3, #1
 801eaa4:	e7e7      	b.n	801ea76 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801eaa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eaaa:	bf00      	nop
 801eaac:	2000bf94 	.word	0x2000bf94
 801eab0:	2000bfb0 	.word	0x2000bfb0
 801eab4:	2000bfb4 	.word	0x2000bfb4
 801eab8:	2000bf98 	.word	0x2000bf98
 801eabc:	2000bfa8 	.word	0x2000bfa8
 801eac0:	2000bfa0 	.word	0x2000bfa0
 801eac4:	2000bfb2 	.word	0x2000bfb2
 801eac8:	2000bf9c 	.word	0x2000bf9c
 801eacc:	2000bfac 	.word	0x2000bfac
 801ead0:	2000bfa4 	.word	0x2000bfa4

0801ead4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ead4:	4b10      	ldr	r3, [pc, #64]	; (801eb18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801ead6:	b510      	push	{r4, lr}
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	b9db      	cbnz	r3, 801eb14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801eadc:	b1d1      	cbz	r1, 801eb14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801eade:	4b0f      	ldr	r3, [pc, #60]	; (801eb1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801eae0:	240e      	movs	r4, #14
 801eae2:	801a      	strh	r2, [r3, #0]
 801eae4:	b292      	uxth	r2, r2
 801eae6:	4b0e      	ldr	r3, [pc, #56]	; (801eb20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801eae8:	881b      	ldrh	r3, [r3, #0]
 801eaea:	4413      	add	r3, r2
 801eaec:	4362      	muls	r2, r4
 801eaee:	2406      	movs	r4, #6
 801eaf0:	fb04 2203 	mla	r2, r4, r3, r2
 801eaf4:	428a      	cmp	r2, r1
 801eaf6:	d305      	bcc.n	801eb04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801eaf8:	4b0a      	ldr	r3, [pc, #40]	; (801eb24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801eafa:	2137      	movs	r1, #55	; 0x37
 801eafc:	4a0a      	ldr	r2, [pc, #40]	; (801eb28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801eafe:	480b      	ldr	r0, [pc, #44]	; (801eb2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801eb00:	f009 fd80 	bl	8028604 <__assert_func>
 801eb04:	4b0a      	ldr	r3, [pc, #40]	; (801eb30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801eb06:	6019      	str	r1, [r3, #0]
 801eb08:	4b0a      	ldr	r3, [pc, #40]	; (801eb34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801eb0a:	6018      	str	r0, [r3, #0]
 801eb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb10:	f7ff bf7c 	b.w	801ea0c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801eb14:	bd10      	pop	{r4, pc}
 801eb16:	bf00      	nop
 801eb18:	2000bfa0 	.word	0x2000bfa0
 801eb1c:	2000bfb4 	.word	0x2000bfb4
 801eb20:	2000bfb0 	.word	0x2000bfb0
 801eb24:	0802d405 	.word	0x0802d405
 801eb28:	0802d45e 	.word	0x0802d45e
 801eb2c:	0802d3e0 	.word	0x0802d3e0
 801eb30:	2000bf9c 	.word	0x2000bf9c
 801eb34:	2000bf94 	.word	0x2000bf94

0801eb38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801eb38:	b470      	push	{r4, r5, r6}
 801eb3a:	4c07      	ldr	r4, [pc, #28]	; (801eb58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801eb3c:	4605      	mov	r5, r0
 801eb3e:	4610      	mov	r0, r2
 801eb40:	9a03      	ldr	r2, [sp, #12]
 801eb42:	6826      	ldr	r6, [r4, #0]
 801eb44:	b936      	cbnz	r6, 801eb54 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801eb46:	6025      	str	r5, [r4, #0]
 801eb48:	4c04      	ldr	r4, [pc, #16]	; (801eb5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801eb4a:	8021      	strh	r1, [r4, #0]
 801eb4c:	4619      	mov	r1, r3
 801eb4e:	bc70      	pop	{r4, r5, r6}
 801eb50:	f7ff bfc0 	b.w	801ead4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801eb54:	bc70      	pop	{r4, r5, r6}
 801eb56:	4770      	bx	lr
 801eb58:	2000bfb8 	.word	0x2000bfb8
 801eb5c:	2000bfb0 	.word	0x2000bfb0

0801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801eb60:	b508      	push	{r3, lr}
 801eb62:	4b14      	ldr	r3, [pc, #80]	; (801ebb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801eb64:	6819      	ldr	r1, [r3, #0]
 801eb66:	b931      	cbnz	r1, 801eb76 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801eb68:	4b13      	ldr	r3, [pc, #76]	; (801ebb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801eb6a:	f240 21e6 	movw	r1, #742	; 0x2e6
 801eb6e:	4a13      	ldr	r2, [pc, #76]	; (801ebbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801eb70:	4813      	ldr	r0, [pc, #76]	; (801ebc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801eb72:	f009 fd47 	bl	8028604 <__assert_func>
 801eb76:	4a13      	ldr	r2, [pc, #76]	; (801ebc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801eb78:	8803      	ldrh	r3, [r0, #0]
 801eb7a:	8812      	ldrh	r2, [r2, #0]
 801eb7c:	4293      	cmp	r3, r2
 801eb7e:	d204      	bcs.n	801eb8a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801eb80:	2214      	movs	r2, #20
 801eb82:	fb02 1303 	mla	r3, r2, r3, r1
 801eb86:	8918      	ldrh	r0, [r3, #8]
 801eb88:	bd08      	pop	{r3, pc}
 801eb8a:	490f      	ldr	r1, [pc, #60]	; (801ebc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801eb8c:	8809      	ldrh	r1, [r1, #0]
 801eb8e:	4411      	add	r1, r2
 801eb90:	428b      	cmp	r3, r1
 801eb92:	da06      	bge.n	801eba2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801eb94:	1a9b      	subs	r3, r3, r2
 801eb96:	4a0d      	ldr	r2, [pc, #52]	; (801ebcc <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801eb98:	210e      	movs	r1, #14
 801eb9a:	6812      	ldr	r2, [r2, #0]
 801eb9c:	fb01 2303 	mla	r3, r1, r3, r2
 801eba0:	e7f1      	b.n	801eb86 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801eba2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eba6:	4293      	cmp	r3, r2
 801eba8:	bf0a      	itet	eq
 801ebaa:	4b09      	ldreq	r3, [pc, #36]	; (801ebd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ebac:	2000      	movne	r0, #0
 801ebae:	8818      	ldrheq	r0, [r3, #0]
 801ebb0:	e7ea      	b.n	801eb88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ebb2:	bf00      	nop
 801ebb4:	2000bfb8 	.word	0x2000bfb8
 801ebb8:	0802b2e0 	.word	0x0802b2e0
 801ebbc:	0802d50b 	.word	0x0802d50b
 801ebc0:	0802d3e0 	.word	0x0802d3e0
 801ebc4:	2000bfb0 	.word	0x2000bfb0
 801ebc8:	2000bfb4 	.word	0x2000bfb4
 801ebcc:	2000bf98 	.word	0x2000bf98
 801ebd0:	2000bee2 	.word	0x2000bee2

0801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ebd4:	b508      	push	{r3, lr}
 801ebd6:	4b14      	ldr	r3, [pc, #80]	; (801ec28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ebd8:	6819      	ldr	r1, [r3, #0]
 801ebda:	b931      	cbnz	r1, 801ebea <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801ebdc:	4b13      	ldr	r3, [pc, #76]	; (801ec2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ebde:	f240 21fa 	movw	r1, #762	; 0x2fa
 801ebe2:	4a13      	ldr	r2, [pc, #76]	; (801ec30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ebe4:	4813      	ldr	r0, [pc, #76]	; (801ec34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ebe6:	f009 fd0d 	bl	8028604 <__assert_func>
 801ebea:	4a13      	ldr	r2, [pc, #76]	; (801ec38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ebec:	8803      	ldrh	r3, [r0, #0]
 801ebee:	8812      	ldrh	r2, [r2, #0]
 801ebf0:	4293      	cmp	r3, r2
 801ebf2:	d204      	bcs.n	801ebfe <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801ebf4:	2214      	movs	r2, #20
 801ebf6:	fb02 1303 	mla	r3, r2, r3, r1
 801ebfa:	8958      	ldrh	r0, [r3, #10]
 801ebfc:	bd08      	pop	{r3, pc}
 801ebfe:	490f      	ldr	r1, [pc, #60]	; (801ec3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ec00:	8809      	ldrh	r1, [r1, #0]
 801ec02:	4411      	add	r1, r2
 801ec04:	428b      	cmp	r3, r1
 801ec06:	da06      	bge.n	801ec16 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ec08:	1a9b      	subs	r3, r3, r2
 801ec0a:	4a0d      	ldr	r2, [pc, #52]	; (801ec40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ec0c:	210e      	movs	r1, #14
 801ec0e:	6812      	ldr	r2, [r2, #0]
 801ec10:	fb01 2303 	mla	r3, r1, r3, r2
 801ec14:	e7f1      	b.n	801ebfa <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ec16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ec1a:	4293      	cmp	r3, r2
 801ec1c:	bf0a      	itet	eq
 801ec1e:	4b09      	ldreq	r3, [pc, #36]	; (801ec44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ec20:	2000      	movne	r0, #0
 801ec22:	8818      	ldrheq	r0, [r3, #0]
 801ec24:	e7ea      	b.n	801ebfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ec26:	bf00      	nop
 801ec28:	2000bfb8 	.word	0x2000bfb8
 801ec2c:	0802b2e0 	.word	0x0802b2e0
 801ec30:	0802d537 	.word	0x0802d537
 801ec34:	0802d3e0 	.word	0x0802d3e0
 801ec38:	2000bfb0 	.word	0x2000bfb0
 801ec3c:	2000bfb4 	.word	0x2000bfb4
 801ec40:	2000bf98 	.word	0x2000bf98
 801ec44:	2000bee4 	.word	0x2000bee4

0801ec48 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ec48:	4b23      	ldr	r3, [pc, #140]	; (801ecd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ec4a:	b510      	push	{r4, lr}
 801ec4c:	681c      	ldr	r4, [r3, #0]
 801ec4e:	b934      	cbnz	r4, 801ec5e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ec50:	4b22      	ldr	r3, [pc, #136]	; (801ecdc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ec52:	f240 310e 	movw	r1, #782	; 0x30e
 801ec56:	4a22      	ldr	r2, [pc, #136]	; (801ece0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ec58:	4822      	ldr	r0, [pc, #136]	; (801ece4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ec5a:	f009 fcd3 	bl	8028604 <__assert_func>
 801ec5e:	4a22      	ldr	r2, [pc, #136]	; (801ece8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ec60:	880b      	ldrh	r3, [r1, #0]
 801ec62:	8812      	ldrh	r2, [r2, #0]
 801ec64:	4293      	cmp	r3, r2
 801ec66:	d211      	bcs.n	801ec8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ec68:	2214      	movs	r2, #20
 801ec6a:	fb02 4303 	mla	r3, r2, r3, r4
 801ec6e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ec72:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ec76:	8a1a      	ldrh	r2, [r3, #16]
 801ec78:	8a5b      	ldrh	r3, [r3, #18]
 801ec7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ec7e:	8004      	strh	r4, [r0, #0]
 801ec80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ec84:	8041      	strh	r1, [r0, #2]
 801ec86:	8082      	strh	r2, [r0, #4]
 801ec88:	80c3      	strh	r3, [r0, #6]
 801ec8a:	e00e      	b.n	801ecaa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ec8c:	4917      	ldr	r1, [pc, #92]	; (801ecec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ec8e:	8809      	ldrh	r1, [r1, #0]
 801ec90:	4411      	add	r1, r2
 801ec92:	428b      	cmp	r3, r1
 801ec94:	da0a      	bge.n	801ecac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ec96:	1a9b      	subs	r3, r3, r2
 801ec98:	4a15      	ldr	r2, [pc, #84]	; (801ecf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ec9a:	210e      	movs	r1, #14
 801ec9c:	6812      	ldr	r2, [r2, #0]
 801ec9e:	fb01 2303 	mla	r3, r1, r3, r2
 801eca2:	681a      	ldr	r2, [r3, #0]
 801eca4:	6002      	str	r2, [r0, #0]
 801eca6:	685a      	ldr	r2, [r3, #4]
 801eca8:	6042      	str	r2, [r0, #4]
 801ecaa:	bd10      	pop	{r4, pc}
 801ecac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ecb0:	4293      	cmp	r3, r2
 801ecb2:	d10b      	bne.n	801eccc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801ecb4:	4b0f      	ldr	r3, [pc, #60]	; (801ecf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ecb6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ecba:	4b0f      	ldr	r3, [pc, #60]	; (801ecf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801ecbc:	8081      	strh	r1, [r0, #4]
 801ecbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	80c2      	strh	r2, [r0, #6]
 801ecc6:	8003      	strh	r3, [r0, #0]
 801ecc8:	8043      	strh	r3, [r0, #2]
 801ecca:	e7ee      	b.n	801ecaa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801eccc:	2300      	movs	r3, #0
 801ecce:	8003      	strh	r3, [r0, #0]
 801ecd0:	8043      	strh	r3, [r0, #2]
 801ecd2:	8083      	strh	r3, [r0, #4]
 801ecd4:	e7d8      	b.n	801ec88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801ecd6:	bf00      	nop
 801ecd8:	2000bfb8 	.word	0x2000bfb8
 801ecdc:	0802b2e0 	.word	0x0802b2e0
 801ece0:	0802d4a4 	.word	0x0802d4a4
 801ece4:	0802d3e0 	.word	0x0802d3e0
 801ece8:	2000bfb0 	.word	0x2000bfb0
 801ecec:	2000bfb4 	.word	0x2000bfb4
 801ecf0:	2000bf98 	.word	0x2000bf98
 801ecf4:	2000bee2 	.word	0x2000bee2
 801ecf8:	2000bee4 	.word	0x2000bee4

0801ecfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ecfc:	4b18      	ldr	r3, [pc, #96]	; (801ed60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	b34b      	cbz	r3, 801ed56 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ed02:	4a18      	ldr	r2, [pc, #96]	; (801ed64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ed04:	8800      	ldrh	r0, [r0, #0]
 801ed06:	8812      	ldrh	r2, [r2, #0]
 801ed08:	4290      	cmp	r0, r2
 801ed0a:	d211      	bcs.n	801ed30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801ed0c:	2214      	movs	r2, #20
 801ed0e:	fb02 3300 	mla	r3, r2, r0, r3
 801ed12:	8a1a      	ldrh	r2, [r3, #16]
 801ed14:	8919      	ldrh	r1, [r3, #8]
 801ed16:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ed1a:	428a      	cmp	r2, r1
 801ed1c:	db1d      	blt.n	801ed5a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ed1e:	8a58      	ldrh	r0, [r3, #18]
 801ed20:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ed24:	895b      	ldrh	r3, [r3, #10]
 801ed26:	4298      	cmp	r0, r3
 801ed28:	bfac      	ite	ge
 801ed2a:	2000      	movge	r0, #0
 801ed2c:	2001      	movlt	r0, #1
 801ed2e:	4770      	bx	lr
 801ed30:	4b0d      	ldr	r3, [pc, #52]	; (801ed68 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ed32:	881b      	ldrh	r3, [r3, #0]
 801ed34:	4413      	add	r3, r2
 801ed36:	4298      	cmp	r0, r3
 801ed38:	da0d      	bge.n	801ed56 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ed3a:	4b0c      	ldr	r3, [pc, #48]	; (801ed6c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801ed3c:	1a80      	subs	r0, r0, r2
 801ed3e:	220e      	movs	r2, #14
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	fb02 3300 	mla	r3, r2, r0, r3
 801ed46:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ed4a:	891a      	ldrh	r2, [r3, #8]
 801ed4c:	4291      	cmp	r1, r2
 801ed4e:	db04      	blt.n	801ed5a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ed50:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ed54:	e7e6      	b.n	801ed24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801ed56:	2000      	movs	r0, #0
 801ed58:	4770      	bx	lr
 801ed5a:	2001      	movs	r0, #1
 801ed5c:	4770      	bx	lr
 801ed5e:	bf00      	nop
 801ed60:	2000bfb8 	.word	0x2000bfb8
 801ed64:	2000bfb0 	.word	0x2000bfb0
 801ed68:	2000bfb4 	.word	0x2000bfb4
 801ed6c:	2000bf98 	.word	0x2000bf98

0801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ed70:	b508      	push	{r3, lr}
 801ed72:	4b12      	ldr	r3, [pc, #72]	; (801edbc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ed74:	6819      	ldr	r1, [r3, #0]
 801ed76:	b931      	cbnz	r1, 801ed86 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ed78:	4b11      	ldr	r3, [pc, #68]	; (801edc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ed7a:	f240 3132 	movw	r1, #818	; 0x332
 801ed7e:	4a11      	ldr	r2, [pc, #68]	; (801edc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ed80:	4811      	ldr	r0, [pc, #68]	; (801edc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ed82:	f009 fc3f 	bl	8028604 <__assert_func>
 801ed86:	8803      	ldrh	r3, [r0, #0]
 801ed88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ed8c:	4293      	cmp	r3, r2
 801ed8e:	d012      	beq.n	801edb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ed90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ed94:	4293      	cmp	r3, r2
 801ed96:	d103      	bne.n	801eda0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ed98:	4b0c      	ldr	r3, [pc, #48]	; (801edcc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ed9e:	bd08      	pop	{r3, pc}
 801eda0:	4a0b      	ldr	r2, [pc, #44]	; (801edd0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801eda2:	6812      	ldr	r2, [r2, #0]
 801eda4:	b11a      	cbz	r2, 801edae <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801eda6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801edaa:	2800      	cmp	r0, #0
 801edac:	d1f7      	bne.n	801ed9e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801edae:	2214      	movs	r2, #20
 801edb0:	4353      	muls	r3, r2
 801edb2:	58c8      	ldr	r0, [r1, r3]
 801edb4:	e7f3      	b.n	801ed9e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801edb6:	2000      	movs	r0, #0
 801edb8:	e7f1      	b.n	801ed9e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801edba:	bf00      	nop
 801edbc:	2000bfb8 	.word	0x2000bfb8
 801edc0:	0802b2e0 	.word	0x0802b2e0
 801edc4:	0802d4da 	.word	0x0802d4da
 801edc8:	0802d3e0 	.word	0x0802d3e0
 801edcc:	2000bef0 	.word	0x2000bef0
 801edd0:	2000bf94 	.word	0x2000bf94

0801edd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801edd4:	8802      	ldrh	r2, [r0, #0]
 801edd6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801edda:	429a      	cmp	r2, r3
 801eddc:	d840      	bhi.n	801ee60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801edde:	4b21      	ldr	r3, [pc, #132]	; (801ee64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801ede0:	881b      	ldrh	r3, [r3, #0]
 801ede2:	429a      	cmp	r2, r3
 801ede4:	d220      	bcs.n	801ee28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801ede6:	4b20      	ldr	r3, [pc, #128]	; (801ee68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ede8:	6819      	ldr	r1, [r3, #0]
 801edea:	2314      	movs	r3, #20
 801edec:	fb03 1302 	mla	r3, r3, r2, r1
 801edf0:	6858      	ldr	r0, [r3, #4]
 801edf2:	2800      	cmp	r0, #0
 801edf4:	d035      	beq.n	801ee62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801edf6:	491d      	ldr	r1, [pc, #116]	; (801ee6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801edf8:	6809      	ldr	r1, [r1, #0]
 801edfa:	2900      	cmp	r1, #0
 801edfc:	d031      	beq.n	801ee62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801edfe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ee02:	b371      	cbz	r1, 801ee62 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ee04:	895a      	ldrh	r2, [r3, #10]
 801ee06:	8918      	ldrh	r0, [r3, #8]
 801ee08:	4350      	muls	r0, r2
 801ee0a:	7c5a      	ldrb	r2, [r3, #17]
 801ee0c:	7cdb      	ldrb	r3, [r3, #19]
 801ee0e:	0952      	lsrs	r2, r2, #5
 801ee10:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ee14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ee18:	2b0b      	cmp	r3, #11
 801ee1a:	bf18      	it	ne
 801ee1c:	0040      	lslne	r0, r0, #1
 801ee1e:	3003      	adds	r0, #3
 801ee20:	f020 0003 	bic.w	r0, r0, #3
 801ee24:	4408      	add	r0, r1
 801ee26:	4770      	bx	lr
 801ee28:	4911      	ldr	r1, [pc, #68]	; (801ee70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ee2a:	8809      	ldrh	r1, [r1, #0]
 801ee2c:	4419      	add	r1, r3
 801ee2e:	428a      	cmp	r2, r1
 801ee30:	da16      	bge.n	801ee60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ee32:	4910      	ldr	r1, [pc, #64]	; (801ee74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ee34:	1ad3      	subs	r3, r2, r3
 801ee36:	200e      	movs	r0, #14
 801ee38:	6809      	ldr	r1, [r1, #0]
 801ee3a:	fb00 1303 	mla	r3, r0, r3, r1
 801ee3e:	7b19      	ldrb	r1, [r3, #12]
 801ee40:	f001 011f 	and.w	r1, r1, #31
 801ee44:	290b      	cmp	r1, #11
 801ee46:	d10b      	bne.n	801ee60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ee48:	8919      	ldrh	r1, [r3, #8]
 801ee4a:	8958      	ldrh	r0, [r3, #10]
 801ee4c:	4b07      	ldr	r3, [pc, #28]	; (801ee6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ee4e:	4348      	muls	r0, r1
 801ee50:	6819      	ldr	r1, [r3, #0]
 801ee52:	3003      	adds	r0, #3
 801ee54:	f020 0303 	bic.w	r3, r0, #3
 801ee58:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ee5c:	4418      	add	r0, r3
 801ee5e:	4770      	bx	lr
 801ee60:	2000      	movs	r0, #0
 801ee62:	4770      	bx	lr
 801ee64:	2000bfb0 	.word	0x2000bfb0
 801ee68:	2000bfb8 	.word	0x2000bfb8
 801ee6c:	2000bf94 	.word	0x2000bf94
 801ee70:	2000bfb4 	.word	0x2000bfb4
 801ee74:	2000bf98 	.word	0x2000bf98

0801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ee78:	4b19      	ldr	r3, [pc, #100]	; (801eee0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ee7a:	6819      	ldr	r1, [r3, #0]
 801ee7c:	8803      	ldrh	r3, [r0, #0]
 801ee7e:	b1e9      	cbz	r1, 801eebc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ee80:	4a18      	ldr	r2, [pc, #96]	; (801eee4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ee82:	8812      	ldrh	r2, [r2, #0]
 801ee84:	429a      	cmp	r2, r3
 801ee86:	d90a      	bls.n	801ee9e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ee88:	2214      	movs	r2, #20
 801ee8a:	fb02 1303 	mla	r3, r2, r3, r1
 801ee8e:	7c58      	ldrb	r0, [r3, #17]
 801ee90:	0942      	lsrs	r2, r0, #5
 801ee92:	7cd8      	ldrb	r0, [r3, #19]
 801ee94:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801ee98:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801ee9c:	4770      	bx	lr
 801ee9e:	4912      	ldr	r1, [pc, #72]	; (801eee8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801eea0:	8809      	ldrh	r1, [r1, #0]
 801eea2:	4411      	add	r1, r2
 801eea4:	428b      	cmp	r3, r1
 801eea6:	da09      	bge.n	801eebc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801eea8:	1a9b      	subs	r3, r3, r2
 801eeaa:	4a10      	ldr	r2, [pc, #64]	; (801eeec <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801eeac:	210e      	movs	r1, #14
 801eeae:	6812      	ldr	r2, [r2, #0]
 801eeb0:	fb01 2303 	mla	r3, r1, r3, r2
 801eeb4:	7b18      	ldrb	r0, [r3, #12]
 801eeb6:	f000 001f 	and.w	r0, r0, #31
 801eeba:	4770      	bx	lr
 801eebc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eec0:	4293      	cmp	r3, r2
 801eec2:	d10a      	bne.n	801eeda <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801eec4:	4b0a      	ldr	r3, [pc, #40]	; (801eef0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801eecc:	b10a      	cbz	r2, 801eed2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801eece:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801eed0:	b900      	cbnz	r0, 801eed4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801eed2:	6898      	ldr	r0, [r3, #8]
 801eed4:	6803      	ldr	r3, [r0, #0]
 801eed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eed8:	4718      	bx	r3
 801eeda:	2000      	movs	r0, #0
 801eedc:	4770      	bx	lr
 801eede:	bf00      	nop
 801eee0:	2000bfb8 	.word	0x2000bfb8
 801eee4:	2000bfb0 	.word	0x2000bfb0
 801eee8:	2000bfb4 	.word	0x2000bfb4
 801eeec:	2000bf98 	.word	0x2000bf98
 801eef0:	2000bef0 	.word	0x2000bef0

0801eef4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801eef4:	2018      	movs	r0, #24
 801eef6:	4770      	bx	lr

0801eef8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801eef8:	2001      	movs	r0, #1
 801eefa:	4770      	bx	lr

0801eefc <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801eefc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ef00:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801ef04:	4770      	bx	lr

0801ef06 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801ef06:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801ef0a:	4770      	bx	lr

0801ef0c <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801ef0c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801ef10:	4770      	bx	lr

0801ef12 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801ef12:	b2c8      	uxtb	r0, r1
 801ef14:	4770      	bx	lr

0801ef16 <_ZN8touchgfx8LCD24bpp4initEv>:
 801ef16:	4770      	bx	lr

0801ef18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ef18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef1c:	b085      	sub	sp, #20
 801ef1e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ef20:	9203      	str	r2, [sp, #12]
 801ef22:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ef26:	6878      	ldr	r0, [r7, #4]
 801ef28:	9201      	str	r2, [sp, #4]
 801ef2a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801ef2c:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801ef30:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801ef34:	fa1f fc84 	uxth.w	ip, r4
 801ef38:	43e4      	mvns	r4, r4
 801ef3a:	9100      	str	r1, [sp, #0]
 801ef3c:	b2e4      	uxtb	r4, r4
 801ef3e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ef42:	fb00 2505 	mla	r5, r0, r5, r2
 801ef46:	683a      	ldr	r2, [r7, #0]
 801ef48:	6877      	ldr	r7, [r6, #4]
 801ef4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef4e:	3704      	adds	r7, #4
 801ef50:	4415      	add	r5, r2
 801ef52:	6832      	ldr	r2, [r6, #0]
 801ef54:	9202      	str	r2, [sp, #8]
 801ef56:	9a00      	ldr	r2, [sp, #0]
 801ef58:	2a00      	cmp	r2, #0
 801ef5a:	dc03      	bgt.n	801ef64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801ef5c:	9a03      	ldr	r2, [sp, #12]
 801ef5e:	2a00      	cmp	r2, #0
 801ef60:	f340 8116 	ble.w	801f190 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ef64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef66:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef6c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	dd0f      	ble.n	801ef94 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801ef74:	1406      	asrs	r6, r0, #16
 801ef76:	d406      	bmi.n	801ef86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef78:	4546      	cmp	r6, r8
 801ef7a:	da04      	bge.n	801ef86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef7c:	1416      	asrs	r6, r2, #16
 801ef7e:	d402      	bmi.n	801ef86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef80:	9901      	ldr	r1, [sp, #4]
 801ef82:	428e      	cmp	r6, r1
 801ef84:	db07      	blt.n	801ef96 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801ef86:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ef88:	3b01      	subs	r3, #1
 801ef8a:	3503      	adds	r5, #3
 801ef8c:	4408      	add	r0, r1
 801ef8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ef90:	440a      	add	r2, r1
 801ef92:	e7ed      	b.n	801ef70 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801ef94:	d011      	beq.n	801efba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801ef96:	1e5e      	subs	r6, r3, #1
 801ef98:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ef9a:	fb01 0e06 	mla	lr, r1, r6, r0
 801ef9e:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801efa2:	d548      	bpl.n	801f036 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801efa4:	4699      	mov	r9, r3
 801efa6:	462e      	mov	r6, r5
 801efa8:	f1b9 0f00 	cmp.w	r9, #0
 801efac:	f300 809e 	bgt.w	801f0ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801efb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efb8:	441d      	add	r5, r3
 801efba:	9b00      	ldr	r3, [sp, #0]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	f340 80e7 	ble.w	801f190 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801efc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801efc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efcc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efd0:	eef0 6a62 	vmov.f32	s13, s5
 801efd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801efd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801efe0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801efe4:	eef0 6a43 	vmov.f32	s13, s6
 801efe8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801efec:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801eff0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eff4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eff8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801effc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f000:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f004:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f008:	ee12 2a90 	vmov	r2, s5
 801f00c:	eef0 2a47 	vmov.f32	s5, s14
 801f010:	fb92 f3f3 	sdiv	r3, r2, r3
 801f014:	ee13 2a10 	vmov	r2, s6
 801f018:	9311      	str	r3, [sp, #68]	; 0x44
 801f01a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f01c:	eeb0 3a67 	vmov.f32	s6, s15
 801f020:	fb92 f3f3 	sdiv	r3, r2, r3
 801f024:	9312      	str	r3, [sp, #72]	; 0x48
 801f026:	9b00      	ldr	r3, [sp, #0]
 801f028:	9a03      	ldr	r2, [sp, #12]
 801f02a:	3b01      	subs	r3, #1
 801f02c:	9300      	str	r3, [sp, #0]
 801f02e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f030:	bf08      	it	eq
 801f032:	4613      	moveq	r3, r2
 801f034:	e78f      	b.n	801ef56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801f036:	45c6      	cmp	lr, r8
 801f038:	dab4      	bge.n	801efa4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801f03a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f03c:	fb01 2606 	mla	r6, r1, r6, r2
 801f040:	1436      	asrs	r6, r6, #16
 801f042:	d4af      	bmi.n	801efa4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801f044:	9901      	ldr	r1, [sp, #4]
 801f046:	428e      	cmp	r6, r1
 801f048:	daac      	bge.n	801efa4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801f04a:	1cee      	adds	r6, r5, #3
 801f04c:	4699      	mov	r9, r3
 801f04e:	f1b9 0f00 	cmp.w	r9, #0
 801f052:	f106 0603 	add.w	r6, r6, #3
 801f056:	ddab      	ble.n	801efb0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f058:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801f05c:	9902      	ldr	r1, [sp, #8]
 801f05e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f062:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f066:	fb08 1e0e 	mla	lr, r8, lr, r1
 801f06a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f06c:	fb1b fb04 	smulbb	fp, fp, r4
 801f070:	f109 39ff 	add.w	r9, r9, #4294967295
 801f074:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801f078:	4408      	add	r0, r1
 801f07a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f07c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f080:	440a      	add	r2, r1
 801f082:	eb07 0a0e 	add.w	sl, r7, lr
 801f086:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f08a:	fb0e be0c 	mla	lr, lr, ip, fp
 801f08e:	fa1f fe8e 	uxth.w	lr, lr
 801f092:	f10e 0b01 	add.w	fp, lr, #1
 801f096:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f09a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f09e:	fb1b fb04 	smulbb	fp, fp, r4
 801f0a2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0a6:	f806 ec06 	strb.w	lr, [r6, #-6]
 801f0aa:	f89a e001 	ldrb.w	lr, [sl, #1]
 801f0ae:	fb0e be0c 	mla	lr, lr, ip, fp
 801f0b2:	fa1f fe8e 	uxth.w	lr, lr
 801f0b6:	f10e 0b01 	add.w	fp, lr, #1
 801f0ba:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f0be:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0c2:	f806 ec05 	strb.w	lr, [r6, #-5]
 801f0c6:	f89a e002 	ldrb.w	lr, [sl, #2]
 801f0ca:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f0ce:	fb1a fa04 	smulbb	sl, sl, r4
 801f0d2:	fb0e ae0c 	mla	lr, lr, ip, sl
 801f0d6:	fa1f fe8e 	uxth.w	lr, lr
 801f0da:	f10e 0a01 	add.w	sl, lr, #1
 801f0de:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801f0e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0e6:	f806 ec04 	strb.w	lr, [r6, #-4]
 801f0ea:	e7b0      	b.n	801f04e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801f0ec:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f0f0:	d446      	bmi.n	801f180 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801f0f2:	45c2      	cmp	sl, r8
 801f0f4:	da44      	bge.n	801f180 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801f0f6:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801f0fa:	d441      	bmi.n	801f180 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801f0fc:	9901      	ldr	r1, [sp, #4]
 801f0fe:	458e      	cmp	lr, r1
 801f100:	da3e      	bge.n	801f180 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801f102:	9902      	ldr	r1, [sp, #8]
 801f104:	f896 b000 	ldrb.w	fp, [r6]
 801f108:	fb08 1e0e 	mla	lr, r8, lr, r1
 801f10c:	fb1b fb04 	smulbb	fp, fp, r4
 801f110:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801f114:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f118:	eb07 0a0e 	add.w	sl, r7, lr
 801f11c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f120:	fb0e be0c 	mla	lr, lr, ip, fp
 801f124:	fa1f fe8e 	uxth.w	lr, lr
 801f128:	f10e 0b01 	add.w	fp, lr, #1
 801f12c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f130:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f134:	fb1b fb04 	smulbb	fp, fp, r4
 801f138:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f13c:	f886 e000 	strb.w	lr, [r6]
 801f140:	f89a e001 	ldrb.w	lr, [sl, #1]
 801f144:	fb0e be0c 	mla	lr, lr, ip, fp
 801f148:	fa1f fe8e 	uxth.w	lr, lr
 801f14c:	f10e 0b01 	add.w	fp, lr, #1
 801f150:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f154:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f158:	f886 e001 	strb.w	lr, [r6, #1]
 801f15c:	f89a e002 	ldrb.w	lr, [sl, #2]
 801f160:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f164:	fb1a fa04 	smulbb	sl, sl, r4
 801f168:	fb0e ae0c 	mla	lr, lr, ip, sl
 801f16c:	fa1f fe8e 	uxth.w	lr, lr
 801f170:	f10e 0a01 	add.w	sl, lr, #1
 801f174:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801f178:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f17c:	f886 e002 	strb.w	lr, [r6, #2]
 801f180:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f182:	3603      	adds	r6, #3
 801f184:	f109 39ff 	add.w	r9, r9, #4294967295
 801f188:	4408      	add	r0, r1
 801f18a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f18c:	440a      	add	r2, r1
 801f18e:	e70b      	b.n	801efa8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801f190:	b005      	add	sp, #20
 801f192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f196 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f19a:	b085      	sub	sp, #20
 801f19c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f1a0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f1a2:	9203      	str	r2, [sp, #12]
 801f1a4:	6870      	ldr	r0, [r6, #4]
 801f1a6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f1a8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f1ac:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801f1b0:	9101      	str	r1, [sp, #4]
 801f1b2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f1b6:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801f1ba:	fb00 2404 	mla	r4, r0, r4, r2
 801f1be:	6832      	ldr	r2, [r6, #0]
 801f1c0:	686e      	ldr	r6, [r5, #4]
 801f1c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f1c6:	3604      	adds	r6, #4
 801f1c8:	4414      	add	r4, r2
 801f1ca:	682a      	ldr	r2, [r5, #0]
 801f1cc:	9202      	str	r2, [sp, #8]
 801f1ce:	9a01      	ldr	r2, [sp, #4]
 801f1d0:	2a00      	cmp	r2, #0
 801f1d2:	dc03      	bgt.n	801f1dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801f1d4:	9a03      	ldr	r2, [sp, #12]
 801f1d6:	2a00      	cmp	r2, #0
 801f1d8:	f340 80b2 	ble.w	801f340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f1dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f1de:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f1e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f1e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	dd0c      	ble.n	801f206 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f1ec:	1405      	asrs	r5, r0, #16
 801f1ee:	d405      	bmi.n	801f1fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f1f0:	4575      	cmp	r5, lr
 801f1f2:	da03      	bge.n	801f1fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f1f4:	1415      	asrs	r5, r2, #16
 801f1f6:	d401      	bmi.n	801f1fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f1f8:	4545      	cmp	r5, r8
 801f1fa:	db05      	blt.n	801f208 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f1fc:	4460      	add	r0, ip
 801f1fe:	443a      	add	r2, r7
 801f200:	3b01      	subs	r3, #1
 801f202:	3403      	adds	r4, #3
 801f204:	e7f0      	b.n	801f1e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801f206:	d03d      	beq.n	801f284 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801f208:	1e5d      	subs	r5, r3, #1
 801f20a:	fb0c 0905 	mla	r9, ip, r5, r0
 801f20e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801f212:	d42c      	bmi.n	801f26e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f214:	45f1      	cmp	r9, lr
 801f216:	da2a      	bge.n	801f26e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f218:	fb07 2505 	mla	r5, r7, r5, r2
 801f21c:	142d      	asrs	r5, r5, #16
 801f21e:	d426      	bmi.n	801f26e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f220:	4545      	cmp	r5, r8
 801f222:	da24      	bge.n	801f26e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f224:	1ce5      	adds	r5, r4, #3
 801f226:	469a      	mov	sl, r3
 801f228:	f1ba 0f00 	cmp.w	sl, #0
 801f22c:	f105 0503 	add.w	r5, r5, #3
 801f230:	dd23      	ble.n	801f27a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f232:	ea4f 4922 	mov.w	r9, r2, asr #16
 801f236:	9902      	ldr	r1, [sp, #8]
 801f238:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801f23c:	443a      	add	r2, r7
 801f23e:	fb0e 1909 	mla	r9, lr, r9, r1
 801f242:	4460      	add	r0, ip
 801f244:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f248:	f819 900b 	ldrb.w	r9, [r9, fp]
 801f24c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f250:	eb06 0b09 	add.w	fp, r6, r9
 801f254:	f816 9009 	ldrb.w	r9, [r6, r9]
 801f258:	f805 9c06 	strb.w	r9, [r5, #-6]
 801f25c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801f260:	f805 9c05 	strb.w	r9, [r5, #-5]
 801f264:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f268:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f26c:	e7dc      	b.n	801f228 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f26e:	2500      	movs	r5, #0
 801f270:	eba3 0905 	sub.w	r9, r3, r5
 801f274:	f1b9 0f00 	cmp.w	r9, #0
 801f278:	dc3c      	bgt.n	801f2f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801f27a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f27e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f282:	441c      	add	r4, r3
 801f284:	9b01      	ldr	r3, [sp, #4]
 801f286:	2b00      	cmp	r3, #0
 801f288:	dd5a      	ble.n	801f340 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f28a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f28e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f290:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f294:	eeb0 6a62 	vmov.f32	s12, s5
 801f298:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f29c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2a4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f2a8:	eeb0 6a43 	vmov.f32	s12, s6
 801f2ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2b0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f2b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2cc:	ee12 2a90 	vmov	r2, s5
 801f2d0:	eef0 2a47 	vmov.f32	s5, s14
 801f2d4:	fb92 fcf3 	sdiv	ip, r2, r3
 801f2d8:	ee13 2a10 	vmov	r2, s6
 801f2dc:	eeb0 3a67 	vmov.f32	s6, s15
 801f2e0:	fb92 f7f3 	sdiv	r7, r2, r3
 801f2e4:	9b01      	ldr	r3, [sp, #4]
 801f2e6:	9a03      	ldr	r2, [sp, #12]
 801f2e8:	3b01      	subs	r3, #1
 801f2ea:	9301      	str	r3, [sp, #4]
 801f2ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2ee:	bf08      	it	eq
 801f2f0:	4613      	moveq	r3, r2
 801f2f2:	e76c      	b.n	801f1ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801f2f4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f2f8:	d41e      	bmi.n	801f338 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f2fa:	45f2      	cmp	sl, lr
 801f2fc:	da1c      	bge.n	801f338 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f2fe:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f302:	d419      	bmi.n	801f338 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f304:	45c1      	cmp	r9, r8
 801f306:	da17      	bge.n	801f338 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f308:	9902      	ldr	r1, [sp, #8]
 801f30a:	fb0e 1909 	mla	r9, lr, r9, r1
 801f30e:	f819 900a 	ldrb.w	r9, [r9, sl]
 801f312:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f316:	f816 b009 	ldrb.w	fp, [r6, r9]
 801f31a:	eb06 0a09 	add.w	sl, r6, r9
 801f31e:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801f322:	f804 b009 	strb.w	fp, [r4, r9]
 801f326:	44a1      	add	r9, r4
 801f328:	f89a b001 	ldrb.w	fp, [sl, #1]
 801f32c:	f889 b001 	strb.w	fp, [r9, #1]
 801f330:	f89a a002 	ldrb.w	sl, [sl, #2]
 801f334:	f889 a002 	strb.w	sl, [r9, #2]
 801f338:	4460      	add	r0, ip
 801f33a:	443a      	add	r2, r7
 801f33c:	3501      	adds	r5, #1
 801f33e:	e797      	b.n	801f270 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801f340:	b005      	add	sp, #20
 801f342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f34a:	b087      	sub	sp, #28
 801f34c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f350:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801f352:	9204      	str	r2, [sp, #16]
 801f354:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801f358:	6870      	ldr	r0, [r6, #4]
 801f35a:	9205      	str	r2, [sp, #20]
 801f35c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f35e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801f362:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801f366:	9101      	str	r1, [sp, #4]
 801f368:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f36c:	fb00 2505 	mla	r5, r0, r5, r2
 801f370:	6832      	ldr	r2, [r6, #0]
 801f372:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f376:	4415      	add	r5, r2
 801f378:	6822      	ldr	r2, [r4, #0]
 801f37a:	9202      	str	r2, [sp, #8]
 801f37c:	6862      	ldr	r2, [r4, #4]
 801f37e:	3204      	adds	r2, #4
 801f380:	9203      	str	r2, [sp, #12]
 801f382:	9a01      	ldr	r2, [sp, #4]
 801f384:	2a00      	cmp	r2, #0
 801f386:	dc03      	bgt.n	801f390 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801f388:	9a04      	ldr	r2, [sp, #16]
 801f38a:	2a00      	cmp	r2, #0
 801f38c:	f340 8124 	ble.w	801f5d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f390:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f392:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f398:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	dd0e      	ble.n	801f3be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801f3a0:	1422      	asrs	r2, r4, #16
 801f3a2:	d405      	bmi.n	801f3b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f3a4:	4572      	cmp	r2, lr
 801f3a6:	da03      	bge.n	801f3b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f3a8:	1402      	asrs	r2, r0, #16
 801f3aa:	d401      	bmi.n	801f3b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f3ac:	4542      	cmp	r2, r8
 801f3ae:	db07      	blt.n	801f3c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f3b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f3b2:	3b01      	subs	r3, #1
 801f3b4:	3503      	adds	r5, #3
 801f3b6:	4414      	add	r4, r2
 801f3b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f3ba:	4410      	add	r0, r2
 801f3bc:	e7ee      	b.n	801f39c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801f3be:	d010      	beq.n	801f3e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801f3c0:	1e5a      	subs	r2, r3, #1
 801f3c2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f3c4:	fb06 4602 	mla	r6, r6, r2, r4
 801f3c8:	1436      	asrs	r6, r6, #16
 801f3ca:	d546      	bpl.n	801f45a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801f3cc:	4699      	mov	r9, r3
 801f3ce:	462f      	mov	r7, r5
 801f3d0:	f1b9 0f00 	cmp.w	r9, #0
 801f3d4:	f300 80a5 	bgt.w	801f522 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801f3d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3e0:	441d      	add	r5, r3
 801f3e2:	9b01      	ldr	r3, [sp, #4]
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	f340 80f7 	ble.w	801f5d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f3ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3f4:	eeb0 6a62 	vmov.f32	s12, s5
 801f3f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f3fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f400:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f404:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f408:	eeb0 6a43 	vmov.f32	s12, s6
 801f40c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f410:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f414:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f418:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f41c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f420:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f424:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f428:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f42c:	ee12 2a90 	vmov	r2, s5
 801f430:	eef0 2a47 	vmov.f32	s5, s14
 801f434:	fb92 f3f3 	sdiv	r3, r2, r3
 801f438:	ee13 2a10 	vmov	r2, s6
 801f43c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f43e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f440:	eeb0 3a67 	vmov.f32	s6, s15
 801f444:	fb92 f3f3 	sdiv	r3, r2, r3
 801f448:	9314      	str	r3, [sp, #80]	; 0x50
 801f44a:	9b01      	ldr	r3, [sp, #4]
 801f44c:	9a04      	ldr	r2, [sp, #16]
 801f44e:	3b01      	subs	r3, #1
 801f450:	9301      	str	r3, [sp, #4]
 801f452:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f454:	bf08      	it	eq
 801f456:	4613      	moveq	r3, r2
 801f458:	e793      	b.n	801f382 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f45a:	4576      	cmp	r6, lr
 801f45c:	dab6      	bge.n	801f3cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f45e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f460:	fb06 0202 	mla	r2, r6, r2, r0
 801f464:	1412      	asrs	r2, r2, #16
 801f466:	d4b1      	bmi.n	801f3cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f468:	4542      	cmp	r2, r8
 801f46a:	daaf      	bge.n	801f3cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f46c:	1cef      	adds	r7, r5, #3
 801f46e:	4699      	mov	r9, r3
 801f470:	f1b9 0f00 	cmp.w	r9, #0
 801f474:	ddb0      	ble.n	801f3d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f476:	9902      	ldr	r1, [sp, #8]
 801f478:	1402      	asrs	r2, r0, #16
 801f47a:	1426      	asrs	r6, r4, #16
 801f47c:	fb0e 1202 	mla	r2, lr, r2, r1
 801f480:	9903      	ldr	r1, [sp, #12]
 801f482:	5d92      	ldrb	r2, [r2, r6]
 801f484:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801f488:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f48c:	d041      	beq.n	801f512 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f48e:	9a05      	ldr	r2, [sp, #20]
 801f490:	fa5f fb86 	uxtb.w	fp, r6
 801f494:	fb02 fc0c 	mul.w	ip, r2, ip
 801f498:	f10c 0201 	add.w	r2, ip, #1
 801f49c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f4a0:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801f4a4:	1212      	asrs	r2, r2, #8
 801f4a6:	fa1f fa82 	uxth.w	sl, r2
 801f4aa:	43d2      	mvns	r2, r2
 801f4ac:	fb1b fb0a 	smulbb	fp, fp, sl
 801f4b0:	b2d2      	uxtb	r2, r2
 801f4b2:	fb0c bc02 	mla	ip, ip, r2, fp
 801f4b6:	fa1f fc8c 	uxth.w	ip, ip
 801f4ba:	f10c 0b01 	add.w	fp, ip, #1
 801f4be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f4c2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f4c6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f4ca:	fb1b fb0a 	smulbb	fp, fp, sl
 801f4ce:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f4d2:	fb16 fa0a 	smulbb	sl, r6, sl
 801f4d6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f4da:	f807 cc03 	strb.w	ip, [r7, #-3]
 801f4de:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801f4e2:	fb06 aa02 	mla	sl, r6, r2, sl
 801f4e6:	fb0c bc02 	mla	ip, ip, r2, fp
 801f4ea:	fa1f fa8a 	uxth.w	sl, sl
 801f4ee:	fa1f fc8c 	uxth.w	ip, ip
 801f4f2:	f10a 0601 	add.w	r6, sl, #1
 801f4f6:	f10c 0b01 	add.w	fp, ip, #1
 801f4fa:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f4fe:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f502:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f506:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f50a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f50e:	f807 cc02 	strb.w	ip, [r7, #-2]
 801f512:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f514:	3703      	adds	r7, #3
 801f516:	f109 39ff 	add.w	r9, r9, #4294967295
 801f51a:	4414      	add	r4, r2
 801f51c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f51e:	4410      	add	r0, r2
 801f520:	e7a6      	b.n	801f470 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f522:	1426      	asrs	r6, r4, #16
 801f524:	d450      	bmi.n	801f5c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f526:	4576      	cmp	r6, lr
 801f528:	da4e      	bge.n	801f5c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f52a:	1402      	asrs	r2, r0, #16
 801f52c:	d44c      	bmi.n	801f5c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f52e:	4542      	cmp	r2, r8
 801f530:	da4a      	bge.n	801f5c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f532:	9902      	ldr	r1, [sp, #8]
 801f534:	fb0e 1202 	mla	r2, lr, r2, r1
 801f538:	9903      	ldr	r1, [sp, #12]
 801f53a:	5d92      	ldrb	r2, [r2, r6]
 801f53c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801f540:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f544:	d040      	beq.n	801f5c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f546:	9a05      	ldr	r2, [sp, #20]
 801f548:	fa5f fb86 	uxtb.w	fp, r6
 801f54c:	fb02 fc0c 	mul.w	ip, r2, ip
 801f550:	f10c 0201 	add.w	r2, ip, #1
 801f554:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f558:	f897 c000 	ldrb.w	ip, [r7]
 801f55c:	1212      	asrs	r2, r2, #8
 801f55e:	fa1f fa82 	uxth.w	sl, r2
 801f562:	43d2      	mvns	r2, r2
 801f564:	fb1b fb0a 	smulbb	fp, fp, sl
 801f568:	b2d2      	uxtb	r2, r2
 801f56a:	fb0c bc02 	mla	ip, ip, r2, fp
 801f56e:	fa1f fc8c 	uxth.w	ip, ip
 801f572:	f10c 0b01 	add.w	fp, ip, #1
 801f576:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f57a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f57e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f582:	fb1b fb0a 	smulbb	fp, fp, sl
 801f586:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f58a:	fb16 fa0a 	smulbb	sl, r6, sl
 801f58e:	78be      	ldrb	r6, [r7, #2]
 801f590:	f887 c000 	strb.w	ip, [r7]
 801f594:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f598:	fb06 aa02 	mla	sl, r6, r2, sl
 801f59c:	fb0c bc02 	mla	ip, ip, r2, fp
 801f5a0:	fa1f fa8a 	uxth.w	sl, sl
 801f5a4:	fa1f fc8c 	uxth.w	ip, ip
 801f5a8:	f10a 0601 	add.w	r6, sl, #1
 801f5ac:	f10c 0b01 	add.w	fp, ip, #1
 801f5b0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f5b4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f5b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f5bc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f5c0:	f887 a002 	strb.w	sl, [r7, #2]
 801f5c4:	f887 c001 	strb.w	ip, [r7, #1]
 801f5c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f5ca:	3703      	adds	r7, #3
 801f5cc:	f109 39ff 	add.w	r9, r9, #4294967295
 801f5d0:	4414      	add	r4, r2
 801f5d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f5d4:	4410      	add	r0, r2
 801f5d6:	e6fb      	b.n	801f3d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f5d8:	b007      	add	sp, #28
 801f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f5de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5e2:	b085      	sub	sp, #20
 801f5e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f5e8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f5ea:	9203      	str	r2, [sp, #12]
 801f5ec:	6870      	ldr	r0, [r6, #4]
 801f5ee:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f5f0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f5f4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801f5f8:	9100      	str	r1, [sp, #0]
 801f5fa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f5fe:	fb00 2404 	mla	r4, r0, r4, r2
 801f602:	6832      	ldr	r2, [r6, #0]
 801f604:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f608:	4414      	add	r4, r2
 801f60a:	682a      	ldr	r2, [r5, #0]
 801f60c:	9201      	str	r2, [sp, #4]
 801f60e:	686a      	ldr	r2, [r5, #4]
 801f610:	3204      	adds	r2, #4
 801f612:	9202      	str	r2, [sp, #8]
 801f614:	9a00      	ldr	r2, [sp, #0]
 801f616:	2a00      	cmp	r2, #0
 801f618:	dc03      	bgt.n	801f622 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801f61a:	9a03      	ldr	r2, [sp, #12]
 801f61c:	2a00      	cmp	r2, #0
 801f61e:	f340 8131 	ble.w	801f884 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f624:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f628:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f62a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f62e:	2b00      	cmp	r3, #0
 801f630:	dd0e      	ble.n	801f650 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f632:	1405      	asrs	r5, r0, #16
 801f634:	d405      	bmi.n	801f642 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f636:	4575      	cmp	r5, lr
 801f638:	da03      	bge.n	801f642 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f63a:	1415      	asrs	r5, r2, #16
 801f63c:	d401      	bmi.n	801f642 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f63e:	4545      	cmp	r5, r8
 801f640:	db07      	blt.n	801f652 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f642:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f644:	3b01      	subs	r3, #1
 801f646:	3403      	adds	r4, #3
 801f648:	4428      	add	r0, r5
 801f64a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f64c:	442a      	add	r2, r5
 801f64e:	e7ee      	b.n	801f62e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801f650:	d06f      	beq.n	801f732 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801f652:	1e5d      	subs	r5, r3, #1
 801f654:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f656:	fb06 0605 	mla	r6, r6, r5, r0
 801f65a:	1436      	asrs	r6, r6, #16
 801f65c:	d460      	bmi.n	801f720 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f65e:	4576      	cmp	r6, lr
 801f660:	da5e      	bge.n	801f720 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f662:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f664:	fb06 2505 	mla	r5, r6, r5, r2
 801f668:	142d      	asrs	r5, r5, #16
 801f66a:	d459      	bmi.n	801f720 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f66c:	4545      	cmp	r5, r8
 801f66e:	da57      	bge.n	801f720 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f670:	1ce5      	adds	r5, r4, #3
 801f672:	469a      	mov	sl, r3
 801f674:	f1ba 0f00 	cmp.w	sl, #0
 801f678:	dd56      	ble.n	801f728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801f67a:	9901      	ldr	r1, [sp, #4]
 801f67c:	1416      	asrs	r6, r2, #16
 801f67e:	1407      	asrs	r7, r0, #16
 801f680:	fb0e 1606 	mla	r6, lr, r6, r1
 801f684:	9902      	ldr	r1, [sp, #8]
 801f686:	5df6      	ldrb	r6, [r6, r7]
 801f688:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801f68c:	0e37      	lsrs	r7, r6, #24
 801f68e:	2fff      	cmp	r7, #255	; 0xff
 801f690:	f000 80ef 	beq.w	801f872 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801f694:	fa5f fc87 	uxtb.w	ip, r7
 801f698:	b3d7      	cbz	r7, 801f710 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f69a:	fa1f f78c 	uxth.w	r7, ip
 801f69e:	ea6f 0c0c 	mvn.w	ip, ip
 801f6a2:	fa5f fb86 	uxtb.w	fp, r6
 801f6a6:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801f6aa:	fa5f fc8c 	uxtb.w	ip, ip
 801f6ae:	fb1b fb07 	smulbb	fp, fp, r7
 801f6b2:	fb09 b90c 	mla	r9, r9, ip, fp
 801f6b6:	fa1f f989 	uxth.w	r9, r9
 801f6ba:	f109 0b01 	add.w	fp, r9, #1
 801f6be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f6c2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f6c6:	fb1b fb0c 	smulbb	fp, fp, ip
 801f6ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f6ce:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f6d2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801f6d6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f6da:	fb09 b907 	mla	r9, r9, r7, fp
 801f6de:	fa1f f989 	uxth.w	r9, r9
 801f6e2:	f109 0b01 	add.w	fp, r9, #1
 801f6e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f6ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f6ee:	f805 9c02 	strb.w	r9, [r5, #-2]
 801f6f2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801f6f6:	fb19 fc0c 	smulbb	ip, r9, ip
 801f6fa:	fb06 c607 	mla	r6, r6, r7, ip
 801f6fe:	b2b6      	uxth	r6, r6
 801f700:	f106 0c01 	add.w	ip, r6, #1
 801f704:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801f708:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f70c:	f805 cc01 	strb.w	ip, [r5, #-1]
 801f710:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f712:	3503      	adds	r5, #3
 801f714:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f718:	4408      	add	r0, r1
 801f71a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f71c:	440a      	add	r2, r1
 801f71e:	e7a9      	b.n	801f674 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801f720:	2600      	movs	r6, #0
 801f722:	1b9d      	subs	r5, r3, r6
 801f724:	2d00      	cmp	r5, #0
 801f726:	dc40      	bgt.n	801f7aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f728:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f72c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f730:	441c      	add	r4, r3
 801f732:	9b00      	ldr	r3, [sp, #0]
 801f734:	2b00      	cmp	r3, #0
 801f736:	f340 80a5 	ble.w	801f884 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f73a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f740:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f744:	eeb0 6a62 	vmov.f32	s12, s5
 801f748:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f74c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f750:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f754:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f758:	eeb0 6a43 	vmov.f32	s12, s6
 801f75c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f760:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f764:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f768:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f76c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f770:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f774:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f778:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f77c:	ee12 2a90 	vmov	r2, s5
 801f780:	eef0 2a47 	vmov.f32	s5, s14
 801f784:	fb92 f3f3 	sdiv	r3, r2, r3
 801f788:	ee13 2a10 	vmov	r2, s6
 801f78c:	9311      	str	r3, [sp, #68]	; 0x44
 801f78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f790:	eeb0 3a67 	vmov.f32	s6, s15
 801f794:	fb92 f3f3 	sdiv	r3, r2, r3
 801f798:	9312      	str	r3, [sp, #72]	; 0x48
 801f79a:	9b00      	ldr	r3, [sp, #0]
 801f79c:	9a03      	ldr	r2, [sp, #12]
 801f79e:	3b01      	subs	r3, #1
 801f7a0:	9300      	str	r3, [sp, #0]
 801f7a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7a4:	bf08      	it	eq
 801f7a6:	4613      	moveq	r3, r2
 801f7a8:	e734      	b.n	801f614 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f7aa:	1407      	asrs	r7, r0, #16
 801f7ac:	d450      	bmi.n	801f850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f7ae:	4577      	cmp	r7, lr
 801f7b0:	da4e      	bge.n	801f850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f7b2:	1415      	asrs	r5, r2, #16
 801f7b4:	d44c      	bmi.n	801f850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f7b6:	4545      	cmp	r5, r8
 801f7b8:	da4a      	bge.n	801f850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f7ba:	9901      	ldr	r1, [sp, #4]
 801f7bc:	fb0e 1505 	mla	r5, lr, r5, r1
 801f7c0:	9902      	ldr	r1, [sp, #8]
 801f7c2:	5ded      	ldrb	r5, [r5, r7]
 801f7c4:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801f7c8:	0e2f      	lsrs	r7, r5, #24
 801f7ca:	2fff      	cmp	r7, #255	; 0xff
 801f7cc:	d046      	beq.n	801f85c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801f7ce:	fa5f f987 	uxtb.w	r9, r7
 801f7d2:	b3ef      	cbz	r7, 801f850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f7d4:	fa1f fc89 	uxth.w	ip, r9
 801f7d8:	ea6f 0909 	mvn.w	r9, r9
 801f7dc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f7e0:	fa5f fb85 	uxtb.w	fp, r5
 801f7e4:	f814 a007 	ldrb.w	sl, [r4, r7]
 801f7e8:	fa5f f989 	uxtb.w	r9, r9
 801f7ec:	fb1b fb0c 	smulbb	fp, fp, ip
 801f7f0:	fb0a ba09 	mla	sl, sl, r9, fp
 801f7f4:	fa1f fa8a 	uxth.w	sl, sl
 801f7f8:	f10a 0b01 	add.w	fp, sl, #1
 801f7fc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f800:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f804:	f804 a007 	strb.w	sl, [r4, r7]
 801f808:	4427      	add	r7, r4
 801f80a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f80e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801f812:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f816:	fb1b fb09 	smulbb	fp, fp, r9
 801f81a:	fb0a ba0c 	mla	sl, sl, ip, fp
 801f81e:	fa1f fa8a 	uxth.w	sl, sl
 801f822:	f10a 0b01 	add.w	fp, sl, #1
 801f826:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f82a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f82e:	f887 a001 	strb.w	sl, [r7, #1]
 801f832:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f836:	fb1a f909 	smulbb	r9, sl, r9
 801f83a:	fb05 950c 	mla	r5, r5, ip, r9
 801f83e:	b2ad      	uxth	r5, r5
 801f840:	f105 0901 	add.w	r9, r5, #1
 801f844:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801f848:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f84c:	f887 9002 	strb.w	r9, [r7, #2]
 801f850:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f852:	3601      	adds	r6, #1
 801f854:	4408      	add	r0, r1
 801f856:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f858:	440a      	add	r2, r1
 801f85a:	e762      	b.n	801f722 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801f85c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f860:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801f864:	55e5      	strb	r5, [r4, r7]
 801f866:	4427      	add	r7, r4
 801f868:	0c2d      	lsrs	r5, r5, #16
 801f86a:	f887 c001 	strb.w	ip, [r7, #1]
 801f86e:	70bd      	strb	r5, [r7, #2]
 801f870:	e7ee      	b.n	801f850 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f872:	0a37      	lsrs	r7, r6, #8
 801f874:	f805 6c03 	strb.w	r6, [r5, #-3]
 801f878:	0c36      	lsrs	r6, r6, #16
 801f87a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f87e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f882:	e745      	b.n	801f710 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f884:	b005      	add	sp, #20
 801f886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f88a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f88a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f88e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f890:	9201      	str	r2, [sp, #4]
 801f892:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801f896:	6870      	ldr	r0, [r6, #4]
 801f898:	9200      	str	r2, [sp, #0]
 801f89a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801f89e:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801f8a2:	fa1f fc85 	uxth.w	ip, r5
 801f8a6:	43ed      	mvns	r5, r5
 801f8a8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f8ac:	b2ed      	uxtb	r5, r5
 801f8ae:	fb00 2404 	mla	r4, r0, r4, r2
 801f8b2:	6832      	ldr	r2, [r6, #0]
 801f8b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f8b8:	4414      	add	r4, r2
 801f8ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f8bc:	f8d2 8000 	ldr.w	r8, [r2]
 801f8c0:	2900      	cmp	r1, #0
 801f8c2:	dc03      	bgt.n	801f8cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801f8c4:	9a01      	ldr	r2, [sp, #4]
 801f8c6:	2a00      	cmp	r2, #0
 801f8c8:	f340 8104 	ble.w	801fad4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f8cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f8ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f8d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f8d4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f8d8:	2b00      	cmp	r3, #0
 801f8da:	dd0f      	ble.n	801f8fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f8dc:	1406      	asrs	r6, r0, #16
 801f8de:	d406      	bmi.n	801f8ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f8e0:	4576      	cmp	r6, lr
 801f8e2:	da04      	bge.n	801f8ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f8e4:	1416      	asrs	r6, r2, #16
 801f8e6:	d402      	bmi.n	801f8ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f8e8:	9f00      	ldr	r7, [sp, #0]
 801f8ea:	42be      	cmp	r6, r7
 801f8ec:	db07      	blt.n	801f8fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f8ee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f8f0:	3b01      	subs	r3, #1
 801f8f2:	3403      	adds	r4, #3
 801f8f4:	4430      	add	r0, r6
 801f8f6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f8f8:	4432      	add	r2, r6
 801f8fa:	e7ed      	b.n	801f8d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801f8fc:	d05f      	beq.n	801f9be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801f8fe:	1e5e      	subs	r6, r3, #1
 801f900:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f902:	fb07 0706 	mla	r7, r7, r6, r0
 801f906:	143f      	asrs	r7, r7, #16
 801f908:	d450      	bmi.n	801f9ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f90a:	4577      	cmp	r7, lr
 801f90c:	da4e      	bge.n	801f9ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f90e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f910:	fb07 2606 	mla	r6, r7, r6, r2
 801f914:	1436      	asrs	r6, r6, #16
 801f916:	d449      	bmi.n	801f9ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f918:	9f00      	ldr	r7, [sp, #0]
 801f91a:	42be      	cmp	r6, r7
 801f91c:	da46      	bge.n	801f9ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f91e:	1ce6      	adds	r6, r4, #3
 801f920:	4699      	mov	r9, r3
 801f922:	f1b9 0f00 	cmp.w	r9, #0
 801f926:	f106 0603 	add.w	r6, r6, #3
 801f92a:	dd43      	ble.n	801f9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f92c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f930:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f934:	1417      	asrs	r7, r2, #16
 801f936:	f109 39ff 	add.w	r9, r9, #4294967295
 801f93a:	fb1b fb05 	smulbb	fp, fp, r5
 801f93e:	fb0e a707 	mla	r7, lr, r7, sl
 801f942:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f946:	eb08 0a07 	add.w	sl, r8, r7
 801f94a:	f818 7007 	ldrb.w	r7, [r8, r7]
 801f94e:	fb07 b70c 	mla	r7, r7, ip, fp
 801f952:	b2bf      	uxth	r7, r7
 801f954:	f107 0b01 	add.w	fp, r7, #1
 801f958:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f95c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f960:	fb1b fb05 	smulbb	fp, fp, r5
 801f964:	123f      	asrs	r7, r7, #8
 801f966:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f96a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f96e:	fb07 b70c 	mla	r7, r7, ip, fp
 801f972:	b2bf      	uxth	r7, r7
 801f974:	f107 0b01 	add.w	fp, r7, #1
 801f978:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f97c:	123f      	asrs	r7, r7, #8
 801f97e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f982:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f986:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f98a:	fb1a fa05 	smulbb	sl, sl, r5
 801f98e:	fb07 a70c 	mla	r7, r7, ip, sl
 801f992:	b2bf      	uxth	r7, r7
 801f994:	f107 0a01 	add.w	sl, r7, #1
 801f998:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f99c:	123f      	asrs	r7, r7, #8
 801f99e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f9a2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f9a4:	4438      	add	r0, r7
 801f9a6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f9a8:	443a      	add	r2, r7
 801f9aa:	e7ba      	b.n	801f922 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f9ac:	2700      	movs	r7, #0
 801f9ae:	1bde      	subs	r6, r3, r7
 801f9b0:	2e00      	cmp	r6, #0
 801f9b2:	dc3f      	bgt.n	801fa34 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f9b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f9bc:	441c      	add	r4, r3
 801f9be:	2900      	cmp	r1, #0
 801f9c0:	f340 8088 	ble.w	801fad4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f9c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f9ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9ce:	3901      	subs	r1, #1
 801f9d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9d4:	eef0 6a62 	vmov.f32	s13, s5
 801f9d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f9dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9e4:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801f9e8:	eef0 6a43 	vmov.f32	s13, s6
 801f9ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f9f0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801f9f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa0c:	ee12 2a90 	vmov	r2, s5
 801fa10:	eef0 2a47 	vmov.f32	s5, s14
 801fa14:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa18:	ee13 2a10 	vmov	r2, s6
 801fa1c:	930f      	str	r3, [sp, #60]	; 0x3c
 801fa1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa20:	eeb0 3a67 	vmov.f32	s6, s15
 801fa24:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa28:	9a01      	ldr	r2, [sp, #4]
 801fa2a:	9310      	str	r3, [sp, #64]	; 0x40
 801fa2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa2e:	bf08      	it	eq
 801fa30:	4613      	moveq	r3, r2
 801fa32:	e745      	b.n	801f8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801fa34:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801fa38:	d446      	bmi.n	801fac8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801fa3a:	45f2      	cmp	sl, lr
 801fa3c:	da44      	bge.n	801fac8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801fa3e:	ea5f 4922 	movs.w	r9, r2, asr #16
 801fa42:	d441      	bmi.n	801fac8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801fa44:	9e00      	ldr	r6, [sp, #0]
 801fa46:	45b1      	cmp	r9, r6
 801fa48:	da3e      	bge.n	801fac8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801fa4a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fa4e:	fb0e a909 	mla	r9, lr, r9, sl
 801fa52:	f814 b006 	ldrb.w	fp, [r4, r6]
 801fa56:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fa5a:	fb1b fb05 	smulbb	fp, fp, r5
 801fa5e:	eb08 0a09 	add.w	sl, r8, r9
 801fa62:	f818 9009 	ldrb.w	r9, [r8, r9]
 801fa66:	fb09 b90c 	mla	r9, r9, ip, fp
 801fa6a:	fa1f f989 	uxth.w	r9, r9
 801fa6e:	f109 0b01 	add.w	fp, r9, #1
 801fa72:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa76:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa7a:	f804 9006 	strb.w	r9, [r4, r6]
 801fa7e:	4426      	add	r6, r4
 801fa80:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fa84:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fa88:	fb1b fb05 	smulbb	fp, fp, r5
 801fa8c:	fb09 b90c 	mla	r9, r9, ip, fp
 801fa90:	fa1f f989 	uxth.w	r9, r9
 801fa94:	f109 0b01 	add.w	fp, r9, #1
 801fa98:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa9c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801faa0:	f886 9001 	strb.w	r9, [r6, #1]
 801faa4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801faa8:	f896 a002 	ldrb.w	sl, [r6, #2]
 801faac:	fb1a fa05 	smulbb	sl, sl, r5
 801fab0:	fb09 a90c 	mla	r9, r9, ip, sl
 801fab4:	fa1f f989 	uxth.w	r9, r9
 801fab8:	f109 0a01 	add.w	sl, r9, #1
 801fabc:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fac0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fac4:	f886 9002 	strb.w	r9, [r6, #2]
 801fac8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801faca:	3701      	adds	r7, #1
 801facc:	4430      	add	r0, r6
 801face:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fad0:	4432      	add	r2, r6
 801fad2:	e76c      	b.n	801f9ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801fad4:	b003      	add	sp, #12
 801fad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fada <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fada:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fade:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fae4:	9201      	str	r2, [sp, #4]
 801fae6:	6868      	ldr	r0, [r5, #4]
 801fae8:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801faec:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801faf0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801faf4:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801faf8:	fb00 2404 	mla	r4, r0, r4, r2
 801fafc:	682a      	ldr	r2, [r5, #0]
 801fafe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fb02:	4414      	add	r4, r2
 801fb04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fb06:	f8d2 9000 	ldr.w	r9, [r2]
 801fb0a:	2900      	cmp	r1, #0
 801fb0c:	dc03      	bgt.n	801fb16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801fb0e:	9a01      	ldr	r2, [sp, #4]
 801fb10:	2a00      	cmp	r2, #0
 801fb12:	f340 80a8 	ble.w	801fc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801fb16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fb18:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fb1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fb1e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	dd0c      	ble.n	801fb40 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801fb26:	1405      	asrs	r5, r0, #16
 801fb28:	d405      	bmi.n	801fb36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801fb2a:	4565      	cmp	r5, ip
 801fb2c:	da03      	bge.n	801fb36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801fb2e:	1415      	asrs	r5, r2, #16
 801fb30:	d401      	bmi.n	801fb36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801fb32:	4575      	cmp	r5, lr
 801fb34:	db05      	blt.n	801fb42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801fb36:	4438      	add	r0, r7
 801fb38:	4432      	add	r2, r6
 801fb3a:	3b01      	subs	r3, #1
 801fb3c:	3403      	adds	r4, #3
 801fb3e:	e7f0      	b.n	801fb22 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801fb40:	d03a      	beq.n	801fbb8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801fb42:	1e5d      	subs	r5, r3, #1
 801fb44:	fb07 0805 	mla	r8, r7, r5, r0
 801fb48:	ea5f 4828 	movs.w	r8, r8, asr #16
 801fb4c:	d429      	bmi.n	801fba2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fb4e:	45e0      	cmp	r8, ip
 801fb50:	da27      	bge.n	801fba2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fb52:	fb06 2505 	mla	r5, r6, r5, r2
 801fb56:	142d      	asrs	r5, r5, #16
 801fb58:	d423      	bmi.n	801fba2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fb5a:	4575      	cmp	r5, lr
 801fb5c:	da21      	bge.n	801fba2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fb5e:	f104 0803 	add.w	r8, r4, #3
 801fb62:	469a      	mov	sl, r3
 801fb64:	f1ba 0f00 	cmp.w	sl, #0
 801fb68:	f108 0803 	add.w	r8, r8, #3
 801fb6c:	dd1f      	ble.n	801fbae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801fb6e:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801fb72:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fb76:	1415      	asrs	r5, r2, #16
 801fb78:	4438      	add	r0, r7
 801fb7a:	4432      	add	r2, r6
 801fb7c:	fb0c b505 	mla	r5, ip, r5, fp
 801fb80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb84:	eb09 0b05 	add.w	fp, r9, r5
 801fb88:	f819 5005 	ldrb.w	r5, [r9, r5]
 801fb8c:	f808 5c06 	strb.w	r5, [r8, #-6]
 801fb90:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801fb94:	f808 5c05 	strb.w	r5, [r8, #-5]
 801fb98:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801fb9c:	f808 5c04 	strb.w	r5, [r8, #-4]
 801fba0:	e7e0      	b.n	801fb64 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801fba2:	2500      	movs	r5, #0
 801fba4:	eba3 0805 	sub.w	r8, r3, r5
 801fba8:	f1b8 0f00 	cmp.w	r8, #0
 801fbac:	dc38      	bgt.n	801fc20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801fbae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fbb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fbb6:	441c      	add	r4, r3
 801fbb8:	2900      	cmp	r1, #0
 801fbba:	dd54      	ble.n	801fc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801fbbc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fbc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fbc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fbc6:	3901      	subs	r1, #1
 801fbc8:	eeb0 6a62 	vmov.f32	s12, s5
 801fbcc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fbd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fbd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbd8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801fbdc:	eeb0 6a43 	vmov.f32	s12, s6
 801fbe0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbe4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801fbe8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fbf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fbf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fbf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fbfc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc00:	ee12 2a90 	vmov	r2, s5
 801fc04:	eef0 2a47 	vmov.f32	s5, s14
 801fc08:	fb92 f7f3 	sdiv	r7, r2, r3
 801fc0c:	ee13 2a10 	vmov	r2, s6
 801fc10:	eeb0 3a67 	vmov.f32	s6, s15
 801fc14:	fb92 f6f3 	sdiv	r6, r2, r3
 801fc18:	9a01      	ldr	r2, [sp, #4]
 801fc1a:	bf08      	it	eq
 801fc1c:	4613      	moveq	r3, r2
 801fc1e:	e774      	b.n	801fb0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801fc20:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801fc24:	d41b      	bmi.n	801fc5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801fc26:	45e2      	cmp	sl, ip
 801fc28:	da19      	bge.n	801fc5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801fc2a:	ea5f 4822 	movs.w	r8, r2, asr #16
 801fc2e:	d416      	bmi.n	801fc5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801fc30:	45f0      	cmp	r8, lr
 801fc32:	da14      	bge.n	801fc5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801fc34:	fb0c a808 	mla	r8, ip, r8, sl
 801fc38:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fc3c:	f819 b008 	ldrb.w	fp, [r9, r8]
 801fc40:	eb09 0a08 	add.w	sl, r9, r8
 801fc44:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801fc48:	f804 b008 	strb.w	fp, [r4, r8]
 801fc4c:	44a0      	add	r8, r4
 801fc4e:	f89a b001 	ldrb.w	fp, [sl, #1]
 801fc52:	f888 b001 	strb.w	fp, [r8, #1]
 801fc56:	f89a a002 	ldrb.w	sl, [sl, #2]
 801fc5a:	f888 a002 	strb.w	sl, [r8, #2]
 801fc5e:	4438      	add	r0, r7
 801fc60:	4432      	add	r2, r6
 801fc62:	3501      	adds	r5, #1
 801fc64:	e79e      	b.n	801fba4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801fc66:	b003      	add	sp, #12
 801fc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc70:	b085      	sub	sp, #20
 801fc72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fc76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc78:	9202      	str	r2, [sp, #8]
 801fc7a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fc7e:	6860      	ldr	r0, [r4, #4]
 801fc80:	9203      	str	r2, [sp, #12]
 801fc82:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801fc86:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801fc8a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801fc8e:	fb00 2505 	mla	r5, r0, r5, r2
 801fc92:	6822      	ldr	r2, [r4, #0]
 801fc94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc98:	4415      	add	r5, r2
 801fc9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fc9c:	6812      	ldr	r2, [r2, #0]
 801fc9e:	9201      	str	r2, [sp, #4]
 801fca0:	2900      	cmp	r1, #0
 801fca2:	dc03      	bgt.n	801fcac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801fca4:	9a02      	ldr	r2, [sp, #8]
 801fca6:	2a00      	cmp	r2, #0
 801fca8:	f340 811c 	ble.w	801fee4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fcac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fcae:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fcb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fcb4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	dd0e      	ble.n	801fcda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fcbc:	1422      	asrs	r2, r4, #16
 801fcbe:	d405      	bmi.n	801fccc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fcc0:	4572      	cmp	r2, lr
 801fcc2:	da03      	bge.n	801fccc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fcc4:	1402      	asrs	r2, r0, #16
 801fcc6:	d401      	bmi.n	801fccc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fcc8:	4542      	cmp	r2, r8
 801fcca:	db07      	blt.n	801fcdc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fccc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fcce:	3b01      	subs	r3, #1
 801fcd0:	3503      	adds	r5, #3
 801fcd2:	4414      	add	r4, r2
 801fcd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fcd6:	4410      	add	r0, r2
 801fcd8:	e7ee      	b.n	801fcb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801fcda:	d072      	beq.n	801fdc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801fcdc:	1e5a      	subs	r2, r3, #1
 801fcde:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fce0:	fb06 4602 	mla	r6, r6, r2, r4
 801fce4:	1436      	asrs	r6, r6, #16
 801fce6:	d461      	bmi.n	801fdac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fce8:	4576      	cmp	r6, lr
 801fcea:	da5f      	bge.n	801fdac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fcec:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fcee:	fb06 0202 	mla	r2, r6, r2, r0
 801fcf2:	1412      	asrs	r2, r2, #16
 801fcf4:	d45a      	bmi.n	801fdac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fcf6:	4542      	cmp	r2, r8
 801fcf8:	da58      	bge.n	801fdac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fcfa:	1cef      	adds	r7, r5, #3
 801fcfc:	4699      	mov	r9, r3
 801fcfe:	f1b9 0f00 	cmp.w	r9, #0
 801fd02:	dd59      	ble.n	801fdb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801fd04:	1426      	asrs	r6, r4, #16
 801fd06:	1402      	asrs	r2, r0, #16
 801fd08:	fb0e 6202 	mla	r2, lr, r2, r6
 801fd0c:	9e01      	ldr	r6, [sp, #4]
 801fd0e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801fd12:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801fd16:	d041      	beq.n	801fd9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801fd18:	9a03      	ldr	r2, [sp, #12]
 801fd1a:	fa5f fb86 	uxtb.w	fp, r6
 801fd1e:	fb02 fc0c 	mul.w	ip, r2, ip
 801fd22:	f10c 0201 	add.w	r2, ip, #1
 801fd26:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801fd2a:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801fd2e:	1212      	asrs	r2, r2, #8
 801fd30:	fa1f fa82 	uxth.w	sl, r2
 801fd34:	43d2      	mvns	r2, r2
 801fd36:	fb1b fb0a 	smulbb	fp, fp, sl
 801fd3a:	b2d2      	uxtb	r2, r2
 801fd3c:	fb0c bc02 	mla	ip, ip, r2, fp
 801fd40:	fa1f fc8c 	uxth.w	ip, ip
 801fd44:	f10c 0b01 	add.w	fp, ip, #1
 801fd48:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fd4c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801fd50:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801fd54:	fb1b fb0a 	smulbb	fp, fp, sl
 801fd58:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fd5c:	fb16 fa0a 	smulbb	sl, r6, sl
 801fd60:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801fd64:	f807 cc03 	strb.w	ip, [r7, #-3]
 801fd68:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801fd6c:	fb06 aa02 	mla	sl, r6, r2, sl
 801fd70:	fb0c bc02 	mla	ip, ip, r2, fp
 801fd74:	fa1f fa8a 	uxth.w	sl, sl
 801fd78:	fa1f fc8c 	uxth.w	ip, ip
 801fd7c:	f10a 0601 	add.w	r6, sl, #1
 801fd80:	f10c 0b01 	add.w	fp, ip, #1
 801fd84:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801fd88:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fd8c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fd90:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fd94:	f807 ac01 	strb.w	sl, [r7, #-1]
 801fd98:	f807 cc02 	strb.w	ip, [r7, #-2]
 801fd9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd9e:	3703      	adds	r7, #3
 801fda0:	f109 39ff 	add.w	r9, r9, #4294967295
 801fda4:	4414      	add	r4, r2
 801fda6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fda8:	4410      	add	r0, r2
 801fdaa:	e7a8      	b.n	801fcfe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801fdac:	f04f 0c00 	mov.w	ip, #0
 801fdb0:	eba3 020c 	sub.w	r2, r3, ip
 801fdb4:	2a00      	cmp	r2, #0
 801fdb6:	dc3d      	bgt.n	801fe34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801fdb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fdbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fdc0:	441d      	add	r5, r3
 801fdc2:	2900      	cmp	r1, #0
 801fdc4:	f340 808e 	ble.w	801fee4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fdc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fdcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdd2:	3901      	subs	r1, #1
 801fdd4:	eeb0 6a62 	vmov.f32	s12, s5
 801fdd8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fddc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fde0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fde4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fde8:	eeb0 6a43 	vmov.f32	s12, s6
 801fdec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fdf0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fdf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe0c:	ee12 2a90 	vmov	r2, s5
 801fe10:	eef0 2a47 	vmov.f32	s5, s14
 801fe14:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe18:	ee13 2a10 	vmov	r2, s6
 801fe1c:	9311      	str	r3, [sp, #68]	; 0x44
 801fe1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe20:	eeb0 3a67 	vmov.f32	s6, s15
 801fe24:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe28:	9a02      	ldr	r2, [sp, #8]
 801fe2a:	9312      	str	r3, [sp, #72]	; 0x48
 801fe2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe2e:	bf08      	it	eq
 801fe30:	4613      	moveq	r3, r2
 801fe32:	e735      	b.n	801fca0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801fe34:	1426      	asrs	r6, r4, #16
 801fe36:	d44e      	bmi.n	801fed6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fe38:	4576      	cmp	r6, lr
 801fe3a:	da4c      	bge.n	801fed6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fe3c:	1402      	asrs	r2, r0, #16
 801fe3e:	d44a      	bmi.n	801fed6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fe40:	4542      	cmp	r2, r8
 801fe42:	da48      	bge.n	801fed6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fe44:	fb0e 6202 	mla	r2, lr, r2, r6
 801fe48:	9e01      	ldr	r6, [sp, #4]
 801fe4a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801fe4e:	0e3a      	lsrs	r2, r7, #24
 801fe50:	d041      	beq.n	801fed6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fe52:	9e03      	ldr	r6, [sp, #12]
 801fe54:	fa5f fb87 	uxtb.w	fp, r7
 801fe58:	4372      	muls	r2, r6
 801fe5a:	1c56      	adds	r6, r2, #1
 801fe5c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fe60:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801fe64:	1212      	asrs	r2, r2, #8
 801fe66:	f815 9006 	ldrb.w	r9, [r5, r6]
 801fe6a:	fa1f fa82 	uxth.w	sl, r2
 801fe6e:	43d2      	mvns	r2, r2
 801fe70:	fb1b fb0a 	smulbb	fp, fp, sl
 801fe74:	b2d2      	uxtb	r2, r2
 801fe76:	fb09 b902 	mla	r9, r9, r2, fp
 801fe7a:	fa1f f989 	uxth.w	r9, r9
 801fe7e:	f109 0b01 	add.w	fp, r9, #1
 801fe82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fe86:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fe8a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801fe8e:	fb1b fb0a 	smulbb	fp, fp, sl
 801fe92:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe96:	fb17 fa0a 	smulbb	sl, r7, sl
 801fe9a:	f805 9006 	strb.w	r9, [r5, r6]
 801fe9e:	442e      	add	r6, r5
 801fea0:	78b7      	ldrb	r7, [r6, #2]
 801fea2:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fea6:	fb07 aa02 	mla	sl, r7, r2, sl
 801feaa:	fb09 b902 	mla	r9, r9, r2, fp
 801feae:	fa1f fa8a 	uxth.w	sl, sl
 801feb2:	fa1f f989 	uxth.w	r9, r9
 801feb6:	f10a 0701 	add.w	r7, sl, #1
 801feba:	f109 0b01 	add.w	fp, r9, #1
 801febe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fec2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fec6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801feca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fece:	f886 a002 	strb.w	sl, [r6, #2]
 801fed2:	f886 9001 	strb.w	r9, [r6, #1]
 801fed6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fed8:	f10c 0c01 	add.w	ip, ip, #1
 801fedc:	4414      	add	r4, r2
 801fede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fee0:	4410      	add	r0, r2
 801fee2:	e765      	b.n	801fdb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801fee4:	b005      	add	sp, #20
 801fee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801feea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801feea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801feee:	b085      	sub	sp, #20
 801fef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fef4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fef6:	9203      	str	r2, [sp, #12]
 801fef8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801fefc:	6860      	ldr	r0, [r4, #4]
 801fefe:	9201      	str	r2, [sp, #4]
 801ff00:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ff04:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ff08:	fb00 2505 	mla	r5, r0, r5, r2
 801ff0c:	6822      	ldr	r2, [r4, #0]
 801ff0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ff12:	4415      	add	r5, r2
 801ff14:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ff16:	6812      	ldr	r2, [r2, #0]
 801ff18:	9202      	str	r2, [sp, #8]
 801ff1a:	2900      	cmp	r1, #0
 801ff1c:	dc03      	bgt.n	801ff26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ff1e:	9a03      	ldr	r2, [sp, #12]
 801ff20:	2a00      	cmp	r2, #0
 801ff22:	f340 8122 	ble.w	802016a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ff26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ff28:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ff2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ff2e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	dd0f      	ble.n	801ff56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ff36:	1422      	asrs	r2, r4, #16
 801ff38:	d406      	bmi.n	801ff48 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ff3a:	4572      	cmp	r2, lr
 801ff3c:	da04      	bge.n	801ff48 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ff3e:	1402      	asrs	r2, r0, #16
 801ff40:	d402      	bmi.n	801ff48 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ff42:	9e01      	ldr	r6, [sp, #4]
 801ff44:	42b2      	cmp	r2, r6
 801ff46:	db07      	blt.n	801ff58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ff48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ff4a:	3b01      	subs	r3, #1
 801ff4c:	3503      	adds	r5, #3
 801ff4e:	4414      	add	r4, r2
 801ff50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff52:	4410      	add	r0, r2
 801ff54:	e7ed      	b.n	801ff32 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801ff56:	d06e      	beq.n	8020036 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801ff58:	1e5a      	subs	r2, r3, #1
 801ff5a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ff5c:	fb06 4602 	mla	r6, r6, r2, r4
 801ff60:	1436      	asrs	r6, r6, #16
 801ff62:	d45d      	bmi.n	8020020 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ff64:	4576      	cmp	r6, lr
 801ff66:	da5b      	bge.n	8020020 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ff68:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ff6a:	fb06 0202 	mla	r2, r6, r2, r0
 801ff6e:	1412      	asrs	r2, r2, #16
 801ff70:	d456      	bmi.n	8020020 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ff72:	9e01      	ldr	r6, [sp, #4]
 801ff74:	42b2      	cmp	r2, r6
 801ff76:	da53      	bge.n	8020020 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ff78:	1cee      	adds	r6, r5, #3
 801ff7a:	469a      	mov	sl, r3
 801ff7c:	f1ba 0f00 	cmp.w	sl, #0
 801ff80:	dd54      	ble.n	802002c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ff82:	1427      	asrs	r7, r4, #16
 801ff84:	1402      	asrs	r2, r0, #16
 801ff86:	fb0e 7202 	mla	r2, lr, r2, r7
 801ff8a:	9f02      	ldr	r7, [sp, #8]
 801ff8c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ff90:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801ff94:	d03c      	beq.n	8020010 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ff96:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ff9a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ff9e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ffa2:	fa5f f28c 	uxtb.w	r2, ip
 801ffa6:	b2ff      	uxtb	r7, r7
 801ffa8:	f000 80d8 	beq.w	802015c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ffac:	fa1f f882 	uxth.w	r8, r2
 801ffb0:	43d2      	mvns	r2, r2
 801ffb2:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801ffb6:	fb17 f708 	smulbb	r7, r7, r8
 801ffba:	b2d2      	uxtb	r2, r2
 801ffbc:	fb19 f908 	smulbb	r9, r9, r8
 801ffc0:	fb0c 7702 	mla	r7, ip, r2, r7
 801ffc4:	fb1b f808 	smulbb	r8, fp, r8
 801ffc8:	b2bf      	uxth	r7, r7
 801ffca:	f107 0c01 	add.w	ip, r7, #1
 801ffce:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ffd2:	123f      	asrs	r7, r7, #8
 801ffd4:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ffd8:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ffdc:	fb07 9902 	mla	r9, r7, r2, r9
 801ffe0:	fa1f f989 	uxth.w	r9, r9
 801ffe4:	f109 0701 	add.w	r7, r9, #1
 801ffe8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ffec:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801fff0:	fb07 8802 	mla	r8, r7, r2, r8
 801fff4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fff8:	fa1f f888 	uxth.w	r8, r8
 801fffc:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020000:	f108 0201 	add.w	r2, r8, #1
 8020004:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020008:	ea4f 2828 	mov.w	r8, r8, asr #8
 802000c:	f806 8c01 	strb.w	r8, [r6, #-1]
 8020010:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020012:	3603      	adds	r6, #3
 8020014:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020018:	4414      	add	r4, r2
 802001a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802001c:	4410      	add	r0, r2
 802001e:	e7ad      	b.n	801ff7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8020020:	f04f 0c00 	mov.w	ip, #0
 8020024:	eba3 020c 	sub.w	r2, r3, ip
 8020028:	2a00      	cmp	r2, #0
 802002a:	dc3d      	bgt.n	80200a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 802002c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020034:	441d      	add	r5, r3
 8020036:	2900      	cmp	r1, #0
 8020038:	f340 8097 	ble.w	802016a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 802003c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020042:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020046:	3901      	subs	r1, #1
 8020048:	eeb0 6a62 	vmov.f32	s12, s5
 802004c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020050:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020054:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020058:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802005c:	eeb0 6a43 	vmov.f32	s12, s6
 8020060:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020064:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020068:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802006c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020070:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020074:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020078:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802007c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020080:	ee12 2a90 	vmov	r2, s5
 8020084:	eef0 2a47 	vmov.f32	s5, s14
 8020088:	fb92 f3f3 	sdiv	r3, r2, r3
 802008c:	ee13 2a10 	vmov	r2, s6
 8020090:	9311      	str	r3, [sp, #68]	; 0x44
 8020092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020094:	eeb0 3a67 	vmov.f32	s6, s15
 8020098:	fb92 f3f3 	sdiv	r3, r2, r3
 802009c:	9a03      	ldr	r2, [sp, #12]
 802009e:	9312      	str	r3, [sp, #72]	; 0x48
 80200a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200a2:	bf08      	it	eq
 80200a4:	4613      	moveq	r3, r2
 80200a6:	e738      	b.n	801ff1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 80200a8:	1426      	asrs	r6, r4, #16
 80200aa:	d448      	bmi.n	802013e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80200ac:	4576      	cmp	r6, lr
 80200ae:	da46      	bge.n	802013e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80200b0:	1402      	asrs	r2, r0, #16
 80200b2:	d444      	bmi.n	802013e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80200b4:	9f01      	ldr	r7, [sp, #4]
 80200b6:	42ba      	cmp	r2, r7
 80200b8:	da41      	bge.n	802013e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80200ba:	fb0e 6202 	mla	r2, lr, r2, r6
 80200be:	9e02      	ldr	r6, [sp, #8]
 80200c0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80200c4:	0e3a      	lsrs	r2, r7, #24
 80200c6:	d03a      	beq.n	802013e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80200c8:	2aff      	cmp	r2, #255	; 0xff
 80200ca:	b2d6      	uxtb	r6, r2
 80200cc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80200d0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80200d4:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80200d8:	b2ff      	uxtb	r7, r7
 80200da:	d037      	beq.n	802014c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 80200dc:	fa1f f986 	uxth.w	r9, r6
 80200e0:	4462      	add	r2, ip
 80200e2:	43f6      	mvns	r6, r6
 80200e4:	f815 8002 	ldrb.w	r8, [r5, r2]
 80200e8:	fb17 f709 	smulbb	r7, r7, r9
 80200ec:	fb1a fa09 	smulbb	sl, sl, r9
 80200f0:	b2f6      	uxtb	r6, r6
 80200f2:	fb1b f909 	smulbb	r9, fp, r9
 80200f6:	fb08 7706 	mla	r7, r8, r6, r7
 80200fa:	b2bf      	uxth	r7, r7
 80200fc:	f107 0801 	add.w	r8, r7, #1
 8020100:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8020104:	123f      	asrs	r7, r7, #8
 8020106:	54af      	strb	r7, [r5, r2]
 8020108:	442a      	add	r2, r5
 802010a:	7857      	ldrb	r7, [r2, #1]
 802010c:	fb07 aa06 	mla	sl, r7, r6, sl
 8020110:	fa1f fa8a 	uxth.w	sl, sl
 8020114:	f10a 0701 	add.w	r7, sl, #1
 8020118:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802011c:	7897      	ldrb	r7, [r2, #2]
 802011e:	fb07 9906 	mla	r9, r7, r6, r9
 8020122:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020126:	fa1f f989 	uxth.w	r9, r9
 802012a:	f882 a001 	strb.w	sl, [r2, #1]
 802012e:	f109 0601 	add.w	r6, r9, #1
 8020132:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020136:	ea4f 2929 	mov.w	r9, r9, asr #8
 802013a:	f882 9002 	strb.w	r9, [r2, #2]
 802013e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020140:	f10c 0c01 	add.w	ip, ip, #1
 8020144:	4414      	add	r4, r2
 8020146:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020148:	4410      	add	r0, r2
 802014a:	e76b      	b.n	8020024 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 802014c:	4462      	add	r2, ip
 802014e:	54af      	strb	r7, [r5, r2]
 8020150:	442a      	add	r2, r5
 8020152:	f882 a001 	strb.w	sl, [r2, #1]
 8020156:	f882 b002 	strb.w	fp, [r2, #2]
 802015a:	e7f0      	b.n	802013e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802015c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020160:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020164:	f806 bc01 	strb.w	fp, [r6, #-1]
 8020168:	e752      	b.n	8020010 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 802016a:	b005      	add	sp, #20
 802016c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020170 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020174:	b087      	sub	sp, #28
 8020176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802017a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802017c:	9204      	str	r2, [sp, #16]
 802017e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8020182:	6860      	ldr	r0, [r4, #4]
 8020184:	9205      	str	r2, [sp, #20]
 8020186:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 802018a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 802018e:	9101      	str	r1, [sp, #4]
 8020190:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020194:	fb00 2505 	mla	r5, r0, r5, r2
 8020198:	6822      	ldr	r2, [r4, #0]
 802019a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802019e:	4415      	add	r5, r2
 80201a0:	f10e 0201 	add.w	r2, lr, #1
 80201a4:	f022 0201 	bic.w	r2, r2, #1
 80201a8:	9202      	str	r2, [sp, #8]
 80201aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80201ac:	6812      	ldr	r2, [r2, #0]
 80201ae:	9203      	str	r2, [sp, #12]
 80201b0:	9a01      	ldr	r2, [sp, #4]
 80201b2:	2a00      	cmp	r2, #0
 80201b4:	dc03      	bgt.n	80201be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 80201b6:	9a04      	ldr	r2, [sp, #16]
 80201b8:	2a00      	cmp	r2, #0
 80201ba:	f340 8132 	ble.w	8020422 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 80201be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201c0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80201c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	dd0e      	ble.n	80201ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80201ce:	1422      	asrs	r2, r4, #16
 80201d0:	d405      	bmi.n	80201de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80201d2:	4596      	cmp	lr, r2
 80201d4:	dd03      	ble.n	80201de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80201d6:	1402      	asrs	r2, r0, #16
 80201d8:	d401      	bmi.n	80201de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80201da:	4542      	cmp	r2, r8
 80201dc:	db07      	blt.n	80201ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80201de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80201e0:	3b01      	subs	r3, #1
 80201e2:	3503      	adds	r5, #3
 80201e4:	4414      	add	r4, r2
 80201e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80201e8:	4410      	add	r0, r2
 80201ea:	e7ee      	b.n	80201ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 80201ec:	d010      	beq.n	8020210 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 80201ee:	1e5a      	subs	r2, r3, #1
 80201f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80201f2:	fb06 4602 	mla	r6, r6, r2, r4
 80201f6:	1436      	asrs	r6, r6, #16
 80201f8:	d546      	bpl.n	8020288 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80201fa:	4699      	mov	r9, r3
 80201fc:	462e      	mov	r6, r5
 80201fe:	f1b9 0f00 	cmp.w	r9, #0
 8020202:	f300 80ac 	bgt.w	802035e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 8020206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802020a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802020e:	441d      	add	r5, r3
 8020210:	9b01      	ldr	r3, [sp, #4]
 8020212:	2b00      	cmp	r3, #0
 8020214:	f340 8105 	ble.w	8020422 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8020218:	ee30 0a04 	vadd.f32	s0, s0, s8
 802021c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802021e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020222:	eeb0 6a62 	vmov.f32	s12, s5
 8020226:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802022a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802022e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020232:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020236:	eeb0 6a43 	vmov.f32	s12, s6
 802023a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802023e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020242:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020246:	ee61 7a27 	vmul.f32	s15, s2, s15
 802024a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802024e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020252:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020256:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802025a:	ee12 2a90 	vmov	r2, s5
 802025e:	eef0 2a47 	vmov.f32	s5, s14
 8020262:	fb92 f3f3 	sdiv	r3, r2, r3
 8020266:	ee13 2a10 	vmov	r2, s6
 802026a:	9313      	str	r3, [sp, #76]	; 0x4c
 802026c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802026e:	eeb0 3a67 	vmov.f32	s6, s15
 8020272:	fb92 f3f3 	sdiv	r3, r2, r3
 8020276:	9314      	str	r3, [sp, #80]	; 0x50
 8020278:	9b01      	ldr	r3, [sp, #4]
 802027a:	9a04      	ldr	r2, [sp, #16]
 802027c:	3b01      	subs	r3, #1
 802027e:	9301      	str	r3, [sp, #4]
 8020280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020282:	bf08      	it	eq
 8020284:	4613      	moveq	r3, r2
 8020286:	e793      	b.n	80201b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8020288:	45b6      	cmp	lr, r6
 802028a:	ddb6      	ble.n	80201fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802028c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802028e:	fb06 0202 	mla	r2, r6, r2, r0
 8020292:	1412      	asrs	r2, r2, #16
 8020294:	d4b1      	bmi.n	80201fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8020296:	4542      	cmp	r2, r8
 8020298:	daaf      	bge.n	80201fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802029a:	1cee      	adds	r6, r5, #3
 802029c:	4699      	mov	r9, r3
 802029e:	f1b9 0f00 	cmp.w	r9, #0
 80202a2:	ddb0      	ble.n	8020206 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80202a4:	1422      	asrs	r2, r4, #16
 80202a6:	9902      	ldr	r1, [sp, #8]
 80202a8:	1407      	asrs	r7, r0, #16
 80202aa:	fb01 2707 	mla	r7, r1, r7, r2
 80202ae:	9903      	ldr	r1, [sp, #12]
 80202b0:	087a      	lsrs	r2, r7, #1
 80202b2:	5c8a      	ldrb	r2, [r1, r2]
 80202b4:	07f9      	lsls	r1, r7, #31
 80202b6:	bf54      	ite	pl
 80202b8:	f002 020f 	andpl.w	r2, r2, #15
 80202bc:	1112      	asrmi	r2, r2, #4
 80202be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80202c2:	b2d2      	uxtb	r2, r2
 80202c4:	2a00      	cmp	r2, #0
 80202c6:	d042      	beq.n	802034e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 80202c8:	4957      	ldr	r1, [pc, #348]	; (8020428 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 80202ca:	680f      	ldr	r7, [r1, #0]
 80202cc:	9905      	ldr	r1, [sp, #20]
 80202ce:	fa5f fb87 	uxtb.w	fp, r7
 80202d2:	434a      	muls	r2, r1
 80202d4:	f102 0c01 	add.w	ip, r2, #1
 80202d8:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 80202dc:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 80202e0:	1212      	asrs	r2, r2, #8
 80202e2:	fa1f fa82 	uxth.w	sl, r2
 80202e6:	43d2      	mvns	r2, r2
 80202e8:	fb1b fb0a 	smulbb	fp, fp, sl
 80202ec:	b2d2      	uxtb	r2, r2
 80202ee:	fb0c bc02 	mla	ip, ip, r2, fp
 80202f2:	fa1f fc8c 	uxth.w	ip, ip
 80202f6:	f10c 0b01 	add.w	fp, ip, #1
 80202fa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80202fe:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020302:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8020306:	fb1b fb0a 	smulbb	fp, fp, sl
 802030a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802030e:	fb17 fa0a 	smulbb	sl, r7, sl
 8020312:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8020316:	f806 cc03 	strb.w	ip, [r6, #-3]
 802031a:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 802031e:	fb07 aa02 	mla	sl, r7, r2, sl
 8020322:	fb0c bc02 	mla	ip, ip, r2, fp
 8020326:	fa1f fa8a 	uxth.w	sl, sl
 802032a:	fa1f fc8c 	uxth.w	ip, ip
 802032e:	f10a 0701 	add.w	r7, sl, #1
 8020332:	f10c 0b01 	add.w	fp, ip, #1
 8020336:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802033a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802033e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020342:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020346:	f806 ac01 	strb.w	sl, [r6, #-1]
 802034a:	f806 cc02 	strb.w	ip, [r6, #-2]
 802034e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020350:	3603      	adds	r6, #3
 8020352:	f109 39ff 	add.w	r9, r9, #4294967295
 8020356:	4414      	add	r4, r2
 8020358:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802035a:	4410      	add	r0, r2
 802035c:	e79f      	b.n	802029e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 802035e:	1422      	asrs	r2, r4, #16
 8020360:	d457      	bmi.n	8020412 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8020362:	4596      	cmp	lr, r2
 8020364:	dd55      	ble.n	8020412 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8020366:	1407      	asrs	r7, r0, #16
 8020368:	d453      	bmi.n	8020412 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802036a:	4547      	cmp	r7, r8
 802036c:	da51      	bge.n	8020412 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802036e:	9902      	ldr	r1, [sp, #8]
 8020370:	fb07 2701 	mla	r7, r7, r1, r2
 8020374:	9903      	ldr	r1, [sp, #12]
 8020376:	087a      	lsrs	r2, r7, #1
 8020378:	07ff      	lsls	r7, r7, #31
 802037a:	5c8a      	ldrb	r2, [r1, r2]
 802037c:	bf54      	ite	pl
 802037e:	f002 020f 	andpl.w	r2, r2, #15
 8020382:	1112      	asrmi	r2, r2, #4
 8020384:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020388:	b2d2      	uxtb	r2, r2
 802038a:	2a00      	cmp	r2, #0
 802038c:	d041      	beq.n	8020412 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802038e:	4926      	ldr	r1, [pc, #152]	; (8020428 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8020390:	680f      	ldr	r7, [r1, #0]
 8020392:	9905      	ldr	r1, [sp, #20]
 8020394:	fa5f fb87 	uxtb.w	fp, r7
 8020398:	434a      	muls	r2, r1
 802039a:	f102 0c01 	add.w	ip, r2, #1
 802039e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 80203a2:	f896 c000 	ldrb.w	ip, [r6]
 80203a6:	1212      	asrs	r2, r2, #8
 80203a8:	fa1f fa82 	uxth.w	sl, r2
 80203ac:	43d2      	mvns	r2, r2
 80203ae:	fb1b fb0a 	smulbb	fp, fp, sl
 80203b2:	b2d2      	uxtb	r2, r2
 80203b4:	fb0c bc02 	mla	ip, ip, r2, fp
 80203b8:	fa1f fc8c 	uxth.w	ip, ip
 80203bc:	f10c 0b01 	add.w	fp, ip, #1
 80203c0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80203c4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80203c8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80203cc:	fb1b fb0a 	smulbb	fp, fp, sl
 80203d0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80203d4:	fb17 fa0a 	smulbb	sl, r7, sl
 80203d8:	78b7      	ldrb	r7, [r6, #2]
 80203da:	f886 c000 	strb.w	ip, [r6]
 80203de:	f896 c001 	ldrb.w	ip, [r6, #1]
 80203e2:	fb07 aa02 	mla	sl, r7, r2, sl
 80203e6:	fb0c bc02 	mla	ip, ip, r2, fp
 80203ea:	fa1f fa8a 	uxth.w	sl, sl
 80203ee:	fa1f fc8c 	uxth.w	ip, ip
 80203f2:	f10a 0701 	add.w	r7, sl, #1
 80203f6:	f10c 0b01 	add.w	fp, ip, #1
 80203fa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80203fe:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020402:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020406:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802040a:	f886 a002 	strb.w	sl, [r6, #2]
 802040e:	f886 c001 	strb.w	ip, [r6, #1]
 8020412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020414:	3603      	adds	r6, #3
 8020416:	f109 39ff 	add.w	r9, r9, #4294967295
 802041a:	4414      	add	r4, r2
 802041c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802041e:	4410      	add	r0, r2
 8020420:	e6ed      	b.n	80201fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8020422:	b007      	add	sp, #28
 8020424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020428:	2000bf18 	.word	0x2000bf18

0802042c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020430:	b087      	sub	sp, #28
 8020432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020436:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020438:	9205      	str	r2, [sp, #20]
 802043a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 802043e:	6860      	ldr	r0, [r4, #4]
 8020440:	9202      	str	r2, [sp, #8]
 8020442:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8020446:	9101      	str	r1, [sp, #4]
 8020448:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 802044c:	fb00 2606 	mla	r6, r0, r6, r2
 8020450:	6822      	ldr	r2, [r4, #0]
 8020452:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020456:	4416      	add	r6, r2
 8020458:	f108 0201 	add.w	r2, r8, #1
 802045c:	f022 0201 	bic.w	r2, r2, #1
 8020460:	9203      	str	r2, [sp, #12]
 8020462:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020464:	6812      	ldr	r2, [r2, #0]
 8020466:	9204      	str	r2, [sp, #16]
 8020468:	9a01      	ldr	r2, [sp, #4]
 802046a:	2a00      	cmp	r2, #0
 802046c:	dc03      	bgt.n	8020476 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 802046e:	9a05      	ldr	r2, [sp, #20]
 8020470:	2a00      	cmp	r2, #0
 8020472:	f340 813a 	ble.w	80206ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8020476:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020478:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 802047c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802047e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020482:	2b00      	cmp	r3, #0
 8020484:	dd0f      	ble.n	80204a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020486:	142a      	asrs	r2, r5, #16
 8020488:	d406      	bmi.n	8020498 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802048a:	4590      	cmp	r8, r2
 802048c:	dd04      	ble.n	8020498 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802048e:	1422      	asrs	r2, r4, #16
 8020490:	d402      	bmi.n	8020498 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8020492:	9802      	ldr	r0, [sp, #8]
 8020494:	4282      	cmp	r2, r0
 8020496:	db07      	blt.n	80204a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8020498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802049a:	3b01      	subs	r3, #1
 802049c:	3603      	adds	r6, #3
 802049e:	4415      	add	r5, r2
 80204a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80204a2:	4414      	add	r4, r2
 80204a4:	e7ed      	b.n	8020482 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 80204a6:	d073      	beq.n	8020590 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 80204a8:	1e5a      	subs	r2, r3, #1
 80204aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80204ac:	fb00 5002 	mla	r0, r0, r2, r5
 80204b0:	1400      	asrs	r0, r0, #16
 80204b2:	d464      	bmi.n	802057e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 80204b4:	4580      	cmp	r8, r0
 80204b6:	dd62      	ble.n	802057e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 80204b8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80204ba:	fb00 4202 	mla	r2, r0, r2, r4
 80204be:	1412      	asrs	r2, r2, #16
 80204c0:	d45d      	bmi.n	802057e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 80204c2:	9802      	ldr	r0, [sp, #8]
 80204c4:	4282      	cmp	r2, r0
 80204c6:	da5a      	bge.n	802057e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 80204c8:	1cf0      	adds	r0, r6, #3
 80204ca:	469a      	mov	sl, r3
 80204cc:	f1ba 0f00 	cmp.w	sl, #0
 80204d0:	dd59      	ble.n	8020586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80204d2:	142a      	asrs	r2, r5, #16
 80204d4:	9903      	ldr	r1, [sp, #12]
 80204d6:	1427      	asrs	r7, r4, #16
 80204d8:	fb01 2707 	mla	r7, r1, r7, r2
 80204dc:	9904      	ldr	r1, [sp, #16]
 80204de:	087a      	lsrs	r2, r7, #1
 80204e0:	5c8a      	ldrb	r2, [r1, r2]
 80204e2:	07f9      	lsls	r1, r7, #31
 80204e4:	bf54      	ite	pl
 80204e6:	f002 020f 	andpl.w	r2, r2, #15
 80204ea:	1112      	asrmi	r2, r2, #4
 80204ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80204f0:	b2d2      	uxtb	r2, r2
 80204f2:	2a00      	cmp	r2, #0
 80204f4:	d03b      	beq.n	802056e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80204f6:	497e      	ldr	r1, [pc, #504]	; (80206f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80204f8:	2aff      	cmp	r2, #255	; 0xff
 80204fa:	680f      	ldr	r7, [r1, #0]
 80204fc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020500:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020504:	b2ff      	uxtb	r7, r7
 8020506:	f000 80e9 	beq.w	80206dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 802050a:	fa1f fe82 	uxth.w	lr, r2
 802050e:	43d2      	mvns	r2, r2
 8020510:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8020514:	fb17 f70e 	smulbb	r7, r7, lr
 8020518:	b2d2      	uxtb	r2, r2
 802051a:	fb19 f90e 	smulbb	r9, r9, lr
 802051e:	fb0c 7702 	mla	r7, ip, r2, r7
 8020522:	fb1b fe0e 	smulbb	lr, fp, lr
 8020526:	b2bf      	uxth	r7, r7
 8020528:	f107 0c01 	add.w	ip, r7, #1
 802052c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8020530:	123f      	asrs	r7, r7, #8
 8020532:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020536:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 802053a:	fb07 9902 	mla	r9, r7, r2, r9
 802053e:	fa1f f989 	uxth.w	r9, r9
 8020542:	f109 0701 	add.w	r7, r9, #1
 8020546:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802054a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 802054e:	fb07 ee02 	mla	lr, r7, r2, lr
 8020552:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020556:	fa1f fe8e 	uxth.w	lr, lr
 802055a:	f800 9c02 	strb.w	r9, [r0, #-2]
 802055e:	f10e 0201 	add.w	r2, lr, #1
 8020562:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020566:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802056a:	f800 ec01 	strb.w	lr, [r0, #-1]
 802056e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020570:	3003      	adds	r0, #3
 8020572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020576:	4415      	add	r5, r2
 8020578:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802057a:	4414      	add	r4, r2
 802057c:	e7a6      	b.n	80204cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 802057e:	2700      	movs	r7, #0
 8020580:	1bda      	subs	r2, r3, r7
 8020582:	2a00      	cmp	r2, #0
 8020584:	dc40      	bgt.n	8020608 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8020586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802058a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802058e:	441e      	add	r6, r3
 8020590:	9b01      	ldr	r3, [sp, #4]
 8020592:	2b00      	cmp	r3, #0
 8020594:	f340 80a9 	ble.w	80206ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8020598:	ee30 0a04 	vadd.f32	s0, s0, s8
 802059c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802059e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80205a2:	eeb0 6a62 	vmov.f32	s12, s5
 80205a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80205aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80205ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80205b6:	eeb0 6a43 	vmov.f32	s12, s6
 80205ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205be:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80205c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205da:	ee12 2a90 	vmov	r2, s5
 80205de:	eef0 2a47 	vmov.f32	s5, s14
 80205e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80205e6:	ee13 2a10 	vmov	r2, s6
 80205ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80205ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205ee:	eeb0 3a67 	vmov.f32	s6, s15
 80205f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80205f6:	9314      	str	r3, [sp, #80]	; 0x50
 80205f8:	9b01      	ldr	r3, [sp, #4]
 80205fa:	9a05      	ldr	r2, [sp, #20]
 80205fc:	3b01      	subs	r3, #1
 80205fe:	9301      	str	r3, [sp, #4]
 8020600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020602:	bf08      	it	eq
 8020604:	4613      	moveq	r3, r2
 8020606:	e72f      	b.n	8020468 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8020608:	142a      	asrs	r2, r5, #16
 802060a:	d458      	bmi.n	80206be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802060c:	4590      	cmp	r8, r2
 802060e:	dd56      	ble.n	80206be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8020610:	1420      	asrs	r0, r4, #16
 8020612:	d454      	bmi.n	80206be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8020614:	9902      	ldr	r1, [sp, #8]
 8020616:	4288      	cmp	r0, r1
 8020618:	da51      	bge.n	80206be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802061a:	9903      	ldr	r1, [sp, #12]
 802061c:	fb00 2001 	mla	r0, r0, r1, r2
 8020620:	9904      	ldr	r1, [sp, #16]
 8020622:	0842      	lsrs	r2, r0, #1
 8020624:	07c0      	lsls	r0, r0, #31
 8020626:	5c8a      	ldrb	r2, [r1, r2]
 8020628:	bf54      	ite	pl
 802062a:	f002 020f 	andpl.w	r2, r2, #15
 802062e:	1112      	asrmi	r2, r2, #4
 8020630:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020634:	b2d2      	uxtb	r2, r2
 8020636:	2a00      	cmp	r2, #0
 8020638:	d041      	beq.n	80206be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802063a:	492d      	ldr	r1, [pc, #180]	; (80206f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 802063c:	2aff      	cmp	r2, #255	; 0xff
 802063e:	6808      	ldr	r0, [r1, #0]
 8020640:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8020644:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020648:	fa5f fc80 	uxtb.w	ip, r0
 802064c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8020650:	d03b      	beq.n	80206ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 8020652:	fa1f f982 	uxth.w	r9, r2
 8020656:	4438      	add	r0, r7
 8020658:	43d2      	mvns	r2, r2
 802065a:	f816 e000 	ldrb.w	lr, [r6, r0]
 802065e:	fb1c fc09 	smulbb	ip, ip, r9
 8020662:	fb1a fa09 	smulbb	sl, sl, r9
 8020666:	b2d2      	uxtb	r2, r2
 8020668:	fb1b f909 	smulbb	r9, fp, r9
 802066c:	fb0e cc02 	mla	ip, lr, r2, ip
 8020670:	fa1f fc8c 	uxth.w	ip, ip
 8020674:	f10c 0e01 	add.w	lr, ip, #1
 8020678:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 802067c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020680:	f806 c000 	strb.w	ip, [r6, r0]
 8020684:	4430      	add	r0, r6
 8020686:	f890 c001 	ldrb.w	ip, [r0, #1]
 802068a:	fb0c aa02 	mla	sl, ip, r2, sl
 802068e:	fa1f fa8a 	uxth.w	sl, sl
 8020692:	f10a 0c01 	add.w	ip, sl, #1
 8020696:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802069a:	f890 c002 	ldrb.w	ip, [r0, #2]
 802069e:	fb0c 9902 	mla	r9, ip, r2, r9
 80206a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80206a6:	fa1f f989 	uxth.w	r9, r9
 80206aa:	f880 a001 	strb.w	sl, [r0, #1]
 80206ae:	f109 0201 	add.w	r2, r9, #1
 80206b2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80206b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80206ba:	f880 9002 	strb.w	r9, [r0, #2]
 80206be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80206c0:	3701      	adds	r7, #1
 80206c2:	4415      	add	r5, r2
 80206c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80206c6:	4414      	add	r4, r2
 80206c8:	e75a      	b.n	8020580 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 80206ca:	4438      	add	r0, r7
 80206cc:	f806 c000 	strb.w	ip, [r6, r0]
 80206d0:	4430      	add	r0, r6
 80206d2:	f880 a001 	strb.w	sl, [r0, #1]
 80206d6:	f880 b002 	strb.w	fp, [r0, #2]
 80206da:	e7f0      	b.n	80206be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80206dc:	f800 7c03 	strb.w	r7, [r0, #-3]
 80206e0:	f800 9c02 	strb.w	r9, [r0, #-2]
 80206e4:	f800 bc01 	strb.w	fp, [r0, #-1]
 80206e8:	e741      	b.n	802056e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80206ea:	b007      	add	sp, #28
 80206ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206f0:	2000bf18 	.word	0x2000bf18

080206f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80206f4:	4770      	bx	lr

080206f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80206f6:	4770      	bx	lr

080206f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80206f8:	4770      	bx	lr

080206fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80206fa:	4770      	bx	lr

080206fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80206fc:	4770      	bx	lr

080206fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80206fe:	4770      	bx	lr

08020700 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020700:	4770      	bx	lr

08020702 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020702:	4770      	bx	lr

08020704 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020704:	4770      	bx	lr

08020706 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020706:	4770      	bx	lr

08020708 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020708:	4770      	bx	lr

0802070a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802070a:	4770      	bx	lr

0802070c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802070c:	4770      	bx	lr

0802070e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802070e:	4770      	bx	lr

08020710 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020710:	4770      	bx	lr

08020712 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020712:	4770      	bx	lr

08020714 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020714:	4770      	bx	lr

08020716 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020716:	4770      	bx	lr

08020718 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020718:	4770      	bx	lr

0802071a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802071a:	4770      	bx	lr

0802071c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 802071c:	2bff      	cmp	r3, #255	; 0xff
 802071e:	b508      	push	{r3, lr}
 8020720:	d04f      	beq.n	80207c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8020722:	2a2c      	cmp	r2, #44	; 0x2c
 8020724:	d032      	beq.n	802078c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8020726:	d80f      	bhi.n	8020748 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8020728:	2a08      	cmp	r2, #8
 802072a:	d046      	beq.n	80207ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 802072c:	d805      	bhi.n	802073a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 802072e:	2a04      	cmp	r2, #4
 8020730:	d041      	beq.n	80207b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8020732:	2a05      	cmp	r2, #5
 8020734:	d03d      	beq.n	80207b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8020736:	2000      	movs	r0, #0
 8020738:	e027      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802073a:	2a0a      	cmp	r2, #10
 802073c:	d03d      	beq.n	80207ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 802073e:	d301      	bcc.n	8020744 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8020740:	2a0b      	cmp	r2, #11
 8020742:	d1f8      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020744:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8020746:	e020      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020748:	2a30      	cmp	r2, #48	; 0x30
 802074a:	d038      	beq.n	80207be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 802074c:	d808      	bhi.n	8020760 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 802074e:	2a2e      	cmp	r2, #46	; 0x2e
 8020750:	684b      	ldr	r3, [r1, #4]
 8020752:	d029      	beq.n	80207a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8020754:	d90b      	bls.n	802076e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8020756:	781b      	ldrb	r3, [r3, #0]
 8020758:	2b00      	cmp	r3, #0
 802075a:	d1ec      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802075c:	6a00      	ldr	r0, [r0, #32]
 802075e:	e014      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020760:	2a32      	cmp	r2, #50	; 0x32
 8020762:	d02c      	beq.n	80207be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8020764:	d301      	bcc.n	802076a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8020766:	2a33      	cmp	r2, #51	; 0x33
 8020768:	d1e5      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802076a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 802076c:	e00d      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802076e:	781b      	ldrb	r3, [r3, #0]
 8020770:	2b01      	cmp	r3, #1
 8020772:	d009      	beq.n	8020788 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8020774:	d3f2      	bcc.n	802075c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8020776:	2b02      	cmp	r3, #2
 8020778:	d1dd      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802077a:	4b39      	ldr	r3, [pc, #228]	; (8020860 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802077c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8020780:	4a38      	ldr	r2, [pc, #224]	; (8020864 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020782:	4839      	ldr	r0, [pc, #228]	; (8020868 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8020784:	f007 ff3e 	bl	8028604 <__assert_func>
 8020788:	6900      	ldr	r0, [r0, #16]
 802078a:	bd08      	pop	{r3, pc}
 802078c:	684b      	ldr	r3, [r1, #4]
 802078e:	781b      	ldrb	r3, [r3, #0]
 8020790:	2b01      	cmp	r3, #1
 8020792:	d007      	beq.n	80207a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8020794:	d30b      	bcc.n	80207ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8020796:	2b02      	cmp	r3, #2
 8020798:	d1cd      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802079a:	4b31      	ldr	r3, [pc, #196]	; (8020860 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802079c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80207a0:	4a30      	ldr	r2, [pc, #192]	; (8020864 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80207a2:	e7ee      	b.n	8020782 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80207a4:	6880      	ldr	r0, [r0, #8]
 80207a6:	e7f0      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207a8:	781b      	ldrb	r3, [r3, #0]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d1c3      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80207ae:	6980      	ldr	r0, [r0, #24]
 80207b0:	e7eb      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80207b4:	e7e9      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80207b8:	e7e7      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80207bc:	e7e5      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207be:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80207c0:	e7e3      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207c2:	2a2c      	cmp	r2, #44	; 0x2c
 80207c4:	d030      	beq.n	8020828 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80207c6:	d80f      	bhi.n	80207e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80207c8:	2a08      	cmp	r2, #8
 80207ca:	d044      	beq.n	8020856 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80207cc:	d805      	bhi.n	80207da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80207ce:	2a04      	cmp	r2, #4
 80207d0:	d03f      	beq.n	8020852 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80207d2:	2a05      	cmp	r2, #5
 80207d4:	d1af      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80207d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80207d8:	e7d7      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207da:	2a0a      	cmp	r2, #10
 80207dc:	d03b      	beq.n	8020856 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80207de:	d301      	bcc.n	80207e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80207e0:	2a0b      	cmp	r2, #11
 80207e2:	d1a8      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80207e4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80207e6:	e7d0      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207e8:	2a30      	cmp	r2, #48	; 0x30
 80207ea:	d036      	beq.n	802085a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80207ec:	d808      	bhi.n	8020800 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80207ee:	2a2e      	cmp	r2, #46	; 0x2e
 80207f0:	684b      	ldr	r3, [r1, #4]
 80207f2:	d028      	beq.n	8020846 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80207f4:	d90b      	bls.n	802080e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80207f6:	781b      	ldrb	r3, [r3, #0]
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	d19c      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80207fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80207fe:	e7c4      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020800:	2a32      	cmp	r2, #50	; 0x32
 8020802:	d02a      	beq.n	802085a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020804:	d301      	bcc.n	802080a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8020806:	2a33      	cmp	r2, #51	; 0x33
 8020808:	d195      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802080a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 802080c:	e7bd      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802080e:	781b      	ldrb	r3, [r3, #0]
 8020810:	2b01      	cmp	r3, #1
 8020812:	d007      	beq.n	8020824 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8020814:	d3f2      	bcc.n	80207fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8020816:	2b02      	cmp	r3, #2
 8020818:	d18d      	bne.n	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802081a:	4b11      	ldr	r3, [pc, #68]	; (8020860 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802081c:	f240 31e1 	movw	r1, #993	; 0x3e1
 8020820:	4a10      	ldr	r2, [pc, #64]	; (8020864 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020822:	e7ae      	b.n	8020782 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8020824:	6940      	ldr	r0, [r0, #20]
 8020826:	e7b0      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020828:	684b      	ldr	r3, [r1, #4]
 802082a:	781b      	ldrb	r3, [r3, #0]
 802082c:	2b01      	cmp	r3, #1
 802082e:	d008      	beq.n	8020842 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8020830:	d30d      	bcc.n	802084e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8020832:	2b02      	cmp	r3, #2
 8020834:	f47f af7f 	bne.w	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020838:	4b09      	ldr	r3, [pc, #36]	; (8020860 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802083a:	f240 31ed 	movw	r1, #1005	; 0x3ed
 802083e:	4a09      	ldr	r2, [pc, #36]	; (8020864 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020840:	e79f      	b.n	8020782 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8020842:	68c0      	ldr	r0, [r0, #12]
 8020844:	e7a1      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020846:	781b      	ldrb	r3, [r3, #0]
 8020848:	2b00      	cmp	r3, #0
 802084a:	f47f af74 	bne.w	8020736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802084e:	69c0      	ldr	r0, [r0, #28]
 8020850:	e79b      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020852:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8020854:	e799      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020856:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8020858:	e797      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802085a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 802085c:	e795      	b.n	802078a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802085e:	bf00      	nop
 8020860:	0802d6f3 	.word	0x0802d6f3
 8020864:	0802dea7 	.word	0x0802dea7
 8020868:	0802d73f 	.word	0x0802d73f

0802086c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 802086c:	b508      	push	{r3, lr}
 802086e:	4b06      	ldr	r3, [pc, #24]	; (8020888 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8020870:	8818      	ldrh	r0, [r3, #0]
 8020872:	b928      	cbnz	r0, 8020880 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8020874:	4b05      	ldr	r3, [pc, #20]	; (802088c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8020876:	21d7      	movs	r1, #215	; 0xd7
 8020878:	4a05      	ldr	r2, [pc, #20]	; (8020890 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 802087a:	4806      	ldr	r0, [pc, #24]	; (8020894 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 802087c:	f007 fec2 	bl	8028604 <__assert_func>
 8020880:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020884:	b280      	uxth	r0, r0
 8020886:	bd08      	pop	{r3, pc}
 8020888:	2000bee8 	.word	0x2000bee8
 802088c:	0802d98e 	.word	0x0802d98e
 8020890:	0802de6c 	.word	0x0802de6c
 8020894:	0802d9d0 	.word	0x0802d9d0

08020898 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802089c:	4616      	mov	r6, r2
 802089e:	b087      	sub	sp, #28
 80208a0:	461f      	mov	r7, r3
 80208a2:	b33b      	cbz	r3, 80208f4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80208a4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80208a8:	b323      	cbz	r3, 80208f4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80208aa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80208ae:	b30b      	cbz	r3, 80208f4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80208b0:	6808      	ldr	r0, [r1, #0]
 80208b2:	ab04      	add	r3, sp, #16
 80208b4:	6849      	ldr	r1, [r1, #4]
 80208b6:	4c5a      	ldr	r4, [pc, #360]	; (8020a20 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 80208b8:	c303      	stmia	r3!, {r0, r1}
 80208ba:	a804      	add	r0, sp, #16
 80208bc:	f7fb fd34 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80208c0:	6820      	ldr	r0, [r4, #0]
 80208c2:	6803      	ldr	r3, [r0, #0]
 80208c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80208c6:	4798      	blx	r3
 80208c8:	2fff      	cmp	r7, #255	; 0xff
 80208ca:	4623      	mov	r3, r4
 80208cc:	d015      	beq.n	80208fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80208ce:	f010 0f08 	tst.w	r0, #8
 80208d2:	d015      	beq.n	8020900 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 80208d4:	6818      	ldr	r0, [r3, #0]
 80208d6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80208da:	6801      	ldr	r1, [r0, #0]
 80208dc:	9401      	str	r4, [sp, #4]
 80208de:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80208e2:	9702      	str	r7, [sp, #8]
 80208e4:	9400      	str	r4, [sp, #0]
 80208e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80208ea:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 80208ec:	4631      	mov	r1, r6
 80208ee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80208f2:	47a0      	blx	r4
 80208f4:	b007      	add	sp, #28
 80208f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208fa:	f010 0f02 	tst.w	r0, #2
 80208fe:	e7e8      	b.n	80208d2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 8020900:	6818      	ldr	r0, [r3, #0]
 8020902:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8020906:	6803      	ldr	r3, [r0, #0]
 8020908:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 802090c:	6a1b      	ldr	r3, [r3, #32]
 802090e:	4798      	blx	r3
 8020910:	4944      	ldr	r1, [pc, #272]	; (8020a24 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 8020912:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020916:	2fff      	cmp	r7, #255	; 0xff
 8020918:	f8b1 c000 	ldrh.w	ip, [r1]
 802091c:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8020920:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020924:	4688      	mov	r8, r1
 8020926:	fb0c 2303 	mla	r3, ip, r3, r2
 802092a:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 802092e:	b2f2      	uxtb	r2, r6
 8020930:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8020934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020938:	4418      	add	r0, r3
 802093a:	d112      	bne.n	8020962 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 802093c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020940:	2100      	movs	r1, #0
 8020942:	42a9      	cmp	r1, r5
 8020944:	da66      	bge.n	8020a14 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8020946:	4603      	mov	r3, r0
 8020948:	2700      	movs	r7, #0
 802094a:	42a7      	cmp	r7, r4
 802094c:	f103 0303 	add.w	r3, r3, #3
 8020950:	da57      	bge.n	8020a02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 8020952:	f803 2c03 	strb.w	r2, [r3, #-3]
 8020956:	3701      	adds	r7, #1
 8020958:	f803 ec02 	strb.w	lr, [r3, #-2]
 802095c:	f803 cc01 	strb.w	ip, [r3, #-1]
 8020960:	e7f3      	b.n	802094a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8020962:	b2bb      	uxth	r3, r7
 8020964:	f04f 0800 	mov.w	r8, #0
 8020968:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802096c:	fb0c fc03 	mul.w	ip, ip, r3
 8020970:	fb0e fe03 	mul.w	lr, lr, r3
 8020974:	435a      	muls	r2, r3
 8020976:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 802097a:	460f      	mov	r7, r1
 802097c:	b29b      	uxth	r3, r3
 802097e:	45a8      	cmp	r8, r5
 8020980:	da48      	bge.n	8020a14 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8020982:	4601      	mov	r1, r0
 8020984:	f04f 0a00 	mov.w	sl, #0
 8020988:	45a2      	cmp	sl, r4
 802098a:	f101 0103 	add.w	r1, r1, #3
 802098e:	da2f      	bge.n	80209f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 8020990:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8020994:	f10a 0a01 	add.w	sl, sl, #1
 8020998:	fb19 f903 	smulbb	r9, r9, r3
 802099c:	4491      	add	r9, r2
 802099e:	fa1f f989 	uxth.w	r9, r9
 80209a2:	f109 0b01 	add.w	fp, r9, #1
 80209a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80209aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209ae:	f801 9c03 	strb.w	r9, [r1, #-3]
 80209b2:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 80209b6:	fb19 f903 	smulbb	r9, r9, r3
 80209ba:	44f1      	add	r9, lr
 80209bc:	fa1f f989 	uxth.w	r9, r9
 80209c0:	f109 0b01 	add.w	fp, r9, #1
 80209c4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80209c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209cc:	f801 9c02 	strb.w	r9, [r1, #-2]
 80209d0:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 80209d4:	fb19 f903 	smulbb	r9, r9, r3
 80209d8:	44e1      	add	r9, ip
 80209da:	fa1f f989 	uxth.w	r9, r9
 80209de:	f109 0b01 	add.w	fp, r9, #1
 80209e2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80209e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209ea:	f801 9c01 	strb.w	r9, [r1, #-1]
 80209ee:	e7cb      	b.n	8020988 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 80209f0:	8839      	ldrh	r1, [r7, #0]
 80209f2:	f108 0801 	add.w	r8, r8, #1
 80209f6:	1b09      	subs	r1, r1, r4
 80209f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80209fc:	4431      	add	r1, r6
 80209fe:	4408      	add	r0, r1
 8020a00:	e7bd      	b.n	802097e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 8020a02:	f8b8 3000 	ldrh.w	r3, [r8]
 8020a06:	3101      	adds	r1, #1
 8020a08:	1b1b      	subs	r3, r3, r4
 8020a0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a0e:	4433      	add	r3, r6
 8020a10:	4418      	add	r0, r3
 8020a12:	e796      	b.n	8020942 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8020a14:	4b02      	ldr	r3, [pc, #8]	; (8020a20 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8020a16:	6818      	ldr	r0, [r3, #0]
 8020a18:	6803      	ldr	r3, [r0, #0]
 8020a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a1c:	4798      	blx	r3
 8020a1e:	e769      	b.n	80208f4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020a20:	2000bef0 	.word	0x2000bef0
 8020a24:	2000bee8 	.word	0x2000bee8

08020a28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a2c:	b08d      	sub	sp, #52	; 0x34
 8020a2e:	460c      	mov	r4, r1
 8020a30:	4617      	mov	r7, r2
 8020a32:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 8020a36:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8020a3a:	2e00      	cmp	r6, #0
 8020a3c:	d04a      	beq.n	8020ad4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020a3e:	6810      	ldr	r0, [r2, #0]
 8020a40:	ad08      	add	r5, sp, #32
 8020a42:	6851      	ldr	r1, [r2, #4]
 8020a44:	c503      	stmia	r5!, {r0, r1}
 8020a46:	6818      	ldr	r0, [r3, #0]
 8020a48:	ad0a      	add	r5, sp, #40	; 0x28
 8020a4a:	6859      	ldr	r1, [r3, #4]
 8020a4c:	c503      	stmia	r5!, {r0, r1}
 8020a4e:	a808      	add	r0, sp, #32
 8020a50:	f7fb fc6a 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a54:	4639      	mov	r1, r7
 8020a56:	a80a      	add	r0, sp, #40	; 0x28
 8020a58:	4f59      	ldr	r7, [pc, #356]	; (8020bc0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 8020a5a:	f7fb fc4d 	bl	801c2f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020a5e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020a62:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020a66:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020a6a:	6838      	ldr	r0, [r7, #0]
 8020a6c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020a70:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8020a74:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8020a78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020a7c:	440c      	add	r4, r1
 8020a7e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020a82:	440a      	add	r2, r1
 8020a84:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020a88:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020a8c:	4413      	add	r3, r2
 8020a8e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020a92:	6803      	ldr	r3, [r0, #0]
 8020a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a96:	4798      	blx	r3
 8020a98:	2eff      	cmp	r6, #255	; 0xff
 8020a9a:	f000 8089 	beq.w	8020bb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 8020a9e:	0743      	lsls	r3, r0, #29
 8020aa0:	d405      	bmi.n	8020aae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8020aa2:	f1b9 0f00 	cmp.w	r9, #0
 8020aa6:	d018      	beq.n	8020ada <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8020aa8:	f010 0f10 	tst.w	r0, #16
 8020aac:	d015      	beq.n	8020ada <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8020aae:	6838      	ldr	r0, [r7, #0]
 8020ab0:	b2ad      	uxth	r5, r5
 8020ab2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020ab6:	6801      	ldr	r1, [r0, #0]
 8020ab8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020abc:	9500      	str	r5, [sp, #0]
 8020abe:	e9cd 6903 	strd	r6, r9, [sp, #12]
 8020ac2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8020ac6:	9602      	str	r6, [sp, #8]
 8020ac8:	fa1f f688 	uxth.w	r6, r8
 8020acc:	9601      	str	r6, [sp, #4]
 8020ace:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8020ad0:	4621      	mov	r1, r4
 8020ad2:	47a8      	blx	r5
 8020ad4:	b00d      	add	sp, #52	; 0x34
 8020ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ada:	6838      	ldr	r0, [r7, #0]
 8020adc:	6803      	ldr	r3, [r0, #0]
 8020ade:	6a1b      	ldr	r3, [r3, #32]
 8020ae0:	4798      	blx	r3
 8020ae2:	4a38      	ldr	r2, [pc, #224]	; (8020bc4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8020ae4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020ae8:	2eff      	cmp	r6, #255	; 0xff
 8020aea:	8813      	ldrh	r3, [r2, #0]
 8020aec:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 8020af0:	fb0c 1303 	mla	r3, ip, r3, r1
 8020af4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8020af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020afc:	4418      	add	r0, r3
 8020afe:	d032      	beq.n	8020b66 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8020b00:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 8020b04:	f04f 0c00 	mov.w	ip, #0
 8020b08:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 8020b0c:	9306      	str	r3, [sp, #24]
 8020b0e:	45c4      	cmp	ip, r8
 8020b10:	da49      	bge.n	8020ba6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8020b12:	4686      	mov	lr, r0
 8020b14:	46a1      	mov	r9, r4
 8020b16:	eba9 0304 	sub.w	r3, r9, r4
 8020b1a:	428b      	cmp	r3, r1
 8020b1c:	da13      	bge.n	8020b46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8020b1e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8020b22:	f89e b000 	ldrb.w	fp, [lr]
 8020b26:	9307      	str	r3, [sp, #28]
 8020b28:	9b06      	ldr	r3, [sp, #24]
 8020b2a:	fb1b fb03 	smulbb	fp, fp, r3
 8020b2e:	9b07      	ldr	r3, [sp, #28]
 8020b30:	fb03 b306 	mla	r3, r3, r6, fp
 8020b34:	b29b      	uxth	r3, r3
 8020b36:	f103 0b01 	add.w	fp, r3, #1
 8020b3a:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8020b3e:	121b      	asrs	r3, r3, #8
 8020b40:	f80e 3b01 	strb.w	r3, [lr], #1
 8020b44:	e7e7      	b.n	8020b16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 8020b46:	8813      	ldrh	r3, [r2, #0]
 8020b48:	f10c 0c01 	add.w	ip, ip, #1
 8020b4c:	1b5b      	subs	r3, r3, r5
 8020b4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b52:	4453      	add	r3, sl
 8020b54:	4418      	add	r0, r3
 8020b56:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020b5a:	1b5b      	subs	r3, r3, r5
 8020b5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b60:	4453      	add	r3, sl
 8020b62:	441c      	add	r4, r3
 8020b64:	e7d3      	b.n	8020b0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 8020b66:	2600      	movs	r6, #0
 8020b68:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8020b6c:	4546      	cmp	r6, r8
 8020b6e:	da1a      	bge.n	8020ba6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8020b70:	f100 3eff 	add.w	lr, r0, #4294967295
 8020b74:	4623      	mov	r3, r4
 8020b76:	eba3 0904 	sub.w	r9, r3, r4
 8020b7a:	4589      	cmp	r9, r1
 8020b7c:	da04      	bge.n	8020b88 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8020b7e:	f813 9b01 	ldrb.w	r9, [r3], #1
 8020b82:	f80e 9f01 	strb.w	r9, [lr, #1]!
 8020b86:	e7f6      	b.n	8020b76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 8020b88:	8813      	ldrh	r3, [r2, #0]
 8020b8a:	3601      	adds	r6, #1
 8020b8c:	1b5b      	subs	r3, r3, r5
 8020b8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b92:	4463      	add	r3, ip
 8020b94:	4418      	add	r0, r3
 8020b96:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020b9a:	1b5b      	subs	r3, r3, r5
 8020b9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ba0:	4463      	add	r3, ip
 8020ba2:	441c      	add	r4, r3
 8020ba4:	e7e2      	b.n	8020b6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8020ba6:	6838      	ldr	r0, [r7, #0]
 8020ba8:	6803      	ldr	r3, [r0, #0]
 8020baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020bac:	4798      	blx	r3
 8020bae:	e791      	b.n	8020ad4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020bb0:	f1b9 0f00 	cmp.w	r9, #0
 8020bb4:	f47f af78 	bne.w	8020aa8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 8020bb8:	f010 0f01 	tst.w	r0, #1
 8020bbc:	e776      	b.n	8020aac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 8020bbe:	bf00      	nop
 8020bc0:	2000bef0 	.word	0x2000bef0
 8020bc4:	2000bee8 	.word	0x2000bee8

08020bc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020bc8:	b510      	push	{r4, lr}
 8020bca:	4604      	mov	r4, r0
 8020bcc:	2104      	movs	r1, #4
 8020bce:	f007 fceb 	bl	80285a8 <_ZdlPvj>
 8020bd2:	4620      	mov	r0, r4
 8020bd4:	bd10      	pop	{r4, pc}

08020bd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020bd6:	b510      	push	{r4, lr}
 8020bd8:	4604      	mov	r4, r0
 8020bda:	2104      	movs	r1, #4
 8020bdc:	f007 fce4 	bl	80285a8 <_ZdlPvj>
 8020be0:	4620      	mov	r0, r4
 8020be2:	bd10      	pop	{r4, pc}

08020be4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020be4:	b510      	push	{r4, lr}
 8020be6:	4604      	mov	r4, r0
 8020be8:	2104      	movs	r1, #4
 8020bea:	f007 fcdd 	bl	80285a8 <_ZdlPvj>
 8020bee:	4620      	mov	r0, r4
 8020bf0:	bd10      	pop	{r4, pc}

08020bf2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020bf2:	b510      	push	{r4, lr}
 8020bf4:	4604      	mov	r4, r0
 8020bf6:	2104      	movs	r1, #4
 8020bf8:	f007 fcd6 	bl	80285a8 <_ZdlPvj>
 8020bfc:	4620      	mov	r0, r4
 8020bfe:	bd10      	pop	{r4, pc}

08020c00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020c00:	b510      	push	{r4, lr}
 8020c02:	4604      	mov	r4, r0
 8020c04:	2104      	movs	r1, #4
 8020c06:	f007 fccf 	bl	80285a8 <_ZdlPvj>
 8020c0a:	4620      	mov	r0, r4
 8020c0c:	bd10      	pop	{r4, pc}

08020c0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020c0e:	b510      	push	{r4, lr}
 8020c10:	4604      	mov	r4, r0
 8020c12:	2104      	movs	r1, #4
 8020c14:	f007 fcc8 	bl	80285a8 <_ZdlPvj>
 8020c18:	4620      	mov	r0, r4
 8020c1a:	bd10      	pop	{r4, pc}

08020c1c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020c1c:	b510      	push	{r4, lr}
 8020c1e:	4604      	mov	r4, r0
 8020c20:	2104      	movs	r1, #4
 8020c22:	f007 fcc1 	bl	80285a8 <_ZdlPvj>
 8020c26:	4620      	mov	r0, r4
 8020c28:	bd10      	pop	{r4, pc}

08020c2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020c2a:	b510      	push	{r4, lr}
 8020c2c:	4604      	mov	r4, r0
 8020c2e:	2104      	movs	r1, #4
 8020c30:	f007 fcba 	bl	80285a8 <_ZdlPvj>
 8020c34:	4620      	mov	r0, r4
 8020c36:	bd10      	pop	{r4, pc}

08020c38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020c38:	b510      	push	{r4, lr}
 8020c3a:	4604      	mov	r4, r0
 8020c3c:	2104      	movs	r1, #4
 8020c3e:	f007 fcb3 	bl	80285a8 <_ZdlPvj>
 8020c42:	4620      	mov	r0, r4
 8020c44:	bd10      	pop	{r4, pc}

08020c46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020c46:	b510      	push	{r4, lr}
 8020c48:	4604      	mov	r4, r0
 8020c4a:	2104      	movs	r1, #4
 8020c4c:	f007 fcac 	bl	80285a8 <_ZdlPvj>
 8020c50:	4620      	mov	r0, r4
 8020c52:	bd10      	pop	{r4, pc}

08020c54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020c54:	b510      	push	{r4, lr}
 8020c56:	4604      	mov	r4, r0
 8020c58:	2104      	movs	r1, #4
 8020c5a:	f007 fca5 	bl	80285a8 <_ZdlPvj>
 8020c5e:	4620      	mov	r0, r4
 8020c60:	bd10      	pop	{r4, pc}

08020c62 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020c62:	b510      	push	{r4, lr}
 8020c64:	4604      	mov	r4, r0
 8020c66:	2104      	movs	r1, #4
 8020c68:	f007 fc9e 	bl	80285a8 <_ZdlPvj>
 8020c6c:	4620      	mov	r0, r4
 8020c6e:	bd10      	pop	{r4, pc}

08020c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020c70:	b510      	push	{r4, lr}
 8020c72:	4604      	mov	r4, r0
 8020c74:	2104      	movs	r1, #4
 8020c76:	f007 fc97 	bl	80285a8 <_ZdlPvj>
 8020c7a:	4620      	mov	r0, r4
 8020c7c:	bd10      	pop	{r4, pc}

08020c7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020c7e:	b510      	push	{r4, lr}
 8020c80:	4604      	mov	r4, r0
 8020c82:	2104      	movs	r1, #4
 8020c84:	f007 fc90 	bl	80285a8 <_ZdlPvj>
 8020c88:	4620      	mov	r0, r4
 8020c8a:	bd10      	pop	{r4, pc}

08020c8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020c8c:	b510      	push	{r4, lr}
 8020c8e:	4604      	mov	r4, r0
 8020c90:	2104      	movs	r1, #4
 8020c92:	f007 fc89 	bl	80285a8 <_ZdlPvj>
 8020c96:	4620      	mov	r0, r4
 8020c98:	bd10      	pop	{r4, pc}

08020c9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020c9a:	b510      	push	{r4, lr}
 8020c9c:	4604      	mov	r4, r0
 8020c9e:	2104      	movs	r1, #4
 8020ca0:	f007 fc82 	bl	80285a8 <_ZdlPvj>
 8020ca4:	4620      	mov	r0, r4
 8020ca6:	bd10      	pop	{r4, pc}

08020ca8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020ca8:	b510      	push	{r4, lr}
 8020caa:	4604      	mov	r4, r0
 8020cac:	2104      	movs	r1, #4
 8020cae:	f007 fc7b 	bl	80285a8 <_ZdlPvj>
 8020cb2:	4620      	mov	r0, r4
 8020cb4:	bd10      	pop	{r4, pc}

08020cb6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020cb6:	b510      	push	{r4, lr}
 8020cb8:	4604      	mov	r4, r0
 8020cba:	2104      	movs	r1, #4
 8020cbc:	f007 fc74 	bl	80285a8 <_ZdlPvj>
 8020cc0:	4620      	mov	r0, r4
 8020cc2:	bd10      	pop	{r4, pc}

08020cc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020cc4:	b510      	push	{r4, lr}
 8020cc6:	4604      	mov	r4, r0
 8020cc8:	2104      	movs	r1, #4
 8020cca:	f007 fc6d 	bl	80285a8 <_ZdlPvj>
 8020cce:	4620      	mov	r0, r4
 8020cd0:	bd10      	pop	{r4, pc}

08020cd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020cd2:	b510      	push	{r4, lr}
 8020cd4:	4604      	mov	r4, r0
 8020cd6:	2104      	movs	r1, #4
 8020cd8:	f007 fc66 	bl	80285a8 <_ZdlPvj>
 8020cdc:	4620      	mov	r0, r4
 8020cde:	bd10      	pop	{r4, pc}

08020ce0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce4:	4d9e      	ldr	r5, [pc, #632]	; (8020f60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020ce6:	4690      	mov	r8, r2
 8020ce8:	b08f      	sub	sp, #60	; 0x3c
 8020cea:	4604      	mov	r4, r0
 8020cec:	682a      	ldr	r2, [r5, #0]
 8020cee:	4689      	mov	r9, r1
 8020cf0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020cf4:	2a02      	cmp	r2, #2
 8020cf6:	d106      	bne.n	8020d06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020cf8:	4b9a      	ldr	r3, [pc, #616]	; (8020f64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020cfa:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8020cfe:	4a9a      	ldr	r2, [pc, #616]	; (8020f68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020d00:	489a      	ldr	r0, [pc, #616]	; (8020f6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8020d02:	f007 fc7f 	bl	8028604 <__assert_func>
 8020d06:	ae0e      	add	r6, sp, #56	; 0x38
 8020d08:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8020d0c:	4630      	mov	r0, r6
 8020d0e:	f7fe f8b3 	bl	801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020d12:	6823      	ldr	r3, [r4, #0]
 8020d14:	4607      	mov	r7, r0
 8020d16:	4620      	mov	r0, r4
 8020d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d1a:	4798      	blx	r3
 8020d1c:	4287      	cmp	r7, r0
 8020d1e:	d004      	beq.n	8020d2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020d20:	4b93      	ldr	r3, [pc, #588]	; (8020f70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8020d22:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8020d26:	4a90      	ldr	r2, [pc, #576]	; (8020f68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020d28:	e7ea      	b.n	8020d00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020d2a:	4630      	mov	r0, r6
 8020d2c:	f7fe f820 	bl	801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020d30:	4607      	mov	r7, r0
 8020d32:	b920      	cbnz	r0, 8020d3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020d34:	4b8f      	ldr	r3, [pc, #572]	; (8020f74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8020d36:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8020d3a:	4a8b      	ldr	r2, [pc, #556]	; (8020f68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020d3c:	e7e0      	b.n	8020d00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020d3e:	f8d8 0000 	ldr.w	r0, [r8]
 8020d42:	ab06      	add	r3, sp, #24
 8020d44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020d48:	f9b8 a000 	ldrsh.w	sl, [r8]
 8020d4c:	c303      	stmia	r3!, {r0, r1}
 8020d4e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020d52:	ab08      	add	r3, sp, #32
 8020d54:	f8d9 0000 	ldr.w	r0, [r9]
 8020d58:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8020d5c:	c303      	stmia	r3!, {r0, r1}
 8020d5e:	4630      	mov	r0, r6
 8020d60:	f7fd fefe 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020d64:	4680      	mov	r8, r0
 8020d66:	4630      	mov	r0, r6
 8020d68:	4e83      	ldr	r6, [pc, #524]	; (8020f78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8020d6a:	f7fd ff33 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020d6e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8020d72:	f10d 0920 	add.w	r9, sp, #32
 8020d76:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8020d7a:	a806      	add	r0, sp, #24
 8020d7c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8020d80:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8020d84:	f7fb fad0 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d88:	4648      	mov	r0, r9
 8020d8a:	f7fb facd 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d8e:	a80a      	add	r0, sp, #40	; 0x28
 8020d90:	f7fb faca 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d94:	4b79      	ldr	r3, [pc, #484]	; (8020f7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8020d96:	2100      	movs	r1, #0
 8020d98:	f9b6 2000 	ldrsh.w	r2, [r6]
 8020d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020da0:	4648      	mov	r0, r9
 8020da2:	910c      	str	r1, [sp, #48]	; 0x30
 8020da4:	a90c      	add	r1, sp, #48	; 0x30
 8020da6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8020daa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020dae:	f7f8 f961 	bl	8019074 <_ZN8touchgfx4RectaNERKS0_>
 8020db2:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8020db6:	9602      	str	r6, [sp, #8]
 8020db8:	f1bc 0f00 	cmp.w	ip, #0
 8020dbc:	f000 80a4 	beq.w	8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020dc0:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8020dc4:	2e00      	cmp	r6, #0
 8020dc6:	f000 809f 	beq.w	8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020dca:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8020dce:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020dd2:	4288      	cmp	r0, r1
 8020dd4:	db36      	blt.n	8020e44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020dd6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8020dda:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020dde:	429a      	cmp	r2, r3
 8020de0:	db30      	blt.n	8020e44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020de2:	4460      	add	r0, ip
 8020de4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8020de8:	4461      	add	r1, ip
 8020dea:	b200      	sxth	r0, r0
 8020dec:	b209      	sxth	r1, r1
 8020dee:	4288      	cmp	r0, r1
 8020df0:	dc28      	bgt.n	8020e44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020df2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8020df6:	4432      	add	r2, r6
 8020df8:	440b      	add	r3, r1
 8020dfa:	b212      	sxth	r2, r2
 8020dfc:	b21b      	sxth	r3, r3
 8020dfe:	429a      	cmp	r2, r3
 8020e00:	dc20      	bgt.n	8020e44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020e02:	6823      	ldr	r3, [r4, #0]
 8020e04:	4620      	mov	r0, r4
 8020e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e08:	4798      	blx	r3
 8020e0a:	4682      	mov	sl, r0
 8020e0c:	6828      	ldr	r0, [r5, #0]
 8020e0e:	6803      	ldr	r3, [r0, #0]
 8020e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e12:	4798      	blx	r3
 8020e14:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8020e18:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020e1c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020e20:	9303      	str	r3, [sp, #12]
 8020e22:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020e26:	1a9b      	subs	r3, r3, r2
 8020e28:	b29b      	uxth	r3, r3
 8020e2a:	b21c      	sxth	r4, r3
 8020e2c:	2c00      	cmp	r4, #0
 8020e2e:	dc0e      	bgt.n	8020e4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8020e30:	b134      	cbz	r4, 8020e40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8020e32:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020e36:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8020e3a:	4413      	add	r3, r2
 8020e3c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8020e40:	463c      	mov	r4, r7
 8020e42:	e00b      	b.n	8020e5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8020e44:	4b4e      	ldr	r3, [pc, #312]	; (8020f80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8020e46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020e4a:	4a47      	ldr	r2, [pc, #284]	; (8020f68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020e4c:	e758      	b.n	8020d00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020e4e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020e52:	ebab 0303 	sub.w	r3, fp, r3
 8020e56:	443c      	add	r4, r7
 8020e58:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020e5c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020e60:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020e64:	1a9b      	subs	r3, r3, r2
 8020e66:	b29b      	uxth	r3, r3
 8020e68:	b219      	sxth	r1, r3
 8020e6a:	2900      	cmp	r1, #0
 8020e6c:	dd50      	ble.n	8020f10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 8020e6e:	9a03      	ldr	r2, [sp, #12]
 8020e70:	fb02 4401 	mla	r4, r2, r1, r4
 8020e74:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8020e78:	1ad3      	subs	r3, r2, r3
 8020e7a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020e7e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020e82:	f1bc 0f00 	cmp.w	ip, #0
 8020e86:	dd3f      	ble.n	8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020e88:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020e8c:	2e00      	cmp	r6, #0
 8020e8e:	dd3b      	ble.n	8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020e90:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8020e94:	2203      	movs	r2, #3
 8020e96:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8020e9a:	fb0a f801 	mul.w	r8, sl, r1
 8020e9e:	fb13 8802 	smlabb	r8, r3, r2, r8
 8020ea2:	9a02      	ldr	r2, [sp, #8]
 8020ea4:	4480      	add	r8, r0
 8020ea6:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8020eaa:	8812      	ldrh	r2, [r2, #0]
 8020eac:	4584      	cmp	ip, r0
 8020eae:	eba2 0303 	sub.w	r3, r2, r3
 8020eb2:	bfa8      	it	ge
 8020eb4:	4684      	movge	ip, r0
 8020eb6:	459c      	cmp	ip, r3
 8020eb8:	bfa8      	it	ge
 8020eba:	469c      	movge	ip, r3
 8020ebc:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8020ec0:	429e      	cmp	r6, r3
 8020ec2:	bfa8      	it	ge
 8020ec4:	461e      	movge	r6, r3
 8020ec6:	4b2d      	ldr	r3, [pc, #180]	; (8020f7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8020ec8:	881b      	ldrh	r3, [r3, #0]
 8020eca:	1a59      	subs	r1, r3, r1
 8020ecc:	4633      	mov	r3, r6
 8020ece:	428e      	cmp	r6, r1
 8020ed0:	bfa8      	it	ge
 8020ed2:	460b      	movge	r3, r1
 8020ed4:	4562      	cmp	r2, ip
 8020ed6:	9302      	str	r3, [sp, #8]
 8020ed8:	d12d      	bne.n	8020f36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020eda:	455a      	cmp	r2, fp
 8020edc:	d12b      	bne.n	8020f36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020ede:	6828      	ldr	r0, [r5, #0]
 8020ee0:	6803      	ldr	r3, [r0, #0]
 8020ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ee4:	4798      	blx	r3
 8020ee6:	07c3      	lsls	r3, r0, #31
 8020ee8:	d51b      	bpl.n	8020f22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 8020eea:	6828      	ldr	r0, [r5, #0]
 8020eec:	9b02      	ldr	r3, [sp, #8]
 8020eee:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8020ef2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8020ef6:	6803      	ldr	r3, [r0, #0]
 8020ef8:	f8cd b000 	str.w	fp, [sp]
 8020efc:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8020efe:	4623      	mov	r3, r4
 8020f00:	e899 0006 	ldmia.w	r9, {r1, r2}
 8020f04:	47a8      	blx	r5
 8020f06:	4607      	mov	r7, r0
 8020f08:	4638      	mov	r0, r7
 8020f0a:	b00f      	add	sp, #60	; 0x3c
 8020f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f10:	bf1f      	itttt	ne
 8020f12:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8020f16:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8020f1a:	189b      	addne	r3, r3, r2
 8020f1c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020f20:	e7ad      	b.n	8020e7e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8020f22:	6828      	ldr	r0, [r5, #0]
 8020f24:	4642      	mov	r2, r8
 8020f26:	4621      	mov	r1, r4
 8020f28:	6803      	ldr	r3, [r0, #0]
 8020f2a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8020f2c:	9b02      	ldr	r3, [sp, #8]
 8020f2e:	fb03 f30a 	mul.w	r3, r3, sl
 8020f32:	47a8      	blx	r5
 8020f34:	e7e8      	b.n	8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020f36:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 8020f3a:	f04f 0900 	mov.w	r9, #0
 8020f3e:	9b02      	ldr	r3, [sp, #8]
 8020f40:	454b      	cmp	r3, r9
 8020f42:	dde1      	ble.n	8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020f44:	6828      	ldr	r0, [r5, #0]
 8020f46:	4642      	mov	r2, r8
 8020f48:	4621      	mov	r1, r4
 8020f4a:	44d0      	add	r8, sl
 8020f4c:	6803      	ldr	r3, [r0, #0]
 8020f4e:	f109 0901 	add.w	r9, r9, #1
 8020f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f54:	461e      	mov	r6, r3
 8020f56:	465b      	mov	r3, fp
 8020f58:	47b0      	blx	r6
 8020f5a:	9b03      	ldr	r3, [sp, #12]
 8020f5c:	441c      	add	r4, r3
 8020f5e:	e7ee      	b.n	8020f3e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8020f60:	2000bef0 	.word	0x2000bef0
 8020f64:	0802d771 	.word	0x0802d771
 8020f68:	0802df51 	.word	0x0802df51
 8020f6c:	0802d73f 	.word	0x0802d73f
 8020f70:	0802d825 	.word	0x0802d825
 8020f74:	0802d87a 	.word	0x0802d87a
 8020f78:	2000bee8 	.word	0x2000bee8
 8020f7c:	2000beea 	.word	0x2000beea
 8020f80:	0802d8b8 	.word	0x0802d8b8

08020f84 <_ZN8touchgfx8LCD24bppC1Ev>:
 8020f84:	4a0b      	ldr	r2, [pc, #44]	; (8020fb4 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 8020f86:	6002      	str	r2, [r0, #0]
 8020f88:	2200      	movs	r2, #0
 8020f8a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020f8e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020f92:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020f96:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020f9a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020f9e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020fa2:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020fa6:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020faa:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020fae:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020fb2:	4770      	bx	lr
 8020fb4:	0802db9c 	.word	0x0802db9c

08020fb8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fbc:	b093      	sub	sp, #76	; 0x4c
 8020fbe:	880c      	ldrh	r4, [r1, #0]
 8020fc0:	4605      	mov	r5, r0
 8020fc2:	460f      	mov	r7, r1
 8020fc4:	4691      	mov	r9, r2
 8020fc6:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8020fca:	b12c      	cbz	r4, 8020fd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8020fcc:	4b71      	ldr	r3, [pc, #452]	; (8021194 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020fce:	2167      	movs	r1, #103	; 0x67
 8020fd0:	4a71      	ldr	r2, [pc, #452]	; (8021198 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8020fd2:	4872      	ldr	r0, [pc, #456]	; (802119c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8020fd4:	f007 fb16 	bl	8028604 <__assert_func>
 8020fd8:	6810      	ldr	r0, [r2, #0]
 8020fda:	ae0e      	add	r6, sp, #56	; 0x38
 8020fdc:	6851      	ldr	r1, [r2, #4]
 8020fde:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80211a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 8020fe2:	c603      	stmia	r6!, {r0, r1}
 8020fe4:	6818      	ldr	r0, [r3, #0]
 8020fe6:	ae10      	add	r6, sp, #64	; 0x40
 8020fe8:	6859      	ldr	r1, [r3, #4]
 8020fea:	c603      	stmia	r6!, {r0, r1}
 8020fec:	a80e      	add	r0, sp, #56	; 0x38
 8020fee:	f7fb f99b 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ff2:	4649      	mov	r1, r9
 8020ff4:	a810      	add	r0, sp, #64	; 0x40
 8020ff6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80211a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8020ffa:	f7fb f97d 	bl	801c2f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ffe:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021002:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021006:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802100a:	f8d9 0000 	ldr.w	r0, [r9]
 802100e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021012:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8021016:	440d      	add	r5, r1
 8021018:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802101c:	440a      	add	r2, r1
 802101e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021022:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021026:	4413      	add	r3, r2
 8021028:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802102c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8021030:	930b      	str	r3, [sp, #44]	; 0x2c
 8021032:	6803      	ldr	r3, [r0, #0]
 8021034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021038:	4798      	blx	r3
 802103a:	2801      	cmp	r0, #1
 802103c:	d11e      	bne.n	802107c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 802103e:	220b      	movs	r2, #11
 8021040:	9008      	str	r0, [sp, #32]
 8021042:	b2b6      	uxth	r6, r6
 8021044:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021048:	9207      	str	r2, [sp, #28]
 802104a:	4629      	mov	r1, r5
 802104c:	f8ba 2000 	ldrh.w	r2, [sl]
 8021050:	f8cd 8010 	str.w	r8, [sp, #16]
 8021054:	9601      	str	r6, [sp, #4]
 8021056:	e9cd 0205 	strd	r0, r2, [sp, #20]
 802105a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 802105e:	9203      	str	r2, [sp, #12]
 8021060:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8021064:	9202      	str	r2, [sp, #8]
 8021066:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 802106a:	9200      	str	r2, [sp, #0]
 802106c:	463a      	mov	r2, r7
 802106e:	f8d9 0000 	ldr.w	r0, [r9]
 8021072:	f7f8 fc4d 	bl	8019910 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021076:	b013      	add	sp, #76	; 0x4c
 8021078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802107c:	f8d9 0000 	ldr.w	r0, [r9]
 8021080:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8021084:	6803      	ldr	r3, [r0, #0]
 8021086:	6a1b      	ldr	r3, [r3, #32]
 8021088:	4798      	blx	r3
 802108a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 802108e:	f8ba 3000 	ldrh.w	r3, [sl]
 8021092:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021096:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802109a:	fb01 2303 	mla	r3, r1, r3, r2
 802109e:	4621      	mov	r1, r4
 80210a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80210a4:	4418      	add	r0, r3
 80210a6:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80210aa:	930c      	str	r3, [sp, #48]	; 0x30
 80210ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210ae:	4299      	cmp	r1, r3
 80210b0:	da6a      	bge.n	8021188 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80210b2:	1cc2      	adds	r2, r0, #3
 80210b4:	46aa      	mov	sl, r5
 80210b6:	ebaa 0305 	sub.w	r3, sl, r5
 80210ba:	429e      	cmp	r6, r3
 80210bc:	dd55      	ble.n	802116a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 80210be:	2404      	movs	r4, #4
 80210c0:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80210c4:	fb14 4303 	smlabb	r3, r4, r3, r4
 80210c8:	eb07 0e03 	add.w	lr, r7, r3
 80210cc:	f89e 4003 	ldrb.w	r4, [lr, #3]
 80210d0:	b184      	cbz	r4, 80210f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80210d2:	2cff      	cmp	r4, #255	; 0xff
 80210d4:	f817 b003 	ldrb.w	fp, [r7, r3]
 80210d8:	d10e      	bne.n	80210f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80210da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80210de:	d10b      	bne.n	80210f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80210e0:	f802 bc03 	strb.w	fp, [r2, #-3]
 80210e4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80210e8:	f802 3c02 	strb.w	r3, [r2, #-2]
 80210ec:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80210f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80210f4:	3203      	adds	r2, #3
 80210f6:	e7de      	b.n	80210b6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 80210f8:	fb08 f404 	mul.w	r4, r8, r4
 80210fc:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8021100:	1c63      	adds	r3, r4, #1
 8021102:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8021106:	121b      	asrs	r3, r3, #8
 8021108:	b29c      	uxth	r4, r3
 802110a:	43db      	mvns	r3, r3
 802110c:	fb1b fb04 	smulbb	fp, fp, r4
 8021110:	b2db      	uxtb	r3, r3
 8021112:	fb0c bc03 	mla	ip, ip, r3, fp
 8021116:	fa1f fc8c 	uxth.w	ip, ip
 802111a:	f10c 0b01 	add.w	fp, ip, #1
 802111e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021122:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8021126:	fb1b fb03 	smulbb	fp, fp, r3
 802112a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802112e:	f802 cc03 	strb.w	ip, [r2, #-3]
 8021132:	f89e c001 	ldrb.w	ip, [lr, #1]
 8021136:	fb0c bc04 	mla	ip, ip, r4, fp
 802113a:	fa1f fc8c 	uxth.w	ip, ip
 802113e:	f10c 0b01 	add.w	fp, ip, #1
 8021142:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021146:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802114a:	f802 cc02 	strb.w	ip, [r2, #-2]
 802114e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8021152:	f89e e002 	ldrb.w	lr, [lr, #2]
 8021156:	fb1c f303 	smulbb	r3, ip, r3
 802115a:	fb0e 3304 	mla	r3, lr, r4, r3
 802115e:	b29b      	uxth	r3, r3
 8021160:	1c5c      	adds	r4, r3, #1
 8021162:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021166:	121b      	asrs	r3, r3, #8
 8021168:	e7c2      	b.n	80210f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 802116a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802116c:	3101      	adds	r1, #1
 802116e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021170:	881b      	ldrh	r3, [r3, #0]
 8021172:	1b9b      	subs	r3, r3, r6
 8021174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021178:	4413      	add	r3, r2
 802117a:	4418      	add	r0, r3
 802117c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8021180:	1b9b      	subs	r3, r3, r6
 8021182:	444b      	add	r3, r9
 8021184:	441d      	add	r5, r3
 8021186:	e791      	b.n	80210ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8021188:	4b05      	ldr	r3, [pc, #20]	; (80211a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 802118a:	6818      	ldr	r0, [r3, #0]
 802118c:	6803      	ldr	r3, [r0, #0]
 802118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021190:	4798      	blx	r3
 8021192:	e770      	b.n	8021076 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8021194:	0802d6a3 	.word	0x0802d6a3
 8021198:	0802dd73 	.word	0x0802dd73
 802119c:	0802d73f 	.word	0x0802d73f
 80211a0:	2000bef0 	.word	0x2000bef0
 80211a4:	2000bee8 	.word	0x2000bee8

080211a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80211a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211ac:	4614      	mov	r4, r2
 80211ae:	880a      	ldrh	r2, [r1, #0]
 80211b0:	b091      	sub	sp, #68	; 0x44
 80211b2:	4680      	mov	r8, r0
 80211b4:	2a01      	cmp	r2, #1
 80211b6:	460e      	mov	r6, r1
 80211b8:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80211bc:	d005      	beq.n	80211ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 80211be:	4b6d      	ldr	r3, [pc, #436]	; (8021374 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 80211c0:	21b5      	movs	r1, #181	; 0xb5
 80211c2:	4a6d      	ldr	r2, [pc, #436]	; (8021378 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 80211c4:	486d      	ldr	r0, [pc, #436]	; (802137c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 80211c6:	f007 fa1d 	bl	8028604 <__assert_func>
 80211ca:	6820      	ldr	r0, [r4, #0]
 80211cc:	ad0c      	add	r5, sp, #48	; 0x30
 80211ce:	6861      	ldr	r1, [r4, #4]
 80211d0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8021380 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 80211d4:	c503      	stmia	r5!, {r0, r1}
 80211d6:	6818      	ldr	r0, [r3, #0]
 80211d8:	ad0e      	add	r5, sp, #56	; 0x38
 80211da:	6859      	ldr	r1, [r3, #4]
 80211dc:	c503      	stmia	r5!, {r0, r1}
 80211de:	a80c      	add	r0, sp, #48	; 0x30
 80211e0:	f7fb f8a2 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211e4:	4621      	mov	r1, r4
 80211e6:	a80e      	add	r0, sp, #56	; 0x38
 80211e8:	f7fb f886 	bl	801c2f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211ec:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80211f0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80211f4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80211f8:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80211fc:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021200:	eb08 0401 	add.w	r4, r8, r1
 8021204:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021208:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8021384 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 802120c:	440a      	add	r2, r1
 802120e:	f8d8 0000 	ldr.w	r0, [r8]
 8021212:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021216:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802121a:	4413      	add	r3, r2
 802121c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021220:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8021224:	930a      	str	r3, [sp, #40]	; 0x28
 8021226:	6803      	ldr	r3, [r0, #0]
 8021228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802122c:	4798      	blx	r3
 802122e:	2801      	cmp	r0, #1
 8021230:	d11e      	bne.n	8021270 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8021232:	220b      	movs	r2, #11
 8021234:	9008      	str	r0, [sp, #32]
 8021236:	b2ad      	uxth	r5, r5
 8021238:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802123c:	9207      	str	r2, [sp, #28]
 802123e:	4621      	mov	r1, r4
 8021240:	f8b9 2000 	ldrh.w	r2, [r9]
 8021244:	9501      	str	r5, [sp, #4]
 8021246:	9206      	str	r2, [sp, #24]
 8021248:	2200      	movs	r2, #0
 802124a:	e9cd 7204 	strd	r7, r2, [sp, #16]
 802124e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021252:	9203      	str	r2, [sp, #12]
 8021254:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8021258:	9202      	str	r2, [sp, #8]
 802125a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802125e:	9200      	str	r2, [sp, #0]
 8021260:	4632      	mov	r2, r6
 8021262:	f8d8 0000 	ldr.w	r0, [r8]
 8021266:	f7f8 fb53 	bl	8019910 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802126a:	b011      	add	sp, #68	; 0x44
 802126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021270:	f8d8 0000 	ldr.w	r0, [r8]
 8021274:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8021278:	6803      	ldr	r3, [r0, #0]
 802127a:	6a1b      	ldr	r3, [r3, #32]
 802127c:	4798      	blx	r3
 802127e:	f8b9 3000 	ldrh.w	r3, [r9]
 8021282:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8021286:	f04f 0e00 	mov.w	lr, #0
 802128a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802128e:	fa1f f987 	uxth.w	r9, r7
 8021292:	fb01 2303 	mla	r3, r1, r3, r2
 8021296:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 802129a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802129e:	b289      	uxth	r1, r1
 80212a0:	4418      	add	r0, r3
 80212a2:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80212a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80212a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212aa:	459e      	cmp	lr, r3
 80212ac:	da5c      	bge.n	8021368 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 80212ae:	1cc3      	adds	r3, r0, #3
 80212b0:	46a2      	mov	sl, r4
 80212b2:	ebaa 0204 	sub.w	r2, sl, r4
 80212b6:	4295      	cmp	r5, r2
 80212b8:	dd46      	ble.n	8021348 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 80212ba:	f04f 0c03 	mov.w	ip, #3
 80212be:	f04f 0b04 	mov.w	fp, #4
 80212c2:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80212c6:	2fff      	cmp	r7, #255	; 0xff
 80212c8:	fb1c b202 	smlabb	r2, ip, r2, fp
 80212cc:	eb06 0c02 	add.w	ip, r6, r2
 80212d0:	f816 b002 	ldrb.w	fp, [r6, r2]
 80212d4:	d02f      	beq.n	8021336 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 80212d6:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80212da:	fb12 f201 	smulbb	r2, r2, r1
 80212de:	fb0b 2209 	mla	r2, fp, r9, r2
 80212e2:	b292      	uxth	r2, r2
 80212e4:	f102 0b01 	add.w	fp, r2, #1
 80212e8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80212ec:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 80212f0:	fb1b fb01 	smulbb	fp, fp, r1
 80212f4:	1212      	asrs	r2, r2, #8
 80212f6:	f803 2c03 	strb.w	r2, [r3, #-3]
 80212fa:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80212fe:	fb02 b209 	mla	r2, r2, r9, fp
 8021302:	b292      	uxth	r2, r2
 8021304:	f102 0b01 	add.w	fp, r2, #1
 8021308:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802130c:	1212      	asrs	r2, r2, #8
 802130e:	f803 2c02 	strb.w	r2, [r3, #-2]
 8021312:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8021316:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 802131a:	fb1c fc01 	smulbb	ip, ip, r1
 802131e:	fb02 c209 	mla	r2, r2, r9, ip
 8021322:	b292      	uxth	r2, r2
 8021324:	f102 0c01 	add.w	ip, r2, #1
 8021328:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802132c:	1212      	asrs	r2, r2, #8
 802132e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8021332:	3303      	adds	r3, #3
 8021334:	e7bd      	b.n	80212b2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 8021336:	f803 bc03 	strb.w	fp, [r3, #-3]
 802133a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802133e:	f803 2c02 	strb.w	r2, [r3, #-2]
 8021342:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8021346:	e7f2      	b.n	802132e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 8021348:	4b0d      	ldr	r3, [pc, #52]	; (8021380 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 802134a:	f10e 0e01 	add.w	lr, lr, #1
 802134e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021350:	881b      	ldrh	r3, [r3, #0]
 8021352:	1b5b      	subs	r3, r3, r5
 8021354:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021358:	4413      	add	r3, r2
 802135a:	4418      	add	r0, r3
 802135c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021360:	1b5b      	subs	r3, r3, r5
 8021362:	4443      	add	r3, r8
 8021364:	441c      	add	r4, r3
 8021366:	e79f      	b.n	80212a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8021368:	4b06      	ldr	r3, [pc, #24]	; (8021384 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 802136a:	6818      	ldr	r0, [r3, #0]
 802136c:	6803      	ldr	r3, [r0, #0]
 802136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021370:	4798      	blx	r3
 8021372:	e77a      	b.n	802126a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8021374:	0802d5af 	.word	0x0802d5af
 8021378:	0802dc66 	.word	0x0802dc66
 802137c:	0802d73f 	.word	0x0802d73f
 8021380:	2000bee8 	.word	0x2000bee8
 8021384:	2000bef0 	.word	0x2000bef0

08021388 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021388:	b570      	push	{r4, r5, r6, lr}
 802138a:	780d      	ldrb	r5, [r1, #0]
 802138c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8021390:	2d01      	cmp	r5, #1
 8021392:	d00d      	beq.n	80213b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8021394:	d307      	bcc.n	80213a6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8021396:	2d02      	cmp	r5, #2
 8021398:	d10f      	bne.n	80213ba <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 802139a:	4b08      	ldr	r3, [pc, #32]	; (80213bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 802139c:	215a      	movs	r1, #90	; 0x5a
 802139e:	4a08      	ldr	r2, [pc, #32]	; (80213c0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 80213a0:	4808      	ldr	r0, [pc, #32]	; (80213c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 80213a2:	f007 f92f 	bl	8028604 <__assert_func>
 80213a6:	9404      	str	r4, [sp, #16]
 80213a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80213ac:	f7ff be04 	b.w	8020fb8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80213b0:	9404      	str	r4, [sp, #16]
 80213b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80213b6:	f7ff bef7 	b.w	80211a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80213ba:	bd70      	pop	{r4, r5, r6, pc}
 80213bc:	0802d564 	.word	0x0802d564
 80213c0:	0802dbe4 	.word	0x0802dbe4
 80213c4:	0802d73f 	.word	0x0802d73f

080213c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80213c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213cc:	b08b      	sub	sp, #44	; 0x2c
 80213ce:	460c      	mov	r4, r1
 80213d0:	4680      	mov	r8, r0
 80213d2:	469a      	mov	sl, r3
 80213d4:	6808      	ldr	r0, [r1, #0]
 80213d6:	ab06      	add	r3, sp, #24
 80213d8:	6849      	ldr	r1, [r1, #4]
 80213da:	c303      	stmia	r3!, {r0, r1}
 80213dc:	6810      	ldr	r0, [r2, #0]
 80213de:	ab08      	add	r3, sp, #32
 80213e0:	6851      	ldr	r1, [r2, #4]
 80213e2:	c303      	stmia	r3!, {r0, r1}
 80213e4:	a806      	add	r0, sp, #24
 80213e6:	f7fa ff9f 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80213ea:	4621      	mov	r1, r4
 80213ec:	a808      	add	r0, sp, #32
 80213ee:	4c61      	ldr	r4, [pc, #388]	; (8021574 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80213f0:	f7fa ff82 	bl	801c2f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80213f4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80213f8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80213fc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021400:	6820      	ldr	r0, [r4, #0]
 8021402:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021406:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 802140a:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 802140e:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8021412:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021416:	440a      	add	r2, r1
 8021418:	f8ad 2020 	strh.w	r2, [sp, #32]
 802141c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021420:	4413      	add	r3, r2
 8021422:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021426:	6803      	ldr	r3, [r0, #0]
 8021428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802142a:	4798      	blx	r3
 802142c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021430:	d118      	bne.n	8021464 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8021432:	f010 0f20 	tst.w	r0, #32
 8021436:	6820      	ldr	r0, [r4, #0]
 8021438:	d017      	beq.n	802146a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 802143a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802143e:	b2bf      	uxth	r7, r7
 8021440:	6801      	ldr	r1, [r0, #0]
 8021442:	9402      	str	r4, [sp, #8]
 8021444:	fa1f f489 	uxth.w	r4, r9
 8021448:	f8cd a00c 	str.w	sl, [sp, #12]
 802144c:	9401      	str	r4, [sp, #4]
 802144e:	9700      	str	r7, [sp, #0]
 8021450:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021454:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8021456:	4641      	mov	r1, r8
 8021458:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802145c:	47a0      	blx	r4
 802145e:	b00b      	add	sp, #44	; 0x2c
 8021460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021464:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021468:	e7e5      	b.n	8021436 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802146a:	6803      	ldr	r3, [r0, #0]
 802146c:	6a1b      	ldr	r3, [r3, #32]
 802146e:	4798      	blx	r3
 8021470:	4b41      	ldr	r3, [pc, #260]	; (8021578 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8021472:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021476:	f04f 0c00 	mov.w	ip, #0
 802147a:	881a      	ldrh	r2, [r3, #0]
 802147c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8021480:	fb04 1202 	mla	r2, r4, r2, r1
 8021484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021488:	4410      	add	r0, r2
 802148a:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 802148e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8021492:	0092      	lsls	r2, r2, #2
 8021494:	9105      	str	r1, [sp, #20]
 8021496:	9204      	str	r2, [sp, #16]
 8021498:	45cc      	cmp	ip, r9
 802149a:	da65      	bge.n	8021568 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 802149c:	1cc4      	adds	r4, r0, #3
 802149e:	f108 0504 	add.w	r5, r8, #4
 80214a2:	f04f 0e00 	mov.w	lr, #0
 80214a6:	45be      	cmp	lr, r7
 80214a8:	da4d      	bge.n	8021546 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 80214aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80214ae:	b181      	cbz	r1, 80214d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80214b0:	29ff      	cmp	r1, #255	; 0xff
 80214b2:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 80214b6:	d111      	bne.n	80214dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 80214b8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80214bc:	d10e      	bne.n	80214dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 80214be:	f804 bc03 	strb.w	fp, [r4, #-3]
 80214c2:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 80214c6:	f804 2c02 	strb.w	r2, [r4, #-2]
 80214ca:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80214ce:	f804 2c01 	strb.w	r2, [r4, #-1]
 80214d2:	f10e 0e01 	add.w	lr, lr, #1
 80214d6:	3403      	adds	r4, #3
 80214d8:	3504      	adds	r5, #4
 80214da:	e7e4      	b.n	80214a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 80214dc:	fb0a f101 	mul.w	r1, sl, r1
 80214e0:	1c4a      	adds	r2, r1, #1
 80214e2:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80214e6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80214ea:	1212      	asrs	r2, r2, #8
 80214ec:	b296      	uxth	r6, r2
 80214ee:	43d2      	mvns	r2, r2
 80214f0:	fb1b fb06 	smulbb	fp, fp, r6
 80214f4:	b2d2      	uxtb	r2, r2
 80214f6:	fb01 b102 	mla	r1, r1, r2, fp
 80214fa:	b289      	uxth	r1, r1
 80214fc:	f101 0b01 	add.w	fp, r1, #1
 8021500:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021504:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 8021508:	fb1b fb02 	smulbb	fp, fp, r2
 802150c:	1209      	asrs	r1, r1, #8
 802150e:	f804 1c03 	strb.w	r1, [r4, #-3]
 8021512:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 8021516:	fb01 b106 	mla	r1, r1, r6, fp
 802151a:	b289      	uxth	r1, r1
 802151c:	f101 0b01 	add.w	fp, r1, #1
 8021520:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021524:	1209      	asrs	r1, r1, #8
 8021526:	f804 1c02 	strb.w	r1, [r4, #-2]
 802152a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802152e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8021532:	fb11 f202 	smulbb	r2, r1, r2
 8021536:	fb0b 2206 	mla	r2, fp, r6, r2
 802153a:	b292      	uxth	r2, r2
 802153c:	1c56      	adds	r6, r2, #1
 802153e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021542:	1212      	asrs	r2, r2, #8
 8021544:	e7c3      	b.n	80214ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8021546:	881a      	ldrh	r2, [r3, #0]
 8021548:	f10c 0c01 	add.w	ip, ip, #1
 802154c:	9905      	ldr	r1, [sp, #20]
 802154e:	1bd2      	subs	r2, r2, r7
 8021550:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021554:	440a      	add	r2, r1
 8021556:	9904      	ldr	r1, [sp, #16]
 8021558:	4410      	add	r0, r2
 802155a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802155e:	1bd2      	subs	r2, r2, r7
 8021560:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8021564:	4490      	add	r8, r2
 8021566:	e797      	b.n	8021498 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8021568:	4b02      	ldr	r3, [pc, #8]	; (8021574 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 802156a:	6818      	ldr	r0, [r3, #0]
 802156c:	6803      	ldr	r3, [r0, #0]
 802156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021570:	4798      	blx	r3
 8021572:	e774      	b.n	802145e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8021574:	2000bef0 	.word	0x2000bef0
 8021578:	2000bee8 	.word	0x2000bee8

0802157c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802157c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021580:	b085      	sub	sp, #20
 8021582:	4606      	mov	r6, r0
 8021584:	460c      	mov	r4, r1
 8021586:	4691      	mov	r9, r2
 8021588:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802158c:	4698      	mov	r8, r3
 802158e:	b385      	cbz	r5, 80215f2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8021590:	4608      	mov	r0, r1
 8021592:	f7fd fae5 	bl	801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021596:	4607      	mov	r7, r0
 8021598:	4620      	mov	r0, r4
 802159a:	f7fd fb1b 	bl	801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802159e:	f8ad 000e 	strh.w	r0, [sp, #14]
 80215a2:	4620      	mov	r0, r4
 80215a4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80215a8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80215ac:	f8ad 700c 	strh.w	r7, [sp, #12]
 80215b0:	f7fd fc62 	bl	801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80215b4:	2801      	cmp	r0, #1
 80215b6:	d00f      	beq.n	80215d8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80215b8:	4620      	mov	r0, r4
 80215ba:	f7fd fc5d 	bl	801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80215be:	2802      	cmp	r0, #2
 80215c0:	d00a      	beq.n	80215d8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80215c2:	4620      	mov	r0, r4
 80215c4:	f7fd fc58 	bl	801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80215c8:	280b      	cmp	r0, #11
 80215ca:	d005      	beq.n	80215d8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80215cc:	4b1b      	ldr	r3, [pc, #108]	; (802163c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 80215ce:	2142      	movs	r1, #66	; 0x42
 80215d0:	4a1b      	ldr	r2, [pc, #108]	; (8021640 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 80215d2:	481c      	ldr	r0, [pc, #112]	; (8021644 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 80215d4:	f007 f816 	bl	8028604 <__assert_func>
 80215d8:	4620      	mov	r0, r4
 80215da:	f7fd fc4d 	bl	801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80215de:	2802      	cmp	r0, #2
 80215e0:	4620      	mov	r0, r4
 80215e2:	d109      	bne.n	80215f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 80215e4:	f7fd fbc4 	bl	801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>
 80215e8:	462b      	mov	r3, r5
 80215ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80215ec:	a902      	add	r1, sp, #8
 80215ee:	f7ff feeb 	bl	80213c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80215f2:	b005      	add	sp, #20
 80215f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80215f8:	f7fd fc3e 	bl	801ee78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80215fc:	280b      	cmp	r0, #11
 80215fe:	d10e      	bne.n	802161e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8021600:	4620      	mov	r0, r4
 8021602:	f7fd fbb5 	bl	801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021606:	4606      	mov	r6, r0
 8021608:	4620      	mov	r0, r4
 802160a:	f7fd fbe3 	bl	801edd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802160e:	9500      	str	r5, [sp, #0]
 8021610:	4601      	mov	r1, r0
 8021612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021614:	aa02      	add	r2, sp, #8
 8021616:	4630      	mov	r0, r6
 8021618:	f7ff feb6 	bl	8021388 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802161c:	e7e9      	b.n	80215f2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 802161e:	6833      	ldr	r3, [r6, #0]
 8021620:	4620      	mov	r0, r4
 8021622:	691f      	ldr	r7, [r3, #16]
 8021624:	f7fd fba4 	bl	801ed70 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021628:	2300      	movs	r3, #0
 802162a:	4601      	mov	r1, r0
 802162c:	aa02      	add	r2, sp, #8
 802162e:	4630      	mov	r0, r6
 8021630:	e9cd 5300 	strd	r5, r3, [sp]
 8021634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021636:	47b8      	blx	r7
 8021638:	e7db      	b.n	80215f2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 802163a:	bf00      	nop
 802163c:	0802d5fd 	.word	0x0802d5fd
 8021640:	0802dcef 	.word	0x0802dcef
 8021644:	0802d73f 	.word	0x0802d73f

08021648 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021648:	b570      	push	{r4, r5, r6, lr}
 802164a:	9d04      	ldr	r5, [sp, #16]
 802164c:	460c      	mov	r4, r1
 802164e:	4619      	mov	r1, r3
 8021650:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021654:	2a0c      	cmp	r2, #12
 8021656:	d826      	bhi.n	80216a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8021658:	e8df f002 	tbb	[pc, r2]
 802165c:	200e1407 	.word	0x200e1407
 8021660:	20202020 	.word	0x20202020
 8021664:	20202020 	.word	0x20202020
 8021668:	20          	.byte	0x20
 8021669:	00          	.byte	0x00
 802166a:	4b0f      	ldr	r3, [pc, #60]	; (80216a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 802166c:	f240 117f 	movw	r1, #383	; 0x17f
 8021670:	4a0e      	ldr	r2, [pc, #56]	; (80216ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021672:	480f      	ldr	r0, [pc, #60]	; (80216b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8021674:	f006 ffc6 	bl	8028604 <__assert_func>
 8021678:	462a      	mov	r2, r5
 802167a:	4620      	mov	r0, r4
 802167c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021680:	f7ff bea2 	b.w	80213c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021684:	6802      	ldr	r2, [r0, #0]
 8021686:	2600      	movs	r6, #0
 8021688:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802168c:	6916      	ldr	r6, [r2, #16]
 802168e:	462b      	mov	r3, r5
 8021690:	460a      	mov	r2, r1
 8021692:	4621      	mov	r1, r4
 8021694:	46b4      	mov	ip, r6
 8021696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802169a:	4760      	bx	ip
 802169c:	4b05      	ldr	r3, [pc, #20]	; (80216b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 802169e:	f240 1191 	movw	r1, #401	; 0x191
 80216a2:	4a02      	ldr	r2, [pc, #8]	; (80216ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80216a4:	e7e5      	b.n	8021672 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 80216a6:	bd70      	pop	{r4, r5, r6, pc}
 80216a8:	0802d918 	.word	0x0802d918
 80216ac:	0802dfd7 	.word	0x0802dfd7
 80216b0:	0802d73f 	.word	0x0802d73f
 80216b4:	0802d959 	.word	0x0802d959

080216b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80216b8:	b158      	cbz	r0, 80216d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80216ba:	2902      	cmp	r1, #2
 80216bc:	d00f      	beq.n	80216de <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80216be:	2903      	cmp	r1, #3
 80216c0:	d010      	beq.n	80216e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80216c2:	2901      	cmp	r1, #1
 80216c4:	d101      	bne.n	80216ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80216c6:	2001      	movs	r0, #1
 80216c8:	4770      	bx	lr
 80216ca:	4b08      	ldr	r3, [pc, #32]	; (80216ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80216cc:	8819      	ldrh	r1, [r3, #0]
 80216ce:	4248      	negs	r0, r1
 80216d0:	4770      	bx	lr
 80216d2:	2902      	cmp	r1, #2
 80216d4:	d006      	beq.n	80216e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80216d6:	2903      	cmp	r1, #3
 80216d8:	d0f7      	beq.n	80216ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80216da:	2901      	cmp	r1, #1
 80216dc:	d1f3      	bne.n	80216c6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80216de:	4b03      	ldr	r3, [pc, #12]	; (80216ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80216e0:	8818      	ldrh	r0, [r3, #0]
 80216e2:	4770      	bx	lr
 80216e4:	f04f 30ff 	mov.w	r0, #4294967295
 80216e8:	4770      	bx	lr
 80216ea:	bf00      	nop
 80216ec:	2000bee8 	.word	0x2000bee8

080216f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80216f0:	b170      	cbz	r0, 8021710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80216f2:	2902      	cmp	r1, #2
 80216f4:	d012      	beq.n	802171c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80216f6:	2903      	cmp	r1, #3
 80216f8:	d006      	beq.n	8021708 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80216fa:	2901      	cmp	r1, #1
 80216fc:	d001      	beq.n	8021702 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80216fe:	2001      	movs	r0, #1
 8021700:	4770      	bx	lr
 8021702:	4b08      	ldr	r3, [pc, #32]	; (8021724 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8021704:	8818      	ldrh	r0, [r3, #0]
 8021706:	4770      	bx	lr
 8021708:	4b06      	ldr	r3, [pc, #24]	; (8021724 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 802170a:	8818      	ldrh	r0, [r3, #0]
 802170c:	4240      	negs	r0, r0
 802170e:	4770      	bx	lr
 8021710:	2902      	cmp	r1, #2
 8021712:	d0f9      	beq.n	8021708 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8021714:	2903      	cmp	r1, #3
 8021716:	d0f2      	beq.n	80216fe <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8021718:	2901      	cmp	r1, #1
 802171a:	d1f2      	bne.n	8021702 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 802171c:	f04f 30ff 	mov.w	r0, #4294967295
 8021720:	4770      	bx	lr
 8021722:	bf00      	nop
 8021724:	2000bee8 	.word	0x2000bee8

08021728 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802172c:	b095      	sub	sp, #84	; 0x54
 802172e:	9109      	str	r1, [sp, #36]	; 0x24
 8021730:	a910      	add	r1, sp, #64	; 0x40
 8021732:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 8021736:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 802173a:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 802173e:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 8021742:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 8021746:	e881 000c 	stmia.w	r1, {r2, r3}
 802174a:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 802174e:	9306      	str	r3, [sp, #24]
 8021750:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8021754:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 8021758:	930e      	str	r3, [sp, #56]	; 0x38
 802175a:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 802175e:	798f      	ldrb	r7, [r1, #6]
 8021760:	930a      	str	r3, [sp, #40]	; 0x28
 8021762:	7b4b      	ldrb	r3, [r1, #13]
 8021764:	0158      	lsls	r0, r3, #5
 8021766:	f400 7080 	and.w	r0, r0, #256	; 0x100
 802176a:	4338      	orrs	r0, r7
 802176c:	9008      	str	r0, [sp, #32]
 802176e:	f000 8174 	beq.w	8021a5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021772:	011b      	lsls	r3, r3, #4
 8021774:	79c8      	ldrb	r0, [r1, #7]
 8021776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802177a:	4303      	orrs	r3, r0
 802177c:	9307      	str	r3, [sp, #28]
 802177e:	f000 816c 	beq.w	8021a5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021782:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021786:	b29b      	uxth	r3, r3
 8021788:	2e00      	cmp	r6, #0
 802178a:	f000 8112 	beq.w	80219b2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 802178e:	1af6      	subs	r6, r6, r3
 8021790:	b2b6      	uxth	r6, r6
 8021792:	0433      	lsls	r3, r6, #16
 8021794:	d502      	bpl.n	802179c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021796:	1bad      	subs	r5, r5, r6
 8021798:	2600      	movs	r6, #0
 802179a:	b22d      	sxth	r5, r5
 802179c:	f9b2 1000 	ldrsh.w	r1, [r2]
 80217a0:	a810      	add	r0, sp, #64	; 0x40
 80217a2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80217a6:	428d      	cmp	r5, r1
 80217a8:	b28b      	uxth	r3, r1
 80217aa:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 80217ae:	bfbf      	itttt	lt
 80217b0:	18f6      	addlt	r6, r6, r3
 80217b2:	1b75      	sublt	r5, r6, r5
 80217b4:	b2ae      	uxthlt	r6, r5
 80217b6:	460d      	movlt	r5, r1
 80217b8:	8891      	ldrh	r1, [r2, #4]
 80217ba:	440b      	add	r3, r1
 80217bc:	4629      	mov	r1, r5
 80217be:	b21b      	sxth	r3, r3
 80217c0:	930d      	str	r3, [sp, #52]	; 0x34
 80217c2:	88d3      	ldrh	r3, [r2, #6]
 80217c4:	9a06      	ldr	r2, [sp, #24]
 80217c6:	449a      	add	sl, r3
 80217c8:	fa0f f38a 	sxth.w	r3, sl
 80217cc:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 80217d0:	930c      	str	r3, [sp, #48]	; 0x30
 80217d2:	4bb8      	ldr	r3, [pc, #736]	; (8021ab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80217d4:	f893 b000 	ldrb.w	fp, [r3]
 80217d8:	f10b 3cff 	add.w	ip, fp, #4294967295
 80217dc:	f1dc 0300 	rsbs	r3, ip, #0
 80217e0:	eb43 030c 	adc.w	r3, r3, ip
 80217e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80217e6:	464b      	mov	r3, r9
 80217e8:	f7fa fc78 	bl	801c0dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80217ec:	4629      	mov	r1, r5
 80217ee:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 80217f2:	464b      	mov	r3, r9
 80217f4:	9a06      	ldr	r2, [sp, #24]
 80217f6:	a810      	add	r0, sp, #64	; 0x40
 80217f8:	f7fa fc88 	bl	801c10c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80217fc:	a914      	add	r1, sp, #80	; 0x50
 80217fe:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021802:	a813      	add	r0, sp, #76	; 0x4c
 8021804:	f7fa fd62 	bl	801c2cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021808:	f1b9 0f00 	cmp.w	r9, #0
 802180c:	f040 80d4 	bne.w	80219b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 8021810:	f1bb 0f01 	cmp.w	fp, #1
 8021814:	f040 80d8 	bne.w	80219c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8021818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802181a:	2b00      	cmp	r3, #0
 802181c:	f040 8122 	bne.w	8021a64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 8021820:	4ba5      	ldr	r3, [pc, #660]	; (8021ab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8021822:	6818      	ldr	r0, [r3, #0]
 8021824:	6803      	ldr	r3, [r0, #0]
 8021826:	6a1b      	ldr	r3, [r3, #32]
 8021828:	4798      	blx	r3
 802182a:	4aa4      	ldr	r2, [pc, #656]	; (8021abc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 802182c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021830:	8811      	ldrh	r1, [r2, #0]
 8021832:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021836:	fb01 2303 	mla	r3, r1, r3, r2
 802183a:	2201      	movs	r2, #1
 802183c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021840:	4590      	cmp	r8, r2
 8021842:	4403      	add	r3, r0
 8021844:	9307      	str	r3, [sp, #28]
 8021846:	fa02 f308 	lsl.w	r3, r2, r8
 802184a:	f103 33ff 	add.w	r3, r3, #4294967295
 802184e:	b2db      	uxtb	r3, r3
 8021850:	930f      	str	r3, [sp, #60]	; 0x3c
 8021852:	f000 8109 	beq.w	8021a68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 8021856:	f1b8 0f02 	cmp.w	r8, #2
 802185a:	f000 813e 	beq.w	8021ada <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 802185e:	f1b8 0f04 	cmp.w	r8, #4
 8021862:	f000 8132 	beq.w	8021aca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8021866:	b906      	cbnz	r6, 802186a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 8021868:	b174      	cbz	r4, 8021888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 802186a:	fb17 6304 	smlabb	r3, r7, r4, r6
 802186e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021870:	ebaa 0a04 	sub.w	sl, sl, r4
 8021874:	fb13 f308 	smulbb	r3, r3, r8
 8021878:	fa1f fa8a 	uxth.w	sl, sl
 802187c:	b29b      	uxth	r3, r3
 802187e:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 8021882:	f003 0407 	and.w	r4, r3, #7
 8021886:	9124      	str	r1, [sp, #144]	; 0x90
 8021888:	4649      	mov	r1, r9
 802188a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802188c:	f7ff ff14 	bl	80216b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8021890:	4649      	mov	r1, r9
 8021892:	4683      	mov	fp, r0
 8021894:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021896:	f7ff ff2b 	bl	80216f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802189a:	9906      	ldr	r1, [sp, #24]
 802189c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802189e:	1bad      	subs	r5, r5, r6
 80218a0:	1a5b      	subs	r3, r3, r1
 80218a2:	459a      	cmp	sl, r3
 80218a4:	bfa8      	it	ge
 80218a6:	469a      	movge	sl, r3
 80218a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80218aa:	1b5d      	subs	r5, r3, r5
 80218ac:	9b08      	ldr	r3, [sp, #32]
 80218ae:	429d      	cmp	r5, r3
 80218b0:	bfd4      	ite	le
 80218b2:	ebc6 0605 	rsble	r6, r6, r5
 80218b6:	ebc6 0603 	rsbgt	r6, r6, r3
 80218ba:	1bbf      	subs	r7, r7, r6
 80218bc:	fb0b 0016 	mls	r0, fp, r6, r0
 80218c0:	fb08 f307 	mul.w	r3, r8, r7
 80218c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80218c8:	9308      	str	r3, [sp, #32]
 80218ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80218cc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80218d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80218d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80218d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80218d8:	930c      	str	r3, [sp, #48]	; 0x30
 80218da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80218dc:	b2db      	uxtb	r3, r3
 80218de:	930d      	str	r3, [sp, #52]	; 0x34
 80218e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80218e2:	7819      	ldrb	r1, [r3, #0]
 80218e4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80218e8:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 80218ec:	4121      	asrs	r1, r4
 80218ee:	9306      	str	r3, [sp, #24]
 80218f0:	fb03 0b0b 	mla	fp, r3, fp, r0
 80218f4:	b2c9      	uxtb	r1, r1
 80218f6:	f1ba 0f00 	cmp.w	sl, #0
 80218fa:	f340 80d1 	ble.w	8021aa0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80218fe:	46b6      	mov	lr, r6
 8021900:	9807      	ldr	r0, [sp, #28]
 8021902:	f1be 0f00 	cmp.w	lr, #0
 8021906:	f340 80b8 	ble.w	8021a7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 802190a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802190c:	400b      	ands	r3, r1
 802190e:	d03e      	beq.n	802198e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8021910:	fb13 f302 	smulbb	r3, r3, r2
 8021914:	2bfe      	cmp	r3, #254	; 0xfe
 8021916:	dd03      	ble.n	8021920 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8021918:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802191a:	2dff      	cmp	r5, #255	; 0xff
 802191c:	f000 80a6 	beq.w	8021a6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8021920:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021922:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021924:	fb15 f303 	smulbb	r3, r5, r3
 8021928:	b29b      	uxth	r3, r3
 802192a:	1c5d      	adds	r5, r3, #1
 802192c:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8021930:	7805      	ldrb	r5, [r0, #0]
 8021932:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021936:	fa1f fc83 	uxth.w	ip, r3
 802193a:	43db      	mvns	r3, r3
 802193c:	fb17 f90c 	smulbb	r9, r7, ip
 8021940:	b2db      	uxtb	r3, r3
 8021942:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021944:	fb05 9503 	mla	r5, r5, r3, r9
 8021948:	b2ad      	uxth	r5, r5
 802194a:	f105 0901 	add.w	r9, r5, #1
 802194e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021952:	fb17 f90c 	smulbb	r9, r7, ip
 8021956:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021958:	122d      	asrs	r5, r5, #8
 802195a:	fb17 fc0c 	smulbb	ip, r7, ip
 802195e:	7005      	strb	r5, [r0, #0]
 8021960:	7845      	ldrb	r5, [r0, #1]
 8021962:	fb05 9503 	mla	r5, r5, r3, r9
 8021966:	b2ad      	uxth	r5, r5
 8021968:	f105 0901 	add.w	r9, r5, #1
 802196c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021970:	122d      	asrs	r5, r5, #8
 8021972:	7045      	strb	r5, [r0, #1]
 8021974:	7885      	ldrb	r5, [r0, #2]
 8021976:	fb05 cc03 	mla	ip, r5, r3, ip
 802197a:	fa1f fc8c 	uxth.w	ip, ip
 802197e:	f10c 0301 	add.w	r3, ip, #1
 8021982:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021986:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802198a:	f880 c002 	strb.w	ip, [r0, #2]
 802198e:	4444      	add	r4, r8
 8021990:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021994:	b2a4      	uxth	r4, r4
 8021996:	2c07      	cmp	r4, #7
 8021998:	bf89      	itett	hi
 802199a:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 802199c:	fa41 f108 	asrls.w	r1, r1, r8
 80219a0:	2400      	movhi	r4, #0
 80219a2:	7859      	ldrbhi	r1, [r3, #1]
 80219a4:	bf8a      	itet	hi
 80219a6:	3301      	addhi	r3, #1
 80219a8:	b2c9      	uxtbls	r1, r1
 80219aa:	9324      	strhi	r3, [sp, #144]	; 0x90
 80219ac:	9b06      	ldr	r3, [sp, #24]
 80219ae:	4418      	add	r0, r3
 80219b0:	e7a7      	b.n	8021902 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 80219b2:	441d      	add	r5, r3
 80219b4:	b22d      	sxth	r5, r5
 80219b6:	e6f1      	b.n	802179c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80219b8:	f1b9 0f01 	cmp.w	r9, #1
 80219bc:	f47f af2c 	bne.w	8021818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80219c0:	f1bb 0f01 	cmp.w	fp, #1
 80219c4:	f47f af28 	bne.w	8021818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80219c8:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8021ab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80219cc:	f8db 0000 	ldr.w	r0, [fp]
 80219d0:	6803      	ldr	r3, [r0, #0]
 80219d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219d4:	4798      	blx	r3
 80219d6:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 80219da:	465a      	mov	r2, fp
 80219dc:	d006      	beq.n	80219ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 80219de:	f1b8 0f04 	cmp.w	r8, #4
 80219e2:	d13d      	bne.n	8021a60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 80219e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80219e6:	3300      	adds	r3, #0
 80219e8:	bf18      	it	ne
 80219ea:	2301      	movne	r3, #1
 80219ec:	05c0      	lsls	r0, r0, #23
 80219ee:	d567      	bpl.n	8021ac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80219f0:	f1b8 0f08 	cmp.w	r8, #8
 80219f4:	d164      	bne.n	8021ac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	bf0c      	ite	eq
 80219fa:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80219fe:	2180      	movne	r1, #128	; 0x80
 8021a00:	2e00      	cmp	r6, #0
 8021a02:	f47f af09 	bne.w	8021818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021a06:	2c00      	cmp	r4, #0
 8021a08:	f47f af06 	bne.w	8021818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021a0c:	9b08      	ldr	r3, [sp, #32]
 8021a0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021a10:	442b      	add	r3, r5
 8021a12:	4283      	cmp	r3, r0
 8021a14:	f73f af00 	bgt.w	8021818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021a18:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8021a1c:	4403      	add	r3, r0
 8021a1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021a20:	4283      	cmp	r3, r0
 8021a22:	f73f aef9 	bgt.w	8021818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021a26:	f1b8 0f08 	cmp.w	r8, #8
 8021a2a:	6810      	ldr	r0, [r2, #0]
 8021a2c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8021a30:	bf18      	it	ne
 8021a32:	3701      	addne	r7, #1
 8021a34:	6804      	ldr	r4, [r0, #0]
 8021a36:	9105      	str	r1, [sp, #20]
 8021a38:	bf18      	it	ne
 8021a3a:	f027 0701 	bicne.w	r7, r7, #1
 8021a3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021a40:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8021a44:	bf18      	it	ne
 8021a46:	b2bf      	uxthne	r7, r7
 8021a48:	9104      	str	r1, [sp, #16]
 8021a4a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021a4c:	e9cd 7a00 	strd	r7, sl, [sp]
 8021a50:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8021a54:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021a56:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8021a58:	47a0      	blx	r4
 8021a5a:	b015      	add	sp, #84	; 0x54
 8021a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a60:	2300      	movs	r3, #0
 8021a62:	e7c3      	b.n	80219ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8021a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a66:	e6e0      	b.n	802182a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8021a68:	22ff      	movs	r2, #255	; 0xff
 8021a6a:	e6fc      	b.n	8021866 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a6e:	7003      	strb	r3, [r0, #0]
 8021a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a72:	7043      	strb	r3, [r0, #1]
 8021a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a76:	7083      	strb	r3, [r0, #2]
 8021a78:	e789      	b.n	802198e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8021a7a:	9b08      	ldr	r3, [sp, #32]
 8021a7c:	b153      	cbz	r3, 8021a94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 8021a7e:	441c      	add	r4, r3
 8021a80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a82:	b2a4      	uxth	r4, r4
 8021a84:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8021a88:	f004 0407 	and.w	r4, r4, #7
 8021a8c:	7819      	ldrb	r1, [r3, #0]
 8021a8e:	9324      	str	r3, [sp, #144]	; 0x90
 8021a90:	4121      	asrs	r1, r4
 8021a92:	b2c9      	uxtb	r1, r1
 8021a94:	9b07      	ldr	r3, [sp, #28]
 8021a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021a9a:	445b      	add	r3, fp
 8021a9c:	9307      	str	r3, [sp, #28]
 8021a9e:	e72a      	b.n	80218f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 8021aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d1d9      	bne.n	8021a5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021aa6:	4b04      	ldr	r3, [pc, #16]	; (8021ab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8021aa8:	6818      	ldr	r0, [r3, #0]
 8021aaa:	6803      	ldr	r3, [r0, #0]
 8021aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021aae:	4798      	blx	r3
 8021ab0:	e7d3      	b.n	8021a5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021ab2:	bf00      	nop
 8021ab4:	2000bee6 	.word	0x2000bee6
 8021ab8:	2000bef0 	.word	0x2000bef0
 8021abc:	2000bee8 	.word	0x2000bee8
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	f43f aea9 	beq.w	8021818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021ac6:	2180      	movs	r1, #128	; 0x80
 8021ac8:	e79a      	b.n	8021a00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8021aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021acc:	b11b      	cbz	r3, 8021ad6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8021ace:	07fb      	lsls	r3, r7, #31
 8021ad0:	d501      	bpl.n	8021ad6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8021ad2:	3701      	adds	r7, #1
 8021ad4:	b2bf      	uxth	r7, r7
 8021ad6:	2211      	movs	r2, #17
 8021ad8:	e6c5      	b.n	8021866 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021ada:	2255      	movs	r2, #85	; 0x55
 8021adc:	e6c3      	b.n	8021866 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021ade:	bf00      	nop

08021ae0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021ae0:	b538      	push	{r3, r4, r5, lr}
 8021ae2:	4c15      	ldr	r4, [pc, #84]	; (8021b38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021ae4:	4605      	mov	r5, r0
 8021ae6:	7823      	ldrb	r3, [r4, #0]
 8021ae8:	f3bf 8f5b 	dmb	ish
 8021aec:	07da      	lsls	r2, r3, #31
 8021aee:	d40b      	bmi.n	8021b08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021af0:	4620      	mov	r0, r4
 8021af2:	f006 fd5b 	bl	80285ac <__cxa_guard_acquire>
 8021af6:	b138      	cbz	r0, 8021b08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021af8:	4620      	mov	r0, r4
 8021afa:	f006 fd63 	bl	80285c4 <__cxa_guard_release>
 8021afe:	4a0f      	ldr	r2, [pc, #60]	; (8021b3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021b00:	490f      	ldr	r1, [pc, #60]	; (8021b40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021b02:	4810      	ldr	r0, [pc, #64]	; (8021b44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021b04:	f006 fd4b 	bl	802859e <__aeabi_atexit>
 8021b08:	4c0f      	ldr	r4, [pc, #60]	; (8021b48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021b0a:	7823      	ldrb	r3, [r4, #0]
 8021b0c:	f3bf 8f5b 	dmb	ish
 8021b10:	07db      	lsls	r3, r3, #31
 8021b12:	d40b      	bmi.n	8021b2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021b14:	4620      	mov	r0, r4
 8021b16:	f006 fd49 	bl	80285ac <__cxa_guard_acquire>
 8021b1a:	b138      	cbz	r0, 8021b2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021b1c:	4620      	mov	r0, r4
 8021b1e:	f006 fd51 	bl	80285c4 <__cxa_guard_release>
 8021b22:	4a06      	ldr	r2, [pc, #24]	; (8021b3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021b24:	4909      	ldr	r1, [pc, #36]	; (8021b4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021b26:	480a      	ldr	r0, [pc, #40]	; (8021b50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021b28:	f006 fd39 	bl	802859e <__aeabi_atexit>
 8021b2c:	4b05      	ldr	r3, [pc, #20]	; (8021b44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021b2e:	612b      	str	r3, [r5, #16]
 8021b30:	4b07      	ldr	r3, [pc, #28]	; (8021b50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021b32:	616b      	str	r3, [r5, #20]
 8021b34:	bd38      	pop	{r3, r4, r5, pc}
 8021b36:	bf00      	nop
 8021b38:	2000bffc 	.word	0x2000bffc
 8021b3c:	20000000 	.word	0x20000000
 8021b40:	08020717 	.word	0x08020717
 8021b44:	200000c4 	.word	0x200000c4
 8021b48:	2000c000 	.word	0x2000c000
 8021b4c:	08020715 	.word	0x08020715
 8021b50:	200000c8 	.word	0x200000c8

08021b54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021b54:	b538      	push	{r3, r4, r5, lr}
 8021b56:	4c15      	ldr	r4, [pc, #84]	; (8021bac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021b58:	4605      	mov	r5, r0
 8021b5a:	7823      	ldrb	r3, [r4, #0]
 8021b5c:	f3bf 8f5b 	dmb	ish
 8021b60:	07da      	lsls	r2, r3, #31
 8021b62:	d40b      	bmi.n	8021b7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021b64:	4620      	mov	r0, r4
 8021b66:	f006 fd21 	bl	80285ac <__cxa_guard_acquire>
 8021b6a:	b138      	cbz	r0, 8021b7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021b6c:	4620      	mov	r0, r4
 8021b6e:	f006 fd29 	bl	80285c4 <__cxa_guard_release>
 8021b72:	4a0f      	ldr	r2, [pc, #60]	; (8021bb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021b74:	490f      	ldr	r1, [pc, #60]	; (8021bb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021b76:	4810      	ldr	r0, [pc, #64]	; (8021bb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021b78:	f006 fd11 	bl	802859e <__aeabi_atexit>
 8021b7c:	4c0f      	ldr	r4, [pc, #60]	; (8021bbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021b7e:	7823      	ldrb	r3, [r4, #0]
 8021b80:	f3bf 8f5b 	dmb	ish
 8021b84:	07db      	lsls	r3, r3, #31
 8021b86:	d40b      	bmi.n	8021ba0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021b88:	4620      	mov	r0, r4
 8021b8a:	f006 fd0f 	bl	80285ac <__cxa_guard_acquire>
 8021b8e:	b138      	cbz	r0, 8021ba0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021b90:	4620      	mov	r0, r4
 8021b92:	f006 fd17 	bl	80285c4 <__cxa_guard_release>
 8021b96:	4a06      	ldr	r2, [pc, #24]	; (8021bb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021b98:	4909      	ldr	r1, [pc, #36]	; (8021bc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021b9a:	480a      	ldr	r0, [pc, #40]	; (8021bc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021b9c:	f006 fcff 	bl	802859e <__aeabi_atexit>
 8021ba0:	4b05      	ldr	r3, [pc, #20]	; (8021bb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021ba2:	60ab      	str	r3, [r5, #8]
 8021ba4:	4b07      	ldr	r3, [pc, #28]	; (8021bc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021ba6:	60eb      	str	r3, [r5, #12]
 8021ba8:	bd38      	pop	{r3, r4, r5, pc}
 8021baa:	bf00      	nop
 8021bac:	2000bfdc 	.word	0x2000bfdc
 8021bb0:	20000000 	.word	0x20000000
 8021bb4:	0802071b 	.word	0x0802071b
 8021bb8:	200000a4 	.word	0x200000a4
 8021bbc:	2000bfe0 	.word	0x2000bfe0
 8021bc0:	08020719 	.word	0x08020719
 8021bc4:	200000a8 	.word	0x200000a8

08021bc8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8021bc8:	b510      	push	{r4, lr}
 8021bca:	4604      	mov	r4, r0
 8021bcc:	f7ff ff88 	bl	8021ae0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021bd0:	4620      	mov	r0, r4
 8021bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021bd6:	f7ff bfbd 	b.w	8021b54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021bdc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021bdc:	b538      	push	{r3, r4, r5, lr}
 8021bde:	4c15      	ldr	r4, [pc, #84]	; (8021c34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021be0:	4605      	mov	r5, r0
 8021be2:	7823      	ldrb	r3, [r4, #0]
 8021be4:	f3bf 8f5b 	dmb	ish
 8021be8:	07da      	lsls	r2, r3, #31
 8021bea:	d40b      	bmi.n	8021c04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021bec:	4620      	mov	r0, r4
 8021bee:	f006 fcdd 	bl	80285ac <__cxa_guard_acquire>
 8021bf2:	b138      	cbz	r0, 8021c04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021bf4:	4620      	mov	r0, r4
 8021bf6:	f006 fce5 	bl	80285c4 <__cxa_guard_release>
 8021bfa:	4a0f      	ldr	r2, [pc, #60]	; (8021c38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021bfc:	490f      	ldr	r1, [pc, #60]	; (8021c3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021bfe:	4810      	ldr	r0, [pc, #64]	; (8021c40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021c00:	f006 fccd 	bl	802859e <__aeabi_atexit>
 8021c04:	4c0f      	ldr	r4, [pc, #60]	; (8021c44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021c06:	7823      	ldrb	r3, [r4, #0]
 8021c08:	f3bf 8f5b 	dmb	ish
 8021c0c:	07db      	lsls	r3, r3, #31
 8021c0e:	d40b      	bmi.n	8021c28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021c10:	4620      	mov	r0, r4
 8021c12:	f006 fccb 	bl	80285ac <__cxa_guard_acquire>
 8021c16:	b138      	cbz	r0, 8021c28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021c18:	4620      	mov	r0, r4
 8021c1a:	f006 fcd3 	bl	80285c4 <__cxa_guard_release>
 8021c1e:	4a06      	ldr	r2, [pc, #24]	; (8021c38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021c20:	4909      	ldr	r1, [pc, #36]	; (8021c48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021c22:	480a      	ldr	r0, [pc, #40]	; (8021c4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021c24:	f006 fcbb 	bl	802859e <__aeabi_atexit>
 8021c28:	4b05      	ldr	r3, [pc, #20]	; (8021c40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021c2a:	622b      	str	r3, [r5, #32]
 8021c2c:	4b07      	ldr	r3, [pc, #28]	; (8021c4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021c2e:	626b      	str	r3, [r5, #36]	; 0x24
 8021c30:	bd38      	pop	{r3, r4, r5, pc}
 8021c32:	bf00      	nop
 8021c34:	2000c004 	.word	0x2000c004
 8021c38:	20000000 	.word	0x20000000
 8021c3c:	0802070f 	.word	0x0802070f
 8021c40:	200000cc 	.word	0x200000cc
 8021c44:	2000c008 	.word	0x2000c008
 8021c48:	0802070d 	.word	0x0802070d
 8021c4c:	200000d0 	.word	0x200000d0

08021c50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021c50:	b538      	push	{r3, r4, r5, lr}
 8021c52:	4c15      	ldr	r4, [pc, #84]	; (8021ca8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021c54:	4605      	mov	r5, r0
 8021c56:	7823      	ldrb	r3, [r4, #0]
 8021c58:	f3bf 8f5b 	dmb	ish
 8021c5c:	07da      	lsls	r2, r3, #31
 8021c5e:	d40b      	bmi.n	8021c78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021c60:	4620      	mov	r0, r4
 8021c62:	f006 fca3 	bl	80285ac <__cxa_guard_acquire>
 8021c66:	b138      	cbz	r0, 8021c78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021c68:	4620      	mov	r0, r4
 8021c6a:	f006 fcab 	bl	80285c4 <__cxa_guard_release>
 8021c6e:	4a0f      	ldr	r2, [pc, #60]	; (8021cac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021c70:	490f      	ldr	r1, [pc, #60]	; (8021cb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021c72:	4810      	ldr	r0, [pc, #64]	; (8021cb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021c74:	f006 fc93 	bl	802859e <__aeabi_atexit>
 8021c78:	4c0f      	ldr	r4, [pc, #60]	; (8021cb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021c7a:	7823      	ldrb	r3, [r4, #0]
 8021c7c:	f3bf 8f5b 	dmb	ish
 8021c80:	07db      	lsls	r3, r3, #31
 8021c82:	d40b      	bmi.n	8021c9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021c84:	4620      	mov	r0, r4
 8021c86:	f006 fc91 	bl	80285ac <__cxa_guard_acquire>
 8021c8a:	b138      	cbz	r0, 8021c9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021c8c:	4620      	mov	r0, r4
 8021c8e:	f006 fc99 	bl	80285c4 <__cxa_guard_release>
 8021c92:	4a06      	ldr	r2, [pc, #24]	; (8021cac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021c94:	4909      	ldr	r1, [pc, #36]	; (8021cbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021c96:	480a      	ldr	r0, [pc, #40]	; (8021cc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021c98:	f006 fc81 	bl	802859e <__aeabi_atexit>
 8021c9c:	4b05      	ldr	r3, [pc, #20]	; (8021cb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021c9e:	61ab      	str	r3, [r5, #24]
 8021ca0:	4b07      	ldr	r3, [pc, #28]	; (8021cc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021ca2:	61eb      	str	r3, [r5, #28]
 8021ca4:	bd38      	pop	{r3, r4, r5, pc}
 8021ca6:	bf00      	nop
 8021ca8:	2000bfe4 	.word	0x2000bfe4
 8021cac:	20000000 	.word	0x20000000
 8021cb0:	08020713 	.word	0x08020713
 8021cb4:	200000ac 	.word	0x200000ac
 8021cb8:	2000bfe8 	.word	0x2000bfe8
 8021cbc:	08020711 	.word	0x08020711
 8021cc0:	200000b0 	.word	0x200000b0

08021cc4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021cc4:	b510      	push	{r4, lr}
 8021cc6:	4604      	mov	r4, r0
 8021cc8:	f7ff ff88 	bl	8021bdc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021ccc:	4620      	mov	r0, r4
 8021cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021cd2:	f7ff bfbd 	b.w	8021c50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021cd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8021cd8:	b538      	push	{r3, r4, r5, lr}
 8021cda:	4c15      	ldr	r4, [pc, #84]	; (8021d30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8021cdc:	4605      	mov	r5, r0
 8021cde:	7823      	ldrb	r3, [r4, #0]
 8021ce0:	f3bf 8f5b 	dmb	ish
 8021ce4:	07da      	lsls	r2, r3, #31
 8021ce6:	d40b      	bmi.n	8021d00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021ce8:	4620      	mov	r0, r4
 8021cea:	f006 fc5f 	bl	80285ac <__cxa_guard_acquire>
 8021cee:	b138      	cbz	r0, 8021d00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021cf0:	4620      	mov	r0, r4
 8021cf2:	f006 fc67 	bl	80285c4 <__cxa_guard_release>
 8021cf6:	4a0f      	ldr	r2, [pc, #60]	; (8021d34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021cf8:	490f      	ldr	r1, [pc, #60]	; (8021d38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8021cfa:	4810      	ldr	r0, [pc, #64]	; (8021d3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021cfc:	f006 fc4f 	bl	802859e <__aeabi_atexit>
 8021d00:	4c0f      	ldr	r4, [pc, #60]	; (8021d40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8021d02:	7823      	ldrb	r3, [r4, #0]
 8021d04:	f3bf 8f5b 	dmb	ish
 8021d08:	07db      	lsls	r3, r3, #31
 8021d0a:	d40b      	bmi.n	8021d24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021d0c:	4620      	mov	r0, r4
 8021d0e:	f006 fc4d 	bl	80285ac <__cxa_guard_acquire>
 8021d12:	b138      	cbz	r0, 8021d24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021d14:	4620      	mov	r0, r4
 8021d16:	f006 fc55 	bl	80285c4 <__cxa_guard_release>
 8021d1a:	4a06      	ldr	r2, [pc, #24]	; (8021d34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021d1c:	4909      	ldr	r1, [pc, #36]	; (8021d44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8021d1e:	480a      	ldr	r0, [pc, #40]	; (8021d48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021d20:	f006 fc3d 	bl	802859e <__aeabi_atexit>
 8021d24:	4b05      	ldr	r3, [pc, #20]	; (8021d3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021d26:	632b      	str	r3, [r5, #48]	; 0x30
 8021d28:	4b07      	ldr	r3, [pc, #28]	; (8021d48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021d2a:	636b      	str	r3, [r5, #52]	; 0x34
 8021d2c:	bd38      	pop	{r3, r4, r5, pc}
 8021d2e:	bf00      	nop
 8021d30:	2000bfec 	.word	0x2000bfec
 8021d34:	20000000 	.word	0x20000000
 8021d38:	08020707 	.word	0x08020707
 8021d3c:	200000b4 	.word	0x200000b4
 8021d40:	2000bff0 	.word	0x2000bff0
 8021d44:	08020705 	.word	0x08020705
 8021d48:	200000b8 	.word	0x200000b8

08021d4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021d4c:	b538      	push	{r3, r4, r5, lr}
 8021d4e:	4c15      	ldr	r4, [pc, #84]	; (8021da4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8021d50:	4605      	mov	r5, r0
 8021d52:	7823      	ldrb	r3, [r4, #0]
 8021d54:	f3bf 8f5b 	dmb	ish
 8021d58:	07da      	lsls	r2, r3, #31
 8021d5a:	d40b      	bmi.n	8021d74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021d5c:	4620      	mov	r0, r4
 8021d5e:	f006 fc25 	bl	80285ac <__cxa_guard_acquire>
 8021d62:	b138      	cbz	r0, 8021d74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021d64:	4620      	mov	r0, r4
 8021d66:	f006 fc2d 	bl	80285c4 <__cxa_guard_release>
 8021d6a:	4a0f      	ldr	r2, [pc, #60]	; (8021da8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021d6c:	490f      	ldr	r1, [pc, #60]	; (8021dac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8021d6e:	4810      	ldr	r0, [pc, #64]	; (8021db0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021d70:	f006 fc15 	bl	802859e <__aeabi_atexit>
 8021d74:	4c0f      	ldr	r4, [pc, #60]	; (8021db4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8021d76:	7823      	ldrb	r3, [r4, #0]
 8021d78:	f3bf 8f5b 	dmb	ish
 8021d7c:	07db      	lsls	r3, r3, #31
 8021d7e:	d40b      	bmi.n	8021d98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021d80:	4620      	mov	r0, r4
 8021d82:	f006 fc13 	bl	80285ac <__cxa_guard_acquire>
 8021d86:	b138      	cbz	r0, 8021d98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021d88:	4620      	mov	r0, r4
 8021d8a:	f006 fc1b 	bl	80285c4 <__cxa_guard_release>
 8021d8e:	4a06      	ldr	r2, [pc, #24]	; (8021da8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021d90:	4909      	ldr	r1, [pc, #36]	; (8021db8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8021d92:	480a      	ldr	r0, [pc, #40]	; (8021dbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021d94:	f006 fc03 	bl	802859e <__aeabi_atexit>
 8021d98:	4b05      	ldr	r3, [pc, #20]	; (8021db0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021d9a:	62ab      	str	r3, [r5, #40]	; 0x28
 8021d9c:	4b07      	ldr	r3, [pc, #28]	; (8021dbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021d9e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021da0:	bd38      	pop	{r3, r4, r5, pc}
 8021da2:	bf00      	nop
 8021da4:	2000bfc4 	.word	0x2000bfc4
 8021da8:	20000000 	.word	0x20000000
 8021dac:	0802070b 	.word	0x0802070b
 8021db0:	2000008c 	.word	0x2000008c
 8021db4:	2000bfc8 	.word	0x2000bfc8
 8021db8:	08020709 	.word	0x08020709
 8021dbc:	20000090 	.word	0x20000090

08021dc0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8021dc0:	b510      	push	{r4, lr}
 8021dc2:	4604      	mov	r4, r0
 8021dc4:	f7ff ff88 	bl	8021cd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8021dc8:	4620      	mov	r0, r4
 8021dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021dce:	f7ff bfbd 	b.w	8021d4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08021dd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021dd4:	b538      	push	{r3, r4, r5, lr}
 8021dd6:	4c15      	ldr	r4, [pc, #84]	; (8021e2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021dd8:	4605      	mov	r5, r0
 8021dda:	7823      	ldrb	r3, [r4, #0]
 8021ddc:	f3bf 8f5b 	dmb	ish
 8021de0:	07da      	lsls	r2, r3, #31
 8021de2:	d40b      	bmi.n	8021dfc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021de4:	4620      	mov	r0, r4
 8021de6:	f006 fbe1 	bl	80285ac <__cxa_guard_acquire>
 8021dea:	b138      	cbz	r0, 8021dfc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021dec:	4620      	mov	r0, r4
 8021dee:	f006 fbe9 	bl	80285c4 <__cxa_guard_release>
 8021df2:	4a0f      	ldr	r2, [pc, #60]	; (8021e30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021df4:	490f      	ldr	r1, [pc, #60]	; (8021e34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021df6:	4810      	ldr	r0, [pc, #64]	; (8021e38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021df8:	f006 fbd1 	bl	802859e <__aeabi_atexit>
 8021dfc:	4c0f      	ldr	r4, [pc, #60]	; (8021e3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021dfe:	7823      	ldrb	r3, [r4, #0]
 8021e00:	f3bf 8f5b 	dmb	ish
 8021e04:	07db      	lsls	r3, r3, #31
 8021e06:	d40b      	bmi.n	8021e20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021e08:	4620      	mov	r0, r4
 8021e0a:	f006 fbcf 	bl	80285ac <__cxa_guard_acquire>
 8021e0e:	b138      	cbz	r0, 8021e20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021e10:	4620      	mov	r0, r4
 8021e12:	f006 fbd7 	bl	80285c4 <__cxa_guard_release>
 8021e16:	4a06      	ldr	r2, [pc, #24]	; (8021e30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021e18:	4909      	ldr	r1, [pc, #36]	; (8021e40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021e1a:	480a      	ldr	r0, [pc, #40]	; (8021e44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021e1c:	f006 fbbf 	bl	802859e <__aeabi_atexit>
 8021e20:	4b05      	ldr	r3, [pc, #20]	; (8021e38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021e22:	642b      	str	r3, [r5, #64]	; 0x40
 8021e24:	4b07      	ldr	r3, [pc, #28]	; (8021e44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021e26:	646b      	str	r3, [r5, #68]	; 0x44
 8021e28:	bd38      	pop	{r3, r4, r5, pc}
 8021e2a:	bf00      	nop
 8021e2c:	2000bff4 	.word	0x2000bff4
 8021e30:	20000000 	.word	0x20000000
 8021e34:	080206ff 	.word	0x080206ff
 8021e38:	200000bc 	.word	0x200000bc
 8021e3c:	2000bff8 	.word	0x2000bff8
 8021e40:	080206fd 	.word	0x080206fd
 8021e44:	200000c0 	.word	0x200000c0

08021e48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021e48:	b538      	push	{r3, r4, r5, lr}
 8021e4a:	4c15      	ldr	r4, [pc, #84]	; (8021ea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021e4c:	4605      	mov	r5, r0
 8021e4e:	7823      	ldrb	r3, [r4, #0]
 8021e50:	f3bf 8f5b 	dmb	ish
 8021e54:	07da      	lsls	r2, r3, #31
 8021e56:	d40b      	bmi.n	8021e70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021e58:	4620      	mov	r0, r4
 8021e5a:	f006 fba7 	bl	80285ac <__cxa_guard_acquire>
 8021e5e:	b138      	cbz	r0, 8021e70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021e60:	4620      	mov	r0, r4
 8021e62:	f006 fbaf 	bl	80285c4 <__cxa_guard_release>
 8021e66:	4a0f      	ldr	r2, [pc, #60]	; (8021ea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021e68:	490f      	ldr	r1, [pc, #60]	; (8021ea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021e6a:	4810      	ldr	r0, [pc, #64]	; (8021eac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021e6c:	f006 fb97 	bl	802859e <__aeabi_atexit>
 8021e70:	4c0f      	ldr	r4, [pc, #60]	; (8021eb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021e72:	7823      	ldrb	r3, [r4, #0]
 8021e74:	f3bf 8f5b 	dmb	ish
 8021e78:	07db      	lsls	r3, r3, #31
 8021e7a:	d40b      	bmi.n	8021e94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021e7c:	4620      	mov	r0, r4
 8021e7e:	f006 fb95 	bl	80285ac <__cxa_guard_acquire>
 8021e82:	b138      	cbz	r0, 8021e94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021e84:	4620      	mov	r0, r4
 8021e86:	f006 fb9d 	bl	80285c4 <__cxa_guard_release>
 8021e8a:	4a06      	ldr	r2, [pc, #24]	; (8021ea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021e8c:	4909      	ldr	r1, [pc, #36]	; (8021eb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021e8e:	480a      	ldr	r0, [pc, #40]	; (8021eb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021e90:	f006 fb85 	bl	802859e <__aeabi_atexit>
 8021e94:	4b05      	ldr	r3, [pc, #20]	; (8021eac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021e96:	63ab      	str	r3, [r5, #56]	; 0x38
 8021e98:	4b07      	ldr	r3, [pc, #28]	; (8021eb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021e9a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021e9c:	bd38      	pop	{r3, r4, r5, pc}
 8021e9e:	bf00      	nop
 8021ea0:	2000bfd4 	.word	0x2000bfd4
 8021ea4:	20000000 	.word	0x20000000
 8021ea8:	08020703 	.word	0x08020703
 8021eac:	2000009c 	.word	0x2000009c
 8021eb0:	2000bfd8 	.word	0x2000bfd8
 8021eb4:	08020701 	.word	0x08020701
 8021eb8:	200000a0 	.word	0x200000a0

08021ebc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8021ebc:	b510      	push	{r4, lr}
 8021ebe:	4604      	mov	r4, r0
 8021ec0:	f7ff ff88 	bl	8021dd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021ec4:	4620      	mov	r0, r4
 8021ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021eca:	f7ff bfbd 	b.w	8021e48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021ed0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021ed0:	b538      	push	{r3, r4, r5, lr}
 8021ed2:	4c15      	ldr	r4, [pc, #84]	; (8021f28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021ed4:	4605      	mov	r5, r0
 8021ed6:	7823      	ldrb	r3, [r4, #0]
 8021ed8:	f3bf 8f5b 	dmb	ish
 8021edc:	07da      	lsls	r2, r3, #31
 8021ede:	d40b      	bmi.n	8021ef8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021ee0:	4620      	mov	r0, r4
 8021ee2:	f006 fb63 	bl	80285ac <__cxa_guard_acquire>
 8021ee6:	b138      	cbz	r0, 8021ef8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021ee8:	4620      	mov	r0, r4
 8021eea:	f006 fb6b 	bl	80285c4 <__cxa_guard_release>
 8021eee:	4a0f      	ldr	r2, [pc, #60]	; (8021f2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021ef0:	490f      	ldr	r1, [pc, #60]	; (8021f30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021ef2:	4810      	ldr	r0, [pc, #64]	; (8021f34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021ef4:	f006 fb53 	bl	802859e <__aeabi_atexit>
 8021ef8:	4c0f      	ldr	r4, [pc, #60]	; (8021f38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021efa:	7823      	ldrb	r3, [r4, #0]
 8021efc:	f3bf 8f5b 	dmb	ish
 8021f00:	07db      	lsls	r3, r3, #31
 8021f02:	d40b      	bmi.n	8021f1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021f04:	4620      	mov	r0, r4
 8021f06:	f006 fb51 	bl	80285ac <__cxa_guard_acquire>
 8021f0a:	b138      	cbz	r0, 8021f1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021f0c:	4620      	mov	r0, r4
 8021f0e:	f006 fb59 	bl	80285c4 <__cxa_guard_release>
 8021f12:	4a06      	ldr	r2, [pc, #24]	; (8021f2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021f14:	4909      	ldr	r1, [pc, #36]	; (8021f3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021f16:	480a      	ldr	r0, [pc, #40]	; (8021f40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021f18:	f006 fb41 	bl	802859e <__aeabi_atexit>
 8021f1c:	4b05      	ldr	r3, [pc, #20]	; (8021f34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021f1e:	652b      	str	r3, [r5, #80]	; 0x50
 8021f20:	4b07      	ldr	r3, [pc, #28]	; (8021f40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021f22:	656b      	str	r3, [r5, #84]	; 0x54
 8021f24:	bd38      	pop	{r3, r4, r5, pc}
 8021f26:	bf00      	nop
 8021f28:	2000bfcc 	.word	0x2000bfcc
 8021f2c:	20000000 	.word	0x20000000
 8021f30:	080206f7 	.word	0x080206f7
 8021f34:	20000094 	.word	0x20000094
 8021f38:	2000bfd0 	.word	0x2000bfd0
 8021f3c:	080206f5 	.word	0x080206f5
 8021f40:	20000098 	.word	0x20000098

08021f44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021f44:	b538      	push	{r3, r4, r5, lr}
 8021f46:	4c15      	ldr	r4, [pc, #84]	; (8021f9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021f48:	4605      	mov	r5, r0
 8021f4a:	7823      	ldrb	r3, [r4, #0]
 8021f4c:	f3bf 8f5b 	dmb	ish
 8021f50:	07da      	lsls	r2, r3, #31
 8021f52:	d40b      	bmi.n	8021f6c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021f54:	4620      	mov	r0, r4
 8021f56:	f006 fb29 	bl	80285ac <__cxa_guard_acquire>
 8021f5a:	b138      	cbz	r0, 8021f6c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021f5c:	4620      	mov	r0, r4
 8021f5e:	f006 fb31 	bl	80285c4 <__cxa_guard_release>
 8021f62:	4a0f      	ldr	r2, [pc, #60]	; (8021fa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021f64:	490f      	ldr	r1, [pc, #60]	; (8021fa4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021f66:	4810      	ldr	r0, [pc, #64]	; (8021fa8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021f68:	f006 fb19 	bl	802859e <__aeabi_atexit>
 8021f6c:	4c0f      	ldr	r4, [pc, #60]	; (8021fac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021f6e:	7823      	ldrb	r3, [r4, #0]
 8021f70:	f3bf 8f5b 	dmb	ish
 8021f74:	07db      	lsls	r3, r3, #31
 8021f76:	d40b      	bmi.n	8021f90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021f78:	4620      	mov	r0, r4
 8021f7a:	f006 fb17 	bl	80285ac <__cxa_guard_acquire>
 8021f7e:	b138      	cbz	r0, 8021f90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021f80:	4620      	mov	r0, r4
 8021f82:	f006 fb1f 	bl	80285c4 <__cxa_guard_release>
 8021f86:	4a06      	ldr	r2, [pc, #24]	; (8021fa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021f88:	4909      	ldr	r1, [pc, #36]	; (8021fb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021f8a:	480a      	ldr	r0, [pc, #40]	; (8021fb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021f8c:	f006 fb07 	bl	802859e <__aeabi_atexit>
 8021f90:	4b05      	ldr	r3, [pc, #20]	; (8021fa8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021f92:	64ab      	str	r3, [r5, #72]	; 0x48
 8021f94:	4b07      	ldr	r3, [pc, #28]	; (8021fb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021f96:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021f98:	bd38      	pop	{r3, r4, r5, pc}
 8021f9a:	bf00      	nop
 8021f9c:	2000bfbc 	.word	0x2000bfbc
 8021fa0:	20000000 	.word	0x20000000
 8021fa4:	080206fb 	.word	0x080206fb
 8021fa8:	20000084 	.word	0x20000084
 8021fac:	2000bfc0 	.word	0x2000bfc0
 8021fb0:	080206f9 	.word	0x080206f9
 8021fb4:	20000088 	.word	0x20000088

08021fb8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8021fb8:	b510      	push	{r4, lr}
 8021fba:	4604      	mov	r4, r0
 8021fbc:	f7ff ff88 	bl	8021ed0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021fc0:	4620      	mov	r0, r4
 8021fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fc6:	f7ff bfbd 	b.w	8021f44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08021fca <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8021fca:	b510      	push	{r4, lr}
 8021fcc:	4604      	mov	r4, r0
 8021fce:	f7ff fff3 	bl	8021fb8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8021fd2:	4620      	mov	r0, r4
 8021fd4:	f7ff ff72 	bl	8021ebc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8021fd8:	4620      	mov	r0, r4
 8021fda:	f7ff fe73 	bl	8021cc4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8021fde:	4620      	mov	r0, r4
 8021fe0:	f7ff fdf2 	bl	8021bc8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8021fe4:	4620      	mov	r0, r4
 8021fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fea:	f7ff bee9 	b.w	8021dc0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08021ff0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8021ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ff4:	b087      	sub	sp, #28
 8021ff6:	7888      	ldrb	r0, [r1, #2]
 8021ff8:	4616      	mov	r6, r2
 8021ffa:	9001      	str	r0, [sp, #4]
 8021ffc:	7848      	ldrb	r0, [r1, #1]
 8021ffe:	9100      	str	r1, [sp, #0]
 8022000:	9002      	str	r0, [sp, #8]
 8022002:	7808      	ldrb	r0, [r1, #0]
 8022004:	9901      	ldr	r1, [sp, #4]
 8022006:	9003      	str	r0, [sp, #12]
 8022008:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802200c:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8022010:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8022014:	9902      	ldr	r1, [sp, #8]
 8022016:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 802201a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 802201e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8022022:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8022026:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 802202a:	9005      	str	r0, [sp, #20]
 802202c:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8022030:	fb05 ca0e 	mla	sl, r5, lr, ip
 8022034:	2d00      	cmp	r5, #0
 8022036:	eb06 080a 	add.w	r8, r6, sl
 802203a:	db4a      	blt.n	80220d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 802203c:	45a9      	cmp	r9, r5
 802203e:	dd48      	ble.n	80220d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8022040:	f1bc 0f00 	cmp.w	ip, #0
 8022044:	db43      	blt.n	80220ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8022046:	45e6      	cmp	lr, ip
 8022048:	dd41      	ble.n	80220ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802204a:	f816 600a 	ldrb.w	r6, [r6, sl]
 802204e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022052:	441e      	add	r6, r3
 8022054:	f11c 0001 	adds.w	r0, ip, #1
 8022058:	d43e      	bmi.n	80220d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802205a:	4586      	cmp	lr, r0
 802205c:	dd3c      	ble.n	80220d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802205e:	2a00      	cmp	r2, #0
 8022060:	d03a      	beq.n	80220d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8022062:	f898 0001 	ldrb.w	r0, [r8, #1]
 8022066:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802206a:	4418      	add	r0, r3
 802206c:	3501      	adds	r5, #1
 802206e:	d437      	bmi.n	80220e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8022070:	45a9      	cmp	r9, r5
 8022072:	dd35      	ble.n	80220e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8022074:	b3a4      	cbz	r4, 80220e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8022076:	f1bc 0f00 	cmp.w	ip, #0
 802207a:	db2f      	blt.n	80220dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 802207c:	45e6      	cmp	lr, ip
 802207e:	dd2d      	ble.n	80220dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8022080:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022088:	441d      	add	r5, r3
 802208a:	f11c 0c01 	adds.w	ip, ip, #1
 802208e:	d42a      	bmi.n	80220e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8022090:	45e6      	cmp	lr, ip
 8022092:	dd28      	ble.n	80220e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8022094:	b33a      	cbz	r2, 80220e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8022096:	44c6      	add	lr, r8
 8022098:	f89e c001 	ldrb.w	ip, [lr, #1]
 802209c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80220a0:	4463      	add	r3, ip
 80220a2:	ea6f 0c07 	mvn.w	ip, r7
 80220a6:	2a0f      	cmp	r2, #15
 80220a8:	f896 a000 	ldrb.w	sl, [r6]
 80220ac:	fa5f fc8c 	uxtb.w	ip, ip
 80220b0:	f890 b000 	ldrb.w	fp, [r0]
 80220b4:	f895 9000 	ldrb.w	r9, [r5]
 80220b8:	7819      	ldrb	r1, [r3, #0]
 80220ba:	d801      	bhi.n	80220c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 80220bc:	2c0f      	cmp	r4, #15
 80220be:	d914      	bls.n	80220ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80220c0:	4b40      	ldr	r3, [pc, #256]	; (80221c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80220c2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80220c6:	4a40      	ldr	r2, [pc, #256]	; (80221c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80220c8:	4840      	ldr	r0, [pc, #256]	; (80221cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80220ca:	f006 fa9b 	bl	8028604 <__assert_func>
 80220ce:	ae05      	add	r6, sp, #20
 80220d0:	e7c0      	b.n	8022054 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 80220d2:	a805      	add	r0, sp, #20
 80220d4:	4606      	mov	r6, r0
 80220d6:	e7c9      	b.n	802206c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80220d8:	a805      	add	r0, sp, #20
 80220da:	e7c7      	b.n	802206c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80220dc:	ad05      	add	r5, sp, #20
 80220de:	e7d4      	b.n	802208a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 80220e0:	ab05      	add	r3, sp, #20
 80220e2:	461d      	mov	r5, r3
 80220e4:	e7dd      	b.n	80220a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80220e6:	ab05      	add	r3, sp, #20
 80220e8:	e7db      	b.n	80220a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80220ea:	b292      	uxth	r2, r2
 80220ec:	b2a4      	uxth	r4, r4
 80220ee:	fa1f fc8c 	uxth.w	ip, ip
 80220f2:	fb02 f804 	mul.w	r8, r2, r4
 80220f6:	0112      	lsls	r2, r2, #4
 80220f8:	b2bf      	uxth	r7, r7
 80220fa:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80220fe:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8022102:	eba2 0208 	sub.w	r2, r2, r8
 8022106:	b2a4      	uxth	r4, r4
 8022108:	b292      	uxth	r2, r2
 802210a:	ebae 0e04 	sub.w	lr, lr, r4
 802210e:	fb02 fb0b 	mul.w	fp, r2, fp
 8022112:	fa1f fe8e 	uxth.w	lr, lr
 8022116:	fb0e ba0a 	mla	sl, lr, sl, fp
 802211a:	fb04 aa09 	mla	sl, r4, r9, sl
 802211e:	fb08 aa01 	mla	sl, r8, r1, sl
 8022122:	9903      	ldr	r1, [sp, #12]
 8022124:	fb11 f90c 	smulbb	r9, r1, ip
 8022128:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802212c:	9900      	ldr	r1, [sp, #0]
 802212e:	fb0a 9a07 	mla	sl, sl, r7, r9
 8022132:	fa1f fa8a 	uxth.w	sl, sl
 8022136:	f10a 0901 	add.w	r9, sl, #1
 802213a:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 802213e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022142:	f881 a000 	strb.w	sl, [r1]
 8022146:	f890 a001 	ldrb.w	sl, [r0, #1]
 802214a:	f896 9001 	ldrb.w	r9, [r6, #1]
 802214e:	fb02 fa0a 	mul.w	sl, r2, sl
 8022152:	9902      	ldr	r1, [sp, #8]
 8022154:	fb0e aa09 	mla	sl, lr, r9, sl
 8022158:	f895 9001 	ldrb.w	r9, [r5, #1]
 802215c:	fb04 aa09 	mla	sl, r4, r9, sl
 8022160:	f893 9001 	ldrb.w	r9, [r3, #1]
 8022164:	fb08 a909 	mla	r9, r8, r9, sl
 8022168:	fb11 fa0c 	smulbb	sl, r1, ip
 802216c:	9900      	ldr	r1, [sp, #0]
 802216e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022172:	fb09 a907 	mla	r9, r9, r7, sl
 8022176:	fa1f f989 	uxth.w	r9, r9
 802217a:	f109 0a01 	add.w	sl, r9, #1
 802217e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8022182:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022186:	f881 9001 	strb.w	r9, [r1, #1]
 802218a:	7880      	ldrb	r0, [r0, #2]
 802218c:	78b6      	ldrb	r6, [r6, #2]
 802218e:	4342      	muls	r2, r0
 8022190:	78a8      	ldrb	r0, [r5, #2]
 8022192:	789b      	ldrb	r3, [r3, #2]
 8022194:	fb0e 2206 	mla	r2, lr, r6, r2
 8022198:	fb04 2400 	mla	r4, r4, r0, r2
 802219c:	fb08 4803 	mla	r8, r8, r3, r4
 80221a0:	9b01      	ldr	r3, [sp, #4]
 80221a2:	fb13 fc0c 	smulbb	ip, r3, ip
 80221a6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80221aa:	fb08 c707 	mla	r7, r8, r7, ip
 80221ae:	b2bf      	uxth	r7, r7
 80221b0:	f107 0c01 	add.w	ip, r7, #1
 80221b4:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80221b8:	123f      	asrs	r7, r7, #8
 80221ba:	708f      	strb	r7, [r1, #2]
 80221bc:	b007      	add	sp, #28
 80221be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221c2:	bf00      	nop
 80221c4:	0802d907 	.word	0x0802d907
 80221c8:	0802ddfe 	.word	0x0802ddfe
 80221cc:	0802d9d0 	.word	0x0802d9d0

080221d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80221d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221d4:	ed2d 8b08 	vpush	{d8-d11}
 80221d8:	b095      	sub	sp, #84	; 0x54
 80221da:	eeb0 aa40 	vmov.f32	s20, s0
 80221de:	eef0 9a60 	vmov.f32	s19, s1
 80221e2:	930a      	str	r3, [sp, #40]	; 0x28
 80221e4:	eeb0 9a41 	vmov.f32	s18, s2
 80221e8:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80221ec:	eeb0 8a62 	vmov.f32	s16, s5
 80221f0:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80221f2:	eef0 8a43 	vmov.f32	s17, s6
 80221f6:	930c      	str	r3, [sp, #48]	; 0x30
 80221f8:	eef0 ba44 	vmov.f32	s23, s8
 80221fc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8022200:	eeb0 ba64 	vmov.f32	s22, s9
 8022204:	9013      	str	r0, [sp, #76]	; 0x4c
 8022206:	eef0 aa45 	vmov.f32	s21, s10
 802220a:	9310      	str	r3, [sp, #64]	; 0x40
 802220c:	6860      	ldr	r0, [r4, #4]
 802220e:	910f      	str	r1, [sp, #60]	; 0x3c
 8022210:	9212      	str	r2, [sp, #72]	; 0x48
 8022212:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022214:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8022218:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802221c:	fb00 1303 	mla	r3, r0, r3, r1
 8022220:	6821      	ldr	r1, [r4, #0]
 8022222:	6854      	ldr	r4, [r2, #4]
 8022224:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022228:	18cb      	adds	r3, r1, r3
 802222a:	930b      	str	r3, [sp, #44]	; 0x2c
 802222c:	6813      	ldr	r3, [r2, #0]
 802222e:	930e      	str	r3, [sp, #56]	; 0x38
 8022230:	1d23      	adds	r3, r4, #4
 8022232:	9309      	str	r3, [sp, #36]	; 0x24
 8022234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022236:	43db      	mvns	r3, r3
 8022238:	b2db      	uxtb	r3, r3
 802223a:	930d      	str	r3, [sp, #52]	; 0x34
 802223c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802223e:	2b00      	cmp	r3, #0
 8022240:	dc03      	bgt.n	802224a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022242:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022244:	2b00      	cmp	r3, #0
 8022246:	f340 823c 	ble.w	80226c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 802224a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802224c:	2b00      	cmp	r3, #0
 802224e:	f340 8115 	ble.w	802247c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022252:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022254:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022256:	1412      	asrs	r2, r2, #16
 8022258:	ea4f 4323 	mov.w	r3, r3, asr #16
 802225c:	d431      	bmi.n	80222c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802225e:	1c51      	adds	r1, r2, #1
 8022260:	428d      	cmp	r5, r1
 8022262:	dd31      	ble.n	80222c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022264:	2b00      	cmp	r3, #0
 8022266:	db2f      	blt.n	80222c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022268:	1c59      	adds	r1, r3, #1
 802226a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802226c:	4288      	cmp	r0, r1
 802226e:	dd2b      	ble.n	80222c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022272:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022274:	3b01      	subs	r3, #1
 8022276:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8022278:	fb02 1203 	mla	r2, r2, r3, r1
 802227c:	1412      	asrs	r2, r2, #16
 802227e:	d42d      	bmi.n	80222dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022280:	3201      	adds	r2, #1
 8022282:	4295      	cmp	r5, r2
 8022284:	dd2a      	ble.n	80222dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022286:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022288:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802228a:	fb02 1303 	mla	r3, r2, r3, r1
 802228e:	141b      	asrs	r3, r3, #16
 8022290:	d424      	bmi.n	80222dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022292:	3301      	adds	r3, #1
 8022294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022296:	429a      	cmp	r2, r3
 8022298:	dd20      	ble.n	80222dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802229a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802229c:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80222a0:	f103 0c03 	add.w	ip, r3, #3
 80222a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222a6:	9311      	str	r3, [sp, #68]	; 0x44
 80222a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	f300 814f 	bgt.w	802254e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 80222b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80222b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80222b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222bc:	441a      	add	r2, r3
 80222be:	920b      	str	r2, [sp, #44]	; 0x2c
 80222c0:	e0de      	b.n	8022480 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80222c2:	1c51      	adds	r1, r2, #1
 80222c4:	f040 80cb 	bne.w	802245e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80222c8:	42aa      	cmp	r2, r5
 80222ca:	f280 80c8 	bge.w	802245e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80222ce:	1c5f      	adds	r7, r3, #1
 80222d0:	f2c0 80c5 	blt.w	802245e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80222d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80222d6:	4293      	cmp	r3, r2
 80222d8:	f280 80c1 	bge.w	802245e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80222dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80222e0:	9311      	str	r3, [sp, #68]	; 0x44
 80222e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80222e4:	2b00      	cmp	r3, #0
 80222e6:	dde3      	ble.n	80222b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80222e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222ea:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80222ec:	141a      	asrs	r2, r3, #16
 80222ee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80222f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80222f2:	1400      	asrs	r0, r0, #16
 80222f4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80222f8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80222fc:	f100 810e 	bmi.w	802251c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022300:	1c46      	adds	r6, r0, #1
 8022302:	42b5      	cmp	r5, r6
 8022304:	f340 810c 	ble.w	8022520 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8022308:	2a00      	cmp	r2, #0
 802230a:	f2c0 8109 	blt.w	8022520 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 802230e:	1c56      	adds	r6, r2, #1
 8022310:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022312:	42b4      	cmp	r4, r6
 8022314:	f340 8104 	ble.w	8022520 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8022318:	fb02 0005 	mla	r0, r2, r5, r0
 802231c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802231e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022320:	f814 e000 	ldrb.w	lr, [r4, r0]
 8022324:	4402      	add	r2, r0
 8022326:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022328:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802232c:	eb00 080e 	add.w	r8, r0, lr
 8022330:	2b00      	cmp	r3, #0
 8022332:	f000 80e4 	beq.w	80224fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 8022336:	f892 c001 	ldrb.w	ip, [r2, #1]
 802233a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802233e:	4484      	add	ip, r0
 8022340:	2900      	cmp	r1, #0
 8022342:	f000 80e5 	beq.w	8022510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8022346:	1950      	adds	r0, r2, r5
 8022348:	5d52      	ldrb	r2, [r2, r5]
 802234a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802234c:	7840      	ldrb	r0, [r0, #1]
 802234e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022352:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022356:	4422      	add	r2, r4
 8022358:	4420      	add	r0, r4
 802235a:	b29b      	uxth	r3, r3
 802235c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802235e:	b289      	uxth	r1, r1
 8022360:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8022364:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8022368:	fb03 fa01 	mul.w	sl, r3, r1
 802236c:	011b      	lsls	r3, r3, #4
 802236e:	f89c e000 	ldrb.w	lr, [ip]
 8022372:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8022376:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802237a:	eba3 030a 	sub.w	r3, r3, sl
 802237e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022380:	b289      	uxth	r1, r1
 8022382:	b29b      	uxth	r3, r3
 8022384:	eba9 0901 	sub.w	r9, r9, r1
 8022388:	fb03 fe0e 	mul.w	lr, r3, lr
 802238c:	fa1f f989 	uxth.w	r9, r9
 8022390:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022394:	f892 b000 	ldrb.w	fp, [r2]
 8022398:	fb01 ee0b 	mla	lr, r1, fp, lr
 802239c:	f890 b000 	ldrb.w	fp, [r0]
 80223a0:	fb0a ee0b 	mla	lr, sl, fp, lr
 80223a4:	f897 b000 	ldrb.w	fp, [r7]
 80223a8:	fb1b fb04 	smulbb	fp, fp, r4
 80223ac:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80223b0:	fb0e be06 	mla	lr, lr, r6, fp
 80223b4:	fa1f fe8e 	uxth.w	lr, lr
 80223b8:	f10e 0b01 	add.w	fp, lr, #1
 80223bc:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 80223c0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80223c4:	f887 b000 	strb.w	fp, [r7]
 80223c8:	f89c e001 	ldrb.w	lr, [ip, #1]
 80223cc:	f898 b001 	ldrb.w	fp, [r8, #1]
 80223d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80223d4:	fb09 ee0b 	mla	lr, r9, fp, lr
 80223d8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80223dc:	fb01 ee0b 	mla	lr, r1, fp, lr
 80223e0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80223e4:	fb0a ee0b 	mla	lr, sl, fp, lr
 80223e8:	f897 b001 	ldrb.w	fp, [r7, #1]
 80223ec:	fb1b fb04 	smulbb	fp, fp, r4
 80223f0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80223f4:	fb0e be06 	mla	lr, lr, r6, fp
 80223f8:	fa1f fe8e 	uxth.w	lr, lr
 80223fc:	f10e 0b01 	add.w	fp, lr, #1
 8022400:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8022404:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022408:	f887 e001 	strb.w	lr, [r7, #1]
 802240c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022410:	f898 e002 	ldrb.w	lr, [r8, #2]
 8022414:	fb03 f30c 	mul.w	r3, r3, ip
 8022418:	fb09 330e 	mla	r3, r9, lr, r3
 802241c:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022420:	7882      	ldrb	r2, [r0, #2]
 8022422:	fb01 310e 	mla	r1, r1, lr, r3
 8022426:	fb0a 1a02 	mla	sl, sl, r2, r1
 802242a:	78b9      	ldrb	r1, [r7, #2]
 802242c:	fb11 f104 	smulbb	r1, r1, r4
 8022430:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8022434:	fb0a 1606 	mla	r6, sl, r6, r1
 8022438:	b2b6      	uxth	r6, r6
 802243a:	1c73      	adds	r3, r6, #1
 802243c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022440:	1236      	asrs	r6, r6, #8
 8022442:	70be      	strb	r6, [r7, #2]
 8022444:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022446:	3703      	adds	r7, #3
 8022448:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802244a:	4413      	add	r3, r2
 802244c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802244e:	9327      	str	r3, [sp, #156]	; 0x9c
 8022450:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022452:	4413      	add	r3, r2
 8022454:	9328      	str	r3, [sp, #160]	; 0xa0
 8022456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022458:	3b01      	subs	r3, #1
 802245a:	9311      	str	r3, [sp, #68]	; 0x44
 802245c:	e741      	b.n	80222e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 802245e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022460:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022462:	4413      	add	r3, r2
 8022464:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022466:	9327      	str	r3, [sp, #156]	; 0x9c
 8022468:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802246a:	4413      	add	r3, r2
 802246c:	9328      	str	r3, [sp, #160]	; 0xa0
 802246e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022470:	3b01      	subs	r3, #1
 8022472:	930a      	str	r3, [sp, #40]	; 0x28
 8022474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022476:	3303      	adds	r3, #3
 8022478:	930b      	str	r3, [sp, #44]	; 0x2c
 802247a:	e6e6      	b.n	802224a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802247c:	f47f aef8 	bne.w	8022270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8022480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022482:	2b00      	cmp	r3, #0
 8022484:	f340 811d 	ble.w	80226c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8022488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802248c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802248e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022492:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022496:	eef0 6a48 	vmov.f32	s13, s16
 802249a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802249e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80224a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224a6:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 80224aa:	eef0 6a68 	vmov.f32	s13, s17
 80224ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224b2:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 80224b6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80224ba:	ee69 7a27 	vmul.f32	s15, s18, s15
 80224be:	ee37 8a48 	vsub.f32	s16, s14, s16
 80224c2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80224c6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80224ca:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80224ce:	ee18 2a10 	vmov	r2, s16
 80224d2:	eeb0 8a47 	vmov.f32	s16, s14
 80224d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80224da:	ee18 2a90 	vmov	r2, s17
 80224de:	9329      	str	r3, [sp, #164]	; 0xa4
 80224e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80224e2:	eef0 8a67 	vmov.f32	s17, s15
 80224e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80224ea:	932a      	str	r3, [sp, #168]	; 0xa8
 80224ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80224ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80224f0:	3b01      	subs	r3, #1
 80224f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80224f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80224f6:	bf08      	it	eq
 80224f8:	4613      	moveq	r3, r2
 80224fa:	930a      	str	r3, [sp, #40]	; 0x28
 80224fc:	e69e      	b.n	802223c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80224fe:	b151      	cbz	r1, 8022516 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022500:	5d52      	ldrb	r2, [r2, r5]
 8022502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022504:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022508:	4402      	add	r2, r0
 802250a:	4640      	mov	r0, r8
 802250c:	46c4      	mov	ip, r8
 802250e:	e724      	b.n	802235a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8022510:	4640      	mov	r0, r8
 8022512:	4642      	mov	r2, r8
 8022514:	e721      	b.n	802235a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8022516:	4640      	mov	r0, r8
 8022518:	4642      	mov	r2, r8
 802251a:	e7f7      	b.n	802250c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 802251c:	1c46      	adds	r6, r0, #1
 802251e:	d191      	bne.n	8022444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022520:	4285      	cmp	r5, r0
 8022522:	dd8f      	ble.n	8022444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022524:	1c54      	adds	r4, r2, #1
 8022526:	db8d      	blt.n	8022444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022528:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802252a:	4294      	cmp	r4, r2
 802252c:	dd8a      	ble.n	8022444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802252e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022530:	9002      	str	r0, [sp, #8]
 8022532:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022534:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8022538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802253a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802253c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022540:	e9cd 5300 	strd	r5, r3, [sp]
 8022544:	4639      	mov	r1, r7
 8022546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022548:	f7ff fd52 	bl	8021ff0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 802254c:	e77a      	b.n	8022444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802254e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022550:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022552:	1410      	asrs	r0, r2, #16
 8022554:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022558:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802255a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802255c:	1412      	asrs	r2, r2, #16
 802255e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022562:	fb05 2000 	mla	r0, r5, r0, r2
 8022566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022568:	f814 8000 	ldrb.w	r8, [r4, r0]
 802256c:	4402      	add	r2, r0
 802256e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022570:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022574:	eb00 0708 	add.w	r7, r0, r8
 8022578:	2b00      	cmp	r3, #0
 802257a:	f000 8093 	beq.w	80226a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802257e:	7856      	ldrb	r6, [r2, #1]
 8022580:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022584:	4406      	add	r6, r0
 8022586:	2900      	cmp	r1, #0
 8022588:	f000 8095 	beq.w	80226b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802258c:	1950      	adds	r0, r2, r5
 802258e:	5d52      	ldrb	r2, [r2, r5]
 8022590:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022592:	7840      	ldrb	r0, [r0, #1]
 8022594:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022598:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802259c:	4422      	add	r2, r4
 802259e:	4420      	add	r0, r4
 80225a0:	b29b      	uxth	r3, r3
 80225a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80225a4:	b289      	uxth	r1, r1
 80225a6:	f10c 0c03 	add.w	ip, ip, #3
 80225aa:	f814 b008 	ldrb.w	fp, [r4, r8]
 80225ae:	fb03 f901 	mul.w	r9, r3, r1
 80225b2:	011b      	lsls	r3, r3, #4
 80225b4:	f896 8000 	ldrb.w	r8, [r6]
 80225b8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80225bc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80225c0:	eba3 0309 	sub.w	r3, r3, r9
 80225c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80225c6:	b289      	uxth	r1, r1
 80225c8:	b29b      	uxth	r3, r3
 80225ca:	ebae 0e01 	sub.w	lr, lr, r1
 80225ce:	fb03 f808 	mul.w	r8, r3, r8
 80225d2:	fa1f fe8e 	uxth.w	lr, lr
 80225d6:	fb0e 880b 	mla	r8, lr, fp, r8
 80225da:	f892 b000 	ldrb.w	fp, [r2]
 80225de:	fb01 880b 	mla	r8, r1, fp, r8
 80225e2:	f890 b000 	ldrb.w	fp, [r0]
 80225e6:	fb09 880b 	mla	r8, r9, fp, r8
 80225ea:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 80225ee:	fb1b fb04 	smulbb	fp, fp, r4
 80225f2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80225f6:	fb08 b80a 	mla	r8, r8, sl, fp
 80225fa:	fa1f f888 	uxth.w	r8, r8
 80225fe:	f108 0b01 	add.w	fp, r8, #1
 8022602:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022606:	ea4f 2828 	mov.w	r8, r8, asr #8
 802260a:	f80c 8c06 	strb.w	r8, [ip, #-6]
 802260e:	f896 8001 	ldrb.w	r8, [r6, #1]
 8022612:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022616:	fb03 f808 	mul.w	r8, r3, r8
 802261a:	fb0e 880b 	mla	r8, lr, fp, r8
 802261e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022622:	fb01 880b 	mla	r8, r1, fp, r8
 8022626:	f890 b001 	ldrb.w	fp, [r0, #1]
 802262a:	fb09 880b 	mla	r8, r9, fp, r8
 802262e:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 8022632:	fb1b fb04 	smulbb	fp, fp, r4
 8022636:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802263a:	fb08 b80a 	mla	r8, r8, sl, fp
 802263e:	fa1f f888 	uxth.w	r8, r8
 8022642:	f108 0b01 	add.w	fp, r8, #1
 8022646:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802264a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802264e:	f80c 8c05 	strb.w	r8, [ip, #-5]
 8022652:	78b6      	ldrb	r6, [r6, #2]
 8022654:	78bf      	ldrb	r7, [r7, #2]
 8022656:	4373      	muls	r3, r6
 8022658:	7896      	ldrb	r6, [r2, #2]
 802265a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802265c:	fb0e 3307 	mla	r3, lr, r7, r3
 8022660:	fb01 3306 	mla	r3, r1, r6, r3
 8022664:	7886      	ldrb	r6, [r0, #2]
 8022666:	fb09 3906 	mla	r9, r9, r6, r3
 802266a:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 802266e:	fb13 f304 	smulbb	r3, r3, r4
 8022672:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022676:	fb09 390a 	mla	r9, r9, sl, r3
 802267a:	fa1f f989 	uxth.w	r9, r9
 802267e:	f109 0301 	add.w	r3, r9, #1
 8022682:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022686:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022688:	4413      	add	r3, r2
 802268a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802268c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022690:	9327      	str	r3, [sp, #156]	; 0x9c
 8022692:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022694:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8022698:	4413      	add	r3, r2
 802269a:	9328      	str	r3, [sp, #160]	; 0xa0
 802269c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802269e:	3b01      	subs	r3, #1
 80226a0:	9311      	str	r3, [sp, #68]	; 0x44
 80226a2:	e601      	b.n	80222a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80226a4:	b151      	cbz	r1, 80226bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 80226a6:	5d52      	ldrb	r2, [r2, r5]
 80226a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80226aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80226ae:	4402      	add	r2, r0
 80226b0:	4638      	mov	r0, r7
 80226b2:	463e      	mov	r6, r7
 80226b4:	e774      	b.n	80225a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80226b6:	4638      	mov	r0, r7
 80226b8:	463a      	mov	r2, r7
 80226ba:	e771      	b.n	80225a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 80226bc:	4638      	mov	r0, r7
 80226be:	463a      	mov	r2, r7
 80226c0:	e7f7      	b.n	80226b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80226c2:	b015      	add	sp, #84	; 0x54
 80226c4:	ecbd 8b08 	vpop	{d8-d11}
 80226c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080226cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80226cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226d0:	780d      	ldrb	r5, [r1, #0]
 80226d2:	f891 9002 	ldrb.w	r9, [r1, #2]
 80226d6:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 80226da:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80226de:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80226e2:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80226e6:	f891 9001 	ldrb.w	r9, [r1, #1]
 80226ea:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80226ee:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80226f2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80226f6:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80226fa:	9501      	str	r5, [sp, #4]
 80226fc:	fb06 470c 	mla	r7, r6, ip, r4
 8022700:	2e00      	cmp	r6, #0
 8022702:	eb02 0e07 	add.w	lr, r2, r7
 8022706:	db46      	blt.n	8022796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8022708:	45b0      	cmp	r8, r6
 802270a:	dd44      	ble.n	8022796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 802270c:	2c00      	cmp	r4, #0
 802270e:	db40      	blt.n	8022792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8022710:	45a4      	cmp	ip, r4
 8022712:	dd3e      	ble.n	8022792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8022714:	5dd7      	ldrb	r7, [r2, r7]
 8022716:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802271a:	441f      	add	r7, r3
 802271c:	1c62      	adds	r2, r4, #1
 802271e:	d43d      	bmi.n	802279c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8022720:	4594      	cmp	ip, r2
 8022722:	dd3b      	ble.n	802279c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8022724:	f1ba 0f00 	cmp.w	sl, #0
 8022728:	d038      	beq.n	802279c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 802272a:	f89e 5001 	ldrb.w	r5, [lr, #1]
 802272e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022732:	441d      	add	r5, r3
 8022734:	3601      	adds	r6, #1
 8022736:	d435      	bmi.n	80227a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8022738:	45b0      	cmp	r8, r6
 802273a:	dd33      	ble.n	80227a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 802273c:	b390      	cbz	r0, 80227a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 802273e:	2c00      	cmp	r4, #0
 8022740:	db2e      	blt.n	80227a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8022742:	45a4      	cmp	ip, r4
 8022744:	dd2c      	ble.n	80227a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8022746:	f81e 600c 	ldrb.w	r6, [lr, ip]
 802274a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802274e:	441e      	add	r6, r3
 8022750:	1c62      	adds	r2, r4, #1
 8022752:	d42a      	bmi.n	80227aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8022754:	4594      	cmp	ip, r2
 8022756:	dd28      	ble.n	80227aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8022758:	f1ba 0f00 	cmp.w	sl, #0
 802275c:	d025      	beq.n	80227aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 802275e:	44f4      	add	ip, lr
 8022760:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022764:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022768:	4413      	add	r3, r2
 802276a:	f1ba 0f0f 	cmp.w	sl, #15
 802276e:	f897 8000 	ldrb.w	r8, [r7]
 8022772:	f895 9000 	ldrb.w	r9, [r5]
 8022776:	f896 e000 	ldrb.w	lr, [r6]
 802277a:	f893 c000 	ldrb.w	ip, [r3]
 802277e:	d801      	bhi.n	8022784 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8022780:	280f      	cmp	r0, #15
 8022782:	d914      	bls.n	80227ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8022784:	4b29      	ldr	r3, [pc, #164]	; (802282c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8022786:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802278a:	4a29      	ldr	r2, [pc, #164]	; (8022830 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 802278c:	4829      	ldr	r0, [pc, #164]	; (8022834 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 802278e:	f005 ff39 	bl	8028604 <__assert_func>
 8022792:	af01      	add	r7, sp, #4
 8022794:	e7c2      	b.n	802271c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8022796:	ad01      	add	r5, sp, #4
 8022798:	462f      	mov	r7, r5
 802279a:	e7cb      	b.n	8022734 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802279c:	ad01      	add	r5, sp, #4
 802279e:	e7c9      	b.n	8022734 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80227a0:	ae01      	add	r6, sp, #4
 80227a2:	e7d5      	b.n	8022750 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 80227a4:	ab01      	add	r3, sp, #4
 80227a6:	461e      	mov	r6, r3
 80227a8:	e7df      	b.n	802276a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80227aa:	ab01      	add	r3, sp, #4
 80227ac:	e7dd      	b.n	802276a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80227ae:	fa1f f48a 	uxth.w	r4, sl
 80227b2:	b280      	uxth	r0, r0
 80227b4:	fb04 fa00 	mul.w	sl, r4, r0
 80227b8:	0124      	lsls	r4, r4, #4
 80227ba:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80227be:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80227c2:	b282      	uxth	r2, r0
 80227c4:	eba4 000a 	sub.w	r0, r4, sl
 80227c8:	ebab 0b02 	sub.w	fp, fp, r2
 80227cc:	b280      	uxth	r0, r0
 80227ce:	fa1f fb8b 	uxth.w	fp, fp
 80227d2:	fb00 f909 	mul.w	r9, r0, r9
 80227d6:	fb0b 9808 	mla	r8, fp, r8, r9
 80227da:	fb02 8e0e 	mla	lr, r2, lr, r8
 80227de:	fb0a ec0c 	mla	ip, sl, ip, lr
 80227e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80227e6:	f881 c000 	strb.w	ip, [r1]
 80227ea:	786c      	ldrb	r4, [r5, #1]
 80227ec:	f897 c001 	ldrb.w	ip, [r7, #1]
 80227f0:	4344      	muls	r4, r0
 80227f2:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80227f6:	7874      	ldrb	r4, [r6, #1]
 80227f8:	fb02 cc04 	mla	ip, r2, r4, ip
 80227fc:	785c      	ldrb	r4, [r3, #1]
 80227fe:	fb0a c404 	mla	r4, sl, r4, ip
 8022802:	1224      	asrs	r4, r4, #8
 8022804:	704c      	strb	r4, [r1, #1]
 8022806:	78ad      	ldrb	r5, [r5, #2]
 8022808:	78bc      	ldrb	r4, [r7, #2]
 802280a:	4368      	muls	r0, r5
 802280c:	fb0b 0b04 	mla	fp, fp, r4, r0
 8022810:	78b0      	ldrb	r0, [r6, #2]
 8022812:	fb02 b000 	mla	r0, r2, r0, fp
 8022816:	789a      	ldrb	r2, [r3, #2]
 8022818:	fb0a 0a02 	mla	sl, sl, r2, r0
 802281c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022820:	f881 a002 	strb.w	sl, [r1, #2]
 8022824:	b003      	add	sp, #12
 8022826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802282a:	bf00      	nop
 802282c:	0802d907 	.word	0x0802d907
 8022830:	0802ddfe 	.word	0x0802ddfe
 8022834:	0802d9d0 	.word	0x0802d9d0

08022838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802283c:	ed2d 8b0a 	vpush	{d8-d12}
 8022840:	b08f      	sub	sp, #60	; 0x3c
 8022842:	eeb0 aa40 	vmov.f32	s20, s0
 8022846:	eef0 9a60 	vmov.f32	s19, s1
 802284a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 802284c:	eeb0 9a41 	vmov.f32	s18, s2
 8022850:	9307      	str	r3, [sp, #28]
 8022852:	eeb0 8a62 	vmov.f32	s16, s5
 8022856:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 802285a:	eef0 8a43 	vmov.f32	s17, s6
 802285e:	900d      	str	r0, [sp, #52]	; 0x34
 8022860:	eeb0 ca44 	vmov.f32	s24, s8
 8022864:	6860      	ldr	r0, [r4, #4]
 8022866:	eef0 ba64 	vmov.f32	s23, s9
 802286a:	9309      	str	r3, [sp, #36]	; 0x24
 802286c:	eeb0 ba45 	vmov.f32	s22, s10
 8022870:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022874:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8022878:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 802287c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8022880:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022882:	fb00 1303 	mla	r3, r0, r3, r1
 8022886:	6821      	ldr	r1, [r4, #0]
 8022888:	6854      	ldr	r4, [r2, #4]
 802288a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802288e:	3404      	adds	r4, #4
 8022890:	18cb      	adds	r3, r1, r3
 8022892:	9308      	str	r3, [sp, #32]
 8022894:	6813      	ldr	r3, [r2, #0]
 8022896:	930a      	str	r3, [sp, #40]	; 0x28
 8022898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802289a:	2b00      	cmp	r3, #0
 802289c:	dc03      	bgt.n	80228a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802289e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	f340 81d2 	ble.w	8022c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80228a6:	9b07      	ldr	r3, [sp, #28]
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	f340 80e3 	ble.w	8022a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80228ae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80228b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228b2:	1412      	asrs	r2, r2, #16
 80228b4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80228b8:	d42f      	bmi.n	802291a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80228ba:	1c51      	adds	r1, r2, #1
 80228bc:	428d      	cmp	r5, r1
 80228be:	dd2f      	ble.n	8022920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80228c0:	2b00      	cmp	r3, #0
 80228c2:	db2d      	blt.n	8022920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80228c4:	1c59      	adds	r1, r3, #1
 80228c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228c8:	4288      	cmp	r0, r1
 80228ca:	dd29      	ble.n	8022920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80228cc:	9b07      	ldr	r3, [sp, #28]
 80228ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80228d0:	3b01      	subs	r3, #1
 80228d2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80228d4:	fb02 1203 	mla	r2, r2, r3, r1
 80228d8:	1412      	asrs	r2, r2, #16
 80228da:	d42b      	bmi.n	8022934 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80228dc:	3201      	adds	r2, #1
 80228de:	4295      	cmp	r5, r2
 80228e0:	dd28      	ble.n	8022934 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80228e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80228e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80228e6:	fb02 1303 	mla	r3, r2, r3, r1
 80228ea:	141b      	asrs	r3, r3, #16
 80228ec:	d422      	bmi.n	8022934 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80228ee:	3301      	adds	r3, #1
 80228f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228f2:	429a      	cmp	r2, r3
 80228f4:	dd1e      	ble.n	8022934 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80228f6:	9b08      	ldr	r3, [sp, #32]
 80228f8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80228fc:	f103 0803 	add.w	r8, r3, #3
 8022900:	f1ba 0f00 	cmp.w	sl, #0
 8022904:	f300 8119 	bgt.w	8022b3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8022908:	9b07      	ldr	r3, [sp, #28]
 802290a:	9a08      	ldr	r2, [sp, #32]
 802290c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022910:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022914:	441a      	add	r2, r3
 8022916:	9208      	str	r2, [sp, #32]
 8022918:	e0ae      	b.n	8022a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 802291a:	1c51      	adds	r1, r2, #1
 802291c:	f040 809b 	bne.w	8022a56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8022920:	42aa      	cmp	r2, r5
 8022922:	f280 8098 	bge.w	8022a56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8022926:	1c5a      	adds	r2, r3, #1
 8022928:	f2c0 8095 	blt.w	8022a56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 802292c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802292e:	4293      	cmp	r3, r2
 8022930:	f280 8091 	bge.w	8022a56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8022934:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8022938:	f1bb 0f00 	cmp.w	fp, #0
 802293c:	dde4      	ble.n	8022908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802293e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022940:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022942:	141a      	asrs	r2, r3, #16
 8022944:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022946:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022948:	1400      	asrs	r0, r0, #16
 802294a:	f3c1 3103 	ubfx	r1, r1, #12, #4
 802294e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022952:	f100 80dc 	bmi.w	8022b0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8022956:	1c47      	adds	r7, r0, #1
 8022958:	42bd      	cmp	r5, r7
 802295a:	f340 80da 	ble.w	8022b12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 802295e:	2a00      	cmp	r2, #0
 8022960:	f2c0 80d7 	blt.w	8022b12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022964:	f102 0c01 	add.w	ip, r2, #1
 8022968:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802296a:	4567      	cmp	r7, ip
 802296c:	f340 80d1 	ble.w	8022b12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022970:	fb02 0005 	mla	r0, r2, r5, r0
 8022974:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022978:	f817 8000 	ldrb.w	r8, [r7, r0]
 802297c:	4402      	add	r2, r0
 802297e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022982:	eb04 0c08 	add.w	ip, r4, r8
 8022986:	2b00      	cmp	r3, #0
 8022988:	f000 80b3 	beq.w	8022af2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 802298c:	7857      	ldrb	r7, [r2, #1]
 802298e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022992:	4427      	add	r7, r4
 8022994:	2900      	cmp	r1, #0
 8022996:	f000 80b4 	beq.w	8022b02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 802299a:	1950      	adds	r0, r2, r5
 802299c:	5d52      	ldrb	r2, [r2, r5]
 802299e:	7840      	ldrb	r0, [r0, #1]
 80229a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80229a8:	4422      	add	r2, r4
 80229aa:	4420      	add	r0, r4
 80229ac:	b29b      	uxth	r3, r3
 80229ae:	f814 a008 	ldrb.w	sl, [r4, r8]
 80229b2:	b289      	uxth	r1, r1
 80229b4:	f897 8000 	ldrb.w	r8, [r7]
 80229b8:	fb03 f901 	mul.w	r9, r3, r1
 80229bc:	011b      	lsls	r3, r3, #4
 80229be:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80229c2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80229c6:	eba3 0309 	sub.w	r3, r3, r9
 80229ca:	b289      	uxth	r1, r1
 80229cc:	b29b      	uxth	r3, r3
 80229ce:	ebae 0e01 	sub.w	lr, lr, r1
 80229d2:	fb03 f808 	mul.w	r8, r3, r8
 80229d6:	fa1f fe8e 	uxth.w	lr, lr
 80229da:	fb0e 880a 	mla	r8, lr, sl, r8
 80229de:	f892 a000 	ldrb.w	sl, [r2]
 80229e2:	fb01 880a 	mla	r8, r1, sl, r8
 80229e6:	f890 a000 	ldrb.w	sl, [r0]
 80229ea:	fb09 880a 	mla	r8, r9, sl, r8
 80229ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 80229f2:	f886 8000 	strb.w	r8, [r6]
 80229f6:	f897 8001 	ldrb.w	r8, [r7, #1]
 80229fa:	f89c a001 	ldrb.w	sl, [ip, #1]
 80229fe:	fb03 f808 	mul.w	r8, r3, r8
 8022a02:	fb0e 880a 	mla	r8, lr, sl, r8
 8022a06:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022a0a:	fb01 880a 	mla	r8, r1, sl, r8
 8022a0e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022a12:	fb09 880a 	mla	r8, r9, sl, r8
 8022a16:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022a1a:	f886 8001 	strb.w	r8, [r6, #1]
 8022a1e:	78bf      	ldrb	r7, [r7, #2]
 8022a20:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022a24:	437b      	muls	r3, r7
 8022a26:	7892      	ldrb	r2, [r2, #2]
 8022a28:	fb0e 330c 	mla	r3, lr, ip, r3
 8022a2c:	fb01 3102 	mla	r1, r1, r2, r3
 8022a30:	7882      	ldrb	r2, [r0, #2]
 8022a32:	fb09 1902 	mla	r9, r9, r2, r1
 8022a36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022a3a:	f886 9002 	strb.w	r9, [r6, #2]
 8022a3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022a40:	3603      	adds	r6, #3
 8022a42:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022a44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022a48:	4413      	add	r3, r2
 8022a4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022a4c:	9323      	str	r3, [sp, #140]	; 0x8c
 8022a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a50:	4413      	add	r3, r2
 8022a52:	9324      	str	r3, [sp, #144]	; 0x90
 8022a54:	e770      	b.n	8022938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8022a56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022a58:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022a5a:	4413      	add	r3, r2
 8022a5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022a5e:	9323      	str	r3, [sp, #140]	; 0x8c
 8022a60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a62:	4413      	add	r3, r2
 8022a64:	9324      	str	r3, [sp, #144]	; 0x90
 8022a66:	9b07      	ldr	r3, [sp, #28]
 8022a68:	3b01      	subs	r3, #1
 8022a6a:	9307      	str	r3, [sp, #28]
 8022a6c:	9b08      	ldr	r3, [sp, #32]
 8022a6e:	3303      	adds	r3, #3
 8022a70:	9308      	str	r3, [sp, #32]
 8022a72:	e718      	b.n	80228a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022a74:	f47f af2a 	bne.w	80228cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	f340 80e5 	ble.w	8022c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8022a80:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022a86:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022a8a:	eef0 6a48 	vmov.f32	s13, s16
 8022a8e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022a92:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022a96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a9a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8022a9e:	eef0 6a68 	vmov.f32	s13, s17
 8022aa2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022aa6:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8022aaa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022aae:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022ab2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022ab6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022aba:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022abe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022ac2:	ee18 2a10 	vmov	r2, s16
 8022ac6:	eeb0 8a47 	vmov.f32	s16, s14
 8022aca:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ace:	ee18 2a90 	vmov	r2, s17
 8022ad2:	9325      	str	r3, [sp, #148]	; 0x94
 8022ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022ad6:	eef0 8a67 	vmov.f32	s17, s15
 8022ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ade:	9326      	str	r3, [sp, #152]	; 0x98
 8022ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ae4:	3b01      	subs	r3, #1
 8022ae6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022aea:	bf08      	it	eq
 8022aec:	4613      	moveq	r3, r2
 8022aee:	9307      	str	r3, [sp, #28]
 8022af0:	e6d2      	b.n	8022898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8022af2:	b149      	cbz	r1, 8022b08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8022af4:	5d52      	ldrb	r2, [r2, r5]
 8022af6:	4660      	mov	r0, ip
 8022af8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022afc:	4422      	add	r2, r4
 8022afe:	4667      	mov	r7, ip
 8022b00:	e754      	b.n	80229ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8022b02:	4660      	mov	r0, ip
 8022b04:	4662      	mov	r2, ip
 8022b06:	e751      	b.n	80229ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8022b08:	4660      	mov	r0, ip
 8022b0a:	4662      	mov	r2, ip
 8022b0c:	e7f7      	b.n	8022afe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8022b0e:	1c47      	adds	r7, r0, #1
 8022b10:	d195      	bne.n	8022a3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022b12:	4285      	cmp	r5, r0
 8022b14:	dd93      	ble.n	8022a3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022b16:	1c57      	adds	r7, r2, #1
 8022b18:	db91      	blt.n	8022a3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022b1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022b1c:	4297      	cmp	r7, r2
 8022b1e:	dd8e      	ble.n	8022a3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022b20:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022b24:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8022b28:	e9cd 5700 	strd	r5, r7, [sp]
 8022b2c:	4623      	mov	r3, r4
 8022b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b30:	4631      	mov	r1, r6
 8022b32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022b34:	f7ff fdca 	bl	80226cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8022b38:	e781      	b.n	8022a3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022b3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022b3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022b3e:	1410      	asrs	r0, r2, #16
 8022b40:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022b44:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022b46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022b48:	1412      	asrs	r2, r2, #16
 8022b4a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022b4e:	fb05 2000 	mla	r0, r5, r0, r2
 8022b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b54:	f816 e000 	ldrb.w	lr, [r6, r0]
 8022b58:	4402      	add	r2, r0
 8022b5a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022b5e:	eb04 070e 	add.w	r7, r4, lr
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d063      	beq.n	8022c2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8022b66:	7856      	ldrb	r6, [r2, #1]
 8022b68:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022b6c:	4426      	add	r6, r4
 8022b6e:	2900      	cmp	r1, #0
 8022b70:	d065      	beq.n	8022c3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022b72:	1950      	adds	r0, r2, r5
 8022b74:	5d52      	ldrb	r2, [r2, r5]
 8022b76:	7840      	ldrb	r0, [r0, #1]
 8022b78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022b80:	4422      	add	r2, r4
 8022b82:	4420      	add	r0, r4
 8022b84:	b29b      	uxth	r3, r3
 8022b86:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8022b8a:	b289      	uxth	r1, r1
 8022b8c:	f896 e000 	ldrb.w	lr, [r6]
 8022b90:	f108 0803 	add.w	r8, r8, #3
 8022b94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022b98:	fb03 f901 	mul.w	r9, r3, r1
 8022b9c:	011b      	lsls	r3, r3, #4
 8022b9e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022ba2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8022ba6:	eba3 0309 	sub.w	r3, r3, r9
 8022baa:	b289      	uxth	r1, r1
 8022bac:	b29b      	uxth	r3, r3
 8022bae:	ebac 0c01 	sub.w	ip, ip, r1
 8022bb2:	fb03 fe0e 	mul.w	lr, r3, lr
 8022bb6:	fa1f fc8c 	uxth.w	ip, ip
 8022bba:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022bbe:	f892 b000 	ldrb.w	fp, [r2]
 8022bc2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022bc6:	f890 b000 	ldrb.w	fp, [r0]
 8022bca:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022bce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022bd2:	f808 ec06 	strb.w	lr, [r8, #-6]
 8022bd6:	f896 e001 	ldrb.w	lr, [r6, #1]
 8022bda:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022bde:	fb03 fe0e 	mul.w	lr, r3, lr
 8022be2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022be6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022bea:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022bee:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022bf2:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022bf6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022bfa:	f808 ec05 	strb.w	lr, [r8, #-5]
 8022bfe:	78b6      	ldrb	r6, [r6, #2]
 8022c00:	78bf      	ldrb	r7, [r7, #2]
 8022c02:	4373      	muls	r3, r6
 8022c04:	7896      	ldrb	r6, [r2, #2]
 8022c06:	7882      	ldrb	r2, [r0, #2]
 8022c08:	fb0c 3307 	mla	r3, ip, r7, r3
 8022c0c:	fb01 3306 	mla	r3, r1, r6, r3
 8022c10:	fb09 3902 	mla	r9, r9, r2, r3
 8022c14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022c16:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022c18:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022c1c:	4413      	add	r3, r2
 8022c1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022c20:	f808 9c04 	strb.w	r9, [r8, #-4]
 8022c24:	9323      	str	r3, [sp, #140]	; 0x8c
 8022c26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c28:	4413      	add	r3, r2
 8022c2a:	9324      	str	r3, [sp, #144]	; 0x90
 8022c2c:	e668      	b.n	8022900 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8022c2e:	b149      	cbz	r1, 8022c44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8022c30:	5d52      	ldrb	r2, [r2, r5]
 8022c32:	4638      	mov	r0, r7
 8022c34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c38:	4422      	add	r2, r4
 8022c3a:	463e      	mov	r6, r7
 8022c3c:	e7a2      	b.n	8022b84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022c3e:	4638      	mov	r0, r7
 8022c40:	463a      	mov	r2, r7
 8022c42:	e79f      	b.n	8022b84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022c44:	4638      	mov	r0, r7
 8022c46:	463a      	mov	r2, r7
 8022c48:	e7f7      	b.n	8022c3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8022c4a:	b00f      	add	sp, #60	; 0x3c
 8022c4c:	ecbd 8b0a 	vpop	{d8-d12}
 8022c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8022c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c58:	b087      	sub	sp, #28
 8022c5a:	7888      	ldrb	r0, [r1, #2]
 8022c5c:	9002      	str	r0, [sp, #8]
 8022c5e:	7848      	ldrb	r0, [r1, #1]
 8022c60:	9e02      	ldr	r6, [sp, #8]
 8022c62:	9003      	str	r0, [sp, #12]
 8022c64:	7808      	ldrb	r0, [r1, #0]
 8022c66:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8022c6a:	9004      	str	r0, [sp, #16]
 8022c6c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022c70:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8022c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8022c78:	9e03      	ldr	r6, [sp, #12]
 8022c7a:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8022c7e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8022c82:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8022c86:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8022c8a:	fb04 7508 	mla	r5, r4, r8, r7
 8022c8e:	2c00      	cmp	r4, #0
 8022c90:	eb02 0905 	add.w	r9, r2, r5
 8022c94:	db45      	blt.n	8022d22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8022c96:	45a2      	cmp	sl, r4
 8022c98:	dd43      	ble.n	8022d22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8022c9a:	2f00      	cmp	r7, #0
 8022c9c:	db3f      	blt.n	8022d1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8022c9e:	45b8      	cmp	r8, r7
 8022ca0:	dd3d      	ble.n	8022d1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8022ca2:	5d52      	ldrb	r2, [r2, r5]
 8022ca4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022ca8:	1c7a      	adds	r2, r7, #1
 8022caa:	d43d      	bmi.n	8022d28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022cac:	4590      	cmp	r8, r2
 8022cae:	dd3b      	ble.n	8022d28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022cb0:	f1bc 0f00 	cmp.w	ip, #0
 8022cb4:	d038      	beq.n	8022d28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022cb6:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022cba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022cbe:	3401      	adds	r4, #1
 8022cc0:	d436      	bmi.n	8022d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022cc2:	45a2      	cmp	sl, r4
 8022cc4:	dd34      	ble.n	8022d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022cc6:	f1be 0f00 	cmp.w	lr, #0
 8022cca:	d031      	beq.n	8022d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022ccc:	2f00      	cmp	r7, #0
 8022cce:	db2d      	blt.n	8022d2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022cd0:	45b8      	cmp	r8, r7
 8022cd2:	dd2b      	ble.n	8022d2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022cd4:	f819 2008 	ldrb.w	r2, [r9, r8]
 8022cd8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022cdc:	3701      	adds	r7, #1
 8022cde:	d409      	bmi.n	8022cf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022ce0:	45b8      	cmp	r8, r7
 8022ce2:	dd07      	ble.n	8022cf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022ce4:	f1bc 0f00 	cmp.w	ip, #0
 8022ce8:	d004      	beq.n	8022cf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022cea:	44c8      	add	r8, r9
 8022cec:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022cf0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022cf4:	f1bc 0f0f 	cmp.w	ip, #15
 8022cf8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022cfc:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022d00:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022d04:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022d08:	d802      	bhi.n	8022d10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8022d0a:	f1be 0f0f 	cmp.w	lr, #15
 8022d0e:	d911      	bls.n	8022d34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8022d10:	4b77      	ldr	r3, [pc, #476]	; (8022ef0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8022d12:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022d16:	4a77      	ldr	r2, [pc, #476]	; (8022ef4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8022d18:	4877      	ldr	r0, [pc, #476]	; (8022ef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8022d1a:	f005 fc73 	bl	8028604 <__assert_func>
 8022d1e:	4606      	mov	r6, r0
 8022d20:	e7c2      	b.n	8022ca8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8022d22:	4605      	mov	r5, r0
 8022d24:	4606      	mov	r6, r0
 8022d26:	e7ca      	b.n	8022cbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022d28:	4605      	mov	r5, r0
 8022d2a:	e7c8      	b.n	8022cbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022d2c:	4604      	mov	r4, r0
 8022d2e:	e7d5      	b.n	8022cdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8022d30:	4604      	mov	r4, r0
 8022d32:	e7df      	b.n	8022cf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022d34:	fa1f fc8c 	uxth.w	ip, ip
 8022d38:	fa1f f28e 	uxth.w	r2, lr
 8022d3c:	fb02 fe0c 	mul.w	lr, r2, ip
 8022d40:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022d44:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8022d48:	ebac 070e 	sub.w	r7, ip, lr
 8022d4c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8022d50:	b292      	uxth	r2, r2
 8022d52:	b2bf      	uxth	r7, r7
 8022d54:	1a9b      	subs	r3, r3, r2
 8022d56:	fb07 fc0a 	mul.w	ip, r7, sl
 8022d5a:	b29b      	uxth	r3, r3
 8022d5c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022d60:	9301      	str	r3, [sp, #4]
 8022d62:	fb02 cc09 	mla	ip, r2, r9, ip
 8022d66:	fb0e cc08 	mla	ip, lr, r8, ip
 8022d6a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022d6e:	9305      	str	r3, [sp, #20]
 8022d70:	2b00      	cmp	r3, #0
 8022d72:	f000 80b9 	beq.w	8022ee8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8022d76:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022d7a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d7e:	fb0b fc0c 	mul.w	ip, fp, ip
 8022d82:	fb0b f606 	mul.w	r6, fp, r6
 8022d86:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022d8a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022d8e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022d92:	44dc      	add	ip, fp
 8022d94:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022d98:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022d9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022da0:	fb0a fb0b 	mul.w	fp, sl, fp
 8022da4:	fb0a fa05 	mul.w	sl, sl, r5
 8022da8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8022dac:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022db0:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8022db4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022db8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022dbc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022dc0:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8022dc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022dc8:	0a36      	lsrs	r6, r6, #8
 8022dca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022dce:	44dc      	add	ip, fp
 8022dd0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022dd4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022dd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ddc:	fb09 fb0b 	mul.w	fp, r9, fp
 8022de0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022de4:	fb09 f904 	mul.w	r9, r9, r4
 8022de8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022dec:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8022df0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022df4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022df8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022dfc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022e00:	fb0c fc07 	mul.w	ip, ip, r7
 8022e04:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022e08:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8022e0c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022e10:	445d      	add	r5, fp
 8022e12:	fb08 f404 	mul.w	r4, r8, r4
 8022e16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022e1a:	fb08 f800 	mul.w	r8, r8, r0
 8022e1e:	0a2d      	lsrs	r5, r5, #8
 8022e20:	0a20      	lsrs	r0, r4, #8
 8022e22:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022e26:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022e2a:	fb07 f70a 	mul.w	r7, r7, sl
 8022e2e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022e32:	4404      	add	r4, r0
 8022e34:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8022e38:	0a24      	lsrs	r4, r4, #8
 8022e3a:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8022e3e:	9801      	ldr	r0, [sp, #4]
 8022e40:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022e44:	fb03 cc00 	mla	ip, r3, r0, ip
 8022e48:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022e4c:	fb00 7606 	mla	r6, r0, r6, r7
 8022e50:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8022e54:	fb04 cc0e 	mla	ip, r4, lr, ip
 8022e58:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022e5c:	b280      	uxth	r0, r0
 8022e5e:	9c04      	ldr	r4, [sp, #16]
 8022e60:	fb05 cc02 	mla	ip, r5, r2, ip
 8022e64:	fb0e 6e08 	mla	lr, lr, r8, r6
 8022e68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e6c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022e70:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8022e74:	fb02 ec0c 	mla	ip, r2, ip, lr
 8022e78:	9a05      	ldr	r2, [sp, #20]
 8022e7a:	4342      	muls	r2, r0
 8022e7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e80:	1c53      	adds	r3, r2, #1
 8022e82:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022e86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022e8a:	ea45 0c0c 	orr.w	ip, r5, ip
 8022e8e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022e92:	fa5f f28c 	uxtb.w	r2, ip
 8022e96:	b2db      	uxtb	r3, r3
 8022e98:	fb14 f403 	smulbb	r4, r4, r3
 8022e9c:	fb02 4200 	mla	r2, r2, r0, r4
 8022ea0:	b292      	uxth	r2, r2
 8022ea2:	1c54      	adds	r4, r2, #1
 8022ea4:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8022ea8:	9c03      	ldr	r4, [sp, #12]
 8022eaa:	fb14 f403 	smulbb	r4, r4, r3
 8022eae:	1212      	asrs	r2, r2, #8
 8022eb0:	700a      	strb	r2, [r1, #0]
 8022eb2:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8022eb6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022eba:	fb02 4200 	mla	r2, r2, r0, r4
 8022ebe:	b292      	uxth	r2, r2
 8022ec0:	1c54      	adds	r4, r2, #1
 8022ec2:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8022ec6:	1212      	asrs	r2, r2, #8
 8022ec8:	704a      	strb	r2, [r1, #1]
 8022eca:	9a02      	ldr	r2, [sp, #8]
 8022ecc:	fb12 f303 	smulbb	r3, r2, r3
 8022ed0:	fb0c 3c00 	mla	ip, ip, r0, r3
 8022ed4:	fa1f fc8c 	uxth.w	ip, ip
 8022ed8:	f10c 0301 	add.w	r3, ip, #1
 8022edc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022ee0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022ee4:	f881 c002 	strb.w	ip, [r1, #2]
 8022ee8:	b007      	add	sp, #28
 8022eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eee:	bf00      	nop
 8022ef0:	0802d907 	.word	0x0802d907
 8022ef4:	0802ddfe 	.word	0x0802ddfe
 8022ef8:	0802d9d0 	.word	0x0802d9d0

08022efc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f00:	ed2d 8b08 	vpush	{d8-d11}
 8022f04:	b09b      	sub	sp, #108	; 0x6c
 8022f06:	eeb0 aa40 	vmov.f32	s20, s0
 8022f0a:	eef0 9a60 	vmov.f32	s19, s1
 8022f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8022f10:	eeb0 9a41 	vmov.f32	s18, s2
 8022f14:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8022f18:	eeb0 8a62 	vmov.f32	s16, s5
 8022f1c:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8022f1e:	eef0 8a43 	vmov.f32	s17, s6
 8022f22:	9312      	str	r3, [sp, #72]	; 0x48
 8022f24:	eef0 ba44 	vmov.f32	s23, s8
 8022f28:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022f2c:	eeb0 ba64 	vmov.f32	s22, s9
 8022f30:	9019      	str	r0, [sp, #100]	; 0x64
 8022f32:	eef0 aa45 	vmov.f32	s21, s10
 8022f36:	9114      	str	r1, [sp, #80]	; 0x50
 8022f38:	9317      	str	r3, [sp, #92]	; 0x5c
 8022f3a:	6868      	ldr	r0, [r5, #4]
 8022f3c:	9218      	str	r2, [sp, #96]	; 0x60
 8022f3e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022f40:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8022f44:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022f48:	fb00 1303 	mla	r3, r0, r3, r1
 8022f4c:	6829      	ldr	r1, [r5, #0]
 8022f4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f52:	18cb      	adds	r3, r1, r3
 8022f54:	930d      	str	r3, [sp, #52]	; 0x34
 8022f56:	6813      	ldr	r3, [r2, #0]
 8022f58:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f5a:	6853      	ldr	r3, [r2, #4]
 8022f5c:	3304      	adds	r3, #4
 8022f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8022f60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022f62:	2b00      	cmp	r3, #0
 8022f64:	dc03      	bgt.n	8022f6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022f66:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022f68:	2b00      	cmp	r3, #0
 8022f6a:	f340 8352 	ble.w	8023612 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8022f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f70:	2b00      	cmp	r3, #0
 8022f72:	f340 81a2 	ble.w	80232ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8022f76:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022f78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022f7a:	1412      	asrs	r2, r2, #16
 8022f7c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022f80:	d431      	bmi.n	8022fe6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8022f82:	1c51      	adds	r1, r2, #1
 8022f84:	428c      	cmp	r4, r1
 8022f86:	dd31      	ble.n	8022fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022f88:	2b00      	cmp	r3, #0
 8022f8a:	db2f      	blt.n	8022fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022f8c:	1c59      	adds	r1, r3, #1
 8022f8e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022f90:	4288      	cmp	r0, r1
 8022f92:	dd2b      	ble.n	8022fec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f96:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022f98:	3b01      	subs	r3, #1
 8022f9a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8022f9c:	fb02 1203 	mla	r2, r2, r3, r1
 8022fa0:	1412      	asrs	r2, r2, #16
 8022fa2:	d42d      	bmi.n	8023000 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022fa4:	3201      	adds	r2, #1
 8022fa6:	4294      	cmp	r4, r2
 8022fa8:	dd2a      	ble.n	8023000 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022faa:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022fac:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022fae:	fb02 1303 	mla	r3, r2, r3, r1
 8022fb2:	141b      	asrs	r3, r3, #16
 8022fb4:	d424      	bmi.n	8023000 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022fb6:	3301      	adds	r3, #1
 8022fb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022fba:	429a      	cmp	r2, r3
 8022fbc:	dd20      	ble.n	8023000 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022fc0:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8022fc4:	f103 0e03 	add.w	lr, r3, #3
 8022fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fca:	9315      	str	r3, [sp, #84]	; 0x54
 8022fcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022fce:	2b00      	cmp	r3, #0
 8022fd0:	f300 81de 	bgt.w	8023390 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8022fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022fd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022fdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022fe0:	441a      	add	r2, r3
 8022fe2:	920d      	str	r2, [sp, #52]	; 0x34
 8022fe4:	e16b      	b.n	80232be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8022fe6:	1c51      	adds	r1, r2, #1
 8022fe8:	f040 8158 	bne.w	802329c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022fec:	42a2      	cmp	r2, r4
 8022fee:	f280 8155 	bge.w	802329c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022ff2:	1c5a      	adds	r2, r3, #1
 8022ff4:	f2c0 8152 	blt.w	802329c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022ff8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022ffa:	4293      	cmp	r3, r2
 8022ffc:	f280 814e 	bge.w	802329c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8023000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023002:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023004:	9316      	str	r3, [sp, #88]	; 0x58
 8023006:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 802300a:	9315      	str	r3, [sp, #84]	; 0x54
 802300c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802300e:	2b00      	cmp	r3, #0
 8023010:	dde0      	ble.n	8022fd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023012:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023014:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023016:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802301a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802301c:	141b      	asrs	r3, r3, #16
 802301e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023022:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023024:	1412      	asrs	r2, r2, #16
 8023026:	f100 819a 	bmi.w	802335e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802302a:	1c55      	adds	r5, r2, #1
 802302c:	42ac      	cmp	r4, r5
 802302e:	f340 8198 	ble.w	8023362 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8023032:	2b00      	cmp	r3, #0
 8023034:	f2c0 8195 	blt.w	8023362 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8023038:	1c5d      	adds	r5, r3, #1
 802303a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802303c:	42af      	cmp	r7, r5
 802303e:	f340 8190 	ble.w	8023362 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8023042:	fb03 2304 	mla	r3, r3, r4, r2
 8023046:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023048:	18d5      	adds	r5, r2, r3
 802304a:	5cd3      	ldrb	r3, [r2, r3]
 802304c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802304e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023052:	0e1f      	lsrs	r7, r3, #24
 8023054:	2800      	cmp	r0, #0
 8023056:	f000 8171 	beq.w	802333c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802305a:	f895 c001 	ldrb.w	ip, [r5, #1]
 802305e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8023062:	920e      	str	r2, [sp, #56]	; 0x38
 8023064:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023068:	2900      	cmp	r1, #0
 802306a:	f000 8172 	beq.w	8023352 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802306e:	eb05 0c04 	add.w	ip, r5, r4
 8023072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023074:	5d2d      	ldrb	r5, [r5, r4]
 8023076:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 802307a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802307e:	950b      	str	r5, [sp, #44]	; 0x2c
 8023080:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023084:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023086:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802308a:	0e15      	lsrs	r5, r2, #24
 802308c:	920f      	str	r2, [sp, #60]	; 0x3c
 802308e:	b280      	uxth	r0, r0
 8023090:	b289      	uxth	r1, r1
 8023092:	fb00 fa01 	mul.w	sl, r0, r1
 8023096:	0100      	lsls	r0, r0, #4
 8023098:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802309c:	eba0 080a 	sub.w	r8, r0, sl
 80230a0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80230a4:	b289      	uxth	r1, r1
 80230a6:	fa1f f888 	uxth.w	r8, r8
 80230aa:	1a52      	subs	r2, r2, r1
 80230ac:	fb08 f00e 	mul.w	r0, r8, lr
 80230b0:	b292      	uxth	r2, r2
 80230b2:	fb02 0007 	mla	r0, r2, r7, r0
 80230b6:	fb01 0009 	mla	r0, r1, r9, r0
 80230ba:	fb0a 0005 	mla	r0, sl, r5, r0
 80230be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80230c2:	2800      	cmp	r0, #0
 80230c4:	f000 80dd 	beq.w	8023282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80230c8:	2fff      	cmp	r7, #255	; 0xff
 80230ca:	d01a      	beq.n	8023102 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80230cc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80230d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80230d4:	fb07 fc0c 	mul.w	ip, r7, ip
 80230d8:	435f      	muls	r7, r3
 80230da:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80230de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80230e2:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80230e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230ea:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80230ee:	4463      	add	r3, ip
 80230f0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80230f4:	0a1b      	lsrs	r3, r3, #8
 80230f6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80230fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230fe:	ea43 030b 	orr.w	r3, r3, fp
 8023102:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023106:	d01e      	beq.n	8023146 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8023108:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802310a:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802310e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023112:	fb0e fb0b 	mul.w	fp, lr, fp
 8023116:	fb0e fe07 	mul.w	lr, lr, r7
 802311a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802311e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023122:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023126:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802312a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802312e:	44dc      	add	ip, fp
 8023130:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023134:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023138:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802313c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023140:	ea4c 070e 	orr.w	r7, ip, lr
 8023144:	970e      	str	r7, [sp, #56]	; 0x38
 8023146:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802314a:	d01e      	beq.n	802318a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802314c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802314e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023152:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023156:	fb09 fe0e 	mul.w	lr, r9, lr
 802315a:	fb09 f907 	mul.w	r9, r9, r7
 802315e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023162:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023166:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802316a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802316e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023172:	44f4      	add	ip, lr
 8023174:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023178:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802317c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023180:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023184:	ea4c 0709 	orr.w	r7, ip, r9
 8023188:	970b      	str	r7, [sp, #44]	; 0x2c
 802318a:	2dff      	cmp	r5, #255	; 0xff
 802318c:	d01c      	beq.n	80231c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 802318e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023190:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023194:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023198:	fb05 fe0e 	mul.w	lr, r5, lr
 802319c:	437d      	muls	r5, r7
 802319e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80231a2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80231a6:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80231aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231ae:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80231b2:	44f4      	add	ip, lr
 80231b4:	0a2d      	lsrs	r5, r5, #8
 80231b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231ba:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80231be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231c2:	ea4c 0505 	orr.w	r5, ip, r5
 80231c6:	950f      	str	r5, [sp, #60]	; 0x3c
 80231c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80231ca:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80231ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231d2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80231d6:	fb08 f505 	mul.w	r5, r8, r5
 80231da:	fb02 5507 	mla	r5, r2, r7, r5
 80231de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80231e0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231e4:	fb01 5507 	mla	r5, r1, r7, r5
 80231e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80231ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80231ee:	fb0a 5507 	mla	r5, sl, r7, r5
 80231f2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80231f4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80231f8:	0a2d      	lsrs	r5, r5, #8
 80231fa:	fb08 f807 	mul.w	r8, r8, r7
 80231fe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023202:	fb02 8303 	mla	r3, r2, r3, r8
 8023206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023208:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802320c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802320e:	fb01 330c 	mla	r3, r1, ip, r3
 8023212:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023216:	fb0a 3a01 	mla	sl, sl, r1, r3
 802321a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802321c:	9915      	ldr	r1, [sp, #84]	; 0x54
 802321e:	4343      	muls	r3, r0
 8023220:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023224:	1c58      	adds	r0, r3, #1
 8023226:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802322a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802322e:	ea45 050a 	orr.w	r5, r5, sl
 8023232:	7833      	ldrb	r3, [r6, #0]
 8023234:	b2ea      	uxtb	r2, r5
 8023236:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802323a:	fb12 f201 	smulbb	r2, r2, r1
 802323e:	b2c0      	uxtb	r0, r0
 8023240:	fb03 2300 	mla	r3, r3, r0, r2
 8023244:	b29b      	uxth	r3, r3
 8023246:	1c5a      	adds	r2, r3, #1
 8023248:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802324c:	7872      	ldrb	r2, [r6, #1]
 802324e:	fb12 f200 	smulbb	r2, r2, r0
 8023252:	121b      	asrs	r3, r3, #8
 8023254:	7033      	strb	r3, [r6, #0]
 8023256:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802325a:	0c2d      	lsrs	r5, r5, #16
 802325c:	fb03 2301 	mla	r3, r3, r1, r2
 8023260:	b29b      	uxth	r3, r3
 8023262:	1c5a      	adds	r2, r3, #1
 8023264:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023268:	121b      	asrs	r3, r3, #8
 802326a:	7073      	strb	r3, [r6, #1]
 802326c:	78b3      	ldrb	r3, [r6, #2]
 802326e:	fb13 f000 	smulbb	r0, r3, r0
 8023272:	fb05 0501 	mla	r5, r5, r1, r0
 8023276:	b2ad      	uxth	r5, r5
 8023278:	1c6b      	adds	r3, r5, #1
 802327a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802327e:	122d      	asrs	r5, r5, #8
 8023280:	70b5      	strb	r5, [r6, #2]
 8023282:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023284:	3603      	adds	r6, #3
 8023286:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023288:	4413      	add	r3, r2
 802328a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802328c:	932d      	str	r3, [sp, #180]	; 0xb4
 802328e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023290:	4413      	add	r3, r2
 8023292:	932e      	str	r3, [sp, #184]	; 0xb8
 8023294:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023296:	3b01      	subs	r3, #1
 8023298:	9316      	str	r3, [sp, #88]	; 0x58
 802329a:	e6b7      	b.n	802300c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802329c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802329e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80232a0:	4413      	add	r3, r2
 80232a2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80232a4:	932d      	str	r3, [sp, #180]	; 0xb4
 80232a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232a8:	4413      	add	r3, r2
 80232aa:	932e      	str	r3, [sp, #184]	; 0xb8
 80232ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232ae:	3b01      	subs	r3, #1
 80232b0:	930a      	str	r3, [sp, #40]	; 0x28
 80232b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80232b4:	3303      	adds	r3, #3
 80232b6:	930d      	str	r3, [sp, #52]	; 0x34
 80232b8:	e659      	b.n	8022f6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80232ba:	f47f ae6b 	bne.w	8022f94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80232be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80232c0:	2b00      	cmp	r3, #0
 80232c2:	f340 81a6 	ble.w	8023612 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80232c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80232ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80232cc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80232d0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80232d4:	eef0 6a48 	vmov.f32	s13, s16
 80232d8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80232dc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80232e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232e4:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80232e8:	eef0 6a68 	vmov.f32	s13, s17
 80232ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232f0:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80232f4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80232f8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80232fc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023300:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023304:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023308:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802330c:	ee18 2a10 	vmov	r2, s16
 8023310:	eeb0 8a47 	vmov.f32	s16, s14
 8023314:	fb92 f3f3 	sdiv	r3, r2, r3
 8023318:	ee18 2a90 	vmov	r2, s17
 802331c:	932f      	str	r3, [sp, #188]	; 0xbc
 802331e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023320:	eef0 8a67 	vmov.f32	s17, s15
 8023324:	fb92 f3f3 	sdiv	r3, r2, r3
 8023328:	9330      	str	r3, [sp, #192]	; 0xc0
 802332a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802332c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802332e:	3b01      	subs	r3, #1
 8023330:	9314      	str	r3, [sp, #80]	; 0x50
 8023332:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023334:	bf08      	it	eq
 8023336:	4613      	moveq	r3, r2
 8023338:	930a      	str	r3, [sp, #40]	; 0x28
 802333a:	e611      	b.n	8022f60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802333c:	b161      	cbz	r1, 8023358 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 802333e:	5d2a      	ldrb	r2, [r5, r4]
 8023340:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023342:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023346:	25ff      	movs	r5, #255	; 0xff
 8023348:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802334c:	920b      	str	r2, [sp, #44]	; 0x2c
 802334e:	46ae      	mov	lr, r5
 8023350:	e69d      	b.n	802308e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8023352:	25ff      	movs	r5, #255	; 0xff
 8023354:	46a9      	mov	r9, r5
 8023356:	e69a      	b.n	802308e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8023358:	25ff      	movs	r5, #255	; 0xff
 802335a:	46a9      	mov	r9, r5
 802335c:	e7f7      	b.n	802334e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 802335e:	1c57      	adds	r7, r2, #1
 8023360:	d18f      	bne.n	8023282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023362:	4294      	cmp	r4, r2
 8023364:	dd8d      	ble.n	8023282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023366:	1c5d      	adds	r5, r3, #1
 8023368:	db8b      	blt.n	8023282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802336a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802336c:	429d      	cmp	r5, r3
 802336e:	dd88      	ble.n	8023282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023370:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8023372:	9202      	str	r2, [sp, #8]
 8023374:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023376:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802337a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802337c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802337e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8023382:	e9cd 4300 	strd	r4, r3, [sp]
 8023386:	4631      	mov	r1, r6
 8023388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802338a:	f7ff fc63 	bl	8022c54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802338e:	e778      	b.n	8023282 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023390:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023392:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023394:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023398:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802339a:	1412      	asrs	r2, r2, #16
 802339c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80233a0:	141b      	asrs	r3, r3, #16
 80233a2:	fb04 2303 	mla	r3, r4, r3, r2
 80233a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80233a8:	18d5      	adds	r5, r2, r3
 80233aa:	5cd3      	ldrb	r3, [r2, r3]
 80233ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80233ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80233b2:	0e1e      	lsrs	r6, r3, #24
 80233b4:	2900      	cmp	r1, #0
 80233b6:	f000 811b 	beq.w	80235f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80233ba:	786a      	ldrb	r2, [r5, #1]
 80233bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80233be:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80233c2:	9210      	str	r2, [sp, #64]	; 0x40
 80233c4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80233c8:	2800      	cmp	r0, #0
 80233ca:	f000 811c 	beq.w	8023606 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80233ce:	192a      	adds	r2, r5, r4
 80233d0:	5d2d      	ldrb	r5, [r5, r4]
 80233d2:	7852      	ldrb	r2, [r2, #1]
 80233d4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80233d8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80233dc:	950c      	str	r5, [sp, #48]	; 0x30
 80233de:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80233e2:	0e15      	lsrs	r5, r2, #24
 80233e4:	9211      	str	r2, [sp, #68]	; 0x44
 80233e6:	b289      	uxth	r1, r1
 80233e8:	b280      	uxth	r0, r0
 80233ea:	fb01 fa00 	mul.w	sl, r1, r0
 80233ee:	0109      	lsls	r1, r1, #4
 80233f0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80233f4:	eba1 080a 	sub.w	r8, r1, sl
 80233f8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80233fc:	b280      	uxth	r0, r0
 80233fe:	fa1f f888 	uxth.w	r8, r8
 8023402:	1a12      	subs	r2, r2, r0
 8023404:	fb08 f10c 	mul.w	r1, r8, ip
 8023408:	b292      	uxth	r2, r2
 802340a:	fb02 1106 	mla	r1, r2, r6, r1
 802340e:	fb00 1109 	mla	r1, r0, r9, r1
 8023412:	fb0a 1105 	mla	r1, sl, r5, r1
 8023416:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802341a:	2900      	cmp	r1, #0
 802341c:	f000 80da 	beq.w	80235d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8023420:	2eff      	cmp	r6, #255	; 0xff
 8023422:	d016      	beq.n	8023452 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8023424:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023428:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802342c:	4377      	muls	r7, r6
 802342e:	435e      	muls	r6, r3
 8023430:	0a3b      	lsrs	r3, r7, #8
 8023432:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023436:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802343a:	443b      	add	r3, r7
 802343c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023440:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023444:	0a1b      	lsrs	r3, r3, #8
 8023446:	0a3f      	lsrs	r7, r7, #8
 8023448:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802344c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023450:	433b      	orrs	r3, r7
 8023452:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023456:	d01d      	beq.n	8023494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8023458:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802345a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802345c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023460:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023464:	fb0c f606 	mul.w	r6, ip, r6
 8023468:	fb0c fc07 	mul.w	ip, ip, r7
 802346c:	0a37      	lsrs	r7, r6, #8
 802346e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023472:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023476:	4437      	add	r7, r6
 8023478:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802347c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023480:	0a3f      	lsrs	r7, r7, #8
 8023482:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023486:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802348a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802348e:	ea47 060c 	orr.w	r6, r7, ip
 8023492:	9610      	str	r6, [sp, #64]	; 0x40
 8023494:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023498:	d01d      	beq.n	80234d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802349a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802349c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80234a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80234a4:	fb09 fc0c 	mul.w	ip, r9, ip
 80234a8:	fb09 f906 	mul.w	r9, r9, r6
 80234ac:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80234b0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80234b4:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80234b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80234bc:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80234c0:	4467      	add	r7, ip
 80234c2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80234c6:	0a3f      	lsrs	r7, r7, #8
 80234c8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80234cc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80234d0:	ea47 0609 	orr.w	r6, r7, r9
 80234d4:	960c      	str	r6, [sp, #48]	; 0x30
 80234d6:	2dff      	cmp	r5, #255	; 0xff
 80234d8:	d01a      	beq.n	8023510 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80234da:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80234dc:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80234e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80234e4:	fb05 fc0c 	mul.w	ip, r5, ip
 80234e8:	4375      	muls	r5, r6
 80234ea:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80234ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80234f2:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80234f6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80234fa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80234fe:	4467      	add	r7, ip
 8023500:	0a2d      	lsrs	r5, r5, #8
 8023502:	0a3f      	lsrs	r7, r7, #8
 8023504:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023508:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802350c:	433d      	orrs	r5, r7
 802350e:	9511      	str	r5, [sp, #68]	; 0x44
 8023510:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023512:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8023516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802351a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802351e:	fb08 f505 	mul.w	r5, r8, r5
 8023522:	fb02 5506 	mla	r5, r2, r6, r5
 8023526:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023528:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802352c:	fb00 5506 	mla	r5, r0, r6, r5
 8023530:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8023532:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023536:	fb0a 5506 	mla	r5, sl, r6, r5
 802353a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802353c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023540:	0a2d      	lsrs	r5, r5, #8
 8023542:	fb08 f806 	mul.w	r8, r8, r6
 8023546:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802354a:	fb02 8303 	mla	r3, r2, r3, r8
 802354e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023550:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023554:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023556:	fb00 3307 	mla	r3, r0, r7, r3
 802355a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802355e:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8023562:	fb01 f30b 	mul.w	r3, r1, fp
 8023566:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802356a:	1c59      	adds	r1, r3, #1
 802356c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023570:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023574:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023578:	ea45 050c 	orr.w	r5, r5, ip
 802357c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023580:	b2ea      	uxtb	r2, r5
 8023582:	b2c9      	uxtb	r1, r1
 8023584:	fb12 f20b 	smulbb	r2, r2, fp
 8023588:	fb03 2301 	mla	r3, r3, r1, r2
 802358c:	b29b      	uxth	r3, r3
 802358e:	1c5a      	adds	r2, r3, #1
 8023590:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023594:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023598:	fb12 f201 	smulbb	r2, r2, r1
 802359c:	121b      	asrs	r3, r3, #8
 802359e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80235a2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80235a6:	0c2d      	lsrs	r5, r5, #16
 80235a8:	fb03 230b 	mla	r3, r3, fp, r2
 80235ac:	b29b      	uxth	r3, r3
 80235ae:	1c5a      	adds	r2, r3, #1
 80235b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80235b4:	121b      	asrs	r3, r3, #8
 80235b6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80235ba:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80235be:	fb13 f101 	smulbb	r1, r3, r1
 80235c2:	fb05 150b 	mla	r5, r5, fp, r1
 80235c6:	b2ad      	uxth	r5, r5
 80235c8:	1c69      	adds	r1, r5, #1
 80235ca:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80235ce:	122d      	asrs	r5, r5, #8
 80235d0:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80235d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80235d6:	f10e 0e03 	add.w	lr, lr, #3
 80235da:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80235dc:	4413      	add	r3, r2
 80235de:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80235e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80235e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80235e4:	4413      	add	r3, r2
 80235e6:	932e      	str	r3, [sp, #184]	; 0xb8
 80235e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80235ea:	3b01      	subs	r3, #1
 80235ec:	9315      	str	r3, [sp, #84]	; 0x54
 80235ee:	e4ed      	b.n	8022fcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80235f0:	b160      	cbz	r0, 802360c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80235f2:	5d2a      	ldrb	r2, [r5, r4]
 80235f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80235f6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80235fa:	25ff      	movs	r5, #255	; 0xff
 80235fc:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8023600:	920c      	str	r2, [sp, #48]	; 0x30
 8023602:	46ac      	mov	ip, r5
 8023604:	e6ef      	b.n	80233e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8023606:	25ff      	movs	r5, #255	; 0xff
 8023608:	46a9      	mov	r9, r5
 802360a:	e6ec      	b.n	80233e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 802360c:	25ff      	movs	r5, #255	; 0xff
 802360e:	46a9      	mov	r9, r5
 8023610:	e7f7      	b.n	8023602 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 8023612:	b01b      	add	sp, #108	; 0x6c
 8023614:	ecbd 8b08 	vpop	{d8-d11}
 8023618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802361c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 802361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023620:	b085      	sub	sp, #20
 8023622:	7888      	ldrb	r0, [r1, #2]
 8023624:	4692      	mov	sl, r2
 8023626:	4698      	mov	r8, r3
 8023628:	9000      	str	r0, [sp, #0]
 802362a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802362e:	7848      	ldrb	r0, [r1, #1]
 8023630:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8023634:	9001      	str	r0, [sp, #4]
 8023636:	7808      	ldrb	r0, [r1, #0]
 8023638:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 802363c:	9002      	str	r0, [sp, #8]
 802363e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023642:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8023646:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802364a:	fb04 560c 	mla	r6, r4, ip, r5
 802364e:	2c00      	cmp	r4, #0
 8023650:	eb02 0e06 	add.w	lr, r2, r6
 8023654:	9a00      	ldr	r2, [sp, #0]
 8023656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802365a:	9a01      	ldr	r2, [sp, #4]
 802365c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023660:	db3e      	blt.n	80236e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8023662:	45a1      	cmp	r9, r4
 8023664:	dd3c      	ble.n	80236e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8023666:	2d00      	cmp	r5, #0
 8023668:	db38      	blt.n	80236dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802366a:	45ac      	cmp	ip, r5
 802366c:	dd36      	ble.n	80236dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802366e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8023672:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8023676:	1c6e      	adds	r6, r5, #1
 8023678:	d435      	bmi.n	80236e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802367a:	45b4      	cmp	ip, r6
 802367c:	dd33      	ble.n	80236e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802367e:	b393      	cbz	r3, 80236e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8023680:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8023684:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8023688:	3401      	adds	r4, #1
 802368a:	d430      	bmi.n	80236ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802368c:	45a1      	cmp	r9, r4
 802368e:	dd2e      	ble.n	80236ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8023690:	b36f      	cbz	r7, 80236ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8023692:	2d00      	cmp	r5, #0
 8023694:	db29      	blt.n	80236ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8023696:	45ac      	cmp	ip, r5
 8023698:	dd27      	ble.n	80236ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802369a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802369e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80236a2:	3501      	adds	r5, #1
 80236a4:	d407      	bmi.n	80236b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80236a6:	45ac      	cmp	ip, r5
 80236a8:	dd05      	ble.n	80236b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80236aa:	b123      	cbz	r3, 80236b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80236ac:	44f4      	add	ip, lr
 80236ae:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80236b2:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80236b6:	2b0f      	cmp	r3, #15
 80236b8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80236bc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80236c0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80236c4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80236c8:	d801      	bhi.n	80236ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80236ca:	2f0f      	cmp	r7, #15
 80236cc:	d911      	bls.n	80236f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80236ce:	4b76      	ldr	r3, [pc, #472]	; (80238a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80236d0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80236d4:	4a75      	ldr	r2, [pc, #468]	; (80238ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80236d6:	4876      	ldr	r0, [pc, #472]	; (80238b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80236d8:	f004 ff94 	bl	8028604 <__assert_func>
 80236dc:	4602      	mov	r2, r0
 80236de:	e7ca      	b.n	8023676 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80236e0:	4606      	mov	r6, r0
 80236e2:	4602      	mov	r2, r0
 80236e4:	e7d0      	b.n	8023688 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80236e6:	4606      	mov	r6, r0
 80236e8:	e7ce      	b.n	8023688 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80236ea:	4604      	mov	r4, r0
 80236ec:	e7d9      	b.n	80236a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80236ee:	4604      	mov	r4, r0
 80236f0:	e7e1      	b.n	80236b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80236f2:	b29b      	uxth	r3, r3
 80236f4:	b2bf      	uxth	r7, r7
 80236f6:	fb07 fe03 	mul.w	lr, r7, r3
 80236fa:	011b      	lsls	r3, r3, #4
 80236fc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023700:	eba3 0c0e 	sub.w	ip, r3, lr
 8023704:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8023708:	b2bf      	uxth	r7, r7
 802370a:	fa1f fc8c 	uxth.w	ip, ip
 802370e:	1bed      	subs	r5, r5, r7
 8023710:	fb0c f30a 	mul.w	r3, ip, sl
 8023714:	b2ad      	uxth	r5, r5
 8023716:	fb05 330b 	mla	r3, r5, fp, r3
 802371a:	fb07 3309 	mla	r3, r7, r9, r3
 802371e:	fb0e 3308 	mla	r3, lr, r8, r3
 8023722:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023726:	9303      	str	r3, [sp, #12]
 8023728:	2b00      	cmp	r3, #0
 802372a:	f000 80b9 	beq.w	80238a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 802372e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023732:	d018      	beq.n	8023766 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8023734:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023738:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802373c:	fb0b f303 	mul.w	r3, fp, r3
 8023740:	fb0b fb02 	mul.w	fp, fp, r2
 8023744:	0a1a      	lsrs	r2, r3, #8
 8023746:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802374a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802374e:	441a      	add	r2, r3
 8023750:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023754:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023758:	0a12      	lsrs	r2, r2, #8
 802375a:	0a1b      	lsrs	r3, r3, #8
 802375c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023764:	431a      	orrs	r2, r3
 8023766:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802376a:	d019      	beq.n	80237a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 802376c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023770:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023774:	fb0a fb0b 	mul.w	fp, sl, fp
 8023778:	fb0a fa06 	mul.w	sl, sl, r6
 802377c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023780:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023784:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023788:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802378c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023790:	445e      	add	r6, fp
 8023792:	0a1b      	lsrs	r3, r3, #8
 8023794:	0a36      	lsrs	r6, r6, #8
 8023796:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802379a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802379e:	431e      	orrs	r6, r3
 80237a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80237a4:	d019      	beq.n	80237da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 80237a6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80237aa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80237ae:	fb09 fa0a 	mul.w	sl, r9, sl
 80237b2:	fb09 f904 	mul.w	r9, r9, r4
 80237b6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80237ba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80237be:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80237c2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80237c6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80237ca:	4454      	add	r4, sl
 80237cc:	0a1b      	lsrs	r3, r3, #8
 80237ce:	0a24      	lsrs	r4, r4, #8
 80237d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237d4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80237d8:	431c      	orrs	r4, r3
 80237da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80237de:	d019      	beq.n	8023814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80237e0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80237e4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80237e8:	fb08 f909 	mul.w	r9, r8, r9
 80237ec:	fb08 f800 	mul.w	r8, r8, r0
 80237f0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80237f4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80237f8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80237fc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023800:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023804:	4448      	add	r0, r9
 8023806:	0a1b      	lsrs	r3, r3, #8
 8023808:	0a00      	lsrs	r0, r0, #8
 802380a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802380e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023812:	4318      	orrs	r0, r3
 8023814:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023818:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802381c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023820:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023824:	fb0c f808 	mul.w	r8, ip, r8
 8023828:	fb0c f606 	mul.w	r6, ip, r6
 802382c:	fb05 8803 	mla	r8, r5, r3, r8
 8023830:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023834:	fb05 6202 	mla	r2, r5, r2, r6
 8023838:	fb07 8803 	mla	r8, r7, r3, r8
 802383c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023840:	fb0e 8303 	mla	r3, lr, r3, r8
 8023844:	0a1b      	lsrs	r3, r3, #8
 8023846:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802384a:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 802384e:	9c02      	ldr	r4, [sp, #8]
 8023850:	fb07 2703 	mla	r7, r7, r3, r2
 8023854:	9a03      	ldr	r2, [sp, #12]
 8023856:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802385a:	43d2      	mvns	r2, r2
 802385c:	fb0e 7303 	mla	r3, lr, r3, r7
 8023860:	b2d2      	uxtb	r2, r2
 8023862:	0a1b      	lsrs	r3, r3, #8
 8023864:	4354      	muls	r4, r2
 8023866:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802386a:	1c60      	adds	r0, r4, #1
 802386c:	ea48 0303 	orr.w	r3, r8, r3
 8023870:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8023874:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023878:	7008      	strb	r0, [r1, #0]
 802387a:	9801      	ldr	r0, [sp, #4]
 802387c:	4350      	muls	r0, r2
 802387e:	1c44      	adds	r4, r0, #1
 8023880:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8023884:	0a18      	lsrs	r0, r3, #8
 8023886:	0c1b      	lsrs	r3, r3, #16
 8023888:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802388c:	7048      	strb	r0, [r1, #1]
 802388e:	9800      	ldr	r0, [sp, #0]
 8023890:	4350      	muls	r0, r2
 8023892:	4602      	mov	r2, r0
 8023894:	3001      	adds	r0, #1
 8023896:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802389a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802389e:	708b      	strb	r3, [r1, #2]
 80238a0:	b005      	add	sp, #20
 80238a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238a6:	bf00      	nop
 80238a8:	0802d907 	.word	0x0802d907
 80238ac:	0802ddfe 	.word	0x0802ddfe
 80238b0:	0802d9d0 	.word	0x0802d9d0

080238b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80238b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238b8:	ed2d 8b08 	vpush	{d8-d11}
 80238bc:	b097      	sub	sp, #92	; 0x5c
 80238be:	eeb0 aa40 	vmov.f32	s20, s0
 80238c2:	eef0 9a60 	vmov.f32	s19, s1
 80238c6:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80238c8:	eeb0 9a41 	vmov.f32	s18, s2
 80238cc:	9308      	str	r3, [sp, #32]
 80238ce:	eeb0 8a62 	vmov.f32	s16, s5
 80238d2:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80238d6:	eef0 8a43 	vmov.f32	s17, s6
 80238da:	9015      	str	r0, [sp, #84]	; 0x54
 80238dc:	eef0 ba44 	vmov.f32	s23, s8
 80238e0:	6868      	ldr	r0, [r5, #4]
 80238e2:	eeb0 ba64 	vmov.f32	s22, s9
 80238e6:	9112      	str	r1, [sp, #72]	; 0x48
 80238e8:	eef0 aa45 	vmov.f32	s21, s10
 80238ec:	9310      	str	r3, [sp, #64]	; 0x40
 80238ee:	9214      	str	r2, [sp, #80]	; 0x50
 80238f0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80238f2:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80238f6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80238fa:	fb00 1303 	mla	r3, r0, r3, r1
 80238fe:	6829      	ldr	r1, [r5, #0]
 8023900:	6855      	ldr	r5, [r2, #4]
 8023902:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023906:	3504      	adds	r5, #4
 8023908:	18cb      	adds	r3, r1, r3
 802390a:	930b      	str	r3, [sp, #44]	; 0x2c
 802390c:	6813      	ldr	r3, [r2, #0]
 802390e:	9311      	str	r3, [sp, #68]	; 0x44
 8023910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023912:	2b00      	cmp	r3, #0
 8023914:	dc03      	bgt.n	802391e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023918:	2b00      	cmp	r3, #0
 802391a:	f340 8333 	ble.w	8023f84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 802391e:	9b08      	ldr	r3, [sp, #32]
 8023920:	2b00      	cmp	r3, #0
 8023922:	f340 8190 	ble.w	8023c46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023926:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023928:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802392a:	1412      	asrs	r2, r2, #16
 802392c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023930:	d42f      	bmi.n	8023992 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023932:	1c51      	adds	r1, r2, #1
 8023934:	428c      	cmp	r4, r1
 8023936:	dd2f      	ble.n	8023998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8023938:	2b00      	cmp	r3, #0
 802393a:	db2d      	blt.n	8023998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802393c:	1c59      	adds	r1, r3, #1
 802393e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023940:	4288      	cmp	r0, r1
 8023942:	dd29      	ble.n	8023998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8023944:	9b08      	ldr	r3, [sp, #32]
 8023946:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023948:	3b01      	subs	r3, #1
 802394a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802394c:	fb02 1203 	mla	r2, r2, r3, r1
 8023950:	1412      	asrs	r2, r2, #16
 8023952:	d42b      	bmi.n	80239ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8023954:	3201      	adds	r2, #1
 8023956:	4294      	cmp	r4, r2
 8023958:	dd28      	ble.n	80239ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802395a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802395c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802395e:	fb02 1303 	mla	r3, r2, r3, r1
 8023962:	141b      	asrs	r3, r3, #16
 8023964:	d422      	bmi.n	80239ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8023966:	3301      	adds	r3, #1
 8023968:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802396a:	429a      	cmp	r2, r3
 802396c:	dd1e      	ble.n	80239ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802396e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023970:	f103 0803 	add.w	r8, r3, #3
 8023974:	9b08      	ldr	r3, [sp, #32]
 8023976:	9307      	str	r3, [sp, #28]
 8023978:	9b07      	ldr	r3, [sp, #28]
 802397a:	2b00      	cmp	r3, #0
 802397c:	f300 81ca 	bgt.w	8023d14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8023980:	9b08      	ldr	r3, [sp, #32]
 8023982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023984:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023988:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802398c:	441a      	add	r2, r3
 802398e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023990:	e15b      	b.n	8023c4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8023992:	1c51      	adds	r1, r2, #1
 8023994:	f040 8148 	bne.w	8023c28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023998:	42a2      	cmp	r2, r4
 802399a:	f280 8145 	bge.w	8023c28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802399e:	1c5a      	adds	r2, r3, #1
 80239a0:	f2c0 8142 	blt.w	8023c28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80239a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80239a6:	4293      	cmp	r3, r2
 80239a8:	f280 813e 	bge.w	8023c28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80239ac:	9b08      	ldr	r3, [sp, #32]
 80239ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80239b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80239b2:	9307      	str	r3, [sp, #28]
 80239b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80239b6:	2b00      	cmp	r3, #0
 80239b8:	dde2      	ble.n	8023980 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80239ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80239bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80239be:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80239c2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80239c4:	141b      	asrs	r3, r3, #16
 80239c6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80239ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80239cc:	1412      	asrs	r2, r2, #16
 80239ce:	f100 818b 	bmi.w	8023ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 80239d2:	1c56      	adds	r6, r2, #1
 80239d4:	42b4      	cmp	r4, r6
 80239d6:	f340 8189 	ble.w	8023cec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80239da:	2b00      	cmp	r3, #0
 80239dc:	f2c0 8186 	blt.w	8023cec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80239e0:	1c5e      	adds	r6, r3, #1
 80239e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80239e4:	42b7      	cmp	r7, r6
 80239e6:	f340 8181 	ble.w	8023cec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80239ea:	fb03 2304 	mla	r3, r3, r4, r2
 80239ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80239f0:	18d6      	adds	r6, r2, r3
 80239f2:	5cd3      	ldrb	r3, [r2, r3]
 80239f4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80239f8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80239fc:	2900      	cmp	r1, #0
 80239fe:	f000 8163 	beq.w	8023cc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8023a02:	7872      	ldrb	r2, [r6, #1]
 8023a04:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023a08:	920c      	str	r2, [sp, #48]	; 0x30
 8023a0a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023a0e:	2800      	cmp	r0, #0
 8023a10:	f000 8164 	beq.w	8023cdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8023a14:	1932      	adds	r2, r6, r4
 8023a16:	5d36      	ldrb	r6, [r6, r4]
 8023a18:	7852      	ldrb	r2, [r2, #1]
 8023a1a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8023a1e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023a22:	9609      	str	r6, [sp, #36]	; 0x24
 8023a24:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023a28:	0e16      	lsrs	r6, r2, #24
 8023a2a:	920d      	str	r2, [sp, #52]	; 0x34
 8023a2c:	b289      	uxth	r1, r1
 8023a2e:	b280      	uxth	r0, r0
 8023a30:	fb01 fb00 	mul.w	fp, r1, r0
 8023a34:	0109      	lsls	r1, r1, #4
 8023a36:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023a3a:	eba1 090b 	sub.w	r9, r1, fp
 8023a3e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8023a42:	b280      	uxth	r0, r0
 8023a44:	fa1f f989 	uxth.w	r9, r9
 8023a48:	1a12      	subs	r2, r2, r0
 8023a4a:	fb09 f108 	mul.w	r1, r9, r8
 8023a4e:	b292      	uxth	r2, r2
 8023a50:	fb02 110c 	mla	r1, r2, ip, r1
 8023a54:	fb00 110a 	mla	r1, r0, sl, r1
 8023a58:	fb0b 1106 	mla	r1, fp, r6, r1
 8023a5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023a60:	2900      	cmp	r1, #0
 8023a62:	f000 80d2 	beq.w	8023c0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023a66:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023a6a:	d01b      	beq.n	8023aa4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8023a6c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023a70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023a74:	fb0c fe0e 	mul.w	lr, ip, lr
 8023a78:	fb0c fc03 	mul.w	ip, ip, r3
 8023a7c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8023a80:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023a84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023a88:	4473      	add	r3, lr
 8023a8a:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8023a8e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8023a92:	0a1b      	lsrs	r3, r3, #8
 8023a94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a98:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023a9c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023aa0:	ea43 030e 	orr.w	r3, r3, lr
 8023aa4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023aa8:	d01e      	beq.n	8023ae8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8023aaa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023aac:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023ab0:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8023ab4:	fb08 fc0c 	mul.w	ip, r8, ip
 8023ab8:	fb08 f80e 	mul.w	r8, r8, lr
 8023abc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023ac0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023ac4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ac8:	44e6      	add	lr, ip
 8023aca:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023ace:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023ad2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ad6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023ada:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ade:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023ae2:	ea4e 0708 	orr.w	r7, lr, r8
 8023ae6:	970c      	str	r7, [sp, #48]	; 0x30
 8023ae8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023aec:	d01e      	beq.n	8023b2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8023aee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023af0:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023af4:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023af8:	fb0a f808 	mul.w	r8, sl, r8
 8023afc:	fb0a fa0c 	mul.w	sl, sl, ip
 8023b00:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023b04:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023b08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b14:	44c6      	add	lr, r8
 8023b16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b22:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b26:	ea4e 070a 	orr.w	r7, lr, sl
 8023b2a:	9709      	str	r7, [sp, #36]	; 0x24
 8023b2c:	2eff      	cmp	r6, #255	; 0xff
 8023b2e:	d01d      	beq.n	8023b6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8023b30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023b32:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023b36:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023b3a:	fb06 f808 	mul.w	r8, r6, r8
 8023b3e:	fb06 f60c 	mul.w	r6, r6, ip
 8023b42:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023b46:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023b4a:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8023b4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b52:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023b56:	44c6      	add	lr, r8
 8023b58:	0a36      	lsrs	r6, r6, #8
 8023b5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b5e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023b62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b66:	ea4e 0606 	orr.w	r6, lr, r6
 8023b6a:	960d      	str	r6, [sp, #52]	; 0x34
 8023b6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023b6e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023b72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023b74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b78:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023b7c:	43c9      	mvns	r1, r1
 8023b7e:	fb09 f606 	mul.w	r6, r9, r6
 8023b82:	b2c9      	uxtb	r1, r1
 8023b84:	fb02 660c 	mla	r6, r2, ip, r6
 8023b88:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023b8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023b8e:	fb00 660c 	mla	r6, r0, ip, r6
 8023b92:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023b96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023b98:	fb0b 660c 	mla	r6, fp, ip, r6
 8023b9c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023ba0:	fb09 f90c 	mul.w	r9, r9, ip
 8023ba4:	0a36      	lsrs	r6, r6, #8
 8023ba6:	fb02 9303 	mla	r3, r2, r3, r9
 8023baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023bac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023bb0:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023bb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023bb6:	fb00 330e 	mla	r3, r0, lr, r3
 8023bba:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8023bbe:	fb0b 3b00 	mla	fp, fp, r0, r3
 8023bc2:	9b07      	ldr	r3, [sp, #28]
 8023bc4:	781b      	ldrb	r3, [r3, #0]
 8023bc6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023bca:	fb03 f201 	mul.w	r2, r3, r1
 8023bce:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023bd2:	1c53      	adds	r3, r2, #1
 8023bd4:	ea46 060b 	orr.w	r6, r6, fp
 8023bd8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023bdc:	9a07      	ldr	r2, [sp, #28]
 8023bde:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023be2:	7013      	strb	r3, [r2, #0]
 8023be4:	7853      	ldrb	r3, [r2, #1]
 8023be6:	434b      	muls	r3, r1
 8023be8:	1c5a      	adds	r2, r3, #1
 8023bea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023bee:	0a33      	lsrs	r3, r6, #8
 8023bf0:	0c36      	lsrs	r6, r6, #16
 8023bf2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023bf6:	9a07      	ldr	r2, [sp, #28]
 8023bf8:	7053      	strb	r3, [r2, #1]
 8023bfa:	7893      	ldrb	r3, [r2, #2]
 8023bfc:	4359      	muls	r1, r3
 8023bfe:	1c4b      	adds	r3, r1, #1
 8023c00:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023c04:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8023c08:	7096      	strb	r6, [r2, #2]
 8023c0a:	9b07      	ldr	r3, [sp, #28]
 8023c0c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023c0e:	3303      	adds	r3, #3
 8023c10:	9307      	str	r3, [sp, #28]
 8023c12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023c14:	4413      	add	r3, r2
 8023c16:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023c18:	9329      	str	r3, [sp, #164]	; 0xa4
 8023c1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023c1c:	4413      	add	r3, r2
 8023c1e:	932a      	str	r3, [sp, #168]	; 0xa8
 8023c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023c22:	3b01      	subs	r3, #1
 8023c24:	9313      	str	r3, [sp, #76]	; 0x4c
 8023c26:	e6c5      	b.n	80239b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8023c28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023c2a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023c2c:	4413      	add	r3, r2
 8023c2e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023c30:	9329      	str	r3, [sp, #164]	; 0xa4
 8023c32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023c34:	4413      	add	r3, r2
 8023c36:	932a      	str	r3, [sp, #168]	; 0xa8
 8023c38:	9b08      	ldr	r3, [sp, #32]
 8023c3a:	3b01      	subs	r3, #1
 8023c3c:	9308      	str	r3, [sp, #32]
 8023c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c40:	3303      	adds	r3, #3
 8023c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8023c44:	e66b      	b.n	802391e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023c46:	f47f ae7d 	bne.w	8023944 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8023c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023c4c:	2b00      	cmp	r3, #0
 8023c4e:	f340 8199 	ble.w	8023f84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8023c52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023c58:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023c5c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023c60:	eef0 6a48 	vmov.f32	s13, s16
 8023c64:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023c68:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023c6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c70:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023c74:	eef0 6a68 	vmov.f32	s13, s17
 8023c78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c7c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8023c80:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023c84:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023c88:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023c8c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023c90:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023c94:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023c98:	ee18 2a10 	vmov	r2, s16
 8023c9c:	eeb0 8a47 	vmov.f32	s16, s14
 8023ca0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ca4:	ee18 2a90 	vmov	r2, s17
 8023ca8:	932b      	str	r3, [sp, #172]	; 0xac
 8023caa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023cac:	eef0 8a67 	vmov.f32	s17, s15
 8023cb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023cb4:	932c      	str	r3, [sp, #176]	; 0xb0
 8023cb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023cb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023cba:	3b01      	subs	r3, #1
 8023cbc:	9312      	str	r3, [sp, #72]	; 0x48
 8023cbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023cc0:	bf08      	it	eq
 8023cc2:	4613      	moveq	r3, r2
 8023cc4:	9308      	str	r3, [sp, #32]
 8023cc6:	e623      	b.n	8023910 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8023cc8:	b158      	cbz	r0, 8023ce2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023cca:	5d32      	ldrb	r2, [r6, r4]
 8023ccc:	26ff      	movs	r6, #255	; 0xff
 8023cce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023cd2:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8023cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8023cd8:	46b0      	mov	r8, r6
 8023cda:	e6a7      	b.n	8023a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023cdc:	26ff      	movs	r6, #255	; 0xff
 8023cde:	46b2      	mov	sl, r6
 8023ce0:	e6a4      	b.n	8023a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023ce2:	26ff      	movs	r6, #255	; 0xff
 8023ce4:	46b2      	mov	sl, r6
 8023ce6:	e7f7      	b.n	8023cd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8023ce8:	1c57      	adds	r7, r2, #1
 8023cea:	d18e      	bne.n	8023c0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023cec:	4294      	cmp	r4, r2
 8023cee:	dd8c      	ble.n	8023c0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023cf0:	1c5e      	adds	r6, r3, #1
 8023cf2:	db8a      	blt.n	8023c0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023cf4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023cf6:	429e      	cmp	r6, r3
 8023cf8:	dd87      	ble.n	8023c0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023cfa:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8023cfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023d02:	e9cd 4600 	strd	r4, r6, [sp]
 8023d06:	462b      	mov	r3, r5
 8023d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023d0a:	9907      	ldr	r1, [sp, #28]
 8023d0c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023d0e:	f7ff fc85 	bl	802361c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8023d12:	e77a      	b.n	8023c0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023d14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d16:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023d18:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023d1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d1e:	1409      	asrs	r1, r1, #16
 8023d20:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8023d24:	141b      	asrs	r3, r3, #16
 8023d26:	fb04 1303 	mla	r3, r4, r3, r1
 8023d2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023d2c:	18ce      	adds	r6, r1, r3
 8023d2e:	5ccb      	ldrb	r3, [r1, r3]
 8023d30:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023d34:	0e1f      	lsrs	r7, r3, #24
 8023d36:	2a00      	cmp	r2, #0
 8023d38:	f000 8114 	beq.w	8023f64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8023d3c:	7871      	ldrb	r1, [r6, #1]
 8023d3e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023d42:	910e      	str	r1, [sp, #56]	; 0x38
 8023d44:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023d48:	2800      	cmp	r0, #0
 8023d4a:	f000 8115 	beq.w	8023f78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8023d4e:	1931      	adds	r1, r6, r4
 8023d50:	5d36      	ldrb	r6, [r6, r4]
 8023d52:	7849      	ldrb	r1, [r1, #1]
 8023d54:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8023d58:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023d5c:	960a      	str	r6, [sp, #40]	; 0x28
 8023d5e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023d62:	0e0e      	lsrs	r6, r1, #24
 8023d64:	910f      	str	r1, [sp, #60]	; 0x3c
 8023d66:	b292      	uxth	r2, r2
 8023d68:	b280      	uxth	r0, r0
 8023d6a:	fb02 fb00 	mul.w	fp, r2, r0
 8023d6e:	0112      	lsls	r2, r2, #4
 8023d70:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023d74:	eba2 090b 	sub.w	r9, r2, fp
 8023d78:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023d7c:	b280      	uxth	r0, r0
 8023d7e:	fa1f f989 	uxth.w	r9, r9
 8023d82:	1a09      	subs	r1, r1, r0
 8023d84:	fb09 f20e 	mul.w	r2, r9, lr
 8023d88:	b289      	uxth	r1, r1
 8023d8a:	fb01 2207 	mla	r2, r1, r7, r2
 8023d8e:	fb00 220a 	mla	r2, r0, sl, r2
 8023d92:	fb0b 2206 	mla	r2, fp, r6, r2
 8023d96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023d9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8023d9c:	2a00      	cmp	r2, #0
 8023d9e:	f000 80d4 	beq.w	8023f4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8023da2:	2fff      	cmp	r7, #255	; 0xff
 8023da4:	d01a      	beq.n	8023ddc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8023da6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023daa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023dae:	fb07 fc0c 	mul.w	ip, r7, ip
 8023db2:	435f      	muls	r7, r3
 8023db4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023db8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023dbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023dc0:	4463      	add	r3, ip
 8023dc2:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8023dc6:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023dca:	0a1b      	lsrs	r3, r3, #8
 8023dcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023dd4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023dd8:	ea43 030c 	orr.w	r3, r3, ip
 8023ddc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023de0:	d01f      	beq.n	8023e22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8023de2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023de4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023de6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023dea:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023dee:	fb0e f707 	mul.w	r7, lr, r7
 8023df2:	fb0e fe0c 	mul.w	lr, lr, ip
 8023df6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023dfa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023dfe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e02:	44bc      	add	ip, r7
 8023e04:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023e08:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023e0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e18:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023e1c:	ea4c 020e 	orr.w	r2, ip, lr
 8023e20:	920e      	str	r2, [sp, #56]	; 0x38
 8023e22:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023e26:	d01e      	beq.n	8023e66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8023e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e2a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023e2e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023e32:	fb0a fe0e 	mul.w	lr, sl, lr
 8023e36:	fb0a fa07 	mul.w	sl, sl, r7
 8023e3a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023e3e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023e42:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023e46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e4a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023e4e:	44f4      	add	ip, lr
 8023e50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e60:	ea4c 020a 	orr.w	r2, ip, sl
 8023e64:	920a      	str	r2, [sp, #40]	; 0x28
 8023e66:	2eff      	cmp	r6, #255	; 0xff
 8023e68:	d01c      	beq.n	8023ea4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8023e6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023e6c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023e70:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023e74:	fb06 fe0e 	mul.w	lr, r6, lr
 8023e78:	437e      	muls	r6, r7
 8023e7a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023e7e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023e82:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023e86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e8a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023e8e:	44f4      	add	ip, lr
 8023e90:	0a36      	lsrs	r6, r6, #8
 8023e92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e96:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023e9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e9e:	ea4c 0206 	orr.w	r2, ip, r6
 8023ea2:	920f      	str	r2, [sp, #60]	; 0x3c
 8023ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ea6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023eaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023eae:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8023eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023eb4:	fb09 f606 	mul.w	r6, r9, r6
 8023eb8:	fb01 6607 	mla	r6, r1, r7, r6
 8023ebc:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023ec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023ec2:	fb00 6607 	mla	r6, r0, r7, r6
 8023ec6:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023eca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ecc:	fb0b 6607 	mla	r6, fp, r7, r6
 8023ed0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ed6:	fb09 f907 	mul.w	r9, r9, r7
 8023eda:	0a36      	lsrs	r6, r6, #8
 8023edc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023ee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023ee2:	fb01 9303 	mla	r3, r1, r3, r9
 8023ee6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023eea:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023eee:	fb00 330c 	mla	r3, r0, ip, r3
 8023ef2:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8023ef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023ef8:	43da      	mvns	r2, r3
 8023efa:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8023efe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f02:	b2d2      	uxtb	r2, r2
 8023f04:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023f08:	fb03 f102 	mul.w	r1, r3, r2
 8023f0c:	ea46 060e 	orr.w	r6, r6, lr
 8023f10:	1c4b      	adds	r3, r1, #1
 8023f12:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023f16:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023f1a:	f808 3c03 	strb.w	r3, [r8, #-3]
 8023f1e:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8023f22:	4353      	muls	r3, r2
 8023f24:	1c59      	adds	r1, r3, #1
 8023f26:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023f2a:	0a33      	lsrs	r3, r6, #8
 8023f2c:	0c36      	lsrs	r6, r6, #16
 8023f2e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023f32:	f808 3c02 	strb.w	r3, [r8, #-2]
 8023f36:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8023f3a:	435a      	muls	r2, r3
 8023f3c:	1c53      	adds	r3, r2, #1
 8023f3e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023f42:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023f46:	f808 6c01 	strb.w	r6, [r8, #-1]
 8023f4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023f4c:	f108 0803 	add.w	r8, r8, #3
 8023f50:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023f52:	4413      	add	r3, r2
 8023f54:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023f56:	9329      	str	r3, [sp, #164]	; 0xa4
 8023f58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023f5a:	4413      	add	r3, r2
 8023f5c:	932a      	str	r3, [sp, #168]	; 0xa8
 8023f5e:	9b07      	ldr	r3, [sp, #28]
 8023f60:	3b01      	subs	r3, #1
 8023f62:	e508      	b.n	8023976 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8023f64:	b158      	cbz	r0, 8023f7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8023f66:	5d31      	ldrb	r1, [r6, r4]
 8023f68:	26ff      	movs	r6, #255	; 0xff
 8023f6a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023f6e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023f72:	910a      	str	r1, [sp, #40]	; 0x28
 8023f74:	46b6      	mov	lr, r6
 8023f76:	e6f6      	b.n	8023d66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023f78:	26ff      	movs	r6, #255	; 0xff
 8023f7a:	46b2      	mov	sl, r6
 8023f7c:	e6f3      	b.n	8023d66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023f7e:	26ff      	movs	r6, #255	; 0xff
 8023f80:	46b2      	mov	sl, r6
 8023f82:	e7f7      	b.n	8023f74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8023f84:	b017      	add	sp, #92	; 0x5c
 8023f86:	ecbd 8b08 	vpop	{d8-d11}
 8023f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023f90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8023f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f94:	b08d      	sub	sp, #52	; 0x34
 8023f96:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8023f9a:	9103      	str	r1, [sp, #12]
 8023f9c:	fb07 5803 	mla	r8, r7, r3, r5
 8023fa0:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8023fa4:	9803      	ldr	r0, [sp, #12]
 8023fa6:	2f00      	cmp	r7, #0
 8023fa8:	910b      	str	r1, [sp, #44]	; 0x2c
 8023faa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023fae:	9903      	ldr	r1, [sp, #12]
 8023fb0:	9c03      	ldr	r4, [sp, #12]
 8023fb2:	eb02 0608 	add.w	r6, r2, r8
 8023fb6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8023fba:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8023fbe:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8023fc2:	7809      	ldrb	r1, [r1, #0]
 8023fc4:	7840      	ldrb	r0, [r0, #1]
 8023fc6:	78a4      	ldrb	r4, [r4, #2]
 8023fc8:	db51      	blt.n	802406e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023fca:	45be      	cmp	lr, r7
 8023fcc:	dd4f      	ble.n	802406e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023fce:	2d00      	cmp	r5, #0
 8023fd0:	db49      	blt.n	8024066 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023fd2:	42ab      	cmp	r3, r5
 8023fd4:	dd47      	ble.n	8024066 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023fd6:	f812 2008 	ldrb.w	r2, [r2, r8]
 8023fda:	9204      	str	r2, [sp, #16]
 8023fdc:	7872      	ldrb	r2, [r6, #1]
 8023fde:	9205      	str	r2, [sp, #20]
 8023fe0:	78b2      	ldrb	r2, [r6, #2]
 8023fe2:	9206      	str	r2, [sp, #24]
 8023fe4:	1c6a      	adds	r2, r5, #1
 8023fe6:	d449      	bmi.n	802407c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023fe8:	4293      	cmp	r3, r2
 8023fea:	dd47      	ble.n	802407c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023fec:	f1bc 0f00 	cmp.w	ip, #0
 8023ff0:	d044      	beq.n	802407c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023ff2:	7972      	ldrb	r2, [r6, #5]
 8023ff4:	f896 b003 	ldrb.w	fp, [r6, #3]
 8023ff8:	f896 a004 	ldrb.w	sl, [r6, #4]
 8023ffc:	9201      	str	r2, [sp, #4]
 8023ffe:	3701      	adds	r7, #1
 8024000:	d444      	bmi.n	802408c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8024002:	45be      	cmp	lr, r7
 8024004:	dd42      	ble.n	802408c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8024006:	f1b9 0f00 	cmp.w	r9, #0
 802400a:	f000 80c1 	beq.w	8024190 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 802400e:	2d00      	cmp	r5, #0
 8024010:	db38      	blt.n	8024084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8024012:	42ab      	cmp	r3, r5
 8024014:	dd36      	ble.n	8024084 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8024016:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802401a:	f816 8002 	ldrb.w	r8, [r6, r2]
 802401e:	2203      	movs	r2, #3
 8024020:	fb03 6702 	mla	r7, r3, r2, r6
 8024024:	fb03 6202 	mla	r2, r3, r2, r6
 8024028:	787f      	ldrb	r7, [r7, #1]
 802402a:	f892 e002 	ldrb.w	lr, [r2, #2]
 802402e:	9702      	str	r7, [sp, #8]
 8024030:	3501      	adds	r5, #1
 8024032:	d432      	bmi.n	802409a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8024034:	42ab      	cmp	r3, r5
 8024036:	dd30      	ble.n	802409a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8024038:	f1bc 0f00 	cmp.w	ip, #0
 802403c:	d031      	beq.n	80240a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 802403e:	2703      	movs	r7, #3
 8024040:	fb13 7207 	smlabb	r2, r3, r7, r7
 8024044:	5cb5      	ldrb	r5, [r6, r2]
 8024046:	fb03 6207 	mla	r2, r3, r7, r6
 802404a:	fb03 6307 	mla	r3, r3, r7, r6
 802404e:	7912      	ldrb	r2, [r2, #4]
 8024050:	795e      	ldrb	r6, [r3, #5]
 8024052:	f1bc 0f0f 	cmp.w	ip, #15
 8024056:	d927      	bls.n	80240a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8024058:	4b53      	ldr	r3, [pc, #332]	; (80241a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802405a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802405e:	4a53      	ldr	r2, [pc, #332]	; (80241ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8024060:	4853      	ldr	r0, [pc, #332]	; (80241b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8024062:	f004 facf 	bl	8028604 <__assert_func>
 8024066:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802406a:	9104      	str	r1, [sp, #16]
 802406c:	e7ba      	b.n	8023fe4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802406e:	9401      	str	r4, [sp, #4]
 8024070:	4682      	mov	sl, r0
 8024072:	468b      	mov	fp, r1
 8024074:	9104      	str	r1, [sp, #16]
 8024076:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802407a:	e7c0      	b.n	8023ffe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802407c:	9401      	str	r4, [sp, #4]
 802407e:	4682      	mov	sl, r0
 8024080:	468b      	mov	fp, r1
 8024082:	e7bc      	b.n	8023ffe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8024084:	46a6      	mov	lr, r4
 8024086:	9002      	str	r0, [sp, #8]
 8024088:	4688      	mov	r8, r1
 802408a:	e7d1      	b.n	8024030 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802408c:	4626      	mov	r6, r4
 802408e:	4602      	mov	r2, r0
 8024090:	460d      	mov	r5, r1
 8024092:	46a6      	mov	lr, r4
 8024094:	9002      	str	r0, [sp, #8]
 8024096:	4688      	mov	r8, r1
 8024098:	e7db      	b.n	8024052 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802409a:	4626      	mov	r6, r4
 802409c:	4602      	mov	r2, r0
 802409e:	460d      	mov	r5, r1
 80240a0:	e7d7      	b.n	8024052 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80240a2:	4626      	mov	r6, r4
 80240a4:	4602      	mov	r2, r0
 80240a6:	460d      	mov	r5, r1
 80240a8:	f1b9 0f0f 	cmp.w	r9, #15
 80240ac:	d8d4      	bhi.n	8024058 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80240ae:	fa1f f38c 	uxth.w	r3, ip
 80240b2:	fa1f fc89 	uxth.w	ip, r9
 80240b6:	fb03 f70c 	mul.w	r7, r3, ip
 80240ba:	011b      	lsls	r3, r3, #4
 80240bc:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80240c0:	9707      	str	r7, [sp, #28]
 80240c2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80240c6:	fa1f fc8c 	uxth.w	ip, ip
 80240ca:	eba7 070c 	sub.w	r7, r7, ip
 80240ce:	b2bf      	uxth	r7, r7
 80240d0:	9709      	str	r7, [sp, #36]	; 0x24
 80240d2:	9f07      	ldr	r7, [sp, #28]
 80240d4:	1bdb      	subs	r3, r3, r7
 80240d6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80240da:	b29b      	uxth	r3, r3
 80240dc:	9708      	str	r7, [sp, #32]
 80240de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80240e0:	930a      	str	r3, [sp, #40]	; 0x28
 80240e2:	ea6f 0907 	mvn.w	r9, r7
 80240e6:	fb03 fb0b 	mul.w	fp, r3, fp
 80240ea:	9f04      	ldr	r7, [sp, #16]
 80240ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240ee:	fa5f f989 	uxtb.w	r9, r9
 80240f2:	fb03 bb07 	mla	fp, r3, r7, fp
 80240f6:	9f07      	ldr	r7, [sp, #28]
 80240f8:	fb11 f109 	smulbb	r1, r1, r9
 80240fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240fe:	fb0c b808 	mla	r8, ip, r8, fp
 8024102:	fb10 f009 	smulbb	r0, r0, r9
 8024106:	fb14 f409 	smulbb	r4, r4, r9
 802410a:	fb07 8805 	mla	r8, r7, r5, r8
 802410e:	9d08      	ldr	r5, [sp, #32]
 8024110:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024112:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024116:	fb08 1805 	mla	r8, r8, r5, r1
 802411a:	9d05      	ldr	r5, [sp, #20]
 802411c:	fa1f f888 	uxth.w	r8, r8
 8024120:	f108 0101 	add.w	r1, r8, #1
 8024124:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8024128:	9903      	ldr	r1, [sp, #12]
 802412a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802412e:	f881 8000 	strb.w	r8, [r1]
 8024132:	fb03 f10a 	mul.w	r1, r3, sl
 8024136:	fb07 1105 	mla	r1, r7, r5, r1
 802413a:	9d02      	ldr	r5, [sp, #8]
 802413c:	fb0c 1105 	mla	r1, ip, r5, r1
 8024140:	9d07      	ldr	r5, [sp, #28]
 8024142:	fb05 1102 	mla	r1, r5, r2, r1
 8024146:	9a08      	ldr	r2, [sp, #32]
 8024148:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802414c:	fb01 0102 	mla	r1, r1, r2, r0
 8024150:	9a03      	ldr	r2, [sp, #12]
 8024152:	b289      	uxth	r1, r1
 8024154:	1c48      	adds	r0, r1, #1
 8024156:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802415a:	1209      	asrs	r1, r1, #8
 802415c:	7051      	strb	r1, [r2, #1]
 802415e:	9a01      	ldr	r2, [sp, #4]
 8024160:	4353      	muls	r3, r2
 8024162:	9a06      	ldr	r2, [sp, #24]
 8024164:	fb07 3702 	mla	r7, r7, r2, r3
 8024168:	9b08      	ldr	r3, [sp, #32]
 802416a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802416e:	fb05 c606 	mla	r6, r5, r6, ip
 8024172:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024176:	fb06 4603 	mla	r6, r6, r3, r4
 802417a:	9b03      	ldr	r3, [sp, #12]
 802417c:	b2b6      	uxth	r6, r6
 802417e:	f106 0e01 	add.w	lr, r6, #1
 8024182:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8024186:	1236      	asrs	r6, r6, #8
 8024188:	709e      	strb	r6, [r3, #2]
 802418a:	b00d      	add	sp, #52	; 0x34
 802418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024190:	f1bc 0f0f 	cmp.w	ip, #15
 8024194:	f63f af60 	bhi.w	8024058 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8024198:	4626      	mov	r6, r4
 802419a:	4602      	mov	r2, r0
 802419c:	460d      	mov	r5, r1
 802419e:	46a6      	mov	lr, r4
 80241a0:	9002      	str	r0, [sp, #8]
 80241a2:	4688      	mov	r8, r1
 80241a4:	e783      	b.n	80240ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80241a6:	bf00      	nop
 80241a8:	0802d907 	.word	0x0802d907
 80241ac:	0802ddfe 	.word	0x0802ddfe
 80241b0:	0802d9d0 	.word	0x0802d9d0

080241b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80241b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241b8:	ed2d 8b08 	vpush	{d8-d11}
 80241bc:	b0a1      	sub	sp, #132	; 0x84
 80241be:	eeb0 aa40 	vmov.f32	s20, s0
 80241c2:	eef0 9a60 	vmov.f32	s19, s1
 80241c6:	9307      	str	r3, [sp, #28]
 80241c8:	eeb0 9a41 	vmov.f32	s18, s2
 80241cc:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80241d0:	eeb0 8a62 	vmov.f32	s16, s5
 80241d4:	9210      	str	r2, [sp, #64]	; 0x40
 80241d6:	eef0 8a43 	vmov.f32	s17, s6
 80241da:	9308      	str	r3, [sp, #32]
 80241dc:	eef0 ba44 	vmov.f32	s23, s8
 80241e0:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80241e4:	eeb0 ba64 	vmov.f32	s22, s9
 80241e8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80241ea:	eef0 aa45 	vmov.f32	s21, s10
 80241ee:	930a      	str	r3, [sp, #40]	; 0x28
 80241f0:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80241f4:	901f      	str	r0, [sp, #124]	; 0x7c
 80241f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80241f8:	6850      	ldr	r0, [r2, #4]
 80241fa:	910e      	str	r1, [sp, #56]	; 0x38
 80241fc:	6812      	ldr	r2, [r2, #0]
 80241fe:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8024202:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8024206:	fb00 1303 	mla	r3, r0, r3, r1
 802420a:	9908      	ldr	r1, [sp, #32]
 802420c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024210:	18d3      	adds	r3, r2, r3
 8024212:	2203      	movs	r2, #3
 8024214:	9309      	str	r3, [sp, #36]	; 0x24
 8024216:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8024218:	681b      	ldr	r3, [r3, #0]
 802421a:	930c      	str	r3, [sp, #48]	; 0x30
 802421c:	f06f 0304 	mvn.w	r3, #4
 8024220:	fb11 3302 	smlabb	r3, r1, r2, r3
 8024224:	930d      	str	r3, [sp, #52]	; 0x34
 8024226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024228:	43db      	mvns	r3, r3
 802422a:	b2db      	uxtb	r3, r3
 802422c:	930b      	str	r3, [sp, #44]	; 0x2c
 802422e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024230:	2b00      	cmp	r3, #0
 8024232:	dc03      	bgt.n	802423c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8024234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024236:	2b00      	cmp	r3, #0
 8024238:	f340 81df 	ble.w	80245fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802423c:	9b07      	ldr	r3, [sp, #28]
 802423e:	2b00      	cmp	r3, #0
 8024240:	f340 80f2 	ble.w	8024428 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8024244:	ea5f 4228 	movs.w	r2, r8, asr #16
 8024248:	ea4f 432b 	mov.w	r3, fp, asr #16
 802424c:	d430      	bmi.n	80242b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802424e:	1c51      	adds	r1, r2, #1
 8024250:	9808      	ldr	r0, [sp, #32]
 8024252:	4281      	cmp	r1, r0
 8024254:	da2f      	bge.n	80242b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8024256:	2b00      	cmp	r3, #0
 8024258:	db2d      	blt.n	80242b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802425a:	1c59      	adds	r1, r3, #1
 802425c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802425e:	4288      	cmp	r0, r1
 8024260:	dd29      	ble.n	80242b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8024262:	9b07      	ldr	r3, [sp, #28]
 8024264:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8024266:	3b01      	subs	r3, #1
 8024268:	fb02 8203 	mla	r2, r2, r3, r8
 802426c:	1412      	asrs	r2, r2, #16
 802426e:	d42d      	bmi.n	80242cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8024270:	3201      	adds	r2, #1
 8024272:	9908      	ldr	r1, [sp, #32]
 8024274:	4291      	cmp	r1, r2
 8024276:	dd29      	ble.n	80242cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8024278:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802427a:	fb02 b303 	mla	r3, r2, r3, fp
 802427e:	141b      	asrs	r3, r3, #16
 8024280:	d424      	bmi.n	80242cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8024282:	3301      	adds	r3, #1
 8024284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024286:	429a      	cmp	r2, r3
 8024288:	dd20      	ble.n	80242cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802428a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802428c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8024290:	1cde      	adds	r6, r3, #3
 8024292:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8024296:	f1bc 0f00 	cmp.w	ip, #0
 802429a:	f300 811f 	bgt.w	80244dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802429e:	9b07      	ldr	r3, [sp, #28]
 80242a0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80242a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80242aa:	4423      	add	r3, r4
 80242ac:	9309      	str	r3, [sp, #36]	; 0x24
 80242ae:	e0bd      	b.n	802442c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80242b0:	1c57      	adds	r7, r2, #1
 80242b2:	f040 80ae 	bne.w	8024412 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80242b6:	9908      	ldr	r1, [sp, #32]
 80242b8:	428a      	cmp	r2, r1
 80242ba:	f280 80aa 	bge.w	8024412 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80242be:	1c5e      	adds	r6, r3, #1
 80242c0:	f2c0 80a7 	blt.w	8024412 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80242c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80242c6:	4293      	cmp	r3, r2
 80242c8:	f280 80a3 	bge.w	8024412 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80242cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80242d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80242d2:	f1ba 0f00 	cmp.w	sl, #0
 80242d6:	dde2      	ble.n	802429e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80242d8:	ea5f 4028 	movs.w	r0, r8, asr #16
 80242dc:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80242e0:	ea4f 412b 	mov.w	r1, fp, asr #16
 80242e4:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80242e8:	f100 80df 	bmi.w	80244aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80242ec:	1c45      	adds	r5, r0, #1
 80242ee:	9f08      	ldr	r7, [sp, #32]
 80242f0:	42af      	cmp	r7, r5
 80242f2:	f340 80dc 	ble.w	80244ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80242f6:	2900      	cmp	r1, #0
 80242f8:	f2c0 80d9 	blt.w	80244ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80242fc:	1c4d      	adds	r5, r1, #1
 80242fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024300:	42af      	cmp	r7, r5
 8024302:	f340 80d4 	ble.w	80244ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8024306:	9d08      	ldr	r5, [sp, #32]
 8024308:	fb05 0101 	mla	r1, r5, r1, r0
 802430c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802430e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024312:	1845      	adds	r5, r0, r1
 8024314:	5c40      	ldrb	r0, [r0, r1]
 8024316:	792f      	ldrb	r7, [r5, #4]
 8024318:	7869      	ldrb	r1, [r5, #1]
 802431a:	9711      	str	r7, [sp, #68]	; 0x44
 802431c:	796f      	ldrb	r7, [r5, #5]
 802431e:	f895 e002 	ldrb.w	lr, [r5, #2]
 8024322:	f895 9003 	ldrb.w	r9, [r5, #3]
 8024326:	9712      	str	r7, [sp, #72]	; 0x48
 8024328:	b17a      	cbz	r2, 802434a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 802432a:	3505      	adds	r5, #5
 802432c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802432e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024330:	19ef      	adds	r7, r5, r7
 8024332:	5d2d      	ldrb	r5, [r5, r4]
 8024334:	787c      	ldrb	r4, [r7, #1]
 8024336:	9513      	str	r5, [sp, #76]	; 0x4c
 8024338:	9415      	str	r4, [sp, #84]	; 0x54
 802433a:	78bc      	ldrb	r4, [r7, #2]
 802433c:	9417      	str	r4, [sp, #92]	; 0x5c
 802433e:	78fc      	ldrb	r4, [r7, #3]
 8024340:	9414      	str	r4, [sp, #80]	; 0x50
 8024342:	793c      	ldrb	r4, [r7, #4]
 8024344:	9416      	str	r4, [sp, #88]	; 0x58
 8024346:	797c      	ldrb	r4, [r7, #5]
 8024348:	9418      	str	r4, [sp, #96]	; 0x60
 802434a:	b29b      	uxth	r3, r3
 802434c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802434e:	b292      	uxth	r2, r2
 8024350:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8024354:	fb03 f702 	mul.w	r7, r3, r2
 8024358:	011b      	lsls	r3, r3, #4
 802435a:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 802435e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8024362:	1bdb      	subs	r3, r3, r7
 8024364:	b292      	uxth	r2, r2
 8024366:	b29b      	uxth	r3, r3
 8024368:	ebac 0c02 	sub.w	ip, ip, r2
 802436c:	fb03 f909 	mul.w	r9, r3, r9
 8024370:	fa1f fc8c 	uxth.w	ip, ip
 8024374:	fb0c 9000 	mla	r0, ip, r0, r9
 8024378:	f896 9000 	ldrb.w	r9, [r6]
 802437c:	fb02 0004 	mla	r0, r2, r4, r0
 8024380:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024382:	fb07 0004 	mla	r0, r7, r4, r0
 8024386:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024388:	fb19 f904 	smulbb	r9, r9, r4
 802438c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024390:	fb00 9005 	mla	r0, r0, r5, r9
 8024394:	b280      	uxth	r0, r0
 8024396:	f100 0901 	add.w	r9, r0, #1
 802439a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802439e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80243a0:	4358      	muls	r0, r3
 80243a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80243a6:	fb0c 0101 	mla	r1, ip, r1, r0
 80243aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80243ac:	f886 9000 	strb.w	r9, [r6]
 80243b0:	fb02 1100 	mla	r1, r2, r0, r1
 80243b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80243b6:	fb07 1100 	mla	r1, r7, r0, r1
 80243ba:	7870      	ldrb	r0, [r6, #1]
 80243bc:	fb10 f004 	smulbb	r0, r0, r4
 80243c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80243c4:	fb01 0105 	mla	r1, r1, r5, r0
 80243c8:	b289      	uxth	r1, r1
 80243ca:	1c48      	adds	r0, r1, #1
 80243cc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80243d0:	1209      	asrs	r1, r1, #8
 80243d2:	7071      	strb	r1, [r6, #1]
 80243d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80243d6:	434b      	muls	r3, r1
 80243d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80243da:	fb0c 330e 	mla	r3, ip, lr, r3
 80243de:	fb02 3201 	mla	r2, r2, r1, r3
 80243e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80243e4:	fb07 2703 	mla	r7, r7, r3, r2
 80243e8:	78b2      	ldrb	r2, [r6, #2]
 80243ea:	fb12 f204 	smulbb	r2, r2, r4
 80243ee:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80243f2:	fb07 2505 	mla	r5, r7, r5, r2
 80243f6:	b2ad      	uxth	r5, r5
 80243f8:	1c6f      	adds	r7, r5, #1
 80243fa:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80243fe:	122d      	asrs	r5, r5, #8
 8024400:	70b5      	strb	r5, [r6, #2]
 8024402:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8024404:	3603      	adds	r6, #3
 8024406:	f10a 3aff 	add.w	sl, sl, #4294967295
 802440a:	4498      	add	r8, r3
 802440c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802440e:	449b      	add	fp, r3
 8024410:	e75f      	b.n	80242d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8024412:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8024414:	4498      	add	r8, r3
 8024416:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024418:	449b      	add	fp, r3
 802441a:	9b07      	ldr	r3, [sp, #28]
 802441c:	3b01      	subs	r3, #1
 802441e:	9307      	str	r3, [sp, #28]
 8024420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024422:	3303      	adds	r3, #3
 8024424:	9309      	str	r3, [sp, #36]	; 0x24
 8024426:	e709      	b.n	802423c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8024428:	f47f af1b 	bne.w	8024262 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 802442c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802442e:	2b00      	cmp	r3, #0
 8024430:	f340 80e3 	ble.w	80245fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8024434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024438:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802443a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802443e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024442:	eef0 6a48 	vmov.f32	s13, s16
 8024446:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802444a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802444e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024452:	ee16 8a90 	vmov	r8, s13
 8024456:	eef0 6a68 	vmov.f32	s13, s17
 802445a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802445e:	ee16 ba90 	vmov	fp, s13
 8024462:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024466:	ee69 7a27 	vmul.f32	s15, s18, s15
 802446a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802446e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024472:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024476:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802447a:	ee18 2a10 	vmov	r2, s16
 802447e:	eeb0 8a47 	vmov.f32	s16, s14
 8024482:	fb92 f3f3 	sdiv	r3, r2, r3
 8024486:	ee18 2a90 	vmov	r2, s17
 802448a:	9335      	str	r3, [sp, #212]	; 0xd4
 802448c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802448e:	eef0 8a67 	vmov.f32	s17, s15
 8024492:	fb92 f3f3 	sdiv	r3, r2, r3
 8024496:	9336      	str	r3, [sp, #216]	; 0xd8
 8024498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802449a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802449c:	3b01      	subs	r3, #1
 802449e:	930e      	str	r3, [sp, #56]	; 0x38
 80244a0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80244a2:	bf08      	it	eq
 80244a4:	4613      	moveq	r3, r2
 80244a6:	9307      	str	r3, [sp, #28]
 80244a8:	e6c1      	b.n	802422e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80244aa:	1c45      	adds	r5, r0, #1
 80244ac:	d1a9      	bne.n	8024402 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80244ae:	9c08      	ldr	r4, [sp, #32]
 80244b0:	42a0      	cmp	r0, r4
 80244b2:	daa6      	bge.n	8024402 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80244b4:	1c4c      	adds	r4, r1, #1
 80244b6:	dba4      	blt.n	8024402 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80244b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80244ba:	428c      	cmp	r4, r1
 80244bc:	dda1      	ble.n	8024402 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80244be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80244c0:	9001      	str	r0, [sp, #4]
 80244c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80244c4:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80244c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80244ca:	4631      	mov	r1, r6
 80244cc:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80244d0:	9300      	str	r3, [sp, #0]
 80244d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80244d4:	9b08      	ldr	r3, [sp, #32]
 80244d6:	f7ff fd5b 	bl	8023f90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80244da:	e792      	b.n	8024402 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80244dc:	ea4f 4228 	mov.w	r2, r8, asr #16
 80244e0:	9c08      	ldr	r4, [sp, #32]
 80244e2:	ea4f 402b 	mov.w	r0, fp, asr #16
 80244e6:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80244ea:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80244ee:	fb04 2000 	mla	r0, r4, r0, r2
 80244f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80244f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80244f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80244fa:	4402      	add	r2, r0
 80244fc:	5c25      	ldrb	r5, [r4, r0]
 80244fe:	7894      	ldrb	r4, [r2, #2]
 8024500:	7850      	ldrb	r0, [r2, #1]
 8024502:	9411      	str	r4, [sp, #68]	; 0x44
 8024504:	7954      	ldrb	r4, [r2, #5]
 8024506:	f892 a003 	ldrb.w	sl, [r2, #3]
 802450a:	f892 9004 	ldrb.w	r9, [r2, #4]
 802450e:	9412      	str	r4, [sp, #72]	; 0x48
 8024510:	b171      	cbz	r1, 8024530 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024512:	3205      	adds	r2, #5
 8024514:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024516:	1917      	adds	r7, r2, r4
 8024518:	5d12      	ldrb	r2, [r2, r4]
 802451a:	9219      	str	r2, [sp, #100]	; 0x64
 802451c:	787a      	ldrb	r2, [r7, #1]
 802451e:	921b      	str	r2, [sp, #108]	; 0x6c
 8024520:	78ba      	ldrb	r2, [r7, #2]
 8024522:	921d      	str	r2, [sp, #116]	; 0x74
 8024524:	78fa      	ldrb	r2, [r7, #3]
 8024526:	921a      	str	r2, [sp, #104]	; 0x68
 8024528:	793a      	ldrb	r2, [r7, #4]
 802452a:	921c      	str	r2, [sp, #112]	; 0x70
 802452c:	797a      	ldrb	r2, [r7, #5]
 802452e:	921e      	str	r2, [sp, #120]	; 0x78
 8024530:	b29b      	uxth	r3, r3
 8024532:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8024534:	b289      	uxth	r1, r1
 8024536:	3603      	adds	r6, #3
 8024538:	f10c 3cff 	add.w	ip, ip, #4294967295
 802453c:	fb03 f201 	mul.w	r2, r3, r1
 8024540:	011b      	lsls	r3, r3, #4
 8024542:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8024546:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802454a:	1a9b      	subs	r3, r3, r2
 802454c:	b289      	uxth	r1, r1
 802454e:	b29b      	uxth	r3, r3
 8024550:	1a7f      	subs	r7, r7, r1
 8024552:	fb03 fa0a 	mul.w	sl, r3, sl
 8024556:	b2bf      	uxth	r7, r7
 8024558:	fb03 f909 	mul.w	r9, r3, r9
 802455c:	fb07 a505 	mla	r5, r7, r5, sl
 8024560:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8024564:	fb07 9000 	mla	r0, r7, r0, r9
 8024568:	fb01 5504 	mla	r5, r1, r4, r5
 802456c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802456e:	fb02 5504 	mla	r5, r2, r4, r5
 8024572:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024574:	fb1a fa04 	smulbb	sl, sl, r4
 8024578:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802457c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 802457e:	fb05 a50e 	mla	r5, r5, lr, sl
 8024582:	fb01 0004 	mla	r0, r1, r4, r0
 8024586:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024588:	b2ad      	uxth	r5, r5
 802458a:	fb02 0004 	mla	r0, r2, r4, r0
 802458e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024590:	f105 0a01 	add.w	sl, r5, #1
 8024594:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024598:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802459c:	122d      	asrs	r5, r5, #8
 802459e:	f806 5c06 	strb.w	r5, [r6, #-6]
 80245a2:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 80245a6:	fb15 f504 	smulbb	r5, r5, r4
 80245aa:	fb00 500e 	mla	r0, r0, lr, r5
 80245ae:	b280      	uxth	r0, r0
 80245b0:	1c45      	adds	r5, r0, #1
 80245b2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80245b6:	1200      	asrs	r0, r0, #8
 80245b8:	f806 0c05 	strb.w	r0, [r6, #-5]
 80245bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80245be:	4343      	muls	r3, r0
 80245c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80245c2:	fb07 3300 	mla	r3, r7, r0, r3
 80245c6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80245c8:	fb01 3100 	mla	r1, r1, r0, r3
 80245cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80245ce:	fb02 1203 	mla	r2, r2, r3, r1
 80245d2:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80245d6:	fb11 f104 	smulbb	r1, r1, r4
 80245da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80245de:	fb02 120e 	mla	r2, r2, lr, r1
 80245e2:	b292      	uxth	r2, r2
 80245e4:	1c53      	adds	r3, r2, #1
 80245e6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80245ea:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80245ec:	1212      	asrs	r2, r2, #8
 80245ee:	4498      	add	r8, r3
 80245f0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80245f2:	f806 2c04 	strb.w	r2, [r6, #-4]
 80245f6:	449b      	add	fp, r3
 80245f8:	e64d      	b.n	8024296 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80245fa:	b021      	add	sp, #132	; 0x84
 80245fc:	ecbd 8b08 	vpop	{d8-d11}
 8024600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024604 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8024604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024608:	b085      	sub	sp, #20
 802460a:	784d      	ldrb	r5, [r1, #1]
 802460c:	788e      	ldrb	r6, [r1, #2]
 802460e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8024612:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8024616:	9403      	str	r4, [sp, #12]
 8024618:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802461c:	780c      	ldrb	r4, [r1, #0]
 802461e:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8024622:	fb07 ce03 	mla	lr, r7, r3, ip
 8024626:	2f00      	cmp	r7, #0
 8024628:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802462c:	eb02 0b0e 	add.w	fp, r2, lr
 8024630:	db56      	blt.n	80246e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8024632:	45b9      	cmp	r9, r7
 8024634:	dd54      	ble.n	80246e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8024636:	f1bc 0f00 	cmp.w	ip, #0
 802463a:	db4d      	blt.n	80246d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 802463c:	4563      	cmp	r3, ip
 802463e:	dd4b      	ble.n	80246d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8024640:	f812 200e 	ldrb.w	r2, [r2, lr]
 8024644:	9200      	str	r2, [sp, #0]
 8024646:	f89b 2001 	ldrb.w	r2, [fp, #1]
 802464a:	9201      	str	r2, [sp, #4]
 802464c:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8024650:	9202      	str	r2, [sp, #8]
 8024652:	f11c 0201 	adds.w	r2, ip, #1
 8024656:	d44a      	bmi.n	80246ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8024658:	4293      	cmp	r3, r2
 802465a:	dd48      	ble.n	80246ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802465c:	2800      	cmp	r0, #0
 802465e:	d046      	beq.n	80246ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8024660:	f89b e003 	ldrb.w	lr, [fp, #3]
 8024664:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8024668:	f89b a005 	ldrb.w	sl, [fp, #5]
 802466c:	3701      	adds	r7, #1
 802466e:	d446      	bmi.n	80246fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8024670:	45b9      	cmp	r9, r7
 8024672:	dd44      	ble.n	80246fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8024674:	9a03      	ldr	r2, [sp, #12]
 8024676:	2a00      	cmp	r2, #0
 8024678:	d045      	beq.n	8024706 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802467a:	f1bc 0f00 	cmp.w	ip, #0
 802467e:	db3a      	blt.n	80246f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8024680:	4563      	cmp	r3, ip
 8024682:	dd38      	ble.n	80246f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8024684:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024688:	f04f 0903 	mov.w	r9, #3
 802468c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8024690:	fb03 b209 	mla	r2, r3, r9, fp
 8024694:	fb03 b909 	mla	r9, r3, r9, fp
 8024698:	7852      	ldrb	r2, [r2, #1]
 802469a:	f899 9002 	ldrb.w	r9, [r9, #2]
 802469e:	f11c 0c01 	adds.w	ip, ip, #1
 80246a2:	d40d      	bmi.n	80246c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80246a4:	4563      	cmp	r3, ip
 80246a6:	dd0b      	ble.n	80246c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80246a8:	b160      	cbz	r0, 80246c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80246aa:	2603      	movs	r6, #3
 80246ac:	fb13 6406 	smlabb	r4, r3, r6, r6
 80246b0:	fb03 b506 	mla	r5, r3, r6, fp
 80246b4:	fb03 b306 	mla	r3, r3, r6, fp
 80246b8:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80246bc:	792d      	ldrb	r5, [r5, #4]
 80246be:	795e      	ldrb	r6, [r3, #5]
 80246c0:	280f      	cmp	r0, #15
 80246c2:	d802      	bhi.n	80246ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80246c4:	9b03      	ldr	r3, [sp, #12]
 80246c6:	2b0f      	cmp	r3, #15
 80246c8:	d922      	bls.n	8024710 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80246ca:	4b2f      	ldr	r3, [pc, #188]	; (8024788 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80246cc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80246d0:	4a2e      	ldr	r2, [pc, #184]	; (802478c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80246d2:	482f      	ldr	r0, [pc, #188]	; (8024790 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80246d4:	f003 ff96 	bl	8028604 <__assert_func>
 80246d8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80246dc:	9400      	str	r4, [sp, #0]
 80246de:	e7b8      	b.n	8024652 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80246e0:	46b2      	mov	sl, r6
 80246e2:	46a8      	mov	r8, r5
 80246e4:	46a6      	mov	lr, r4
 80246e6:	9400      	str	r4, [sp, #0]
 80246e8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80246ec:	e7be      	b.n	802466c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80246ee:	46b2      	mov	sl, r6
 80246f0:	46a8      	mov	r8, r5
 80246f2:	46a6      	mov	lr, r4
 80246f4:	e7ba      	b.n	802466c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80246f6:	46b1      	mov	r9, r6
 80246f8:	462a      	mov	r2, r5
 80246fa:	4627      	mov	r7, r4
 80246fc:	e7cf      	b.n	802469e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80246fe:	46b1      	mov	r9, r6
 8024700:	462a      	mov	r2, r5
 8024702:	4627      	mov	r7, r4
 8024704:	e7dc      	b.n	80246c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8024706:	280f      	cmp	r0, #15
 8024708:	d8df      	bhi.n	80246ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802470a:	46b1      	mov	r9, r6
 802470c:	462a      	mov	r2, r5
 802470e:	4627      	mov	r7, r4
 8024710:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8024714:	b280      	uxth	r0, r0
 8024716:	fb00 f30b 	mul.w	r3, r0, fp
 802471a:	0100      	lsls	r0, r0, #4
 802471c:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8024720:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8024724:	1ac0      	subs	r0, r0, r3
 8024726:	fa1f fb8b 	uxth.w	fp, fp
 802472a:	b280      	uxth	r0, r0
 802472c:	ebac 0c0b 	sub.w	ip, ip, fp
 8024730:	9003      	str	r0, [sp, #12]
 8024732:	fa1f fc8c 	uxth.w	ip, ip
 8024736:	fb00 fe0e 	mul.w	lr, r0, lr
 802473a:	9800      	ldr	r0, [sp, #0]
 802473c:	fb0c ee00 	mla	lr, ip, r0, lr
 8024740:	9803      	ldr	r0, [sp, #12]
 8024742:	fb00 f808 	mul.w	r8, r0, r8
 8024746:	9801      	ldr	r0, [sp, #4]
 8024748:	fb0b ee07 	mla	lr, fp, r7, lr
 802474c:	fb0c 8800 	mla	r8, ip, r0, r8
 8024750:	fb03 ee04 	mla	lr, r3, r4, lr
 8024754:	fb0b 8202 	mla	r2, fp, r2, r8
 8024758:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802475c:	fb03 2505 	mla	r5, r3, r5, r2
 8024760:	9a03      	ldr	r2, [sp, #12]
 8024762:	f881 e000 	strb.w	lr, [r1]
 8024766:	fb02 f00a 	mul.w	r0, r2, sl
 802476a:	9a02      	ldr	r2, [sp, #8]
 802476c:	122d      	asrs	r5, r5, #8
 802476e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8024772:	704d      	strb	r5, [r1, #1]
 8024774:	fb0b c909 	mla	r9, fp, r9, ip
 8024778:	fb03 9606 	mla	r6, r3, r6, r9
 802477c:	1236      	asrs	r6, r6, #8
 802477e:	708e      	strb	r6, [r1, #2]
 8024780:	b005      	add	sp, #20
 8024782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024786:	bf00      	nop
 8024788:	0802d907 	.word	0x0802d907
 802478c:	0802ddfe 	.word	0x0802ddfe
 8024790:	0802d9d0 	.word	0x0802d9d0

08024794 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024798:	ed2d 8b0a 	vpush	{d8-d12}
 802479c:	b09d      	sub	sp, #116	; 0x74
 802479e:	eeb0 aa40 	vmov.f32	s20, s0
 80247a2:	eef0 9a60 	vmov.f32	s19, s1
 80247a6:	9306      	str	r3, [sp, #24]
 80247a8:	eeb0 9a41 	vmov.f32	s18, s2
 80247ac:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80247b0:	eeb0 8a62 	vmov.f32	s16, s5
 80247b4:	901b      	str	r0, [sp, #108]	; 0x6c
 80247b6:	eef0 8a43 	vmov.f32	s17, s6
 80247ba:	9307      	str	r3, [sp, #28]
 80247bc:	eeb0 ca44 	vmov.f32	s24, s8
 80247c0:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80247c4:	eef0 ba64 	vmov.f32	s23, s9
 80247c8:	eeb0 ba45 	vmov.f32	s22, s10
 80247cc:	9309      	str	r3, [sp, #36]	; 0x24
 80247ce:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80247d2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80247d6:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80247d8:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80247dc:	6850      	ldr	r0, [r2, #4]
 80247de:	6812      	ldr	r2, [r2, #0]
 80247e0:	fb00 1303 	mla	r3, r0, r3, r1
 80247e4:	9907      	ldr	r1, [sp, #28]
 80247e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80247ea:	18d3      	adds	r3, r2, r3
 80247ec:	2203      	movs	r2, #3
 80247ee:	9308      	str	r3, [sp, #32]
 80247f0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80247f2:	681b      	ldr	r3, [r3, #0]
 80247f4:	930a      	str	r3, [sp, #40]	; 0x28
 80247f6:	f06f 0304 	mvn.w	r3, #4
 80247fa:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80247fe:	fb11 3302 	smlabb	r3, r1, r2, r3
 8024802:	930b      	str	r3, [sp, #44]	; 0x2c
 8024804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024806:	2b00      	cmp	r3, #0
 8024808:	dc03      	bgt.n	8024812 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802480a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802480c:	2b00      	cmp	r3, #0
 802480e:	f340 8193 	ble.w	8024b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8024812:	9b06      	ldr	r3, [sp, #24]
 8024814:	2b00      	cmp	r3, #0
 8024816:	f340 80d0 	ble.w	80249ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 802481a:	1432      	asrs	r2, r6, #16
 802481c:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024820:	d42f      	bmi.n	8024882 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8024822:	1c51      	adds	r1, r2, #1
 8024824:	9807      	ldr	r0, [sp, #28]
 8024826:	4281      	cmp	r1, r0
 8024828:	da2e      	bge.n	8024888 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802482a:	2b00      	cmp	r3, #0
 802482c:	db2c      	blt.n	8024888 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802482e:	1c59      	adds	r1, r3, #1
 8024830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024832:	4288      	cmp	r0, r1
 8024834:	dd28      	ble.n	8024888 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024836:	9b06      	ldr	r3, [sp, #24]
 8024838:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802483a:	3b01      	subs	r3, #1
 802483c:	fb02 6203 	mla	r2, r2, r3, r6
 8024840:	1412      	asrs	r2, r2, #16
 8024842:	d42c      	bmi.n	802489e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8024844:	3201      	adds	r2, #1
 8024846:	9907      	ldr	r1, [sp, #28]
 8024848:	4291      	cmp	r1, r2
 802484a:	dd28      	ble.n	802489e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802484c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802484e:	fb02 5303 	mla	r3, r2, r3, r5
 8024852:	141b      	asrs	r3, r3, #16
 8024854:	d423      	bmi.n	802489e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8024856:	3301      	adds	r3, #1
 8024858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802485a:	429a      	cmp	r2, r3
 802485c:	dd1f      	ble.n	802489e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802485e:	9b08      	ldr	r3, [sp, #32]
 8024860:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024864:	f103 0c03 	add.w	ip, r3, #3
 8024868:	f1be 0f00 	cmp.w	lr, #0
 802486c:	f300 80fa 	bgt.w	8024a64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8024870:	9b06      	ldr	r3, [sp, #24]
 8024872:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024876:	9b08      	ldr	r3, [sp, #32]
 8024878:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802487c:	4423      	add	r3, r4
 802487e:	9308      	str	r3, [sp, #32]
 8024880:	e09d      	b.n	80249be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8024882:	1c51      	adds	r1, r2, #1
 8024884:	f040 808e 	bne.w	80249a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024888:	9907      	ldr	r1, [sp, #28]
 802488a:	428a      	cmp	r2, r1
 802488c:	f280 808a 	bge.w	80249a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024890:	1c5f      	adds	r7, r3, #1
 8024892:	f2c0 8087 	blt.w	80249a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024898:	4293      	cmp	r3, r2
 802489a:	f280 8083 	bge.w	80249a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802489e:	9f06      	ldr	r7, [sp, #24]
 80248a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80248a4:	2f00      	cmp	r7, #0
 80248a6:	dde3      	ble.n	8024870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80248a8:	1432      	asrs	r2, r6, #16
 80248aa:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80248ae:	ea4f 4325 	mov.w	r3, r5, asr #16
 80248b2:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80248b6:	f100 80bf 	bmi.w	8024a38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80248ba:	1c50      	adds	r0, r2, #1
 80248bc:	9c07      	ldr	r4, [sp, #28]
 80248be:	4284      	cmp	r4, r0
 80248c0:	f340 80bc 	ble.w	8024a3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	f2c0 80b9 	blt.w	8024a3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80248ca:	1c58      	adds	r0, r3, #1
 80248cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80248ce:	4284      	cmp	r4, r0
 80248d0:	f340 80b4 	ble.w	8024a3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80248d4:	9807      	ldr	r0, [sp, #28]
 80248d6:	fb00 2303 	mla	r3, r0, r3, r2
 80248da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80248dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80248de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80248e2:	441a      	add	r2, r3
 80248e4:	f810 c003 	ldrb.w	ip, [r0, r3]
 80248e8:	7953      	ldrb	r3, [r2, #5]
 80248ea:	7850      	ldrb	r0, [r2, #1]
 80248ec:	f892 e002 	ldrb.w	lr, [r2, #2]
 80248f0:	f892 9003 	ldrb.w	r9, [r2, #3]
 80248f4:	f892 8004 	ldrb.w	r8, [r2, #4]
 80248f8:	930e      	str	r3, [sp, #56]	; 0x38
 80248fa:	f1bb 0f00 	cmp.w	fp, #0
 80248fe:	d00f      	beq.n	8024920 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8024900:	3205      	adds	r2, #5
 8024902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024904:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024906:	18d3      	adds	r3, r2, r3
 8024908:	5d12      	ldrb	r2, [r2, r4]
 802490a:	920f      	str	r2, [sp, #60]	; 0x3c
 802490c:	785a      	ldrb	r2, [r3, #1]
 802490e:	9211      	str	r2, [sp, #68]	; 0x44
 8024910:	789a      	ldrb	r2, [r3, #2]
 8024912:	9213      	str	r2, [sp, #76]	; 0x4c
 8024914:	78da      	ldrb	r2, [r3, #3]
 8024916:	9210      	str	r2, [sp, #64]	; 0x40
 8024918:	791a      	ldrb	r2, [r3, #4]
 802491a:	795b      	ldrb	r3, [r3, #5]
 802491c:	9212      	str	r2, [sp, #72]	; 0x48
 802491e:	9314      	str	r3, [sp, #80]	; 0x50
 8024920:	b28b      	uxth	r3, r1
 8024922:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024924:	fa1f f28b 	uxth.w	r2, fp
 8024928:	fb03 fb02 	mul.w	fp, r3, r2
 802492c:	011b      	lsls	r3, r3, #4
 802492e:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8024932:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8024936:	eba3 030b 	sub.w	r3, r3, fp
 802493a:	b292      	uxth	r2, r2
 802493c:	b29b      	uxth	r3, r3
 802493e:	1a89      	subs	r1, r1, r2
 8024940:	fb03 f808 	mul.w	r8, r3, r8
 8024944:	b289      	uxth	r1, r1
 8024946:	fb03 f909 	mul.w	r9, r3, r9
 802494a:	fb01 8800 	mla	r8, r1, r0, r8
 802494e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024950:	fb01 990c 	mla	r9, r1, ip, r9
 8024954:	fb02 8800 	mla	r8, r2, r0, r8
 8024958:	9812      	ldr	r0, [sp, #72]	; 0x48
 802495a:	fb02 9904 	mla	r9, r2, r4, r9
 802495e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024960:	fb0b 8800 	mla	r8, fp, r0, r8
 8024964:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024966:	fb0b 9904 	mla	r9, fp, r4, r9
 802496a:	4343      	muls	r3, r0
 802496c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024970:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024974:	fb01 330e 	mla	r3, r1, lr, r3
 8024978:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802497a:	f88a 9000 	strb.w	r9, [sl]
 802497e:	fb02 3201 	mla	r2, r2, r1, r3
 8024982:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024984:	f88a 8001 	strb.w	r8, [sl, #1]
 8024988:	fb0b 2b03 	mla	fp, fp, r3, r2
 802498c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8024990:	f88a b002 	strb.w	fp, [sl, #2]
 8024994:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024996:	f10a 0a03 	add.w	sl, sl, #3
 802499a:	3f01      	subs	r7, #1
 802499c:	441e      	add	r6, r3
 802499e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80249a0:	441d      	add	r5, r3
 80249a2:	e77f      	b.n	80248a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80249a4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80249a6:	441e      	add	r6, r3
 80249a8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80249aa:	441d      	add	r5, r3
 80249ac:	9b06      	ldr	r3, [sp, #24]
 80249ae:	3b01      	subs	r3, #1
 80249b0:	9306      	str	r3, [sp, #24]
 80249b2:	9b08      	ldr	r3, [sp, #32]
 80249b4:	3303      	adds	r3, #3
 80249b6:	9308      	str	r3, [sp, #32]
 80249b8:	e72b      	b.n	8024812 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80249ba:	f47f af3c 	bne.w	8024836 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80249be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80249c0:	2b00      	cmp	r3, #0
 80249c2:	f340 80b9 	ble.w	8024b38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80249c6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80249ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80249cc:	ee79 9aab 	vadd.f32	s19, s19, s23
 80249d0:	eef0 6a48 	vmov.f32	s13, s16
 80249d4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80249d8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80249dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249e0:	ee16 6a90 	vmov	r6, s13
 80249e4:	eef0 6a68 	vmov.f32	s13, s17
 80249e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249ec:	ee16 5a90 	vmov	r5, s13
 80249f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80249f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80249f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80249fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024a00:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024a04:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024a08:	ee18 2a10 	vmov	r2, s16
 8024a0c:	eeb0 8a47 	vmov.f32	s16, s14
 8024a10:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a14:	ee18 2a90 	vmov	r2, s17
 8024a18:	9333      	str	r3, [sp, #204]	; 0xcc
 8024a1a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024a1c:	eef0 8a67 	vmov.f32	s17, s15
 8024a20:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a24:	9334      	str	r3, [sp, #208]	; 0xd0
 8024a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024a2a:	3b01      	subs	r3, #1
 8024a2c:	930c      	str	r3, [sp, #48]	; 0x30
 8024a2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024a30:	bf08      	it	eq
 8024a32:	4613      	moveq	r3, r2
 8024a34:	9306      	str	r3, [sp, #24]
 8024a36:	e6e5      	b.n	8024804 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8024a38:	1c54      	adds	r4, r2, #1
 8024a3a:	d1ab      	bne.n	8024994 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024a3c:	9807      	ldr	r0, [sp, #28]
 8024a3e:	4282      	cmp	r2, r0
 8024a40:	daa8      	bge.n	8024994 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024a42:	1c58      	adds	r0, r3, #1
 8024a44:	dba6      	blt.n	8024994 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024a48:	4298      	cmp	r0, r3
 8024a4a:	dda3      	ble.n	8024994 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024a4c:	9000      	str	r0, [sp, #0]
 8024a4e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024a50:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8024a54:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8024a58:	9b07      	ldr	r3, [sp, #28]
 8024a5a:	4651      	mov	r1, sl
 8024a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024a5e:	f7ff fdd1 	bl	8024604 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8024a62:	e797      	b.n	8024994 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024a64:	1431      	asrs	r1, r6, #16
 8024a66:	9c07      	ldr	r4, [sp, #28]
 8024a68:	1428      	asrs	r0, r5, #16
 8024a6a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024a6e:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8024a72:	fb04 1000 	mla	r0, r4, r0, r1
 8024a76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024a78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a7e:	4401      	add	r1, r0
 8024a80:	5c20      	ldrb	r0, [r4, r0]
 8024a82:	f891 8002 	ldrb.w	r8, [r1, #2]
 8024a86:	900e      	str	r0, [sp, #56]	; 0x38
 8024a88:	f891 a003 	ldrb.w	sl, [r1, #3]
 8024a8c:	7848      	ldrb	r0, [r1, #1]
 8024a8e:	f891 9004 	ldrb.w	r9, [r1, #4]
 8024a92:	f891 b005 	ldrb.w	fp, [r1, #5]
 8024a96:	b172      	cbz	r2, 8024ab6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8024a98:	3105      	adds	r1, #5
 8024a9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024a9c:	190f      	adds	r7, r1, r4
 8024a9e:	5d09      	ldrb	r1, [r1, r4]
 8024aa0:	9115      	str	r1, [sp, #84]	; 0x54
 8024aa2:	7879      	ldrb	r1, [r7, #1]
 8024aa4:	9117      	str	r1, [sp, #92]	; 0x5c
 8024aa6:	78b9      	ldrb	r1, [r7, #2]
 8024aa8:	9119      	str	r1, [sp, #100]	; 0x64
 8024aaa:	78f9      	ldrb	r1, [r7, #3]
 8024aac:	9116      	str	r1, [sp, #88]	; 0x58
 8024aae:	7939      	ldrb	r1, [r7, #4]
 8024ab0:	9118      	str	r1, [sp, #96]	; 0x60
 8024ab2:	7979      	ldrb	r1, [r7, #5]
 8024ab4:	911a      	str	r1, [sp, #104]	; 0x68
 8024ab6:	b29b      	uxth	r3, r3
 8024ab8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024aba:	b292      	uxth	r2, r2
 8024abc:	f10c 0c03 	add.w	ip, ip, #3
 8024ac0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024ac4:	fb03 f102 	mul.w	r1, r3, r2
 8024ac8:	011b      	lsls	r3, r3, #4
 8024aca:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8024ace:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8024ad2:	1a5b      	subs	r3, r3, r1
 8024ad4:	b292      	uxth	r2, r2
 8024ad6:	b29b      	uxth	r3, r3
 8024ad8:	1abf      	subs	r7, r7, r2
 8024ada:	fb03 f909 	mul.w	r9, r3, r9
 8024ade:	b2bf      	uxth	r7, r7
 8024ae0:	fb03 fa0a 	mul.w	sl, r3, sl
 8024ae4:	fb03 f30b 	mul.w	r3, r3, fp
 8024ae8:	fb07 9900 	mla	r9, r7, r0, r9
 8024aec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024aee:	fb07 aa04 	mla	sl, r7, r4, sl
 8024af2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024af4:	fb02 9900 	mla	r9, r2, r0, r9
 8024af8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024afa:	fb07 3308 	mla	r3, r7, r8, r3
 8024afe:	fb01 9900 	mla	r9, r1, r0, r9
 8024b02:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024b04:	fb02 aa04 	mla	sl, r2, r4, sl
 8024b08:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024b0a:	fb02 3200 	mla	r2, r2, r0, r3
 8024b0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024b10:	fb01 aa04 	mla	sl, r1, r4, sl
 8024b14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024b18:	fb01 2103 	mla	r1, r1, r3, r2
 8024b1c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024b1e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024b22:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8024b26:	1209      	asrs	r1, r1, #8
 8024b28:	441e      	add	r6, r3
 8024b2a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024b2c:	f80c ac06 	strb.w	sl, [ip, #-6]
 8024b30:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8024b34:	441d      	add	r5, r3
 8024b36:	e697      	b.n	8024868 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8024b38:	b01d      	add	sp, #116	; 0x74
 8024b3a:	ecbd 8b0a 	vpop	{d8-d12}
 8024b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024b44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8024b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b48:	b085      	sub	sp, #20
 8024b4a:	7888      	ldrb	r0, [r1, #2]
 8024b4c:	4691      	mov	r9, r2
 8024b4e:	9000      	str	r0, [sp, #0]
 8024b50:	7848      	ldrb	r0, [r1, #1]
 8024b52:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8024b56:	9001      	str	r0, [sp, #4]
 8024b58:	7808      	ldrb	r0, [r1, #0]
 8024b5a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024b5e:	9002      	str	r0, [sp, #8]
 8024b60:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024b64:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8024b68:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8024b6c:	fb04 c603 	mla	r6, r4, r3, ip
 8024b70:	2c00      	cmp	r4, #0
 8024b72:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8024b76:	9a00      	ldr	r2, [sp, #0]
 8024b78:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024b7c:	9a01      	ldr	r2, [sp, #4]
 8024b7e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8024b82:	db3a      	blt.n	8024bfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8024b84:	45a0      	cmp	r8, r4
 8024b86:	dd38      	ble.n	8024bfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8024b88:	f1bc 0f00 	cmp.w	ip, #0
 8024b8c:	db33      	blt.n	8024bf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8024b8e:	4563      	cmp	r3, ip
 8024b90:	dd31      	ble.n	8024bf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8024b92:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8024b96:	f11c 0601 	adds.w	r6, ip, #1
 8024b9a:	d431      	bmi.n	8024c00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024b9c:	42b3      	cmp	r3, r6
 8024b9e:	dd2f      	ble.n	8024c00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024ba0:	b375      	cbz	r5, 8024c00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024ba2:	f8de 6004 	ldr.w	r6, [lr, #4]
 8024ba6:	3401      	adds	r4, #1
 8024ba8:	d42e      	bmi.n	8024c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024baa:	45a0      	cmp	r8, r4
 8024bac:	dd2c      	ble.n	8024c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024bae:	b35f      	cbz	r7, 8024c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024bb0:	f1bc 0f00 	cmp.w	ip, #0
 8024bb4:	db26      	blt.n	8024c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8024bb6:	4563      	cmp	r3, ip
 8024bb8:	dd24      	ble.n	8024c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8024bba:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8024bbe:	f11c 0c01 	adds.w	ip, ip, #1
 8024bc2:	d405      	bmi.n	8024bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024bc4:	4563      	cmp	r3, ip
 8024bc6:	dd03      	ble.n	8024bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024bc8:	b115      	cbz	r5, 8024bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024bca:	3301      	adds	r3, #1
 8024bcc:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8024bd0:	2d0f      	cmp	r5, #15
 8024bd2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024bd6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024bda:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024bde:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024be2:	d801      	bhi.n	8024be8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8024be4:	2f0f      	cmp	r7, #15
 8024be6:	d911      	bls.n	8024c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8024be8:	4b80      	ldr	r3, [pc, #512]	; (8024dec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8024bea:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024bee:	4a80      	ldr	r2, [pc, #512]	; (8024df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8024bf0:	4880      	ldr	r0, [pc, #512]	; (8024df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8024bf2:	f003 fd07 	bl	8028604 <__assert_func>
 8024bf6:	4602      	mov	r2, r0
 8024bf8:	e7cd      	b.n	8024b96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8024bfa:	4606      	mov	r6, r0
 8024bfc:	4602      	mov	r2, r0
 8024bfe:	e7d2      	b.n	8024ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8024c00:	4606      	mov	r6, r0
 8024c02:	e7d0      	b.n	8024ba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8024c04:	4604      	mov	r4, r0
 8024c06:	e7da      	b.n	8024bbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8024c08:	4604      	mov	r4, r0
 8024c0a:	e7e1      	b.n	8024bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024c0c:	b2ab      	uxth	r3, r5
 8024c0e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024c12:	b2bf      	uxth	r7, r7
 8024c14:	fb03 fe07 	mul.w	lr, r3, r7
 8024c18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8024c1c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024c20:	eba3 0c0e 	sub.w	ip, r3, lr
 8024c24:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8024c28:	b2bf      	uxth	r7, r7
 8024c2a:	fa1f fc8c 	uxth.w	ip, ip
 8024c2e:	eba5 0507 	sub.w	r5, r5, r7
 8024c32:	fb0c f30a 	mul.w	r3, ip, sl
 8024c36:	b2ad      	uxth	r5, r5
 8024c38:	fb05 330b 	mla	r3, r5, fp, r3
 8024c3c:	fb07 3309 	mla	r3, r7, r9, r3
 8024c40:	fb0e 3308 	mla	r3, lr, r8, r3
 8024c44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c48:	9303      	str	r3, [sp, #12]
 8024c4a:	d018      	beq.n	8024c7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8024c4c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024c50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024c54:	fb0b f303 	mul.w	r3, fp, r3
 8024c58:	fb0b fb02 	mul.w	fp, fp, r2
 8024c5c:	0a1a      	lsrs	r2, r3, #8
 8024c5e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024c62:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024c66:	441a      	add	r2, r3
 8024c68:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8024c6c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8024c70:	0a12      	lsrs	r2, r2, #8
 8024c72:	0a1b      	lsrs	r3, r3, #8
 8024c74:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024c78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c7c:	431a      	orrs	r2, r3
 8024c7e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024c82:	d019      	beq.n	8024cb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8024c84:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024c88:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024c8c:	fb0a fb0b 	mul.w	fp, sl, fp
 8024c90:	fb0a fa06 	mul.w	sl, sl, r6
 8024c94:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024c98:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c9c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8024ca0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024ca4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024ca8:	445e      	add	r6, fp
 8024caa:	0a1b      	lsrs	r3, r3, #8
 8024cac:	0a36      	lsrs	r6, r6, #8
 8024cae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024cb2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024cb6:	431e      	orrs	r6, r3
 8024cb8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024cbc:	d019      	beq.n	8024cf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8024cbe:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024cc2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024cc6:	fb09 fa0a 	mul.w	sl, r9, sl
 8024cca:	fb09 f904 	mul.w	r9, r9, r4
 8024cce:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024cd2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024cd6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8024cda:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024cde:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8024ce2:	4454      	add	r4, sl
 8024ce4:	0a1b      	lsrs	r3, r3, #8
 8024ce6:	0a24      	lsrs	r4, r4, #8
 8024ce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024cec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024cf0:	431c      	orrs	r4, r3
 8024cf2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024cf6:	d019      	beq.n	8024d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8024cf8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8024cfc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024d00:	fb08 f909 	mul.w	r9, r8, r9
 8024d04:	fb08 f800 	mul.w	r8, r8, r0
 8024d08:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8024d0c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024d10:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8024d14:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024d18:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8024d1c:	4448      	add	r0, r9
 8024d1e:	0a1b      	lsrs	r3, r3, #8
 8024d20:	0a00      	lsrs	r0, r0, #8
 8024d22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d26:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024d2a:	4318      	orrs	r0, r3
 8024d2c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024d30:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024d34:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024d38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024d3c:	fb0c f808 	mul.w	r8, ip, r8
 8024d40:	fb0c f606 	mul.w	r6, ip, r6
 8024d44:	fb05 8803 	mla	r8, r5, r3, r8
 8024d48:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8024d4c:	fb05 6202 	mla	r2, r5, r2, r6
 8024d50:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024d54:	fb07 8803 	mla	r8, r7, r3, r8
 8024d58:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8024d5c:	fb07 2704 	mla	r7, r7, r4, r2
 8024d60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024d64:	fb0e 8303 	mla	r3, lr, r3, r8
 8024d68:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8024d6c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8024d70:	9803      	ldr	r0, [sp, #12]
 8024d72:	b292      	uxth	r2, r2
 8024d74:	9c02      	ldr	r4, [sp, #8]
 8024d76:	0a1b      	lsrs	r3, r3, #8
 8024d78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d7c:	4350      	muls	r0, r2
 8024d7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d82:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024d86:	ea43 0e0e 	orr.w	lr, r3, lr
 8024d8a:	1c43      	adds	r3, r0, #1
 8024d8c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024d90:	fa5f f08e 	uxtb.w	r0, lr
 8024d94:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024d98:	b2db      	uxtb	r3, r3
 8024d9a:	fb14 f403 	smulbb	r4, r4, r3
 8024d9e:	fb00 4002 	mla	r0, r0, r2, r4
 8024da2:	b280      	uxth	r0, r0
 8024da4:	1c44      	adds	r4, r0, #1
 8024da6:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024daa:	9c01      	ldr	r4, [sp, #4]
 8024dac:	fb14 f403 	smulbb	r4, r4, r3
 8024db0:	1200      	asrs	r0, r0, #8
 8024db2:	7008      	strb	r0, [r1, #0]
 8024db4:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8024db8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024dbc:	fb00 4002 	mla	r0, r0, r2, r4
 8024dc0:	b280      	uxth	r0, r0
 8024dc2:	1c44      	adds	r4, r0, #1
 8024dc4:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024dc8:	1200      	asrs	r0, r0, #8
 8024dca:	7048      	strb	r0, [r1, #1]
 8024dcc:	9800      	ldr	r0, [sp, #0]
 8024dce:	fb10 f303 	smulbb	r3, r0, r3
 8024dd2:	fb0e 3202 	mla	r2, lr, r2, r3
 8024dd6:	b292      	uxth	r2, r2
 8024dd8:	f102 0e01 	add.w	lr, r2, #1
 8024ddc:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024de0:	1212      	asrs	r2, r2, #8
 8024de2:	708a      	strb	r2, [r1, #2]
 8024de4:	b005      	add	sp, #20
 8024de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dea:	bf00      	nop
 8024dec:	0802d907 	.word	0x0802d907
 8024df0:	0802ddfe 	.word	0x0802ddfe
 8024df4:	0802d9d0 	.word	0x0802d9d0

08024df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dfc:	ed2d 8b08 	vpush	{d8-d11}
 8024e00:	b099      	sub	sp, #100	; 0x64
 8024e02:	eeb0 aa40 	vmov.f32	s20, s0
 8024e06:	eef0 9a60 	vmov.f32	s19, s1
 8024e0a:	9306      	str	r3, [sp, #24]
 8024e0c:	eeb0 9a41 	vmov.f32	s18, s2
 8024e10:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8024e14:	eeb0 8a62 	vmov.f32	s16, s5
 8024e18:	9216      	str	r2, [sp, #88]	; 0x58
 8024e1a:	eef0 8a43 	vmov.f32	s17, s6
 8024e1e:	9307      	str	r3, [sp, #28]
 8024e20:	eef0 ba44 	vmov.f32	s23, s8
 8024e24:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8024e28:	eeb0 ba64 	vmov.f32	s22, s9
 8024e2c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024e2e:	eef0 aa45 	vmov.f32	s21, s10
 8024e32:	9310      	str	r3, [sp, #64]	; 0x40
 8024e34:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8024e38:	9017      	str	r0, [sp, #92]	; 0x5c
 8024e3a:	9112      	str	r1, [sp, #72]	; 0x48
 8024e3c:	6850      	ldr	r0, [r2, #4]
 8024e3e:	9315      	str	r3, [sp, #84]	; 0x54
 8024e40:	6812      	ldr	r2, [r2, #0]
 8024e42:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8024e44:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024e48:	fb00 1303 	mla	r3, r0, r3, r1
 8024e4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024e50:	18d3      	adds	r3, r2, r3
 8024e52:	930a      	str	r3, [sp, #40]	; 0x28
 8024e54:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024e56:	681b      	ldr	r3, [r3, #0]
 8024e58:	9311      	str	r3, [sp, #68]	; 0x44
 8024e5a:	9b07      	ldr	r3, [sp, #28]
 8024e5c:	009b      	lsls	r3, r3, #2
 8024e5e:	930e      	str	r3, [sp, #56]	; 0x38
 8024e60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024e62:	2b00      	cmp	r3, #0
 8024e64:	dc03      	bgt.n	8024e6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8024e66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024e68:	2b00      	cmp	r3, #0
 8024e6a:	f340 833b 	ble.w	80254e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8024e6e:	9b06      	ldr	r3, [sp, #24]
 8024e70:	2b00      	cmp	r3, #0
 8024e72:	f340 8197 	ble.w	80251a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8024e76:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024e78:	1423      	asrs	r3, r4, #16
 8024e7a:	1412      	asrs	r2, r2, #16
 8024e7c:	d432      	bmi.n	8024ee4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8024e7e:	1c51      	adds	r1, r2, #1
 8024e80:	9807      	ldr	r0, [sp, #28]
 8024e82:	4288      	cmp	r0, r1
 8024e84:	dd31      	ble.n	8024eea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024e86:	2b00      	cmp	r3, #0
 8024e88:	db2f      	blt.n	8024eea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024e8a:	1c59      	adds	r1, r3, #1
 8024e8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024e8e:	4288      	cmp	r0, r1
 8024e90:	dd2b      	ble.n	8024eea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024e92:	9b06      	ldr	r3, [sp, #24]
 8024e94:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024e96:	3b01      	subs	r3, #1
 8024e98:	992b      	ldr	r1, [sp, #172]	; 0xac
 8024e9a:	fb02 1203 	mla	r2, r2, r3, r1
 8024e9e:	1412      	asrs	r2, r2, #16
 8024ea0:	d42e      	bmi.n	8024f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024ea2:	3201      	adds	r2, #1
 8024ea4:	9907      	ldr	r1, [sp, #28]
 8024ea6:	4291      	cmp	r1, r2
 8024ea8:	dd2a      	ble.n	8024f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024eaa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024eac:	fb02 4303 	mla	r3, r2, r3, r4
 8024eb0:	141b      	asrs	r3, r3, #16
 8024eb2:	d425      	bmi.n	8024f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024eb4:	3301      	adds	r3, #1
 8024eb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024eb8:	429a      	cmp	r2, r3
 8024eba:	dd21      	ble.n	8024f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ebe:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8024ec2:	f103 0e03 	add.w	lr, r3, #3
 8024ec6:	9b06      	ldr	r3, [sp, #24]
 8024ec8:	9313      	str	r3, [sp, #76]	; 0x4c
 8024eca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024ecc:	2b00      	cmp	r3, #0
 8024ece:	f300 81d2 	bgt.w	8025276 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8024ed2:	9b06      	ldr	r3, [sp, #24]
 8024ed4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024eda:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024ede:	4423      	add	r3, r4
 8024ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8024ee2:	e161      	b.n	80251a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8024ee4:	1c51      	adds	r1, r2, #1
 8024ee6:	f040 8150 	bne.w	802518a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024eea:	9907      	ldr	r1, [sp, #28]
 8024eec:	428a      	cmp	r2, r1
 8024eee:	f280 814c 	bge.w	802518a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024ef2:	1c5a      	adds	r2, r3, #1
 8024ef4:	f2c0 8149 	blt.w	802518a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024ef8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024efa:	4293      	cmp	r3, r2
 8024efc:	f280 8145 	bge.w	802518a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024f00:	9b06      	ldr	r3, [sp, #24]
 8024f02:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024f04:	9314      	str	r3, [sp, #80]	; 0x50
 8024f06:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8024f0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8024f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024f0e:	2b00      	cmp	r3, #0
 8024f10:	dddf      	ble.n	8024ed2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8024f12:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024f14:	1423      	asrs	r3, r4, #16
 8024f16:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024f1a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8024f1e:	1412      	asrs	r2, r2, #16
 8024f20:	f100 8190 	bmi.w	8025244 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8024f24:	1c55      	adds	r5, r2, #1
 8024f26:	9f07      	ldr	r7, [sp, #28]
 8024f28:	42af      	cmp	r7, r5
 8024f2a:	f340 818d 	ble.w	8025248 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024f2e:	2b00      	cmp	r3, #0
 8024f30:	f2c0 818a 	blt.w	8025248 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024f34:	1c5d      	adds	r5, r3, #1
 8024f36:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024f38:	42af      	cmp	r7, r5
 8024f3a:	f340 8185 	ble.w	8025248 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024f3e:	9d07      	ldr	r5, [sp, #28]
 8024f40:	fb03 2305 	mla	r3, r3, r5, r2
 8024f44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024f46:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8024f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f4e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024f52:	2800      	cmp	r0, #0
 8024f54:	f000 8167 	beq.w	8025226 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024f58:	686a      	ldr	r2, [r5, #4]
 8024f5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8024f5c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024f60:	2900      	cmp	r1, #0
 8024f62:	f000 8169 	beq.w	8025238 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8024f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024f68:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024f6a:	18aa      	adds	r2, r5, r2
 8024f6c:	59ed      	ldr	r5, [r5, r7]
 8024f6e:	6852      	ldr	r2, [r2, #4]
 8024f70:	9508      	str	r5, [sp, #32]
 8024f72:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8024f76:	0e15      	lsrs	r5, r2, #24
 8024f78:	920c      	str	r2, [sp, #48]	; 0x30
 8024f7a:	b280      	uxth	r0, r0
 8024f7c:	b289      	uxth	r1, r1
 8024f7e:	fb00 fb01 	mul.w	fp, r0, r1
 8024f82:	0100      	lsls	r0, r0, #4
 8024f84:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8024f88:	eba0 090b 	sub.w	r9, r0, fp
 8024f8c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8024f90:	b289      	uxth	r1, r1
 8024f92:	fa1f f989 	uxth.w	r9, r9
 8024f96:	1a52      	subs	r2, r2, r1
 8024f98:	fb09 f008 	mul.w	r0, r9, r8
 8024f9c:	b292      	uxth	r2, r2
 8024f9e:	fb02 000c 	mla	r0, r2, ip, r0
 8024fa2:	fb01 000a 	mla	r0, r1, sl, r0
 8024fa6:	fb0b 0005 	mla	r0, fp, r5, r0
 8024faa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024fae:	2800      	cmp	r0, #0
 8024fb0:	f000 80e0 	beq.w	8025174 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024fb4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024fb8:	d01b      	beq.n	8024ff2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8024fba:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024fbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024fc2:	fb0c fe0e 	mul.w	lr, ip, lr
 8024fc6:	fb0c fc03 	mul.w	ip, ip, r3
 8024fca:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8024fce:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024fd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fd6:	4473      	add	r3, lr
 8024fd8:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8024fdc:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8024fe0:	0a1b      	lsrs	r3, r3, #8
 8024fe2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024fe6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024fee:	ea43 030e 	orr.w	r3, r3, lr
 8024ff2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024ff6:	d01e      	beq.n	8025036 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8024ff8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024ffa:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024ffe:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8025002:	fb08 fc0c 	mul.w	ip, r8, ip
 8025006:	fb08 f80e 	mul.w	r8, r8, lr
 802500a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802500e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025012:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025016:	44e6      	add	lr, ip
 8025018:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 802501c:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8025020:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025024:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025028:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802502c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025030:	ea4e 0708 	orr.w	r7, lr, r8
 8025034:	970b      	str	r7, [sp, #44]	; 0x2c
 8025036:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802503a:	d01e      	beq.n	802507a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802503c:	9f08      	ldr	r7, [sp, #32]
 802503e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8025042:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025046:	fb0a f808 	mul.w	r8, sl, r8
 802504a:	fb0a fa0c 	mul.w	sl, sl, ip
 802504e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8025052:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8025056:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802505a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802505e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025062:	44c6      	add	lr, r8
 8025064:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025068:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802506c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025070:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025074:	ea4e 070a 	orr.w	r7, lr, sl
 8025078:	9708      	str	r7, [sp, #32]
 802507a:	2dff      	cmp	r5, #255	; 0xff
 802507c:	d01d      	beq.n	80250ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 802507e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025080:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8025084:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025088:	fb05 f808 	mul.w	r8, r5, r8
 802508c:	fb05 f50c 	mul.w	r5, r5, ip
 8025090:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8025094:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8025098:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802509c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250a0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80250a4:	44c6      	add	lr, r8
 80250a6:	0a2d      	lsrs	r5, r5, #8
 80250a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250ac:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80250b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250b4:	ea4e 0505 	orr.w	r5, lr, r5
 80250b8:	950c      	str	r5, [sp, #48]	; 0x30
 80250ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80250bc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80250c0:	9f08      	ldr	r7, [sp, #32]
 80250c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80250ca:	fb09 f505 	mul.w	r5, r9, r5
 80250ce:	fb02 550c 	mla	r5, r2, ip, r5
 80250d2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80250d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80250d8:	fb01 550c 	mla	r5, r1, ip, r5
 80250dc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80250e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80250e2:	fb0b 550c 	mla	r5, fp, ip, r5
 80250e6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80250ea:	fb09 f90c 	mul.w	r9, r9, ip
 80250ee:	0a2d      	lsrs	r5, r5, #8
 80250f0:	fb02 9303 	mla	r3, r2, r3, r9
 80250f4:	9a08      	ldr	r2, [sp, #32]
 80250f6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80250fa:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80250fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025100:	fb01 330e 	mla	r3, r1, lr, r3
 8025104:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025108:	fb0b 3b01 	mla	fp, fp, r1, r3
 802510c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802510e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8025110:	4343      	muls	r3, r0
 8025112:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025116:	1c58      	adds	r0, r3, #1
 8025118:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802511c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025120:	ea45 050b 	orr.w	r5, r5, fp
 8025124:	7833      	ldrb	r3, [r6, #0]
 8025126:	b2ea      	uxtb	r2, r5
 8025128:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802512c:	fb12 f201 	smulbb	r2, r2, r1
 8025130:	b2c0      	uxtb	r0, r0
 8025132:	fb03 2300 	mla	r3, r3, r0, r2
 8025136:	b29b      	uxth	r3, r3
 8025138:	1c5a      	adds	r2, r3, #1
 802513a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802513e:	7872      	ldrb	r2, [r6, #1]
 8025140:	fb12 f200 	smulbb	r2, r2, r0
 8025144:	121b      	asrs	r3, r3, #8
 8025146:	7033      	strb	r3, [r6, #0]
 8025148:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802514c:	0c2d      	lsrs	r5, r5, #16
 802514e:	fb03 2301 	mla	r3, r3, r1, r2
 8025152:	b29b      	uxth	r3, r3
 8025154:	1c5a      	adds	r2, r3, #1
 8025156:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802515a:	121b      	asrs	r3, r3, #8
 802515c:	7073      	strb	r3, [r6, #1]
 802515e:	78b3      	ldrb	r3, [r6, #2]
 8025160:	fb13 f000 	smulbb	r0, r3, r0
 8025164:	fb05 0501 	mla	r5, r5, r1, r0
 8025168:	b2ad      	uxth	r5, r5
 802516a:	1c6b      	adds	r3, r5, #1
 802516c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025170:	122d      	asrs	r5, r5, #8
 8025172:	70b5      	strb	r5, [r6, #2]
 8025174:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025176:	3603      	adds	r6, #3
 8025178:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802517a:	4413      	add	r3, r2
 802517c:	932b      	str	r3, [sp, #172]	; 0xac
 802517e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025180:	441c      	add	r4, r3
 8025182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025184:	3b01      	subs	r3, #1
 8025186:	9314      	str	r3, [sp, #80]	; 0x50
 8025188:	e6c0      	b.n	8024f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802518a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802518c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802518e:	4413      	add	r3, r2
 8025190:	932b      	str	r3, [sp, #172]	; 0xac
 8025192:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025194:	441c      	add	r4, r3
 8025196:	9b06      	ldr	r3, [sp, #24]
 8025198:	3b01      	subs	r3, #1
 802519a:	9306      	str	r3, [sp, #24]
 802519c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802519e:	3303      	adds	r3, #3
 80251a0:	930a      	str	r3, [sp, #40]	; 0x28
 80251a2:	e664      	b.n	8024e6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80251a4:	f47f ae75 	bne.w	8024e92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80251a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	f340 819a 	ble.w	80254e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80251b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80251b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80251b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80251ba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80251be:	eef0 6a48 	vmov.f32	s13, s16
 80251c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80251c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80251ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251ce:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80251d2:	eef0 6a68 	vmov.f32	s13, s17
 80251d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251da:	ee16 4a90 	vmov	r4, s13
 80251de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80251e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80251e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80251ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80251ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80251f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80251f6:	ee18 2a10 	vmov	r2, s16
 80251fa:	eeb0 8a47 	vmov.f32	s16, s14
 80251fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8025202:	ee18 2a90 	vmov	r2, s17
 8025206:	932d      	str	r3, [sp, #180]	; 0xb4
 8025208:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802520a:	eef0 8a67 	vmov.f32	s17, s15
 802520e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025212:	932e      	str	r3, [sp, #184]	; 0xb8
 8025214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025216:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025218:	3b01      	subs	r3, #1
 802521a:	9312      	str	r3, [sp, #72]	; 0x48
 802521c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802521e:	bf08      	it	eq
 8025220:	4613      	moveq	r3, r2
 8025222:	9306      	str	r3, [sp, #24]
 8025224:	e61c      	b.n	8024e60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8025226:	b151      	cbz	r1, 802523e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8025228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802522a:	58aa      	ldr	r2, [r5, r2]
 802522c:	25ff      	movs	r5, #255	; 0xff
 802522e:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8025232:	9208      	str	r2, [sp, #32]
 8025234:	46a8      	mov	r8, r5
 8025236:	e6a0      	b.n	8024f7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8025238:	25ff      	movs	r5, #255	; 0xff
 802523a:	46aa      	mov	sl, r5
 802523c:	e69d      	b.n	8024f7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802523e:	25ff      	movs	r5, #255	; 0xff
 8025240:	46aa      	mov	sl, r5
 8025242:	e7f7      	b.n	8025234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8025244:	1c57      	adds	r7, r2, #1
 8025246:	d195      	bne.n	8025174 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8025248:	9d07      	ldr	r5, [sp, #28]
 802524a:	4295      	cmp	r5, r2
 802524c:	dd92      	ble.n	8025174 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802524e:	1c5d      	adds	r5, r3, #1
 8025250:	db90      	blt.n	8025174 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8025252:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025254:	429d      	cmp	r5, r3
 8025256:	dd8d      	ble.n	8025174 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8025258:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802525a:	9201      	str	r2, [sp, #4]
 802525c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802525e:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8025262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025264:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8025266:	9300      	str	r3, [sp, #0]
 8025268:	9b07      	ldr	r3, [sp, #28]
 802526a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802526e:	4631      	mov	r1, r6
 8025270:	f7ff fc68 	bl	8024b44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8025274:	e77e      	b.n	8025174 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8025276:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025278:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802527c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802527e:	9d07      	ldr	r5, [sp, #28]
 8025280:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025284:	1412      	asrs	r2, r2, #16
 8025286:	1423      	asrs	r3, r4, #16
 8025288:	fb05 2303 	mla	r3, r5, r3, r2
 802528c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802528e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8025292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025296:	0e1e      	lsrs	r6, r3, #24
 8025298:	2900      	cmp	r1, #0
 802529a:	f000 8114 	beq.w	80254c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802529e:	686a      	ldr	r2, [r5, #4]
 80252a0:	920d      	str	r2, [sp, #52]	; 0x34
 80252a2:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80252a6:	2800      	cmp	r0, #0
 80252a8:	f000 8116 	beq.w	80254d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80252ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80252ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80252b0:	18aa      	adds	r2, r5, r2
 80252b2:	59ed      	ldr	r5, [r5, r7]
 80252b4:	6852      	ldr	r2, [r2, #4]
 80252b6:	9509      	str	r5, [sp, #36]	; 0x24
 80252b8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80252bc:	0e15      	lsrs	r5, r2, #24
 80252be:	920f      	str	r2, [sp, #60]	; 0x3c
 80252c0:	b289      	uxth	r1, r1
 80252c2:	b280      	uxth	r0, r0
 80252c4:	fb01 fa00 	mul.w	sl, r1, r0
 80252c8:	0109      	lsls	r1, r1, #4
 80252ca:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80252ce:	eba1 080a 	sub.w	r8, r1, sl
 80252d2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80252d6:	b280      	uxth	r0, r0
 80252d8:	fa1f f888 	uxth.w	r8, r8
 80252dc:	1a12      	subs	r2, r2, r0
 80252de:	fb08 f10c 	mul.w	r1, r8, ip
 80252e2:	b292      	uxth	r2, r2
 80252e4:	fb02 1106 	mla	r1, r2, r6, r1
 80252e8:	fb00 1109 	mla	r1, r0, r9, r1
 80252ec:	fb0a 1105 	mla	r1, sl, r5, r1
 80252f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80252f4:	2900      	cmp	r1, #0
 80252f6:	f000 80da 	beq.w	80254ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80252fa:	2eff      	cmp	r6, #255	; 0xff
 80252fc:	d016      	beq.n	802532c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80252fe:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025306:	4377      	muls	r7, r6
 8025308:	435e      	muls	r6, r3
 802530a:	0a3b      	lsrs	r3, r7, #8
 802530c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025310:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025314:	443b      	add	r3, r7
 8025316:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802531a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802531e:	0a1b      	lsrs	r3, r3, #8
 8025320:	0a3f      	lsrs	r7, r7, #8
 8025322:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025326:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802532a:	433b      	orrs	r3, r7
 802532c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025330:	d01d      	beq.n	802536e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8025332:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025334:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025336:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802533a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802533e:	fb0c f606 	mul.w	r6, ip, r6
 8025342:	fb0c fc07 	mul.w	ip, ip, r7
 8025346:	0a37      	lsrs	r7, r6, #8
 8025348:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802534c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025350:	4437      	add	r7, r6
 8025352:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8025356:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802535a:	0a3f      	lsrs	r7, r7, #8
 802535c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025360:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025364:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025368:	ea47 060c 	orr.w	r6, r7, ip
 802536c:	960d      	str	r6, [sp, #52]	; 0x34
 802536e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025372:	d01d      	beq.n	80253b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8025374:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8025376:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802537a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802537e:	fb09 fc0c 	mul.w	ip, r9, ip
 8025382:	fb09 f906 	mul.w	r9, r9, r6
 8025386:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802538a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802538e:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8025392:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025396:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802539a:	4467      	add	r7, ip
 802539c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80253a0:	0a3f      	lsrs	r7, r7, #8
 80253a2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80253a6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80253aa:	ea47 0609 	orr.w	r6, r7, r9
 80253ae:	9609      	str	r6, [sp, #36]	; 0x24
 80253b0:	2dff      	cmp	r5, #255	; 0xff
 80253b2:	d01a      	beq.n	80253ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80253b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80253b6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80253ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80253be:	fb05 fc0c 	mul.w	ip, r5, ip
 80253c2:	4375      	muls	r5, r6
 80253c4:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80253c8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80253cc:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80253d0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80253d4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80253d8:	4467      	add	r7, ip
 80253da:	0a2d      	lsrs	r5, r5, #8
 80253dc:	0a3f      	lsrs	r7, r7, #8
 80253de:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80253e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80253e6:	433d      	orrs	r5, r7
 80253e8:	950f      	str	r5, [sp, #60]	; 0x3c
 80253ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80253ec:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80253f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80253f4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80253f8:	fb08 f505 	mul.w	r5, r8, r5
 80253fc:	fb02 5506 	mla	r5, r2, r6, r5
 8025400:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8025402:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025406:	fb00 5506 	mla	r5, r0, r6, r5
 802540a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802540c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025410:	fb0a 5506 	mla	r5, sl, r6, r5
 8025414:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025416:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802541a:	0a2d      	lsrs	r5, r5, #8
 802541c:	fb08 f806 	mul.w	r8, r8, r6
 8025420:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025424:	fb02 8303 	mla	r3, r2, r3, r8
 8025428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802542a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802542e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025430:	fb00 3307 	mla	r3, r0, r7, r3
 8025434:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025438:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802543c:	fb01 f30b 	mul.w	r3, r1, fp
 8025440:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025444:	1c59      	adds	r1, r3, #1
 8025446:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802544a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802544e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025452:	ea45 050c 	orr.w	r5, r5, ip
 8025456:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802545a:	b2ea      	uxtb	r2, r5
 802545c:	b2c9      	uxtb	r1, r1
 802545e:	fb12 f20b 	smulbb	r2, r2, fp
 8025462:	fb03 2301 	mla	r3, r3, r1, r2
 8025466:	b29b      	uxth	r3, r3
 8025468:	1c5a      	adds	r2, r3, #1
 802546a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802546e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025472:	fb12 f201 	smulbb	r2, r2, r1
 8025476:	121b      	asrs	r3, r3, #8
 8025478:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802547c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8025480:	0c2d      	lsrs	r5, r5, #16
 8025482:	fb03 230b 	mla	r3, r3, fp, r2
 8025486:	b29b      	uxth	r3, r3
 8025488:	1c5a      	adds	r2, r3, #1
 802548a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802548e:	121b      	asrs	r3, r3, #8
 8025490:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025494:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025498:	fb13 f101 	smulbb	r1, r3, r1
 802549c:	fb05 150b 	mla	r5, r5, fp, r1
 80254a0:	b2ad      	uxth	r5, r5
 80254a2:	1c69      	adds	r1, r5, #1
 80254a4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80254a8:	122d      	asrs	r5, r5, #8
 80254aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80254ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80254b0:	f10e 0e03 	add.w	lr, lr, #3
 80254b4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80254b6:	4413      	add	r3, r2
 80254b8:	932b      	str	r3, [sp, #172]	; 0xac
 80254ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80254bc:	441c      	add	r4, r3
 80254be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80254c0:	3b01      	subs	r3, #1
 80254c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80254c4:	e501      	b.n	8024eca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80254c6:	b150      	cbz	r0, 80254de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80254c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80254ca:	58aa      	ldr	r2, [r5, r2]
 80254cc:	25ff      	movs	r5, #255	; 0xff
 80254ce:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80254d2:	9209      	str	r2, [sp, #36]	; 0x24
 80254d4:	46ac      	mov	ip, r5
 80254d6:	e6f3      	b.n	80252c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80254d8:	25ff      	movs	r5, #255	; 0xff
 80254da:	46a9      	mov	r9, r5
 80254dc:	e6f0      	b.n	80252c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80254de:	25ff      	movs	r5, #255	; 0xff
 80254e0:	46a9      	mov	r9, r5
 80254e2:	e7f7      	b.n	80254d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80254e4:	b019      	add	sp, #100	; 0x64
 80254e6:	ecbd 8b08 	vpop	{d8-d11}
 80254ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080254f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80254f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254f4:	b085      	sub	sp, #20
 80254f6:	7888      	ldrb	r0, [r1, #2]
 80254f8:	4691      	mov	r9, r2
 80254fa:	9000      	str	r0, [sp, #0]
 80254fc:	7848      	ldrb	r0, [r1, #1]
 80254fe:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8025502:	9001      	str	r0, [sp, #4]
 8025504:	7808      	ldrb	r0, [r1, #0]
 8025506:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802550a:	9002      	str	r0, [sp, #8]
 802550c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8025510:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8025514:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8025518:	fb04 c603 	mla	r6, r4, r3, ip
 802551c:	2c00      	cmp	r4, #0
 802551e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8025522:	9a00      	ldr	r2, [sp, #0]
 8025524:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8025528:	9a01      	ldr	r2, [sp, #4]
 802552a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802552e:	db3a      	blt.n	80255a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8025530:	45a0      	cmp	r8, r4
 8025532:	dd38      	ble.n	80255a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8025534:	f1bc 0f00 	cmp.w	ip, #0
 8025538:	db33      	blt.n	80255a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802553a:	4563      	cmp	r3, ip
 802553c:	dd31      	ble.n	80255a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802553e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8025542:	f11c 0601 	adds.w	r6, ip, #1
 8025546:	d431      	bmi.n	80255ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8025548:	42b3      	cmp	r3, r6
 802554a:	dd2f      	ble.n	80255ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802554c:	b375      	cbz	r5, 80255ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802554e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8025552:	3401      	adds	r4, #1
 8025554:	d42e      	bmi.n	80255b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8025556:	45a0      	cmp	r8, r4
 8025558:	dd2c      	ble.n	80255b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802555a:	b35f      	cbz	r7, 80255b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802555c:	f1bc 0f00 	cmp.w	ip, #0
 8025560:	db26      	blt.n	80255b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8025562:	4563      	cmp	r3, ip
 8025564:	dd24      	ble.n	80255b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8025566:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802556a:	f11c 0c01 	adds.w	ip, ip, #1
 802556e:	d405      	bmi.n	802557c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025570:	4563      	cmp	r3, ip
 8025572:	dd03      	ble.n	802557c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025574:	b115      	cbz	r5, 802557c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025576:	3301      	adds	r3, #1
 8025578:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 802557c:	2d0f      	cmp	r5, #15
 802557e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025582:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025586:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802558a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802558e:	d801      	bhi.n	8025594 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8025590:	2f0f      	cmp	r7, #15
 8025592:	d911      	bls.n	80255b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8025594:	4b77      	ldr	r3, [pc, #476]	; (8025774 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8025596:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802559a:	4a77      	ldr	r2, [pc, #476]	; (8025778 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 802559c:	4877      	ldr	r0, [pc, #476]	; (802577c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 802559e:	f003 f831 	bl	8028604 <__assert_func>
 80255a2:	4602      	mov	r2, r0
 80255a4:	e7cd      	b.n	8025542 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 80255a6:	4606      	mov	r6, r0
 80255a8:	4602      	mov	r2, r0
 80255aa:	e7d2      	b.n	8025552 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80255ac:	4606      	mov	r6, r0
 80255ae:	e7d0      	b.n	8025552 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80255b0:	4604      	mov	r4, r0
 80255b2:	e7da      	b.n	802556a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80255b4:	4604      	mov	r4, r0
 80255b6:	e7e1      	b.n	802557c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80255b8:	b2ab      	uxth	r3, r5
 80255ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80255be:	b2bf      	uxth	r7, r7
 80255c0:	fb03 fe07 	mul.w	lr, r3, r7
 80255c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80255c8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80255cc:	eba3 0c0e 	sub.w	ip, r3, lr
 80255d0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80255d4:	b2bf      	uxth	r7, r7
 80255d6:	fa1f fc8c 	uxth.w	ip, ip
 80255da:	eba5 0507 	sub.w	r5, r5, r7
 80255de:	fb0c f30a 	mul.w	r3, ip, sl
 80255e2:	b2ad      	uxth	r5, r5
 80255e4:	fb05 330b 	mla	r3, r5, fp, r3
 80255e8:	fb07 3309 	mla	r3, r7, r9, r3
 80255ec:	fb0e 3308 	mla	r3, lr, r8, r3
 80255f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80255f4:	9303      	str	r3, [sp, #12]
 80255f6:	d018      	beq.n	802562a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80255f8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80255fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025600:	fb0b f303 	mul.w	r3, fp, r3
 8025604:	fb0b fb02 	mul.w	fp, fp, r2
 8025608:	0a1a      	lsrs	r2, r3, #8
 802560a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802560e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025612:	441a      	add	r2, r3
 8025614:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8025618:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802561c:	0a12      	lsrs	r2, r2, #8
 802561e:	0a1b      	lsrs	r3, r3, #8
 8025620:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025624:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025628:	431a      	orrs	r2, r3
 802562a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802562e:	d019      	beq.n	8025664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8025630:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8025634:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025638:	fb0a fb0b 	mul.w	fp, sl, fp
 802563c:	fb0a fa06 	mul.w	sl, sl, r6
 8025640:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8025644:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025648:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802564c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025650:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025654:	445e      	add	r6, fp
 8025656:	0a1b      	lsrs	r3, r3, #8
 8025658:	0a36      	lsrs	r6, r6, #8
 802565a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802565e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025662:	431e      	orrs	r6, r3
 8025664:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025668:	d019      	beq.n	802569e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 802566a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802566e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025672:	fb09 fa0a 	mul.w	sl, r9, sl
 8025676:	fb09 f904 	mul.w	r9, r9, r4
 802567a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802567e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025682:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8025686:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802568a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802568e:	4454      	add	r4, sl
 8025690:	0a1b      	lsrs	r3, r3, #8
 8025692:	0a24      	lsrs	r4, r4, #8
 8025694:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025698:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802569c:	431c      	orrs	r4, r3
 802569e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80256a2:	d019      	beq.n	80256d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 80256a4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80256a8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80256ac:	fb08 f909 	mul.w	r9, r8, r9
 80256b0:	fb08 f800 	mul.w	r8, r8, r0
 80256b4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80256b8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80256bc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80256c0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80256c4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80256c8:	4448      	add	r0, r9
 80256ca:	0a1b      	lsrs	r3, r3, #8
 80256cc:	0a00      	lsrs	r0, r0, #8
 80256ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256d2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80256d6:	4318      	orrs	r0, r3
 80256d8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80256dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80256e0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80256e4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80256e8:	fb0c f808 	mul.w	r8, ip, r8
 80256ec:	fb0c f606 	mul.w	r6, ip, r6
 80256f0:	fb05 8803 	mla	r8, r5, r3, r8
 80256f4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80256f8:	fb05 6202 	mla	r2, r5, r2, r6
 80256fc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025700:	fb07 8803 	mla	r8, r7, r3, r8
 8025704:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025708:	fb07 2704 	mla	r7, r7, r4, r2
 802570c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025710:	fb0e 8303 	mla	r3, lr, r3, r8
 8025714:	fb0e 7e00 	mla	lr, lr, r0, r7
 8025718:	9802      	ldr	r0, [sp, #8]
 802571a:	0a1b      	lsrs	r3, r3, #8
 802571c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025720:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025724:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025728:	ea43 0e0e 	orr.w	lr, r3, lr
 802572c:	9b03      	ldr	r3, [sp, #12]
 802572e:	43db      	mvns	r3, r3
 8025730:	b2db      	uxtb	r3, r3
 8025732:	4358      	muls	r0, r3
 8025734:	1c42      	adds	r2, r0, #1
 8025736:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802573a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802573e:	700a      	strb	r2, [r1, #0]
 8025740:	9a01      	ldr	r2, [sp, #4]
 8025742:	435a      	muls	r2, r3
 8025744:	1c50      	adds	r0, r2, #1
 8025746:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802574a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802574e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025752:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025756:	704a      	strb	r2, [r1, #1]
 8025758:	9a00      	ldr	r2, [sp, #0]
 802575a:	435a      	muls	r2, r3
 802575c:	4613      	mov	r3, r2
 802575e:	3201      	adds	r2, #1
 8025760:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025764:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8025768:	f881 e002 	strb.w	lr, [r1, #2]
 802576c:	b005      	add	sp, #20
 802576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025772:	bf00      	nop
 8025774:	0802d907 	.word	0x0802d907
 8025778:	0802ddfe 	.word	0x0802ddfe
 802577c:	0802d9d0 	.word	0x0802d9d0

08025780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025784:	ed2d 8b08 	vpush	{d8-d11}
 8025788:	b097      	sub	sp, #92	; 0x5c
 802578a:	eeb0 aa40 	vmov.f32	s20, s0
 802578e:	eef0 9a60 	vmov.f32	s19, s1
 8025792:	9306      	str	r3, [sp, #24]
 8025794:	eeb0 9a41 	vmov.f32	s18, s2
 8025798:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 802579c:	eeb0 8a62 	vmov.f32	s16, s5
 80257a0:	9214      	str	r2, [sp, #80]	; 0x50
 80257a2:	eef0 8a43 	vmov.f32	s17, s6
 80257a6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80257a8:	eef0 ba44 	vmov.f32	s23, s8
 80257ac:	9307      	str	r3, [sp, #28]
 80257ae:	eeb0 ba64 	vmov.f32	s22, s9
 80257b2:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80257b6:	eef0 aa45 	vmov.f32	s21, s10
 80257ba:	9015      	str	r0, [sp, #84]	; 0x54
 80257bc:	9112      	str	r1, [sp, #72]	; 0x48
 80257be:	6850      	ldr	r0, [r2, #4]
 80257c0:	9310      	str	r3, [sp, #64]	; 0x40
 80257c2:	6812      	ldr	r2, [r2, #0]
 80257c4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80257c6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80257ca:	fb00 1303 	mla	r3, r0, r3, r1
 80257ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80257d2:	18d3      	adds	r3, r2, r3
 80257d4:	930a      	str	r3, [sp, #40]	; 0x28
 80257d6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80257d8:	681b      	ldr	r3, [r3, #0]
 80257da:	9311      	str	r3, [sp, #68]	; 0x44
 80257dc:	9b07      	ldr	r3, [sp, #28]
 80257de:	009b      	lsls	r3, r3, #2
 80257e0:	930e      	str	r3, [sp, #56]	; 0x38
 80257e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	dc03      	bgt.n	80257f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80257e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80257ea:	2b00      	cmp	r3, #0
 80257ec:	f340 832e 	ble.w	8025e4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80257f0:	9b06      	ldr	r3, [sp, #24]
 80257f2:	2b00      	cmp	r3, #0
 80257f4:	f340 8186 	ble.w	8025b04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80257f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80257fa:	1423      	asrs	r3, r4, #16
 80257fc:	1412      	asrs	r2, r2, #16
 80257fe:	d42f      	bmi.n	8025860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8025800:	1c51      	adds	r1, r2, #1
 8025802:	9807      	ldr	r0, [sp, #28]
 8025804:	4288      	cmp	r0, r1
 8025806:	dd2e      	ble.n	8025866 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025808:	2b00      	cmp	r3, #0
 802580a:	db2c      	blt.n	8025866 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802580c:	1c59      	adds	r1, r3, #1
 802580e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025810:	4288      	cmp	r0, r1
 8025812:	dd28      	ble.n	8025866 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025814:	9b06      	ldr	r3, [sp, #24]
 8025816:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025818:	3b01      	subs	r3, #1
 802581a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802581c:	fb02 1203 	mla	r2, r2, r3, r1
 8025820:	1412      	asrs	r2, r2, #16
 8025822:	d42b      	bmi.n	802587c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025824:	3201      	adds	r2, #1
 8025826:	9907      	ldr	r1, [sp, #28]
 8025828:	4291      	cmp	r1, r2
 802582a:	dd27      	ble.n	802587c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802582c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802582e:	fb02 4303 	mla	r3, r2, r3, r4
 8025832:	141b      	asrs	r3, r3, #16
 8025834:	d422      	bmi.n	802587c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025836:	3301      	adds	r3, #1
 8025838:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802583a:	429a      	cmp	r2, r3
 802583c:	dd1e      	ble.n	802587c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802583e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025840:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025844:	1cdd      	adds	r5, r3, #3
 8025846:	f1bb 0f00 	cmp.w	fp, #0
 802584a:	f300 81c4 	bgt.w	8025bd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802584e:	9b06      	ldr	r3, [sp, #24]
 8025850:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025856:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802585a:	4423      	add	r3, r4
 802585c:	930a      	str	r3, [sp, #40]	; 0x28
 802585e:	e153      	b.n	8025b08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8025860:	1c51      	adds	r1, r2, #1
 8025862:	f040 8142 	bne.w	8025aea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8025866:	9907      	ldr	r1, [sp, #28]
 8025868:	428a      	cmp	r2, r1
 802586a:	f280 813e 	bge.w	8025aea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802586e:	1c5a      	adds	r2, r3, #1
 8025870:	f2c0 813b 	blt.w	8025aea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8025874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025876:	4293      	cmp	r3, r2
 8025878:	f280 8137 	bge.w	8025aea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802587c:	9b06      	ldr	r3, [sp, #24]
 802587e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025880:	9313      	str	r3, [sp, #76]	; 0x4c
 8025882:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025884:	2b00      	cmp	r3, #0
 8025886:	dde2      	ble.n	802584e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8025888:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802588a:	1423      	asrs	r3, r4, #16
 802588c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802588e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025892:	1409      	asrs	r1, r1, #16
 8025894:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8025898:	f100 8187 	bmi.w	8025baa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 802589c:	1c4e      	adds	r6, r1, #1
 802589e:	9f07      	ldr	r7, [sp, #28]
 80258a0:	42b7      	cmp	r7, r6
 80258a2:	f340 8184 	ble.w	8025bae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80258a6:	2b00      	cmp	r3, #0
 80258a8:	f2c0 8181 	blt.w	8025bae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80258ac:	1c5e      	adds	r6, r3, #1
 80258ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80258b0:	42b7      	cmp	r7, r6
 80258b2:	f340 817c 	ble.w	8025bae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80258b6:	9e07      	ldr	r6, [sp, #28]
 80258b8:	fb03 1306 	mla	r3, r3, r6, r1
 80258bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80258be:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80258c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80258c6:	0e1f      	lsrs	r7, r3, #24
 80258c8:	2a00      	cmp	r2, #0
 80258ca:	f000 815c 	beq.w	8025b86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80258ce:	6871      	ldr	r1, [r6, #4]
 80258d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80258d2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80258d6:	2800      	cmp	r0, #0
 80258d8:	f000 815e 	beq.w	8025b98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80258dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80258de:	eb06 0c01 	add.w	ip, r6, r1
 80258e2:	5876      	ldr	r6, [r6, r1]
 80258e4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80258e8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80258ec:	9608      	str	r6, [sp, #32]
 80258ee:	0e0e      	lsrs	r6, r1, #24
 80258f0:	910c      	str	r1, [sp, #48]	; 0x30
 80258f2:	b292      	uxth	r2, r2
 80258f4:	b280      	uxth	r0, r0
 80258f6:	fb02 fa00 	mul.w	sl, r2, r0
 80258fa:	0112      	lsls	r2, r2, #4
 80258fc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025900:	eba2 080a 	sub.w	r8, r2, sl
 8025904:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025908:	b280      	uxth	r0, r0
 802590a:	fa1f f888 	uxth.w	r8, r8
 802590e:	1a09      	subs	r1, r1, r0
 8025910:	fb08 f20e 	mul.w	r2, r8, lr
 8025914:	b289      	uxth	r1, r1
 8025916:	fb01 2207 	mla	r2, r1, r7, r2
 802591a:	fb00 2209 	mla	r2, r0, r9, r2
 802591e:	fb0a 2206 	mla	r2, sl, r6, r2
 8025922:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025926:	2a00      	cmp	r2, #0
 8025928:	f000 80d4 	beq.w	8025ad4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802592c:	2fff      	cmp	r7, #255	; 0xff
 802592e:	d01a      	beq.n	8025966 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8025930:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025938:	fb07 fc0c 	mul.w	ip, r7, ip
 802593c:	435f      	muls	r7, r3
 802593e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025942:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025946:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802594a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802594e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8025952:	4463      	add	r3, ip
 8025954:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025958:	0a1b      	lsrs	r3, r3, #8
 802595a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802595e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025962:	ea43 030b 	orr.w	r3, r3, fp
 8025966:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802596a:	d01e      	beq.n	80259aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802596c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802596e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8025972:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025976:	fb0e fb0b 	mul.w	fp, lr, fp
 802597a:	fb0e fe07 	mul.w	lr, lr, r7
 802597e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025982:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025986:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802598a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802598e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025992:	44dc      	add	ip, fp
 8025994:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025998:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802599c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80259a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259a4:	ea4c 070e 	orr.w	r7, ip, lr
 80259a8:	970b      	str	r7, [sp, #44]	; 0x2c
 80259aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80259ae:	d01e      	beq.n	80259ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80259b0:	9f08      	ldr	r7, [sp, #32]
 80259b2:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80259b6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80259ba:	fb09 fe0e 	mul.w	lr, r9, lr
 80259be:	fb09 f907 	mul.w	r9, r9, r7
 80259c2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80259c6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80259ca:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80259ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259d2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80259d6:	44f4      	add	ip, lr
 80259d8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80259dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259e0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80259e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259e8:	ea4c 0709 	orr.w	r7, ip, r9
 80259ec:	9708      	str	r7, [sp, #32]
 80259ee:	2eff      	cmp	r6, #255	; 0xff
 80259f0:	d01c      	beq.n	8025a2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80259f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80259f4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80259f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80259fc:	fb06 fe0e 	mul.w	lr, r6, lr
 8025a00:	437e      	muls	r6, r7
 8025a02:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025a06:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025a0a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025a0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a12:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025a16:	44f4      	add	ip, lr
 8025a18:	0a36      	lsrs	r6, r6, #8
 8025a1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a1e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025a22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a26:	ea4c 0606 	orr.w	r6, ip, r6
 8025a2a:	960c      	str	r6, [sp, #48]	; 0x30
 8025a2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8025a2e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025a32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a36:	2aff      	cmp	r2, #255	; 0xff
 8025a38:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025a3c:	fb08 f606 	mul.w	r6, r8, r6
 8025a40:	fb01 6607 	mla	r6, r1, r7, r6
 8025a44:	9f08      	ldr	r7, [sp, #32]
 8025a46:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025a4a:	fb00 6607 	mla	r6, r0, r7, r6
 8025a4e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025a50:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025a54:	fb0a 6607 	mla	r6, sl, r7, r6
 8025a58:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025a5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025a5e:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8025a62:	fb08 f807 	mul.w	r8, r8, r7
 8025a66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025a6a:	fb01 8303 	mla	r3, r1, r3, r8
 8025a6e:	9908      	ldr	r1, [sp, #32]
 8025a70:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025a74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025a76:	fb00 330c 	mla	r3, r0, ip, r3
 8025a7a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8025a7e:	fb0a 3a00 	mla	sl, sl, r0, r3
 8025a82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a8a:	ea46 060a 	orr.w	r6, r6, sl
 8025a8e:	b2f0      	uxtb	r0, r6
 8025a90:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8025a94:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8025a98:	f000 8084 	beq.w	8025ba4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8025a9c:	43d2      	mvns	r2, r2
 8025a9e:	782b      	ldrb	r3, [r5, #0]
 8025aa0:	b2d2      	uxtb	r2, r2
 8025aa2:	fb03 f702 	mul.w	r7, r3, r2
 8025aa6:	1c7b      	adds	r3, r7, #1
 8025aa8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025aac:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025ab0:	702b      	strb	r3, [r5, #0]
 8025ab2:	786b      	ldrb	r3, [r5, #1]
 8025ab4:	fb03 f002 	mul.w	r0, r3, r2
 8025ab8:	1c43      	adds	r3, r0, #1
 8025aba:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025abe:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025ac2:	706b      	strb	r3, [r5, #1]
 8025ac4:	78ab      	ldrb	r3, [r5, #2]
 8025ac6:	4353      	muls	r3, r2
 8025ac8:	1c5a      	adds	r2, r3, #1
 8025aca:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025ace:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025ad2:	70ae      	strb	r6, [r5, #2]
 8025ad4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025ad6:	3503      	adds	r5, #3
 8025ad8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025ada:	4413      	add	r3, r2
 8025adc:	9329      	str	r3, [sp, #164]	; 0xa4
 8025ade:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025ae0:	441c      	add	r4, r3
 8025ae2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025ae4:	3b01      	subs	r3, #1
 8025ae6:	9313      	str	r3, [sp, #76]	; 0x4c
 8025ae8:	e6cb      	b.n	8025882 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8025aea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025aec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025aee:	4413      	add	r3, r2
 8025af0:	9329      	str	r3, [sp, #164]	; 0xa4
 8025af2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025af4:	441c      	add	r4, r3
 8025af6:	9b06      	ldr	r3, [sp, #24]
 8025af8:	3b01      	subs	r3, #1
 8025afa:	9306      	str	r3, [sp, #24]
 8025afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025afe:	3303      	adds	r3, #3
 8025b00:	930a      	str	r3, [sp, #40]	; 0x28
 8025b02:	e675      	b.n	80257f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8025b04:	f47f ae86 	bne.w	8025814 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8025b08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025b0a:	2b00      	cmp	r3, #0
 8025b0c:	f340 819e 	ble.w	8025e4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8025b10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b16:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025b1a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025b1e:	eef0 6a48 	vmov.f32	s13, s16
 8025b22:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025b26:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025b2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b2e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025b32:	eef0 6a68 	vmov.f32	s13, s17
 8025b36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b3a:	ee16 4a90 	vmov	r4, s13
 8025b3e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025b42:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025b46:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025b4a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025b4e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025b52:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025b56:	ee18 2a10 	vmov	r2, s16
 8025b5a:	eeb0 8a47 	vmov.f32	s16, s14
 8025b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b62:	ee18 2a90 	vmov	r2, s17
 8025b66:	932b      	str	r3, [sp, #172]	; 0xac
 8025b68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b6a:	eef0 8a67 	vmov.f32	s17, s15
 8025b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b72:	932c      	str	r3, [sp, #176]	; 0xb0
 8025b74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025b76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025b78:	3b01      	subs	r3, #1
 8025b7a:	9312      	str	r3, [sp, #72]	; 0x48
 8025b7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b7e:	bf08      	it	eq
 8025b80:	4613      	moveq	r3, r2
 8025b82:	9306      	str	r3, [sp, #24]
 8025b84:	e62d      	b.n	80257e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8025b86:	b150      	cbz	r0, 8025b9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8025b88:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025b8a:	5871      	ldr	r1, [r6, r1]
 8025b8c:	26ff      	movs	r6, #255	; 0xff
 8025b8e:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8025b92:	9108      	str	r1, [sp, #32]
 8025b94:	46b6      	mov	lr, r6
 8025b96:	e6ac      	b.n	80258f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8025b98:	26ff      	movs	r6, #255	; 0xff
 8025b9a:	46b1      	mov	r9, r6
 8025b9c:	e6a9      	b.n	80258f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8025b9e:	26ff      	movs	r6, #255	; 0xff
 8025ba0:	46b1      	mov	r9, r6
 8025ba2:	e7f7      	b.n	8025b94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8025ba4:	7028      	strb	r0, [r5, #0]
 8025ba6:	7069      	strb	r1, [r5, #1]
 8025ba8:	e793      	b.n	8025ad2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8025baa:	1c4f      	adds	r7, r1, #1
 8025bac:	d192      	bne.n	8025ad4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025bae:	9e07      	ldr	r6, [sp, #28]
 8025bb0:	428e      	cmp	r6, r1
 8025bb2:	dd8f      	ble.n	8025ad4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025bb4:	1c5e      	adds	r6, r3, #1
 8025bb6:	db8d      	blt.n	8025ad4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025bb8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025bba:	429e      	cmp	r6, r3
 8025bbc:	dd8a      	ble.n	8025ad4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025bbe:	9600      	str	r6, [sp, #0]
 8025bc0:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8025bc4:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8025bc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025bca:	4629      	mov	r1, r5
 8025bcc:	9b07      	ldr	r3, [sp, #28]
 8025bce:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025bd0:	f7ff fc8e 	bl	80254f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025bd4:	e77e      	b.n	8025ad4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025bd6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025bd8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025bdc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025bde:	9e07      	ldr	r6, [sp, #28]
 8025be0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025be4:	1409      	asrs	r1, r1, #16
 8025be6:	1423      	asrs	r3, r4, #16
 8025be8:	fb06 1303 	mla	r3, r6, r3, r1
 8025bec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025bee:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8025bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8025bf6:	0e1f      	lsrs	r7, r3, #24
 8025bf8:	2a00      	cmp	r2, #0
 8025bfa:	f000 8113 	beq.w	8025e24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8025bfe:	6871      	ldr	r1, [r6, #4]
 8025c00:	910d      	str	r1, [sp, #52]	; 0x34
 8025c02:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8025c06:	2800      	cmp	r0, #0
 8025c08:	f000 8115 	beq.w	8025e36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8025c0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025c0e:	eb06 0c01 	add.w	ip, r6, r1
 8025c12:	5876      	ldr	r6, [r6, r1]
 8025c14:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8025c18:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8025c1c:	9609      	str	r6, [sp, #36]	; 0x24
 8025c1e:	0e0e      	lsrs	r6, r1, #24
 8025c20:	910f      	str	r1, [sp, #60]	; 0x3c
 8025c22:	b292      	uxth	r2, r2
 8025c24:	b280      	uxth	r0, r0
 8025c26:	fb02 fa00 	mul.w	sl, r2, r0
 8025c2a:	0112      	lsls	r2, r2, #4
 8025c2c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025c30:	eba2 080a 	sub.w	r8, r2, sl
 8025c34:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025c38:	b280      	uxth	r0, r0
 8025c3a:	fa1f f888 	uxth.w	r8, r8
 8025c3e:	1a09      	subs	r1, r1, r0
 8025c40:	fb08 f20e 	mul.w	r2, r8, lr
 8025c44:	b289      	uxth	r1, r1
 8025c46:	fb01 2207 	mla	r2, r1, r7, r2
 8025c4a:	fb00 2209 	mla	r2, r0, r9, r2
 8025c4e:	fb0a 2206 	mla	r2, sl, r6, r2
 8025c52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025c56:	2a00      	cmp	r2, #0
 8025c58:	f000 80da 	beq.w	8025e10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8025c5c:	2fff      	cmp	r7, #255	; 0xff
 8025c5e:	d01a      	beq.n	8025c96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8025c60:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025c64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c68:	fb07 fc0c 	mul.w	ip, r7, ip
 8025c6c:	435f      	muls	r7, r3
 8025c6e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025c72:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025c76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025c7a:	4463      	add	r3, ip
 8025c7c:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8025c80:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8025c84:	0a1b      	lsrs	r3, r3, #8
 8025c86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025c8e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025c92:	ea43 030c 	orr.w	r3, r3, ip
 8025c96:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025c9a:	d021      	beq.n	8025ce0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8025c9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025c9e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025ca2:	fb0e f707 	mul.w	r7, lr, r7
 8025ca6:	9713      	str	r7, [sp, #76]	; 0x4c
 8025ca8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025caa:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025cae:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8025cb0:	fb0e fe0c 	mul.w	lr, lr, ip
 8025cb4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025cb8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025cbc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cc0:	44bc      	add	ip, r7
 8025cc2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8025cc6:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025cca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025cce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025cd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cd6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025cda:	ea4c 070e 	orr.w	r7, ip, lr
 8025cde:	970d      	str	r7, [sp, #52]	; 0x34
 8025ce0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025ce4:	d01e      	beq.n	8025d24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8025ce6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025ce8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025cec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025cf0:	fb09 fe0e 	mul.w	lr, r9, lr
 8025cf4:	fb09 f907 	mul.w	r9, r9, r7
 8025cf8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025cfc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025d00:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8025d04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d08:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025d0c:	44f4      	add	ip, lr
 8025d0e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025d12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d16:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025d1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d1e:	ea4c 0709 	orr.w	r7, ip, r9
 8025d22:	9709      	str	r7, [sp, #36]	; 0x24
 8025d24:	2eff      	cmp	r6, #255	; 0xff
 8025d26:	d01c      	beq.n	8025d62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8025d28:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025d2a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025d2e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025d32:	fb06 fe0e 	mul.w	lr, r6, lr
 8025d36:	437e      	muls	r6, r7
 8025d38:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025d3c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025d40:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025d44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d48:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025d4c:	44f4      	add	ip, lr
 8025d4e:	0a36      	lsrs	r6, r6, #8
 8025d50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d54:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025d58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d5c:	ea4c 0606 	orr.w	r6, ip, r6
 8025d60:	960f      	str	r6, [sp, #60]	; 0x3c
 8025d62:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025d64:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025d68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025d6c:	2aff      	cmp	r2, #255	; 0xff
 8025d6e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025d72:	fb08 f606 	mul.w	r6, r8, r6
 8025d76:	fb01 6607 	mla	r6, r1, r7, r6
 8025d7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025d7c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025d80:	fb00 6607 	mla	r6, r0, r7, r6
 8025d84:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025d86:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025d8a:	fb0a 6607 	mla	r6, sl, r7, r6
 8025d8e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025d90:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025d94:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8025d98:	fb08 f807 	mul.w	r8, r8, r7
 8025d9c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025da0:	fb01 8303 	mla	r3, r1, r3, r8
 8025da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025da6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025daa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025dac:	fb00 330c 	mla	r3, r0, ip, r3
 8025db0:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8025db4:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8025db8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025dbc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025dc0:	ea46 060e 	orr.w	r6, r6, lr
 8025dc4:	b2f0      	uxtb	r0, r6
 8025dc6:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8025dca:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8025dce:	d038      	beq.n	8025e42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8025dd0:	43d2      	mvns	r2, r2
 8025dd2:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8025dd6:	b2d2      	uxtb	r2, r2
 8025dd8:	4357      	muls	r7, r2
 8025dda:	1c7b      	adds	r3, r7, #1
 8025ddc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025de0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025de4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8025de8:	4350      	muls	r0, r2
 8025dea:	f805 3c03 	strb.w	r3, [r5, #-3]
 8025dee:	1c43      	adds	r3, r0, #1
 8025df0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025df4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025df8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025dfc:	4353      	muls	r3, r2
 8025dfe:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025e02:	1c5a      	adds	r2, r3, #1
 8025e04:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025e08:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025e0c:	f805 6c01 	strb.w	r6, [r5, #-1]
 8025e10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025e12:	3503      	adds	r5, #3
 8025e14:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025e16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025e1a:	4413      	add	r3, r2
 8025e1c:	9329      	str	r3, [sp, #164]	; 0xa4
 8025e1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025e20:	441c      	add	r4, r3
 8025e22:	e510      	b.n	8025846 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8025e24:	b150      	cbz	r0, 8025e3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8025e26:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025e28:	5871      	ldr	r1, [r6, r1]
 8025e2a:	26ff      	movs	r6, #255	; 0xff
 8025e2c:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8025e30:	9109      	str	r1, [sp, #36]	; 0x24
 8025e32:	46b6      	mov	lr, r6
 8025e34:	e6f5      	b.n	8025c22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025e36:	26ff      	movs	r6, #255	; 0xff
 8025e38:	46b1      	mov	r9, r6
 8025e3a:	e6f2      	b.n	8025c22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025e3c:	26ff      	movs	r6, #255	; 0xff
 8025e3e:	46b1      	mov	r9, r6
 8025e40:	e7f7      	b.n	8025e32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8025e42:	f805 0c03 	strb.w	r0, [r5, #-3]
 8025e46:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025e4a:	e7df      	b.n	8025e0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8025e4c:	b017      	add	sp, #92	; 0x5c
 8025e4e:	ecbd 8b08 	vpop	{d8-d11}
 8025e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025e58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8025e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e5c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8025e60:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025e64:	2800      	cmp	r0, #0
 8025e66:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8025e6a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8025e6e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8025e72:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8025e76:	db6b      	blt.n	8025f50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025e78:	4580      	cmp	r8, r0
 8025e7a:	dd69      	ble.n	8025f50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025e7c:	f1bc 0f00 	cmp.w	ip, #0
 8025e80:	db66      	blt.n	8025f50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025e82:	45e1      	cmp	r9, ip
 8025e84:	dd64      	ble.n	8025f50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025e86:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025e8a:	f01e 0f01 	tst.w	lr, #1
 8025e8e:	5d16      	ldrb	r6, [r2, r4]
 8025e90:	bf0c      	ite	eq
 8025e92:	f006 060f 	andeq.w	r6, r6, #15
 8025e96:	1136      	asrne	r6, r6, #4
 8025e98:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025e9c:	b2f6      	uxtb	r6, r6
 8025e9e:	f110 0a01 	adds.w	sl, r0, #1
 8025ea2:	d457      	bmi.n	8025f54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025ea4:	45d0      	cmp	r8, sl
 8025ea6:	dd55      	ble.n	8025f54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025ea8:	f1bc 0f00 	cmp.w	ip, #0
 8025eac:	db52      	blt.n	8025f54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025eae:	45e1      	cmp	r9, ip
 8025eb0:	dd50      	ble.n	8025f54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025eb2:	2f00      	cmp	r7, #0
 8025eb4:	f000 80ac 	beq.w	8026010 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8025eb8:	f10e 0b01 	add.w	fp, lr, #1
 8025ebc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025ec0:	f01b 0f01 	tst.w	fp, #1
 8025ec4:	5d14      	ldrb	r4, [r2, r4]
 8025ec6:	bf0c      	ite	eq
 8025ec8:	f004 040f 	andeq.w	r4, r4, #15
 8025ecc:	1124      	asrne	r4, r4, #4
 8025ece:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025ed2:	b2e4      	uxtb	r4, r4
 8025ed4:	2d00      	cmp	r5, #0
 8025ed6:	f000 8096 	beq.w	8026006 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8025eda:	2800      	cmp	r0, #0
 8025edc:	f10c 0c01 	add.w	ip, ip, #1
 8025ee0:	db3c      	blt.n	8025f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025ee2:	4580      	cmp	r8, r0
 8025ee4:	dd3a      	ble.n	8025f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025ee6:	f1bc 0f00 	cmp.w	ip, #0
 8025eea:	db37      	blt.n	8025f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025eec:	45e1      	cmp	r9, ip
 8025eee:	dd35      	ble.n	8025f5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025ef0:	eb03 0b0e 	add.w	fp, r3, lr
 8025ef4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8025ef8:	f01b 0f01 	tst.w	fp, #1
 8025efc:	5c10      	ldrb	r0, [r2, r0]
 8025efe:	bf0c      	ite	eq
 8025f00:	f000 000f 	andeq.w	r0, r0, #15
 8025f04:	1100      	asrne	r0, r0, #4
 8025f06:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025f0a:	b2c0      	uxtb	r0, r0
 8025f0c:	f1ba 0f00 	cmp.w	sl, #0
 8025f10:	db26      	blt.n	8025f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025f12:	45d0      	cmp	r8, sl
 8025f14:	dd24      	ble.n	8025f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025f16:	f1bc 0f00 	cmp.w	ip, #0
 8025f1a:	db21      	blt.n	8025f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025f1c:	45e1      	cmp	r9, ip
 8025f1e:	dd1f      	ble.n	8025f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025f20:	b307      	cbz	r7, 8025f64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8025f22:	3301      	adds	r3, #1
 8025f24:	449e      	add	lr, r3
 8025f26:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025f2a:	f01e 0f01 	tst.w	lr, #1
 8025f2e:	5cd3      	ldrb	r3, [r2, r3]
 8025f30:	bf0c      	ite	eq
 8025f32:	f003 030f 	andeq.w	r3, r3, #15
 8025f36:	111b      	asrne	r3, r3, #4
 8025f38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025f3c:	b2db      	uxtb	r3, r3
 8025f3e:	2f0f      	cmp	r7, #15
 8025f40:	d911      	bls.n	8025f66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8025f42:	4b35      	ldr	r3, [pc, #212]	; (8026018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8025f44:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025f48:	4a34      	ldr	r2, [pc, #208]	; (802601c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8025f4a:	4835      	ldr	r0, [pc, #212]	; (8026020 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8025f4c:	f002 fb5a 	bl	8028604 <__assert_func>
 8025f50:	2600      	movs	r6, #0
 8025f52:	e7a4      	b.n	8025e9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8025f54:	2400      	movs	r4, #0
 8025f56:	e7bd      	b.n	8025ed4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8025f58:	463c      	mov	r4, r7
 8025f5a:	e7be      	b.n	8025eda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8025f5c:	2000      	movs	r0, #0
 8025f5e:	e7d5      	b.n	8025f0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8025f60:	2300      	movs	r3, #0
 8025f62:	e7ec      	b.n	8025f3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8025f64:	463b      	mov	r3, r7
 8025f66:	2d0f      	cmp	r5, #15
 8025f68:	d8eb      	bhi.n	8025f42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025f6a:	b2bf      	uxth	r7, r7
 8025f6c:	b2ad      	uxth	r5, r5
 8025f6e:	fb07 f205 	mul.w	r2, r7, r5
 8025f72:	013f      	lsls	r7, r7, #4
 8025f74:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025f78:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8025f7c:	1abf      	subs	r7, r7, r2
 8025f7e:	b2ad      	uxth	r5, r5
 8025f80:	b2bf      	uxth	r7, r7
 8025f82:	ebac 0c05 	sub.w	ip, ip, r5
 8025f86:	437c      	muls	r4, r7
 8025f88:	fa1f fc8c 	uxth.w	ip, ip
 8025f8c:	fb06 440c 	mla	r4, r6, ip, r4
 8025f90:	fb05 4400 	mla	r4, r5, r0, r4
 8025f94:	fb02 4203 	mla	r2, r2, r3, r4
 8025f98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025f9c:	b38a      	cbz	r2, 8026002 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8025f9e:	4b21      	ldr	r3, [pc, #132]	; (8026024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8025fa0:	681c      	ldr	r4, [r3, #0]
 8025fa2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8025fa6:	b2e5      	uxtb	r5, r4
 8025fa8:	4353      	muls	r3, r2
 8025faa:	1c5a      	adds	r2, r3, #1
 8025fac:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025fb0:	1212      	asrs	r2, r2, #8
 8025fb2:	b290      	uxth	r0, r2
 8025fb4:	43d2      	mvns	r2, r2
 8025fb6:	fb15 f500 	smulbb	r5, r5, r0
 8025fba:	b2d3      	uxtb	r3, r2
 8025fbc:	780a      	ldrb	r2, [r1, #0]
 8025fbe:	fb02 5203 	mla	r2, r2, r3, r5
 8025fc2:	b292      	uxth	r2, r2
 8025fc4:	1c55      	adds	r5, r2, #1
 8025fc6:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025fca:	784d      	ldrb	r5, [r1, #1]
 8025fcc:	fb15 f503 	smulbb	r5, r5, r3
 8025fd0:	1212      	asrs	r2, r2, #8
 8025fd2:	700a      	strb	r2, [r1, #0]
 8025fd4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8025fd8:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025fdc:	fb02 5200 	mla	r2, r2, r0, r5
 8025fe0:	b292      	uxth	r2, r2
 8025fe2:	1c55      	adds	r5, r2, #1
 8025fe4:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025fe8:	1212      	asrs	r2, r2, #8
 8025fea:	704a      	strb	r2, [r1, #1]
 8025fec:	788a      	ldrb	r2, [r1, #2]
 8025fee:	fb12 f303 	smulbb	r3, r2, r3
 8025ff2:	fb04 3300 	mla	r3, r4, r0, r3
 8025ff6:	b29b      	uxth	r3, r3
 8025ff8:	1c5a      	adds	r2, r3, #1
 8025ffa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025ffe:	121b      	asrs	r3, r3, #8
 8026000:	708b      	strb	r3, [r1, #2]
 8026002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026006:	2f0f      	cmp	r7, #15
 8026008:	d89b      	bhi.n	8025f42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802600a:	462b      	mov	r3, r5
 802600c:	4628      	mov	r0, r5
 802600e:	e7ac      	b.n	8025f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8026010:	2d00      	cmp	r5, #0
 8026012:	d1a1      	bne.n	8025f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8026014:	462c      	mov	r4, r5
 8026016:	e7f8      	b.n	802600a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8026018:	0802d907 	.word	0x0802d907
 802601c:	0802ddfe 	.word	0x0802ddfe
 8026020:	0802d9d0 	.word	0x0802d9d0
 8026024:	2000bf18 	.word	0x2000bf18

08026028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802602c:	ed2d 8b08 	vpush	{d8-d11}
 8026030:	b097      	sub	sp, #92	; 0x5c
 8026032:	eeb0 aa40 	vmov.f32	s20, s0
 8026036:	eef0 9a60 	vmov.f32	s19, s1
 802603a:	9308      	str	r3, [sp, #32]
 802603c:	eeb0 9a41 	vmov.f32	s18, s2
 8026040:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8026044:	eeb0 8a62 	vmov.f32	s16, s5
 8026048:	9214      	str	r2, [sp, #80]	; 0x50
 802604a:	eef0 8a43 	vmov.f32	s17, s6
 802604e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026050:	eef0 ba44 	vmov.f32	s23, s8
 8026054:	9309      	str	r3, [sp, #36]	; 0x24
 8026056:	eeb0 ba64 	vmov.f32	s22, s9
 802605a:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 802605e:	eef0 aa45 	vmov.f32	s21, s10
 8026062:	9015      	str	r0, [sp, #84]	; 0x54
 8026064:	910c      	str	r1, [sp, #48]	; 0x30
 8026066:	930e      	str	r3, [sp, #56]	; 0x38
 8026068:	6850      	ldr	r0, [r2, #4]
 802606a:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 802606e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026072:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8026076:	fb00 1803 	mla	r8, r0, r3, r1
 802607a:	6813      	ldr	r3, [r2, #0]
 802607c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026080:	4498      	add	r8, r3
 8026082:	f10b 0301 	add.w	r3, fp, #1
 8026086:	f023 0301 	bic.w	r3, r3, #1
 802608a:	930f      	str	r3, [sp, #60]	; 0x3c
 802608c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802608e:	681f      	ldr	r7, [r3, #0]
 8026090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026092:	2b00      	cmp	r3, #0
 8026094:	dc03      	bgt.n	802609e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8026096:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026098:	2b00      	cmp	r3, #0
 802609a:	f340 8238 	ble.w	802650e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802609e:	9b08      	ldr	r3, [sp, #32]
 80260a0:	2b00      	cmp	r3, #0
 80260a2:	f340 810c 	ble.w	80262be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80260a6:	142a      	asrs	r2, r5, #16
 80260a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80260ac:	d42c      	bmi.n	8026108 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80260ae:	1c51      	adds	r1, r2, #1
 80260b0:	458b      	cmp	fp, r1
 80260b2:	dd2c      	ble.n	802610e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80260b4:	2b00      	cmp	r3, #0
 80260b6:	db2a      	blt.n	802610e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80260b8:	1c59      	adds	r1, r3, #1
 80260ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80260bc:	4288      	cmp	r0, r1
 80260be:	dd26      	ble.n	802610e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80260c0:	9b08      	ldr	r3, [sp, #32]
 80260c2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80260c4:	3b01      	subs	r3, #1
 80260c6:	fb02 5203 	mla	r2, r2, r3, r5
 80260ca:	1412      	asrs	r2, r2, #16
 80260cc:	d429      	bmi.n	8026122 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80260ce:	3201      	adds	r2, #1
 80260d0:	4593      	cmp	fp, r2
 80260d2:	dd26      	ble.n	8026122 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80260d4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80260d6:	fb02 6303 	mla	r3, r2, r3, r6
 80260da:	141b      	asrs	r3, r3, #16
 80260dc:	d421      	bmi.n	8026122 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80260de:	3301      	adds	r3, #1
 80260e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80260e2:	429a      	cmp	r2, r3
 80260e4:	dd1d      	ble.n	8026122 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80260e6:	f108 0e03 	add.w	lr, r8, #3
 80260ea:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80260ee:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80260f2:	f1b9 0f00 	cmp.w	r9, #0
 80260f6:	f300 814f 	bgt.w	8026398 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80260fa:	9b08      	ldr	r3, [sp, #32]
 80260fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026100:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026104:	44a0      	add	r8, r4
 8026106:	e0dc      	b.n	80262c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8026108:	1c51      	adds	r1, r2, #1
 802610a:	f040 80ce 	bne.w	80262aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802610e:	4593      	cmp	fp, r2
 8026110:	f340 80cb 	ble.w	80262aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8026114:	1c5a      	adds	r2, r3, #1
 8026116:	f2c0 80c8 	blt.w	80262aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802611a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802611c:	4293      	cmp	r3, r2
 802611e:	f280 80c4 	bge.w	80262aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8026122:	9b08      	ldr	r3, [sp, #32]
 8026124:	46c1      	mov	r9, r8
 8026126:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802612a:	930d      	str	r3, [sp, #52]	; 0x34
 802612c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802612e:	2b00      	cmp	r3, #0
 8026130:	dde3      	ble.n	80260fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8026132:	1428      	asrs	r0, r5, #16
 8026134:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026138:	ea4f 4326 	mov.w	r3, r6, asr #16
 802613c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026140:	f100 8111 	bmi.w	8026366 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8026144:	f100 0c01 	add.w	ip, r0, #1
 8026148:	45e3      	cmp	fp, ip
 802614a:	f340 810e 	ble.w	802636a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802614e:	2b00      	cmp	r3, #0
 8026150:	f2c0 810b 	blt.w	802636a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8026154:	f103 0c01 	add.w	ip, r3, #1
 8026158:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802615a:	4564      	cmp	r4, ip
 802615c:	f340 8105 	ble.w	802636a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8026160:	fb03 030a 	mla	r3, r3, sl, r0
 8026164:	0858      	lsrs	r0, r3, #1
 8026166:	07dc      	lsls	r4, r3, #31
 8026168:	5c38      	ldrb	r0, [r7, r0]
 802616a:	bf54      	ite	pl
 802616c:	f000 000f 	andpl.w	r0, r0, #15
 8026170:	1100      	asrmi	r0, r0, #4
 8026172:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026176:	b2c0      	uxtb	r0, r0
 8026178:	2a00      	cmp	r2, #0
 802617a:	f000 80e1 	beq.w	8026340 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 802617e:	f103 0e01 	add.w	lr, r3, #1
 8026182:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8026186:	f01e 0f01 	tst.w	lr, #1
 802618a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802618e:	bf0c      	ite	eq
 8026190:	f00c 0c0f 	andeq.w	ip, ip, #15
 8026194:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8026198:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802619c:	fa5f f48c 	uxtb.w	r4, ip
 80261a0:	9410      	str	r4, [sp, #64]	; 0x40
 80261a2:	b1f9      	cbz	r1, 80261e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80261a4:	4453      	add	r3, sl
 80261a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80261aa:	07dc      	lsls	r4, r3, #31
 80261ac:	f103 0301 	add.w	r3, r3, #1
 80261b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80261b4:	bf54      	ite	pl
 80261b6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80261ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80261be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80261c2:	fa5f f48c 	uxtb.w	r4, ip
 80261c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80261ca:	940a      	str	r4, [sp, #40]	; 0x28
 80261cc:	07dc      	lsls	r4, r3, #31
 80261ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80261d2:	bf54      	ite	pl
 80261d4:	f00c 030f 	andpl.w	r3, ip, #15
 80261d8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80261dc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80261e0:	b2db      	uxtb	r3, r3
 80261e2:	9311      	str	r3, [sp, #68]	; 0x44
 80261e4:	b292      	uxth	r2, r2
 80261e6:	b289      	uxth	r1, r1
 80261e8:	0113      	lsls	r3, r2, #4
 80261ea:	fb02 fc01 	mul.w	ip, r2, r1
 80261ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80261f0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80261f4:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80261f8:	eba3 030c 	sub.w	r3, r3, ip
 80261fc:	b289      	uxth	r1, r1
 80261fe:	b29b      	uxth	r3, r3
 8026200:	ebae 0e01 	sub.w	lr, lr, r1
 8026204:	4353      	muls	r3, r2
 8026206:	fa1f fe8e 	uxth.w	lr, lr
 802620a:	fb00 320e 	mla	r2, r0, lr, r3
 802620e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026210:	fb01 2203 	mla	r2, r1, r3, r2
 8026214:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026216:	fb0c 2203 	mla	r2, ip, r3, r2
 802621a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802621e:	2a00      	cmp	r2, #0
 8026220:	d039      	beq.n	8026296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026222:	4bbd      	ldr	r3, [pc, #756]	; (8026518 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8026224:	6819      	ldr	r1, [r3, #0]
 8026226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026228:	fa5f fc81 	uxtb.w	ip, r1
 802622c:	435a      	muls	r2, r3
 802622e:	1c53      	adds	r3, r2, #1
 8026230:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026234:	1212      	asrs	r2, r2, #8
 8026236:	b290      	uxth	r0, r2
 8026238:	43d2      	mvns	r2, r2
 802623a:	fb1c fc00 	smulbb	ip, ip, r0
 802623e:	b2d3      	uxtb	r3, r2
 8026240:	f899 2000 	ldrb.w	r2, [r9]
 8026244:	fb02 c203 	mla	r2, r2, r3, ip
 8026248:	b292      	uxth	r2, r2
 802624a:	f102 0c01 	add.w	ip, r2, #1
 802624e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026252:	f899 c001 	ldrb.w	ip, [r9, #1]
 8026256:	fb1c fc03 	smulbb	ip, ip, r3
 802625a:	1212      	asrs	r2, r2, #8
 802625c:	f889 2000 	strb.w	r2, [r9]
 8026260:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8026264:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8026268:	fb02 c200 	mla	r2, r2, r0, ip
 802626c:	b292      	uxth	r2, r2
 802626e:	f102 0c01 	add.w	ip, r2, #1
 8026272:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026276:	1212      	asrs	r2, r2, #8
 8026278:	f889 2001 	strb.w	r2, [r9, #1]
 802627c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026280:	fb12 f303 	smulbb	r3, r2, r3
 8026284:	fb01 3300 	mla	r3, r1, r0, r3
 8026288:	b29b      	uxth	r3, r3
 802628a:	1c5a      	adds	r2, r3, #1
 802628c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026290:	121b      	asrs	r3, r3, #8
 8026292:	f889 3002 	strb.w	r3, [r9, #2]
 8026296:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026298:	f109 0903 	add.w	r9, r9, #3
 802629c:	441d      	add	r5, r3
 802629e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262a0:	441e      	add	r6, r3
 80262a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80262a4:	3b01      	subs	r3, #1
 80262a6:	930d      	str	r3, [sp, #52]	; 0x34
 80262a8:	e740      	b.n	802612c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80262aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80262ac:	f108 0803 	add.w	r8, r8, #3
 80262b0:	441d      	add	r5, r3
 80262b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262b4:	441e      	add	r6, r3
 80262b6:	9b08      	ldr	r3, [sp, #32]
 80262b8:	3b01      	subs	r3, #1
 80262ba:	9308      	str	r3, [sp, #32]
 80262bc:	e6ef      	b.n	802609e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80262be:	f47f aeff 	bne.w	80260c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80262c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80262c4:	2b00      	cmp	r3, #0
 80262c6:	f340 8122 	ble.w	802650e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80262ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80262ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262d0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80262d4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80262d8:	eef0 6a48 	vmov.f32	s13, s16
 80262dc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80262e0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80262e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262e8:	ee16 5a90 	vmov	r5, s13
 80262ec:	eef0 6a68 	vmov.f32	s13, s17
 80262f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262f4:	ee16 6a90 	vmov	r6, s13
 80262f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80262fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026300:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026304:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026308:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802630c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026310:	ee18 2a10 	vmov	r2, s16
 8026314:	eeb0 8a47 	vmov.f32	s16, s14
 8026318:	fb92 f3f3 	sdiv	r3, r2, r3
 802631c:	ee18 2a90 	vmov	r2, s17
 8026320:	932b      	str	r3, [sp, #172]	; 0xac
 8026322:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026324:	eef0 8a67 	vmov.f32	s17, s15
 8026328:	fb92 f3f3 	sdiv	r3, r2, r3
 802632c:	932c      	str	r3, [sp, #176]	; 0xb0
 802632e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026332:	3b01      	subs	r3, #1
 8026334:	930c      	str	r3, [sp, #48]	; 0x30
 8026336:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026338:	bf08      	it	eq
 802633a:	4613      	moveq	r3, r2
 802633c:	9308      	str	r3, [sp, #32]
 802633e:	e6a7      	b.n	8026090 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8026340:	2900      	cmp	r1, #0
 8026342:	f43f af4f 	beq.w	80261e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8026346:	4453      	add	r3, sl
 8026348:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802634c:	07db      	lsls	r3, r3, #31
 802634e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026352:	bf54      	ite	pl
 8026354:	f00c 030f 	andpl.w	r3, ip, #15
 8026358:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802635c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026360:	b2db      	uxtb	r3, r3
 8026362:	930a      	str	r3, [sp, #40]	; 0x28
 8026364:	e73e      	b.n	80261e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8026366:	1c44      	adds	r4, r0, #1
 8026368:	d195      	bne.n	8026296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802636a:	4583      	cmp	fp, r0
 802636c:	dd93      	ble.n	8026296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802636e:	1c5c      	adds	r4, r3, #1
 8026370:	db91      	blt.n	8026296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026372:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026374:	429c      	cmp	r4, r3
 8026376:	dd8e      	ble.n	8026296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026378:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802637a:	9002      	str	r0, [sp, #8]
 802637c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802637e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8026382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026384:	463a      	mov	r2, r7
 8026386:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802638a:	e9cd b300 	strd	fp, r3, [sp]
 802638e:	4649      	mov	r1, r9
 8026390:	4653      	mov	r3, sl
 8026392:	f7ff fd61 	bl	8025e58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8026396:	e77e      	b.n	8026296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026398:	142a      	asrs	r2, r5, #16
 802639a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802639e:	1433      	asrs	r3, r6, #16
 80263a0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80263a4:	fb0a 2303 	mla	r3, sl, r3, r2
 80263a8:	085a      	lsrs	r2, r3, #1
 80263aa:	07dc      	lsls	r4, r3, #31
 80263ac:	5cba      	ldrb	r2, [r7, r2]
 80263ae:	bf54      	ite	pl
 80263b0:	f002 020f 	andpl.w	r2, r2, #15
 80263b4:	1112      	asrmi	r2, r2, #4
 80263b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80263ba:	b2d2      	uxtb	r2, r2
 80263bc:	2900      	cmp	r1, #0
 80263be:	f000 8093 	beq.w	80264e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80263c2:	1c5c      	adds	r4, r3, #1
 80263c4:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80263c8:	07e4      	lsls	r4, r4, #31
 80263ca:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80263ce:	bf54      	ite	pl
 80263d0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80263d4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80263d8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80263dc:	fa5f f48c 	uxtb.w	r4, ip
 80263e0:	9412      	str	r4, [sp, #72]	; 0x48
 80263e2:	b300      	cbz	r0, 8026426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80263e4:	4453      	add	r3, sl
 80263e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80263ea:	07dc      	lsls	r4, r3, #31
 80263ec:	f103 0301 	add.w	r3, r3, #1
 80263f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80263f4:	bf54      	ite	pl
 80263f6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80263fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80263fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026402:	fa5f f48c 	uxtb.w	r4, ip
 8026406:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802640a:	940b      	str	r4, [sp, #44]	; 0x2c
 802640c:	07dc      	lsls	r4, r3, #31
 802640e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026412:	bf54      	ite	pl
 8026414:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026418:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802641c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026420:	fa5f f38c 	uxtb.w	r3, ip
 8026424:	9313      	str	r3, [sp, #76]	; 0x4c
 8026426:	b289      	uxth	r1, r1
 8026428:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802642a:	b280      	uxth	r0, r0
 802642c:	fb01 f300 	mul.w	r3, r1, r0
 8026430:	0109      	lsls	r1, r1, #4
 8026432:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8026436:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802643a:	1ac9      	subs	r1, r1, r3
 802643c:	b280      	uxth	r0, r0
 802643e:	b289      	uxth	r1, r1
 8026440:	ebac 0c00 	sub.w	ip, ip, r0
 8026444:	4361      	muls	r1, r4
 8026446:	fa1f fc8c 	uxth.w	ip, ip
 802644a:	fb02 120c 	mla	r2, r2, ip, r1
 802644e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026450:	fb00 2001 	mla	r0, r0, r1, r2
 8026454:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026456:	fb03 0302 	mla	r3, r3, r2, r0
 802645a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802645e:	2b00      	cmp	r3, #0
 8026460:	d039      	beq.n	80264d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8026462:	4a2d      	ldr	r2, [pc, #180]	; (8026518 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8026464:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8026468:	6810      	ldr	r0, [r2, #0]
 802646a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802646c:	fa5f fc80 	uxtb.w	ip, r0
 8026470:	4353      	muls	r3, r2
 8026472:	1c5a      	adds	r2, r3, #1
 8026474:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026478:	121b      	asrs	r3, r3, #8
 802647a:	b29a      	uxth	r2, r3
 802647c:	43db      	mvns	r3, r3
 802647e:	fb1c fc02 	smulbb	ip, ip, r2
 8026482:	b2db      	uxtb	r3, r3
 8026484:	fb01 c103 	mla	r1, r1, r3, ip
 8026488:	b289      	uxth	r1, r1
 802648a:	f101 0c01 	add.w	ip, r1, #1
 802648e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026492:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8026496:	fb1c fc03 	smulbb	ip, ip, r3
 802649a:	1209      	asrs	r1, r1, #8
 802649c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80264a0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80264a4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80264a8:	fb01 c102 	mla	r1, r1, r2, ip
 80264ac:	b289      	uxth	r1, r1
 80264ae:	f101 0c01 	add.w	ip, r1, #1
 80264b2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80264b6:	1209      	asrs	r1, r1, #8
 80264b8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80264bc:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80264c0:	fb11 f303 	smulbb	r3, r1, r3
 80264c4:	fb00 3002 	mla	r0, r0, r2, r3
 80264c8:	b280      	uxth	r0, r0
 80264ca:	1c42      	adds	r2, r0, #1
 80264cc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80264d0:	1200      	asrs	r0, r0, #8
 80264d2:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80264d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80264d8:	f10e 0e03 	add.w	lr, lr, #3
 80264dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80264e0:	441d      	add	r5, r3
 80264e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264e4:	441e      	add	r6, r3
 80264e6:	e604      	b.n	80260f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80264e8:	2800      	cmp	r0, #0
 80264ea:	d09c      	beq.n	8026426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80264ec:	4453      	add	r3, sl
 80264ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80264f2:	07db      	lsls	r3, r3, #31
 80264f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80264f8:	bf54      	ite	pl
 80264fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80264fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026502:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026506:	fa5f f38c 	uxtb.w	r3, ip
 802650a:	930b      	str	r3, [sp, #44]	; 0x2c
 802650c:	e78b      	b.n	8026426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802650e:	b017      	add	sp, #92	; 0x5c
 8026510:	ecbd 8b08 	vpop	{d8-d11}
 8026514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026518:	2000bf18 	.word	0x2000bf18

0802651c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 802651c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026520:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8026524:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8026528:	2800      	cmp	r0, #0
 802652a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802652e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8026532:	fb0c 0e03 	mla	lr, ip, r3, r0
 8026536:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802653a:	db6b      	blt.n	8026614 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802653c:	4580      	cmp	r8, r0
 802653e:	dd69      	ble.n	8026614 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8026540:	f1bc 0f00 	cmp.w	ip, #0
 8026544:	db66      	blt.n	8026614 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8026546:	45e1      	cmp	r9, ip
 8026548:	dd64      	ble.n	8026614 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802654a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802654e:	f01e 0f01 	tst.w	lr, #1
 8026552:	5d16      	ldrb	r6, [r2, r4]
 8026554:	bf0c      	ite	eq
 8026556:	f006 060f 	andeq.w	r6, r6, #15
 802655a:	1136      	asrne	r6, r6, #4
 802655c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026560:	b2f6      	uxtb	r6, r6
 8026562:	f110 0a01 	adds.w	sl, r0, #1
 8026566:	d457      	bmi.n	8026618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8026568:	45d0      	cmp	r8, sl
 802656a:	dd55      	ble.n	8026618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802656c:	f1bc 0f00 	cmp.w	ip, #0
 8026570:	db52      	blt.n	8026618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8026572:	45e1      	cmp	r9, ip
 8026574:	dd50      	ble.n	8026618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8026576:	2f00      	cmp	r7, #0
 8026578:	f000 80a5 	beq.w	80266c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 802657c:	f10e 0b01 	add.w	fp, lr, #1
 8026580:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8026584:	f01b 0f01 	tst.w	fp, #1
 8026588:	5d14      	ldrb	r4, [r2, r4]
 802658a:	bf0c      	ite	eq
 802658c:	f004 040f 	andeq.w	r4, r4, #15
 8026590:	1124      	asrne	r4, r4, #4
 8026592:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026596:	b2e4      	uxtb	r4, r4
 8026598:	2d00      	cmp	r5, #0
 802659a:	f000 808f 	beq.w	80266bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802659e:	2800      	cmp	r0, #0
 80265a0:	f10c 0c01 	add.w	ip, ip, #1
 80265a4:	db3c      	blt.n	8026620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80265a6:	4580      	cmp	r8, r0
 80265a8:	dd3a      	ble.n	8026620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80265aa:	f1bc 0f00 	cmp.w	ip, #0
 80265ae:	db37      	blt.n	8026620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80265b0:	45e1      	cmp	r9, ip
 80265b2:	dd35      	ble.n	8026620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80265b4:	eb03 0b0e 	add.w	fp, r3, lr
 80265b8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80265bc:	f01b 0f01 	tst.w	fp, #1
 80265c0:	5c10      	ldrb	r0, [r2, r0]
 80265c2:	bf0c      	ite	eq
 80265c4:	f000 000f 	andeq.w	r0, r0, #15
 80265c8:	1100      	asrne	r0, r0, #4
 80265ca:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80265ce:	b2c0      	uxtb	r0, r0
 80265d0:	f1ba 0f00 	cmp.w	sl, #0
 80265d4:	db26      	blt.n	8026624 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80265d6:	45d0      	cmp	r8, sl
 80265d8:	dd24      	ble.n	8026624 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80265da:	f1bc 0f00 	cmp.w	ip, #0
 80265de:	db21      	blt.n	8026624 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80265e0:	45e1      	cmp	r9, ip
 80265e2:	dd1f      	ble.n	8026624 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80265e4:	b307      	cbz	r7, 8026628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80265e6:	3301      	adds	r3, #1
 80265e8:	449e      	add	lr, r3
 80265ea:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80265ee:	f01e 0f01 	tst.w	lr, #1
 80265f2:	5cd3      	ldrb	r3, [r2, r3]
 80265f4:	bf0c      	ite	eq
 80265f6:	f003 030f 	andeq.w	r3, r3, #15
 80265fa:	111b      	asrne	r3, r3, #4
 80265fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026600:	b2db      	uxtb	r3, r3
 8026602:	2f0f      	cmp	r7, #15
 8026604:	d911      	bls.n	802662a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8026606:	4b32      	ldr	r3, [pc, #200]	; (80266d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8026608:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802660c:	4a31      	ldr	r2, [pc, #196]	; (80266d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802660e:	4832      	ldr	r0, [pc, #200]	; (80266d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8026610:	f001 fff8 	bl	8028604 <__assert_func>
 8026614:	2600      	movs	r6, #0
 8026616:	e7a4      	b.n	8026562 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8026618:	2400      	movs	r4, #0
 802661a:	e7bd      	b.n	8026598 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 802661c:	463c      	mov	r4, r7
 802661e:	e7be      	b.n	802659e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8026620:	2000      	movs	r0, #0
 8026622:	e7d5      	b.n	80265d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8026624:	2300      	movs	r3, #0
 8026626:	e7ec      	b.n	8026602 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8026628:	463b      	mov	r3, r7
 802662a:	2d0f      	cmp	r5, #15
 802662c:	d8eb      	bhi.n	8026606 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802662e:	b2bf      	uxth	r7, r7
 8026630:	b2ad      	uxth	r5, r5
 8026632:	fb07 f205 	mul.w	r2, r7, r5
 8026636:	013f      	lsls	r7, r7, #4
 8026638:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 802663c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8026640:	1abf      	subs	r7, r7, r2
 8026642:	b2ad      	uxth	r5, r5
 8026644:	b2bf      	uxth	r7, r7
 8026646:	ebac 0c05 	sub.w	ip, ip, r5
 802664a:	437c      	muls	r4, r7
 802664c:	fa1f fc8c 	uxth.w	ip, ip
 8026650:	fb06 440c 	mla	r4, r6, ip, r4
 8026654:	fb05 4400 	mla	r4, r5, r0, r4
 8026658:	fb02 4303 	mla	r3, r2, r3, r4
 802665c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026660:	b353      	cbz	r3, 80266b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8026662:	4a1e      	ldr	r2, [pc, #120]	; (80266dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8026664:	7808      	ldrb	r0, [r1, #0]
 8026666:	6814      	ldr	r4, [r2, #0]
 8026668:	b29a      	uxth	r2, r3
 802666a:	43db      	mvns	r3, r3
 802666c:	b2e5      	uxtb	r5, r4
 802666e:	b2db      	uxtb	r3, r3
 8026670:	fb15 f502 	smulbb	r5, r5, r2
 8026674:	fb00 5003 	mla	r0, r0, r3, r5
 8026678:	b280      	uxth	r0, r0
 802667a:	1c45      	adds	r5, r0, #1
 802667c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026680:	784d      	ldrb	r5, [r1, #1]
 8026682:	fb15 f503 	smulbb	r5, r5, r3
 8026686:	1200      	asrs	r0, r0, #8
 8026688:	7008      	strb	r0, [r1, #0]
 802668a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802668e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026692:	fb00 5002 	mla	r0, r0, r2, r5
 8026696:	b280      	uxth	r0, r0
 8026698:	1c45      	adds	r5, r0, #1
 802669a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802669e:	1200      	asrs	r0, r0, #8
 80266a0:	7048      	strb	r0, [r1, #1]
 80266a2:	7888      	ldrb	r0, [r1, #2]
 80266a4:	fb10 f303 	smulbb	r3, r0, r3
 80266a8:	fb04 3202 	mla	r2, r4, r2, r3
 80266ac:	b292      	uxth	r2, r2
 80266ae:	1c53      	adds	r3, r2, #1
 80266b0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80266b4:	1212      	asrs	r2, r2, #8
 80266b6:	708a      	strb	r2, [r1, #2]
 80266b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266bc:	2f0f      	cmp	r7, #15
 80266be:	d8a2      	bhi.n	8026606 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80266c0:	462b      	mov	r3, r5
 80266c2:	4628      	mov	r0, r5
 80266c4:	e7b3      	b.n	802662e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80266c6:	2d00      	cmp	r5, #0
 80266c8:	d1a8      	bne.n	802661c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80266ca:	462c      	mov	r4, r5
 80266cc:	e7f8      	b.n	80266c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80266ce:	bf00      	nop
 80266d0:	0802d907 	.word	0x0802d907
 80266d4:	0802ddfe 	.word	0x0802ddfe
 80266d8:	0802d9d0 	.word	0x0802d9d0
 80266dc:	2000bf18 	.word	0x2000bf18

080266e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80266e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266e4:	ed2d 8b08 	vpush	{d8-d11}
 80266e8:	b095      	sub	sp, #84	; 0x54
 80266ea:	461c      	mov	r4, r3
 80266ec:	eeb0 aa40 	vmov.f32	s20, s0
 80266f0:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80266f4:	eef0 9a60 	vmov.f32	s19, s1
 80266f8:	920e      	str	r2, [sp, #56]	; 0x38
 80266fa:	eeb0 9a41 	vmov.f32	s18, s2
 80266fe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026700:	eeb0 8a62 	vmov.f32	s16, s5
 8026704:	9307      	str	r3, [sp, #28]
 8026706:	eef0 8a43 	vmov.f32	s17, s6
 802670a:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802670e:	eef0 ba44 	vmov.f32	s23, s8
 8026712:	9013      	str	r0, [sp, #76]	; 0x4c
 8026714:	eeb0 ba64 	vmov.f32	s22, s9
 8026718:	9109      	str	r1, [sp, #36]	; 0x24
 802671a:	eef0 aa45 	vmov.f32	s21, s10
 802671e:	9308      	str	r3, [sp, #32]
 8026720:	6850      	ldr	r0, [r2, #4]
 8026722:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8026726:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 802672a:	fb00 1803 	mla	r8, r0, r3, r1
 802672e:	6813      	ldr	r3, [r2, #0]
 8026730:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026734:	4498      	add	r8, r3
 8026736:	9b07      	ldr	r3, [sp, #28]
 8026738:	3301      	adds	r3, #1
 802673a:	f023 0301 	bic.w	r3, r3, #1
 802673e:	930b      	str	r3, [sp, #44]	; 0x2c
 8026740:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026742:	681f      	ldr	r7, [r3, #0]
 8026744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026746:	2b00      	cmp	r3, #0
 8026748:	dc03      	bgt.n	8026752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802674a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802674c:	2b00      	cmp	r3, #0
 802674e:	f340 8238 	ble.w	8026bc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8026752:	2c00      	cmp	r4, #0
 8026754:	f340 8109 	ble.w	802696a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8026758:	142a      	asrs	r2, r5, #16
 802675a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802675e:	d42b      	bmi.n	80267b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8026760:	1c51      	adds	r1, r2, #1
 8026762:	9807      	ldr	r0, [sp, #28]
 8026764:	4288      	cmp	r0, r1
 8026766:	dd2a      	ble.n	80267be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8026768:	2b00      	cmp	r3, #0
 802676a:	db28      	blt.n	80267be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802676c:	1c59      	adds	r1, r3, #1
 802676e:	9808      	ldr	r0, [sp, #32]
 8026770:	4288      	cmp	r0, r1
 8026772:	dd24      	ble.n	80267be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8026774:	1e63      	subs	r3, r4, #1
 8026776:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026778:	fb02 5203 	mla	r2, r2, r3, r5
 802677c:	1412      	asrs	r2, r2, #16
 802677e:	d429      	bmi.n	80267d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026780:	3201      	adds	r2, #1
 8026782:	9907      	ldr	r1, [sp, #28]
 8026784:	4291      	cmp	r1, r2
 8026786:	dd25      	ble.n	80267d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026788:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802678a:	fb02 6303 	mla	r3, r2, r3, r6
 802678e:	141b      	asrs	r3, r3, #16
 8026790:	d420      	bmi.n	80267d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026792:	3301      	adds	r3, #1
 8026794:	9a08      	ldr	r2, [sp, #32]
 8026796:	429a      	cmp	r2, r3
 8026798:	dd1c      	ble.n	80267d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802679a:	f108 0e03 	add.w	lr, r8, #3
 802679e:	46a1      	mov	r9, r4
 80267a0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80267a4:	f1b9 0f00 	cmp.w	r9, #0
 80267a8:	f300 8155 	bgt.w	8026a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80267ac:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80267b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80267b4:	44a0      	add	r8, r4
 80267b6:	e0da      	b.n	802696e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80267b8:	1c50      	adds	r0, r2, #1
 80267ba:	f040 80ce 	bne.w	802695a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80267be:	9907      	ldr	r1, [sp, #28]
 80267c0:	4291      	cmp	r1, r2
 80267c2:	f340 80ca 	ble.w	802695a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80267c6:	1c59      	adds	r1, r3, #1
 80267c8:	f2c0 80c7 	blt.w	802695a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80267cc:	9a08      	ldr	r2, [sp, #32]
 80267ce:	4293      	cmp	r3, r2
 80267d0:	f280 80c3 	bge.w	802695a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80267d4:	46a3      	mov	fp, r4
 80267d6:	46c1      	mov	r9, r8
 80267d8:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80267dc:	f1bb 0f00 	cmp.w	fp, #0
 80267e0:	dde4      	ble.n	80267ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80267e2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80267e6:	1428      	asrs	r0, r5, #16
 80267e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80267ec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80267f0:	920a      	str	r2, [sp, #40]	; 0x28
 80267f2:	f100 8116 	bmi.w	8026a22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80267f6:	f100 0c01 	add.w	ip, r0, #1
 80267fa:	9a07      	ldr	r2, [sp, #28]
 80267fc:	4562      	cmp	r2, ip
 80267fe:	f340 8112 	ble.w	8026a26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8026802:	2b00      	cmp	r3, #0
 8026804:	f2c0 810f 	blt.w	8026a26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8026808:	f103 0c01 	add.w	ip, r3, #1
 802680c:	9a08      	ldr	r2, [sp, #32]
 802680e:	4562      	cmp	r2, ip
 8026810:	f340 8109 	ble.w	8026a26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8026814:	fb03 030a 	mla	r3, r3, sl, r0
 8026818:	0858      	lsrs	r0, r3, #1
 802681a:	07da      	lsls	r2, r3, #31
 802681c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802681e:	5c38      	ldrb	r0, [r7, r0]
 8026820:	bf54      	ite	pl
 8026822:	f000 000f 	andpl.w	r0, r0, #15
 8026826:	1100      	asrmi	r0, r0, #4
 8026828:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802682c:	b2c0      	uxtb	r0, r0
 802682e:	2a00      	cmp	r2, #0
 8026830:	f000 80dd 	beq.w	80269ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8026834:	f103 0e01 	add.w	lr, r3, #1
 8026838:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802683c:	f01e 0f01 	tst.w	lr, #1
 8026840:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026844:	bf0c      	ite	eq
 8026846:	f00c 0c0f 	andeq.w	ip, ip, #15
 802684a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802684e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026852:	fa5f fc8c 	uxtb.w	ip, ip
 8026856:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802685a:	b301      	cbz	r1, 802689e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 802685c:	4453      	add	r3, sl
 802685e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026862:	07da      	lsls	r2, r3, #31
 8026864:	f103 0301 	add.w	r3, r3, #1
 8026868:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802686c:	bf54      	ite	pl
 802686e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026872:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026876:	07da      	lsls	r2, r3, #31
 8026878:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802687c:	fa5f fc8c 	uxtb.w	ip, ip
 8026880:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026884:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026888:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802688c:	bf54      	ite	pl
 802688e:	f00c 030f 	andpl.w	r3, ip, #15
 8026892:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8026896:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802689a:	b2db      	uxtb	r3, r3
 802689c:	9310      	str	r3, [sp, #64]	; 0x40
 802689e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80268a2:	b289      	uxth	r1, r1
 80268a4:	fb02 f301 	mul.w	r3, r2, r1
 80268a8:	0112      	lsls	r2, r2, #4
 80268aa:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80268ae:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80268b2:	1ad2      	subs	r2, r2, r3
 80268b4:	fa1f fe81 	uxth.w	lr, r1
 80268b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80268ba:	b292      	uxth	r2, r2
 80268bc:	ebac 0c0e 	sub.w	ip, ip, lr
 80268c0:	434a      	muls	r2, r1
 80268c2:	fa1f fc8c 	uxth.w	ip, ip
 80268c6:	fb00 200c 	mla	r0, r0, ip, r2
 80268ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80268cc:	fb0e 0002 	mla	r0, lr, r2, r0
 80268d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80268d2:	fb03 0002 	mla	r0, r3, r2, r0
 80268d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80268da:	b3a8      	cbz	r0, 8026948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80268dc:	4bbb      	ldr	r3, [pc, #748]	; (8026bcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80268de:	28ff      	cmp	r0, #255	; 0xff
 80268e0:	681b      	ldr	r3, [r3, #0]
 80268e2:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80268e6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80268ea:	b2db      	uxtb	r3, r3
 80268ec:	f000 8092 	beq.w	8026a14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80268f0:	b282      	uxth	r2, r0
 80268f2:	43c0      	mvns	r0, r0
 80268f4:	f899 e000 	ldrb.w	lr, [r9]
 80268f8:	fb13 f302 	smulbb	r3, r3, r2
 80268fc:	b2c0      	uxtb	r0, r0
 80268fe:	fb11 f102 	smulbb	r1, r1, r2
 8026902:	fb0e 3300 	mla	r3, lr, r0, r3
 8026906:	fb1c f202 	smulbb	r2, ip, r2
 802690a:	b29b      	uxth	r3, r3
 802690c:	f103 0e01 	add.w	lr, r3, #1
 8026910:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8026914:	121b      	asrs	r3, r3, #8
 8026916:	f889 3000 	strb.w	r3, [r9]
 802691a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802691e:	fb03 1100 	mla	r1, r3, r0, r1
 8026922:	b289      	uxth	r1, r1
 8026924:	1c4b      	adds	r3, r1, #1
 8026926:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802692a:	f899 3002 	ldrb.w	r3, [r9, #2]
 802692e:	fb03 2000 	mla	r0, r3, r0, r2
 8026932:	1209      	asrs	r1, r1, #8
 8026934:	b280      	uxth	r0, r0
 8026936:	f889 1001 	strb.w	r1, [r9, #1]
 802693a:	f100 0c01 	add.w	ip, r0, #1
 802693e:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8026942:	1200      	asrs	r0, r0, #8
 8026944:	f889 0002 	strb.w	r0, [r9, #2]
 8026948:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802694a:	f109 0903 	add.w	r9, r9, #3
 802694e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026952:	441d      	add	r5, r3
 8026954:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026956:	441e      	add	r6, r3
 8026958:	e740      	b.n	80267dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802695a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802695c:	3c01      	subs	r4, #1
 802695e:	f108 0803 	add.w	r8, r8, #3
 8026962:	441d      	add	r5, r3
 8026964:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026966:	441e      	add	r6, r3
 8026968:	e6f3      	b.n	8026752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802696a:	f47f af03 	bne.w	8026774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026970:	2b00      	cmp	r3, #0
 8026972:	f340 8126 	ble.w	8026bc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8026976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802697a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802697c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026980:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026984:	eef0 6a48 	vmov.f32	s13, s16
 8026988:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802698c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026990:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026994:	ee16 5a90 	vmov	r5, s13
 8026998:	eef0 6a68 	vmov.f32	s13, s17
 802699c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80269a0:	ee16 6a90 	vmov	r6, s13
 80269a4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80269a8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80269ac:	ee37 8a48 	vsub.f32	s16, s14, s16
 80269b0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80269b4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80269b8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80269bc:	ee18 2a10 	vmov	r2, s16
 80269c0:	eeb0 8a47 	vmov.f32	s16, s14
 80269c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80269c8:	ee18 2a90 	vmov	r2, s17
 80269cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80269ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80269d0:	eef0 8a67 	vmov.f32	s17, s15
 80269d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80269d8:	932a      	str	r3, [sp, #168]	; 0xa8
 80269da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80269de:	3b01      	subs	r3, #1
 80269e0:	9309      	str	r3, [sp, #36]	; 0x24
 80269e2:	bf08      	it	eq
 80269e4:	4614      	moveq	r4, r2
 80269e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80269e8:	bf18      	it	ne
 80269ea:	461c      	movne	r4, r3
 80269ec:	e6aa      	b.n	8026744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80269ee:	2900      	cmp	r1, #0
 80269f0:	f43f af55 	beq.w	802689e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80269f4:	4453      	add	r3, sl
 80269f6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80269fa:	07db      	lsls	r3, r3, #31
 80269fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026a00:	bf54      	ite	pl
 8026a02:	f00c 030f 	andpl.w	r3, ip, #15
 8026a06:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8026a0a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026a0e:	b2db      	uxtb	r3, r3
 8026a10:	930c      	str	r3, [sp, #48]	; 0x30
 8026a12:	e744      	b.n	802689e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8026a14:	f889 3000 	strb.w	r3, [r9]
 8026a18:	f889 1001 	strb.w	r1, [r9, #1]
 8026a1c:	f889 c002 	strb.w	ip, [r9, #2]
 8026a20:	e792      	b.n	8026948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026a22:	1c42      	adds	r2, r0, #1
 8026a24:	d190      	bne.n	8026948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026a26:	9a07      	ldr	r2, [sp, #28]
 8026a28:	4282      	cmp	r2, r0
 8026a2a:	dd8d      	ble.n	8026948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026a2c:	1c5a      	adds	r2, r3, #1
 8026a2e:	db8b      	blt.n	8026948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026a30:	9a08      	ldr	r2, [sp, #32]
 8026a32:	429a      	cmp	r2, r3
 8026a34:	dd88      	ble.n	8026948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026a38:	9105      	str	r1, [sp, #20]
 8026a3a:	4649      	mov	r1, r9
 8026a3c:	9002      	str	r0, [sp, #8]
 8026a3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026a40:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8026a44:	9b08      	ldr	r3, [sp, #32]
 8026a46:	463a      	mov	r2, r7
 8026a48:	9301      	str	r3, [sp, #4]
 8026a4a:	9b07      	ldr	r3, [sp, #28]
 8026a4c:	9300      	str	r3, [sp, #0]
 8026a4e:	4653      	mov	r3, sl
 8026a50:	f7ff fd64 	bl	802651c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8026a54:	e778      	b.n	8026948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026a56:	142a      	asrs	r2, r5, #16
 8026a58:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026a5c:	1433      	asrs	r3, r6, #16
 8026a5e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026a62:	fb0a 2303 	mla	r3, sl, r3, r2
 8026a66:	085a      	lsrs	r2, r3, #1
 8026a68:	07d9      	lsls	r1, r3, #31
 8026a6a:	5cba      	ldrb	r2, [r7, r2]
 8026a6c:	bf54      	ite	pl
 8026a6e:	f002 020f 	andpl.w	r2, r2, #15
 8026a72:	1112      	asrmi	r2, r2, #4
 8026a74:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026a78:	b2d2      	uxtb	r2, r2
 8026a7a:	2800      	cmp	r0, #0
 8026a7c:	f000 808a 	beq.w	8026b94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8026a80:	f103 0b01 	add.w	fp, r3, #1
 8026a84:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8026a88:	f01b 0f01 	tst.w	fp, #1
 8026a8c:	5c79      	ldrb	r1, [r7, r1]
 8026a8e:	bf0c      	ite	eq
 8026a90:	f001 010f 	andeq.w	r1, r1, #15
 8026a94:	1109      	asrne	r1, r1, #4
 8026a96:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026a9a:	b2c9      	uxtb	r1, r1
 8026a9c:	9111      	str	r1, [sp, #68]	; 0x44
 8026a9e:	f1bc 0f00 	cmp.w	ip, #0
 8026aa2:	d019      	beq.n	8026ad8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026aa4:	4453      	add	r3, sl
 8026aa6:	0859      	lsrs	r1, r3, #1
 8026aa8:	f013 0f01 	tst.w	r3, #1
 8026aac:	f103 0301 	add.w	r3, r3, #1
 8026ab0:	5c79      	ldrb	r1, [r7, r1]
 8026ab2:	bf0c      	ite	eq
 8026ab4:	f001 010f 	andeq.w	r1, r1, #15
 8026ab8:	1109      	asrne	r1, r1, #4
 8026aba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026abe:	b2c9      	uxtb	r1, r1
 8026ac0:	910d      	str	r1, [sp, #52]	; 0x34
 8026ac2:	0859      	lsrs	r1, r3, #1
 8026ac4:	07db      	lsls	r3, r3, #31
 8026ac6:	5c79      	ldrb	r1, [r7, r1]
 8026ac8:	bf54      	ite	pl
 8026aca:	f001 010f 	andpl.w	r1, r1, #15
 8026ace:	1109      	asrmi	r1, r1, #4
 8026ad0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026ad4:	b2c9      	uxtb	r1, r1
 8026ad6:	9112      	str	r1, [sp, #72]	; 0x48
 8026ad8:	b280      	uxth	r0, r0
 8026ada:	fa1f fc8c 	uxth.w	ip, ip
 8026ade:	fb00 f30c 	mul.w	r3, r0, ip
 8026ae2:	0100      	lsls	r0, r0, #4
 8026ae4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8026ae8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8026aec:	1ac0      	subs	r0, r0, r3
 8026aee:	fa1f fc8c 	uxth.w	ip, ip
 8026af2:	b280      	uxth	r0, r0
 8026af4:	eba1 010c 	sub.w	r1, r1, ip
 8026af8:	fa1f fb81 	uxth.w	fp, r1
 8026afc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026afe:	4348      	muls	r0, r1
 8026b00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026b02:	fb02 020b 	mla	r2, r2, fp, r0
 8026b06:	fb0c 2c01 	mla	ip, ip, r1, r2
 8026b0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026b0c:	fb03 c302 	mla	r3, r3, r2, ip
 8026b10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b14:	b3ab      	cbz	r3, 8026b82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026b16:	4a2d      	ldr	r2, [pc, #180]	; (8026bcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8026b18:	2bff      	cmp	r3, #255	; 0xff
 8026b1a:	6811      	ldr	r1, [r2, #0]
 8026b1c:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8026b20:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8026b24:	b2c9      	uxtb	r1, r1
 8026b26:	d045      	beq.n	8026bb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8026b28:	b298      	uxth	r0, r3
 8026b2a:	43db      	mvns	r3, r3
 8026b2c:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8026b30:	fb11 f100 	smulbb	r1, r1, r0
 8026b34:	b2db      	uxtb	r3, r3
 8026b36:	fb1c fc00 	smulbb	ip, ip, r0
 8026b3a:	fb02 1103 	mla	r1, r2, r3, r1
 8026b3e:	fb1b f000 	smulbb	r0, fp, r0
 8026b42:	b289      	uxth	r1, r1
 8026b44:	1c4a      	adds	r2, r1, #1
 8026b46:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026b4a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026b4e:	fb02 cc03 	mla	ip, r2, r3, ip
 8026b52:	1209      	asrs	r1, r1, #8
 8026b54:	fa1f fc8c 	uxth.w	ip, ip
 8026b58:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026b5c:	f10c 0201 	add.w	r2, ip, #1
 8026b60:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8026b64:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8026b68:	fb02 0303 	mla	r3, r2, r3, r0
 8026b6c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026b70:	b29b      	uxth	r3, r3
 8026b72:	f80e cc02 	strb.w	ip, [lr, #-2]
 8026b76:	1c5a      	adds	r2, r3, #1
 8026b78:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026b7c:	121b      	asrs	r3, r3, #8
 8026b7e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8026b82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026b84:	f10e 0e03 	add.w	lr, lr, #3
 8026b88:	f109 39ff 	add.w	r9, r9, #4294967295
 8026b8c:	441d      	add	r5, r3
 8026b8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026b90:	441e      	add	r6, r3
 8026b92:	e607      	b.n	80267a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8026b94:	f1bc 0f00 	cmp.w	ip, #0
 8026b98:	d09e      	beq.n	8026ad8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026b9a:	4453      	add	r3, sl
 8026b9c:	0859      	lsrs	r1, r3, #1
 8026b9e:	07db      	lsls	r3, r3, #31
 8026ba0:	5c79      	ldrb	r1, [r7, r1]
 8026ba2:	bf54      	ite	pl
 8026ba4:	f001 010f 	andpl.w	r1, r1, #15
 8026ba8:	1109      	asrmi	r1, r1, #4
 8026baa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026bae:	b2c9      	uxtb	r1, r1
 8026bb0:	910d      	str	r1, [sp, #52]	; 0x34
 8026bb2:	e791      	b.n	8026ad8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026bb4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026bb8:	f80e cc02 	strb.w	ip, [lr, #-2]
 8026bbc:	f80e bc01 	strb.w	fp, [lr, #-1]
 8026bc0:	e7df      	b.n	8026b82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026bc2:	b015      	add	sp, #84	; 0x54
 8026bc4:	ecbd 8b08 	vpop	{d8-d11}
 8026bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bcc:	2000bf18 	.word	0x2000bf18

08026bd0 <CRC_Lock>:
 8026bd0:	4a1d      	ldr	r2, [pc, #116]	; (8026c48 <CRC_Lock+0x78>)
 8026bd2:	b530      	push	{r4, r5, lr}
 8026bd4:	6813      	ldr	r3, [r2, #0]
 8026bd6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8026bda:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026bde:	f023 0301 	bic.w	r3, r3, #1
 8026be2:	6013      	str	r3, [r2, #0]
 8026be4:	4b19      	ldr	r3, [pc, #100]	; (8026c4c <CRC_Lock+0x7c>)
 8026be6:	681a      	ldr	r2, [r3, #0]
 8026be8:	4022      	ands	r2, r4
 8026bea:	42aa      	cmp	r2, r5
 8026bec:	d005      	beq.n	8026bfa <CRC_Lock+0x2a>
 8026bee:	681b      	ldr	r3, [r3, #0]
 8026bf0:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026bf4:	4023      	ands	r3, r4
 8026bf6:	4293      	cmp	r3, r2
 8026bf8:	d11d      	bne.n	8026c36 <CRC_Lock+0x66>
 8026bfa:	4b15      	ldr	r3, [pc, #84]	; (8026c50 <CRC_Lock+0x80>)
 8026bfc:	681b      	ldr	r3, [r3, #0]
 8026bfe:	b9d3      	cbnz	r3, 8026c36 <CRC_Lock+0x66>
 8026c00:	4a14      	ldr	r2, [pc, #80]	; (8026c54 <CRC_Lock+0x84>)
 8026c02:	6813      	ldr	r3, [r2, #0]
 8026c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026c08:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8026c0c:	d006      	beq.n	8026c1c <CRC_Lock+0x4c>
 8026c0e:	6813      	ldr	r3, [r2, #0]
 8026c10:	f240 4283 	movw	r2, #1155	; 0x483
 8026c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026c18:	4293      	cmp	r3, r2
 8026c1a:	d10c      	bne.n	8026c36 <CRC_Lock+0x66>
 8026c1c:	4b0e      	ldr	r3, [pc, #56]	; (8026c58 <CRC_Lock+0x88>)
 8026c1e:	2201      	movs	r2, #1
 8026c20:	601a      	str	r2, [r3, #0]
 8026c22:	681a      	ldr	r2, [r3, #0]
 8026c24:	2a00      	cmp	r2, #0
 8026c26:	d1fc      	bne.n	8026c22 <CRC_Lock+0x52>
 8026c28:	4b0c      	ldr	r3, [pc, #48]	; (8026c5c <CRC_Lock+0x8c>)
 8026c2a:	6018      	str	r0, [r3, #0]
 8026c2c:	6818      	ldr	r0, [r3, #0]
 8026c2e:	1a43      	subs	r3, r0, r1
 8026c30:	4258      	negs	r0, r3
 8026c32:	4158      	adcs	r0, r3
 8026c34:	bd30      	pop	{r4, r5, pc}
 8026c36:	4b0a      	ldr	r3, [pc, #40]	; (8026c60 <CRC_Lock+0x90>)
 8026c38:	2201      	movs	r2, #1
 8026c3a:	601a      	str	r2, [r3, #0]
 8026c3c:	681a      	ldr	r2, [r3, #0]
 8026c3e:	2a00      	cmp	r2, #0
 8026c40:	d1fc      	bne.n	8026c3c <CRC_Lock+0x6c>
 8026c42:	4b08      	ldr	r3, [pc, #32]	; (8026c64 <CRC_Lock+0x94>)
 8026c44:	e7f1      	b.n	8026c2a <CRC_Lock+0x5a>
 8026c46:	bf00      	nop
 8026c48:	e0002000 	.word	0xe0002000
 8026c4c:	e000ed00 	.word	0xe000ed00
 8026c50:	e0042000 	.word	0xe0042000
 8026c54:	5c001000 	.word	0x5c001000
 8026c58:	58024c08 	.word	0x58024c08
 8026c5c:	58024c00 	.word	0x58024c00
 8026c60:	40023008 	.word	0x40023008
 8026c64:	40023000 	.word	0x40023000

08026c68 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026c68:	6101      	str	r1, [r0, #16]
 8026c6a:	4770      	bx	lr

08026c6c <_ZN8touchgfx8Gestures4tickEv>:
 8026c6c:	7b83      	ldrb	r3, [r0, #14]
 8026c6e:	b14b      	cbz	r3, 8026c84 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026c70:	8903      	ldrh	r3, [r0, #8]
 8026c72:	3301      	adds	r3, #1
 8026c74:	b29b      	uxth	r3, r3
 8026c76:	2b07      	cmp	r3, #7
 8026c78:	8103      	strh	r3, [r0, #8]
 8026c7a:	bf81      	itttt	hi
 8026c7c:	2300      	movhi	r3, #0
 8026c7e:	8143      	strhhi	r3, [r0, #10]
 8026c80:	8183      	strhhi	r3, [r0, #12]
 8026c82:	7383      	strbhi	r3, [r0, #14]
 8026c84:	4770      	bx	lr
	...

08026c88 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026c88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026c8c:	4604      	mov	r4, r0
 8026c8e:	4698      	mov	r8, r3
 8026c90:	8880      	ldrh	r0, [r0, #4]
 8026c92:	4617      	mov	r7, r2
 8026c94:	4b1d      	ldr	r3, [pc, #116]	; (8026d0c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8026c96:	460e      	mov	r6, r1
 8026c98:	f8ad 0006 	strh.w	r0, [sp, #6]
 8026c9c:	eba8 0000 	sub.w	r0, r8, r0
 8026ca0:	9300      	str	r3, [sp, #0]
 8026ca2:	2300      	movs	r3, #0
 8026ca4:	b280      	uxth	r0, r0
 8026ca6:	8aa2      	ldrh	r2, [r4, #20]
 8026ca8:	f88d 3004 	strb.w	r3, [sp, #4]
 8026cac:	b203      	sxth	r3, r0
 8026cae:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026cb2:	88e1      	ldrh	r1, [r4, #6]
 8026cb4:	2b00      	cmp	r3, #0
 8026cb6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026cba:	f8ad 1008 	strh.w	r1, [sp, #8]
 8026cbe:	bfb8      	it	lt
 8026cc0:	4240      	neglt	r0, r0
 8026cc2:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026cc6:	bfb8      	it	lt
 8026cc8:	b203      	sxthlt	r3, r0
 8026cca:	4293      	cmp	r3, r2
 8026ccc:	dc08      	bgt.n	8026ce0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8026cce:	1a69      	subs	r1, r5, r1
 8026cd0:	b289      	uxth	r1, r1
 8026cd2:	b20b      	sxth	r3, r1
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	bfbc      	itt	lt
 8026cd8:	4249      	neglt	r1, r1
 8026cda:	b20b      	sxthlt	r3, r1
 8026cdc:	429a      	cmp	r2, r3
 8026cde:	da13      	bge.n	8026d08 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8026ce0:	6920      	ldr	r0, [r4, #16]
 8026ce2:	4669      	mov	r1, sp
 8026ce4:	eba8 0606 	sub.w	r6, r8, r6
 8026ce8:	1bef      	subs	r7, r5, r7
 8026cea:	6803      	ldr	r3, [r0, #0]
 8026cec:	685b      	ldr	r3, [r3, #4]
 8026cee:	4798      	blx	r3
 8026cf0:	2300      	movs	r3, #0
 8026cf2:	2001      	movs	r0, #1
 8026cf4:	8166      	strh	r6, [r4, #10]
 8026cf6:	8123      	strh	r3, [r4, #8]
 8026cf8:	81a7      	strh	r7, [r4, #12]
 8026cfa:	f8a4 8004 	strh.w	r8, [r4, #4]
 8026cfe:	80e5      	strh	r5, [r4, #6]
 8026d00:	73a0      	strb	r0, [r4, #14]
 8026d02:	b004      	add	sp, #16
 8026d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026d08:	2000      	movs	r0, #0
 8026d0a:	e7fa      	b.n	8026d02 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8026d0c:	0802caa4 	.word	0x0802caa4

08026d10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026d12:	461e      	mov	r6, r3
 8026d14:	1e4b      	subs	r3, r1, #1
 8026d16:	b085      	sub	sp, #20
 8026d18:	4604      	mov	r4, r0
 8026d1a:	2b01      	cmp	r3, #1
 8026d1c:	460d      	mov	r5, r1
 8026d1e:	4617      	mov	r7, r2
 8026d20:	d84b      	bhi.n	8026dba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026d22:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8026d26:	1cd3      	adds	r3, r2, #3
 8026d28:	b29b      	uxth	r3, r3
 8026d2a:	2b06      	cmp	r3, #6
 8026d2c:	d916      	bls.n	8026d5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026d2e:	f8df c098 	ldr.w	ip, [pc, #152]	; 8026dc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026d32:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026d36:	f8cd c004 	str.w	ip, [sp, #4]
 8026d3a:	f04f 0c00 	mov.w	ip, #0
 8026d3e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026d42:	6900      	ldr	r0, [r0, #16]
 8026d44:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026d48:	a901      	add	r1, sp, #4
 8026d4a:	f88d c008 	strb.w	ip, [sp, #8]
 8026d4e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026d52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026d56:	6803      	ldr	r3, [r0, #0]
 8026d58:	689b      	ldr	r3, [r3, #8]
 8026d5a:	4798      	blx	r3
 8026d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026d60:	1cd3      	adds	r3, r2, #3
 8026d62:	b29b      	uxth	r3, r3
 8026d64:	2b06      	cmp	r3, #6
 8026d66:	d916      	bls.n	8026d96 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026d68:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8026dc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026d6c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026d70:	f8cd c004 	str.w	ip, [sp, #4]
 8026d74:	f04f 0c01 	mov.w	ip, #1
 8026d78:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026d7c:	6920      	ldr	r0, [r4, #16]
 8026d7e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026d82:	a901      	add	r1, sp, #4
 8026d84:	f88d c008 	strb.w	ip, [sp, #8]
 8026d88:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026d8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026d90:	6803      	ldr	r3, [r0, #0]
 8026d92:	689b      	ldr	r3, [r3, #8]
 8026d94:	4798      	blx	r3
 8026d96:	4b0b      	ldr	r3, [pc, #44]	; (8026dc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8026d98:	a901      	add	r1, sp, #4
 8026d9a:	6920      	ldr	r0, [r4, #16]
 8026d9c:	9301      	str	r3, [sp, #4]
 8026d9e:	2300      	movs	r3, #0
 8026da0:	f88d 5008 	strb.w	r5, [sp, #8]
 8026da4:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026da8:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026dac:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026db0:	6803      	ldr	r3, [r0, #0]
 8026db2:	681b      	ldr	r3, [r3, #0]
 8026db4:	4798      	blx	r3
 8026db6:	b005      	add	sp, #20
 8026db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026dba:	2900      	cmp	r1, #0
 8026dbc:	d1eb      	bne.n	8026d96 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026dbe:	80a2      	strh	r2, [r4, #4]
 8026dc0:	80c6      	strh	r6, [r0, #6]
 8026dc2:	e7e8      	b.n	8026d96 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026dc4:	0802ca90 	.word	0x0802ca90
 8026dc8:	0802cab8 	.word	0x0802cab8

08026dcc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8026dcc:	10c9      	asrs	r1, r1, #3
 8026dce:	2900      	cmp	r1, #0
 8026dd0:	bfb8      	it	lt
 8026dd2:	4249      	neglt	r1, r1
 8026dd4:	2801      	cmp	r0, #1
 8026dd6:	d108      	bne.n	8026dea <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8026dd8:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8026ddc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8026de0:	4601      	mov	r1, r0
 8026de2:	dd02      	ble.n	8026dea <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8026de4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8026de8:	4770      	bx	lr
 8026dea:	29ff      	cmp	r1, #255	; 0xff
 8026dec:	bfa8      	it	ge
 8026dee:	21ff      	movge	r1, #255	; 0xff
 8026df0:	4608      	mov	r0, r1
 8026df2:	4770      	bx	lr

08026df4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8026df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026df8:	688c      	ldr	r4, [r1, #8]
 8026dfa:	b087      	sub	sp, #28
 8026dfc:	4607      	mov	r7, r0
 8026dfe:	2c00      	cmp	r4, #0
 8026e00:	db2b      	blt.n	8026e5a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026e02:	6803      	ldr	r3, [r0, #0]
 8026e04:	68da      	ldr	r2, [r3, #12]
 8026e06:	42a2      	cmp	r2, r4
 8026e08:	dd27      	ble.n	8026e5a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026e0a:	681a      	ldr	r2, [r3, #0]
 8026e0c:	691e      	ldr	r6, [r3, #16]
 8026e0e:	68cd      	ldr	r5, [r1, #12]
 8026e10:	fb06 2604 	mla	r6, r6, r4, r2
 8026e14:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8026e18:	698a      	ldr	r2, [r1, #24]
 8026e1a:	f893 a004 	ldrb.w	sl, [r3, #4]
 8026e1e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8026e22:	9205      	str	r2, [sp, #20]
 8026e24:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8026e28:	9b05      	ldr	r3, [sp, #20]
 8026e2a:	6839      	ldr	r1, [r7, #0]
 8026e2c:	eb03 0c02 	add.w	ip, r3, r2
 8026e30:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8026e34:	6889      	ldr	r1, [r1, #8]
 8026e36:	1898      	adds	r0, r3, r2
 8026e38:	4288      	cmp	r0, r1
 8026e3a:	db02      	blt.n	8026e42 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8026e3c:	1a8b      	subs	r3, r1, r2
 8026e3e:	2b00      	cmp	r3, #0
 8026e40:	dd09      	ble.n	8026e56 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8026e42:	6878      	ldr	r0, [r7, #4]
 8026e44:	6801      	ldr	r1, [r0, #0]
 8026e46:	9400      	str	r4, [sp, #0]
 8026e48:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8026e4c:	4653      	mov	r3, sl
 8026e4e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8026e52:	4631      	mov	r1, r6
 8026e54:	47d8      	blx	fp
 8026e56:	3d01      	subs	r5, #1
 8026e58:	d1e4      	bne.n	8026e24 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8026e5a:	b007      	add	sp, #28
 8026e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026e60 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8026e60:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8026e64:	b90b      	cbnz	r3, 8026e6a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8026e66:	f001 b974 	b.w	8028152 <_ZN8touchgfx7Outline6lineToEii>
 8026e6a:	4770      	bx	lr

08026e6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8026e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e70:	4604      	mov	r4, r0
 8026e72:	2600      	movs	r6, #0
 8026e74:	4b8e      	ldr	r3, [pc, #568]	; (80270b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8026e76:	f100 0518 	add.w	r5, r0, #24
 8026e7a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8026e7e:	b086      	sub	sp, #24
 8026e80:	4690      	mov	r8, r2
 8026e82:	e9c0 3100 	strd	r3, r1, [r0]
 8026e86:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8026e8a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8026e8e:	4628      	mov	r0, r5
 8026e90:	f001 fb75 	bl	802857e <_ZN8touchgfx15RenderingBufferC1Ev>
 8026e94:	4638      	mov	r0, r7
 8026e96:	f000 fb45 	bl	8027524 <_ZN8touchgfx7OutlineC1Ev>
 8026e9a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8026e9e:	f001 fb23 	bl	80284e8 <_ZN8touchgfx8ScanlineC1Ev>
 8026ea2:	2301      	movs	r3, #1
 8026ea4:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8026ea8:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8026eac:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026eb0:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8026eb4:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8026eb8:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8026ebc:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8026ec0:	f7f4 fbac 	bl	801b61c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8026ec4:	b928      	cbnz	r0, 8026ed2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8026ec6:	4b7b      	ldr	r3, [pc, #492]	; (80270b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8026ec8:	2118      	movs	r1, #24
 8026eca:	4a7b      	ldr	r2, [pc, #492]	; (80270b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026ecc:	487b      	ldr	r0, [pc, #492]	; (80270bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8026ece:	f001 fb99 	bl	8028604 <__assert_func>
 8026ed2:	f9b8 2000 	ldrsh.w	r2, [r8]
 8026ed6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8026eda:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8026ede:	4410      	add	r0, r2
 8026ee0:	9602      	str	r6, [sp, #8]
 8026ee2:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8026ee6:	b280      	uxth	r0, r0
 8026ee8:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8026eec:	fa0f fa80 	sxth.w	sl, r0
 8026ef0:	f1ba 0f00 	cmp.w	sl, #0
 8026ef4:	dd70      	ble.n	8026fd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026ef6:	4591      	cmp	r9, r2
 8026ef8:	dd6e      	ble.n	8026fd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026efa:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8026efe:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8026f02:	440b      	add	r3, r1
 8026f04:	b29b      	uxth	r3, r3
 8026f06:	b21e      	sxth	r6, r3
 8026f08:	2e00      	cmp	r6, #0
 8026f0a:	dd65      	ble.n	8026fd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026f0c:	458e      	cmp	lr, r1
 8026f0e:	dd63      	ble.n	8026fd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026f10:	45d1      	cmp	r9, sl
 8026f12:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8026f16:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026f1a:	bfb8      	it	lt
 8026f1c:	fa1f f089 	uxthlt.w	r0, r9
 8026f20:	45b6      	cmp	lr, r6
 8026f22:	f8ad 2008 	strh.w	r2, [sp, #8]
 8026f26:	bfb8      	it	lt
 8026f28:	fa1f f38e 	uxthlt.w	r3, lr
 8026f2c:	1a80      	subs	r0, r0, r2
 8026f2e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8026f32:	1a5b      	subs	r3, r3, r1
 8026f34:	f8ad 000c 	strh.w	r0, [sp, #12]
 8026f38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026f3c:	f10d 0808 	add.w	r8, sp, #8
 8026f40:	ae04      	add	r6, sp, #16
 8026f42:	e898 0003 	ldmia.w	r8, {r0, r1}
 8026f46:	e886 0003 	stmia.w	r6, {r0, r1}
 8026f4a:	f8dc 3000 	ldr.w	r3, [ip]
 8026f4e:	4660      	mov	r0, ip
 8026f50:	4631      	mov	r1, r6
 8026f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f54:	4798      	blx	r3
 8026f56:	6861      	ldr	r1, [r4, #4]
 8026f58:	4640      	mov	r0, r8
 8026f5a:	3104      	adds	r1, #4
 8026f5c:	f7f5 f9cc 	bl	801c2f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026f60:	4630      	mov	r0, r6
 8026f62:	f7f5 f9e1 	bl	801c328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026f66:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8026f6a:	f7f4 fae7 	bl	801b53c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8026f6e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8026f72:	4638      	mov	r0, r7
 8026f74:	f000 fab2 	bl	80274dc <_ZN8touchgfx7Outline5resetEv>
 8026f78:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8026f7c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8026f80:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8026f84:	015b      	lsls	r3, r3, #5
 8026f86:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8026f8a:	0152      	lsls	r2, r2, #5
 8026f8c:	60e3      	str	r3, [r4, #12]
 8026f8e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8026f92:	60a2      	str	r2, [r4, #8]
 8026f94:	015b      	lsls	r3, r3, #5
 8026f96:	6123      	str	r3, [r4, #16]
 8026f98:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8026f9c:	015b      	lsls	r3, r3, #5
 8026f9e:	6163      	str	r3, [r4, #20]
 8026fa0:	4b47      	ldr	r3, [pc, #284]	; (80270c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8026fa2:	6818      	ldr	r0, [r3, #0]
 8026fa4:	6803      	ldr	r3, [r0, #0]
 8026fa6:	6a1b      	ldr	r3, [r3, #32]
 8026fa8:	4798      	blx	r3
 8026faa:	4606      	mov	r6, r0
 8026fac:	f7e9 ff10 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8026fb0:	6803      	ldr	r3, [r0, #0]
 8026fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026fb4:	4798      	blx	r3
 8026fb6:	4607      	mov	r7, r0
 8026fb8:	f7e9 ff0a 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8026fbc:	6803      	ldr	r3, [r0, #0]
 8026fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026fc0:	4798      	blx	r3
 8026fc2:	280c      	cmp	r0, #12
 8026fc4:	d854      	bhi.n	8027070 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8026fc6:	e8df f000 	tbb	[pc, r0]
 8026fca:	554b      	.short	0x554b
 8026fcc:	2b6e0a66 	.word	0x2b6e0a66
 8026fd0:	5f5f5f3b 	.word	0x5f5f5f3b
 8026fd4:	5f5f      	.short	0x5f5f
 8026fd6:	6e          	.byte	0x6e
 8026fd7:	00          	.byte	0x00
 8026fd8:	2300      	movs	r3, #0
 8026fda:	9303      	str	r3, [sp, #12]
 8026fdc:	e7ae      	b.n	8026f3c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8026fde:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026fe2:	2108      	movs	r1, #8
 8026fe4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026fe8:	fb92 f1f1 	sdiv	r1, r2, r1
 8026fec:	fb07 1303 	mla	r3, r7, r3, r1
 8026ff0:	441e      	add	r6, r3
 8026ff2:	4253      	negs	r3, r2
 8026ff4:	f002 0207 	and.w	r2, r2, #7
 8026ff8:	f003 0307 	and.w	r3, r3, #7
 8026ffc:	bf58      	it	pl
 8026ffe:	425a      	negpl	r2, r3
 8027000:	b2d2      	uxtb	r2, r2
 8027002:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8027006:	4628      	mov	r0, r5
 8027008:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802700c:	66e1      	str	r1, [r4, #108]	; 0x6c
 802700e:	e9cd 1700 	strd	r1, r7, [sp]
 8027012:	4631      	mov	r1, r6
 8027014:	f001 fabb 	bl	802858e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8027018:	4620      	mov	r0, r4
 802701a:	b006      	add	sp, #24
 802701c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027020:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8027024:	2104      	movs	r1, #4
 8027026:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802702a:	fb92 f1f1 	sdiv	r1, r2, r1
 802702e:	fb07 1303 	mla	r3, r7, r3, r1
 8027032:	441e      	add	r6, r3
 8027034:	4253      	negs	r3, r2
 8027036:	f002 0203 	and.w	r2, r2, #3
 802703a:	f003 0303 	and.w	r3, r3, #3
 802703e:	e7dd      	b.n	8026ffc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8027040:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8027044:	2102      	movs	r1, #2
 8027046:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802704a:	2a00      	cmp	r2, #0
 802704c:	fb92 f1f1 	sdiv	r1, r2, r1
 8027050:	f002 0201 	and.w	r2, r2, #1
 8027054:	fb07 1303 	mla	r3, r7, r3, r1
 8027058:	bfb8      	it	lt
 802705a:	4252      	neglt	r2, r2
 802705c:	441e      	add	r6, r3
 802705e:	e7cf      	b.n	8027000 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8027060:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8027064:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8027068:	437b      	muls	r3, r7
 802706a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802706e:	441e      	add	r6, r3
 8027070:	2200      	movs	r2, #0
 8027072:	e7c6      	b.n	8027002 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8027074:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8027078:	2103      	movs	r1, #3
 802707a:	fb07 f203 	mul.w	r2, r7, r3
 802707e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8027082:	fb13 2301 	smlabb	r3, r3, r1, r2
 8027086:	e7f2      	b.n	802706e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8027088:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802708c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8027090:	fb07 2303 	mla	r3, r7, r3, r2
 8027094:	e7eb      	b.n	802706e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8027096:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802709a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802709e:	437b      	muls	r3, r7
 80270a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80270a4:	e7e3      	b.n	802706e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80270a6:	4b07      	ldr	r3, [pc, #28]	; (80270c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80270a8:	2156      	movs	r1, #86	; 0x56
 80270aa:	4a03      	ldr	r2, [pc, #12]	; (80270b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80270ac:	e70e      	b.n	8026ecc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80270ae:	bf00      	nop
 80270b0:	0802e124 	.word	0x0802e124
 80270b4:	0802e06e 	.word	0x0802e06e
 80270b8:	0802e12c 	.word	0x0802e12c
 80270bc:	0802e0ca 	.word	0x0802e0ca
 80270c0:	2000bef0 	.word	0x2000bef0
 80270c4:	0802e0fe 	.word	0x0802e0fe

080270c8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80270c8:	6812      	ldr	r2, [r2, #0]
 80270ca:	2a00      	cmp	r2, #0
 80270cc:	db0b      	blt.n	80270e6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80270ce:	9800      	ldr	r0, [sp, #0]
 80270d0:	6800      	ldr	r0, [r0, #0]
 80270d2:	4290      	cmp	r0, r2
 80270d4:	bfd4      	ite	le
 80270d6:	2002      	movle	r0, #2
 80270d8:	2000      	movgt	r0, #0
 80270da:	680a      	ldr	r2, [r1, #0]
 80270dc:	2a00      	cmp	r2, #0
 80270de:	da04      	bge.n	80270ea <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80270e0:	f040 0004 	orr.w	r0, r0, #4
 80270e4:	4770      	bx	lr
 80270e6:	2001      	movs	r0, #1
 80270e8:	e7f7      	b.n	80270da <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80270ea:	681b      	ldr	r3, [r3, #0]
 80270ec:	4293      	cmp	r3, r2
 80270ee:	bfd8      	it	le
 80270f0:	f040 0008 	orrle.w	r0, r0, #8
 80270f4:	4770      	bx	lr
	...

080270f8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80270f8:	4b07      	ldr	r3, [pc, #28]	; (8027118 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80270fa:	b510      	push	{r4, lr}
 80270fc:	781b      	ldrb	r3, [r3, #0]
 80270fe:	2b01      	cmp	r3, #1
 8027100:	d108      	bne.n	8027114 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8027102:	6843      	ldr	r3, [r0, #4]
 8027104:	6814      	ldr	r4, [r2, #0]
 8027106:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802710a:	680b      	ldr	r3, [r1, #0]
 802710c:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8027110:	6013      	str	r3, [r2, #0]
 8027112:	600c      	str	r4, [r1, #0]
 8027114:	bd10      	pop	{r4, pc}
 8027116:	bf00      	nop
 8027118:	2000bee6 	.word	0x2000bee6

0802711c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802711e:	b085      	sub	sp, #20
 8027120:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8027124:	4604      	mov	r4, r0
 8027126:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802712a:	b33b      	cbz	r3, 802717c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 802712c:	aa02      	add	r2, sp, #8
 802712e:	a903      	add	r1, sp, #12
 8027130:	f7ff ffe2 	bl	80270f8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8027134:	68a3      	ldr	r3, [r4, #8]
 8027136:	9e03      	ldr	r6, [sp, #12]
 8027138:	aa02      	add	r2, sp, #8
 802713a:	9f02      	ldr	r7, [sp, #8]
 802713c:	a903      	add	r1, sp, #12
 802713e:	1af6      	subs	r6, r6, r3
 8027140:	68e3      	ldr	r3, [r4, #12]
 8027142:	4620      	mov	r0, r4
 8027144:	1aff      	subs	r7, r7, r3
 8027146:	f104 0314 	add.w	r3, r4, #20
 802714a:	9603      	str	r6, [sp, #12]
 802714c:	9300      	str	r3, [sp, #0]
 802714e:	f104 0310 	add.w	r3, r4, #16
 8027152:	9702      	str	r7, [sp, #8]
 8027154:	f7ff ffb8 	bl	80270c8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8027158:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 802715c:	4605      	mov	r5, r0
 802715e:	b97b      	cbnz	r3, 8027180 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8027160:	463a      	mov	r2, r7
 8027162:	4631      	mov	r1, r6
 8027164:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8027168:	f7ff fe7a 	bl	8026e60 <_ZN8touchgfx10Rasterizer6lineToEii>
 802716c:	9b03      	ldr	r3, [sp, #12]
 802716e:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8027172:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8027176:	9b02      	ldr	r3, [sp, #8]
 8027178:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802717c:	b005      	add	sp, #20
 802717e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027180:	b110      	cbz	r0, 8027188 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8027182:	ea13 0200 	ands.w	r2, r3, r0
 8027186:	d11c      	bne.n	80271c2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8027188:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 802718c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8027190:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8027194:	b188      	cbz	r0, 80271ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8027196:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 802719a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802719e:	b913      	cbnz	r3, 80271a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80271a0:	4630      	mov	r0, r6
 80271a2:	f001 f806 	bl	80281b2 <_ZN8touchgfx7Outline6moveToEii>
 80271a6:	2300      	movs	r3, #0
 80271a8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80271ac:	2301      	movs	r3, #1
 80271ae:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80271b2:	4630      	mov	r0, r6
 80271b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80271b8:	e7d6      	b.n	8027168 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80271ba:	4630      	mov	r0, r6
 80271bc:	f7ff fe50 	bl	8026e60 <_ZN8touchgfx10Rasterizer6lineToEii>
 80271c0:	e7f7      	b.n	80271b2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80271c2:	4615      	mov	r5, r2
 80271c4:	e7d2      	b.n	802716c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080271c6 <_ZN8touchgfx6Canvas5closeEv>:
 80271c6:	b538      	push	{r3, r4, r5, lr}
 80271c8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80271cc:	4604      	mov	r4, r0
 80271ce:	b993      	cbnz	r3, 80271f6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80271d0:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80271d4:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80271d8:	4213      	tst	r3, r2
 80271da:	d10c      	bne.n	80271f6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80271dc:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80271e0:	b123      	cbz	r3, 80271ec <_ZN8touchgfx6Canvas5closeEv+0x26>
 80271e2:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80271e6:	4628      	mov	r0, r5
 80271e8:	f7ff fe3a 	bl	8026e60 <_ZN8touchgfx10Rasterizer6lineToEii>
 80271ec:	4628      	mov	r0, r5
 80271ee:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80271f2:	f7ff fe35 	bl	8026e60 <_ZN8touchgfx10Rasterizer6lineToEii>
 80271f6:	2300      	movs	r3, #0
 80271f8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80271fc:	bd38      	pop	{r3, r4, r5, pc}

080271fe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80271fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027200:	b085      	sub	sp, #20
 8027202:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8027206:	4604      	mov	r4, r0
 8027208:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802720c:	b353      	cbz	r3, 8027264 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802720e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8027212:	b90b      	cbnz	r3, 8027218 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8027214:	f7ff ffd7 	bl	80271c6 <_ZN8touchgfx6Canvas5closeEv>
 8027218:	aa02      	add	r2, sp, #8
 802721a:	a903      	add	r1, sp, #12
 802721c:	4620      	mov	r0, r4
 802721e:	f7ff ff6b 	bl	80270f8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8027222:	68a3      	ldr	r3, [r4, #8]
 8027224:	9d03      	ldr	r5, [sp, #12]
 8027226:	aa02      	add	r2, sp, #8
 8027228:	9e02      	ldr	r6, [sp, #8]
 802722a:	a903      	add	r1, sp, #12
 802722c:	1aed      	subs	r5, r5, r3
 802722e:	68e3      	ldr	r3, [r4, #12]
 8027230:	4620      	mov	r0, r4
 8027232:	1af6      	subs	r6, r6, r3
 8027234:	f104 0314 	add.w	r3, r4, #20
 8027238:	9503      	str	r5, [sp, #12]
 802723a:	9300      	str	r3, [sp, #0]
 802723c:	f104 0310 	add.w	r3, r4, #16
 8027240:	9602      	str	r6, [sp, #8]
 8027242:	f7ff ff41 	bl	80270c8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8027246:	4607      	mov	r7, r0
 8027248:	b170      	cbz	r0, 8027268 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802724a:	2301      	movs	r3, #1
 802724c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8027250:	9a03      	ldr	r2, [sp, #12]
 8027252:	9b02      	ldr	r3, [sp, #8]
 8027254:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8027258:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 802725c:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8027260:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8027264:	b005      	add	sp, #20
 8027266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027268:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802726c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8027270:	b92b      	cbnz	r3, 802727e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8027272:	4632      	mov	r2, r6
 8027274:	4629      	mov	r1, r5
 8027276:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802727a:	f000 ff9a 	bl	80281b2 <_ZN8touchgfx7Outline6moveToEii>
 802727e:	2300      	movs	r3, #0
 8027280:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8027284:	2301      	movs	r3, #1
 8027286:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802728a:	e7e1      	b.n	8027250 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802728c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027290:	4604      	mov	r4, r0
 8027292:	b087      	sub	sp, #28
 8027294:	9105      	str	r1, [sp, #20]
 8027296:	f001 f8d0 	bl	802843a <_ZN8touchgfx7Outline8getCellsEv>
 802729a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802729e:	4605      	mov	r5, r0
 80272a0:	f1b9 0f00 	cmp.w	r9, #0
 80272a4:	d103      	bne.n	80272ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80272a6:	2001      	movs	r0, #1
 80272a8:	b007      	add	sp, #28
 80272aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272ae:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80272b2:	2e00      	cmp	r6, #0
 80272b4:	d139      	bne.n	802732a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80272b6:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80272ba:	f105 0708 	add.w	r7, r5, #8
 80272be:	4640      	mov	r0, r8
 80272c0:	f001 f8fd 	bl	80284be <_ZN8touchgfx8Scanline5resetEv>
 80272c4:	f109 33ff 	add.w	r3, r9, #4294967295
 80272c8:	9303      	str	r3, [sp, #12]
 80272ca:	f9b5 b000 	ldrsh.w	fp, [r5]
 80272ce:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80272d2:	46da      	mov	sl, fp
 80272d4:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80272d8:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80272dc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80272e0:	9b03      	ldr	r3, [sp, #12]
 80272e2:	4416      	add	r6, r2
 80272e4:	9504      	str	r5, [sp, #16]
 80272e6:	463d      	mov	r5, r7
 80272e8:	3b01      	subs	r3, #1
 80272ea:	9303      	str	r3, [sp, #12]
 80272ec:	3301      	adds	r3, #1
 80272ee:	d01e      	beq.n	802732e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80272f0:	3708      	adds	r7, #8
 80272f2:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80272f6:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80272fa:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80272fe:	4290      	cmp	r0, r2
 8027300:	d11e      	bne.n	8027340 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8027302:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8027306:	4411      	add	r1, r2
 8027308:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802730c:	e7e8      	b.n	80272e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802730e:	1c91      	adds	r1, r2, #2
 8027310:	f04f 0301 	mov.w	r3, #1
 8027314:	65e1      	str	r1, [r4, #92]	; 0x5c
 8027316:	8053      	strh	r3, [r2, #2]
 8027318:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802731a:	1c91      	adds	r1, r2, #2
 802731c:	65a1      	str	r1, [r4, #88]	; 0x58
 802731e:	f8a2 b002 	strh.w	fp, [r2, #2]
 8027322:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8027324:	3201      	adds	r2, #1
 8027326:	6562      	str	r2, [r4, #84]	; 0x54
 8027328:	e03a      	b.n	80273a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802732a:	2000      	movs	r0, #0
 802732c:	e7bc      	b.n	80272a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802732e:	b951      	cbnz	r1, 8027346 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8027330:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8027332:	2b00      	cmp	r3, #0
 8027334:	d0b7      	beq.n	80272a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8027336:	4641      	mov	r1, r8
 8027338:	9805      	ldr	r0, [sp, #20]
 802733a:	f7ff fd5b 	bl	8026df4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802733e:	e7b2      	b.n	80272a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8027340:	2900      	cmp	r1, #0
 8027342:	d035      	beq.n	80273b0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8027344:	9504      	str	r5, [sp, #16]
 8027346:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802734a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802734e:	f7ff fd3d 	bl	8026dcc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8027352:	4605      	mov	r5, r0
 8027354:	b330      	cbz	r0, 80273a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8027356:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8027358:	b182      	cbz	r2, 802737c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802735a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802735c:	454a      	cmp	r2, r9
 802735e:	d00d      	beq.n	802737c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8027360:	4641      	mov	r1, r8
 8027362:	9805      	ldr	r0, [sp, #20]
 8027364:	f7ff fd46 	bl	8026df4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8027368:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802736c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802736e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8027372:	65e2      	str	r2, [r4, #92]	; 0x5c
 8027374:	2300      	movs	r3, #0
 8027376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027378:	6563      	str	r3, [r4, #84]	; 0x54
 802737a:	65a2      	str	r2, [r4, #88]	; 0x58
 802737c:	f1bb 0f00 	cmp.w	fp, #0
 8027380:	db10      	blt.n	80273a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8027382:	f7f4 f959 	bl	801b638 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027386:	4583      	cmp	fp, r0
 8027388:	d20c      	bcs.n	80273a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802738a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802738c:	f802 500b 	strb.w	r5, [r2, fp]
 8027390:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8027392:	3201      	adds	r2, #1
 8027394:	455a      	cmp	r2, fp
 8027396:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8027398:	d1b9      	bne.n	802730e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802739a:	8811      	ldrh	r1, [r2, #0]
 802739c:	3101      	adds	r1, #1
 802739e:	8011      	strh	r1, [r2, #0]
 80273a0:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80273a4:	9b03      	ldr	r3, [sp, #12]
 80273a6:	3301      	adds	r3, #1
 80273a8:	d0c2      	beq.n	8027330 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80273aa:	f10b 0a01 	add.w	sl, fp, #1
 80273ae:	9d04      	ldr	r5, [sp, #16]
 80273b0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80273b4:	4553      	cmp	r3, sl
 80273b6:	dd88      	ble.n	80272ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80273b8:	01b1      	lsls	r1, r6, #6
 80273ba:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80273be:	f7ff fd05 	bl	8026dcc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80273c2:	4683      	mov	fp, r0
 80273c4:	2800      	cmp	r0, #0
 80273c6:	d080      	beq.n	80272ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80273c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80273ca:	b183      	cbz	r3, 80273ee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80273cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80273ce:	454b      	cmp	r3, r9
 80273d0:	d00d      	beq.n	80273ee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80273d2:	4641      	mov	r1, r8
 80273d4:	9805      	ldr	r0, [sp, #20]
 80273d6:	f7ff fd0d 	bl	8026df4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80273da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80273de:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80273e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80273e4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80273e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80273e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80273ea:	2300      	movs	r3, #0
 80273ec:	6563      	str	r3, [r4, #84]	; 0x54
 80273ee:	f9b5 3000 	ldrsh.w	r3, [r5]
 80273f2:	464a      	mov	r2, r9
 80273f4:	f8cd b000 	str.w	fp, [sp]
 80273f8:	4651      	mov	r1, sl
 80273fa:	eba3 030a 	sub.w	r3, r3, sl
 80273fe:	4640      	mov	r0, r8
 8027400:	f001 f884 	bl	802850c <_ZN8touchgfx8Scanline7addSpanEiijj>
 8027404:	e761      	b.n	80272ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08027406 <_ZN8touchgfx6Canvas6renderEv>:
 8027406:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027408:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802740c:	4604      	mov	r4, r0
 802740e:	b913      	cbnz	r3, 8027416 <_ZN8touchgfx6Canvas6renderEv+0x10>
 8027410:	2001      	movs	r0, #1
 8027412:	b003      	add	sp, #12
 8027414:	bd30      	pop	{r4, r5, pc}
 8027416:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 802741a:	2b00      	cmp	r3, #0
 802741c:	d131      	bne.n	8027482 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 802741e:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8027422:	2b00      	cmp	r3, #0
 8027424:	d0f4      	beq.n	8027410 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8027426:	6840      	ldr	r0, [r0, #4]
 8027428:	6803      	ldr	r3, [r0, #0]
 802742a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802742c:	4798      	blx	r3
 802742e:	2800      	cmp	r0, #0
 8027430:	d0ee      	beq.n	8027410 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8027432:	4620      	mov	r0, r4
 8027434:	f7ff fec7 	bl	80271c6 <_ZN8touchgfx6Canvas5closeEv>
 8027438:	6860      	ldr	r0, [r4, #4]
 802743a:	6803      	ldr	r3, [r0, #0]
 802743c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802743e:	4798      	blx	r3
 8027440:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8027444:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8027448:	f7f2 ff61 	bl	801a30e <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 802744c:	6860      	ldr	r0, [r4, #4]
 802744e:	6803      	ldr	r3, [r0, #0]
 8027450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8027452:	4798      	blx	r3
 8027454:	4605      	mov	r5, r0
 8027456:	6860      	ldr	r0, [r4, #4]
 8027458:	6803      	ldr	r3, [r0, #0]
 802745a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802745c:	4798      	blx	r3
 802745e:	4601      	mov	r1, r0
 8027460:	4628      	mov	r0, r5
 8027462:	f7f2 ff57 	bl	801a314 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8027466:	6860      	ldr	r0, [r4, #4]
 8027468:	6803      	ldr	r3, [r0, #0]
 802746a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802746c:	4798      	blx	r3
 802746e:	f104 0318 	add.w	r3, r4, #24
 8027472:	4669      	mov	r1, sp
 8027474:	e9cd 3000 	strd	r3, r0, [sp]
 8027478:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802747c:	f7ff ff06 	bl	802728c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8027480:	e7c7      	b.n	8027412 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8027482:	2000      	movs	r0, #0
 8027484:	e7c5      	b.n	8027412 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08027488 <_ZN8touchgfx6CanvasD1Ev>:
 8027488:	b538      	push	{r3, r4, r5, lr}
 802748a:	4605      	mov	r5, r0
 802748c:	4b08      	ldr	r3, [pc, #32]	; (80274b0 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802748e:	4604      	mov	r4, r0
 8027490:	f845 3b2c 	str.w	r3, [r5], #44
 8027494:	4b07      	ldr	r3, [pc, #28]	; (80274b4 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8027496:	6818      	ldr	r0, [r3, #0]
 8027498:	6803      	ldr	r3, [r0, #0]
 802749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802749c:	4798      	blx	r3
 802749e:	4628      	mov	r0, r5
 80274a0:	f000 f814 	bl	80274cc <_ZN8touchgfx7OutlineD1Ev>
 80274a4:	f104 0018 	add.w	r0, r4, #24
 80274a8:	f001 f870 	bl	802858c <_ZN8touchgfx15RenderingBufferD1Ev>
 80274ac:	4620      	mov	r0, r4
 80274ae:	bd38      	pop	{r3, r4, r5, pc}
 80274b0:	0802e124 	.word	0x0802e124
 80274b4:	2000bef0 	.word	0x2000bef0

080274b8 <_ZN8touchgfx6CanvasD0Ev>:
 80274b8:	b510      	push	{r4, lr}
 80274ba:	4604      	mov	r4, r0
 80274bc:	f7ff ffe4 	bl	8027488 <_ZN8touchgfx6CanvasD1Ev>
 80274c0:	21b8      	movs	r1, #184	; 0xb8
 80274c2:	4620      	mov	r0, r4
 80274c4:	f001 f870 	bl	80285a8 <_ZdlPvj>
 80274c8:	4620      	mov	r0, r4
 80274ca:	bd10      	pop	{r4, pc}

080274cc <_ZN8touchgfx7OutlineD1Ev>:
 80274cc:	4770      	bx	lr

080274ce <_ZN8touchgfx7OutlineD0Ev>:
 80274ce:	b510      	push	{r4, lr}
 80274d0:	4604      	mov	r4, r0
 80274d2:	2148      	movs	r1, #72	; 0x48
 80274d4:	f001 f868 	bl	80285a8 <_ZdlPvj>
 80274d8:	4620      	mov	r0, r4
 80274da:	bd10      	pop	{r4, pc}

080274dc <_ZN8touchgfx7Outline5resetEv>:
 80274dc:	b510      	push	{r4, lr}
 80274de:	4604      	mov	r4, r0
 80274e0:	f7f4 f8c2 	bl	801b668 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80274e4:	60e0      	str	r0, [r4, #12]
 80274e6:	f7f4 f8c5 	bl	801b674 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80274ea:	68e3      	ldr	r3, [r4, #12]
 80274ec:	2200      	movs	r2, #0
 80274ee:	08c0      	lsrs	r0, r0, #3
 80274f0:	6123      	str	r3, [r4, #16]
 80274f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80274f6:	6060      	str	r0, [r4, #4]
 80274f8:	82a3      	strh	r3, [r4, #20]
 80274fa:	82e3      	strh	r3, [r4, #22]
 80274fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80274fe:	60a2      	str	r2, [r4, #8]
 8027500:	f023 0301 	bic.w	r3, r3, #1
 8027504:	8322      	strh	r2, [r4, #24]
 8027506:	8362      	strh	r2, [r4, #26]
 8027508:	f043 0302 	orr.w	r3, r3, #2
 802750c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027510:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027512:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8027516:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802751a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802751e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8027522:	bd10      	pop	{r4, pc}

08027524 <_ZN8touchgfx7OutlineC1Ev>:
 8027524:	4b0f      	ldr	r3, [pc, #60]	; (8027564 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8027526:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802752a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802752e:	b510      	push	{r4, lr}
 8027530:	6003      	str	r3, [r0, #0]
 8027532:	2300      	movs	r3, #0
 8027534:	4604      	mov	r4, r0
 8027536:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802753a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802753e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027542:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8027546:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802754a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802754e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8027552:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8027556:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802755a:	f7ff ffbf 	bl	80274dc <_ZN8touchgfx7Outline5resetEv>
 802755e:	4620      	mov	r0, r4
 8027560:	bd10      	pop	{r4, pc}
 8027562:	bf00      	nop
 8027564:	0802e184 	.word	0x0802e184

08027568 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8027568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802756c:	b093      	sub	sp, #76	; 0x4c
 802756e:	4604      	mov	r4, r0
 8027570:	1156      	asrs	r6, r2, #5
 8027572:	f002 0e1f 	and.w	lr, r2, #31
 8027576:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027578:	9305      	str	r3, [sp, #20]
 802757a:	1143      	asrs	r3, r0, #5
 802757c:	1145      	asrs	r5, r0, #5
 802757e:	930c      	str	r3, [sp, #48]	; 0x30
 8027580:	f000 031f 	and.w	r3, r0, #31
 8027584:	9303      	str	r3, [sp, #12]
 8027586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8027588:	42b3      	cmp	r3, r6
 802758a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802758c:	bfc8      	it	gt
 802758e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8027590:	42b3      	cmp	r3, r6
 8027592:	bfdc      	itt	le
 8027594:	1c73      	addle	r3, r6, #1
 8027596:	63a3      	strle	r3, [r4, #56]	; 0x38
 8027598:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802759a:	42ab      	cmp	r3, r5
 802759c:	bfc8      	it	gt
 802759e:	462b      	movgt	r3, r5
 80275a0:	ea4f 1560 	mov.w	r5, r0, asr #5
 80275a4:	bfc8      	it	gt
 80275a6:	6323      	strgt	r3, [r4, #48]	; 0x30
 80275a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80275aa:	42ab      	cmp	r3, r5
 80275ac:	bfd8      	it	le
 80275ae:	462b      	movle	r3, r5
 80275b0:	ea4f 1561 	mov.w	r5, r1, asr #5
 80275b4:	bfdc      	itt	le
 80275b6:	3301      	addle	r3, #1
 80275b8:	63a3      	strle	r3, [r4, #56]	; 0x38
 80275ba:	9b05      	ldr	r3, [sp, #20]
 80275bc:	eba3 0a01 	sub.w	sl, r3, r1
 80275c0:	1143      	asrs	r3, r0, #5
 80275c2:	429e      	cmp	r6, r3
 80275c4:	f040 8119 	bne.w	80277fa <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80275c8:	9b05      	ldr	r3, [sp, #20]
 80275ca:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80275ce:	9b03      	ldr	r3, [sp, #12]
 80275d0:	459e      	cmp	lr, r3
 80275d2:	d12c      	bne.n	802762e <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80275d4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80275d8:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80275dc:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80275e0:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80275e4:	4291      	cmp	r1, r2
 80275e6:	d037      	beq.n	8027658 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80275e8:	8b61      	ldrh	r1, [r4, #26]
 80275ea:	8b22      	ldrh	r2, [r4, #24]
 80275ec:	430a      	orrs	r2, r1
 80275ee:	d00b      	beq.n	8027608 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80275f0:	2b00      	cmp	r3, #0
 80275f2:	db09      	blt.n	8027608 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80275f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80275f6:	429a      	cmp	r2, r3
 80275f8:	dd06      	ble.n	8027608 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80275fa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80275fe:	429a      	cmp	r2, r3
 8027600:	d308      	bcc.n	8027614 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8027602:	2301      	movs	r3, #1
 8027604:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027608:	f8a4 c014 	strh.w	ip, [r4, #20]
 802760c:	82e6      	strh	r6, [r4, #22]
 802760e:	2300      	movs	r3, #0
 8027610:	8323      	strh	r3, [r4, #24]
 8027612:	e0c6      	b.n	80277a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8027614:	f104 0314 	add.w	r3, r4, #20
 8027618:	6922      	ldr	r2, [r4, #16]
 802761a:	cb03      	ldmia	r3!, {r0, r1}
 802761c:	6010      	str	r0, [r2, #0]
 802761e:	6051      	str	r1, [r2, #4]
 8027620:	6923      	ldr	r3, [r4, #16]
 8027622:	3308      	adds	r3, #8
 8027624:	6123      	str	r3, [r4, #16]
 8027626:	68a3      	ldr	r3, [r4, #8]
 8027628:	3301      	adds	r3, #1
 802762a:	60a3      	str	r3, [r4, #8]
 802762c:	e7ec      	b.n	8027608 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802762e:	9b05      	ldr	r3, [sp, #20]
 8027630:	45ac      	cmp	ip, r5
 8027632:	f001 011f 	and.w	r1, r1, #31
 8027636:	8b20      	ldrh	r0, [r4, #24]
 8027638:	f003 031f 	and.w	r3, r3, #31
 802763c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8027640:	9304      	str	r3, [sp, #16]
 8027642:	9b03      	ldr	r3, [sp, #12]
 8027644:	eba3 020e 	sub.w	r2, r3, lr
 8027648:	d109      	bne.n	802765e <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 802764a:	9b04      	ldr	r3, [sp, #16]
 802764c:	4410      	add	r0, r2
 802764e:	4419      	add	r1, r3
 8027650:	8320      	strh	r0, [r4, #24]
 8027652:	fb02 8201 	mla	r2, r2, r1, r8
 8027656:	8362      	strh	r2, [r4, #26]
 8027658:	b013      	add	sp, #76	; 0x4c
 802765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802765e:	f1ba 0f00 	cmp.w	sl, #0
 8027662:	f2c0 80a0 	blt.w	80277a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8027666:	f1c1 0320 	rsb	r3, r1, #32
 802766a:	f04f 0b20 	mov.w	fp, #32
 802766e:	435a      	muls	r2, r3
 8027670:	2301      	movs	r3, #1
 8027672:	9302      	str	r3, [sp, #8]
 8027674:	4459      	add	r1, fp
 8027676:	fb92 f7fa 	sdiv	r7, r2, sl
 802767a:	fb0a 2217 	mls	r2, sl, r7, r2
 802767e:	2a00      	cmp	r2, #0
 8027680:	bfbc      	itt	lt
 8027682:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8027686:	4452      	addlt	r2, sl
 8027688:	fb07 8101 	mla	r1, r7, r1, r8
 802768c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8027690:	4438      	add	r0, r7
 8027692:	b20b      	sxth	r3, r1
 8027694:	9902      	ldr	r1, [sp, #8]
 8027696:	b200      	sxth	r0, r0
 8027698:	9301      	str	r3, [sp, #4]
 802769a:	8363      	strh	r3, [r4, #26]
 802769c:	186b      	adds	r3, r5, r1
 802769e:	0435      	lsls	r5, r6, #16
 80276a0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80276a4:	8320      	strh	r0, [r4, #24]
 80276a6:	eb03 0905 	add.w	r9, r3, r5
 80276aa:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80276ae:	9300      	str	r3, [sp, #0]
 80276b0:	45c1      	cmp	r9, r8
 80276b2:	9505      	str	r5, [sp, #20]
 80276b4:	d014      	beq.n	80276e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80276b6:	9b01      	ldr	r3, [sp, #4]
 80276b8:	4303      	orrs	r3, r0
 80276ba:	d00b      	beq.n	80276d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80276bc:	2900      	cmp	r1, #0
 80276be:	db09      	blt.n	80276d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80276c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80276c2:	428b      	cmp	r3, r1
 80276c4:	dd06      	ble.n	80276d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80276c6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80276ca:	4299      	cmp	r1, r3
 80276cc:	d374      	bcc.n	80277b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80276ce:	2301      	movs	r3, #1
 80276d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80276d4:	9b00      	ldr	r3, [sp, #0]
 80276d6:	82e6      	strh	r6, [r4, #22]
 80276d8:	82a3      	strh	r3, [r4, #20]
 80276da:	2300      	movs	r3, #0
 80276dc:	8323      	strh	r3, [r4, #24]
 80276de:	8363      	strh	r3, [r4, #26]
 80276e0:	9900      	ldr	r1, [sp, #0]
 80276e2:	eb0e 0307 	add.w	r3, lr, r7
 80276e6:	458c      	cmp	ip, r1
 80276e8:	d04e      	beq.n	8027788 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80276ea:	9903      	ldr	r1, [sp, #12]
 80276ec:	eba2 020a 	sub.w	r2, r2, sl
 80276f0:	1ac9      	subs	r1, r1, r3
 80276f2:	9201      	str	r2, [sp, #4]
 80276f4:	440f      	add	r7, r1
 80276f6:	017f      	lsls	r7, r7, #5
 80276f8:	fb97 fefa 	sdiv	lr, r7, sl
 80276fc:	fb0a 771e 	mls	r7, sl, lr, r7
 8027700:	2f00      	cmp	r7, #0
 8027702:	bfbc      	itt	lt
 8027704:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8027708:	4457      	addlt	r7, sl
 802770a:	f10e 0101 	add.w	r1, lr, #1
 802770e:	9106      	str	r1, [sp, #24]
 8027710:	9a01      	ldr	r2, [sp, #4]
 8027712:	8b20      	ldrh	r0, [r4, #24]
 8027714:	19d2      	adds	r2, r2, r7
 8027716:	8b61      	ldrh	r1, [r4, #26]
 8027718:	9d02      	ldr	r5, [sp, #8]
 802771a:	9201      	str	r2, [sp, #4]
 802771c:	bf5b      	ittet	pl
 802771e:	eba2 020a 	subpl.w	r2, r2, sl
 8027722:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8027726:	46f0      	movmi	r8, lr
 8027728:	9201      	strpl	r2, [sp, #4]
 802772a:	9a00      	ldr	r2, [sp, #0]
 802772c:	4440      	add	r0, r8
 802772e:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8027732:	4443      	add	r3, r8
 8027734:	442a      	add	r2, r5
 8027736:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802773a:	9d05      	ldr	r5, [sp, #20]
 802773c:	b200      	sxth	r0, r0
 802773e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027742:	b209      	sxth	r1, r1
 8027744:	4415      	add	r5, r2
 8027746:	8320      	strh	r0, [r4, #24]
 8027748:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802774c:	8361      	strh	r1, [r4, #26]
 802774e:	9200      	str	r2, [sp, #0]
 8027750:	454d      	cmp	r5, r9
 8027752:	d016      	beq.n	8027782 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8027754:	4301      	orrs	r1, r0
 8027756:	d00d      	beq.n	8027774 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8027758:	f1b8 0f00 	cmp.w	r8, #0
 802775c:	db0a      	blt.n	8027774 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802775e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027760:	4541      	cmp	r1, r8
 8027762:	dd07      	ble.n	8027774 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8027764:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027768:	4288      	cmp	r0, r1
 802776a:	d335      	bcc.n	80277d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802776c:	f04f 0101 	mov.w	r1, #1
 8027770:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8027774:	9900      	ldr	r1, [sp, #0]
 8027776:	82e6      	strh	r6, [r4, #22]
 8027778:	82a1      	strh	r1, [r4, #20]
 802777a:	f04f 0100 	mov.w	r1, #0
 802777e:	8321      	strh	r1, [r4, #24]
 8027780:	8361      	strh	r1, [r4, #26]
 8027782:	9a00      	ldr	r2, [sp, #0]
 8027784:	4594      	cmp	ip, r2
 8027786:	d1c3      	bne.n	8027710 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8027788:	9a03      	ldr	r2, [sp, #12]
 802778a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802778e:	1ad3      	subs	r3, r2, r3
 8027790:	8b22      	ldrh	r2, [r4, #24]
 8027792:	441a      	add	r2, r3
 8027794:	8322      	strh	r2, [r4, #24]
 8027796:	9a04      	ldr	r2, [sp, #16]
 8027798:	3220      	adds	r2, #32
 802779a:	eba2 020b 	sub.w	r2, r2, fp
 802779e:	fb03 c302 	mla	r3, r3, r2, ip
 80277a2:	8363      	strh	r3, [r4, #26]
 80277a4:	e758      	b.n	8027658 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80277a6:	f04f 33ff 	mov.w	r3, #4294967295
 80277aa:	434a      	muls	r2, r1
 80277ac:	f1ca 0a00 	rsb	sl, sl, #0
 80277b0:	f04f 0b00 	mov.w	fp, #0
 80277b4:	9302      	str	r3, [sp, #8]
 80277b6:	e75d      	b.n	8027674 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80277b8:	f104 0314 	add.w	r3, r4, #20
 80277bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80277c0:	cb03      	ldmia	r3!, {r0, r1}
 80277c2:	f8c8 0000 	str.w	r0, [r8]
 80277c6:	f8c8 1004 	str.w	r1, [r8, #4]
 80277ca:	6923      	ldr	r3, [r4, #16]
 80277cc:	3308      	adds	r3, #8
 80277ce:	6123      	str	r3, [r4, #16]
 80277d0:	68a3      	ldr	r3, [r4, #8]
 80277d2:	3301      	adds	r3, #1
 80277d4:	60a3      	str	r3, [r4, #8]
 80277d6:	e77d      	b.n	80276d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80277d8:	f104 0814 	add.w	r8, r4, #20
 80277dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80277e0:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80277e4:	f8c9 0000 	str.w	r0, [r9]
 80277e8:	f8c9 1004 	str.w	r1, [r9, #4]
 80277ec:	6921      	ldr	r1, [r4, #16]
 80277ee:	3108      	adds	r1, #8
 80277f0:	6121      	str	r1, [r4, #16]
 80277f2:	68a1      	ldr	r1, [r4, #8]
 80277f4:	3101      	adds	r1, #1
 80277f6:	60a1      	str	r1, [r4, #8]
 80277f8:	e7bc      	b.n	8027774 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80277fa:	1a83      	subs	r3, r0, r2
 80277fc:	9301      	str	r3, [sp, #4]
 80277fe:	f1ba 0f00 	cmp.w	sl, #0
 8027802:	f040 8094 	bne.w	802792e <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8027806:	9a01      	ldr	r2, [sp, #4]
 8027808:	0049      	lsls	r1, r1, #1
 802780a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802780e:	2a00      	cmp	r2, #0
 8027810:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8027814:	8b62      	ldrh	r2, [r4, #26]
 8027816:	bfaa      	itet	ge
 8027818:	f04f 0a20 	movge.w	sl, #32
 802781c:	f04f 38ff 	movlt.w	r8, #4294967295
 8027820:	f04f 0801 	movge.w	r8, #1
 8027824:	8b21      	ldrh	r1, [r4, #24]
 8027826:	ebaa 0e0e 	sub.w	lr, sl, lr
 802782a:	4471      	add	r1, lr
 802782c:	fb0e 2e03 	mla	lr, lr, r3, r2
 8027830:	eb08 0206 	add.w	r2, r8, r6
 8027834:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8027838:	b209      	sxth	r1, r1
 802783a:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 802783e:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8027842:	8321      	strh	r1, [r4, #24]
 8027844:	fa0f fe8e 	sxth.w	lr, lr
 8027848:	42b7      	cmp	r7, r6
 802784a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802784e:	d013      	beq.n	8027878 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8027850:	ea51 010e 	orrs.w	r1, r1, lr
 8027854:	d00b      	beq.n	802786e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8027856:	2800      	cmp	r0, #0
 8027858:	db09      	blt.n	802786e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802785a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802785c:	4281      	cmp	r1, r0
 802785e:	dd06      	ble.n	802786e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8027860:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027864:	4288      	cmp	r0, r1
 8027866:	d339      	bcc.n	80278dc <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8027868:	2101      	movs	r1, #1
 802786a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802786e:	2100      	movs	r1, #0
 8027870:	82a5      	strh	r5, [r4, #20]
 8027872:	82e2      	strh	r2, [r4, #22]
 8027874:	8321      	strh	r1, [r4, #24]
 8027876:	8361      	strh	r1, [r4, #26]
 8027878:	f1aa 0610 	sub.w	r6, sl, #16
 802787c:	f04f 0e00 	mov.w	lr, #0
 8027880:	f04f 0b01 	mov.w	fp, #1
 8027884:	0076      	lsls	r6, r6, #1
 8027886:	fb06 f703 	mul.w	r7, r6, r3
 802788a:	b236      	sxth	r6, r6
 802788c:	b23f      	sxth	r7, r7
 802788e:	ea46 0107 	orr.w	r1, r6, r7
 8027892:	9100      	str	r1, [sp, #0]
 8027894:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027896:	428a      	cmp	r2, r1
 8027898:	d03e      	beq.n	8027918 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802789a:	4442      	add	r2, r8
 802789c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80278a0:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80278a4:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80278a8:	8326      	strh	r6, [r4, #24]
 80278aa:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80278ae:	8367      	strh	r7, [r4, #26]
 80278b0:	4584      	cmp	ip, r0
 80278b2:	d0ef      	beq.n	8027894 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80278b4:	9800      	ldr	r0, [sp, #0]
 80278b6:	b150      	cbz	r0, 80278ce <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80278b8:	2900      	cmp	r1, #0
 80278ba:	db08      	blt.n	80278ce <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80278bc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80278be:	4288      	cmp	r0, r1
 80278c0:	dd05      	ble.n	80278ce <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80278c2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80278c6:	4288      	cmp	r0, r1
 80278c8:	d315      	bcc.n	80278f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80278ca:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80278ce:	82a5      	strh	r5, [r4, #20]
 80278d0:	82e2      	strh	r2, [r4, #22]
 80278d2:	f8a4 e018 	strh.w	lr, [r4, #24]
 80278d6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80278da:	e7db      	b.n	8027894 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80278dc:	f104 0614 	add.w	r6, r4, #20
 80278e0:	6927      	ldr	r7, [r4, #16]
 80278e2:	ce03      	ldmia	r6!, {r0, r1}
 80278e4:	6038      	str	r0, [r7, #0]
 80278e6:	6079      	str	r1, [r7, #4]
 80278e8:	6921      	ldr	r1, [r4, #16]
 80278ea:	3108      	adds	r1, #8
 80278ec:	6121      	str	r1, [r4, #16]
 80278ee:	68a1      	ldr	r1, [r4, #8]
 80278f0:	3101      	adds	r1, #1
 80278f2:	60a1      	str	r1, [r4, #8]
 80278f4:	e7bb      	b.n	802786e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80278f6:	f104 0c14 	add.w	ip, r4, #20
 80278fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80278fe:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8027902:	f8c9 0000 	str.w	r0, [r9]
 8027906:	f8c9 1004 	str.w	r1, [r9, #4]
 802790a:	6921      	ldr	r1, [r4, #16]
 802790c:	3108      	adds	r1, #8
 802790e:	6121      	str	r1, [r4, #16]
 8027910:	68a1      	ldr	r1, [r4, #8]
 8027912:	3101      	adds	r1, #1
 8027914:	60a1      	str	r1, [r4, #8]
 8027916:	e7da      	b.n	80278ce <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8027918:	9a03      	ldr	r2, [sp, #12]
 802791a:	8b61      	ldrh	r1, [r4, #26]
 802791c:	f1a2 0c20 	sub.w	ip, r2, #32
 8027920:	8b22      	ldrh	r2, [r4, #24]
 8027922:	44d4      	add	ip, sl
 8027924:	4462      	add	r2, ip
 8027926:	fb0c 1303 	mla	r3, ip, r3, r1
 802792a:	8322      	strh	r2, [r4, #24]
 802792c:	e739      	b.n	80277a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802792e:	9b01      	ldr	r3, [sp, #4]
 8027930:	2b00      	cmp	r3, #0
 8027932:	db3f      	blt.n	80279b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8027934:	2201      	movs	r2, #1
 8027936:	f1ce 0320 	rsb	r3, lr, #32
 802793a:	920b      	str	r2, [sp, #44]	; 0x2c
 802793c:	2220      	movs	r2, #32
 802793e:	fb0a f303 	mul.w	r3, sl, r3
 8027942:	9202      	str	r2, [sp, #8]
 8027944:	9a01      	ldr	r2, [sp, #4]
 8027946:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802794a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802794e:	fb93 f7f2 	sdiv	r7, r3, r2
 8027952:	fb02 3317 	mls	r3, r2, r7, r3
 8027956:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802795a:	2b00      	cmp	r3, #0
 802795c:	9308      	str	r3, [sp, #32]
 802795e:	bfbc      	itt	lt
 8027960:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8027964:	189b      	addlt	r3, r3, r2
 8027966:	eb07 0b01 	add.w	fp, r7, r1
 802796a:	bfb8      	it	lt
 802796c:	9308      	strlt	r3, [sp, #32]
 802796e:	ea4f 136b 	mov.w	r3, fp, asr #5
 8027972:	9304      	str	r3, [sp, #16]
 8027974:	9b02      	ldr	r3, [sp, #8]
 8027976:	4573      	cmp	r3, lr
 8027978:	d133      	bne.n	80279e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802797a:	9b04      	ldr	r3, [sp, #16]
 802797c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8027980:	454b      	cmp	r3, r9
 8027982:	d045      	beq.n	8027a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8027984:	8b62      	ldrh	r2, [r4, #26]
 8027986:	8b23      	ldrh	r3, [r4, #24]
 8027988:	4313      	orrs	r3, r2
 802798a:	d00c      	beq.n	80279a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802798c:	f1b8 0f00 	cmp.w	r8, #0
 8027990:	db09      	blt.n	80279a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027994:	4543      	cmp	r3, r8
 8027996:	dd06      	ble.n	80279a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027998:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802799c:	429a      	cmp	r2, r3
 802799e:	d313      	bcc.n	80279c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 80279a0:	2301      	movs	r3, #1
 80279a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80279a6:	9b04      	ldr	r3, [sp, #16]
 80279a8:	82e6      	strh	r6, [r4, #22]
 80279aa:	82a3      	strh	r3, [r4, #20]
 80279ac:	2300      	movs	r3, #0
 80279ae:	8323      	strh	r3, [r4, #24]
 80279b0:	8363      	strh	r3, [r4, #26]
 80279b2:	e02d      	b.n	8027a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80279b4:	9a01      	ldr	r2, [sp, #4]
 80279b6:	fb0a f30e 	mul.w	r3, sl, lr
 80279ba:	4252      	negs	r2, r2
 80279bc:	9201      	str	r2, [sp, #4]
 80279be:	f04f 32ff 	mov.w	r2, #4294967295
 80279c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80279c4:	2200      	movs	r2, #0
 80279c6:	e7bc      	b.n	8027942 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80279c8:	f104 0314 	add.w	r3, r4, #20
 80279cc:	6922      	ldr	r2, [r4, #16]
 80279ce:	cb03      	ldmia	r3!, {r0, r1}
 80279d0:	6010      	str	r0, [r2, #0]
 80279d2:	6051      	str	r1, [r2, #4]
 80279d4:	6923      	ldr	r3, [r4, #16]
 80279d6:	3308      	adds	r3, #8
 80279d8:	6123      	str	r3, [r4, #16]
 80279da:	68a3      	ldr	r3, [r4, #8]
 80279dc:	3301      	adds	r3, #1
 80279de:	60a3      	str	r3, [r4, #8]
 80279e0:	e7e1      	b.n	80279a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80279e2:	f00b 031f 	and.w	r3, fp, #31
 80279e6:	f001 011f 	and.w	r1, r1, #31
 80279ea:	8b20      	ldrh	r0, [r4, #24]
 80279ec:	9309      	str	r3, [sp, #36]	; 0x24
 80279ee:	9b02      	ldr	r3, [sp, #8]
 80279f0:	eba3 020e 	sub.w	r2, r3, lr
 80279f4:	8b63      	ldrh	r3, [r4, #26]
 80279f6:	9300      	str	r3, [sp, #0]
 80279f8:	9b04      	ldr	r3, [sp, #16]
 80279fa:	42ab      	cmp	r3, r5
 80279fc:	f040 80ef 	bne.w	8027bde <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8027a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a02:	4410      	add	r0, r2
 8027a04:	4419      	add	r1, r3
 8027a06:	9b00      	ldr	r3, [sp, #0]
 8027a08:	8320      	strh	r0, [r4, #24]
 8027a0a:	fb02 3101 	mla	r1, r2, r1, r3
 8027a0e:	8361      	strh	r1, [r4, #26]
 8027a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027a12:	9904      	ldr	r1, [sp, #16]
 8027a14:	4433      	add	r3, r6
 8027a16:	9300      	str	r3, [sp, #0]
 8027a18:	9a00      	ldr	r2, [sp, #0]
 8027a1a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027a1e:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8027a22:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027a26:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027a2a:	4288      	cmp	r0, r1
 8027a2c:	d018      	beq.n	8027a60 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8027a2e:	8b60      	ldrh	r0, [r4, #26]
 8027a30:	8b21      	ldrh	r1, [r4, #24]
 8027a32:	ea50 0201 	orrs.w	r2, r0, r1
 8027a36:	d00c      	beq.n	8027a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027a38:	2b00      	cmp	r3, #0
 8027a3a:	db0a      	blt.n	8027a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027a3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027a3e:	4299      	cmp	r1, r3
 8027a40:	dd07      	ble.n	8027a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027a42:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027a46:	4299      	cmp	r1, r3
 8027a48:	f0c0 818b 	bcc.w	8027d62 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8027a4c:	2301      	movs	r3, #1
 8027a4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027a52:	9b04      	ldr	r3, [sp, #16]
 8027a54:	82a3      	strh	r3, [r4, #20]
 8027a56:	9b00      	ldr	r3, [sp, #0]
 8027a58:	82e3      	strh	r3, [r4, #22]
 8027a5a:	2300      	movs	r3, #0
 8027a5c:	8323      	strh	r3, [r4, #24]
 8027a5e:	8363      	strh	r3, [r4, #26]
 8027a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027a62:	9a00      	ldr	r2, [sp, #0]
 8027a64:	4293      	cmp	r3, r2
 8027a66:	f000 808d 	beq.w	8027b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8027a6a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8027a6e:	9901      	ldr	r1, [sp, #4]
 8027a70:	9801      	ldr	r0, [sp, #4]
 8027a72:	fb93 f1f1 	sdiv	r1, r3, r1
 8027a76:	fb00 3311 	mls	r3, r0, r1, r3
 8027a7a:	9106      	str	r1, [sp, #24]
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	9307      	str	r3, [sp, #28]
 8027a80:	da04      	bge.n	8027a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8027a82:	1e4b      	subs	r3, r1, #1
 8027a84:	9306      	str	r3, [sp, #24]
 8027a86:	9b07      	ldr	r3, [sp, #28]
 8027a88:	4403      	add	r3, r0
 8027a8a:	9307      	str	r3, [sp, #28]
 8027a8c:	9b08      	ldr	r3, [sp, #32]
 8027a8e:	f04f 0c00 	mov.w	ip, #0
 8027a92:	9901      	ldr	r1, [sp, #4]
 8027a94:	1a5b      	subs	r3, r3, r1
 8027a96:	4659      	mov	r1, fp
 8027a98:	9308      	str	r3, [sp, #32]
 8027a9a:	9b02      	ldr	r3, [sp, #8]
 8027a9c:	f1c3 0320 	rsb	r3, r3, #32
 8027aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8027aa2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027aa4:	9b02      	ldr	r3, [sp, #8]
 8027aa6:	1a1b      	subs	r3, r3, r0
 8027aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8027aaa:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8027aae:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8027ab2:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8027ab6:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8027aba:	181b      	adds	r3, r3, r0
 8027abc:	bf58      	it	pl
 8027abe:	9801      	ldrpl	r0, [sp, #4]
 8027ac0:	9308      	str	r3, [sp, #32]
 8027ac2:	bf54      	ite	pl
 8027ac4:	1a1b      	subpl	r3, r3, r0
 8027ac6:	9d06      	ldrmi	r5, [sp, #24]
 8027ac8:	9802      	ldr	r0, [sp, #8]
 8027aca:	bf5e      	ittt	pl
 8027acc:	9308      	strpl	r3, [sp, #32]
 8027ace:	9b06      	ldrpl	r3, [sp, #24]
 8027ad0:	1c5d      	addpl	r5, r3, #1
 8027ad2:	44ab      	add	fp, r5
 8027ad4:	ea4f 136b 	mov.w	r3, fp, asr #5
 8027ad8:	9304      	str	r3, [sp, #16]
 8027ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027adc:	4283      	cmp	r3, r0
 8027ade:	f040 815a 	bne.w	8027d96 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8027ae2:	9b04      	ldr	r3, [sp, #16]
 8027ae4:	9a00      	ldr	r2, [sp, #0]
 8027ae6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8027aea:	4543      	cmp	r3, r8
 8027aec:	d01a      	beq.n	8027b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027aee:	8b61      	ldrh	r1, [r4, #26]
 8027af0:	8b23      	ldrh	r3, [r4, #24]
 8027af2:	430b      	orrs	r3, r1
 8027af4:	d00e      	beq.n	8027b14 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027af6:	f1be 0f00 	cmp.w	lr, #0
 8027afa:	db0b      	blt.n	8027b14 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027afe:	4573      	cmp	r3, lr
 8027b00:	dd08      	ble.n	8027b14 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027b02:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027b06:	4299      	cmp	r1, r3
 8027b08:	f0c0 8138 	bcc.w	8027d7c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8027b0c:	f04f 0301 	mov.w	r3, #1
 8027b10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027b14:	9b04      	ldr	r3, [sp, #16]
 8027b16:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027b1a:	82a3      	strh	r3, [r4, #20]
 8027b1c:	9b00      	ldr	r3, [sp, #0]
 8027b1e:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027b22:	82e3      	strh	r3, [r4, #22]
 8027b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027b26:	9a00      	ldr	r2, [sp, #0]
 8027b28:	441a      	add	r2, r3
 8027b2a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027b2e:	9200      	str	r2, [sp, #0]
 8027b30:	9900      	ldr	r1, [sp, #0]
 8027b32:	9a04      	ldr	r2, [sp, #16]
 8027b34:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8027b38:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027b3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027b40:	4288      	cmp	r0, r1
 8027b42:	d01a      	beq.n	8027b7a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8027b44:	8b60      	ldrh	r0, [r4, #26]
 8027b46:	8b21      	ldrh	r1, [r4, #24]
 8027b48:	ea50 0201 	orrs.w	r2, r0, r1
 8027b4c:	d00d      	beq.n	8027b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027b4e:	2b00      	cmp	r3, #0
 8027b50:	db0b      	blt.n	8027b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027b52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027b54:	4299      	cmp	r1, r3
 8027b56:	dd08      	ble.n	8027b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027b58:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027b5c:	4299      	cmp	r1, r3
 8027b5e:	f0c0 81f9 	bcc.w	8027f54 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8027b62:	f04f 0301 	mov.w	r3, #1
 8027b66:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027b6a:	9b04      	ldr	r3, [sp, #16]
 8027b6c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027b70:	82a3      	strh	r3, [r4, #20]
 8027b72:	9b00      	ldr	r3, [sp, #0]
 8027b74:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027b78:	82e3      	strh	r3, [r4, #22]
 8027b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027b7c:	4659      	mov	r1, fp
 8027b7e:	9a00      	ldr	r2, [sp, #0]
 8027b80:	4293      	cmp	r3, r2
 8027b82:	d192      	bne.n	8027aaa <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8027b84:	9b02      	ldr	r3, [sp, #8]
 8027b86:	f1c3 0c20 	rsb	ip, r3, #32
 8027b8a:	9b05      	ldr	r3, [sp, #20]
 8027b8c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8027b90:	9b03      	ldr	r3, [sp, #12]
 8027b92:	459c      	cmp	ip, r3
 8027b94:	f040 81f8 	bne.w	8027f88 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8027b98:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027b9c:	9a00      	ldr	r2, [sp, #0]
 8027b9e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027ba2:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8027ba6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027baa:	4288      	cmp	r0, r1
 8027bac:	f43f ad54 	beq.w	8027658 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027bb0:	8b60      	ldrh	r0, [r4, #26]
 8027bb2:	8b21      	ldrh	r1, [r4, #24]
 8027bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8027bb8:	d00c      	beq.n	8027bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027bba:	2b00      	cmp	r3, #0
 8027bbc:	db0a      	blt.n	8027bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027bbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027bc0:	4299      	cmp	r1, r3
 8027bc2:	dd07      	ble.n	8027bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027bc4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027bc8:	4299      	cmp	r1, r3
 8027bca:	f0c0 81d0 	bcc.w	8027f6e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8027bce:	2301      	movs	r3, #1
 8027bd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027bd4:	9b00      	ldr	r3, [sp, #0]
 8027bd6:	f8a4 e014 	strh.w	lr, [r4, #20]
 8027bda:	82e3      	strh	r3, [r4, #22]
 8027bdc:	e517      	b.n	802760e <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8027bde:	2f00      	cmp	r7, #0
 8027be0:	f2c0 8097 	blt.w	8027d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8027be4:	2301      	movs	r3, #1
 8027be6:	f1c1 0c20 	rsb	ip, r1, #32
 8027bea:	9307      	str	r3, [sp, #28]
 8027bec:	2320      	movs	r3, #32
 8027bee:	fb02 f20c 	mul.w	r2, r2, ip
 8027bf2:	9306      	str	r3, [sp, #24]
 8027bf4:	9b06      	ldr	r3, [sp, #24]
 8027bf6:	fb92 fcf7 	sdiv	ip, r2, r7
 8027bfa:	fb07 221c 	mls	r2, r7, ip, r2
 8027bfe:	4419      	add	r1, r3
 8027c00:	9b00      	ldr	r3, [sp, #0]
 8027c02:	2a00      	cmp	r2, #0
 8027c04:	bfbc      	itt	lt
 8027c06:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8027c0a:	19d2      	addlt	r2, r2, r7
 8027c0c:	fb0c 3101 	mla	r1, ip, r1, r3
 8027c10:	9b07      	ldr	r3, [sp, #28]
 8027c12:	4460      	add	r0, ip
 8027c14:	441d      	add	r5, r3
 8027c16:	0433      	lsls	r3, r6, #16
 8027c18:	b200      	sxth	r0, r0
 8027c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8027c1c:	18eb      	adds	r3, r5, r3
 8027c1e:	b209      	sxth	r1, r1
 8027c20:	8320      	strh	r0, [r4, #24]
 8027c22:	454b      	cmp	r3, r9
 8027c24:	8361      	strh	r1, [r4, #26]
 8027c26:	d014      	beq.n	8027c52 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8027c28:	ea50 0301 	orrs.w	r3, r0, r1
 8027c2c:	d00c      	beq.n	8027c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027c2e:	f1b8 0f00 	cmp.w	r8, #0
 8027c32:	db09      	blt.n	8027c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027c36:	4543      	cmp	r3, r8
 8027c38:	dd06      	ble.n	8027c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027c3a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027c3e:	4299      	cmp	r1, r3
 8027c40:	d36e      	bcc.n	8027d20 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8027c42:	2301      	movs	r3, #1
 8027c44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027c48:	2300      	movs	r3, #0
 8027c4a:	82a5      	strh	r5, [r4, #20]
 8027c4c:	82e6      	strh	r6, [r4, #22]
 8027c4e:	8323      	strh	r3, [r4, #24]
 8027c50:	8363      	strh	r3, [r4, #26]
 8027c52:	9904      	ldr	r1, [sp, #16]
 8027c54:	eb0e 030c 	add.w	r3, lr, ip
 8027c58:	42a9      	cmp	r1, r5
 8027c5a:	d04d      	beq.n	8027cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8027c5c:	9902      	ldr	r1, [sp, #8]
 8027c5e:	1bd2      	subs	r2, r2, r7
 8027c60:	1ac9      	subs	r1, r1, r3
 8027c62:	9200      	str	r2, [sp, #0]
 8027c64:	448c      	add	ip, r1
 8027c66:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8027c6a:	fb9c fef7 	sdiv	lr, ip, r7
 8027c6e:	fb07 cc1e 	mls	ip, r7, lr, ip
 8027c72:	f1bc 0f00 	cmp.w	ip, #0
 8027c76:	bfbc      	itt	lt
 8027c78:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8027c7c:	44bc      	addlt	ip, r7
 8027c7e:	f10e 0101 	add.w	r1, lr, #1
 8027c82:	910d      	str	r1, [sp, #52]	; 0x34
 8027c84:	9a00      	ldr	r2, [sp, #0]
 8027c86:	8b20      	ldrh	r0, [r4, #24]
 8027c88:	eb12 020c 	adds.w	r2, r2, ip
 8027c8c:	8b61      	ldrh	r1, [r4, #26]
 8027c8e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027c92:	9200      	str	r2, [sp, #0]
 8027c94:	bf5b      	ittet	pl
 8027c96:	1bd2      	subpl	r2, r2, r7
 8027c98:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8027c9c:	46f0      	movmi	r8, lr
 8027c9e:	9200      	strpl	r2, [sp, #0]
 8027ca0:	9a07      	ldr	r2, [sp, #28]
 8027ca2:	4440      	add	r0, r8
 8027ca4:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8027ca8:	4443      	add	r3, r8
 8027caa:	4415      	add	r5, r2
 8027cac:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027cb2:	b200      	sxth	r0, r0
 8027cb4:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027cb8:	442a      	add	r2, r5
 8027cba:	b209      	sxth	r1, r1
 8027cbc:	8320      	strh	r0, [r4, #24]
 8027cbe:	454a      	cmp	r2, r9
 8027cc0:	8361      	strh	r1, [r4, #26]
 8027cc2:	d016      	beq.n	8027cf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8027cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8027cc8:	d00d      	beq.n	8027ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027cca:	f1b8 0f00 	cmp.w	r8, #0
 8027cce:	db0a      	blt.n	8027ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027cd0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027cd2:	4541      	cmp	r1, r8
 8027cd4:	dd07      	ble.n	8027ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027cd6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027cda:	4288      	cmp	r0, r1
 8027cdc:	d330      	bcc.n	8027d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8027cde:	f04f 0201 	mov.w	r2, #1
 8027ce2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027ce6:	f04f 0200 	mov.w	r2, #0
 8027cea:	82a5      	strh	r5, [r4, #20]
 8027cec:	82e6      	strh	r6, [r4, #22]
 8027cee:	8322      	strh	r2, [r4, #24]
 8027cf0:	8362      	strh	r2, [r4, #26]
 8027cf2:	9904      	ldr	r1, [sp, #16]
 8027cf4:	42a9      	cmp	r1, r5
 8027cf6:	d1c5      	bne.n	8027c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8027cf8:	9a02      	ldr	r2, [sp, #8]
 8027cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027cfc:	1ad3      	subs	r3, r2, r3
 8027cfe:	8b22      	ldrh	r2, [r4, #24]
 8027d00:	3120      	adds	r1, #32
 8027d02:	441a      	add	r2, r3
 8027d04:	8322      	strh	r2, [r4, #24]
 8027d06:	9a06      	ldr	r2, [sp, #24]
 8027d08:	1a89      	subs	r1, r1, r2
 8027d0a:	8b62      	ldrh	r2, [r4, #26]
 8027d0c:	fb03 2301 	mla	r3, r3, r1, r2
 8027d10:	e64e      	b.n	80279b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8027d12:	f04f 33ff 	mov.w	r3, #4294967295
 8027d16:	434a      	muls	r2, r1
 8027d18:	427f      	negs	r7, r7
 8027d1a:	9307      	str	r3, [sp, #28]
 8027d1c:	2300      	movs	r3, #0
 8027d1e:	e768      	b.n	8027bf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8027d20:	f104 0314 	add.w	r3, r4, #20
 8027d24:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027d28:	cb03      	ldmia	r3!, {r0, r1}
 8027d2a:	f8c8 0000 	str.w	r0, [r8]
 8027d2e:	f8c8 1004 	str.w	r1, [r8, #4]
 8027d32:	6923      	ldr	r3, [r4, #16]
 8027d34:	3308      	adds	r3, #8
 8027d36:	6123      	str	r3, [r4, #16]
 8027d38:	68a3      	ldr	r3, [r4, #8]
 8027d3a:	3301      	adds	r3, #1
 8027d3c:	60a3      	str	r3, [r4, #8]
 8027d3e:	e783      	b.n	8027c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027d40:	f104 0814 	add.w	r8, r4, #20
 8027d44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027d48:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027d4c:	f8c9 0000 	str.w	r0, [r9]
 8027d50:	f8c9 1004 	str.w	r1, [r9, #4]
 8027d54:	6921      	ldr	r1, [r4, #16]
 8027d56:	3108      	adds	r1, #8
 8027d58:	6121      	str	r1, [r4, #16]
 8027d5a:	68a1      	ldr	r1, [r4, #8]
 8027d5c:	3101      	adds	r1, #1
 8027d5e:	60a1      	str	r1, [r4, #8]
 8027d60:	e7c1      	b.n	8027ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027d62:	f104 0314 	add.w	r3, r4, #20
 8027d66:	6925      	ldr	r5, [r4, #16]
 8027d68:	cb03      	ldmia	r3!, {r0, r1}
 8027d6a:	6028      	str	r0, [r5, #0]
 8027d6c:	6069      	str	r1, [r5, #4]
 8027d6e:	6923      	ldr	r3, [r4, #16]
 8027d70:	3308      	adds	r3, #8
 8027d72:	6123      	str	r3, [r4, #16]
 8027d74:	68a3      	ldr	r3, [r4, #8]
 8027d76:	3301      	adds	r3, #1
 8027d78:	60a3      	str	r3, [r4, #8]
 8027d7a:	e66a      	b.n	8027a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027d7c:	f104 0314 	add.w	r3, r4, #20
 8027d80:	6925      	ldr	r5, [r4, #16]
 8027d82:	cb03      	ldmia	r3!, {r0, r1}
 8027d84:	6028      	str	r0, [r5, #0]
 8027d86:	6069      	str	r1, [r5, #4]
 8027d88:	6923      	ldr	r3, [r4, #16]
 8027d8a:	3308      	adds	r3, #8
 8027d8c:	6123      	str	r3, [r4, #16]
 8027d8e:	68a3      	ldr	r3, [r4, #8]
 8027d90:	3301      	adds	r3, #1
 8027d92:	60a3      	str	r3, [r4, #8]
 8027d94:	e6be      	b.n	8027b14 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027d96:	f00b 031f 	and.w	r3, fp, #31
 8027d9a:	114f      	asrs	r7, r1, #5
 8027d9c:	8b20      	ldrh	r0, [r4, #24]
 8027d9e:	f001 011f 	and.w	r1, r1, #31
 8027da2:	930f      	str	r3, [sp, #60]	; 0x3c
 8027da4:	9b04      	ldr	r3, [sp, #16]
 8027da6:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027daa:	429f      	cmp	r7, r3
 8027dac:	d10a      	bne.n	8027dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8027dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027db0:	4418      	add	r0, r3
 8027db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027db4:	4419      	add	r1, r3
 8027db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027db8:	8320      	strh	r0, [r4, #24]
 8027dba:	fb03 9901 	mla	r9, r3, r1, r9
 8027dbe:	f8a4 901a 	strh.w	r9, [r4, #26]
 8027dc2:	e6af      	b.n	8027b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027dc4:	2d00      	cmp	r5, #0
 8027dc6:	f2c0 809b 	blt.w	8027f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8027dca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027dcc:	f1c1 0320 	rsb	r3, r1, #32
 8027dd0:	4373      	muls	r3, r6
 8027dd2:	2601      	movs	r6, #1
 8027dd4:	960e      	str	r6, [sp, #56]	; 0x38
 8027dd6:	2620      	movs	r6, #32
 8027dd8:	960d      	str	r6, [sp, #52]	; 0x34
 8027dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027ddc:	fb93 f6f5 	sdiv	r6, r3, r5
 8027de0:	4411      	add	r1, r2
 8027de2:	fb05 3316 	mls	r3, r5, r6, r3
 8027de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027de8:	2b00      	cmp	r3, #0
 8027dea:	4417      	add	r7, r2
 8027dec:	9a00      	ldr	r2, [sp, #0]
 8027dee:	bfbc      	itt	lt
 8027df0:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027df4:	195b      	addlt	r3, r3, r5
 8027df6:	0412      	lsls	r2, r2, #16
 8027df8:	fb06 9101 	mla	r1, r6, r1, r9
 8027dfc:	4430      	add	r0, r6
 8027dfe:	eb07 0902 	add.w	r9, r7, r2
 8027e02:	9210      	str	r2, [sp, #64]	; 0x40
 8027e04:	b200      	sxth	r0, r0
 8027e06:	b209      	sxth	r1, r1
 8027e08:	45c1      	cmp	r9, r8
 8027e0a:	8320      	strh	r0, [r4, #24]
 8027e0c:	8361      	strh	r1, [r4, #26]
 8027e0e:	d017      	beq.n	8027e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8027e10:	ea50 0201 	orrs.w	r2, r0, r1
 8027e14:	d00d      	beq.n	8027e32 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027e16:	f1be 0f00 	cmp.w	lr, #0
 8027e1a:	db0a      	blt.n	8027e32 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027e1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027e1e:	4571      	cmp	r1, lr
 8027e20:	dd07      	ble.n	8027e32 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027e22:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027e26:	4288      	cmp	r0, r1
 8027e28:	d372      	bcc.n	8027f10 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8027e2a:	f04f 0201 	mov.w	r2, #1
 8027e2e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027e32:	9a00      	ldr	r2, [sp, #0]
 8027e34:	82a7      	strh	r7, [r4, #20]
 8027e36:	82e2      	strh	r2, [r4, #22]
 8027e38:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027e3c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027e42:	eb02 0e06 	add.w	lr, r2, r6
 8027e46:	9a04      	ldr	r2, [sp, #16]
 8027e48:	42ba      	cmp	r2, r7
 8027e4a:	d049      	beq.n	8027ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8027e4c:	9a02      	ldr	r2, [sp, #8]
 8027e4e:	1b5b      	subs	r3, r3, r5
 8027e50:	eba2 010e 	sub.w	r1, r2, lr
 8027e54:	440e      	add	r6, r1
 8027e56:	0176      	lsls	r6, r6, #5
 8027e58:	fb96 f8f5 	sdiv	r8, r6, r5
 8027e5c:	fb05 6618 	mls	r6, r5, r8, r6
 8027e60:	2e00      	cmp	r6, #0
 8027e62:	bfbc      	itt	lt
 8027e64:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8027e68:	1976      	addlt	r6, r6, r5
 8027e6a:	f108 0201 	add.w	r2, r8, #1
 8027e6e:	9211      	str	r2, [sp, #68]	; 0x44
 8027e70:	199b      	adds	r3, r3, r6
 8027e72:	8b20      	ldrh	r0, [r4, #24]
 8027e74:	8b61      	ldrh	r1, [r4, #26]
 8027e76:	bf54      	ite	pl
 8027e78:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8027e7c:	46c1      	movmi	r9, r8
 8027e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027e80:	bf58      	it	pl
 8027e82:	1b5b      	subpl	r3, r3, r5
 8027e84:	4448      	add	r0, r9
 8027e86:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8027e8a:	4417      	add	r7, r2
 8027e8c:	44ce      	add	lr, r9
 8027e8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027e90:	b200      	sxth	r0, r0
 8027e92:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027e96:	b209      	sxth	r1, r1
 8027e98:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8027e9c:	443a      	add	r2, r7
 8027e9e:	8320      	strh	r0, [r4, #24]
 8027ea0:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027ea4:	8361      	strh	r1, [r4, #26]
 8027ea6:	4552      	cmp	r2, sl
 8027ea8:	d017      	beq.n	8027eda <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8027eaa:	ea50 0201 	orrs.w	r2, r0, r1
 8027eae:	d00d      	beq.n	8027ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027eb0:	f1b9 0f00 	cmp.w	r9, #0
 8027eb4:	db0a      	blt.n	8027ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027eb6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027eb8:	4549      	cmp	r1, r9
 8027eba:	dd07      	ble.n	8027ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027ebc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027ec0:	4288      	cmp	r0, r1
 8027ec2:	d336      	bcc.n	8027f32 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8027ec4:	f04f 0201 	mov.w	r2, #1
 8027ec8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027ecc:	9a00      	ldr	r2, [sp, #0]
 8027ece:	82a7      	strh	r7, [r4, #20]
 8027ed0:	82e2      	strh	r2, [r4, #22]
 8027ed2:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027ed6:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027eda:	9a04      	ldr	r2, [sp, #16]
 8027edc:	42ba      	cmp	r2, r7
 8027ede:	d1c7      	bne.n	8027e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8027ee0:	9b02      	ldr	r3, [sp, #8]
 8027ee2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027ee4:	eba3 0e0e 	sub.w	lr, r3, lr
 8027ee8:	8b23      	ldrh	r3, [r4, #24]
 8027eea:	3120      	adds	r1, #32
 8027eec:	4473      	add	r3, lr
 8027eee:	8323      	strh	r3, [r4, #24]
 8027ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027ef2:	1ac9      	subs	r1, r1, r3
 8027ef4:	8b63      	ldrh	r3, [r4, #26]
 8027ef6:	fb0e 3e01 	mla	lr, lr, r1, r3
 8027efa:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8027efe:	e611      	b.n	8027b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027f00:	f04f 36ff 	mov.w	r6, #4294967295
 8027f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f06:	426d      	negs	r5, r5
 8027f08:	960e      	str	r6, [sp, #56]	; 0x38
 8027f0a:	2600      	movs	r6, #0
 8027f0c:	434b      	muls	r3, r1
 8027f0e:	e763      	b.n	8027dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8027f10:	f104 0e14 	add.w	lr, r4, #20
 8027f14:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027f18:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8027f1c:	f8c8 0000 	str.w	r0, [r8]
 8027f20:	f8c8 1004 	str.w	r1, [r8, #4]
 8027f24:	6921      	ldr	r1, [r4, #16]
 8027f26:	3108      	adds	r1, #8
 8027f28:	6121      	str	r1, [r4, #16]
 8027f2a:	68a1      	ldr	r1, [r4, #8]
 8027f2c:	3101      	adds	r1, #1
 8027f2e:	60a1      	str	r1, [r4, #8]
 8027f30:	e77f      	b.n	8027e32 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027f32:	f104 0914 	add.w	r9, r4, #20
 8027f36:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027f3a:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027f3e:	f8ca 0000 	str.w	r0, [sl]
 8027f42:	f8ca 1004 	str.w	r1, [sl, #4]
 8027f46:	6921      	ldr	r1, [r4, #16]
 8027f48:	3108      	adds	r1, #8
 8027f4a:	6121      	str	r1, [r4, #16]
 8027f4c:	68a1      	ldr	r1, [r4, #8]
 8027f4e:	3101      	adds	r1, #1
 8027f50:	60a1      	str	r1, [r4, #8]
 8027f52:	e7bb      	b.n	8027ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027f54:	f104 0314 	add.w	r3, r4, #20
 8027f58:	6925      	ldr	r5, [r4, #16]
 8027f5a:	cb03      	ldmia	r3!, {r0, r1}
 8027f5c:	6028      	str	r0, [r5, #0]
 8027f5e:	6069      	str	r1, [r5, #4]
 8027f60:	6923      	ldr	r3, [r4, #16]
 8027f62:	3308      	adds	r3, #8
 8027f64:	6123      	str	r3, [r4, #16]
 8027f66:	68a3      	ldr	r3, [r4, #8]
 8027f68:	3301      	adds	r3, #1
 8027f6a:	60a3      	str	r3, [r4, #8]
 8027f6c:	e5fd      	b.n	8027b6a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027f6e:	f104 0314 	add.w	r3, r4, #20
 8027f72:	6925      	ldr	r5, [r4, #16]
 8027f74:	cb03      	ldmia	r3!, {r0, r1}
 8027f76:	6028      	str	r0, [r5, #0]
 8027f78:	6069      	str	r1, [r5, #4]
 8027f7a:	6923      	ldr	r3, [r4, #16]
 8027f7c:	3308      	adds	r3, #8
 8027f7e:	6123      	str	r3, [r4, #16]
 8027f80:	68a3      	ldr	r3, [r4, #8]
 8027f82:	3301      	adds	r3, #1
 8027f84:	60a3      	str	r3, [r4, #8]
 8027f86:	e625      	b.n	8027bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027f88:	9b05      	ldr	r3, [sp, #20]
 8027f8a:	ea4f 176b 	mov.w	r7, fp, asr #5
 8027f8e:	f00b 081f 	and.w	r8, fp, #31
 8027f92:	8b20      	ldrh	r0, [r4, #24]
 8027f94:	f003 031f 	and.w	r3, r3, #31
 8027f98:	4577      	cmp	r7, lr
 8027f9a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027f9e:	9302      	str	r3, [sp, #8]
 8027fa0:	9b03      	ldr	r3, [sp, #12]
 8027fa2:	eba3 050c 	sub.w	r5, r3, ip
 8027fa6:	d108      	bne.n	8027fba <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8027fa8:	9b02      	ldr	r3, [sp, #8]
 8027faa:	4428      	add	r0, r5
 8027fac:	4498      	add	r8, r3
 8027fae:	8320      	strh	r0, [r4, #24]
 8027fb0:	fb05 9508 	mla	r5, r5, r8, r9
 8027fb4:	8365      	strh	r5, [r4, #26]
 8027fb6:	f7ff bb4f 	b.w	8027658 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027fba:	9b05      	ldr	r3, [sp, #20]
 8027fbc:	ebb3 030b 	subs.w	r3, r3, fp
 8027fc0:	f100 809c 	bmi.w	80280fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8027fc4:	f1c8 0120 	rsb	r1, r8, #32
 8027fc8:	2201      	movs	r2, #1
 8027fca:	f04f 0b20 	mov.w	fp, #32
 8027fce:	434d      	muls	r5, r1
 8027fd0:	9201      	str	r2, [sp, #4]
 8027fd2:	9a01      	ldr	r2, [sp, #4]
 8027fd4:	44d8      	add	r8, fp
 8027fd6:	fb95 f6f3 	sdiv	r6, r5, r3
 8027fda:	fb03 5516 	mls	r5, r3, r6, r5
 8027fde:	4417      	add	r7, r2
 8027fe0:	9a00      	ldr	r2, [sp, #0]
 8027fe2:	2d00      	cmp	r5, #0
 8027fe4:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8027fe8:	bfbc      	itt	lt
 8027fea:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027fee:	18ed      	addlt	r5, r5, r3
 8027ff0:	eb07 0a02 	add.w	sl, r7, r2
 8027ff4:	9204      	str	r2, [sp, #16]
 8027ff6:	fb06 9808 	mla	r8, r6, r8, r9
 8027ffa:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027ffe:	4430      	add	r0, r6
 8028000:	fa0f f188 	sxth.w	r1, r8
 8028004:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8028008:	b200      	sxth	r0, r0
 802800a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802800e:	8361      	strh	r1, [r4, #26]
 8028010:	8320      	strh	r0, [r4, #24]
 8028012:	45ca      	cmp	sl, r9
 8028014:	d015      	beq.n	8028042 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8028016:	ea50 0201 	orrs.w	r2, r0, r1
 802801a:	d00c      	beq.n	8028036 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802801c:	f1b8 0f00 	cmp.w	r8, #0
 8028020:	db09      	blt.n	8028036 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8028022:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8028024:	4541      	cmp	r1, r8
 8028026:	dd06      	ble.n	8028036 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8028028:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802802c:	4288      	cmp	r0, r1
 802802e:	d36e      	bcc.n	802810e <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8028030:	2101      	movs	r1, #1
 8028032:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8028036:	2100      	movs	r1, #0
 8028038:	9a00      	ldr	r2, [sp, #0]
 802803a:	82a7      	strh	r7, [r4, #20]
 802803c:	82e2      	strh	r2, [r4, #22]
 802803e:	8321      	strh	r1, [r4, #24]
 8028040:	8361      	strh	r1, [r4, #26]
 8028042:	45be      	cmp	lr, r7
 8028044:	44b4      	add	ip, r6
 8028046:	d048      	beq.n	80280da <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8028048:	9a03      	ldr	r2, [sp, #12]
 802804a:	1aed      	subs	r5, r5, r3
 802804c:	eba2 010c 	sub.w	r1, r2, ip
 8028050:	440e      	add	r6, r1
 8028052:	0176      	lsls	r6, r6, #5
 8028054:	fb96 f8f3 	sdiv	r8, r6, r3
 8028058:	fb03 6618 	mls	r6, r3, r8, r6
 802805c:	2e00      	cmp	r6, #0
 802805e:	bfbc      	itt	lt
 8028060:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8028064:	18f6      	addlt	r6, r6, r3
 8028066:	f108 0201 	add.w	r2, r8, #1
 802806a:	9205      	str	r2, [sp, #20]
 802806c:	19ad      	adds	r5, r5, r6
 802806e:	8b20      	ldrh	r0, [r4, #24]
 8028070:	8b61      	ldrh	r1, [r4, #26]
 8028072:	bf54      	ite	pl
 8028074:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8028078:	46c1      	movmi	r9, r8
 802807a:	9a01      	ldr	r2, [sp, #4]
 802807c:	bf58      	it	pl
 802807e:	1aed      	subpl	r5, r5, r3
 8028080:	4448      	add	r0, r9
 8028082:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8028086:	4417      	add	r7, r2
 8028088:	44cc      	add	ip, r9
 802808a:	9a04      	ldr	r2, [sp, #16]
 802808c:	b200      	sxth	r0, r0
 802808e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8028092:	b209      	sxth	r1, r1
 8028094:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8028098:	443a      	add	r2, r7
 802809a:	8320      	strh	r0, [r4, #24]
 802809c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80280a0:	8361      	strh	r1, [r4, #26]
 80280a2:	4552      	cmp	r2, sl
 80280a4:	d017      	beq.n	80280d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 80280a6:	ea50 0201 	orrs.w	r2, r0, r1
 80280aa:	d00d      	beq.n	80280c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80280ac:	f1b9 0f00 	cmp.w	r9, #0
 80280b0:	db0a      	blt.n	80280c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80280b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80280b4:	4549      	cmp	r1, r9
 80280b6:	dd07      	ble.n	80280c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80280b8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80280bc:	4288      	cmp	r0, r1
 80280be:	d337      	bcc.n	8028130 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80280c0:	f04f 0201 	mov.w	r2, #1
 80280c4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80280c8:	9a00      	ldr	r2, [sp, #0]
 80280ca:	82a7      	strh	r7, [r4, #20]
 80280cc:	82e2      	strh	r2, [r4, #22]
 80280ce:	f04f 0200 	mov.w	r2, #0
 80280d2:	8322      	strh	r2, [r4, #24]
 80280d4:	8362      	strh	r2, [r4, #26]
 80280d6:	45be      	cmp	lr, r7
 80280d8:	d1c8      	bne.n	802806c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80280da:	9b03      	ldr	r3, [sp, #12]
 80280dc:	8b62      	ldrh	r2, [r4, #26]
 80280de:	eba3 0c0c 	sub.w	ip, r3, ip
 80280e2:	8b23      	ldrh	r3, [r4, #24]
 80280e4:	4463      	add	r3, ip
 80280e6:	8323      	strh	r3, [r4, #24]
 80280e8:	9b02      	ldr	r3, [sp, #8]
 80280ea:	3320      	adds	r3, #32
 80280ec:	eba3 030b 	sub.w	r3, r3, fp
 80280f0:	fb0c 2c03 	mla	ip, ip, r3, r2
 80280f4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80280f8:	f7ff baae 	b.w	8027658 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80280fc:	f04f 32ff 	mov.w	r2, #4294967295
 8028100:	fb05 f508 	mul.w	r5, r5, r8
 8028104:	425b      	negs	r3, r3
 8028106:	f04f 0b00 	mov.w	fp, #0
 802810a:	9201      	str	r2, [sp, #4]
 802810c:	e761      	b.n	8027fd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802810e:	f104 0814 	add.w	r8, r4, #20
 8028112:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8028116:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802811a:	f8c9 0000 	str.w	r0, [r9]
 802811e:	f8c9 1004 	str.w	r1, [r9, #4]
 8028122:	6921      	ldr	r1, [r4, #16]
 8028124:	3108      	adds	r1, #8
 8028126:	6121      	str	r1, [r4, #16]
 8028128:	68a1      	ldr	r1, [r4, #8]
 802812a:	3101      	adds	r1, #1
 802812c:	60a1      	str	r1, [r4, #8]
 802812e:	e782      	b.n	8028036 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8028130:	f104 0914 	add.w	r9, r4, #20
 8028134:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8028138:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802813c:	f8ca 0000 	str.w	r0, [sl]
 8028140:	f8ca 1004 	str.w	r1, [sl, #4]
 8028144:	6921      	ldr	r1, [r4, #16]
 8028146:	3108      	adds	r1, #8
 8028148:	6121      	str	r1, [r4, #16]
 802814a:	68a1      	ldr	r1, [r4, #8]
 802814c:	3101      	adds	r1, #1
 802814e:	60a1      	str	r1, [r4, #8]
 8028150:	e7ba      	b.n	80280c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08028152 <_ZN8touchgfx7Outline6lineToEii>:
 8028152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028154:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8028156:	4604      	mov	r4, r0
 8028158:	460d      	mov	r5, r1
 802815a:	4616      	mov	r6, r2
 802815c:	079b      	lsls	r3, r3, #30
 802815e:	d526      	bpl.n	80281ae <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8028160:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8028164:	ea85 0001 	eor.w	r0, r5, r1
 8028168:	ea86 0302 	eor.w	r3, r6, r2
 802816c:	4303      	orrs	r3, r0
 802816e:	d01e      	beq.n	80281ae <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8028170:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8028172:	114b      	asrs	r3, r1, #5
 8028174:	9600      	str	r6, [sp, #0]
 8028176:	4283      	cmp	r3, r0
 8028178:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802817a:	bfb8      	it	lt
 802817c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802817e:	3301      	adds	r3, #1
 8028180:	4283      	cmp	r3, r0
 8028182:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8028184:	bfc8      	it	gt
 8028186:	6363      	strgt	r3, [r4, #52]	; 0x34
 8028188:	116b      	asrs	r3, r5, #5
 802818a:	4283      	cmp	r3, r0
 802818c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802818e:	bfb8      	it	lt
 8028190:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8028192:	3301      	adds	r3, #1
 8028194:	4283      	cmp	r3, r0
 8028196:	4620      	mov	r0, r4
 8028198:	bfc8      	it	gt
 802819a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802819c:	462b      	mov	r3, r5
 802819e:	f7ff f9e3 	bl	8027568 <_ZN8touchgfx7Outline10renderLineEiiii>
 80281a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80281a4:	f043 0301 	orr.w	r3, r3, #1
 80281a8:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80281ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 80281ae:	b002      	add	sp, #8
 80281b0:	bd70      	pop	{r4, r5, r6, pc}

080281b2 <_ZN8touchgfx7Outline6moveToEii>:
 80281b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80281b6:	4615      	mov	r5, r2
 80281b8:	4604      	mov	r4, r0
 80281ba:	460e      	mov	r6, r1
 80281bc:	079a      	lsls	r2, r3, #30
 80281be:	d401      	bmi.n	80281c4 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80281c0:	f7ff f98c 	bl	80274dc <_ZN8touchgfx7Outline5resetEv>
 80281c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80281c6:	07db      	lsls	r3, r3, #31
 80281c8:	d504      	bpl.n	80281d4 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80281ca:	4620      	mov	r0, r4
 80281cc:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80281d0:	f7ff ffbf 	bl	8028152 <_ZN8touchgfx7Outline6lineToEii>
 80281d4:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80281d8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80281dc:	116f      	asrs	r7, r5, #5
 80281de:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80281e2:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80281e6:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80281ea:	4291      	cmp	r1, r2
 80281ec:	d015      	beq.n	802821a <_ZN8touchgfx7Outline6moveToEii+0x68>
 80281ee:	8b61      	ldrh	r1, [r4, #26]
 80281f0:	8b22      	ldrh	r2, [r4, #24]
 80281f2:	430a      	orrs	r2, r1
 80281f4:	d00b      	beq.n	802820e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80281f6:	2b00      	cmp	r3, #0
 80281f8:	db09      	blt.n	802820e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80281fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80281fc:	429a      	cmp	r2, r3
 80281fe:	dd06      	ble.n	802820e <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8028200:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8028204:	429a      	cmp	r2, r3
 8028206:	d30d      	bcc.n	8028224 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8028208:	2301      	movs	r3, #1
 802820a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802820e:	2300      	movs	r3, #0
 8028210:	f8a4 c014 	strh.w	ip, [r4, #20]
 8028214:	82e7      	strh	r7, [r4, #22]
 8028216:	8323      	strh	r3, [r4, #24]
 8028218:	8363      	strh	r3, [r4, #26]
 802821a:	61e6      	str	r6, [r4, #28]
 802821c:	62a5      	str	r5, [r4, #40]	; 0x28
 802821e:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8028222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028224:	f104 0314 	add.w	r3, r4, #20
 8028228:	6922      	ldr	r2, [r4, #16]
 802822a:	cb03      	ldmia	r3!, {r0, r1}
 802822c:	6010      	str	r0, [r2, #0]
 802822e:	6051      	str	r1, [r2, #4]
 8028230:	6923      	ldr	r3, [r4, #16]
 8028232:	3308      	adds	r3, #8
 8028234:	6123      	str	r3, [r4, #16]
 8028236:	68a3      	ldr	r3, [r4, #8]
 8028238:	3301      	adds	r3, #1
 802823a:	60a3      	str	r3, [r4, #8]
 802823c:	e7e7      	b.n	802820e <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802823e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802823e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028242:	b0d1      	sub	sp, #324	; 0x144
 8028244:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8028248:	466c      	mov	r4, sp
 802824a:	1a0d      	subs	r5, r1, r0
 802824c:	f100 0208 	add.w	r2, r0, #8
 8028250:	2d48      	cmp	r5, #72	; 0x48
 8028252:	f340 80ba 	ble.w	80283ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8028256:	112d      	asrs	r5, r5, #4
 8028258:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802825c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8028260:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8028264:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8028268:	f9b0 8000 	ldrsh.w	r8, [r0]
 802826c:	681e      	ldr	r6, [r3, #0]
 802826e:	6006      	str	r6, [r0, #0]
 8028270:	685e      	ldr	r6, [r3, #4]
 8028272:	6046      	str	r6, [r0, #4]
 8028274:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8028278:	f8a3 c004 	strh.w	ip, [r3, #4]
 802827c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8028280:	80df      	strh	r7, [r3, #6]
 8028282:	f1a1 0308 	sub.w	r3, r1, #8
 8028286:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802828a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802828e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8028292:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8028296:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802829a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802829e:	45ac      	cmp	ip, r5
 80282a0:	dd0f      	ble.n	80282c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 80282a2:	681d      	ldr	r5, [r3, #0]
 80282a4:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80282a8:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80282ac:	6015      	str	r5, [r2, #0]
 80282ae:	685d      	ldr	r5, [r3, #4]
 80282b0:	6055      	str	r5, [r2, #4]
 80282b2:	f821 7c08 	strh.w	r7, [r1, #-8]
 80282b6:	f821 6c06 	strh.w	r6, [r1, #-6]
 80282ba:	f821 ec04 	strh.w	lr, [r1, #-4]
 80282be:	f821 cc02 	strh.w	ip, [r1, #-2]
 80282c2:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80282c6:	f9b0 7000 	ldrsh.w	r7, [r0]
 80282ca:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80282ce:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80282d2:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80282d6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80282da:	4565      	cmp	r5, ip
 80282dc:	dd0d      	ble.n	80282fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80282de:	6815      	ldr	r5, [r2, #0]
 80282e0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80282e4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80282e8:	6005      	str	r5, [r0, #0]
 80282ea:	6855      	ldr	r5, [r2, #4]
 80282ec:	8107      	strh	r7, [r0, #8]
 80282ee:	6045      	str	r5, [r0, #4]
 80282f0:	8146      	strh	r6, [r0, #10]
 80282f2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80282f6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80282fa:	f9b0 7000 	ldrsh.w	r7, [r0]
 80282fe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8028302:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8028306:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802830a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802830e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8028312:	45ac      	cmp	ip, r5
 8028314:	dd0f      	ble.n	8028336 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8028316:	681d      	ldr	r5, [r3, #0]
 8028318:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802831c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8028320:	6005      	str	r5, [r0, #0]
 8028322:	685d      	ldr	r5, [r3, #4]
 8028324:	6045      	str	r5, [r0, #4]
 8028326:	f821 7c08 	strh.w	r7, [r1, #-8]
 802832a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802832e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8028332:	f821 cc02 	strh.w	ip, [r1, #-2]
 8028336:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802833a:	f102 0508 	add.w	r5, r2, #8
 802833e:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8028342:	f9b0 e000 	ldrsh.w	lr, [r0]
 8028346:	462f      	mov	r7, r5
 8028348:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802834c:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8028350:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8028354:	45b2      	cmp	sl, r6
 8028356:	dc18      	bgt.n	802838a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8028358:	3b08      	subs	r3, #8
 802835a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802835e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8028362:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8028366:	45b2      	cmp	sl, r6
 8028368:	dbf6      	blt.n	8028358 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802836a:	42ab      	cmp	r3, r5
 802836c:	681e      	ldr	r6, [r3, #0]
 802836e:	d30e      	bcc.n	802838e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8028370:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8028374:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8028378:	602e      	str	r6, [r5, #0]
 802837a:	685e      	ldr	r6, [r3, #4]
 802837c:	606e      	str	r6, [r5, #4]
 802837e:	f8a3 9000 	strh.w	r9, [r3]
 8028382:	f8a3 8002 	strh.w	r8, [r3, #2]
 8028386:	809f      	strh	r7, [r3, #4]
 8028388:	80da      	strh	r2, [r3, #6]
 802838a:	462a      	mov	r2, r5
 802838c:	e7d3      	b.n	8028336 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802838e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8028392:	6006      	str	r6, [r0, #0]
 8028394:	685e      	ldr	r6, [r3, #4]
 8028396:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802839a:	6046      	str	r6, [r0, #4]
 802839c:	1a1e      	subs	r6, r3, r0
 802839e:	80da      	strh	r2, [r3, #6]
 80283a0:	1b4a      	subs	r2, r1, r5
 80283a2:	f8a3 e000 	strh.w	lr, [r3]
 80283a6:	10d2      	asrs	r2, r2, #3
 80283a8:	f8a3 c002 	strh.w	ip, [r3, #2]
 80283ac:	f8a3 8004 	strh.w	r8, [r3, #4]
 80283b0:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80283b4:	bfb5      	itete	lt
 80283b6:	e9c4 0300 	strdlt	r0, r3, [r4]
 80283ba:	4607      	movge	r7, r0
 80283bc:	460b      	movlt	r3, r1
 80283be:	e9c4 5100 	strdge	r5, r1, [r4]
 80283c2:	4638      	mov	r0, r7
 80283c4:	3408      	adds	r4, #8
 80283c6:	4619      	mov	r1, r3
 80283c8:	e73f      	b.n	802824a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80283ca:	4291      	cmp	r1, r2
 80283cc:	d925      	bls.n	802841a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80283ce:	f1a2 0310 	sub.w	r3, r2, #16
 80283d2:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80283d6:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80283da:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80283de:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80283e2:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80283e6:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80283ea:	42b5      	cmp	r5, r6
 80283ec:	dd13      	ble.n	8028416 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80283ee:	461d      	mov	r5, r3
 80283f0:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80283f4:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80283f8:	3b08      	subs	r3, #8
 80283fa:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80283fe:	619e      	str	r6, [r3, #24]
 8028400:	42a8      	cmp	r0, r5
 8028402:	686e      	ldr	r6, [r5, #4]
 8028404:	f8a3 c010 	strh.w	ip, [r3, #16]
 8028408:	61de      	str	r6, [r3, #28]
 802840a:	825f      	strh	r7, [r3, #18]
 802840c:	f8a3 8014 	strh.w	r8, [r3, #20]
 8028410:	f8a3 e016 	strh.w	lr, [r3, #22]
 8028414:	d1dd      	bne.n	80283d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8028416:	3208      	adds	r2, #8
 8028418:	e7d7      	b.n	80283ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802841a:	466b      	mov	r3, sp
 802841c:	429c      	cmp	r4, r3
 802841e:	d903      	bls.n	8028428 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8028420:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8028424:	3c08      	subs	r4, #8
 8028426:	e710      	b.n	802824a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8028428:	b051      	add	sp, #324	; 0x144
 802842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802842e <_ZN8touchgfx7Outline9sortCellsEv>:
 802842e:	6881      	ldr	r1, [r0, #8]
 8028430:	b111      	cbz	r1, 8028438 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8028432:	68c0      	ldr	r0, [r0, #12]
 8028434:	f7ff bf03 	b.w	802823e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8028438:	4770      	bx	lr

0802843a <_ZN8touchgfx7Outline8getCellsEv>:
 802843a:	b510      	push	{r4, lr}
 802843c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802843e:	4604      	mov	r4, r0
 8028440:	07da      	lsls	r2, r3, #31
 8028442:	d507      	bpl.n	8028454 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8028444:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8028448:	f7ff fe83 	bl	8028152 <_ZN8touchgfx7Outline6lineToEii>
 802844c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802844e:	f023 0301 	bic.w	r3, r3, #1
 8028452:	63e3      	str	r3, [r4, #60]	; 0x3c
 8028454:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028456:	079b      	lsls	r3, r3, #30
 8028458:	d51a      	bpl.n	8028490 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802845a:	8b62      	ldrh	r2, [r4, #26]
 802845c:	8b23      	ldrh	r3, [r4, #24]
 802845e:	4313      	orrs	r3, r2
 8028460:	d00d      	beq.n	802847e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8028462:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8028466:	2b00      	cmp	r3, #0
 8028468:	db09      	blt.n	802847e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802846a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802846c:	4293      	cmp	r3, r2
 802846e:	da06      	bge.n	802847e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8028470:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8028474:	429a      	cmp	r2, r3
 8028476:	d80d      	bhi.n	8028494 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8028478:	2301      	movs	r3, #1
 802847a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802847e:	68a0      	ldr	r0, [r4, #8]
 8028480:	b138      	cbz	r0, 8028492 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8028482:	4620      	mov	r0, r4
 8028484:	f7ff ffd3 	bl	802842e <_ZN8touchgfx7Outline9sortCellsEv>
 8028488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802848a:	f023 0302 	bic.w	r3, r3, #2
 802848e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8028490:	68e0      	ldr	r0, [r4, #12]
 8028492:	bd10      	pop	{r4, pc}
 8028494:	f104 0314 	add.w	r3, r4, #20
 8028498:	6922      	ldr	r2, [r4, #16]
 802849a:	cb03      	ldmia	r3!, {r0, r1}
 802849c:	6010      	str	r0, [r2, #0]
 802849e:	6051      	str	r1, [r2, #4]
 80284a0:	6923      	ldr	r3, [r4, #16]
 80284a2:	3308      	adds	r3, #8
 80284a4:	6123      	str	r3, [r4, #16]
 80284a6:	68a3      	ldr	r3, [r4, #8]
 80284a8:	3301      	adds	r3, #1
 80284aa:	60a3      	str	r3, [r4, #8]
 80284ac:	e7e7      	b.n	802847e <_ZN8touchgfx7Outline8getCellsEv+0x44>

080284ae <_ZN8touchgfx8ScanlineD1Ev>:
 80284ae:	4770      	bx	lr

080284b0 <_ZN8touchgfx8ScanlineD0Ev>:
 80284b0:	b510      	push	{r4, lr}
 80284b2:	4604      	mov	r4, r0
 80284b4:	2124      	movs	r1, #36	; 0x24
 80284b6:	f000 f877 	bl	80285a8 <_ZdlPvj>
 80284ba:	4620      	mov	r0, r4
 80284bc:	bd10      	pop	{r4, pc}

080284be <_ZN8touchgfx8Scanline5resetEv>:
 80284be:	b510      	push	{r4, lr}
 80284c0:	4604      	mov	r4, r0
 80284c2:	f7f3 f8bf 	bl	801b644 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80284c6:	61a0      	str	r0, [r4, #24]
 80284c8:	f7f3 f8c2 	bl	801b650 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80284cc:	61e0      	str	r0, [r4, #28]
 80284ce:	f7f3 f8c5 	bl	801b65c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80284d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80284d6:	6220      	str	r0, [r4, #32]
 80284d8:	6160      	str	r0, [r4, #20]
 80284da:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80284de:	69e3      	ldr	r3, [r4, #28]
 80284e0:	6123      	str	r3, [r4, #16]
 80284e2:	2300      	movs	r3, #0
 80284e4:	60e3      	str	r3, [r4, #12]
 80284e6:	bd10      	pop	{r4, pc}

080284e8 <_ZN8touchgfx8ScanlineC1Ev>:
 80284e8:	4b07      	ldr	r3, [pc, #28]	; (8028508 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80284ea:	b510      	push	{r4, lr}
 80284ec:	6003      	str	r3, [r0, #0]
 80284ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80284f2:	4604      	mov	r4, r0
 80284f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80284f8:	2300      	movs	r3, #0
 80284fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80284fe:	6143      	str	r3, [r0, #20]
 8028500:	f7ff ffdd 	bl	80284be <_ZN8touchgfx8Scanline5resetEv>
 8028504:	4620      	mov	r0, r4
 8028506:	bd10      	pop	{r4, pc}
 8028508:	0802e194 	.word	0x0802e194

0802850c <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028510:	1e0c      	subs	r4, r1, #0
 8028512:	4605      	mov	r5, r0
 8028514:	4617      	mov	r7, r2
 8028516:	461e      	mov	r6, r3
 8028518:	da03      	bge.n	8028522 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802851a:	4426      	add	r6, r4
 802851c:	2e01      	cmp	r6, #1
 802851e:	d421      	bmi.n	8028564 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8028520:	2400      	movs	r4, #0
 8028522:	f7f3 f889 	bl	801b638 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8028526:	42a0      	cmp	r0, r4
 8028528:	d91c      	bls.n	8028564 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802852a:	eb04 0806 	add.w	r8, r4, r6
 802852e:	f7f3 f883 	bl	801b638 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8028532:	4580      	cmp	r8, r0
 8028534:	d902      	bls.n	802853c <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8028536:	f7f3 f87f 	bl	801b638 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802853a:	1b06      	subs	r6, r0, r4
 802853c:	69a8      	ldr	r0, [r5, #24]
 802853e:	4632      	mov	r2, r6
 8028540:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8028544:	4420      	add	r0, r4
 8028546:	f7f4 fd76 	bl	801d036 <_ZN8touchgfx6memsetEPvhm>
 802854a:	686b      	ldr	r3, [r5, #4]
 802854c:	b2b2      	uxth	r2, r6
 802854e:	3301      	adds	r3, #1
 8028550:	42a3      	cmp	r3, r4
 8028552:	696b      	ldr	r3, [r5, #20]
 8028554:	d108      	bne.n	8028568 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8028556:	8819      	ldrh	r1, [r3, #0]
 8028558:	440a      	add	r2, r1
 802855a:	801a      	strh	r2, [r3, #0]
 802855c:	3c01      	subs	r4, #1
 802855e:	4434      	add	r4, r6
 8028560:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8028564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028568:	1c99      	adds	r1, r3, #2
 802856a:	6169      	str	r1, [r5, #20]
 802856c:	805a      	strh	r2, [r3, #2]
 802856e:	692b      	ldr	r3, [r5, #16]
 8028570:	1c9a      	adds	r2, r3, #2
 8028572:	612a      	str	r2, [r5, #16]
 8028574:	805c      	strh	r4, [r3, #2]
 8028576:	68eb      	ldr	r3, [r5, #12]
 8028578:	3301      	adds	r3, #1
 802857a:	60eb      	str	r3, [r5, #12]
 802857c:	e7ee      	b.n	802855c <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802857e <_ZN8touchgfx15RenderingBufferC1Ev>:
 802857e:	2200      	movs	r2, #0
 8028580:	6002      	str	r2, [r0, #0]
 8028582:	7102      	strb	r2, [r0, #4]
 8028584:	6102      	str	r2, [r0, #16]
 8028586:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802858a:	4770      	bx	lr

0802858c <_ZN8touchgfx15RenderingBufferD1Ev>:
 802858c:	4770      	bx	lr

0802858e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802858e:	6083      	str	r3, [r0, #8]
 8028590:	9b00      	ldr	r3, [sp, #0]
 8028592:	6001      	str	r1, [r0, #0]
 8028594:	60c3      	str	r3, [r0, #12]
 8028596:	9b01      	ldr	r3, [sp, #4]
 8028598:	7102      	strb	r2, [r0, #4]
 802859a:	6103      	str	r3, [r0, #16]
 802859c:	4770      	bx	lr

0802859e <__aeabi_atexit>:
 802859e:	460b      	mov	r3, r1
 80285a0:	4601      	mov	r1, r0
 80285a2:	4618      	mov	r0, r3
 80285a4:	f000 b852 	b.w	802864c <__cxa_atexit>

080285a8 <_ZdlPvj>:
 80285a8:	f000 b812 	b.w	80285d0 <_ZdlPv>

080285ac <__cxa_guard_acquire>:
 80285ac:	6803      	ldr	r3, [r0, #0]
 80285ae:	07db      	lsls	r3, r3, #31
 80285b0:	d406      	bmi.n	80285c0 <__cxa_guard_acquire+0x14>
 80285b2:	7843      	ldrb	r3, [r0, #1]
 80285b4:	b103      	cbz	r3, 80285b8 <__cxa_guard_acquire+0xc>
 80285b6:	deff      	udf	#255	; 0xff
 80285b8:	2301      	movs	r3, #1
 80285ba:	7043      	strb	r3, [r0, #1]
 80285bc:	4618      	mov	r0, r3
 80285be:	4770      	bx	lr
 80285c0:	2000      	movs	r0, #0
 80285c2:	4770      	bx	lr

080285c4 <__cxa_guard_release>:
 80285c4:	2301      	movs	r3, #1
 80285c6:	6003      	str	r3, [r0, #0]
 80285c8:	4770      	bx	lr

080285ca <__cxa_pure_virtual>:
 80285ca:	b508      	push	{r3, lr}
 80285cc:	f000 f80e 	bl	80285ec <_ZSt9terminatev>

080285d0 <_ZdlPv>:
 80285d0:	f000 b88e 	b.w	80286f0 <free>

080285d4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80285d4:	b508      	push	{r3, lr}
 80285d6:	4780      	blx	r0
 80285d8:	f000 f80d 	bl	80285f6 <abort>

080285dc <_ZSt13get_terminatev>:
 80285dc:	4b02      	ldr	r3, [pc, #8]	; (80285e8 <_ZSt13get_terminatev+0xc>)
 80285de:	6818      	ldr	r0, [r3, #0]
 80285e0:	f3bf 8f5b 	dmb	ish
 80285e4:	4770      	bx	lr
 80285e6:	bf00      	nop
 80285e8:	200000d4 	.word	0x200000d4

080285ec <_ZSt9terminatev>:
 80285ec:	b508      	push	{r3, lr}
 80285ee:	f7ff fff5 	bl	80285dc <_ZSt13get_terminatev>
 80285f2:	f7ff ffef 	bl	80285d4 <_ZN10__cxxabiv111__terminateEPFvvE>

080285f6 <abort>:
 80285f6:	b508      	push	{r3, lr}
 80285f8:	2006      	movs	r0, #6
 80285fa:	f000 fc67 	bl	8028ecc <raise>
 80285fe:	2001      	movs	r0, #1
 8028600:	f7db f866 	bl	80036d0 <_exit>

08028604 <__assert_func>:
 8028604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028606:	4614      	mov	r4, r2
 8028608:	461a      	mov	r2, r3
 802860a:	4b09      	ldr	r3, [pc, #36]	; (8028630 <__assert_func+0x2c>)
 802860c:	681b      	ldr	r3, [r3, #0]
 802860e:	4605      	mov	r5, r0
 8028610:	68d8      	ldr	r0, [r3, #12]
 8028612:	b14c      	cbz	r4, 8028628 <__assert_func+0x24>
 8028614:	4b07      	ldr	r3, [pc, #28]	; (8028634 <__assert_func+0x30>)
 8028616:	9100      	str	r1, [sp, #0]
 8028618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802861c:	4906      	ldr	r1, [pc, #24]	; (8028638 <__assert_func+0x34>)
 802861e:	462b      	mov	r3, r5
 8028620:	f000 f828 	bl	8028674 <fiprintf>
 8028624:	f7ff ffe7 	bl	80285f6 <abort>
 8028628:	4b04      	ldr	r3, [pc, #16]	; (802863c <__assert_func+0x38>)
 802862a:	461c      	mov	r4, r3
 802862c:	e7f3      	b.n	8028616 <__assert_func+0x12>
 802862e:	bf00      	nop
 8028630:	200000d8 	.word	0x200000d8
 8028634:	0802e19c 	.word	0x0802e19c
 8028638:	0802e1a9 	.word	0x0802e1a9
 802863c:	0802e1d7 	.word	0x0802e1d7

08028640 <atexit>:
 8028640:	2300      	movs	r3, #0
 8028642:	4601      	mov	r1, r0
 8028644:	461a      	mov	r2, r3
 8028646:	4618      	mov	r0, r3
 8028648:	f000 bd1c 	b.w	8029084 <__register_exitproc>

0802864c <__cxa_atexit>:
 802864c:	b510      	push	{r4, lr}
 802864e:	4c05      	ldr	r4, [pc, #20]	; (8028664 <__cxa_atexit+0x18>)
 8028650:	4613      	mov	r3, r2
 8028652:	b12c      	cbz	r4, 8028660 <__cxa_atexit+0x14>
 8028654:	460a      	mov	r2, r1
 8028656:	4601      	mov	r1, r0
 8028658:	2002      	movs	r0, #2
 802865a:	f000 fd13 	bl	8029084 <__register_exitproc>
 802865e:	bd10      	pop	{r4, pc}
 8028660:	4620      	mov	r0, r4
 8028662:	e7fc      	b.n	802865e <__cxa_atexit+0x12>
 8028664:	08029085 	.word	0x08029085

08028668 <__errno>:
 8028668:	4b01      	ldr	r3, [pc, #4]	; (8028670 <__errno+0x8>)
 802866a:	6818      	ldr	r0, [r3, #0]
 802866c:	4770      	bx	lr
 802866e:	bf00      	nop
 8028670:	200000d8 	.word	0x200000d8

08028674 <fiprintf>:
 8028674:	b40e      	push	{r1, r2, r3}
 8028676:	b503      	push	{r0, r1, lr}
 8028678:	4601      	mov	r1, r0
 802867a:	ab03      	add	r3, sp, #12
 802867c:	4805      	ldr	r0, [pc, #20]	; (8028694 <fiprintf+0x20>)
 802867e:	f853 2b04 	ldr.w	r2, [r3], #4
 8028682:	6800      	ldr	r0, [r0, #0]
 8028684:	9301      	str	r3, [sp, #4]
 8028686:	f000 f925 	bl	80288d4 <_vfiprintf_r>
 802868a:	b002      	add	sp, #8
 802868c:	f85d eb04 	ldr.w	lr, [sp], #4
 8028690:	b003      	add	sp, #12
 8028692:	4770      	bx	lr
 8028694:	200000d8 	.word	0x200000d8

08028698 <__libc_init_array>:
 8028698:	b570      	push	{r4, r5, r6, lr}
 802869a:	4d0d      	ldr	r5, [pc, #52]	; (80286d0 <__libc_init_array+0x38>)
 802869c:	4c0d      	ldr	r4, [pc, #52]	; (80286d4 <__libc_init_array+0x3c>)
 802869e:	1b64      	subs	r4, r4, r5
 80286a0:	10a4      	asrs	r4, r4, #2
 80286a2:	2600      	movs	r6, #0
 80286a4:	42a6      	cmp	r6, r4
 80286a6:	d109      	bne.n	80286bc <__libc_init_array+0x24>
 80286a8:	4d0b      	ldr	r5, [pc, #44]	; (80286d8 <__libc_init_array+0x40>)
 80286aa:	4c0c      	ldr	r4, [pc, #48]	; (80286dc <__libc_init_array+0x44>)
 80286ac:	f001 f824 	bl	80296f8 <_init>
 80286b0:	1b64      	subs	r4, r4, r5
 80286b2:	10a4      	asrs	r4, r4, #2
 80286b4:	2600      	movs	r6, #0
 80286b6:	42a6      	cmp	r6, r4
 80286b8:	d105      	bne.n	80286c6 <__libc_init_array+0x2e>
 80286ba:	bd70      	pop	{r4, r5, r6, pc}
 80286bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80286c0:	4798      	blx	r3
 80286c2:	3601      	adds	r6, #1
 80286c4:	e7ee      	b.n	80286a4 <__libc_init_array+0xc>
 80286c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80286ca:	4798      	blx	r3
 80286cc:	3601      	adds	r6, #1
 80286ce:	e7f2      	b.n	80286b6 <__libc_init_array+0x1e>
 80286d0:	080658d0 	.word	0x080658d0
 80286d4:	080658d0 	.word	0x080658d0
 80286d8:	080658d0 	.word	0x080658d0
 80286dc:	080658e4 	.word	0x080658e4

080286e0 <malloc>:
 80286e0:	4b02      	ldr	r3, [pc, #8]	; (80286ec <malloc+0xc>)
 80286e2:	4601      	mov	r1, r0
 80286e4:	6818      	ldr	r0, [r3, #0]
 80286e6:	f000 b871 	b.w	80287cc <_malloc_r>
 80286ea:	bf00      	nop
 80286ec:	200000d8 	.word	0x200000d8

080286f0 <free>:
 80286f0:	4b02      	ldr	r3, [pc, #8]	; (80286fc <free+0xc>)
 80286f2:	4601      	mov	r1, r0
 80286f4:	6818      	ldr	r0, [r3, #0]
 80286f6:	f000 b819 	b.w	802872c <_free_r>
 80286fa:	bf00      	nop
 80286fc:	200000d8 	.word	0x200000d8

08028700 <memcpy>:
 8028700:	440a      	add	r2, r1
 8028702:	4291      	cmp	r1, r2
 8028704:	f100 33ff 	add.w	r3, r0, #4294967295
 8028708:	d100      	bne.n	802870c <memcpy+0xc>
 802870a:	4770      	bx	lr
 802870c:	b510      	push	{r4, lr}
 802870e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028716:	4291      	cmp	r1, r2
 8028718:	d1f9      	bne.n	802870e <memcpy+0xe>
 802871a:	bd10      	pop	{r4, pc}

0802871c <memset>:
 802871c:	4402      	add	r2, r0
 802871e:	4603      	mov	r3, r0
 8028720:	4293      	cmp	r3, r2
 8028722:	d100      	bne.n	8028726 <memset+0xa>
 8028724:	4770      	bx	lr
 8028726:	f803 1b01 	strb.w	r1, [r3], #1
 802872a:	e7f9      	b.n	8028720 <memset+0x4>

0802872c <_free_r>:
 802872c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802872e:	2900      	cmp	r1, #0
 8028730:	d048      	beq.n	80287c4 <_free_r+0x98>
 8028732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028736:	9001      	str	r0, [sp, #4]
 8028738:	2b00      	cmp	r3, #0
 802873a:	f1a1 0404 	sub.w	r4, r1, #4
 802873e:	bfb8      	it	lt
 8028740:	18e4      	addlt	r4, r4, r3
 8028742:	f000 ff21 	bl	8029588 <__malloc_lock>
 8028746:	4a20      	ldr	r2, [pc, #128]	; (80287c8 <_free_r+0x9c>)
 8028748:	9801      	ldr	r0, [sp, #4]
 802874a:	6813      	ldr	r3, [r2, #0]
 802874c:	4615      	mov	r5, r2
 802874e:	b933      	cbnz	r3, 802875e <_free_r+0x32>
 8028750:	6063      	str	r3, [r4, #4]
 8028752:	6014      	str	r4, [r2, #0]
 8028754:	b003      	add	sp, #12
 8028756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802875a:	f000 bf1b 	b.w	8029594 <__malloc_unlock>
 802875e:	42a3      	cmp	r3, r4
 8028760:	d90b      	bls.n	802877a <_free_r+0x4e>
 8028762:	6821      	ldr	r1, [r4, #0]
 8028764:	1862      	adds	r2, r4, r1
 8028766:	4293      	cmp	r3, r2
 8028768:	bf04      	itt	eq
 802876a:	681a      	ldreq	r2, [r3, #0]
 802876c:	685b      	ldreq	r3, [r3, #4]
 802876e:	6063      	str	r3, [r4, #4]
 8028770:	bf04      	itt	eq
 8028772:	1852      	addeq	r2, r2, r1
 8028774:	6022      	streq	r2, [r4, #0]
 8028776:	602c      	str	r4, [r5, #0]
 8028778:	e7ec      	b.n	8028754 <_free_r+0x28>
 802877a:	461a      	mov	r2, r3
 802877c:	685b      	ldr	r3, [r3, #4]
 802877e:	b10b      	cbz	r3, 8028784 <_free_r+0x58>
 8028780:	42a3      	cmp	r3, r4
 8028782:	d9fa      	bls.n	802877a <_free_r+0x4e>
 8028784:	6811      	ldr	r1, [r2, #0]
 8028786:	1855      	adds	r5, r2, r1
 8028788:	42a5      	cmp	r5, r4
 802878a:	d10b      	bne.n	80287a4 <_free_r+0x78>
 802878c:	6824      	ldr	r4, [r4, #0]
 802878e:	4421      	add	r1, r4
 8028790:	1854      	adds	r4, r2, r1
 8028792:	42a3      	cmp	r3, r4
 8028794:	6011      	str	r1, [r2, #0]
 8028796:	d1dd      	bne.n	8028754 <_free_r+0x28>
 8028798:	681c      	ldr	r4, [r3, #0]
 802879a:	685b      	ldr	r3, [r3, #4]
 802879c:	6053      	str	r3, [r2, #4]
 802879e:	4421      	add	r1, r4
 80287a0:	6011      	str	r1, [r2, #0]
 80287a2:	e7d7      	b.n	8028754 <_free_r+0x28>
 80287a4:	d902      	bls.n	80287ac <_free_r+0x80>
 80287a6:	230c      	movs	r3, #12
 80287a8:	6003      	str	r3, [r0, #0]
 80287aa:	e7d3      	b.n	8028754 <_free_r+0x28>
 80287ac:	6825      	ldr	r5, [r4, #0]
 80287ae:	1961      	adds	r1, r4, r5
 80287b0:	428b      	cmp	r3, r1
 80287b2:	bf04      	itt	eq
 80287b4:	6819      	ldreq	r1, [r3, #0]
 80287b6:	685b      	ldreq	r3, [r3, #4]
 80287b8:	6063      	str	r3, [r4, #4]
 80287ba:	bf04      	itt	eq
 80287bc:	1949      	addeq	r1, r1, r5
 80287be:	6021      	streq	r1, [r4, #0]
 80287c0:	6054      	str	r4, [r2, #4]
 80287c2:	e7c7      	b.n	8028754 <_free_r+0x28>
 80287c4:	b003      	add	sp, #12
 80287c6:	bd30      	pop	{r4, r5, pc}
 80287c8:	2000c00c 	.word	0x2000c00c

080287cc <_malloc_r>:
 80287cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80287ce:	1ccd      	adds	r5, r1, #3
 80287d0:	f025 0503 	bic.w	r5, r5, #3
 80287d4:	3508      	adds	r5, #8
 80287d6:	2d0c      	cmp	r5, #12
 80287d8:	bf38      	it	cc
 80287da:	250c      	movcc	r5, #12
 80287dc:	2d00      	cmp	r5, #0
 80287de:	4606      	mov	r6, r0
 80287e0:	db01      	blt.n	80287e6 <_malloc_r+0x1a>
 80287e2:	42a9      	cmp	r1, r5
 80287e4:	d903      	bls.n	80287ee <_malloc_r+0x22>
 80287e6:	230c      	movs	r3, #12
 80287e8:	6033      	str	r3, [r6, #0]
 80287ea:	2000      	movs	r0, #0
 80287ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80287ee:	f000 fecb 	bl	8029588 <__malloc_lock>
 80287f2:	4921      	ldr	r1, [pc, #132]	; (8028878 <_malloc_r+0xac>)
 80287f4:	680a      	ldr	r2, [r1, #0]
 80287f6:	4614      	mov	r4, r2
 80287f8:	b99c      	cbnz	r4, 8028822 <_malloc_r+0x56>
 80287fa:	4f20      	ldr	r7, [pc, #128]	; (802887c <_malloc_r+0xb0>)
 80287fc:	683b      	ldr	r3, [r7, #0]
 80287fe:	b923      	cbnz	r3, 802880a <_malloc_r+0x3e>
 8028800:	4621      	mov	r1, r4
 8028802:	4630      	mov	r0, r6
 8028804:	f000 fb2a 	bl	8028e5c <_sbrk_r>
 8028808:	6038      	str	r0, [r7, #0]
 802880a:	4629      	mov	r1, r5
 802880c:	4630      	mov	r0, r6
 802880e:	f000 fb25 	bl	8028e5c <_sbrk_r>
 8028812:	1c43      	adds	r3, r0, #1
 8028814:	d123      	bne.n	802885e <_malloc_r+0x92>
 8028816:	230c      	movs	r3, #12
 8028818:	6033      	str	r3, [r6, #0]
 802881a:	4630      	mov	r0, r6
 802881c:	f000 feba 	bl	8029594 <__malloc_unlock>
 8028820:	e7e3      	b.n	80287ea <_malloc_r+0x1e>
 8028822:	6823      	ldr	r3, [r4, #0]
 8028824:	1b5b      	subs	r3, r3, r5
 8028826:	d417      	bmi.n	8028858 <_malloc_r+0x8c>
 8028828:	2b0b      	cmp	r3, #11
 802882a:	d903      	bls.n	8028834 <_malloc_r+0x68>
 802882c:	6023      	str	r3, [r4, #0]
 802882e:	441c      	add	r4, r3
 8028830:	6025      	str	r5, [r4, #0]
 8028832:	e004      	b.n	802883e <_malloc_r+0x72>
 8028834:	6863      	ldr	r3, [r4, #4]
 8028836:	42a2      	cmp	r2, r4
 8028838:	bf0c      	ite	eq
 802883a:	600b      	streq	r3, [r1, #0]
 802883c:	6053      	strne	r3, [r2, #4]
 802883e:	4630      	mov	r0, r6
 8028840:	f000 fea8 	bl	8029594 <__malloc_unlock>
 8028844:	f104 000b 	add.w	r0, r4, #11
 8028848:	1d23      	adds	r3, r4, #4
 802884a:	f020 0007 	bic.w	r0, r0, #7
 802884e:	1ac2      	subs	r2, r0, r3
 8028850:	d0cc      	beq.n	80287ec <_malloc_r+0x20>
 8028852:	1a1b      	subs	r3, r3, r0
 8028854:	50a3      	str	r3, [r4, r2]
 8028856:	e7c9      	b.n	80287ec <_malloc_r+0x20>
 8028858:	4622      	mov	r2, r4
 802885a:	6864      	ldr	r4, [r4, #4]
 802885c:	e7cc      	b.n	80287f8 <_malloc_r+0x2c>
 802885e:	1cc4      	adds	r4, r0, #3
 8028860:	f024 0403 	bic.w	r4, r4, #3
 8028864:	42a0      	cmp	r0, r4
 8028866:	d0e3      	beq.n	8028830 <_malloc_r+0x64>
 8028868:	1a21      	subs	r1, r4, r0
 802886a:	4630      	mov	r0, r6
 802886c:	f000 faf6 	bl	8028e5c <_sbrk_r>
 8028870:	3001      	adds	r0, #1
 8028872:	d1dd      	bne.n	8028830 <_malloc_r+0x64>
 8028874:	e7cf      	b.n	8028816 <_malloc_r+0x4a>
 8028876:	bf00      	nop
 8028878:	2000c00c 	.word	0x2000c00c
 802887c:	2000c010 	.word	0x2000c010

08028880 <__sfputc_r>:
 8028880:	6893      	ldr	r3, [r2, #8]
 8028882:	3b01      	subs	r3, #1
 8028884:	2b00      	cmp	r3, #0
 8028886:	b410      	push	{r4}
 8028888:	6093      	str	r3, [r2, #8]
 802888a:	da08      	bge.n	802889e <__sfputc_r+0x1e>
 802888c:	6994      	ldr	r4, [r2, #24]
 802888e:	42a3      	cmp	r3, r4
 8028890:	db01      	blt.n	8028896 <__sfputc_r+0x16>
 8028892:	290a      	cmp	r1, #10
 8028894:	d103      	bne.n	802889e <__sfputc_r+0x1e>
 8028896:	f85d 4b04 	ldr.w	r4, [sp], #4
 802889a:	f000 bb33 	b.w	8028f04 <__swbuf_r>
 802889e:	6813      	ldr	r3, [r2, #0]
 80288a0:	1c58      	adds	r0, r3, #1
 80288a2:	6010      	str	r0, [r2, #0]
 80288a4:	7019      	strb	r1, [r3, #0]
 80288a6:	4608      	mov	r0, r1
 80288a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80288ac:	4770      	bx	lr

080288ae <__sfputs_r>:
 80288ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288b0:	4606      	mov	r6, r0
 80288b2:	460f      	mov	r7, r1
 80288b4:	4614      	mov	r4, r2
 80288b6:	18d5      	adds	r5, r2, r3
 80288b8:	42ac      	cmp	r4, r5
 80288ba:	d101      	bne.n	80288c0 <__sfputs_r+0x12>
 80288bc:	2000      	movs	r0, #0
 80288be:	e007      	b.n	80288d0 <__sfputs_r+0x22>
 80288c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80288c4:	463a      	mov	r2, r7
 80288c6:	4630      	mov	r0, r6
 80288c8:	f7ff ffda 	bl	8028880 <__sfputc_r>
 80288cc:	1c43      	adds	r3, r0, #1
 80288ce:	d1f3      	bne.n	80288b8 <__sfputs_r+0xa>
 80288d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080288d4 <_vfiprintf_r>:
 80288d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288d8:	460d      	mov	r5, r1
 80288da:	b09d      	sub	sp, #116	; 0x74
 80288dc:	4614      	mov	r4, r2
 80288de:	4698      	mov	r8, r3
 80288e0:	4606      	mov	r6, r0
 80288e2:	b118      	cbz	r0, 80288ec <_vfiprintf_r+0x18>
 80288e4:	6983      	ldr	r3, [r0, #24]
 80288e6:	b90b      	cbnz	r3, 80288ec <_vfiprintf_r+0x18>
 80288e8:	f000 fd48 	bl	802937c <__sinit>
 80288ec:	4b89      	ldr	r3, [pc, #548]	; (8028b14 <_vfiprintf_r+0x240>)
 80288ee:	429d      	cmp	r5, r3
 80288f0:	d11b      	bne.n	802892a <_vfiprintf_r+0x56>
 80288f2:	6875      	ldr	r5, [r6, #4]
 80288f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80288f6:	07d9      	lsls	r1, r3, #31
 80288f8:	d405      	bmi.n	8028906 <_vfiprintf_r+0x32>
 80288fa:	89ab      	ldrh	r3, [r5, #12]
 80288fc:	059a      	lsls	r2, r3, #22
 80288fe:	d402      	bmi.n	8028906 <_vfiprintf_r+0x32>
 8028900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028902:	f000 fdd9 	bl	80294b8 <__retarget_lock_acquire_recursive>
 8028906:	89ab      	ldrh	r3, [r5, #12]
 8028908:	071b      	lsls	r3, r3, #28
 802890a:	d501      	bpl.n	8028910 <_vfiprintf_r+0x3c>
 802890c:	692b      	ldr	r3, [r5, #16]
 802890e:	b9eb      	cbnz	r3, 802894c <_vfiprintf_r+0x78>
 8028910:	4629      	mov	r1, r5
 8028912:	4630      	mov	r0, r6
 8028914:	f000 fb48 	bl	8028fa8 <__swsetup_r>
 8028918:	b1c0      	cbz	r0, 802894c <_vfiprintf_r+0x78>
 802891a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802891c:	07dc      	lsls	r4, r3, #31
 802891e:	d50e      	bpl.n	802893e <_vfiprintf_r+0x6a>
 8028920:	f04f 30ff 	mov.w	r0, #4294967295
 8028924:	b01d      	add	sp, #116	; 0x74
 8028926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802892a:	4b7b      	ldr	r3, [pc, #492]	; (8028b18 <_vfiprintf_r+0x244>)
 802892c:	429d      	cmp	r5, r3
 802892e:	d101      	bne.n	8028934 <_vfiprintf_r+0x60>
 8028930:	68b5      	ldr	r5, [r6, #8]
 8028932:	e7df      	b.n	80288f4 <_vfiprintf_r+0x20>
 8028934:	4b79      	ldr	r3, [pc, #484]	; (8028b1c <_vfiprintf_r+0x248>)
 8028936:	429d      	cmp	r5, r3
 8028938:	bf08      	it	eq
 802893a:	68f5      	ldreq	r5, [r6, #12]
 802893c:	e7da      	b.n	80288f4 <_vfiprintf_r+0x20>
 802893e:	89ab      	ldrh	r3, [r5, #12]
 8028940:	0598      	lsls	r0, r3, #22
 8028942:	d4ed      	bmi.n	8028920 <_vfiprintf_r+0x4c>
 8028944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028946:	f000 fdb9 	bl	80294bc <__retarget_lock_release_recursive>
 802894a:	e7e9      	b.n	8028920 <_vfiprintf_r+0x4c>
 802894c:	2300      	movs	r3, #0
 802894e:	9309      	str	r3, [sp, #36]	; 0x24
 8028950:	2320      	movs	r3, #32
 8028952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028956:	f8cd 800c 	str.w	r8, [sp, #12]
 802895a:	2330      	movs	r3, #48	; 0x30
 802895c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028b20 <_vfiprintf_r+0x24c>
 8028960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028964:	f04f 0901 	mov.w	r9, #1
 8028968:	4623      	mov	r3, r4
 802896a:	469a      	mov	sl, r3
 802896c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028970:	b10a      	cbz	r2, 8028976 <_vfiprintf_r+0xa2>
 8028972:	2a25      	cmp	r2, #37	; 0x25
 8028974:	d1f9      	bne.n	802896a <_vfiprintf_r+0x96>
 8028976:	ebba 0b04 	subs.w	fp, sl, r4
 802897a:	d00b      	beq.n	8028994 <_vfiprintf_r+0xc0>
 802897c:	465b      	mov	r3, fp
 802897e:	4622      	mov	r2, r4
 8028980:	4629      	mov	r1, r5
 8028982:	4630      	mov	r0, r6
 8028984:	f7ff ff93 	bl	80288ae <__sfputs_r>
 8028988:	3001      	adds	r0, #1
 802898a:	f000 80aa 	beq.w	8028ae2 <_vfiprintf_r+0x20e>
 802898e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028990:	445a      	add	r2, fp
 8028992:	9209      	str	r2, [sp, #36]	; 0x24
 8028994:	f89a 3000 	ldrb.w	r3, [sl]
 8028998:	2b00      	cmp	r3, #0
 802899a:	f000 80a2 	beq.w	8028ae2 <_vfiprintf_r+0x20e>
 802899e:	2300      	movs	r3, #0
 80289a0:	f04f 32ff 	mov.w	r2, #4294967295
 80289a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80289a8:	f10a 0a01 	add.w	sl, sl, #1
 80289ac:	9304      	str	r3, [sp, #16]
 80289ae:	9307      	str	r3, [sp, #28]
 80289b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80289b4:	931a      	str	r3, [sp, #104]	; 0x68
 80289b6:	4654      	mov	r4, sl
 80289b8:	2205      	movs	r2, #5
 80289ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80289be:	4858      	ldr	r0, [pc, #352]	; (8028b20 <_vfiprintf_r+0x24c>)
 80289c0:	f7d7 fc26 	bl	8000210 <memchr>
 80289c4:	9a04      	ldr	r2, [sp, #16]
 80289c6:	b9d8      	cbnz	r0, 8028a00 <_vfiprintf_r+0x12c>
 80289c8:	06d1      	lsls	r1, r2, #27
 80289ca:	bf44      	itt	mi
 80289cc:	2320      	movmi	r3, #32
 80289ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80289d2:	0713      	lsls	r3, r2, #28
 80289d4:	bf44      	itt	mi
 80289d6:	232b      	movmi	r3, #43	; 0x2b
 80289d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80289dc:	f89a 3000 	ldrb.w	r3, [sl]
 80289e0:	2b2a      	cmp	r3, #42	; 0x2a
 80289e2:	d015      	beq.n	8028a10 <_vfiprintf_r+0x13c>
 80289e4:	9a07      	ldr	r2, [sp, #28]
 80289e6:	4654      	mov	r4, sl
 80289e8:	2000      	movs	r0, #0
 80289ea:	f04f 0c0a 	mov.w	ip, #10
 80289ee:	4621      	mov	r1, r4
 80289f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80289f4:	3b30      	subs	r3, #48	; 0x30
 80289f6:	2b09      	cmp	r3, #9
 80289f8:	d94e      	bls.n	8028a98 <_vfiprintf_r+0x1c4>
 80289fa:	b1b0      	cbz	r0, 8028a2a <_vfiprintf_r+0x156>
 80289fc:	9207      	str	r2, [sp, #28]
 80289fe:	e014      	b.n	8028a2a <_vfiprintf_r+0x156>
 8028a00:	eba0 0308 	sub.w	r3, r0, r8
 8028a04:	fa09 f303 	lsl.w	r3, r9, r3
 8028a08:	4313      	orrs	r3, r2
 8028a0a:	9304      	str	r3, [sp, #16]
 8028a0c:	46a2      	mov	sl, r4
 8028a0e:	e7d2      	b.n	80289b6 <_vfiprintf_r+0xe2>
 8028a10:	9b03      	ldr	r3, [sp, #12]
 8028a12:	1d19      	adds	r1, r3, #4
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	9103      	str	r1, [sp, #12]
 8028a18:	2b00      	cmp	r3, #0
 8028a1a:	bfbb      	ittet	lt
 8028a1c:	425b      	neglt	r3, r3
 8028a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8028a22:	9307      	strge	r3, [sp, #28]
 8028a24:	9307      	strlt	r3, [sp, #28]
 8028a26:	bfb8      	it	lt
 8028a28:	9204      	strlt	r2, [sp, #16]
 8028a2a:	7823      	ldrb	r3, [r4, #0]
 8028a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8028a2e:	d10c      	bne.n	8028a4a <_vfiprintf_r+0x176>
 8028a30:	7863      	ldrb	r3, [r4, #1]
 8028a32:	2b2a      	cmp	r3, #42	; 0x2a
 8028a34:	d135      	bne.n	8028aa2 <_vfiprintf_r+0x1ce>
 8028a36:	9b03      	ldr	r3, [sp, #12]
 8028a38:	1d1a      	adds	r2, r3, #4
 8028a3a:	681b      	ldr	r3, [r3, #0]
 8028a3c:	9203      	str	r2, [sp, #12]
 8028a3e:	2b00      	cmp	r3, #0
 8028a40:	bfb8      	it	lt
 8028a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8028a46:	3402      	adds	r4, #2
 8028a48:	9305      	str	r3, [sp, #20]
 8028a4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028b30 <_vfiprintf_r+0x25c>
 8028a4e:	7821      	ldrb	r1, [r4, #0]
 8028a50:	2203      	movs	r2, #3
 8028a52:	4650      	mov	r0, sl
 8028a54:	f7d7 fbdc 	bl	8000210 <memchr>
 8028a58:	b140      	cbz	r0, 8028a6c <_vfiprintf_r+0x198>
 8028a5a:	2340      	movs	r3, #64	; 0x40
 8028a5c:	eba0 000a 	sub.w	r0, r0, sl
 8028a60:	fa03 f000 	lsl.w	r0, r3, r0
 8028a64:	9b04      	ldr	r3, [sp, #16]
 8028a66:	4303      	orrs	r3, r0
 8028a68:	3401      	adds	r4, #1
 8028a6a:	9304      	str	r3, [sp, #16]
 8028a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028a70:	482c      	ldr	r0, [pc, #176]	; (8028b24 <_vfiprintf_r+0x250>)
 8028a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028a76:	2206      	movs	r2, #6
 8028a78:	f7d7 fbca 	bl	8000210 <memchr>
 8028a7c:	2800      	cmp	r0, #0
 8028a7e:	d03f      	beq.n	8028b00 <_vfiprintf_r+0x22c>
 8028a80:	4b29      	ldr	r3, [pc, #164]	; (8028b28 <_vfiprintf_r+0x254>)
 8028a82:	bb1b      	cbnz	r3, 8028acc <_vfiprintf_r+0x1f8>
 8028a84:	9b03      	ldr	r3, [sp, #12]
 8028a86:	3307      	adds	r3, #7
 8028a88:	f023 0307 	bic.w	r3, r3, #7
 8028a8c:	3308      	adds	r3, #8
 8028a8e:	9303      	str	r3, [sp, #12]
 8028a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a92:	443b      	add	r3, r7
 8028a94:	9309      	str	r3, [sp, #36]	; 0x24
 8028a96:	e767      	b.n	8028968 <_vfiprintf_r+0x94>
 8028a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8028a9c:	460c      	mov	r4, r1
 8028a9e:	2001      	movs	r0, #1
 8028aa0:	e7a5      	b.n	80289ee <_vfiprintf_r+0x11a>
 8028aa2:	2300      	movs	r3, #0
 8028aa4:	3401      	adds	r4, #1
 8028aa6:	9305      	str	r3, [sp, #20]
 8028aa8:	4619      	mov	r1, r3
 8028aaa:	f04f 0c0a 	mov.w	ip, #10
 8028aae:	4620      	mov	r0, r4
 8028ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028ab4:	3a30      	subs	r2, #48	; 0x30
 8028ab6:	2a09      	cmp	r2, #9
 8028ab8:	d903      	bls.n	8028ac2 <_vfiprintf_r+0x1ee>
 8028aba:	2b00      	cmp	r3, #0
 8028abc:	d0c5      	beq.n	8028a4a <_vfiprintf_r+0x176>
 8028abe:	9105      	str	r1, [sp, #20]
 8028ac0:	e7c3      	b.n	8028a4a <_vfiprintf_r+0x176>
 8028ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8028ac6:	4604      	mov	r4, r0
 8028ac8:	2301      	movs	r3, #1
 8028aca:	e7f0      	b.n	8028aae <_vfiprintf_r+0x1da>
 8028acc:	ab03      	add	r3, sp, #12
 8028ace:	9300      	str	r3, [sp, #0]
 8028ad0:	462a      	mov	r2, r5
 8028ad2:	4b16      	ldr	r3, [pc, #88]	; (8028b2c <_vfiprintf_r+0x258>)
 8028ad4:	a904      	add	r1, sp, #16
 8028ad6:	4630      	mov	r0, r6
 8028ad8:	f3af 8000 	nop.w
 8028adc:	4607      	mov	r7, r0
 8028ade:	1c78      	adds	r0, r7, #1
 8028ae0:	d1d6      	bne.n	8028a90 <_vfiprintf_r+0x1bc>
 8028ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028ae4:	07d9      	lsls	r1, r3, #31
 8028ae6:	d405      	bmi.n	8028af4 <_vfiprintf_r+0x220>
 8028ae8:	89ab      	ldrh	r3, [r5, #12]
 8028aea:	059a      	lsls	r2, r3, #22
 8028aec:	d402      	bmi.n	8028af4 <_vfiprintf_r+0x220>
 8028aee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028af0:	f000 fce4 	bl	80294bc <__retarget_lock_release_recursive>
 8028af4:	89ab      	ldrh	r3, [r5, #12]
 8028af6:	065b      	lsls	r3, r3, #25
 8028af8:	f53f af12 	bmi.w	8028920 <_vfiprintf_r+0x4c>
 8028afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028afe:	e711      	b.n	8028924 <_vfiprintf_r+0x50>
 8028b00:	ab03      	add	r3, sp, #12
 8028b02:	9300      	str	r3, [sp, #0]
 8028b04:	462a      	mov	r2, r5
 8028b06:	4b09      	ldr	r3, [pc, #36]	; (8028b2c <_vfiprintf_r+0x258>)
 8028b08:	a904      	add	r1, sp, #16
 8028b0a:	4630      	mov	r0, r6
 8028b0c:	f000 f880 	bl	8028c10 <_printf_i>
 8028b10:	e7e4      	b.n	8028adc <_vfiprintf_r+0x208>
 8028b12:	bf00      	nop
 8028b14:	0802e234 	.word	0x0802e234
 8028b18:	0802e254 	.word	0x0802e254
 8028b1c:	0802e214 	.word	0x0802e214
 8028b20:	0802e1dc 	.word	0x0802e1dc
 8028b24:	0802e1e6 	.word	0x0802e1e6
 8028b28:	00000000 	.word	0x00000000
 8028b2c:	080288af 	.word	0x080288af
 8028b30:	0802e1e2 	.word	0x0802e1e2

08028b34 <_printf_common>:
 8028b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028b38:	4616      	mov	r6, r2
 8028b3a:	4699      	mov	r9, r3
 8028b3c:	688a      	ldr	r2, [r1, #8]
 8028b3e:	690b      	ldr	r3, [r1, #16]
 8028b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028b44:	4293      	cmp	r3, r2
 8028b46:	bfb8      	it	lt
 8028b48:	4613      	movlt	r3, r2
 8028b4a:	6033      	str	r3, [r6, #0]
 8028b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028b50:	4607      	mov	r7, r0
 8028b52:	460c      	mov	r4, r1
 8028b54:	b10a      	cbz	r2, 8028b5a <_printf_common+0x26>
 8028b56:	3301      	adds	r3, #1
 8028b58:	6033      	str	r3, [r6, #0]
 8028b5a:	6823      	ldr	r3, [r4, #0]
 8028b5c:	0699      	lsls	r1, r3, #26
 8028b5e:	bf42      	ittt	mi
 8028b60:	6833      	ldrmi	r3, [r6, #0]
 8028b62:	3302      	addmi	r3, #2
 8028b64:	6033      	strmi	r3, [r6, #0]
 8028b66:	6825      	ldr	r5, [r4, #0]
 8028b68:	f015 0506 	ands.w	r5, r5, #6
 8028b6c:	d106      	bne.n	8028b7c <_printf_common+0x48>
 8028b6e:	f104 0a19 	add.w	sl, r4, #25
 8028b72:	68e3      	ldr	r3, [r4, #12]
 8028b74:	6832      	ldr	r2, [r6, #0]
 8028b76:	1a9b      	subs	r3, r3, r2
 8028b78:	42ab      	cmp	r3, r5
 8028b7a:	dc26      	bgt.n	8028bca <_printf_common+0x96>
 8028b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028b80:	1e13      	subs	r3, r2, #0
 8028b82:	6822      	ldr	r2, [r4, #0]
 8028b84:	bf18      	it	ne
 8028b86:	2301      	movne	r3, #1
 8028b88:	0692      	lsls	r2, r2, #26
 8028b8a:	d42b      	bmi.n	8028be4 <_printf_common+0xb0>
 8028b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028b90:	4649      	mov	r1, r9
 8028b92:	4638      	mov	r0, r7
 8028b94:	47c0      	blx	r8
 8028b96:	3001      	adds	r0, #1
 8028b98:	d01e      	beq.n	8028bd8 <_printf_common+0xa4>
 8028b9a:	6823      	ldr	r3, [r4, #0]
 8028b9c:	68e5      	ldr	r5, [r4, #12]
 8028b9e:	6832      	ldr	r2, [r6, #0]
 8028ba0:	f003 0306 	and.w	r3, r3, #6
 8028ba4:	2b04      	cmp	r3, #4
 8028ba6:	bf08      	it	eq
 8028ba8:	1aad      	subeq	r5, r5, r2
 8028baa:	68a3      	ldr	r3, [r4, #8]
 8028bac:	6922      	ldr	r2, [r4, #16]
 8028bae:	bf0c      	ite	eq
 8028bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028bb4:	2500      	movne	r5, #0
 8028bb6:	4293      	cmp	r3, r2
 8028bb8:	bfc4      	itt	gt
 8028bba:	1a9b      	subgt	r3, r3, r2
 8028bbc:	18ed      	addgt	r5, r5, r3
 8028bbe:	2600      	movs	r6, #0
 8028bc0:	341a      	adds	r4, #26
 8028bc2:	42b5      	cmp	r5, r6
 8028bc4:	d11a      	bne.n	8028bfc <_printf_common+0xc8>
 8028bc6:	2000      	movs	r0, #0
 8028bc8:	e008      	b.n	8028bdc <_printf_common+0xa8>
 8028bca:	2301      	movs	r3, #1
 8028bcc:	4652      	mov	r2, sl
 8028bce:	4649      	mov	r1, r9
 8028bd0:	4638      	mov	r0, r7
 8028bd2:	47c0      	blx	r8
 8028bd4:	3001      	adds	r0, #1
 8028bd6:	d103      	bne.n	8028be0 <_printf_common+0xac>
 8028bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8028bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028be0:	3501      	adds	r5, #1
 8028be2:	e7c6      	b.n	8028b72 <_printf_common+0x3e>
 8028be4:	18e1      	adds	r1, r4, r3
 8028be6:	1c5a      	adds	r2, r3, #1
 8028be8:	2030      	movs	r0, #48	; 0x30
 8028bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028bee:	4422      	add	r2, r4
 8028bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028bf8:	3302      	adds	r3, #2
 8028bfa:	e7c7      	b.n	8028b8c <_printf_common+0x58>
 8028bfc:	2301      	movs	r3, #1
 8028bfe:	4622      	mov	r2, r4
 8028c00:	4649      	mov	r1, r9
 8028c02:	4638      	mov	r0, r7
 8028c04:	47c0      	blx	r8
 8028c06:	3001      	adds	r0, #1
 8028c08:	d0e6      	beq.n	8028bd8 <_printf_common+0xa4>
 8028c0a:	3601      	adds	r6, #1
 8028c0c:	e7d9      	b.n	8028bc2 <_printf_common+0x8e>
	...

08028c10 <_printf_i>:
 8028c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028c14:	460c      	mov	r4, r1
 8028c16:	4691      	mov	r9, r2
 8028c18:	7e27      	ldrb	r7, [r4, #24]
 8028c1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028c1c:	2f78      	cmp	r7, #120	; 0x78
 8028c1e:	4680      	mov	r8, r0
 8028c20:	469a      	mov	sl, r3
 8028c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028c26:	d807      	bhi.n	8028c38 <_printf_i+0x28>
 8028c28:	2f62      	cmp	r7, #98	; 0x62
 8028c2a:	d80a      	bhi.n	8028c42 <_printf_i+0x32>
 8028c2c:	2f00      	cmp	r7, #0
 8028c2e:	f000 80d8 	beq.w	8028de2 <_printf_i+0x1d2>
 8028c32:	2f58      	cmp	r7, #88	; 0x58
 8028c34:	f000 80a3 	beq.w	8028d7e <_printf_i+0x16e>
 8028c38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8028c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028c40:	e03a      	b.n	8028cb8 <_printf_i+0xa8>
 8028c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028c46:	2b15      	cmp	r3, #21
 8028c48:	d8f6      	bhi.n	8028c38 <_printf_i+0x28>
 8028c4a:	a001      	add	r0, pc, #4	; (adr r0, 8028c50 <_printf_i+0x40>)
 8028c4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8028c50:	08028ca9 	.word	0x08028ca9
 8028c54:	08028cbd 	.word	0x08028cbd
 8028c58:	08028c39 	.word	0x08028c39
 8028c5c:	08028c39 	.word	0x08028c39
 8028c60:	08028c39 	.word	0x08028c39
 8028c64:	08028c39 	.word	0x08028c39
 8028c68:	08028cbd 	.word	0x08028cbd
 8028c6c:	08028c39 	.word	0x08028c39
 8028c70:	08028c39 	.word	0x08028c39
 8028c74:	08028c39 	.word	0x08028c39
 8028c78:	08028c39 	.word	0x08028c39
 8028c7c:	08028dc9 	.word	0x08028dc9
 8028c80:	08028ced 	.word	0x08028ced
 8028c84:	08028dab 	.word	0x08028dab
 8028c88:	08028c39 	.word	0x08028c39
 8028c8c:	08028c39 	.word	0x08028c39
 8028c90:	08028deb 	.word	0x08028deb
 8028c94:	08028c39 	.word	0x08028c39
 8028c98:	08028ced 	.word	0x08028ced
 8028c9c:	08028c39 	.word	0x08028c39
 8028ca0:	08028c39 	.word	0x08028c39
 8028ca4:	08028db3 	.word	0x08028db3
 8028ca8:	680b      	ldr	r3, [r1, #0]
 8028caa:	1d1a      	adds	r2, r3, #4
 8028cac:	681b      	ldr	r3, [r3, #0]
 8028cae:	600a      	str	r2, [r1, #0]
 8028cb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8028cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028cb8:	2301      	movs	r3, #1
 8028cba:	e0a3      	b.n	8028e04 <_printf_i+0x1f4>
 8028cbc:	6825      	ldr	r5, [r4, #0]
 8028cbe:	6808      	ldr	r0, [r1, #0]
 8028cc0:	062e      	lsls	r6, r5, #24
 8028cc2:	f100 0304 	add.w	r3, r0, #4
 8028cc6:	d50a      	bpl.n	8028cde <_printf_i+0xce>
 8028cc8:	6805      	ldr	r5, [r0, #0]
 8028cca:	600b      	str	r3, [r1, #0]
 8028ccc:	2d00      	cmp	r5, #0
 8028cce:	da03      	bge.n	8028cd8 <_printf_i+0xc8>
 8028cd0:	232d      	movs	r3, #45	; 0x2d
 8028cd2:	426d      	negs	r5, r5
 8028cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028cd8:	485e      	ldr	r0, [pc, #376]	; (8028e54 <_printf_i+0x244>)
 8028cda:	230a      	movs	r3, #10
 8028cdc:	e019      	b.n	8028d12 <_printf_i+0x102>
 8028cde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8028ce2:	6805      	ldr	r5, [r0, #0]
 8028ce4:	600b      	str	r3, [r1, #0]
 8028ce6:	bf18      	it	ne
 8028ce8:	b22d      	sxthne	r5, r5
 8028cea:	e7ef      	b.n	8028ccc <_printf_i+0xbc>
 8028cec:	680b      	ldr	r3, [r1, #0]
 8028cee:	6825      	ldr	r5, [r4, #0]
 8028cf0:	1d18      	adds	r0, r3, #4
 8028cf2:	6008      	str	r0, [r1, #0]
 8028cf4:	0628      	lsls	r0, r5, #24
 8028cf6:	d501      	bpl.n	8028cfc <_printf_i+0xec>
 8028cf8:	681d      	ldr	r5, [r3, #0]
 8028cfa:	e002      	b.n	8028d02 <_printf_i+0xf2>
 8028cfc:	0669      	lsls	r1, r5, #25
 8028cfe:	d5fb      	bpl.n	8028cf8 <_printf_i+0xe8>
 8028d00:	881d      	ldrh	r5, [r3, #0]
 8028d02:	4854      	ldr	r0, [pc, #336]	; (8028e54 <_printf_i+0x244>)
 8028d04:	2f6f      	cmp	r7, #111	; 0x6f
 8028d06:	bf0c      	ite	eq
 8028d08:	2308      	moveq	r3, #8
 8028d0a:	230a      	movne	r3, #10
 8028d0c:	2100      	movs	r1, #0
 8028d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028d12:	6866      	ldr	r6, [r4, #4]
 8028d14:	60a6      	str	r6, [r4, #8]
 8028d16:	2e00      	cmp	r6, #0
 8028d18:	bfa2      	ittt	ge
 8028d1a:	6821      	ldrge	r1, [r4, #0]
 8028d1c:	f021 0104 	bicge.w	r1, r1, #4
 8028d20:	6021      	strge	r1, [r4, #0]
 8028d22:	b90d      	cbnz	r5, 8028d28 <_printf_i+0x118>
 8028d24:	2e00      	cmp	r6, #0
 8028d26:	d04d      	beq.n	8028dc4 <_printf_i+0x1b4>
 8028d28:	4616      	mov	r6, r2
 8028d2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8028d2e:	fb03 5711 	mls	r7, r3, r1, r5
 8028d32:	5dc7      	ldrb	r7, [r0, r7]
 8028d34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8028d38:	462f      	mov	r7, r5
 8028d3a:	42bb      	cmp	r3, r7
 8028d3c:	460d      	mov	r5, r1
 8028d3e:	d9f4      	bls.n	8028d2a <_printf_i+0x11a>
 8028d40:	2b08      	cmp	r3, #8
 8028d42:	d10b      	bne.n	8028d5c <_printf_i+0x14c>
 8028d44:	6823      	ldr	r3, [r4, #0]
 8028d46:	07df      	lsls	r7, r3, #31
 8028d48:	d508      	bpl.n	8028d5c <_printf_i+0x14c>
 8028d4a:	6923      	ldr	r3, [r4, #16]
 8028d4c:	6861      	ldr	r1, [r4, #4]
 8028d4e:	4299      	cmp	r1, r3
 8028d50:	bfde      	ittt	le
 8028d52:	2330      	movle	r3, #48	; 0x30
 8028d54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8028d58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8028d5c:	1b92      	subs	r2, r2, r6
 8028d5e:	6122      	str	r2, [r4, #16]
 8028d60:	f8cd a000 	str.w	sl, [sp]
 8028d64:	464b      	mov	r3, r9
 8028d66:	aa03      	add	r2, sp, #12
 8028d68:	4621      	mov	r1, r4
 8028d6a:	4640      	mov	r0, r8
 8028d6c:	f7ff fee2 	bl	8028b34 <_printf_common>
 8028d70:	3001      	adds	r0, #1
 8028d72:	d14c      	bne.n	8028e0e <_printf_i+0x1fe>
 8028d74:	f04f 30ff 	mov.w	r0, #4294967295
 8028d78:	b004      	add	sp, #16
 8028d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028d7e:	4835      	ldr	r0, [pc, #212]	; (8028e54 <_printf_i+0x244>)
 8028d80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8028d84:	6823      	ldr	r3, [r4, #0]
 8028d86:	680e      	ldr	r6, [r1, #0]
 8028d88:	061f      	lsls	r7, r3, #24
 8028d8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8028d8e:	600e      	str	r6, [r1, #0]
 8028d90:	d514      	bpl.n	8028dbc <_printf_i+0x1ac>
 8028d92:	07d9      	lsls	r1, r3, #31
 8028d94:	bf44      	itt	mi
 8028d96:	f043 0320 	orrmi.w	r3, r3, #32
 8028d9a:	6023      	strmi	r3, [r4, #0]
 8028d9c:	b91d      	cbnz	r5, 8028da6 <_printf_i+0x196>
 8028d9e:	6823      	ldr	r3, [r4, #0]
 8028da0:	f023 0320 	bic.w	r3, r3, #32
 8028da4:	6023      	str	r3, [r4, #0]
 8028da6:	2310      	movs	r3, #16
 8028da8:	e7b0      	b.n	8028d0c <_printf_i+0xfc>
 8028daa:	6823      	ldr	r3, [r4, #0]
 8028dac:	f043 0320 	orr.w	r3, r3, #32
 8028db0:	6023      	str	r3, [r4, #0]
 8028db2:	2378      	movs	r3, #120	; 0x78
 8028db4:	4828      	ldr	r0, [pc, #160]	; (8028e58 <_printf_i+0x248>)
 8028db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8028dba:	e7e3      	b.n	8028d84 <_printf_i+0x174>
 8028dbc:	065e      	lsls	r6, r3, #25
 8028dbe:	bf48      	it	mi
 8028dc0:	b2ad      	uxthmi	r5, r5
 8028dc2:	e7e6      	b.n	8028d92 <_printf_i+0x182>
 8028dc4:	4616      	mov	r6, r2
 8028dc6:	e7bb      	b.n	8028d40 <_printf_i+0x130>
 8028dc8:	680b      	ldr	r3, [r1, #0]
 8028dca:	6826      	ldr	r6, [r4, #0]
 8028dcc:	6960      	ldr	r0, [r4, #20]
 8028dce:	1d1d      	adds	r5, r3, #4
 8028dd0:	600d      	str	r5, [r1, #0]
 8028dd2:	0635      	lsls	r5, r6, #24
 8028dd4:	681b      	ldr	r3, [r3, #0]
 8028dd6:	d501      	bpl.n	8028ddc <_printf_i+0x1cc>
 8028dd8:	6018      	str	r0, [r3, #0]
 8028dda:	e002      	b.n	8028de2 <_printf_i+0x1d2>
 8028ddc:	0671      	lsls	r1, r6, #25
 8028dde:	d5fb      	bpl.n	8028dd8 <_printf_i+0x1c8>
 8028de0:	8018      	strh	r0, [r3, #0]
 8028de2:	2300      	movs	r3, #0
 8028de4:	6123      	str	r3, [r4, #16]
 8028de6:	4616      	mov	r6, r2
 8028de8:	e7ba      	b.n	8028d60 <_printf_i+0x150>
 8028dea:	680b      	ldr	r3, [r1, #0]
 8028dec:	1d1a      	adds	r2, r3, #4
 8028dee:	600a      	str	r2, [r1, #0]
 8028df0:	681e      	ldr	r6, [r3, #0]
 8028df2:	6862      	ldr	r2, [r4, #4]
 8028df4:	2100      	movs	r1, #0
 8028df6:	4630      	mov	r0, r6
 8028df8:	f7d7 fa0a 	bl	8000210 <memchr>
 8028dfc:	b108      	cbz	r0, 8028e02 <_printf_i+0x1f2>
 8028dfe:	1b80      	subs	r0, r0, r6
 8028e00:	6060      	str	r0, [r4, #4]
 8028e02:	6863      	ldr	r3, [r4, #4]
 8028e04:	6123      	str	r3, [r4, #16]
 8028e06:	2300      	movs	r3, #0
 8028e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028e0c:	e7a8      	b.n	8028d60 <_printf_i+0x150>
 8028e0e:	6923      	ldr	r3, [r4, #16]
 8028e10:	4632      	mov	r2, r6
 8028e12:	4649      	mov	r1, r9
 8028e14:	4640      	mov	r0, r8
 8028e16:	47d0      	blx	sl
 8028e18:	3001      	adds	r0, #1
 8028e1a:	d0ab      	beq.n	8028d74 <_printf_i+0x164>
 8028e1c:	6823      	ldr	r3, [r4, #0]
 8028e1e:	079b      	lsls	r3, r3, #30
 8028e20:	d413      	bmi.n	8028e4a <_printf_i+0x23a>
 8028e22:	68e0      	ldr	r0, [r4, #12]
 8028e24:	9b03      	ldr	r3, [sp, #12]
 8028e26:	4298      	cmp	r0, r3
 8028e28:	bfb8      	it	lt
 8028e2a:	4618      	movlt	r0, r3
 8028e2c:	e7a4      	b.n	8028d78 <_printf_i+0x168>
 8028e2e:	2301      	movs	r3, #1
 8028e30:	4632      	mov	r2, r6
 8028e32:	4649      	mov	r1, r9
 8028e34:	4640      	mov	r0, r8
 8028e36:	47d0      	blx	sl
 8028e38:	3001      	adds	r0, #1
 8028e3a:	d09b      	beq.n	8028d74 <_printf_i+0x164>
 8028e3c:	3501      	adds	r5, #1
 8028e3e:	68e3      	ldr	r3, [r4, #12]
 8028e40:	9903      	ldr	r1, [sp, #12]
 8028e42:	1a5b      	subs	r3, r3, r1
 8028e44:	42ab      	cmp	r3, r5
 8028e46:	dcf2      	bgt.n	8028e2e <_printf_i+0x21e>
 8028e48:	e7eb      	b.n	8028e22 <_printf_i+0x212>
 8028e4a:	2500      	movs	r5, #0
 8028e4c:	f104 0619 	add.w	r6, r4, #25
 8028e50:	e7f5      	b.n	8028e3e <_printf_i+0x22e>
 8028e52:	bf00      	nop
 8028e54:	0802e1ed 	.word	0x0802e1ed
 8028e58:	0802e1fe 	.word	0x0802e1fe

08028e5c <_sbrk_r>:
 8028e5c:	b538      	push	{r3, r4, r5, lr}
 8028e5e:	4d06      	ldr	r5, [pc, #24]	; (8028e78 <_sbrk_r+0x1c>)
 8028e60:	2300      	movs	r3, #0
 8028e62:	4604      	mov	r4, r0
 8028e64:	4608      	mov	r0, r1
 8028e66:	602b      	str	r3, [r5, #0]
 8028e68:	f7da fcaa 	bl	80037c0 <_sbrk>
 8028e6c:	1c43      	adds	r3, r0, #1
 8028e6e:	d102      	bne.n	8028e76 <_sbrk_r+0x1a>
 8028e70:	682b      	ldr	r3, [r5, #0]
 8028e72:	b103      	cbz	r3, 8028e76 <_sbrk_r+0x1a>
 8028e74:	6023      	str	r3, [r4, #0]
 8028e76:	bd38      	pop	{r3, r4, r5, pc}
 8028e78:	2000cdbc 	.word	0x2000cdbc

08028e7c <_raise_r>:
 8028e7c:	291f      	cmp	r1, #31
 8028e7e:	b538      	push	{r3, r4, r5, lr}
 8028e80:	4604      	mov	r4, r0
 8028e82:	460d      	mov	r5, r1
 8028e84:	d904      	bls.n	8028e90 <_raise_r+0x14>
 8028e86:	2316      	movs	r3, #22
 8028e88:	6003      	str	r3, [r0, #0]
 8028e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8028e8e:	bd38      	pop	{r3, r4, r5, pc}
 8028e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028e92:	b112      	cbz	r2, 8028e9a <_raise_r+0x1e>
 8028e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028e98:	b94b      	cbnz	r3, 8028eae <_raise_r+0x32>
 8028e9a:	4620      	mov	r0, r4
 8028e9c:	f000 f830 	bl	8028f00 <_getpid_r>
 8028ea0:	462a      	mov	r2, r5
 8028ea2:	4601      	mov	r1, r0
 8028ea4:	4620      	mov	r0, r4
 8028ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028eaa:	f000 b817 	b.w	8028edc <_kill_r>
 8028eae:	2b01      	cmp	r3, #1
 8028eb0:	d00a      	beq.n	8028ec8 <_raise_r+0x4c>
 8028eb2:	1c59      	adds	r1, r3, #1
 8028eb4:	d103      	bne.n	8028ebe <_raise_r+0x42>
 8028eb6:	2316      	movs	r3, #22
 8028eb8:	6003      	str	r3, [r0, #0]
 8028eba:	2001      	movs	r0, #1
 8028ebc:	e7e7      	b.n	8028e8e <_raise_r+0x12>
 8028ebe:	2400      	movs	r4, #0
 8028ec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028ec4:	4628      	mov	r0, r5
 8028ec6:	4798      	blx	r3
 8028ec8:	2000      	movs	r0, #0
 8028eca:	e7e0      	b.n	8028e8e <_raise_r+0x12>

08028ecc <raise>:
 8028ecc:	4b02      	ldr	r3, [pc, #8]	; (8028ed8 <raise+0xc>)
 8028ece:	4601      	mov	r1, r0
 8028ed0:	6818      	ldr	r0, [r3, #0]
 8028ed2:	f7ff bfd3 	b.w	8028e7c <_raise_r>
 8028ed6:	bf00      	nop
 8028ed8:	200000d8 	.word	0x200000d8

08028edc <_kill_r>:
 8028edc:	b538      	push	{r3, r4, r5, lr}
 8028ede:	4d07      	ldr	r5, [pc, #28]	; (8028efc <_kill_r+0x20>)
 8028ee0:	2300      	movs	r3, #0
 8028ee2:	4604      	mov	r4, r0
 8028ee4:	4608      	mov	r0, r1
 8028ee6:	4611      	mov	r1, r2
 8028ee8:	602b      	str	r3, [r5, #0]
 8028eea:	f7da fbe1 	bl	80036b0 <_kill>
 8028eee:	1c43      	adds	r3, r0, #1
 8028ef0:	d102      	bne.n	8028ef8 <_kill_r+0x1c>
 8028ef2:	682b      	ldr	r3, [r5, #0]
 8028ef4:	b103      	cbz	r3, 8028ef8 <_kill_r+0x1c>
 8028ef6:	6023      	str	r3, [r4, #0]
 8028ef8:	bd38      	pop	{r3, r4, r5, pc}
 8028efa:	bf00      	nop
 8028efc:	2000cdbc 	.word	0x2000cdbc

08028f00 <_getpid_r>:
 8028f00:	f7da bbce 	b.w	80036a0 <_getpid>

08028f04 <__swbuf_r>:
 8028f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028f06:	460e      	mov	r6, r1
 8028f08:	4614      	mov	r4, r2
 8028f0a:	4605      	mov	r5, r0
 8028f0c:	b118      	cbz	r0, 8028f16 <__swbuf_r+0x12>
 8028f0e:	6983      	ldr	r3, [r0, #24]
 8028f10:	b90b      	cbnz	r3, 8028f16 <__swbuf_r+0x12>
 8028f12:	f000 fa33 	bl	802937c <__sinit>
 8028f16:	4b21      	ldr	r3, [pc, #132]	; (8028f9c <__swbuf_r+0x98>)
 8028f18:	429c      	cmp	r4, r3
 8028f1a:	d12b      	bne.n	8028f74 <__swbuf_r+0x70>
 8028f1c:	686c      	ldr	r4, [r5, #4]
 8028f1e:	69a3      	ldr	r3, [r4, #24]
 8028f20:	60a3      	str	r3, [r4, #8]
 8028f22:	89a3      	ldrh	r3, [r4, #12]
 8028f24:	071a      	lsls	r2, r3, #28
 8028f26:	d52f      	bpl.n	8028f88 <__swbuf_r+0x84>
 8028f28:	6923      	ldr	r3, [r4, #16]
 8028f2a:	b36b      	cbz	r3, 8028f88 <__swbuf_r+0x84>
 8028f2c:	6923      	ldr	r3, [r4, #16]
 8028f2e:	6820      	ldr	r0, [r4, #0]
 8028f30:	1ac0      	subs	r0, r0, r3
 8028f32:	6963      	ldr	r3, [r4, #20]
 8028f34:	b2f6      	uxtb	r6, r6
 8028f36:	4283      	cmp	r3, r0
 8028f38:	4637      	mov	r7, r6
 8028f3a:	dc04      	bgt.n	8028f46 <__swbuf_r+0x42>
 8028f3c:	4621      	mov	r1, r4
 8028f3e:	4628      	mov	r0, r5
 8028f40:	f000 f988 	bl	8029254 <_fflush_r>
 8028f44:	bb30      	cbnz	r0, 8028f94 <__swbuf_r+0x90>
 8028f46:	68a3      	ldr	r3, [r4, #8]
 8028f48:	3b01      	subs	r3, #1
 8028f4a:	60a3      	str	r3, [r4, #8]
 8028f4c:	6823      	ldr	r3, [r4, #0]
 8028f4e:	1c5a      	adds	r2, r3, #1
 8028f50:	6022      	str	r2, [r4, #0]
 8028f52:	701e      	strb	r6, [r3, #0]
 8028f54:	6963      	ldr	r3, [r4, #20]
 8028f56:	3001      	adds	r0, #1
 8028f58:	4283      	cmp	r3, r0
 8028f5a:	d004      	beq.n	8028f66 <__swbuf_r+0x62>
 8028f5c:	89a3      	ldrh	r3, [r4, #12]
 8028f5e:	07db      	lsls	r3, r3, #31
 8028f60:	d506      	bpl.n	8028f70 <__swbuf_r+0x6c>
 8028f62:	2e0a      	cmp	r6, #10
 8028f64:	d104      	bne.n	8028f70 <__swbuf_r+0x6c>
 8028f66:	4621      	mov	r1, r4
 8028f68:	4628      	mov	r0, r5
 8028f6a:	f000 f973 	bl	8029254 <_fflush_r>
 8028f6e:	b988      	cbnz	r0, 8028f94 <__swbuf_r+0x90>
 8028f70:	4638      	mov	r0, r7
 8028f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028f74:	4b0a      	ldr	r3, [pc, #40]	; (8028fa0 <__swbuf_r+0x9c>)
 8028f76:	429c      	cmp	r4, r3
 8028f78:	d101      	bne.n	8028f7e <__swbuf_r+0x7a>
 8028f7a:	68ac      	ldr	r4, [r5, #8]
 8028f7c:	e7cf      	b.n	8028f1e <__swbuf_r+0x1a>
 8028f7e:	4b09      	ldr	r3, [pc, #36]	; (8028fa4 <__swbuf_r+0xa0>)
 8028f80:	429c      	cmp	r4, r3
 8028f82:	bf08      	it	eq
 8028f84:	68ec      	ldreq	r4, [r5, #12]
 8028f86:	e7ca      	b.n	8028f1e <__swbuf_r+0x1a>
 8028f88:	4621      	mov	r1, r4
 8028f8a:	4628      	mov	r0, r5
 8028f8c:	f000 f80c 	bl	8028fa8 <__swsetup_r>
 8028f90:	2800      	cmp	r0, #0
 8028f92:	d0cb      	beq.n	8028f2c <__swbuf_r+0x28>
 8028f94:	f04f 37ff 	mov.w	r7, #4294967295
 8028f98:	e7ea      	b.n	8028f70 <__swbuf_r+0x6c>
 8028f9a:	bf00      	nop
 8028f9c:	0802e234 	.word	0x0802e234
 8028fa0:	0802e254 	.word	0x0802e254
 8028fa4:	0802e214 	.word	0x0802e214

08028fa8 <__swsetup_r>:
 8028fa8:	4b32      	ldr	r3, [pc, #200]	; (8029074 <__swsetup_r+0xcc>)
 8028faa:	b570      	push	{r4, r5, r6, lr}
 8028fac:	681d      	ldr	r5, [r3, #0]
 8028fae:	4606      	mov	r6, r0
 8028fb0:	460c      	mov	r4, r1
 8028fb2:	b125      	cbz	r5, 8028fbe <__swsetup_r+0x16>
 8028fb4:	69ab      	ldr	r3, [r5, #24]
 8028fb6:	b913      	cbnz	r3, 8028fbe <__swsetup_r+0x16>
 8028fb8:	4628      	mov	r0, r5
 8028fba:	f000 f9df 	bl	802937c <__sinit>
 8028fbe:	4b2e      	ldr	r3, [pc, #184]	; (8029078 <__swsetup_r+0xd0>)
 8028fc0:	429c      	cmp	r4, r3
 8028fc2:	d10f      	bne.n	8028fe4 <__swsetup_r+0x3c>
 8028fc4:	686c      	ldr	r4, [r5, #4]
 8028fc6:	89a3      	ldrh	r3, [r4, #12]
 8028fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028fcc:	0719      	lsls	r1, r3, #28
 8028fce:	d42c      	bmi.n	802902a <__swsetup_r+0x82>
 8028fd0:	06dd      	lsls	r5, r3, #27
 8028fd2:	d411      	bmi.n	8028ff8 <__swsetup_r+0x50>
 8028fd4:	2309      	movs	r3, #9
 8028fd6:	6033      	str	r3, [r6, #0]
 8028fd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028fdc:	81a3      	strh	r3, [r4, #12]
 8028fde:	f04f 30ff 	mov.w	r0, #4294967295
 8028fe2:	e03e      	b.n	8029062 <__swsetup_r+0xba>
 8028fe4:	4b25      	ldr	r3, [pc, #148]	; (802907c <__swsetup_r+0xd4>)
 8028fe6:	429c      	cmp	r4, r3
 8028fe8:	d101      	bne.n	8028fee <__swsetup_r+0x46>
 8028fea:	68ac      	ldr	r4, [r5, #8]
 8028fec:	e7eb      	b.n	8028fc6 <__swsetup_r+0x1e>
 8028fee:	4b24      	ldr	r3, [pc, #144]	; (8029080 <__swsetup_r+0xd8>)
 8028ff0:	429c      	cmp	r4, r3
 8028ff2:	bf08      	it	eq
 8028ff4:	68ec      	ldreq	r4, [r5, #12]
 8028ff6:	e7e6      	b.n	8028fc6 <__swsetup_r+0x1e>
 8028ff8:	0758      	lsls	r0, r3, #29
 8028ffa:	d512      	bpl.n	8029022 <__swsetup_r+0x7a>
 8028ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028ffe:	b141      	cbz	r1, 8029012 <__swsetup_r+0x6a>
 8029000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029004:	4299      	cmp	r1, r3
 8029006:	d002      	beq.n	802900e <__swsetup_r+0x66>
 8029008:	4630      	mov	r0, r6
 802900a:	f7ff fb8f 	bl	802872c <_free_r>
 802900e:	2300      	movs	r3, #0
 8029010:	6363      	str	r3, [r4, #52]	; 0x34
 8029012:	89a3      	ldrh	r3, [r4, #12]
 8029014:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029018:	81a3      	strh	r3, [r4, #12]
 802901a:	2300      	movs	r3, #0
 802901c:	6063      	str	r3, [r4, #4]
 802901e:	6923      	ldr	r3, [r4, #16]
 8029020:	6023      	str	r3, [r4, #0]
 8029022:	89a3      	ldrh	r3, [r4, #12]
 8029024:	f043 0308 	orr.w	r3, r3, #8
 8029028:	81a3      	strh	r3, [r4, #12]
 802902a:	6923      	ldr	r3, [r4, #16]
 802902c:	b94b      	cbnz	r3, 8029042 <__swsetup_r+0x9a>
 802902e:	89a3      	ldrh	r3, [r4, #12]
 8029030:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029038:	d003      	beq.n	8029042 <__swsetup_r+0x9a>
 802903a:	4621      	mov	r1, r4
 802903c:	4630      	mov	r0, r6
 802903e:	f000 fa63 	bl	8029508 <__smakebuf_r>
 8029042:	89a0      	ldrh	r0, [r4, #12]
 8029044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029048:	f010 0301 	ands.w	r3, r0, #1
 802904c:	d00a      	beq.n	8029064 <__swsetup_r+0xbc>
 802904e:	2300      	movs	r3, #0
 8029050:	60a3      	str	r3, [r4, #8]
 8029052:	6963      	ldr	r3, [r4, #20]
 8029054:	425b      	negs	r3, r3
 8029056:	61a3      	str	r3, [r4, #24]
 8029058:	6923      	ldr	r3, [r4, #16]
 802905a:	b943      	cbnz	r3, 802906e <__swsetup_r+0xc6>
 802905c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029060:	d1ba      	bne.n	8028fd8 <__swsetup_r+0x30>
 8029062:	bd70      	pop	{r4, r5, r6, pc}
 8029064:	0781      	lsls	r1, r0, #30
 8029066:	bf58      	it	pl
 8029068:	6963      	ldrpl	r3, [r4, #20]
 802906a:	60a3      	str	r3, [r4, #8]
 802906c:	e7f4      	b.n	8029058 <__swsetup_r+0xb0>
 802906e:	2000      	movs	r0, #0
 8029070:	e7f7      	b.n	8029062 <__swsetup_r+0xba>
 8029072:	bf00      	nop
 8029074:	200000d8 	.word	0x200000d8
 8029078:	0802e234 	.word	0x0802e234
 802907c:	0802e254 	.word	0x0802e254
 8029080:	0802e214 	.word	0x0802e214

08029084 <__register_exitproc>:
 8029084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029088:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8029144 <__register_exitproc+0xc0>
 802908c:	4606      	mov	r6, r0
 802908e:	f8d8 0000 	ldr.w	r0, [r8]
 8029092:	461f      	mov	r7, r3
 8029094:	460d      	mov	r5, r1
 8029096:	4691      	mov	r9, r2
 8029098:	f000 fa0e 	bl	80294b8 <__retarget_lock_acquire_recursive>
 802909c:	4b25      	ldr	r3, [pc, #148]	; (8029134 <__register_exitproc+0xb0>)
 802909e:	681c      	ldr	r4, [r3, #0]
 80290a0:	b934      	cbnz	r4, 80290b0 <__register_exitproc+0x2c>
 80290a2:	4c25      	ldr	r4, [pc, #148]	; (8029138 <__register_exitproc+0xb4>)
 80290a4:	601c      	str	r4, [r3, #0]
 80290a6:	4b25      	ldr	r3, [pc, #148]	; (802913c <__register_exitproc+0xb8>)
 80290a8:	b113      	cbz	r3, 80290b0 <__register_exitproc+0x2c>
 80290aa:	681b      	ldr	r3, [r3, #0]
 80290ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80290b0:	6863      	ldr	r3, [r4, #4]
 80290b2:	2b1f      	cmp	r3, #31
 80290b4:	dd07      	ble.n	80290c6 <__register_exitproc+0x42>
 80290b6:	f8d8 0000 	ldr.w	r0, [r8]
 80290ba:	f000 f9ff 	bl	80294bc <__retarget_lock_release_recursive>
 80290be:	f04f 30ff 	mov.w	r0, #4294967295
 80290c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80290c6:	b34e      	cbz	r6, 802911c <__register_exitproc+0x98>
 80290c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80290cc:	b988      	cbnz	r0, 80290f2 <__register_exitproc+0x6e>
 80290ce:	4b1c      	ldr	r3, [pc, #112]	; (8029140 <__register_exitproc+0xbc>)
 80290d0:	b923      	cbnz	r3, 80290dc <__register_exitproc+0x58>
 80290d2:	f8d8 0000 	ldr.w	r0, [r8]
 80290d6:	f000 f9f0 	bl	80294ba <__retarget_lock_release>
 80290da:	e7f0      	b.n	80290be <__register_exitproc+0x3a>
 80290dc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80290e0:	f7ff fafe 	bl	80286e0 <malloc>
 80290e4:	2800      	cmp	r0, #0
 80290e6:	d0f4      	beq.n	80290d2 <__register_exitproc+0x4e>
 80290e8:	2300      	movs	r3, #0
 80290ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80290ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80290f2:	6863      	ldr	r3, [r4, #4]
 80290f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80290f8:	2201      	movs	r2, #1
 80290fa:	409a      	lsls	r2, r3
 80290fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029100:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029104:	4313      	orrs	r3, r2
 8029106:	2e02      	cmp	r6, #2
 8029108:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802910c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029110:	bf02      	ittt	eq
 8029112:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8029116:	431a      	orreq	r2, r3
 8029118:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802911c:	6863      	ldr	r3, [r4, #4]
 802911e:	f8d8 0000 	ldr.w	r0, [r8]
 8029122:	1c5a      	adds	r2, r3, #1
 8029124:	3302      	adds	r3, #2
 8029126:	6062      	str	r2, [r4, #4]
 8029128:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802912c:	f000 f9c6 	bl	80294bc <__retarget_lock_release_recursive>
 8029130:	2000      	movs	r0, #0
 8029132:	e7c6      	b.n	80290c2 <__register_exitproc+0x3e>
 8029134:	2000c1a8 	.word	0x2000c1a8
 8029138:	2000c11c 	.word	0x2000c11c
 802913c:	0802e210 	.word	0x0802e210
 8029140:	080286e1 	.word	0x080286e1
 8029144:	2000013c 	.word	0x2000013c

08029148 <__sflush_r>:
 8029148:	898a      	ldrh	r2, [r1, #12]
 802914a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802914e:	4605      	mov	r5, r0
 8029150:	0710      	lsls	r0, r2, #28
 8029152:	460c      	mov	r4, r1
 8029154:	d458      	bmi.n	8029208 <__sflush_r+0xc0>
 8029156:	684b      	ldr	r3, [r1, #4]
 8029158:	2b00      	cmp	r3, #0
 802915a:	dc05      	bgt.n	8029168 <__sflush_r+0x20>
 802915c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802915e:	2b00      	cmp	r3, #0
 8029160:	dc02      	bgt.n	8029168 <__sflush_r+0x20>
 8029162:	2000      	movs	r0, #0
 8029164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802916a:	2e00      	cmp	r6, #0
 802916c:	d0f9      	beq.n	8029162 <__sflush_r+0x1a>
 802916e:	2300      	movs	r3, #0
 8029170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029174:	682f      	ldr	r7, [r5, #0]
 8029176:	602b      	str	r3, [r5, #0]
 8029178:	d032      	beq.n	80291e0 <__sflush_r+0x98>
 802917a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802917c:	89a3      	ldrh	r3, [r4, #12]
 802917e:	075a      	lsls	r2, r3, #29
 8029180:	d505      	bpl.n	802918e <__sflush_r+0x46>
 8029182:	6863      	ldr	r3, [r4, #4]
 8029184:	1ac0      	subs	r0, r0, r3
 8029186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029188:	b10b      	cbz	r3, 802918e <__sflush_r+0x46>
 802918a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802918c:	1ac0      	subs	r0, r0, r3
 802918e:	2300      	movs	r3, #0
 8029190:	4602      	mov	r2, r0
 8029192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029194:	6a21      	ldr	r1, [r4, #32]
 8029196:	4628      	mov	r0, r5
 8029198:	47b0      	blx	r6
 802919a:	1c43      	adds	r3, r0, #1
 802919c:	89a3      	ldrh	r3, [r4, #12]
 802919e:	d106      	bne.n	80291ae <__sflush_r+0x66>
 80291a0:	6829      	ldr	r1, [r5, #0]
 80291a2:	291d      	cmp	r1, #29
 80291a4:	d82c      	bhi.n	8029200 <__sflush_r+0xb8>
 80291a6:	4a2a      	ldr	r2, [pc, #168]	; (8029250 <__sflush_r+0x108>)
 80291a8:	40ca      	lsrs	r2, r1
 80291aa:	07d6      	lsls	r6, r2, #31
 80291ac:	d528      	bpl.n	8029200 <__sflush_r+0xb8>
 80291ae:	2200      	movs	r2, #0
 80291b0:	6062      	str	r2, [r4, #4]
 80291b2:	04d9      	lsls	r1, r3, #19
 80291b4:	6922      	ldr	r2, [r4, #16]
 80291b6:	6022      	str	r2, [r4, #0]
 80291b8:	d504      	bpl.n	80291c4 <__sflush_r+0x7c>
 80291ba:	1c42      	adds	r2, r0, #1
 80291bc:	d101      	bne.n	80291c2 <__sflush_r+0x7a>
 80291be:	682b      	ldr	r3, [r5, #0]
 80291c0:	b903      	cbnz	r3, 80291c4 <__sflush_r+0x7c>
 80291c2:	6560      	str	r0, [r4, #84]	; 0x54
 80291c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80291c6:	602f      	str	r7, [r5, #0]
 80291c8:	2900      	cmp	r1, #0
 80291ca:	d0ca      	beq.n	8029162 <__sflush_r+0x1a>
 80291cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80291d0:	4299      	cmp	r1, r3
 80291d2:	d002      	beq.n	80291da <__sflush_r+0x92>
 80291d4:	4628      	mov	r0, r5
 80291d6:	f7ff faa9 	bl	802872c <_free_r>
 80291da:	2000      	movs	r0, #0
 80291dc:	6360      	str	r0, [r4, #52]	; 0x34
 80291de:	e7c1      	b.n	8029164 <__sflush_r+0x1c>
 80291e0:	6a21      	ldr	r1, [r4, #32]
 80291e2:	2301      	movs	r3, #1
 80291e4:	4628      	mov	r0, r5
 80291e6:	47b0      	blx	r6
 80291e8:	1c41      	adds	r1, r0, #1
 80291ea:	d1c7      	bne.n	802917c <__sflush_r+0x34>
 80291ec:	682b      	ldr	r3, [r5, #0]
 80291ee:	2b00      	cmp	r3, #0
 80291f0:	d0c4      	beq.n	802917c <__sflush_r+0x34>
 80291f2:	2b1d      	cmp	r3, #29
 80291f4:	d001      	beq.n	80291fa <__sflush_r+0xb2>
 80291f6:	2b16      	cmp	r3, #22
 80291f8:	d101      	bne.n	80291fe <__sflush_r+0xb6>
 80291fa:	602f      	str	r7, [r5, #0]
 80291fc:	e7b1      	b.n	8029162 <__sflush_r+0x1a>
 80291fe:	89a3      	ldrh	r3, [r4, #12]
 8029200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029204:	81a3      	strh	r3, [r4, #12]
 8029206:	e7ad      	b.n	8029164 <__sflush_r+0x1c>
 8029208:	690f      	ldr	r7, [r1, #16]
 802920a:	2f00      	cmp	r7, #0
 802920c:	d0a9      	beq.n	8029162 <__sflush_r+0x1a>
 802920e:	0793      	lsls	r3, r2, #30
 8029210:	680e      	ldr	r6, [r1, #0]
 8029212:	bf08      	it	eq
 8029214:	694b      	ldreq	r3, [r1, #20]
 8029216:	600f      	str	r7, [r1, #0]
 8029218:	bf18      	it	ne
 802921a:	2300      	movne	r3, #0
 802921c:	eba6 0807 	sub.w	r8, r6, r7
 8029220:	608b      	str	r3, [r1, #8]
 8029222:	f1b8 0f00 	cmp.w	r8, #0
 8029226:	dd9c      	ble.n	8029162 <__sflush_r+0x1a>
 8029228:	6a21      	ldr	r1, [r4, #32]
 802922a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802922c:	4643      	mov	r3, r8
 802922e:	463a      	mov	r2, r7
 8029230:	4628      	mov	r0, r5
 8029232:	47b0      	blx	r6
 8029234:	2800      	cmp	r0, #0
 8029236:	dc06      	bgt.n	8029246 <__sflush_r+0xfe>
 8029238:	89a3      	ldrh	r3, [r4, #12]
 802923a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802923e:	81a3      	strh	r3, [r4, #12]
 8029240:	f04f 30ff 	mov.w	r0, #4294967295
 8029244:	e78e      	b.n	8029164 <__sflush_r+0x1c>
 8029246:	4407      	add	r7, r0
 8029248:	eba8 0800 	sub.w	r8, r8, r0
 802924c:	e7e9      	b.n	8029222 <__sflush_r+0xda>
 802924e:	bf00      	nop
 8029250:	20400001 	.word	0x20400001

08029254 <_fflush_r>:
 8029254:	b538      	push	{r3, r4, r5, lr}
 8029256:	690b      	ldr	r3, [r1, #16]
 8029258:	4605      	mov	r5, r0
 802925a:	460c      	mov	r4, r1
 802925c:	b913      	cbnz	r3, 8029264 <_fflush_r+0x10>
 802925e:	2500      	movs	r5, #0
 8029260:	4628      	mov	r0, r5
 8029262:	bd38      	pop	{r3, r4, r5, pc}
 8029264:	b118      	cbz	r0, 802926e <_fflush_r+0x1a>
 8029266:	6983      	ldr	r3, [r0, #24]
 8029268:	b90b      	cbnz	r3, 802926e <_fflush_r+0x1a>
 802926a:	f000 f887 	bl	802937c <__sinit>
 802926e:	4b14      	ldr	r3, [pc, #80]	; (80292c0 <_fflush_r+0x6c>)
 8029270:	429c      	cmp	r4, r3
 8029272:	d11b      	bne.n	80292ac <_fflush_r+0x58>
 8029274:	686c      	ldr	r4, [r5, #4]
 8029276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802927a:	2b00      	cmp	r3, #0
 802927c:	d0ef      	beq.n	802925e <_fflush_r+0xa>
 802927e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029280:	07d0      	lsls	r0, r2, #31
 8029282:	d404      	bmi.n	802928e <_fflush_r+0x3a>
 8029284:	0599      	lsls	r1, r3, #22
 8029286:	d402      	bmi.n	802928e <_fflush_r+0x3a>
 8029288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802928a:	f000 f915 	bl	80294b8 <__retarget_lock_acquire_recursive>
 802928e:	4628      	mov	r0, r5
 8029290:	4621      	mov	r1, r4
 8029292:	f7ff ff59 	bl	8029148 <__sflush_r>
 8029296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029298:	07da      	lsls	r2, r3, #31
 802929a:	4605      	mov	r5, r0
 802929c:	d4e0      	bmi.n	8029260 <_fflush_r+0xc>
 802929e:	89a3      	ldrh	r3, [r4, #12]
 80292a0:	059b      	lsls	r3, r3, #22
 80292a2:	d4dd      	bmi.n	8029260 <_fflush_r+0xc>
 80292a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80292a6:	f000 f909 	bl	80294bc <__retarget_lock_release_recursive>
 80292aa:	e7d9      	b.n	8029260 <_fflush_r+0xc>
 80292ac:	4b05      	ldr	r3, [pc, #20]	; (80292c4 <_fflush_r+0x70>)
 80292ae:	429c      	cmp	r4, r3
 80292b0:	d101      	bne.n	80292b6 <_fflush_r+0x62>
 80292b2:	68ac      	ldr	r4, [r5, #8]
 80292b4:	e7df      	b.n	8029276 <_fflush_r+0x22>
 80292b6:	4b04      	ldr	r3, [pc, #16]	; (80292c8 <_fflush_r+0x74>)
 80292b8:	429c      	cmp	r4, r3
 80292ba:	bf08      	it	eq
 80292bc:	68ec      	ldreq	r4, [r5, #12]
 80292be:	e7da      	b.n	8029276 <_fflush_r+0x22>
 80292c0:	0802e234 	.word	0x0802e234
 80292c4:	0802e254 	.word	0x0802e254
 80292c8:	0802e214 	.word	0x0802e214

080292cc <std>:
 80292cc:	2300      	movs	r3, #0
 80292ce:	b510      	push	{r4, lr}
 80292d0:	4604      	mov	r4, r0
 80292d2:	e9c0 3300 	strd	r3, r3, [r0]
 80292d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80292da:	6083      	str	r3, [r0, #8]
 80292dc:	8181      	strh	r1, [r0, #12]
 80292de:	6643      	str	r3, [r0, #100]	; 0x64
 80292e0:	81c2      	strh	r2, [r0, #14]
 80292e2:	6183      	str	r3, [r0, #24]
 80292e4:	4619      	mov	r1, r3
 80292e6:	2208      	movs	r2, #8
 80292e8:	305c      	adds	r0, #92	; 0x5c
 80292ea:	f7ff fa17 	bl	802871c <memset>
 80292ee:	4b05      	ldr	r3, [pc, #20]	; (8029304 <std+0x38>)
 80292f0:	6263      	str	r3, [r4, #36]	; 0x24
 80292f2:	4b05      	ldr	r3, [pc, #20]	; (8029308 <std+0x3c>)
 80292f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80292f6:	4b05      	ldr	r3, [pc, #20]	; (802930c <std+0x40>)
 80292f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80292fa:	4b05      	ldr	r3, [pc, #20]	; (8029310 <std+0x44>)
 80292fc:	6224      	str	r4, [r4, #32]
 80292fe:	6323      	str	r3, [r4, #48]	; 0x30
 8029300:	bd10      	pop	{r4, pc}
 8029302:	bf00      	nop
 8029304:	080295a1 	.word	0x080295a1
 8029308:	080295c3 	.word	0x080295c3
 802930c:	080295fb 	.word	0x080295fb
 8029310:	0802961f 	.word	0x0802961f

08029314 <_cleanup_r>:
 8029314:	4901      	ldr	r1, [pc, #4]	; (802931c <_cleanup_r+0x8>)
 8029316:	f000 b8af 	b.w	8029478 <_fwalk_reent>
 802931a:	bf00      	nop
 802931c:	08029255 	.word	0x08029255

08029320 <__sfmoreglue>:
 8029320:	b570      	push	{r4, r5, r6, lr}
 8029322:	1e4a      	subs	r2, r1, #1
 8029324:	2568      	movs	r5, #104	; 0x68
 8029326:	4355      	muls	r5, r2
 8029328:	460e      	mov	r6, r1
 802932a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802932e:	f7ff fa4d 	bl	80287cc <_malloc_r>
 8029332:	4604      	mov	r4, r0
 8029334:	b140      	cbz	r0, 8029348 <__sfmoreglue+0x28>
 8029336:	2100      	movs	r1, #0
 8029338:	e9c0 1600 	strd	r1, r6, [r0]
 802933c:	300c      	adds	r0, #12
 802933e:	60a0      	str	r0, [r4, #8]
 8029340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8029344:	f7ff f9ea 	bl	802871c <memset>
 8029348:	4620      	mov	r0, r4
 802934a:	bd70      	pop	{r4, r5, r6, pc}

0802934c <__sfp_lock_acquire>:
 802934c:	4801      	ldr	r0, [pc, #4]	; (8029354 <__sfp_lock_acquire+0x8>)
 802934e:	f000 b8b3 	b.w	80294b8 <__retarget_lock_acquire_recursive>
 8029352:	bf00      	nop
 8029354:	2000cdb8 	.word	0x2000cdb8

08029358 <__sfp_lock_release>:
 8029358:	4801      	ldr	r0, [pc, #4]	; (8029360 <__sfp_lock_release+0x8>)
 802935a:	f000 b8af 	b.w	80294bc <__retarget_lock_release_recursive>
 802935e:	bf00      	nop
 8029360:	2000cdb8 	.word	0x2000cdb8

08029364 <__sinit_lock_acquire>:
 8029364:	4801      	ldr	r0, [pc, #4]	; (802936c <__sinit_lock_acquire+0x8>)
 8029366:	f000 b8a7 	b.w	80294b8 <__retarget_lock_acquire_recursive>
 802936a:	bf00      	nop
 802936c:	2000cdb3 	.word	0x2000cdb3

08029370 <__sinit_lock_release>:
 8029370:	4801      	ldr	r0, [pc, #4]	; (8029378 <__sinit_lock_release+0x8>)
 8029372:	f000 b8a3 	b.w	80294bc <__retarget_lock_release_recursive>
 8029376:	bf00      	nop
 8029378:	2000cdb3 	.word	0x2000cdb3

0802937c <__sinit>:
 802937c:	b510      	push	{r4, lr}
 802937e:	4604      	mov	r4, r0
 8029380:	f7ff fff0 	bl	8029364 <__sinit_lock_acquire>
 8029384:	69a3      	ldr	r3, [r4, #24]
 8029386:	b11b      	cbz	r3, 8029390 <__sinit+0x14>
 8029388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802938c:	f7ff bff0 	b.w	8029370 <__sinit_lock_release>
 8029390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029394:	6523      	str	r3, [r4, #80]	; 0x50
 8029396:	4b13      	ldr	r3, [pc, #76]	; (80293e4 <__sinit+0x68>)
 8029398:	4a13      	ldr	r2, [pc, #76]	; (80293e8 <__sinit+0x6c>)
 802939a:	681b      	ldr	r3, [r3, #0]
 802939c:	62a2      	str	r2, [r4, #40]	; 0x28
 802939e:	42a3      	cmp	r3, r4
 80293a0:	bf04      	itt	eq
 80293a2:	2301      	moveq	r3, #1
 80293a4:	61a3      	streq	r3, [r4, #24]
 80293a6:	4620      	mov	r0, r4
 80293a8:	f000 f820 	bl	80293ec <__sfp>
 80293ac:	6060      	str	r0, [r4, #4]
 80293ae:	4620      	mov	r0, r4
 80293b0:	f000 f81c 	bl	80293ec <__sfp>
 80293b4:	60a0      	str	r0, [r4, #8]
 80293b6:	4620      	mov	r0, r4
 80293b8:	f000 f818 	bl	80293ec <__sfp>
 80293bc:	2200      	movs	r2, #0
 80293be:	60e0      	str	r0, [r4, #12]
 80293c0:	2104      	movs	r1, #4
 80293c2:	6860      	ldr	r0, [r4, #4]
 80293c4:	f7ff ff82 	bl	80292cc <std>
 80293c8:	68a0      	ldr	r0, [r4, #8]
 80293ca:	2201      	movs	r2, #1
 80293cc:	2109      	movs	r1, #9
 80293ce:	f7ff ff7d 	bl	80292cc <std>
 80293d2:	68e0      	ldr	r0, [r4, #12]
 80293d4:	2202      	movs	r2, #2
 80293d6:	2112      	movs	r1, #18
 80293d8:	f7ff ff78 	bl	80292cc <std>
 80293dc:	2301      	movs	r3, #1
 80293de:	61a3      	str	r3, [r4, #24]
 80293e0:	e7d2      	b.n	8029388 <__sinit+0xc>
 80293e2:	bf00      	nop
 80293e4:	0802e1d8 	.word	0x0802e1d8
 80293e8:	08029315 	.word	0x08029315

080293ec <__sfp>:
 80293ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293ee:	4607      	mov	r7, r0
 80293f0:	f7ff ffac 	bl	802934c <__sfp_lock_acquire>
 80293f4:	4b1e      	ldr	r3, [pc, #120]	; (8029470 <__sfp+0x84>)
 80293f6:	681e      	ldr	r6, [r3, #0]
 80293f8:	69b3      	ldr	r3, [r6, #24]
 80293fa:	b913      	cbnz	r3, 8029402 <__sfp+0x16>
 80293fc:	4630      	mov	r0, r6
 80293fe:	f7ff ffbd 	bl	802937c <__sinit>
 8029402:	3648      	adds	r6, #72	; 0x48
 8029404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029408:	3b01      	subs	r3, #1
 802940a:	d503      	bpl.n	8029414 <__sfp+0x28>
 802940c:	6833      	ldr	r3, [r6, #0]
 802940e:	b30b      	cbz	r3, 8029454 <__sfp+0x68>
 8029410:	6836      	ldr	r6, [r6, #0]
 8029412:	e7f7      	b.n	8029404 <__sfp+0x18>
 8029414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029418:	b9d5      	cbnz	r5, 8029450 <__sfp+0x64>
 802941a:	4b16      	ldr	r3, [pc, #88]	; (8029474 <__sfp+0x88>)
 802941c:	60e3      	str	r3, [r4, #12]
 802941e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8029422:	6665      	str	r5, [r4, #100]	; 0x64
 8029424:	f000 f847 	bl	80294b6 <__retarget_lock_init_recursive>
 8029428:	f7ff ff96 	bl	8029358 <__sfp_lock_release>
 802942c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8029430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8029434:	6025      	str	r5, [r4, #0]
 8029436:	61a5      	str	r5, [r4, #24]
 8029438:	2208      	movs	r2, #8
 802943a:	4629      	mov	r1, r5
 802943c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029440:	f7ff f96c 	bl	802871c <memset>
 8029444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802944c:	4620      	mov	r0, r4
 802944e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029450:	3468      	adds	r4, #104	; 0x68
 8029452:	e7d9      	b.n	8029408 <__sfp+0x1c>
 8029454:	2104      	movs	r1, #4
 8029456:	4638      	mov	r0, r7
 8029458:	f7ff ff62 	bl	8029320 <__sfmoreglue>
 802945c:	4604      	mov	r4, r0
 802945e:	6030      	str	r0, [r6, #0]
 8029460:	2800      	cmp	r0, #0
 8029462:	d1d5      	bne.n	8029410 <__sfp+0x24>
 8029464:	f7ff ff78 	bl	8029358 <__sfp_lock_release>
 8029468:	230c      	movs	r3, #12
 802946a:	603b      	str	r3, [r7, #0]
 802946c:	e7ee      	b.n	802944c <__sfp+0x60>
 802946e:	bf00      	nop
 8029470:	0802e1d8 	.word	0x0802e1d8
 8029474:	ffff0001 	.word	0xffff0001

08029478 <_fwalk_reent>:
 8029478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802947c:	4606      	mov	r6, r0
 802947e:	4688      	mov	r8, r1
 8029480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029484:	2700      	movs	r7, #0
 8029486:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802948a:	f1b9 0901 	subs.w	r9, r9, #1
 802948e:	d505      	bpl.n	802949c <_fwalk_reent+0x24>
 8029490:	6824      	ldr	r4, [r4, #0]
 8029492:	2c00      	cmp	r4, #0
 8029494:	d1f7      	bne.n	8029486 <_fwalk_reent+0xe>
 8029496:	4638      	mov	r0, r7
 8029498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802949c:	89ab      	ldrh	r3, [r5, #12]
 802949e:	2b01      	cmp	r3, #1
 80294a0:	d907      	bls.n	80294b2 <_fwalk_reent+0x3a>
 80294a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80294a6:	3301      	adds	r3, #1
 80294a8:	d003      	beq.n	80294b2 <_fwalk_reent+0x3a>
 80294aa:	4629      	mov	r1, r5
 80294ac:	4630      	mov	r0, r6
 80294ae:	47c0      	blx	r8
 80294b0:	4307      	orrs	r7, r0
 80294b2:	3568      	adds	r5, #104	; 0x68
 80294b4:	e7e9      	b.n	802948a <_fwalk_reent+0x12>

080294b6 <__retarget_lock_init_recursive>:
 80294b6:	4770      	bx	lr

080294b8 <__retarget_lock_acquire_recursive>:
 80294b8:	4770      	bx	lr

080294ba <__retarget_lock_release>:
 80294ba:	4770      	bx	lr

080294bc <__retarget_lock_release_recursive>:
 80294bc:	4770      	bx	lr

080294be <__swhatbuf_r>:
 80294be:	b570      	push	{r4, r5, r6, lr}
 80294c0:	460e      	mov	r6, r1
 80294c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80294c6:	2900      	cmp	r1, #0
 80294c8:	b096      	sub	sp, #88	; 0x58
 80294ca:	4614      	mov	r4, r2
 80294cc:	461d      	mov	r5, r3
 80294ce:	da07      	bge.n	80294e0 <__swhatbuf_r+0x22>
 80294d0:	2300      	movs	r3, #0
 80294d2:	602b      	str	r3, [r5, #0]
 80294d4:	89b3      	ldrh	r3, [r6, #12]
 80294d6:	061a      	lsls	r2, r3, #24
 80294d8:	d410      	bmi.n	80294fc <__swhatbuf_r+0x3e>
 80294da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80294de:	e00e      	b.n	80294fe <__swhatbuf_r+0x40>
 80294e0:	466a      	mov	r2, sp
 80294e2:	f000 f8c3 	bl	802966c <_fstat_r>
 80294e6:	2800      	cmp	r0, #0
 80294e8:	dbf2      	blt.n	80294d0 <__swhatbuf_r+0x12>
 80294ea:	9a01      	ldr	r2, [sp, #4]
 80294ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80294f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80294f4:	425a      	negs	r2, r3
 80294f6:	415a      	adcs	r2, r3
 80294f8:	602a      	str	r2, [r5, #0]
 80294fa:	e7ee      	b.n	80294da <__swhatbuf_r+0x1c>
 80294fc:	2340      	movs	r3, #64	; 0x40
 80294fe:	2000      	movs	r0, #0
 8029500:	6023      	str	r3, [r4, #0]
 8029502:	b016      	add	sp, #88	; 0x58
 8029504:	bd70      	pop	{r4, r5, r6, pc}
	...

08029508 <__smakebuf_r>:
 8029508:	898b      	ldrh	r3, [r1, #12]
 802950a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802950c:	079d      	lsls	r5, r3, #30
 802950e:	4606      	mov	r6, r0
 8029510:	460c      	mov	r4, r1
 8029512:	d507      	bpl.n	8029524 <__smakebuf_r+0x1c>
 8029514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029518:	6023      	str	r3, [r4, #0]
 802951a:	6123      	str	r3, [r4, #16]
 802951c:	2301      	movs	r3, #1
 802951e:	6163      	str	r3, [r4, #20]
 8029520:	b002      	add	sp, #8
 8029522:	bd70      	pop	{r4, r5, r6, pc}
 8029524:	ab01      	add	r3, sp, #4
 8029526:	466a      	mov	r2, sp
 8029528:	f7ff ffc9 	bl	80294be <__swhatbuf_r>
 802952c:	9900      	ldr	r1, [sp, #0]
 802952e:	4605      	mov	r5, r0
 8029530:	4630      	mov	r0, r6
 8029532:	f7ff f94b 	bl	80287cc <_malloc_r>
 8029536:	b948      	cbnz	r0, 802954c <__smakebuf_r+0x44>
 8029538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802953c:	059a      	lsls	r2, r3, #22
 802953e:	d4ef      	bmi.n	8029520 <__smakebuf_r+0x18>
 8029540:	f023 0303 	bic.w	r3, r3, #3
 8029544:	f043 0302 	orr.w	r3, r3, #2
 8029548:	81a3      	strh	r3, [r4, #12]
 802954a:	e7e3      	b.n	8029514 <__smakebuf_r+0xc>
 802954c:	4b0d      	ldr	r3, [pc, #52]	; (8029584 <__smakebuf_r+0x7c>)
 802954e:	62b3      	str	r3, [r6, #40]	; 0x28
 8029550:	89a3      	ldrh	r3, [r4, #12]
 8029552:	6020      	str	r0, [r4, #0]
 8029554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029558:	81a3      	strh	r3, [r4, #12]
 802955a:	9b00      	ldr	r3, [sp, #0]
 802955c:	6163      	str	r3, [r4, #20]
 802955e:	9b01      	ldr	r3, [sp, #4]
 8029560:	6120      	str	r0, [r4, #16]
 8029562:	b15b      	cbz	r3, 802957c <__smakebuf_r+0x74>
 8029564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029568:	4630      	mov	r0, r6
 802956a:	f000 f891 	bl	8029690 <_isatty_r>
 802956e:	b128      	cbz	r0, 802957c <__smakebuf_r+0x74>
 8029570:	89a3      	ldrh	r3, [r4, #12]
 8029572:	f023 0303 	bic.w	r3, r3, #3
 8029576:	f043 0301 	orr.w	r3, r3, #1
 802957a:	81a3      	strh	r3, [r4, #12]
 802957c:	89a0      	ldrh	r0, [r4, #12]
 802957e:	4305      	orrs	r5, r0
 8029580:	81a5      	strh	r5, [r4, #12]
 8029582:	e7cd      	b.n	8029520 <__smakebuf_r+0x18>
 8029584:	08029315 	.word	0x08029315

08029588 <__malloc_lock>:
 8029588:	4801      	ldr	r0, [pc, #4]	; (8029590 <__malloc_lock+0x8>)
 802958a:	f7ff bf95 	b.w	80294b8 <__retarget_lock_acquire_recursive>
 802958e:	bf00      	nop
 8029590:	2000cdb4 	.word	0x2000cdb4

08029594 <__malloc_unlock>:
 8029594:	4801      	ldr	r0, [pc, #4]	; (802959c <__malloc_unlock+0x8>)
 8029596:	f7ff bf91 	b.w	80294bc <__retarget_lock_release_recursive>
 802959a:	bf00      	nop
 802959c:	2000cdb4 	.word	0x2000cdb4

080295a0 <__sread>:
 80295a0:	b510      	push	{r4, lr}
 80295a2:	460c      	mov	r4, r1
 80295a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80295a8:	f000 f894 	bl	80296d4 <_read_r>
 80295ac:	2800      	cmp	r0, #0
 80295ae:	bfab      	itete	ge
 80295b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80295b2:	89a3      	ldrhlt	r3, [r4, #12]
 80295b4:	181b      	addge	r3, r3, r0
 80295b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80295ba:	bfac      	ite	ge
 80295bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80295be:	81a3      	strhlt	r3, [r4, #12]
 80295c0:	bd10      	pop	{r4, pc}

080295c2 <__swrite>:
 80295c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80295c6:	461f      	mov	r7, r3
 80295c8:	898b      	ldrh	r3, [r1, #12]
 80295ca:	05db      	lsls	r3, r3, #23
 80295cc:	4605      	mov	r5, r0
 80295ce:	460c      	mov	r4, r1
 80295d0:	4616      	mov	r6, r2
 80295d2:	d505      	bpl.n	80295e0 <__swrite+0x1e>
 80295d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80295d8:	2302      	movs	r3, #2
 80295da:	2200      	movs	r2, #0
 80295dc:	f000 f868 	bl	80296b0 <_lseek_r>
 80295e0:	89a3      	ldrh	r3, [r4, #12]
 80295e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80295e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80295ea:	81a3      	strh	r3, [r4, #12]
 80295ec:	4632      	mov	r2, r6
 80295ee:	463b      	mov	r3, r7
 80295f0:	4628      	mov	r0, r5
 80295f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80295f6:	f000 b817 	b.w	8029628 <_write_r>

080295fa <__sseek>:
 80295fa:	b510      	push	{r4, lr}
 80295fc:	460c      	mov	r4, r1
 80295fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029602:	f000 f855 	bl	80296b0 <_lseek_r>
 8029606:	1c43      	adds	r3, r0, #1
 8029608:	89a3      	ldrh	r3, [r4, #12]
 802960a:	bf15      	itete	ne
 802960c:	6560      	strne	r0, [r4, #84]	; 0x54
 802960e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029616:	81a3      	strheq	r3, [r4, #12]
 8029618:	bf18      	it	ne
 802961a:	81a3      	strhne	r3, [r4, #12]
 802961c:	bd10      	pop	{r4, pc}

0802961e <__sclose>:
 802961e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029622:	f000 b813 	b.w	802964c <_close_r>
	...

08029628 <_write_r>:
 8029628:	b538      	push	{r3, r4, r5, lr}
 802962a:	4d07      	ldr	r5, [pc, #28]	; (8029648 <_write_r+0x20>)
 802962c:	4604      	mov	r4, r0
 802962e:	4608      	mov	r0, r1
 8029630:	4611      	mov	r1, r2
 8029632:	2200      	movs	r2, #0
 8029634:	602a      	str	r2, [r5, #0]
 8029636:	461a      	mov	r2, r3
 8029638:	f7da f871 	bl	800371e <_write>
 802963c:	1c43      	adds	r3, r0, #1
 802963e:	d102      	bne.n	8029646 <_write_r+0x1e>
 8029640:	682b      	ldr	r3, [r5, #0]
 8029642:	b103      	cbz	r3, 8029646 <_write_r+0x1e>
 8029644:	6023      	str	r3, [r4, #0]
 8029646:	bd38      	pop	{r3, r4, r5, pc}
 8029648:	2000cdbc 	.word	0x2000cdbc

0802964c <_close_r>:
 802964c:	b538      	push	{r3, r4, r5, lr}
 802964e:	4d06      	ldr	r5, [pc, #24]	; (8029668 <_close_r+0x1c>)
 8029650:	2300      	movs	r3, #0
 8029652:	4604      	mov	r4, r0
 8029654:	4608      	mov	r0, r1
 8029656:	602b      	str	r3, [r5, #0]
 8029658:	f7da f87d 	bl	8003756 <_close>
 802965c:	1c43      	adds	r3, r0, #1
 802965e:	d102      	bne.n	8029666 <_close_r+0x1a>
 8029660:	682b      	ldr	r3, [r5, #0]
 8029662:	b103      	cbz	r3, 8029666 <_close_r+0x1a>
 8029664:	6023      	str	r3, [r4, #0]
 8029666:	bd38      	pop	{r3, r4, r5, pc}
 8029668:	2000cdbc 	.word	0x2000cdbc

0802966c <_fstat_r>:
 802966c:	b538      	push	{r3, r4, r5, lr}
 802966e:	4d07      	ldr	r5, [pc, #28]	; (802968c <_fstat_r+0x20>)
 8029670:	2300      	movs	r3, #0
 8029672:	4604      	mov	r4, r0
 8029674:	4608      	mov	r0, r1
 8029676:	4611      	mov	r1, r2
 8029678:	602b      	str	r3, [r5, #0]
 802967a:	f7da f878 	bl	800376e <_fstat>
 802967e:	1c43      	adds	r3, r0, #1
 8029680:	d102      	bne.n	8029688 <_fstat_r+0x1c>
 8029682:	682b      	ldr	r3, [r5, #0]
 8029684:	b103      	cbz	r3, 8029688 <_fstat_r+0x1c>
 8029686:	6023      	str	r3, [r4, #0]
 8029688:	bd38      	pop	{r3, r4, r5, pc}
 802968a:	bf00      	nop
 802968c:	2000cdbc 	.word	0x2000cdbc

08029690 <_isatty_r>:
 8029690:	b538      	push	{r3, r4, r5, lr}
 8029692:	4d06      	ldr	r5, [pc, #24]	; (80296ac <_isatty_r+0x1c>)
 8029694:	2300      	movs	r3, #0
 8029696:	4604      	mov	r4, r0
 8029698:	4608      	mov	r0, r1
 802969a:	602b      	str	r3, [r5, #0]
 802969c:	f7da f877 	bl	800378e <_isatty>
 80296a0:	1c43      	adds	r3, r0, #1
 80296a2:	d102      	bne.n	80296aa <_isatty_r+0x1a>
 80296a4:	682b      	ldr	r3, [r5, #0]
 80296a6:	b103      	cbz	r3, 80296aa <_isatty_r+0x1a>
 80296a8:	6023      	str	r3, [r4, #0]
 80296aa:	bd38      	pop	{r3, r4, r5, pc}
 80296ac:	2000cdbc 	.word	0x2000cdbc

080296b0 <_lseek_r>:
 80296b0:	b538      	push	{r3, r4, r5, lr}
 80296b2:	4d07      	ldr	r5, [pc, #28]	; (80296d0 <_lseek_r+0x20>)
 80296b4:	4604      	mov	r4, r0
 80296b6:	4608      	mov	r0, r1
 80296b8:	4611      	mov	r1, r2
 80296ba:	2200      	movs	r2, #0
 80296bc:	602a      	str	r2, [r5, #0]
 80296be:	461a      	mov	r2, r3
 80296c0:	f7da f870 	bl	80037a4 <_lseek>
 80296c4:	1c43      	adds	r3, r0, #1
 80296c6:	d102      	bne.n	80296ce <_lseek_r+0x1e>
 80296c8:	682b      	ldr	r3, [r5, #0]
 80296ca:	b103      	cbz	r3, 80296ce <_lseek_r+0x1e>
 80296cc:	6023      	str	r3, [r4, #0]
 80296ce:	bd38      	pop	{r3, r4, r5, pc}
 80296d0:	2000cdbc 	.word	0x2000cdbc

080296d4 <_read_r>:
 80296d4:	b538      	push	{r3, r4, r5, lr}
 80296d6:	4d07      	ldr	r5, [pc, #28]	; (80296f4 <_read_r+0x20>)
 80296d8:	4604      	mov	r4, r0
 80296da:	4608      	mov	r0, r1
 80296dc:	4611      	mov	r1, r2
 80296de:	2200      	movs	r2, #0
 80296e0:	602a      	str	r2, [r5, #0]
 80296e2:	461a      	mov	r2, r3
 80296e4:	f7d9 fffe 	bl	80036e4 <_read>
 80296e8:	1c43      	adds	r3, r0, #1
 80296ea:	d102      	bne.n	80296f2 <_read_r+0x1e>
 80296ec:	682b      	ldr	r3, [r5, #0]
 80296ee:	b103      	cbz	r3, 80296f2 <_read_r+0x1e>
 80296f0:	6023      	str	r3, [r4, #0]
 80296f2:	bd38      	pop	{r3, r4, r5, pc}
 80296f4:	2000cdbc 	.word	0x2000cdbc

080296f8 <_init>:
 80296f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80296fa:	bf00      	nop
 80296fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80296fe:	bc08      	pop	{r3}
 8029700:	469e      	mov	lr, r3
 8029702:	4770      	bx	lr

08029704 <_fini>:
 8029704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029706:	bf00      	nop
 8029708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802970a:	bc08      	pop	{r3}
 802970c:	469e      	mov	lr, r3
 802970e:	4770      	bx	lr
