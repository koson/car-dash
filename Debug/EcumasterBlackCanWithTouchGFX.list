
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000294e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b64  080296b0  080296b0  000396b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003f1a  0802e214  0802e214  0003e214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  08032130  08032130  00042130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000240  08065628  08065628  00075628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08065868  08065868  00080140  2**0
                  CONTENTS
  7 .ARM          00000008  08065868  08065868  00075868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08065870  08065870  00080140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08065870  08065870  00075870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08065884  08065884  00075884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000140  20000000  0806588c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000cc80  20000140  080659cc  00080140  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000cdc0  080659cc  0008cdc0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006fb03  00000000  00000000  00080170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001233d  00000000  00000000  000efc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004ec0  00000000  00000000  00101fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00004830  00000000  00000000  00106e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d9e4  00000000  00000000  0010b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005bad5  00000000  00000000  00149084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00137794  00000000  00000000  001a4b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000d2  00000000  00000000  002dc2ed  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00015590  00000000  00000000  002dc3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08029698 	.word	0x08029698

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	08029698 	.word	0x08029698

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b96e 	b.w	8000acc <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9d08      	ldr	r5, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	468c      	mov	ip, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	f040 8083 	bne.w	800091e <__udivmoddi4+0x116>
 8000818:	428a      	cmp	r2, r1
 800081a:	4617      	mov	r7, r2
 800081c:	d947      	bls.n	80008ae <__udivmoddi4+0xa6>
 800081e:	fab2 f282 	clz	r2, r2
 8000822:	b142      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000824:	f1c2 0020 	rsb	r0, r2, #32
 8000828:	fa24 f000 	lsr.w	r0, r4, r0
 800082c:	4091      	lsls	r1, r2
 800082e:	4097      	lsls	r7, r2
 8000830:	ea40 0c01 	orr.w	ip, r0, r1
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbbc f6f8 	udiv	r6, ip, r8
 8000840:	fa1f fe87 	uxth.w	lr, r7
 8000844:	fb08 c116 	mls	r1, r8, r6, ip
 8000848:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084c:	fb06 f10e 	mul.w	r1, r6, lr
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	f106 30ff 	add.w	r0, r6, #4294967295
 800085a:	f080 8119 	bcs.w	8000a90 <__udivmoddi4+0x288>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8116 	bls.w	8000a90 <__udivmoddi4+0x288>
 8000864:	3e02      	subs	r6, #2
 8000866:	443b      	add	r3, r7
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fe0e 	mul.w	lr, r0, lr
 800087c:	45a6      	cmp	lr, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	193c      	adds	r4, r7, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8105 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800088a:	45a6      	cmp	lr, r4
 800088c:	f240 8102 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000890:	3802      	subs	r0, #2
 8000892:	443c      	add	r4, r7
 8000894:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000898:	eba4 040e 	sub.w	r4, r4, lr
 800089c:	2600      	movs	r6, #0
 800089e:	b11d      	cbz	r5, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c5 4300 	strd	r4, r3, [r5]
 80008a8:	4631      	mov	r1, r6
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	b902      	cbnz	r2, 80008b2 <__udivmoddi4+0xaa>
 80008b0:	deff      	udf	#255	; 0xff
 80008b2:	fab2 f282 	clz	r2, r2
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	d150      	bne.n	800095c <__udivmoddi4+0x154>
 80008ba:	1bcb      	subs	r3, r1, r7
 80008bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008c0:	fa1f f887 	uxth.w	r8, r7
 80008c4:	2601      	movs	r6, #1
 80008c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80008ca:	0c21      	lsrs	r1, r4, #16
 80008cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb08 f30c 	mul.w	r3, r8, ip
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0xe4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0xe2>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	f200 80e9 	bhi.w	8000abc <__udivmoddi4+0x2b4>
 80008ea:	4684      	mov	ip, r0
 80008ec:	1ac9      	subs	r1, r1, r3
 80008ee:	b2a3      	uxth	r3, r4
 80008f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008fc:	fb08 f800 	mul.w	r8, r8, r0
 8000900:	45a0      	cmp	r8, r4
 8000902:	d907      	bls.n	8000914 <__udivmoddi4+0x10c>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f100 33ff 	add.w	r3, r0, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x10a>
 800090c:	45a0      	cmp	r8, r4
 800090e:	f200 80d9 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 8000912:	4618      	mov	r0, r3
 8000914:	eba4 0408 	sub.w	r4, r4, r8
 8000918:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800091c:	e7bf      	b.n	800089e <__udivmoddi4+0x96>
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0x12e>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80b1 	beq.w	8000a8a <__udivmoddi4+0x282>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x1cc>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0x140>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80b8 	bhi.w	8000ab8 <__udivmoddi4+0x2b0>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0103 	sbc.w	r1, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	468c      	mov	ip, r1
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0a8      	beq.n	80008a8 <__udivmoddi4+0xa0>
 8000956:	e9c5 4c00 	strd	r4, ip, [r5]
 800095a:	e7a5      	b.n	80008a8 <__udivmoddi4+0xa0>
 800095c:	f1c2 0320 	rsb	r3, r2, #32
 8000960:	fa20 f603 	lsr.w	r6, r0, r3
 8000964:	4097      	lsls	r7, r2
 8000966:	fa01 f002 	lsl.w	r0, r1, r2
 800096a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096e:	40d9      	lsrs	r1, r3
 8000970:	4330      	orrs	r0, r6
 8000972:	0c03      	lsrs	r3, r0, #16
 8000974:	fbb1 f6fe 	udiv	r6, r1, lr
 8000978:	fa1f f887 	uxth.w	r8, r7
 800097c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000980:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000984:	fb06 f108 	mul.w	r1, r6, r8
 8000988:	4299      	cmp	r1, r3
 800098a:	fa04 f402 	lsl.w	r4, r4, r2
 800098e:	d909      	bls.n	80009a4 <__udivmoddi4+0x19c>
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	f106 3cff 	add.w	ip, r6, #4294967295
 8000996:	f080 808d 	bcs.w	8000ab4 <__udivmoddi4+0x2ac>
 800099a:	4299      	cmp	r1, r3
 800099c:	f240 808a 	bls.w	8000ab4 <__udivmoddi4+0x2ac>
 80009a0:	3e02      	subs	r6, #2
 80009a2:	443b      	add	r3, r7
 80009a4:	1a5b      	subs	r3, r3, r1
 80009a6:	b281      	uxth	r1, r0
 80009a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80009ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80009b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b4:	fb00 f308 	mul.w	r3, r0, r8
 80009b8:	428b      	cmp	r3, r1
 80009ba:	d907      	bls.n	80009cc <__udivmoddi4+0x1c4>
 80009bc:	1879      	adds	r1, r7, r1
 80009be:	f100 3cff 	add.w	ip, r0, #4294967295
 80009c2:	d273      	bcs.n	8000aac <__udivmoddi4+0x2a4>
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d971      	bls.n	8000aac <__udivmoddi4+0x2a4>
 80009c8:	3802      	subs	r0, #2
 80009ca:	4439      	add	r1, r7
 80009cc:	1acb      	subs	r3, r1, r3
 80009ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009d2:	e778      	b.n	80008c6 <__udivmoddi4+0xbe>
 80009d4:	f1c6 0c20 	rsb	ip, r6, #32
 80009d8:	fa03 f406 	lsl.w	r4, r3, r6
 80009dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80009e0:	431c      	orrs	r4, r3
 80009e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80009f2:	431f      	orrs	r7, r3
 80009f4:	0c3b      	lsrs	r3, r7, #16
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fa1f f884 	uxth.w	r8, r4
 80009fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a06:	fb09 fa08 	mul.w	sl, r9, r8
 8000a0a:	458a      	cmp	sl, r1
 8000a0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000a10:	fa00 f306 	lsl.w	r3, r0, r6
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x220>
 8000a16:	1861      	adds	r1, r4, r1
 8000a18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a1c:	d248      	bcs.n	8000ab0 <__udivmoddi4+0x2a8>
 8000a1e:	458a      	cmp	sl, r1
 8000a20:	d946      	bls.n	8000ab0 <__udivmoddi4+0x2a8>
 8000a22:	f1a9 0902 	sub.w	r9, r9, #2
 8000a26:	4421      	add	r1, r4
 8000a28:	eba1 010a 	sub.w	r1, r1, sl
 8000a2c:	b2bf      	uxth	r7, r7
 8000a2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a3a:	fb00 f808 	mul.w	r8, r0, r8
 8000a3e:	45b8      	cmp	r8, r7
 8000a40:	d907      	bls.n	8000a52 <__udivmoddi4+0x24a>
 8000a42:	19e7      	adds	r7, r4, r7
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a48:	d22e      	bcs.n	8000aa8 <__udivmoddi4+0x2a0>
 8000a4a:	45b8      	cmp	r8, r7
 8000a4c:	d92c      	bls.n	8000aa8 <__udivmoddi4+0x2a0>
 8000a4e:	3802      	subs	r0, #2
 8000a50:	4427      	add	r7, r4
 8000a52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a56:	eba7 0708 	sub.w	r7, r7, r8
 8000a5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a5e:	454f      	cmp	r7, r9
 8000a60:	46c6      	mov	lr, r8
 8000a62:	4649      	mov	r1, r9
 8000a64:	d31a      	bcc.n	8000a9c <__udivmoddi4+0x294>
 8000a66:	d017      	beq.n	8000a98 <__udivmoddi4+0x290>
 8000a68:	b15d      	cbz	r5, 8000a82 <__udivmoddi4+0x27a>
 8000a6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a76:	40f2      	lsrs	r2, r6
 8000a78:	ea4c 0202 	orr.w	r2, ip, r2
 8000a7c:	40f7      	lsrs	r7, r6
 8000a7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a82:	2600      	movs	r6, #0
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	462e      	mov	r6, r5
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e70b      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a90:	4606      	mov	r6, r0
 8000a92:	e6e9      	b.n	8000868 <__udivmoddi4+0x60>
 8000a94:	4618      	mov	r0, r3
 8000a96:	e6fd      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a98:	4543      	cmp	r3, r8
 8000a9a:	d2e5      	bcs.n	8000a68 <__udivmoddi4+0x260>
 8000a9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7df      	b.n	8000a68 <__udivmoddi4+0x260>
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e7d2      	b.n	8000a52 <__udivmoddi4+0x24a>
 8000aac:	4660      	mov	r0, ip
 8000aae:	e78d      	b.n	80009cc <__udivmoddi4+0x1c4>
 8000ab0:	4681      	mov	r9, r0
 8000ab2:	e7b9      	b.n	8000a28 <__udivmoddi4+0x220>
 8000ab4:	4666      	mov	r6, ip
 8000ab6:	e775      	b.n	80009a4 <__udivmoddi4+0x19c>
 8000ab8:	4630      	mov	r0, r6
 8000aba:	e74a      	b.n	8000952 <__udivmoddi4+0x14a>
 8000abc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac0:	4439      	add	r1, r7
 8000ac2:	e713      	b.n	80008ec <__udivmoddi4+0xe4>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	e724      	b.n	8000914 <__udivmoddi4+0x10c>
 8000aca:	bf00      	nop

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <vApplicationGetIdleTaskMemory+0x30>)
 8000b1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000015c 	.word	0x2000015c
 8000b34:	200001b4 	.word	0x200001b4

08000b38 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b09a      	sub	sp, #104	; 0x68
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {6500, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b40:	4b83      	ldr	r3, [pc, #524]	; (8000d50 <SecondTask+0x218>)
 8000b42:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b46:	461d      	mov	r5, r3
 8000b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b54:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b58:	4b7e      	ldr	r3, [pc, #504]	; (8000d54 <SecondTask+0x21c>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b60:	2300      	movs	r3, #0
 8000b62:	2200      	movs	r2, #0
 8000b64:	f00c fc3e 	bl	800d3e4 <xQueueGenericSend>
	osDelay(150);
 8000b68:	2096      	movs	r0, #150	; 0x96
 8000b6a:	f00c f949 	bl	800ce00 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b6e:	4b7a      	ldr	r3, [pc, #488]	; (8000d58 <SecondTask+0x220>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 8127 	beq.w	8000dc6 <SecondTask+0x28e>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b78:	4b78      	ldr	r3, [pc, #480]	; (8000d5c <SecondTask+0x224>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b80:	da03      	bge.n	8000b8a <SecondTask+0x52>
 8000b82:	4b76      	ldr	r3, [pc, #472]	; (8000d5c <SecondTask+0x224>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3364      	adds	r3, #100	; 0x64
 8000b88:	e000      	b.n	8000b8c <SecondTask+0x54>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	4a73      	ldr	r2, [pc, #460]	; (8000d5c <SecondTask+0x224>)
 8000b8e:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b90:	4b73      	ldr	r3, [pc, #460]	; (8000d60 <SecondTask+0x228>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2bf9      	cmp	r3, #249	; 0xf9
 8000b96:	dc03      	bgt.n	8000ba0 <SecondTask+0x68>
 8000b98:	4b71      	ldr	r3, [pc, #452]	; (8000d60 <SecondTask+0x228>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	e001      	b.n	8000ba4 <SecondTask+0x6c>
 8000ba0:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000ba4:	4a6e      	ldr	r2, [pc, #440]	; (8000d60 <SecondTask+0x228>)
 8000ba6:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000ba8:	4b6e      	ldr	r3, [pc, #440]	; (8000d64 <SecondTask+0x22c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb0:	da03      	bge.n	8000bba <SecondTask+0x82>
 8000bb2:	4b6c      	ldr	r3, [pc, #432]	; (8000d64 <SecondTask+0x22c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3306      	adds	r3, #6
 8000bb8:	e000      	b.n	8000bbc <SecondTask+0x84>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	4a69      	ldr	r2, [pc, #420]	; (8000d64 <SecondTask+0x22c>)
 8000bbe:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc0:	4b69      	ldr	r3, [pc, #420]	; (8000d68 <SecondTask+0x230>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fcd7 	bl	8000578 <__aeabi_f2d>
 8000bca:	a359      	add	r3, pc, #356	; (adr r3, 8000d30 <SecondTask+0x1f8>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fd9e 	bl	8000710 <__aeabi_dcmpge>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SecondTask+0xa6>
 8000bda:	4b64      	ldr	r3, [pc, #400]	; (8000d6c <SecondTask+0x234>)
 8000bdc:	e010      	b.n	8000c00 <SecondTask+0xc8>
 8000bde:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <SecondTask+0x230>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fcc8 	bl	8000578 <__aeabi_f2d>
 8000be8:	a353      	add	r3, pc, #332	; (adr r3, 8000d38 <SecondTask+0x200>)
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	f7ff fb65 	bl	80002bc <__adddf3>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff fd9d 	bl	8000738 <__aeabi_d2f>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a59      	ldr	r2, [pc, #356]	; (8000d68 <SecondTask+0x230>)
 8000c02:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c04:	4b5a      	ldr	r3, [pc, #360]	; (8000d70 <SecondTask+0x238>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fcb5 	bl	8000578 <__aeabi_f2d>
 8000c0e:	a348      	add	r3, pc, #288	; (adr r3, 8000d30 <SecondTask+0x1f8>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff fd7c 	bl	8000710 <__aeabi_dcmpge>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SecondTask+0xea>
 8000c1e:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <SecondTask+0x23c>)
 8000c20:	e010      	b.n	8000c44 <SecondTask+0x10c>
 8000c22:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <SecondTask+0x238>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fca6 	bl	8000578 <__aeabi_f2d>
 8000c2c:	a344      	add	r3, pc, #272	; (adr r3, 8000d40 <SecondTask+0x208>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	f7ff fb43 	bl	80002bc <__adddf3>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff fd7b 	bl	8000738 <__aeabi_d2f>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a4a      	ldr	r2, [pc, #296]	; (8000d70 <SecondTask+0x238>)
 8000c46:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c48:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <SecondTask+0x240>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b9f      	cmp	r3, #159	; 0x9f
 8000c4e:	dc03      	bgt.n	8000c58 <SecondTask+0x120>
 8000c50:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <SecondTask+0x240>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3302      	adds	r3, #2
 8000c56:	e000      	b.n	8000c5a <SecondTask+0x122>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <SecondTask+0x240>)
 8000c5c:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c5e:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <SecondTask+0x244>)
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c70:	db01      	blt.n	8000c76 <SecondTask+0x13e>
 8000c72:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <SecondTask+0x248>)
 8000c74:	e010      	b.n	8000c98 <SecondTask+0x160>
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <SecondTask+0x244>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fc7c 	bl	8000578 <__aeabi_f2d>
 8000c80:	a331      	add	r3, pc, #196	; (adr r3, 8000d48 <SecondTask+0x210>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff fb19 	bl	80002bc <__adddf3>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f7ff fd51 	bl	8000738 <__aeabi_d2f>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a38      	ldr	r2, [pc, #224]	; (8000d7c <SecondTask+0x244>)
 8000c9a:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000c9c:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <SecondTask+0x24c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b63      	cmp	r3, #99	; 0x63
 8000ca2:	dc03      	bgt.n	8000cac <SecondTask+0x174>
 8000ca4:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <SecondTask+0x250>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	e000      	b.n	8000cae <SecondTask+0x176>
 8000cac:	2301      	movs	r3, #1
 8000cae:	4a35      	ldr	r2, [pc, #212]	; (8000d84 <SecondTask+0x24c>)
 8000cb0:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <SecondTask+0x250>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b63      	cmp	r3, #99	; 0x63
 8000cb8:	dc03      	bgt.n	8000cc2 <SecondTask+0x18a>
 8000cba:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <SecondTask+0x250>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	e000      	b.n	8000cc4 <SecondTask+0x18c>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <SecondTask+0x250>)
 8000cc6:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cc8:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <SecondTask+0x254>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd0:	da03      	bge.n	8000cda <SecondTask+0x1a2>
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <SecondTask+0x254>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	330c      	adds	r3, #12
 8000cd8:	e001      	b.n	8000cde <SecondTask+0x1a6>
 8000cda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cde:	4a2b      	ldr	r2, [pc, #172]	; (8000d8c <SecondTask+0x254>)
 8000ce0:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <SecondTask+0x254>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cea:	da03      	bge.n	8000cf4 <SecondTask+0x1bc>
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <SecondTask+0x258>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	e001      	b.n	8000cf8 <SecondTask+0x1c0>
 8000cf4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cf8:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <SecondTask+0x258>)
 8000cfa:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <SecondTask+0x25c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b63      	cmp	r3, #99	; 0x63
 8000d02:	dc03      	bgt.n	8000d0c <SecondTask+0x1d4>
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <SecondTask+0x25c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	e000      	b.n	8000d0e <SecondTask+0x1d6>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <SecondTask+0x25c>)
 8000d10:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <SecondTask+0x260>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d24:	db3c      	blt.n	8000da0 <SecondTask+0x268>
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <SecondTask+0x264>)
 8000d28:	e04b      	b.n	8000dc2 <SecondTask+0x28a>
 8000d2a:	bf00      	nop
 8000d2c:	f3af 8000 	nop.w
 8000d30:	66666666 	.word	0x66666666
 8000d34:	3ff66666 	.word	0x3ff66666
 8000d38:	9999999a 	.word	0x9999999a
 8000d3c:	3fa99999 	.word	0x3fa99999
 8000d40:	eb851eb8 	.word	0xeb851eb8
 8000d44:	3faeb851 	.word	0x3faeb851
 8000d48:	9999999a 	.word	0x9999999a
 8000d4c:	3fb99999 	.word	0x3fb99999
 8000d50:	080296c4 	.word	0x080296c4
 8000d54:	200087a8 	.word	0x200087a8
 8000d58:	0802a388 	.word	0x0802a388
 8000d5c:	20000004 	.word	0x20000004
 8000d60:	2000000c 	.word	0x2000000c
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000010 	.word	0x20000010
 8000d6c:	3f19999a 	.word	0x3f19999a
 8000d70:	20000014 	.word	0x20000014
 8000d74:	3f266666 	.word	0x3f266666
 8000d78:	200003c4 	.word	0x200003c4
 8000d7c:	200003c8 	.word	0x200003c8
 8000d80:	3dcccccd 	.word	0x3dcccccd
 8000d84:	200003cc 	.word	0x200003cc
 8000d88:	200003d0 	.word	0x200003d0
 8000d8c:	200003d4 	.word	0x200003d4
 8000d90:	200003d8 	.word	0x200003d8
 8000d94:	200003dc 	.word	0x200003dc
 8000d98:	200003e0 	.word	0x200003e0
 8000d9c:	41200000 	.word	0x41200000
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SecondTask+0x300>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fbe7 	bl	8000578 <__aeabi_f2d>
 8000daa:	a321      	add	r3, pc, #132	; (adr r3, 8000e30 <SecondTask+0x2f8>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff fa84 	bl	80002bc <__adddf3>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fcbc 	bl	8000738 <__aeabi_d2f>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <SecondTask+0x300>)
 8000dc4:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v};
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <SecondTask+0x304>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <SecondTask+0x308>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <SecondTask+0x30c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <SecondTask+0x310>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <SecondTask+0x314>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <SecondTask+0x318>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	623b      	str	r3, [r7, #32]
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <SecondTask+0x31c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <SecondTask+0x320>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <SecondTask+0x324>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <SecondTask+0x328>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <SecondTask+0x32c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <SecondTask+0x330>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <SecondTask+0x300>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
	    xQueueSend(messageQ, &dispVals,0);
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <SecondTask+0x334>)
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f00c fae0 	bl	800d3e4 <xQueueGenericSend>
		osDelay(50);
 8000e24:	2032      	movs	r0, #50	; 0x32
 8000e26:	f00b ffeb 	bl	800ce00 <osDelay>
	{
 8000e2a:	e6a0      	b.n	8000b6e <SecondTask+0x36>
 8000e2c:	f3af 8000 	nop.w
 8000e30:	33333333 	.word	0x33333333
 8000e34:	3fe33333 	.word	0x3fe33333
 8000e38:	200003e0 	.word	0x200003e0
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	2000000c 	.word	0x2000000c
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000010 	.word	0x20000010
 8000e4c:	20000014 	.word	0x20000014
 8000e50:	200003c4 	.word	0x200003c4
 8000e54:	200003c8 	.word	0x200003c8
 8000e58:	200003cc 	.word	0x200003cc
 8000e5c:	200003d0 	.word	0x200003d0
 8000e60:	200003d4 	.word	0x200003d4
 8000e64:	200003d8 	.word	0x200003d8
 8000e68:	200003dc 	.word	0x200003dc
 8000e6c:	200087a4 	.word	0x200087a4

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f002 fd02 	bl	800387e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 f85f 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f001 f9d5 	bl	800222c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e82:	f000 f917 	bl	80010b4 <MX_ADC3_Init>
  MX_CRC_Init();
 8000e86:	f000 fb0d 	bl	80014a4 <MX_CRC_Init>
  MX_DCMI_Init();
 8000e8a:	f000 fb2d 	bl	80014e8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e8e:	f000 fb5f 	bl	8001550 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e92:	f001 f91f 	bl	80020d4 <MX_FMC_Init>
  MX_LTDC_Init();
 8000e96:	f000 fb8d 	bl	80015b4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000e9a:	f000 fc0d 	bl	80016b8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000e9e:	f000 fc37 	bl	8001710 <MX_RTC_Init>
  MX_SAI2_Init();
 8000ea2:	f000 fcdd 	bl	8001860 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000ea6:	f000 fd83 	bl	80019b0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000eaa:	f000 fda1 	bl	80019f0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000eae:	f000 fdcf 	bl	8001a50 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000eb2:	f000 fe0b 	bl	8001acc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eb6:	f000 feb5 	bl	8001c24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eba:	f000 ff29 	bl	8001d10 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ebe:	f000 ff9d 	bl	8001dfc <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ec2:	f001 f811 	bl	8001ee8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ec6:	f001 f861 	bl	8001f8c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000eca:	f001 f8a3 	bl	8002014 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ece:	f001 f8d1 	bl	8002074 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000ed2:	f00b fc51 	bl	800c778 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000ed6:	f000 f93f 	bl	8001158 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000eda:	f00f f939 	bl	8010150 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <main+0xbc>)
 8000ee0:	f107 041c 	add.w	r4, r7, #28
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00b ff35 	bl	800cd68 <osThreadCreate>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <main+0xc0>)
 8000f02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <main+0xc4>)
 8000f06:	463c      	mov	r4, r7
 8000f08:	461d      	mov	r5, r3
 8000f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f16:	463b      	mov	r3, r7
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00b ff24 	bl	800cd68 <osThreadCreate>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <main+0xc8>)
 8000f24:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f26:	f00b fefc 	bl	800cd22 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <main+0xba>
 8000f2c:	080296ec 	.word	0x080296ec
 8000f30:	2000c234 	.word	0x2000c234
 8000f34:	08029708 	.word	0x08029708
 8000f38:	2000c230 	.word	0x2000c230

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0b4      	sub	sp, #208	; 0xd0
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f46:	2230      	movs	r2, #48	; 0x30
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f027 fbb6 	bl	80286bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	2284      	movs	r2, #132	; 0x84
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f027 fba7 	bl	80286bc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f6e:	f005 fe93 	bl	8006c98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <SystemClock_Config+0x16c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <SystemClock_Config+0x16c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <SystemClock_Config+0x16c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8a:	4b48      	ldr	r3, [pc, #288]	; (80010ac <SystemClock_Config+0x170>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a47      	ldr	r2, [pc, #284]	; (80010ac <SystemClock_Config+0x170>)
 8000f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b45      	ldr	r3, [pc, #276]	; (80010ac <SystemClock_Config+0x170>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fa2:	2309      	movs	r3, #9
 8000fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fc4:	2319      	movs	r3, #25
 8000fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 ff7a 	bl	8006edc <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fee:	f001 fb51 	bl	8002694 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff2:	f005 fe61 	bl	8006cb8 <HAL_PWREx_EnableOverDrive>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ffc:	f001 fb4a 	bl	8002694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001012:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001016:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001022:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001026:	2106      	movs	r1, #6
 8001028:	4618      	mov	r0, r3
 800102a:	f006 f9fb 	bl	8007424 <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001034:	f001 fb2e 	bl	8002694 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <SystemClock_Config+0x174>)
 800103a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800104c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001050:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001052:	2305      	movs	r3, #5
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800105a:	2303      	movs	r3, #3
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800106c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001072:	2300      	movs	r3, #0
 8001074:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001076:	2300      	movs	r3, #0
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800107a:	2300      	movs	r3, #0
 800107c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800107e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fbcf 	bl	8007834 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800109c:	f001 fafa 	bl	8002694 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	37d0      	adds	r7, #208	; 0xd0
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000
 80010b0:	01b00868 	.word	0x01b00868

080010b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_ADC3_Init+0x98>)
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <MX_ADC3_Init+0x9c>)
 80010ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_ADC3_Init+0x98>)
 80010ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_ADC3_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_ADC3_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_ADC3_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_ADC3_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_ADC3_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_ADC3_Init+0x98>)
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <MX_ADC3_Init+0xa0>)
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_ADC3_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_ADC3_Init+0x98>)
 8001102:	2201      	movs	r2, #1
 8001104:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_ADC3_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_ADC3_Init+0x98>)
 8001110:	2201      	movs	r2, #1
 8001112:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_ADC3_Init+0x98>)
 8001116:	f002 fc03 	bl	8003920 <HAL_ADC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001120:	f001 fab8 	bl	8002694 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001124:	2304      	movs	r3, #4
 8001126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001128:	2301      	movs	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_ADC3_Init+0x98>)
 8001136:	f002 fc37 	bl	80039a8 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001140:	f001 faa8 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000c57c 	.word	0x2000c57c
 8001150:	40012200 	.word	0x40012200
 8001154:	0f000001 	.word	0x0f000001

08001158 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800115e:	4b30      	ldr	r3, [pc, #192]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001160:	4a30      	ldr	r2, [pc, #192]	; (8001224 <MX_CAN1_Init+0xcc>)
 8001162:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001166:	2214      	movs	r2, #20
 8001168:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <MX_CAN1_Init+0xc8>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001178:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800117c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001186:	2200      	movs	r2, #0
 8001188:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <MX_CAN1_Init+0xc8>)
 800118c:	2200      	movs	r2, #0
 800118e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001192:	2200      	movs	r2, #0
 8001194:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001198:	2200      	movs	r2, #0
 800119a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <MX_CAN1_Init+0xc8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <MX_CAN1_Init+0xc8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011a8:	481d      	ldr	r0, [pc, #116]	; (8001220 <MX_CAN1_Init+0xc8>)
 80011aa:	f002 fe41 	bl	8003e30 <HAL_CAN_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011b4:	f001 fa6e 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011dc:	230e      	movs	r3, #14
 80011de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_CAN1_Init+0xc8>)
 80011e6:	f002 ff1f 	bl	8004028 <HAL_CAN_ConfigFilter>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80011f0:	f001 fa50 	bl	8002694 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80011f4:	480a      	ldr	r0, [pc, #40]	; (8001220 <MX_CAN1_Init+0xc8>)
 80011f6:	f002 fff7 	bl	80041e8 <HAL_CAN_Start>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001200:	f001 fa48 	bl	8002694 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001204:	2102      	movs	r1, #2
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <MX_CAN1_Init+0xc8>)
 8001208:	f003 f944 	bl	8004494 <HAL_CAN_ActivateNotification>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 8001212:	f001 fa3f 	bl	8002694 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000c7fc 	.word	0x2000c7fc
 8001224:	40006400 	.word	0x40006400

08001228 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001230:	4b89      	ldr	r3, [pc, #548]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001234:	2100      	movs	r1, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f003 f81a 	bl	8004270 <HAL_CAN_GetRxMessage>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001242:	f001 fa27 	bl	8002694 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001246:	4b85      	ldr	r3, [pc, #532]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800124e:	d145      	bne.n	80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001250:	4b82      	ldr	r3, [pc, #520]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d141      	bne.n	80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001258:	4b80      	ldr	r3, [pc, #512]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2b08      	cmp	r3, #8
 800125e:	d13d      	bne.n	80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8001260:	4b7d      	ldr	r3, [pc, #500]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b21a      	sxth	r2, r3
 8001266:	4b7c      	ldr	r3, [pc, #496]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 8001274:	4b78      	ldr	r3, [pc, #480]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001276:	789b      	ldrb	r3, [r3, #2]
 8001278:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 800127c:	4b76      	ldr	r3, [pc, #472]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[5] << 8);
 8001284:	4b74      	ldr	r3, [pc, #464]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001286:	791b      	ldrb	r3, [r3, #4]
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b73      	ldr	r3, [pc, #460]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800128c:	795b      	ldrb	r3, [r3, #5]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 8001298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129a:	4a71      	ldr	r2, [pc, #452]	; (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800129c:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 800129e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ac:	ee17 2a90 	vmov	r2, s15
 80012b0:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80012b2:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 80012b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012b8:	4a6b      	ldr	r2, [pc, #428]	; (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80012ba:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 80012bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d4:	ee17 2a90 	vmov	r2, s15
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80012da:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012dc:	4b5f      	ldr	r3, [pc, #380]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f240 6202 	movw	r2, #1538	; 0x602
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d12d      	bne.n	8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 80012e8:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d129      	bne.n	8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 80012f0:	4b5a      	ldr	r3, [pc, #360]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d125      	bne.n	8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
  {
	 uint8_t oil_tmp_in = RxData[3];
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80012fa:	78db      	ldrb	r3, [r3, #3]
 80012fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 uint8_t oil_press_in = RxData[4];
 8001300:	4b55      	ldr	r3, [pc, #340]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	f887 3020 	strb.w	r3, [r7, #32]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800130a:	799b      	ldrb	r3, [r3, #6]
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b52      	ldr	r3, [pc, #328]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001310:	79db      	ldrb	r3, [r3, #7]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	83fb      	strh	r3, [r7, #30]

	 oil_tmp = ((int)oil_tmp_in) * 1;
 800131c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001320:	4a53      	ldr	r2, [pc, #332]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001322:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 8001324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8001334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800133a:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 800133e:	8bfb      	ldrh	r3, [r7, #30]
 8001340:	4a4e      	ldr	r2, [pc, #312]	; (800147c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001342:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001344:	4b45      	ldr	r3, [pc, #276]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f240 6203 	movw	r2, #1539	; 0x603
 800134c:	4293      	cmp	r3, r2
 800134e:	d130      	bne.n	80013b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8001350:	4b42      	ldr	r3, [pc, #264]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d12c      	bne.n	80013b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
 8001358:	4b40      	ldr	r3, [pc, #256]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b08      	cmp	r3, #8
 800135e:	d128      	bne.n	80013b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
  {
	 uint8_t lambda_in = RxData[2];
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001362:	789b      	ldrb	r3, [r3, #2]
 8001364:	777b      	strb	r3, [r7, #29]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001368:	791b      	ldrb	r3, [r3, #4]
 800136a:	b21a      	sxth	r2, r3
 800136c:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800136e:	795b      	ldrb	r3, [r3, #5]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	837b      	strh	r3, [r7, #26]
	 uint16_t egt_2_in = (RxData[6] << 0) | (RxData[7] << 8);
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800137c:	799b      	ldrb	r3, [r3, #6]
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001382:	79db      	ldrb	r3, [r3, #7]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	833b      	strh	r3, [r7, #24]
	 lambda = ((float)lambda_in)*0.0078125f;
 800138e:	7f7b      	ldrb	r3, [r7, #29]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001398:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 80013a6:	8b7b      	ldrh	r3, [r7, #26]
 80013a8:	4a37      	ldr	r2, [pc, #220]	; (8001488 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 80013aa:	6013      	str	r3, [r2, #0]
	 egt_2 = (int)egt_2_in;
 80013ac:	8b3b      	ldrh	r3, [r7, #24]
 80013ae:	4a37      	ldr	r2, [pc, #220]	; (800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 80013b0:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f240 6204 	movw	r2, #1540	; 0x604
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d11f      	bne.n	80013fe <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d11b      	bne.n	80013fe <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d117      	bne.n	80013fe <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013d0:	789b      	ldrb	r3, [r3, #2]
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80013d6:	78db      	ldrb	r3, [r3, #3]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21b      	sxth	r3, r3
 80013e0:	82fb      	strh	r3, [r7, #22]
	 float battery_voltage = ((float)batt_in)*0.027f;
 80013e2:	8afb      	ldrh	r3, [r7, #22]
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ec:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
 80013f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f4:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 80013f8:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001406:	d123      	bne.n	8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d11f      	bne.n	8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d11b      	bne.n	8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	73fb      	strb	r3, [r7, #15]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001420:	785b      	ldrb	r3, [r3, #1]
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001426:	789b      	ldrb	r3, [r3, #2]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	81bb      	strh	r3, [r7, #12]
  	 lambda_targ = ((float)lambda_targ_in) / 100;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>
 8001440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001446:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 800144a:	89bb      	ldrh	r3, [r7, #12]
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800144e:	6013      	str	r3, [r2, #0]
    }
}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000c7b4 	.word	0x2000c7b4
 800145c:	2000c898 	.word	0x2000c898
 8001460:	20000004 	.word	0x20000004
 8001464:	20000008 	.word	0x20000008
 8001468:	200003d0 	.word	0x200003d0
 800146c:	200003dc 	.word	0x200003dc
 8001470:	200003c4 	.word	0x200003c4
 8001474:	3d800000 	.word	0x3d800000
 8001478:	200003c8 	.word	0x200003c8
 800147c:	2000000c 	.word	0x2000000c
 8001480:	3c000000 	.word	0x3c000000
 8001484:	20000010 	.word	0x20000010
 8001488:	200003d4 	.word	0x200003d4
 800148c:	200003d8 	.word	0x200003d8
 8001490:	3cdd2f1b 	.word	0x3cdd2f1b
 8001494:	200003e0 	.word	0x200003e0
 8001498:	42c80000 	.word	0x42c80000
 800149c:	20000014 	.word	0x20000014
 80014a0:	200003cc 	.word	0x200003cc

080014a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <MX_CRC_Init+0x3c>)
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <MX_CRC_Init+0x40>)
 80014ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_CRC_Init+0x3c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <MX_CRC_Init+0x3c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_CRC_Init+0x3c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <MX_CRC_Init+0x3c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_CRC_Init+0x3c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_CRC_Init+0x3c>)
 80014ce:	f003 fb4b 	bl	8004b68 <HAL_CRC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014d8:	f001 f8dc 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000c3ac 	.word	0x2000c3ac
 80014e4:	40023000 	.word	0x40023000

080014e8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <MX_DCMI_Init+0x60>)
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <MX_DCMI_Init+0x64>)
 80014f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_DCMI_Init+0x60>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_DCMI_Init+0x60>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_DCMI_Init+0x60>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MX_DCMI_Init+0x60>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_DCMI_Init+0x60>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001510:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <MX_DCMI_Init+0x60>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_DCMI_Init+0x60>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <MX_DCMI_Init+0x60>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_DCMI_Init+0x60>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <MX_DCMI_Init+0x60>)
 800152a:	2200      	movs	r2, #0
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_DCMI_Init+0x60>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_DCMI_Init+0x60>)
 8001536:	f003 fc01 	bl	8004d3c <HAL_DCMI_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001540:	f001 f8a8 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000c5c4 	.word	0x2000c5c4
 800154c:	50050000 	.word	0x50050000

08001550 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_DMA2D_Init+0x5c>)
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <MX_DMA2D_Init+0x60>)
 8001558:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_DMA2D_Init+0x5c>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_DMA2D_Init+0x5c>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_DMA2D_Init+0x5c>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_DMA2D_Init+0x5c>)
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_DMA2D_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_DMA2D_Init+0x5c>)
 800157a:	2200      	movs	r2, #0
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_DMA2D_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <MX_DMA2D_Init+0x5c>)
 8001586:	f003 fced 	bl	8004f64 <HAL_DMA2D_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001590:	f001 f880 	bl	8002694 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001594:	2101      	movs	r1, #1
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_DMA2D_Init+0x5c>)
 8001598:	f003 ffae 	bl	80054f8 <HAL_DMA2D_ConfigLayer>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80015a2:	f001 f877 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000c774 	.word	0x2000c774
 80015b0:	4002b000 	.word	0x4002b000

080015b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2234      	movs	r2, #52	; 0x34
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f027 f87b 	bl	80286bc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015c8:	4a3a      	ldr	r2, [pc, #232]	; (80016b4 <MX_LTDC_Init+0x100>)
 80015ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015de:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015e6:	2228      	movs	r2, #40	; 0x28
 80015e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015ec:	2209      	movs	r2, #9
 80015ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015f2:	2235      	movs	r2, #53	; 0x35
 80015f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015f8:	220b      	movs	r2, #11
 80015fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <MX_LTDC_Init+0xfc>)
 80015fe:	f240 2215 	movw	r2, #533	; 0x215
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <MX_LTDC_Init+0xfc>)
 8001606:	f240 121b 	movw	r2, #283	; 0x11b
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <MX_LTDC_Init+0xfc>)
 800160e:	f240 2235 	movw	r2, #565	; 0x235
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <MX_LTDC_Init+0xfc>)
 8001616:	f240 121d 	movw	r2, #285	; 0x11d
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <MX_LTDC_Init+0xfc>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <MX_LTDC_Init+0xfc>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_LTDC_Init+0xfc>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001634:	481e      	ldr	r0, [pc, #120]	; (80016b0 <MX_LTDC_Init+0xfc>)
 8001636:	f004 ff97 	bl	8006568 <HAL_LTDC_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001640:	f001 f828 	bl	8002694 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001648:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800164c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001652:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001656:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001658:	2301      	movs	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800165c:	23ff      	movs	r3, #255	; 0xff
 800165e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001668:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800166a:	2305      	movs	r3, #5
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800166e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001674:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800167a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_LTDC_Init+0xfc>)
 800169a:	f005 f8ed 	bl	8006878 <HAL_LTDC_ConfigLayer>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80016a4:	f000 fff6 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3738      	adds	r7, #56	; 0x38
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000c4d4 	.word	0x2000c4d4
 80016b4:	40016800 	.word	0x40016800

080016b8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <MX_QUADSPI_Init+0x54>)
 80016c0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_QUADSPI_Init+0x50>)
 80016f4:	f005 fb30 	bl	8006d58 <HAL_QSPI_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80016fe:	f000 ffc9 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000c8b4 	.word	0x2000c8b4
 800170c:	a0001000 	.word	0xa0001000

08001710 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b092      	sub	sp, #72	; 0x48
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	222c      	movs	r2, #44	; 0x2c
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f026 ffc2 	bl	80286bc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001738:	4b47      	ldr	r3, [pc, #284]	; (8001858 <MX_RTC_Init+0x148>)
 800173a:	4a48      	ldr	r2, [pc, #288]	; (800185c <MX_RTC_Init+0x14c>)
 800173c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800173e:	4b46      	ldr	r3, [pc, #280]	; (8001858 <MX_RTC_Init+0x148>)
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001744:	4b44      	ldr	r3, [pc, #272]	; (8001858 <MX_RTC_Init+0x148>)
 8001746:	227f      	movs	r2, #127	; 0x7f
 8001748:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <MX_RTC_Init+0x148>)
 800174c:	22ff      	movs	r2, #255	; 0xff
 800174e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001750:	4b41      	ldr	r3, [pc, #260]	; (8001858 <MX_RTC_Init+0x148>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <MX_RTC_Init+0x148>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800175c:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <MX_RTC_Init+0x148>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001762:	483d      	ldr	r0, [pc, #244]	; (8001858 <MX_RTC_Init+0x148>)
 8001764:	f006 fd98 	bl	8008298 <HAL_RTC_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800176e:	f000 ff91 	bl	8002694 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001784:	2300      	movs	r3, #0
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800178c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001790:	2201      	movs	r2, #1
 8001792:	4619      	mov	r1, r3
 8001794:	4830      	ldr	r0, [pc, #192]	; (8001858 <MX_RTC_Init+0x148>)
 8001796:	f006 fdfb 	bl	8008390 <HAL_RTC_SetTime>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80017a0:	f000 ff78 	bl	8002694 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c0:	2201      	movs	r2, #1
 80017c2:	4619      	mov	r1, r3
 80017c4:	4824      	ldr	r0, [pc, #144]	; (8001858 <MX_RTC_Init+0x148>)
 80017c6:	f006 fea1 	bl	800850c <HAL_RTC_SetDate>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80017d0:	f000 ff60 	bl	8002694 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80017d8:	2300      	movs	r3, #0
 80017da:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80017dc:	2300      	movs	r3, #0
 80017de:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80017fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	2201      	movs	r2, #1
 8001808:	4619      	mov	r1, r3
 800180a:	4813      	ldr	r0, [pc, #76]	; (8001858 <MX_RTC_Init+0x148>)
 800180c:	f006 ff26 	bl	800865c <HAL_RTC_SetAlarm>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001816:	f000 ff3d 	bl	8002694 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	2201      	movs	r2, #1
 800182a:	4619      	mov	r1, r3
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <MX_RTC_Init+0x148>)
 800182e:	f006 ff15 	bl	800865c <HAL_RTC_SetAlarm>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001838:	f000 ff2c 	bl	8002694 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800183c:	2202      	movs	r2, #2
 800183e:	2100      	movs	r1, #0
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_RTC_Init+0x148>)
 8001842:	f007 f895 	bl	8008970 <HAL_RTCEx_SetTimeStamp>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800184c:	f000 ff22 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3748      	adds	r7, #72	; 0x48
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000c694 	.word	0x2000c694
 800185c:	40002800 	.word	0x40002800

08001860 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <MX_SAI2_Init+0x13c>)
 8001866:	4a4e      	ldr	r2, [pc, #312]	; (80019a0 <MX_SAI2_Init+0x140>)
 8001868:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800186a:	4b4c      	ldr	r3, [pc, #304]	; (800199c <MX_SAI2_Init+0x13c>)
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <MX_SAI2_Init+0x13c>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <MX_SAI2_Init+0x13c>)
 8001878:	2240      	movs	r2, #64	; 0x40
 800187a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <MX_SAI2_Init+0x13c>)
 800187e:	2200      	movs	r2, #0
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <MX_SAI2_Init+0x13c>)
 8001884:	2200      	movs	r2, #0
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001888:	4b44      	ldr	r3, [pc, #272]	; (800199c <MX_SAI2_Init+0x13c>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800188e:	4b43      	ldr	r3, [pc, #268]	; (800199c <MX_SAI2_Init+0x13c>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001894:	4b41      	ldr	r3, [pc, #260]	; (800199c <MX_SAI2_Init+0x13c>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800189a:	4b40      	ldr	r3, [pc, #256]	; (800199c <MX_SAI2_Init+0x13c>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018a0:	4b3e      	ldr	r3, [pc, #248]	; (800199c <MX_SAI2_Init+0x13c>)
 80018a2:	4a40      	ldr	r2, [pc, #256]	; (80019a4 <MX_SAI2_Init+0x144>)
 80018a4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <MX_SAI2_Init+0x13c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018ac:	4b3b      	ldr	r3, [pc, #236]	; (800199c <MX_SAI2_Init+0x13c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <MX_SAI2_Init+0x13c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018b8:	4b38      	ldr	r3, [pc, #224]	; (800199c <MX_SAI2_Init+0x13c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80018be:	4b37      	ldr	r3, [pc, #220]	; (800199c <MX_SAI2_Init+0x13c>)
 80018c0:	2208      	movs	r2, #8
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018c4:	4b35      	ldr	r3, [pc, #212]	; (800199c <MX_SAI2_Init+0x13c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <MX_SAI2_Init+0x13c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <MX_SAI2_Init+0x13c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <MX_SAI2_Init+0x13c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <MX_SAI2_Init+0x13c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <MX_SAI2_Init+0x13c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <MX_SAI2_Init+0x13c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <MX_SAI2_Init+0x13c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80018f4:	4829      	ldr	r0, [pc, #164]	; (800199c <MX_SAI2_Init+0x13c>)
 80018f6:	f007 f891 	bl	8008a1c <HAL_SAI_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001900:	f000 fec8 	bl	8002694 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001906:	4a29      	ldr	r2, [pc, #164]	; (80019ac <MX_SAI2_Init+0x14c>)
 8001908:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <MX_SAI2_Init+0x148>)
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001912:	2203      	movs	r2, #3
 8001914:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_SAI2_Init+0x148>)
 800191e:	2200      	movs	r2, #0
 8001920:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001924:	2200      	movs	r2, #0
 8001926:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_SAI2_Init+0x148>)
 800192a:	2201      	movs	r2, #1
 800192c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_SAI2_Init+0x148>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_SAI2_Init+0x148>)
 800194e:	2200      	movs	r2, #0
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001954:	2208      	movs	r2, #8
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_SAI2_Init+0x148>)
 800195a:	2201      	movs	r2, #1
 800195c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001960:	2200      	movs	r2, #0
 8001962:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001966:	2200      	movs	r2, #0
 8001968:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_SAI2_Init+0x148>)
 800196c:	2200      	movs	r2, #0
 800196e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001972:	2200      	movs	r2, #0
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001978:	2200      	movs	r2, #0
 800197a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_SAI2_Init+0x148>)
 800197e:	2201      	movs	r2, #1
 8001980:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_SAI2_Init+0x148>)
 8001984:	2200      	movs	r2, #0
 8001986:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <MX_SAI2_Init+0x148>)
 800198a:	f007 f847 	bl	8008a1c <HAL_SAI_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001994:	f000 fe7e 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000c328 	.word	0x2000c328
 80019a0:	40015c04 	.word	0x40015c04
 80019a4:	0002ee00 	.word	0x0002ee00
 80019a8:	2000c1ac 	.word	0x2000c1ac
 80019ac:	40015c24 	.word	0x40015c24

080019b0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_SDMMC1_SD_Init+0x38>)
 80019b6:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <MX_SDMMC1_SD_Init+0x3c>)
 80019b8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_SDMMC1_SD_Init+0x38>)
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_SDMMC1_SD_Init+0x38>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_SDMMC1_SD_Init+0x38>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_SDMMC1_SD_Init+0x38>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <MX_SDMMC1_SD_Init+0x38>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <MX_SDMMC1_SD_Init+0x38>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	2000c3d0 	.word	0x2000c3d0
 80019ec:	40012c00 	.word	0x40012c00

080019f0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 80019f6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019fa:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a3a:	f008 fa85 	bl	8009f48 <HAL_SPDIFRX_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001a44:	f000 fe26 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000c2dc 	.word	0x2000c2dc

08001a50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <MX_SPI2_Init+0x78>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a6a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001aaa:	2208      	movs	r2, #8
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_SPI2_Init+0x74>)
 8001ab0:	f008 faa6 	bl	800a000 <HAL_SPI_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f000 fdeb 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000c238 	.word	0x2000c238
 8001ac8:	40003800 	.word	0x40003800

08001acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09a      	sub	sp, #104	; 0x68
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	222c      	movs	r2, #44	; 0x2c
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f026 fdd8 	bl	80286bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b0e:	4a44      	ldr	r2, [pc, #272]	; (8001c20 <MX_TIM1_Init+0x154>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b12:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b2a:	4b3c      	ldr	r3, [pc, #240]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b36:	4839      	ldr	r0, [pc, #228]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b38:	f008 faf4 	bl	800a124 <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b42:	f000 fda7 	bl	8002694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b50:	4619      	mov	r1, r3
 8001b52:	4832      	ldr	r0, [pc, #200]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b54:	f008 fd9e 	bl	800a694 <HAL_TIM_ConfigClockSource>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b5e:	f000 fd99 	bl	8002694 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b62:	482e      	ldr	r0, [pc, #184]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b64:	f008 fb34 	bl	800a1d0 <HAL_TIM_PWM_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b6e:	f000 fd91 	bl	8002694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4825      	ldr	r0, [pc, #148]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001b86:	f009 fa0b 	bl	800afa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b90:	f000 fd80 	bl	8002694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b94:	2360      	movs	r3, #96	; 0x60
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4818      	ldr	r0, [pc, #96]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001bba:	f008 fc53 	bl	800a464 <HAL_TIM_PWM_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001bc4:	f000 fd66 	bl	8002694 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4807      	ldr	r0, [pc, #28]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001bfe:	f009 fa5d 	bl	800b0bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001c08:	f000 fd44 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <MX_TIM1_Init+0x150>)
 8001c0e:	f001 fa3b 	bl	8003088 <HAL_TIM_MspPostInit>

}
 8001c12:	bf00      	nop
 8001c14:	3768      	adds	r7, #104	; 0x68
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000c6b4 	.word	0x2000c6b4
 8001c20:	40010000 	.word	0x40010000

08001c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08e      	sub	sp, #56	; 0x38
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001c58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c64:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001c6a:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c70:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c76:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c7c:	4823      	ldr	r0, [pc, #140]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001c7e:	f008 fa51 	bl	800a124 <HAL_TIM_Base_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c88:	f000 fd04 	bl	8002694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c96:	4619      	mov	r1, r3
 8001c98:	481c      	ldr	r0, [pc, #112]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001c9a:	f008 fcfb 	bl	800a694 <HAL_TIM_ConfigClockSource>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ca4:	f000 fcf6 	bl	8002694 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ca8:	4818      	ldr	r0, [pc, #96]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001caa:	f008 fa91 	bl	800a1d0 <HAL_TIM_PWM_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cb4:	f000 fcee 	bl	8002694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4811      	ldr	r0, [pc, #68]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001cc8:	f009 f96a 	bl	800afa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cd2:	f000 fcdf 	bl	8002694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd6:	2360      	movs	r3, #96	; 0x60
 8001cd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	4807      	ldr	r0, [pc, #28]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001cee:	f008 fbb9 	bl	800a464 <HAL_TIM_PWM_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cf8:	f000 fccc 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cfc:	4803      	ldr	r0, [pc, #12]	; (8001d0c <MX_TIM2_Init+0xe8>)
 8001cfe:	f001 f9c3 	bl	8003088 <HAL_TIM_MspPostInit>

}
 8001d02:	bf00      	nop
 8001d04:	3738      	adds	r7, #56	; 0x38
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000c7bc 	.word	0x2000c7bc

08001d10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d30:	463b      	mov	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	611a      	str	r2, [r3, #16]
 8001d3e:	615a      	str	r2, [r3, #20]
 8001d40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d44:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <MX_TIM3_Init+0xe8>)
 8001d46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d66:	4823      	ldr	r0, [pc, #140]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d68:	f008 f9dc 	bl	800a124 <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d72:	f000 fc8f 	bl	8002694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d80:	4619      	mov	r1, r3
 8001d82:	481c      	ldr	r0, [pc, #112]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d84:	f008 fc86 	bl	800a694 <HAL_TIM_ConfigClockSource>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d8e:	f000 fc81 	bl	8002694 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d92:	4818      	ldr	r0, [pc, #96]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001d94:	f008 fa1c 	bl	800a1d0 <HAL_TIM_PWM_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d9e:	f000 fc79 	bl	8002694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4619      	mov	r1, r3
 8001db0:	4810      	ldr	r0, [pc, #64]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001db2:	f009 f8f5 	bl	800afa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001dbc:	f000 fc6a 	bl	8002694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc0:	2360      	movs	r3, #96	; 0x60
 8001dc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4807      	ldr	r0, [pc, #28]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001dd8:	f008 fb44 	bl	800a464 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001de2:	f000 fc57 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001de6:	4803      	ldr	r0, [pc, #12]	; (8001df4 <MX_TIM3_Init+0xe4>)
 8001de8:	f001 f94e 	bl	8003088 <HAL_TIM_MspPostInit>

}
 8001dec:	bf00      	nop
 8001dee:	3738      	adds	r7, #56	; 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000c494 	.word	0x2000c494
 8001df8:	40000400 	.word	0x40000400

08001dfc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e30:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <MX_TIM5_Init+0xe8>)
 8001e32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e52:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e54:	f008 f966 	bl	800a124 <HAL_TIM_Base_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001e5e:	f000 fc19 	bl	8002694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e70:	f008 fc10 	bl	800a694 <HAL_TIM_ConfigClockSource>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e7a:	f000 fc0b 	bl	8002694 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e7e:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e80:	f008 f9a6 	bl	800a1d0 <HAL_TIM_PWM_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e8a:	f000 fc03 	bl	8002694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001e9e:	f009 f87f 	bl	800afa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001ea8:	f000 fbf4 	bl	8002694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eac:	2360      	movs	r3, #96	; 0x60
 8001eae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001ec4:	f008 face 	bl	800a464 <HAL_TIM_PWM_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001ece:	f000 fbe1 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM5_Init+0xe4>)
 8001ed4:	f001 f8d8 	bl	8003088 <HAL_TIM_MspPostInit>

}
 8001ed8:	bf00      	nop
 8001eda:	3738      	adds	r7, #56	; 0x38
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000c454 	.word	0x2000c454
 8001ee4:	40000c00 	.word	0x40000c00

08001ee8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <MX_TIM8_Init+0xa0>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f30:	4814      	ldr	r0, [pc, #80]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f32:	f008 f8f7 	bl	800a124 <HAL_TIM_Base_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001f3c:	f000 fbaa 	bl	8002694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f4e:	f008 fba1 	bl	800a694 <HAL_TIM_ConfigClockSource>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001f58:	f000 fb9c 	bl	8002694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_TIM8_Init+0x9c>)
 8001f6e:	f009 f817 	bl	800afa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001f78:	f000 fb8c 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000c29c 	.word	0x2000c29c
 8001f88:	40010400 	.word	0x40010400

08001f8c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <MX_TIM12_Init+0x80>)
 8001fa6:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <MX_TIM12_Init+0x84>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <MX_TIM12_Init+0x80>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <MX_TIM12_Init+0x80>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <MX_TIM12_Init+0x80>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <MX_TIM12_Init+0x80>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_TIM12_Init+0x80>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001fc8:	4810      	ldr	r0, [pc, #64]	; (800200c <MX_TIM12_Init+0x80>)
 8001fca:	f008 f901 	bl	800a1d0 <HAL_TIM_PWM_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001fd4:	f000 fb5e 	bl	8002694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd8:	2360      	movs	r3, #96	; 0x60
 8001fda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4807      	ldr	r0, [pc, #28]	; (800200c <MX_TIM12_Init+0x80>)
 8001ff0:	f008 fa38 	bl	800a464 <HAL_TIM_PWM_ConfigChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001ffa:	f000 fb4b 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ffe:	4803      	ldr	r0, [pc, #12]	; (800200c <MX_TIM12_Init+0x80>)
 8002000:	f001 f842 	bl	8003088 <HAL_TIM_MspPostInit>

}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000c824 	.word	0x2000c824
 8002010:	40001800 	.word	0x40001800

08002014 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_USART1_UART_Init+0x58>)
 800201a:	4a15      	ldr	r2, [pc, #84]	; (8002070 <MX_USART1_UART_Init+0x5c>)
 800201c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <MX_USART1_UART_Init+0x58>)
 8002020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_USART1_UART_Init+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_USART1_UART_Init+0x58>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_USART1_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_USART1_UART_Init+0x58>)
 800203a:	220c      	movs	r2, #12
 800203c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <MX_USART1_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_USART1_UART_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <MX_USART1_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_USART1_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_USART1_UART_Init+0x58>)
 8002058:	f009 f8cc 	bl	800b1f4 <HAL_UART_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002062:	f000 fb17 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2000c614 	.word	0x2000c614
 8002070:	40011000 	.word	0x40011000

08002074 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <MX_USART6_UART_Init+0x58>)
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <MX_USART6_UART_Init+0x5c>)
 800207c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <MX_USART6_UART_Init+0x58>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002084:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <MX_USART6_UART_Init+0x58>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <MX_USART6_UART_Init+0x58>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_USART6_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <MX_USART6_UART_Init+0x58>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <MX_USART6_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MX_USART6_UART_Init+0x58>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <MX_USART6_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <MX_USART6_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_USART6_UART_Init+0x58>)
 80020b8:	f009 f89c 	bl	800b1f4 <HAL_UART_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80020c2:	f000 fae7 	bl	8002694 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000c6f4 	.word	0x2000c6f4
 80020d0:	40011400 	.word	0x40011400

080020d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
 80020e8:	615a      	str	r2, [r3, #20]
 80020ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80020ec:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <MX_FMC_Init+0x14c>)
 80020ee:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <MX_FMC_Init+0x150>)
 80020f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80020f2:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <MX_FMC_Init+0x14c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80020f8:	4b49      	ldr	r3, [pc, #292]	; (8002220 <MX_FMC_Init+0x14c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80020fe:	4b48      	ldr	r3, [pc, #288]	; (8002220 <MX_FMC_Init+0x14c>)
 8002100:	2204      	movs	r2, #4
 8002102:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <MX_FMC_Init+0x14c>)
 8002106:	2210      	movs	r2, #16
 8002108:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800210a:	4b45      	ldr	r3, [pc, #276]	; (8002220 <MX_FMC_Init+0x14c>)
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002110:	4b43      	ldr	r3, [pc, #268]	; (8002220 <MX_FMC_Init+0x14c>)
 8002112:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002116:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <MX_FMC_Init+0x14c>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800211e:	4b40      	ldr	r3, [pc, #256]	; (8002220 <MX_FMC_Init+0x14c>)
 8002120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002124:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <MX_FMC_Init+0x14c>)
 8002128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800212e:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <MX_FMC_Init+0x14c>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002134:	2302      	movs	r3, #2
 8002136:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002138:	2307      	movs	r3, #7
 800213a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800213c:	2304      	movs	r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002140:	2307      	movs	r3, #7
 8002142:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002144:	2303      	movs	r3, #3
 8002146:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800214c:	2302      	movs	r3, #2
 800214e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	4619      	mov	r1, r3
 8002154:	4832      	ldr	r0, [pc, #200]	; (8002220 <MX_FMC_Init+0x14c>)
 8002156:	f007 fe77 	bl	8009e48 <HAL_SDRAM_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002160:	f000 fa98 	bl	8002694 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002168:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <MX_FMC_Init+0x154>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800216e:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <MX_FMC_Init+0x154>)
 8002170:	2210      	movs	r2, #16
 8002172:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <MX_FMC_Init+0x154>)
 8002176:	2201      	movs	r2, #1
 8002178:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <MX_FMC_Init+0x154>)
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002184:	4928      	ldr	r1, [pc, #160]	; (8002228 <MX_FMC_Init+0x154>)
 8002186:	4826      	ldr	r0, [pc, #152]	; (8002220 <MX_FMC_Init+0x14c>)
 8002188:	f007 fe92 	bl	8009eb0 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800218c:	2001      	movs	r0, #1
 800218e:	f001 fba3 	bl	80038d8 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <MX_FMC_Init+0x154>)
 8002194:	2202      	movs	r2, #2
 8002196:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <MX_FMC_Init+0x154>)
 800219a:	2210      	movs	r2, #16
 800219c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <MX_FMC_Init+0x154>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <MX_FMC_Init+0x154>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ae:	491e      	ldr	r1, [pc, #120]	; (8002228 <MX_FMC_Init+0x154>)
 80021b0:	481b      	ldr	r0, [pc, #108]	; (8002220 <MX_FMC_Init+0x14c>)
 80021b2:	f007 fe7d 	bl	8009eb0 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <MX_FMC_Init+0x154>)
 80021b8:	2203      	movs	r2, #3
 80021ba:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_FMC_Init+0x154>)
 80021be:	2210      	movs	r2, #16
 80021c0:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <MX_FMC_Init+0x154>)
 80021c4:	2208      	movs	r2, #8
 80021c6:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_FMC_Init+0x154>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d2:	4915      	ldr	r1, [pc, #84]	; (8002228 <MX_FMC_Init+0x154>)
 80021d4:	4812      	ldr	r0, [pc, #72]	; (8002220 <MX_FMC_Init+0x14c>)
 80021d6:	f007 fe6b 	bl	8009eb0 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80021da:	f44f 730c 	mov.w	r3, #560	; 0x230
 80021de:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_FMC_Init+0x154>)
 80021e2:	2204      	movs	r2, #4
 80021e4:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <MX_FMC_Init+0x154>)
 80021e8:	2210      	movs	r2, #16
 80021ea:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_FMC_Init+0x154>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <MX_FMC_Init+0x154>)
 80021f6:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fc:	490a      	ldr	r1, [pc, #40]	; (8002228 <MX_FMC_Init+0x154>)
 80021fe:	4808      	ldr	r0, [pc, #32]	; (8002220 <MX_FMC_Init+0x14c>)
 8002200:	f007 fe56 	bl	8009eb0 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002204:	f240 712b 	movw	r1, #1835	; 0x72b
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_FMC_Init+0x14c>)
 800220a:	f007 fe7c 	bl	8009f06 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800220e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002212:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002216:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000c864 	.word	0x2000c864
 8002224:	a0000140 	.word	0xa0000140
 8002228:	200003b4 	.word	0x200003b4

0800222c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b090      	sub	sp, #64	; 0x40
 8002230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002242:	4baf      	ldr	r3, [pc, #700]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4aae      	ldr	r2, [pc, #696]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002248:	f043 0310 	orr.w	r3, r3, #16
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4bac      	ldr	r3, [pc, #688]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800225a:	4ba9      	ldr	r3, [pc, #676]	; (8002500 <MX_GPIO_Init+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4aa8      	ldr	r2, [pc, #672]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4ba6      	ldr	r3, [pc, #664]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4aa2      	ldr	r2, [pc, #648]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <MX_GPIO_Init+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a9c      	ldr	r2, [pc, #624]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b9a      	ldr	r3, [pc, #616]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	4b97      	ldr	r3, [pc, #604]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a96      	ldr	r2, [pc, #600]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a90      	ldr	r2, [pc, #576]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80022ea:	4b85      	ldr	r3, [pc, #532]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a84      	ldr	r2, [pc, #528]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b82      	ldr	r3, [pc, #520]	; (8002500 <MX_GPIO_Init+0x2d4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002302:	4b7f      	ldr	r3, [pc, #508]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a7e      	ldr	r2, [pc, #504]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800231a:	4b79      	ldr	r3, [pc, #484]	; (8002500 <MX_GPIO_Init+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a78      	ldr	r2, [pc, #480]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002320:	f043 0320 	orr.w	r3, r3, #32
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002332:	4b73      	ldr	r3, [pc, #460]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a72      	ldr	r2, [pc, #456]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b70      	ldr	r3, [pc, #448]	; (8002500 <MX_GPIO_Init+0x2d4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	2120      	movs	r1, #32
 800234e:	486d      	ldr	r0, [pc, #436]	; (8002504 <MX_GPIO_Init+0x2d8>)
 8002350:	f003 fbc4 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	210c      	movs	r1, #12
 8002358:	486b      	ldr	r0, [pc, #428]	; (8002508 <MX_GPIO_Init+0x2dc>)
 800235a:	f003 fbbf 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800235e:	2201      	movs	r2, #1
 8002360:	2108      	movs	r1, #8
 8002362:	486a      	ldr	r0, [pc, #424]	; (800250c <MX_GPIO_Init+0x2e0>)
 8002364:	f003 fbba 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800236e:	4866      	ldr	r0, [pc, #408]	; (8002508 <MX_GPIO_Init+0x2dc>)
 8002370:	f003 fbb4 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237a:	4865      	ldr	r0, [pc, #404]	; (8002510 <MX_GPIO_Init+0x2e4>)
 800237c:	f003 fbae 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	21c8      	movs	r1, #200	; 0xc8
 8002384:	4863      	ldr	r0, [pc, #396]	; (8002514 <MX_GPIO_Init+0x2e8>)
 8002386:	f003 fba9 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800238a:	2308      	movs	r3, #8
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238e:	2300      	movs	r3, #0
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239a:	4619      	mov	r1, r3
 800239c:	485e      	ldr	r0, [pc, #376]	; (8002518 <MX_GPIO_Init+0x2ec>)
 800239e:	f003 f9d9 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80023a2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023b4:	230b      	movs	r3, #11
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023bc:	4619      	mov	r1, r3
 80023be:	4855      	ldr	r0, [pc, #340]	; (8002514 <MX_GPIO_Init+0x2e8>)
 80023c0:	f003 f9c8 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80023c4:	f643 4323 	movw	r3, #15395	; 0x3c23
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023d6:	230a      	movs	r3, #10
 80023d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023de:	4619      	mov	r1, r3
 80023e0:	484e      	ldr	r0, [pc, #312]	; (800251c <MX_GPIO_Init+0x2f0>)
 80023e2:	f003 f9b7 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80023e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ec:	2300      	movs	r3, #0
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f8:	4619      	mov	r1, r3
 80023fa:	4849      	ldr	r0, [pc, #292]	; (8002520 <MX_GPIO_Init+0x2f4>)
 80023fc:	f003 f9aa 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002400:	2340      	movs	r3, #64	; 0x40
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002404:	4b47      	ldr	r3, [pc, #284]	; (8002524 <MX_GPIO_Init+0x2f8>)
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002410:	4619      	mov	r1, r3
 8002412:	483c      	ldr	r0, [pc, #240]	; (8002504 <MX_GPIO_Init+0x2d8>)
 8002414:	f003 f99e 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002418:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800242a:	230a      	movs	r3, #10
 800242c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002432:	4619      	mov	r1, r3
 8002434:	483c      	ldr	r0, [pc, #240]	; (8002528 <MX_GPIO_Init+0x2fc>)
 8002436:	f003 f98d 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800243a:	2320      	movs	r3, #32
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	482c      	ldr	r0, [pc, #176]	; (8002504 <MX_GPIO_Init+0x2d8>)
 8002452:	f003 f97f 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002456:	f241 030c 	movw	r3, #4108	; 0x100c
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246c:	4619      	mov	r1, r3
 800246e:	4826      	ldr	r0, [pc, #152]	; (8002508 <MX_GPIO_Init+0x2dc>)
 8002470:	f003 f970 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247a:	2300      	movs	r3, #0
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002486:	4619      	mov	r1, r3
 8002488:	4828      	ldr	r0, [pc, #160]	; (800252c <MX_GPIO_Init+0x300>)
 800248a:	f003 f963 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800248e:	2308      	movs	r3, #8
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002492:	2301      	movs	r3, #1
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800249e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	4819      	ldr	r0, [pc, #100]	; (800250c <MX_GPIO_Init+0x2e0>)
 80024a6:	f003 f955 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024aa:	2310      	movs	r3, #16
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ae:	2300      	movs	r3, #0
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4811      	ldr	r0, [pc, #68]	; (8002504 <MX_GPIO_Init+0x2d8>)
 80024be:	f003 f949 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80024c2:	f248 0304 	movw	r3, #32772	; 0x8004
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d4:	4619      	mov	r1, r3
 80024d6:	480e      	ldr	r0, [pc, #56]	; (8002510 <MX_GPIO_Init+0x2e4>)
 80024d8:	f003 f93c 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80024dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f2:	4619      	mov	r1, r3
 80024f4:	4806      	ldr	r0, [pc, #24]	; (8002510 <MX_GPIO_Init+0x2e4>)
 80024f6:	f003 f92d 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80024fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fe:	e017      	b.n	8002530 <MX_GPIO_Init+0x304>
 8002500:	40023800 	.word	0x40023800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40022000 	.word	0x40022000
 800250c:	40022800 	.word	0x40022800
 8002510:	40021c00 	.word	0x40021c00
 8002514:	40021800 	.word	0x40021800
 8002518:	40021000 	.word	0x40021000
 800251c:	40020400 	.word	0x40020400
 8002520:	40022400 	.word	0x40022400
 8002524:	10120000 	.word	0x10120000
 8002528:	40020000 	.word	0x40020000
 800252c:	40020800 	.word	0x40020800
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002532:	4b44      	ldr	r3, [pc, #272]	; (8002644 <MX_GPIO_Init+0x418>)
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800253a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253e:	4619      	mov	r1, r3
 8002540:	4841      	ldr	r0, [pc, #260]	; (8002648 <MX_GPIO_Init+0x41c>)
 8002542:	f003 f907 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002546:	2310      	movs	r3, #16
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002556:	230a      	movs	r3, #10
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800255a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255e:	4619      	mov	r1, r3
 8002560:	483a      	ldr	r0, [pc, #232]	; (800264c <MX_GPIO_Init+0x420>)
 8002562:	f003 f8f7 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002566:	23c8      	movs	r3, #200	; 0xc8
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257a:	4619      	mov	r1, r3
 800257c:	4834      	ldr	r0, [pc, #208]	; (8002650 <MX_GPIO_Init+0x424>)
 800257e:	f003 f8e9 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002582:	2305      	movs	r3, #5
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002592:	230a      	movs	r3, #10
 8002594:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259a:	4619      	mov	r1, r3
 800259c:	482d      	ldr	r0, [pc, #180]	; (8002654 <MX_GPIO_Init+0x428>)
 800259e:	f003 f8d9 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025a2:	2332      	movs	r3, #50	; 0x32
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b2:	230b      	movs	r3, #11
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ba:	4619      	mov	r1, r3
 80025bc:	4825      	ldr	r0, [pc, #148]	; (8002654 <MX_GPIO_Init+0x428>)
 80025be:	f003 f8c9 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80025c2:	2304      	movs	r3, #4
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c6:	2300      	movs	r3, #0
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d2:	4619      	mov	r1, r3
 80025d4:	481e      	ldr	r0, [pc, #120]	; (8002650 <MX_GPIO_Init+0x424>)
 80025d6:	f003 f8bd 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025da:	2386      	movs	r3, #134	; 0x86
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ea:	230b      	movs	r3, #11
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f2:	4619      	mov	r1, r3
 80025f4:	4818      	ldr	r0, [pc, #96]	; (8002658 <MX_GPIO_Init+0x42c>)
 80025f6:	f003 f8ad 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80025fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002600:	2312      	movs	r3, #18
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002604:	2301      	movs	r3, #1
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800260c:	2304      	movs	r3, #4
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	480d      	ldr	r0, [pc, #52]	; (800264c <MX_GPIO_Init+0x420>)
 8002618:	f003 f89c 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800261c:	2328      	movs	r3, #40	; 0x28
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800262c:	230a      	movs	r3, #10
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002634:	4619      	mov	r1, r3
 8002636:	4808      	ldr	r0, [pc, #32]	; (8002658 <MX_GPIO_Init+0x42c>)
 8002638:	f003 f88c 	bl	8005754 <HAL_GPIO_Init>

}
 800263c:	bf00      	nop
 800263e:	3740      	adds	r7, #64	; 0x40
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	10120000 	.word	0x10120000
 8002648:	40022000 	.word	0x40022000
 800264c:	40021c00 	.word	0x40021c00
 8002650:	40021800 	.word	0x40021800
 8002654:	40020800 	.word	0x40020800
 8002658:	40020000 	.word	0x40020000

0800265c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002664:	f00d fd7a 	bl	801015c <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002668:	2001      	movs	r0, #1
 800266a:	f00a fbc9 	bl	800ce00 <osDelay>
 800266e:	e7fb      	b.n	8002668 <StartDefaultTask+0xc>

08002670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002682:	f001 f909 	bl	8003898 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40001000 	.word	0x40001000

08002694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_MspInit+0x4c>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <HAL_MspInit+0x4c>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_MspInit+0x4c>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_MspInit+0x4c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_MspInit+0x4c>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_MspInit+0x4c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	210f      	movs	r1, #15
 80026de:	f06f 0001 	mvn.w	r0, #1
 80026e2:	f002 fa09 	bl	8004af8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800

080026f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <HAL_ADC_MspInit+0xa4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d13c      	bne.n	8002790 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_ADC_MspInit+0xa8>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a20      	ldr	r2, [pc, #128]	; (800279c <HAL_ADC_MspInit+0xa8>)
 800271c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_ADC_MspInit+0xa8>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_ADC_MspInit+0xa8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a1a      	ldr	r2, [pc, #104]	; (800279c <HAL_ADC_MspInit+0xa8>)
 8002734:	f043 0320 	orr.w	r3, r3, #32
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_ADC_MspInit+0xa8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_ADC_MspInit+0xa8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_ADC_MspInit+0xa8>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_ADC_MspInit+0xa8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800275e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002762:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002764:	2303      	movs	r3, #3
 8002766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4619      	mov	r1, r3
 8002772:	480b      	ldr	r0, [pc, #44]	; (80027a0 <HAL_ADC_MspInit+0xac>)
 8002774:	f002 ffee 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002778:	2301      	movs	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277c:	2303      	movs	r3, #3
 800277e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4619      	mov	r1, r3
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <HAL_ADC_MspInit+0xb0>)
 800278c:	f002 ffe2 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002790:	bf00      	nop
 8002792:	3728      	adds	r7, #40	; 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40012200 	.word	0x40012200
 800279c:	40023800 	.word	0x40023800
 80027a0:	40021400 	.word	0x40021400
 80027a4:	40020000 	.word	0x40020000

080027a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_CAN_MspInit+0x8c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d130      	bne.n	800282c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_CAN_MspInit+0x90>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_CAN_MspInit+0x90>)
 80027d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_CAN_MspInit+0x90>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_CAN_MspInit+0x90>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_CAN_MspInit+0x90>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_CAN_MspInit+0x90>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800280c:	2309      	movs	r3, #9
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4619      	mov	r1, r3
 8002816:	4809      	ldr	r0, [pc, #36]	; (800283c <HAL_CAN_MspInit+0x94>)
 8002818:	f002 ff9c 	bl	8005754 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2105      	movs	r1, #5
 8002820:	2014      	movs	r0, #20
 8002822:	f002 f969 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002826:	2014      	movs	r0, #20
 8002828:	f002 f982 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800282c:	bf00      	nop
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40006400 	.word	0x40006400
 8002838:	40023800 	.word	0x40023800
 800283c:	40020400 	.word	0x40020400

08002840 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_CRC_MspInit+0x38>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10b      	bne.n	800286a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_CRC_MspInit+0x3c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_CRC_MspInit+0x3c>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_CRC_MspInit+0x3c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023000 	.word	0x40023000
 800287c:	40023800 	.word	0x40023800

08002880 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08e      	sub	sp, #56	; 0x38
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a50      	ldr	r2, [pc, #320]	; (80029e0 <HAL_DCMI_MspInit+0x160>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	f040 809a 	bne.w	80029d8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028a4:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	4a4e      	ldr	r2, [pc, #312]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6353      	str	r3, [r2, #52]	; 0x34
 80028b0:	4b4c      	ldr	r3, [pc, #304]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	623b      	str	r3, [r7, #32]
 80028ba:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028bc:	4b49      	ldr	r3, [pc, #292]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028c2:	f043 0310 	orr.w	r3, r3, #16
 80028c6:	6313      	str	r3, [r2, #48]	; 0x30
 80028c8:	4b46      	ldr	r3, [pc, #280]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d4:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028da:	f043 0308 	orr.w	r3, r3, #8
 80028de:	6313      	str	r3, [r2, #48]	; 0x30
 80028e0:	4b40      	ldr	r3, [pc, #256]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ec:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a3c      	ldr	r2, [pc, #240]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002904:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a36      	ldr	r2, [pc, #216]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 800290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <HAL_DCMI_MspInit+0x164>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002934:	2360      	movs	r3, #96	; 0x60
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002944:	230d      	movs	r3, #13
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	4826      	ldr	r0, [pc, #152]	; (80029e8 <HAL_DCMI_MspInit+0x168>)
 8002950:	f002 ff00 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002954:	2308      	movs	r3, #8
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002964:	230d      	movs	r3, #13
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296c:	4619      	mov	r1, r3
 800296e:	481f      	ldr	r0, [pc, #124]	; (80029ec <HAL_DCMI_MspInit+0x16c>)
 8002970:	f002 fef0 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002986:	230d      	movs	r3, #13
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800298a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298e:	4619      	mov	r1, r3
 8002990:	4817      	ldr	r0, [pc, #92]	; (80029f0 <HAL_DCMI_MspInit+0x170>)
 8002992:	f002 fedf 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002996:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029a8:	230d      	movs	r3, #13
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	4810      	ldr	r0, [pc, #64]	; (80029f4 <HAL_DCMI_MspInit+0x174>)
 80029b4:	f002 fece 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029b8:	2350      	movs	r3, #80	; 0x50
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029c8:	230d      	movs	r3, #13
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d0:	4619      	mov	r1, r3
 80029d2:	4809      	ldr	r0, [pc, #36]	; (80029f8 <HAL_DCMI_MspInit+0x178>)
 80029d4:	f002 febe 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80029d8:	bf00      	nop
 80029da:	3738      	adds	r7, #56	; 0x38
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	50050000 	.word	0x50050000
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021800 	.word	0x40021800
 80029f4:	40021c00 	.word	0x40021c00
 80029f8:	40020000 	.word	0x40020000

080029fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <HAL_DMA2D_MspInit+0x44>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d113      	bne.n	8002a36 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_DMA2D_MspInit+0x48>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_DMA2D_MspInit+0x48>)
 8002a14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_DMA2D_MspInit+0x48>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2105      	movs	r1, #5
 8002a2a:	205a      	movs	r0, #90	; 0x5a
 8002a2c:	f002 f864 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002a30:	205a      	movs	r0, #90	; 0x5a
 8002a32:	f002 f87d 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	4002b000 	.word	0x4002b000
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_DMA2D_MspDeInit+0x2c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d108      	bne.n	8002a6c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_DMA2D_MspDeInit+0x30>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_DMA2D_MspDeInit+0x30>)
 8002a60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002a66:	205a      	movs	r0, #90	; 0x5a
 8002a68:	f002 f870 	bl	8004b4c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	4002b000 	.word	0x4002b000
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08e      	sub	sp, #56	; 0x38
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a55      	ldr	r2, [pc, #340]	; (8002bf0 <HAL_LTDC_MspInit+0x174>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	f040 80a3 	bne.w	8002be6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002aa0:	4b54      	ldr	r3, [pc, #336]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	4a53      	ldr	r2, [pc, #332]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8002aac:	4b51      	ldr	r3, [pc, #324]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab8:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	4a4d      	ldr	r2, [pc, #308]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ad0:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ae8:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	4a41      	ldr	r2, [pc, #260]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af2:	6313      	str	r3, [r2, #48]	; 0x30
 8002af4:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b00:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	4a3b      	ldr	r2, [pc, #236]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0c:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	4a35      	ldr	r2, [pc, #212]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6313      	str	r3, [r2, #48]	; 0x30
 8002b24:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_LTDC_MspInit+0x178>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b30:	2310      	movs	r3, #16
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b40:	230e      	movs	r3, #14
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	4619      	mov	r1, r3
 8002b4a:	482b      	ldr	r0, [pc, #172]	; (8002bf8 <HAL_LTDC_MspInit+0x17c>)
 8002b4c:	f002 fe02 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002b50:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b62:	230e      	movs	r3, #14
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4823      	ldr	r0, [pc, #140]	; (8002bfc <HAL_LTDC_MspInit+0x180>)
 8002b6e:	f002 fdf1 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002b72:	23f7      	movs	r3, #247	; 0xf7
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b82:	230e      	movs	r3, #14
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	481c      	ldr	r0, [pc, #112]	; (8002c00 <HAL_LTDC_MspInit+0x184>)
 8002b8e:	f002 fde1 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ba4:	2309      	movs	r3, #9
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bac:	4619      	mov	r1, r3
 8002bae:	4815      	ldr	r0, [pc, #84]	; (8002c04 <HAL_LTDC_MspInit+0x188>)
 8002bb0:	f002 fdd0 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002bb4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bc6:	230e      	movs	r3, #14
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bce:	4619      	mov	r1, r3
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <HAL_LTDC_MspInit+0x18c>)
 8002bd2:	f002 fdbf 	bl	8005754 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2105      	movs	r1, #5
 8002bda:	2058      	movs	r0, #88	; 0x58
 8002bdc:	f001 ff8c 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002be0:	2058      	movs	r0, #88	; 0x58
 8002be2:	f001 ffa5 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002be6:	bf00      	nop
 8002be8:	3738      	adds	r7, #56	; 0x38
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40016800 	.word	0x40016800
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40022400 	.word	0x40022400
 8002c00:	40022800 	.word	0x40022800
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08c      	sub	sp, #48	; 0x30
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a3b      	ldr	r2, [pc, #236]	; (8002d18 <HAL_QSPI_MspInit+0x10c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d170      	bne.n	8002d10 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	4a3a      	ldr	r2, [pc, #232]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	6393      	str	r3, [r2, #56]	; 0x38
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c46:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a34      	ldr	r2, [pc, #208]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c4c:	f043 0310 	orr.w	r3, r3, #16
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a2e      	ldr	r2, [pc, #184]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c76:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a28      	ldr	r2, [pc, #160]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_QSPI_MspInit+0x110>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c9e:	2309      	movs	r3, #9
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	481d      	ldr	r0, [pc, #116]	; (8002d20 <HAL_QSPI_MspInit+0x114>)
 8002caa:	f002 fd53 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002cae:	2340      	movs	r3, #64	; 0x40
 8002cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	f107 031c 	add.w	r3, r7, #28
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4816      	ldr	r0, [pc, #88]	; (8002d24 <HAL_QSPI_MspInit+0x118>)
 8002cca:	f002 fd43 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cde:	2309      	movs	r3, #9
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480e      	ldr	r0, [pc, #56]	; (8002d24 <HAL_QSPI_MspInit+0x118>)
 8002cea:	f002 fd33 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002cee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d00:	2309      	movs	r3, #9
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4807      	ldr	r0, [pc, #28]	; (8002d28 <HAL_QSPI_MspInit+0x11c>)
 8002d0c:	f002 fd22 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d10:	bf00      	nop
 8002d12:	3730      	adds	r7, #48	; 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	a0001000 	.word	0xa0001000
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020c00 	.word	0x40020c00

08002d2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_RTC_MspInit+0x2c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d105      	bne.n	8002d4a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_RTC_MspInit+0x30>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a06      	ldr	r2, [pc, #24]	; (8002d5c <HAL_RTC_MspInit+0x30>)
 8002d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40002800 	.word	0x40002800
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <HAL_SD_MspInit+0xb4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d144      	bne.n	8002e0c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8e:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a1e      	ldr	r2, [pc, #120]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_SD_MspInit+0xb8>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002dca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002dce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ddc:	230c      	movs	r3, #12
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	480d      	ldr	r0, [pc, #52]	; (8002e1c <HAL_SD_MspInit+0xbc>)
 8002de8:	f002 fcb4 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002dec:	2304      	movs	r3, #4
 8002dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4619      	mov	r1, r3
 8002e06:	4806      	ldr	r0, [pc, #24]	; (8002e20 <HAL_SD_MspInit+0xc0>)
 8002e08:	f002 fca4 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e0c:	bf00      	nop
 8002e0e:	3728      	adds	r7, #40	; 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00

08002e24 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002e44:	d127      	bne.n	8002e96 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a0f      	ldr	r2, [pc, #60]	; (8002ea0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e64:	f043 0308 	orr.w	r3, r3, #8
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e86:	2308      	movs	r3, #8
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <HAL_SPDIFRX_MspInit+0x80>)
 8002e92:	f002 fc5f 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002e96:	bf00      	nop
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40020c00 	.word	0x40020c00

08002ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a25      	ldr	r2, [pc, #148]	; (8002f5c <HAL_SPI_MspInit+0xb4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d144      	bne.n	8002f54 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002eca:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ee2:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6313      	str	r3, [r2, #48]	; 0x30
 8002eee:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_SPI_MspInit+0xb8>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002f12:	2302      	movs	r3, #2
 8002f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f22:	2305      	movs	r3, #5
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	480d      	ldr	r0, [pc, #52]	; (8002f64 <HAL_SPI_MspInit+0xbc>)
 8002f2e:	f002 fc11 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002f32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f44:	2305      	movs	r3, #5
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4806      	ldr	r0, [pc, #24]	; (8002f68 <HAL_SPI_MspInit+0xc0>)
 8002f50:	f002 fc00 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40003800 	.word	0x40003800
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40020400 	.word	0x40020400

08002f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <HAL_TIM_Base_MspInit+0xc8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10c      	bne.n	8002f98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f7e:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f96:	e046      	b.n	8003026 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
}
 8002fba:	e034      	b.n	8003026 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_TIM_Base_MspInit+0xd0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]
}
 8002fde:	e022      	b.n	8003026 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_TIM_Base_MspInit+0xd4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10c      	bne.n	8003004 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff0:	f043 0308 	orr.w	r3, r3, #8
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
}
 8003002:	e010      	b.n	8003026 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <HAL_TIM_Base_MspInit+0xd8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10b      	bne.n	8003026 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6453      	str	r3, [r2, #68]	; 0x44
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_TIM_Base_MspInit+0xcc>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
}
 8003026:	bf00      	nop
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40010000 	.word	0x40010000
 8003038:	40023800 	.word	0x40023800
 800303c:	40000400 	.word	0x40000400
 8003040:	40000c00 	.word	0x40000c00
 8003044:	40010400 	.word	0x40010400

08003048 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <HAL_TIM_PWM_MspInit+0x38>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10b      	bne.n	8003072 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_TIM_PWM_MspInit+0x3c>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_TIM_PWM_MspInit+0x3c>)
 8003060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_TIM_PWM_MspInit+0x3c>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40001800 	.word	0x40001800
 8003084:	40023800 	.word	0x40023800

08003088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	; 0x30
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 031c 	add.w	r3, r7, #28
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a56      	ldr	r2, [pc, #344]	; (8003200 <HAL_TIM_MspPostInit+0x178>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d11d      	bne.n	80030e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030aa:	4b56      	ldr	r3, [pc, #344]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a55      	ldr	r2, [pc, #340]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80030c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030d4:	2301      	movs	r3, #1
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	4619      	mov	r1, r3
 80030de:	484a      	ldr	r0, [pc, #296]	; (8003208 <HAL_TIM_MspPostInit+0x180>)
 80030e0:	f002 fb38 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80030e4:	e087      	b.n	80031f6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d11d      	bne.n	800312c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f0:	4b44      	ldr	r3, [pc, #272]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4a43      	ldr	r2, [pc, #268]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6313      	str	r3, [r2, #48]	; 0x30
 80030fc:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003116:	2300      	movs	r3, #0
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800311a:	2301      	movs	r3, #1
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800311e:	f107 031c 	add.w	r3, r7, #28
 8003122:	4619      	mov	r1, r3
 8003124:	4838      	ldr	r0, [pc, #224]	; (8003208 <HAL_TIM_MspPostInit+0x180>)
 8003126:	f002 fb15 	bl	8005754 <HAL_GPIO_Init>
}
 800312a:	e064      	b.n	80031f6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a36      	ldr	r2, [pc, #216]	; (800320c <HAL_TIM_MspPostInit+0x184>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d11c      	bne.n	8003170 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a32      	ldr	r2, [pc, #200]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800314e:	2310      	movs	r3, #16
 8003150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800315e:	2302      	movs	r3, #2
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 031c 	add.w	r3, r7, #28
 8003166:	4619      	mov	r1, r3
 8003168:	4829      	ldr	r0, [pc, #164]	; (8003210 <HAL_TIM_MspPostInit+0x188>)
 800316a:	f002 faf3 	bl	8005754 <HAL_GPIO_Init>
}
 800316e:	e042      	b.n	80031f6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a27      	ldr	r2, [pc, #156]	; (8003214 <HAL_TIM_MspPostInit+0x18c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d11c      	bne.n	80031b4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a21      	ldr	r2, [pc, #132]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003192:	2301      	movs	r3, #1
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031a2:	2302      	movs	r3, #2
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	4619      	mov	r1, r3
 80031ac:	481a      	ldr	r0, [pc, #104]	; (8003218 <HAL_TIM_MspPostInit+0x190>)
 80031ae:	f002 fad1 	bl	8005754 <HAL_GPIO_Init>
}
 80031b2:	e020      	b.n	80031f6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a18      	ldr	r2, [pc, #96]	; (800321c <HAL_TIM_MspPostInit+0x194>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d11b      	bne.n	80031f6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80031c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <HAL_TIM_MspPostInit+0x17c>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80031d6:	2340      	movs	r3, #64	; 0x40
 80031d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80031e6:	2309      	movs	r3, #9
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	4619      	mov	r1, r3
 80031f0:	480b      	ldr	r0, [pc, #44]	; (8003220 <HAL_TIM_MspPostInit+0x198>)
 80031f2:	f002 faaf 	bl	8005754 <HAL_GPIO_Init>
}
 80031f6:	bf00      	nop
 80031f8:	3730      	adds	r7, #48	; 0x30
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40010000 	.word	0x40010000
 8003204:	40023800 	.word	0x40023800
 8003208:	40020000 	.word	0x40020000
 800320c:	40000400 	.word	0x40000400
 8003210:	40020400 	.word	0x40020400
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40022000 	.word	0x40022000
 800321c:	40001800 	.word	0x40001800
 8003220:	40021c00 	.word	0x40021c00

08003224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a3c      	ldr	r2, [pc, #240]	; (8003334 <HAL_UART_MspInit+0x110>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d145      	bne.n	80032d2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003246:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <HAL_UART_MspInit+0x114>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	4a3b      	ldr	r2, [pc, #236]	; (8003338 <HAL_UART_MspInit+0x114>)
 800324c:	f043 0310 	orr.w	r3, r3, #16
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_UART_MspInit+0x114>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	4b36      	ldr	r3, [pc, #216]	; (8003338 <HAL_UART_MspInit+0x114>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a35      	ldr	r2, [pc, #212]	; (8003338 <HAL_UART_MspInit+0x114>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <HAL_UART_MspInit+0x114>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_UART_MspInit+0x114>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <HAL_UART_MspInit+0x114>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <HAL_UART_MspInit+0x114>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329a:	2300      	movs	r3, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800329e:	2307      	movs	r3, #7
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	4824      	ldr	r0, [pc, #144]	; (800333c <HAL_UART_MspInit+0x118>)
 80032aa:	f002 fa53 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80032ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032bc:	2300      	movs	r3, #0
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c0:	2307      	movs	r3, #7
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80032c4:	f107 031c 	add.w	r3, r7, #28
 80032c8:	4619      	mov	r1, r3
 80032ca:	481d      	ldr	r0, [pc, #116]	; (8003340 <HAL_UART_MspInit+0x11c>)
 80032cc:	f002 fa42 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032d0:	e02c      	b.n	800332c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_UART_MspInit+0x120>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d127      	bne.n	800332c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_UART_MspInit+0x114>)
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	4a15      	ldr	r2, [pc, #84]	; (8003338 <HAL_UART_MspInit+0x114>)
 80032e2:	f043 0320 	orr.w	r3, r3, #32
 80032e6:	6453      	str	r3, [r2, #68]	; 0x44
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <HAL_UART_MspInit+0x114>)
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <HAL_UART_MspInit+0x114>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4a0f      	ldr	r2, [pc, #60]	; (8003338 <HAL_UART_MspInit+0x114>)
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_UART_MspInit+0x114>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800330c:	23c0      	movs	r3, #192	; 0xc0
 800330e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003318:	2303      	movs	r3, #3
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800331c:	2308      	movs	r3, #8
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	4619      	mov	r1, r3
 8003326:	4808      	ldr	r0, [pc, #32]	; (8003348 <HAL_UART_MspInit+0x124>)
 8003328:	f002 fa14 	bl	8005754 <HAL_GPIO_Init>
}
 800332c:	bf00      	nop
 800332e:	3730      	adds	r7, #48	; 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40011000 	.word	0x40011000
 8003338:	40023800 	.word	0x40023800
 800333c:	40020400 	.word	0x40020400
 8003340:	40020000 	.word	0x40020000
 8003344:	40011400 	.word	0x40011400
 8003348:	40020800 	.word	0x40020800

0800334c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003360:	4b3a      	ldr	r3, [pc, #232]	; (800344c <HAL_FMC_MspInit+0x100>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d16d      	bne.n	8003444 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003368:	4b38      	ldr	r3, [pc, #224]	; (800344c <HAL_FMC_MspInit+0x100>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800336e:	4b38      	ldr	r3, [pc, #224]	; (8003450 <HAL_FMC_MspInit+0x104>)
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	4a37      	ldr	r2, [pc, #220]	; (8003450 <HAL_FMC_MspInit+0x104>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6393      	str	r3, [r2, #56]	; 0x38
 800337a:	4b35      	ldr	r3, [pc, #212]	; (8003450 <HAL_FMC_MspInit+0x104>)
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003386:	f64f 7383 	movw	r3, #65411	; 0xff83
 800338a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338c:	2302      	movs	r3, #2
 800338e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003398:	230c      	movs	r3, #12
 800339a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	4619      	mov	r1, r3
 80033a0:	482c      	ldr	r0, [pc, #176]	; (8003454 <HAL_FMC_MspInit+0x108>)
 80033a2:	f002 f9d7 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80033a6:	f248 1333 	movw	r3, #33075	; 0x8133
 80033aa:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033b8:	230c      	movs	r3, #12
 80033ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	4825      	ldr	r0, [pc, #148]	; (8003458 <HAL_FMC_MspInit+0x10c>)
 80033c2:	f002 f9c7 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80033c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80033ca:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033cc:	2302      	movs	r3, #2
 80033ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d4:	2303      	movs	r3, #3
 80033d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033d8:	230c      	movs	r3, #12
 80033da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	481e      	ldr	r0, [pc, #120]	; (800345c <HAL_FMC_MspInit+0x110>)
 80033e2:	f002 f9b7 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80033e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80033ea:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f4:	2303      	movs	r3, #3
 80033f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033f8:	230c      	movs	r3, #12
 80033fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4817      	ldr	r0, [pc, #92]	; (8003460 <HAL_FMC_MspInit+0x114>)
 8003402:	f002 f9a7 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003406:	2328      	movs	r3, #40	; 0x28
 8003408:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003416:	230c      	movs	r3, #12
 8003418:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4811      	ldr	r0, [pc, #68]	; (8003464 <HAL_FMC_MspInit+0x118>)
 8003420:	f002 f998 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003424:	2308      	movs	r3, #8
 8003426:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003430:	2303      	movs	r3, #3
 8003432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003434:	230c      	movs	r3, #12
 8003436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	4619      	mov	r1, r3
 800343c:	480a      	ldr	r0, [pc, #40]	; (8003468 <HAL_FMC_MspInit+0x11c>)
 800343e:	f002 f989 	bl	8005754 <HAL_GPIO_Init>
 8003442:	e000      	b.n	8003446 <HAL_FMC_MspInit+0xfa>
    return;
 8003444:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	200003e4 	.word	0x200003e4
 8003450:	40023800 	.word	0x40023800
 8003454:	40021000 	.word	0x40021000
 8003458:	40021800 	.word	0x40021800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021400 	.word	0x40021400
 8003464:	40021c00 	.word	0x40021c00
 8003468:	40020800 	.word	0x40020800

0800346c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003474:	f7ff ff6a 	bl	800334c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_SAI_MspInit+0xbc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d124      	bne.n	80034dc <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003492:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_SAI_MspInit+0xc0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_SAI_MspInit+0xc4>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_SAI_MspInit+0xc4>)
 80034a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_SAI_MspInit+0xc4>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_SAI_MspInit+0xc0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <HAL_SAI_MspInit+0xc0>)
 80034ba:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80034bc:	23f0      	movs	r3, #240	; 0xf0
 80034be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034cc:	230a      	movs	r3, #10
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	4619      	mov	r1, r3
 80034d6:	481c      	ldr	r0, [pc, #112]	; (8003548 <HAL_SAI_MspInit+0xc8>)
 80034d8:	f002 f93c 	bl	8005754 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1a      	ldr	r2, [pc, #104]	; (800354c <HAL_SAI_MspInit+0xcc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d125      	bne.n	8003532 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <HAL_SAI_MspInit+0xc0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_SAI_MspInit+0xc4>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_SAI_MspInit+0xc4>)
 80034f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034f8:	6453      	str	r3, [r2, #68]	; 0x44
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_SAI_MspInit+0xc4>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_SAI_MspInit+0xc0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <HAL_SAI_MspInit+0xc0>)
 800350e:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003522:	230a      	movs	r3, #10
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	4619      	mov	r1, r3
 800352c:	4808      	ldr	r0, [pc, #32]	; (8003550 <HAL_SAI_MspInit+0xd0>)
 800352e:	f002 f911 	bl	8005754 <HAL_GPIO_Init>

    }
}
 8003532:	bf00      	nop
 8003534:	3728      	adds	r7, #40	; 0x28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40015c04 	.word	0x40015c04
 8003540:	200003e8 	.word	0x200003e8
 8003544:	40023800 	.word	0x40023800
 8003548:	40022000 	.word	0x40022000
 800354c:	40015c24 	.word	0x40015c24
 8003550:	40021800 	.word	0x40021800

08003554 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	; 0x30
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003564:	2200      	movs	r2, #0
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	2036      	movs	r0, #54	; 0x36
 800356a:	f001 fac5 	bl	8004af8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800356e:	2036      	movs	r0, #54	; 0x36
 8003570:	f001 fade 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <HAL_InitTick+0xa0>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <HAL_InitTick+0xa0>)
 800357a:	f043 0310 	orr.w	r3, r3, #16
 800357e:	6413      	str	r3, [r2, #64]	; 0x40
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_InitTick+0xa0>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800358c:	f107 0210 	add.w	r2, r7, #16
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f004 f91a 	bl	80077d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800359c:	f004 f8f0 	bl	8007780 <HAL_RCC_GetPCLK1Freq>
 80035a0:	4603      	mov	r3, r0
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <HAL_InitTick+0xa4>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0c9b      	lsrs	r3, r3, #18
 80035b0:	3b01      	subs	r3, #1
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_InitTick+0xa8>)
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <HAL_InitTick+0xac>)
 80035b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_InitTick+0xa8>)
 80035bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <HAL_InitTick+0xa8>)
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_InitTick+0xa8>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_InitTick+0xa8>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80035d4:	4809      	ldr	r0, [pc, #36]	; (80035fc <HAL_InitTick+0xa8>)
 80035d6:	f006 fda5 	bl	800a124 <HAL_TIM_Base_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80035e0:	4806      	ldr	r0, [pc, #24]	; (80035fc <HAL_InitTick+0xa8>)
 80035e2:	f006 fdcb 	bl	800a17c <HAL_TIM_Base_Start_IT>
 80035e6:	4603      	mov	r3, r0
 80035e8:	e000      	b.n	80035ec <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3730      	adds	r7, #48	; 0x30
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800
 80035f8:	431bde83 	.word	0x431bde83
 80035fc:	2000c900 	.word	0x2000c900
 8003600:	40001000 	.word	0x40001000

08003604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003616:	e7fe      	b.n	8003616 <HardFault_Handler+0x4>

08003618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800361c:	e7fe      	b.n	800361c <MemManage_Handler+0x4>

0800361e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003622:	e7fe      	b.n	8003622 <BusFault_Handler+0x4>

08003624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <UsageFault_Handler+0x4>

0800362a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <CAN1_RX0_IRQHandler+0x10>)
 800363e:	f000 ff4f 	bl	80044e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	2000c7fc 	.word	0x2000c7fc

0800364c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <TIM6_DAC_IRQHandler+0x10>)
 8003652:	f006 fde8 	bl	800a226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	2000c900 	.word	0x2000c900

08003660 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <LTDC_IRQHandler+0x10>)
 8003666:	f003 f84f 	bl	8006708 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	2000c4d4 	.word	0x2000c4d4

08003674 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003678:	4802      	ldr	r0, [pc, #8]	; (8003684 <DMA2D_IRQHandler+0x10>)
 800367a:	f001 fe2c 	bl	80052d6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	2000c774 	.word	0x2000c774

08003688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
	return 1;
 800368c:	2301      	movs	r3, #1
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <_kill>:

int _kill(int pid, int sig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036a2:	f024 ffb1 	bl	8028608 <__errno>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2216      	movs	r2, #22
 80036aa:	601a      	str	r2, [r3, #0]
	return -1;
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_exit>:

void _exit (int status)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036c0:	f04f 31ff 	mov.w	r1, #4294967295
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ffe7 	bl	8003698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036ca:	e7fe      	b.n	80036ca <_exit+0x12>

080036cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e00a      	b.n	80036f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036de:	f3af 8000 	nop.w
 80036e2:	4601      	mov	r1, r0
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	60ba      	str	r2, [r7, #8]
 80036ea:	b2ca      	uxtb	r2, r1
 80036ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3301      	adds	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	dbf0      	blt.n	80036de <_read+0x12>
	}

return len;
 80036fc:	687b      	ldr	r3, [r7, #4]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e009      	b.n	800372c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	60ba      	str	r2, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3301      	adds	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	dbf1      	blt.n	8003718 <_write+0x12>
	}
	return len;
 8003734:	687b      	ldr	r3, [r7, #4]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <_close>:

int _close(int file)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
	return -1;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003766:	605a      	str	r2, [r3, #4]
	return 0;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <_isatty>:

int _isatty(int file)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
	return 1;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
	return 0;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <_sbrk+0x50>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <_sbrk+0x16>
		heap_end = &end;
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <_sbrk+0x50>)
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <_sbrk+0x54>)
 80037bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <_sbrk+0x50>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <_sbrk+0x50>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	466a      	mov	r2, sp
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d907      	bls.n	80037e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037d2:	f024 ff19 	bl	8028608 <__errno>
 80037d6:	4603      	mov	r3, r0
 80037d8:	220c      	movs	r2, #12
 80037da:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
 80037e0:	e006      	b.n	80037f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <_sbrk+0x50>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	4a03      	ldr	r2, [pc, #12]	; (80037f8 <_sbrk+0x50>)
 80037ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037ee:	68fb      	ldr	r3, [r7, #12]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200003ec 	.word	0x200003ec
 80037fc:	2000cdc0 	.word	0x2000cdc0

08003800 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003804:	4b08      	ldr	r3, [pc, #32]	; (8003828 <SystemInit+0x28>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	4a07      	ldr	r2, [pc, #28]	; (8003828 <SystemInit+0x28>)
 800380c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SystemInit+0x28>)
 8003816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800381a:	609a      	str	r2, [r3, #8]
#endif
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800382c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003864 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003832:	e003      	b.n	800383c <LoopCopyDataInit>

08003834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800383a:	3104      	adds	r1, #4

0800383c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800383c:	480b      	ldr	r0, [pc, #44]	; (800386c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003844:	d3f6      	bcc.n	8003834 <CopyDataInit>
  ldr  r2, =_sbss
 8003846:	4a0b      	ldr	r2, [pc, #44]	; (8003874 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003848:	e002      	b.n	8003850 <LoopFillZerobss>

0800384a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800384a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800384c:	f842 3b04 	str.w	r3, [r2], #4

08003850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003854:	d3f9      	bcc.n	800384a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003856:	f7ff ffd3 	bl	8003800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800385a:	f024 feed 	bl	8028638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800385e:	f7fd fb07 	bl	8000e70 <main>
  bx  lr    
 8003862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003864:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003868:	0806588c 	.word	0x0806588c
  ldr  r0, =_sdata
 800386c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003870:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 8003874:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8003878:	2000cdc0 	.word	0x2000cdc0

0800387c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800387c:	e7fe      	b.n	800387c <ADC_IRQHandler>

0800387e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003882:	2003      	movs	r0, #3
 8003884:	f001 f92d 	bl	8004ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003888:	2000      	movs	r0, #0
 800388a:	f7ff fe63 	bl	8003554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800388e:	f7fe ff09 	bl	80026a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_IncTick+0x20>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_IncTick+0x24>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	4a04      	ldr	r2, [pc, #16]	; (80038bc <HAL_IncTick+0x24>)
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000020 	.word	0x20000020
 80038bc:	2000c940 	.word	0x2000c940

080038c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return uwTick;
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <HAL_GetTick+0x14>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	2000c940 	.word	0x2000c940

080038d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff ffee 	bl	80038c0 <HAL_GetTick>
 80038e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d005      	beq.n	80038fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_Delay+0x44>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038fe:	bf00      	nop
 8003900:	f7ff ffde 	bl	80038c0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d8f7      	bhi.n	8003900 <HAL_Delay+0x28>
  {
  }
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000020 	.word	0x20000020

08003920 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e031      	b.n	800399a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fe fed8 	bl	80026f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_ADC_Init+0x84>)
 8003964:	4013      	ands	r3, r2
 8003966:	f043 0202 	orr.w	r2, r3, #2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f964 	bl	8003c3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
 800398a:	e001      	b.n	8003990 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	ffffeefd 	.word	0xffffeefd

080039a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1c>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e12a      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x272>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	d93a      	bls.n	8003a4a <HAL_ADC_ConfigChannel+0xa2>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039dc:	d035      	beq.n	8003a4a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68d9      	ldr	r1, [r3, #12]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	3b1e      	subs	r3, #30
 80039f4:	2207      	movs	r2, #7
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	400a      	ands	r2, r1
 8003a02:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a87      	ldr	r2, [pc, #540]	; (8003c28 <HAL_ADC_ConfigChannel+0x280>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10a      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68d9      	ldr	r1, [r3, #12]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	061a      	lsls	r2, r3, #24
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a22:	e035      	b.n	8003a90 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68d9      	ldr	r1, [r3, #12]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	4618      	mov	r0, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4403      	add	r3, r0
 8003a3c:	3b1e      	subs	r3, #30
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a48:	e022      	b.n	8003a90 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6919      	ldr	r1, [r3, #16]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	2207      	movs	r2, #7
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43da      	mvns	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6919      	ldr	r1, [r3, #16]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	4603      	mov	r3, r0
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4403      	add	r3, r0
 8003a86:	409a      	lsls	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	d824      	bhi.n	8003ae2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3b05      	subs	r3, #5
 8003aaa:	221f      	movs	r2, #31
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3b05      	subs	r3, #5
 8003ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34
 8003ae0:	e04c      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d824      	bhi.n	8003b34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	3b23      	subs	r3, #35	; 0x23
 8003afc:	221f      	movs	r2, #31
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	400a      	ands	r2, r1
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	3b23      	subs	r3, #35	; 0x23
 8003b26:	fa00 f203 	lsl.w	r2, r0, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
 8003b32:	e023      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	3b41      	subs	r3, #65	; 0x41
 8003b46:	221f      	movs	r2, #31
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	400a      	ands	r2, r1
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	4618      	mov	r0, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3b41      	subs	r3, #65	; 0x41
 8003b70:	fa00 f203 	lsl.w	r2, r0, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <HAL_ADC_ConfigChannel+0x284>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d10a      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x1f4>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b8e:	d105      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_ADC_ConfigChannel+0x288>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_ADC_ConfigChannel+0x288>)
 8003b96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_ADC_ConfigChannel+0x284>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d109      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x212>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b12      	cmp	r3, #18
 8003bac:	d105      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_ADC_ConfigChannel+0x288>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4a1f      	ldr	r2, [pc, #124]	; (8003c30 <HAL_ADC_ConfigChannel+0x288>)
 8003bb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bb8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_ADC_ConfigChannel+0x284>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d125      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x268>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <HAL_ADC_ConfigChannel+0x280>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <HAL_ADC_ConfigChannel+0x22e>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b11      	cmp	r3, #17
 8003bd4:	d11c      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_ADC_ConfigChannel+0x288>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_ADC_ConfigChannel+0x288>)
 8003bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003be0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a10      	ldr	r2, [pc, #64]	; (8003c28 <HAL_ADC_ConfigChannel+0x280>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d111      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_ADC_ConfigChannel+0x28c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <HAL_ADC_ConfigChannel+0x290>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	0c9a      	lsrs	r2, r3, #18
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c02:	e002      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f9      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	10000012 	.word	0x10000012
 8003c2c:	40012000 	.word	0x40012000
 8003c30:	40012300 	.word	0x40012300
 8003c34:	20000018 	.word	0x20000018
 8003c38:	431bde83 	.word	0x431bde83

08003c3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c44:	4b78      	ldr	r3, [pc, #480]	; (8003e28 <ADC_Init+0x1ec>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a77      	ldr	r2, [pc, #476]	; (8003e28 <ADC_Init+0x1ec>)
 8003c4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c50:	4b75      	ldr	r3, [pc, #468]	; (8003e28 <ADC_Init+0x1ec>)
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4973      	ldr	r1, [pc, #460]	; (8003e28 <ADC_Init+0x1ec>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	021a      	lsls	r2, r3, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <ADC_Init+0x1f0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e00f      	b.n	8003d36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0202 	bic.w	r2, r2, #2
 8003d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6899      	ldr	r1, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	005a      	lsls	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01b      	beq.n	8003d9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	035a      	lsls	r2, r3, #13
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	e007      	b.n	8003dac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003daa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	051a      	lsls	r2, r3, #20
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dee:	025a      	lsls	r2, r3, #9
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	029a      	lsls	r2, r3, #10
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40012300 	.word	0x40012300
 8003e2c:	0f000001 	.word	0x0f000001

08003e30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0ed      	b.n	800401e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe fcaa 	bl	80027a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0202 	bic.w	r2, r2, #2
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e64:	f7ff fd2c 	bl	80038c0 <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e6a:	e012      	b.n	8003e92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e6c:	f7ff fd28 	bl	80038c0 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b0a      	cmp	r3, #10
 8003e78:	d90b      	bls.n	8003e92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0c5      	b.n	800401e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e5      	bne.n	8003e6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb0:	f7ff fd06 	bl	80038c0 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003eb6:	e012      	b.n	8003ede <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eb8:	f7ff fd02 	bl	80038c0 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b0a      	cmp	r3, #10
 8003ec4:	d90b      	bls.n	8003ede <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2205      	movs	r2, #5
 8003ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e09f      	b.n	800401e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0e5      	beq.n	8003eb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	7e1b      	ldrb	r3, [r3, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7e5b      	ldrb	r3, [r3, #25]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d108      	bne.n	8003f30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e007      	b.n	8003f40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7e9b      	ldrb	r3, [r3, #26]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d108      	bne.n	8003f5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0220 	orr.w	r2, r2, #32
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e007      	b.n	8003f6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0220 	bic.w	r2, r2, #32
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7edb      	ldrb	r3, [r3, #27]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0210 	bic.w	r2, r2, #16
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e007      	b.n	8003f94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0210 	orr.w	r2, r2, #16
 8003f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7f1b      	ldrb	r3, [r3, #28]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d108      	bne.n	8003fae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0208 	orr.w	r2, r2, #8
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e007      	b.n	8003fbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0208 	bic.w	r2, r2, #8
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7f5b      	ldrb	r3, [r3, #29]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d108      	bne.n	8003fd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0204 	orr.w	r2, r2, #4
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e007      	b.n	8003fe8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0204 	bic.w	r2, r2, #4
 8003fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	ea42 0103 	orr.w	r1, r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	1e5a      	subs	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d003      	beq.n	800404e <HAL_CAN_ConfigFilter+0x26>
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b02      	cmp	r3, #2
 800404a:	f040 80be 	bne.w	80041ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800404e:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004050:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004068:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	431a      	orrs	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	43db      	mvns	r3, r3
 80040a0:	401a      	ands	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d123      	bne.n	80040f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	3248      	adds	r2, #72	; 0x48
 80040d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ee:	6979      	ldr	r1, [r7, #20]
 80040f0:	3348      	adds	r3, #72	; 0x48
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	440b      	add	r3, r1
 80040f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d122      	bne.n	8004146 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	431a      	orrs	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004120:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3248      	adds	r2, #72	; 0x48
 8004126:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800413a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	3348      	adds	r3, #72	; 0x48
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	43db      	mvns	r3, r3
 8004158:	401a      	ands	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004160:	e007      	b.n	8004172 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	431a      	orrs	r2, r3
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	401a      	ands	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800418c:	e007      	b.n	800419e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	431a      	orrs	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041bc:	f023 0201 	bic.w	r2, r3, #1
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e006      	b.n	80041d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
  }
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40006400 	.word	0x40006400

080041e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d12e      	bne.n	800425a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004214:	f7ff fb54 	bl	80038c0 <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800421a:	e012      	b.n	8004242 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800421c:	f7ff fb50 	bl	80038c0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b0a      	cmp	r3, #10
 8004228:	d90b      	bls.n	8004242 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2205      	movs	r2, #5
 800423a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e012      	b.n	8004268 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e5      	bne.n	800421c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e006      	b.n	8004268 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004284:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d003      	beq.n	8004294 <HAL_CAN_GetRxMessage+0x24>
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b02      	cmp	r3, #2
 8004290:	f040 80f3 	bne.w	800447a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10e      	bne.n	80042b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d116      	bne.n	80042d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0e7      	b.n	8004488 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0d8      	b.n	8004488 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	331b      	adds	r3, #27
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	4413      	add	r3, r2
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0204 	and.w	r2, r3, #4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10c      	bne.n	800430e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	331b      	adds	r3, #27
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	4413      	add	r3, r2
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	0d5b      	lsrs	r3, r3, #21
 8004304:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e00b      	b.n	8004326 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	331b      	adds	r3, #27
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4413      	add	r3, r2
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	08db      	lsrs	r3, r3, #3
 800431e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	331b      	adds	r3, #27
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	4413      	add	r3, r2
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0202 	and.w	r2, r3, #2
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	331b      	adds	r3, #27
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	4413      	add	r3, r2
 8004348:	3304      	adds	r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 020f 	and.w	r2, r3, #15
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	331b      	adds	r3, #27
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	4413      	add	r3, r2
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	b2da      	uxtb	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	331b      	adds	r3, #27
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4413      	add	r3, r2
 8004378:	3304      	adds	r3, #4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	4413      	add	r3, r2
 800438e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	0a1a      	lsrs	r2, r3, #8
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	3301      	adds	r3, #1
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4413      	add	r3, r2
 80043be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	0c1a      	lsrs	r2, r3, #16
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	3302      	adds	r3, #2
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	0e1a      	lsrs	r2, r3, #24
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	3303      	adds	r3, #3
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	3304      	adds	r3, #4
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	4413      	add	r3, r2
 800440a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0a1a      	lsrs	r2, r3, #8
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3305      	adds	r3, #5
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	4413      	add	r3, r2
 8004424:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0c1a      	lsrs	r2, r3, #16
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	3306      	adds	r3, #6
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	4413      	add	r3, r2
 800443e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0e1a      	lsrs	r2, r3, #24
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	3307      	adds	r3, #7
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0220 	orr.w	r2, r2, #32
 8004462:	60da      	str	r2, [r3, #12]
 8004464:	e007      	b.n	8004476 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0220 	orr.w	r2, r2, #32
 8004474:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e006      	b.n	8004488 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d002      	beq.n	80044b2 <HAL_CAN_ActivateNotification+0x1e>
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d109      	bne.n	80044c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6959      	ldr	r1, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e006      	b.n	80044d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
  }
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	; 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d07c      	beq.n	8004620 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d023      	beq.n	8004578 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f983 	bl	800484e <HAL_CAN_TxMailbox0CompleteCallback>
 8004548:	e016      	b.n	8004578 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	e00c      	b.n	8004578 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
 8004570:	e002      	b.n	8004578 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f989 	bl	800488a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d024      	beq.n	80045cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800458a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f963 	bl	8004862 <HAL_CAN_TxMailbox1CompleteCallback>
 800459c:	e016      	b.n	80045cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	e00c      	b.n	80045cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	e002      	b.n	80045cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f969 	bl	800489e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d024      	beq.n	8004620 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f943 	bl	8004876 <HAL_CAN_TxMailbox2CompleteCallback>
 80045f0:	e016      	b.n	8004620 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	e00c      	b.n	8004620 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
 8004618:	e002      	b.n	8004620 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f949 	bl	80048b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800463a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2210      	movs	r2, #16
 8004642:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2208      	movs	r2, #8
 800465e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f930 	bl	80048c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc fdd2 	bl	8001228 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800469e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2210      	movs	r2, #16
 80046a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00b      	beq.n	80046ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2208      	movs	r2, #8
 80046c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f912 	bl	80048ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8f9 	bl	80048da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d006      	beq.n	800470a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2210      	movs	r2, #16
 8004702:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f8fc 	bl	8004902 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2208      	movs	r2, #8
 8004724:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8f5 	bl	8004916 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d07b      	beq.n	800482e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d072      	beq.n	8004826 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479a:	2b00      	cmp	r3, #0
 800479c:	d043      	beq.n	8004826 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d03e      	beq.n	8004826 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047ae:	2b60      	cmp	r3, #96	; 0x60
 80047b0:	d02b      	beq.n	800480a <HAL_CAN_IRQHandler+0x32a>
 80047b2:	2b60      	cmp	r3, #96	; 0x60
 80047b4:	d82e      	bhi.n	8004814 <HAL_CAN_IRQHandler+0x334>
 80047b6:	2b50      	cmp	r3, #80	; 0x50
 80047b8:	d022      	beq.n	8004800 <HAL_CAN_IRQHandler+0x320>
 80047ba:	2b50      	cmp	r3, #80	; 0x50
 80047bc:	d82a      	bhi.n	8004814 <HAL_CAN_IRQHandler+0x334>
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d019      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x316>
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d826      	bhi.n	8004814 <HAL_CAN_IRQHandler+0x334>
 80047c6:	2b30      	cmp	r3, #48	; 0x30
 80047c8:	d010      	beq.n	80047ec <HAL_CAN_IRQHandler+0x30c>
 80047ca:	2b30      	cmp	r3, #48	; 0x30
 80047cc:	d822      	bhi.n	8004814 <HAL_CAN_IRQHandler+0x334>
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d002      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x2f8>
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d005      	beq.n	80047e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80047d6:	e01d      	b.n	8004814 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	f043 0308 	orr.w	r3, r3, #8
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047e0:	e019      	b.n	8004816 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	f043 0310 	orr.w	r3, r3, #16
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047ea:	e014      	b.n	8004816 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	f043 0320 	orr.w	r3, r3, #32
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047f4:	e00f      	b.n	8004816 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047fe:	e00a      	b.n	8004816 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004808:	e005      	b.n	8004816 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004812:	e000      	b.n	8004816 <HAL_CAN_IRQHandler+0x336>
            break;
 8004814:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699a      	ldr	r2, [r3, #24]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004824:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2204      	movs	r2, #4
 800482c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f872 	bl	800492a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004846:	bf00      	nop
 8004848:	3728      	adds	r7, #40	; 0x28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <__NVIC_SetPriorityGrouping+0x40>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800495c:	4013      	ands	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <__NVIC_SetPriorityGrouping+0x44>)
 800496a:	4313      	orrs	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800496e:	4a04      	ldr	r2, [pc, #16]	; (8004980 <__NVIC_SetPriorityGrouping+0x40>)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	60d3      	str	r3, [r2, #12]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	e000ed00 	.word	0xe000ed00
 8004984:	05fa0000 	.word	0x05fa0000

08004988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <__NVIC_GetPriorityGrouping+0x18>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	f003 0307 	and.w	r3, r3, #7
}
 8004996:	4618      	mov	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	db0b      	blt.n	80049ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	f003 021f 	and.w	r2, r3, #31
 80049bc:	4907      	ldr	r1, [pc, #28]	; (80049dc <__NVIC_EnableIRQ+0x38>)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2001      	movs	r0, #1
 80049c6:	fa00 f202 	lsl.w	r2, r0, r2
 80049ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000e100 	.word	0xe000e100

080049e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	db12      	blt.n	8004a18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	f003 021f 	and.w	r2, r3, #31
 80049f8:	490a      	ldr	r1, [pc, #40]	; (8004a24 <__NVIC_DisableIRQ+0x44>)
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	2001      	movs	r0, #1
 8004a02:	fa00 f202 	lsl.w	r2, r0, r2
 8004a06:	3320      	adds	r3, #32
 8004a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a0c:	f3bf 8f4f 	dsb	sy
}
 8004a10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a12:	f3bf 8f6f 	isb	sy
}
 8004a16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	e000e100 	.word	0xe000e100

08004a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	6039      	str	r1, [r7, #0]
 8004a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	db0a      	blt.n	8004a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	490c      	ldr	r1, [pc, #48]	; (8004a74 <__NVIC_SetPriority+0x4c>)
 8004a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a46:	0112      	lsls	r2, r2, #4
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a50:	e00a      	b.n	8004a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4908      	ldr	r1, [pc, #32]	; (8004a78 <__NVIC_SetPriority+0x50>)
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	3b04      	subs	r3, #4
 8004a60:	0112      	lsls	r2, r2, #4
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	440b      	add	r3, r1
 8004a66:	761a      	strb	r2, [r3, #24]
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000e100 	.word	0xe000e100
 8004a78:	e000ed00 	.word	0xe000ed00

08004a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	; 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f1c3 0307 	rsb	r3, r3, #7
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	bf28      	it	cs
 8004a9a:	2304      	movcs	r3, #4
 8004a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	2b06      	cmp	r3, #6
 8004aa4:	d902      	bls.n	8004aac <NVIC_EncodePriority+0x30>
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3b03      	subs	r3, #3
 8004aaa:	e000      	b.n	8004aae <NVIC_EncodePriority+0x32>
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43da      	mvns	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	401a      	ands	r2, r3
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	43d9      	mvns	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad4:	4313      	orrs	r3, r2
         );
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3724      	adds	r7, #36	; 0x24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ff28 	bl	8004940 <__NVIC_SetPriorityGrouping>
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b0a:	f7ff ff3d 	bl	8004988 <__NVIC_GetPriorityGrouping>
 8004b0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	6978      	ldr	r0, [r7, #20]
 8004b16:	f7ff ffb1 	bl	8004a7c <NVIC_EncodePriority>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ff80 	bl	8004a28 <__NVIC_SetPriority>
}
 8004b28:	bf00      	nop
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ff30 	bl	80049a4 <__NVIC_EnableIRQ>
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff ff40 	bl	80049e0 <__NVIC_DisableIRQ>
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e054      	b.n	8004c24 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7f5b      	ldrb	r3, [r3, #29]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd fe58 	bl	8002840 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	791b      	ldrb	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <HAL_CRC_Init+0xc4>)
 8004ba4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0218 	bic.w	r2, r2, #24
 8004bb4:	609a      	str	r2, [r3, #8]
 8004bb6:	e00c      	b.n	8004bd2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6899      	ldr	r1, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f834 	bl	8004c30 <HAL_CRCEx_Polynomial_Set>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e028      	b.n	8004c24 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	795b      	ldrb	r3, [r3, #5]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	611a      	str	r2, [r3, #16]
 8004be4:	e004      	b.n	8004bf0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6912      	ldr	r2, [r2, #16]
 8004bee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	04c11db7 	.word	0x04c11db7

08004c30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c40:	231f      	movs	r3, #31
 8004c42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c44:	bf00      	nop
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	613a      	str	r2, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <HAL_CRCEx_Polynomial_Set+0x34>
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_CRCEx_Polynomial_Set+0x16>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b18      	cmp	r3, #24
 8004c68:	d846      	bhi.n	8004cf8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004cff 	.word	0x08004cff
 8004c74:	08004cf9 	.word	0x08004cf9
 8004c78:	08004cf9 	.word	0x08004cf9
 8004c7c:	08004cf9 	.word	0x08004cf9
 8004c80:	08004cf9 	.word	0x08004cf9
 8004c84:	08004cf9 	.word	0x08004cf9
 8004c88:	08004cf9 	.word	0x08004cf9
 8004c8c:	08004cf9 	.word	0x08004cf9
 8004c90:	08004ced 	.word	0x08004ced
 8004c94:	08004cf9 	.word	0x08004cf9
 8004c98:	08004cf9 	.word	0x08004cf9
 8004c9c:	08004cf9 	.word	0x08004cf9
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004cf9 	.word	0x08004cf9
 8004ca8:	08004cf9 	.word	0x08004cf9
 8004cac:	08004cf9 	.word	0x08004cf9
 8004cb0:	08004ce1 	.word	0x08004ce1
 8004cb4:	08004cf9 	.word	0x08004cf9
 8004cb8:	08004cf9 	.word	0x08004cf9
 8004cbc:	08004cf9 	.word	0x08004cf9
 8004cc0:	08004cf9 	.word	0x08004cf9
 8004cc4:	08004cf9 	.word	0x08004cf9
 8004cc8:	08004cf9 	.word	0x08004cf9
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	08004cd5 	.word	0x08004cd5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b06      	cmp	r3, #6
 8004cd8:	d913      	bls.n	8004d02 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cde:	e010      	b.n	8004d02 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b07      	cmp	r3, #7
 8004ce4:	d90f      	bls.n	8004d06 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cea:	e00c      	b.n	8004d06 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b0f      	cmp	r3, #15
 8004cf0:	d90b      	bls.n	8004d0a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cf6:	e008      	b.n	8004d0a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfc:	e006      	b.n	8004d0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e004      	b.n	8004d0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d02:	bf00      	nop
 8004d04:	e002      	b.n	8004d0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d06:	bf00      	nop
 8004d08:	e000      	b.n	8004d0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d0a:	bf00      	nop
  }
  if (status == HAL_OK)
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 0118 	bic.w	r1, r3, #24
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e069      	b.n	8004e22 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fd fd90 	bl	8002880 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6819      	ldr	r1, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b2a      	ldr	r3, [pc, #168]	; (8004e2c <HAL_DCMI_Init+0xf0>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004da6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004db2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004dbe:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004dca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d112      	bne.n	8004e02 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7f1b      	ldrb	r3, [r3, #28]
 8004de0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	7f5b      	ldrb	r3, [r3, #29]
 8004de6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004de8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7f9b      	ldrb	r3, [r3, #30]
 8004dee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004df0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	7fdb      	ldrb	r3, [r3, #31]
 8004df8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004dfe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e00:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 021e 	orr.w	r2, r2, #30
 8004e10:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	ffe0f007 	.word	0xffe0f007

08004e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_DMA_Start_IT+0x26>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e048      	b.n	8004ee8 <HAL_DMA_Start_IT+0xb8>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d137      	bne.n	8004eda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f842 	bl	8004f08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	223f      	movs	r2, #63	; 0x3f
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0216 	orr.w	r2, r2, #22
 8004e9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0208 	orr.w	r2, r2, #8
 8004ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e005      	b.n	8004ee6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d108      	bne.n	8004f48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f46:	e007      	b.n	8004f58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	60da      	str	r2, [r3, #12]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e039      	b.n	8004fea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fd fd36 	bl	80029fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	f023 0107 	bic.w	r1, r3, #7
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <HAL_DMA2D_Init+0x90>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68d1      	ldr	r1, [r2, #12]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	ffffc000 	.word	0xffffc000

08004ff8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e05f      	b.n	80050ca <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800500a:	4b32      	ldr	r3, [pc, #200]	; (80050d4 <HAL_DMA2D_DeInit+0xdc>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d02e      	beq.n	8005074 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d107      	bne.n	8005034 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8c1 	bl	80051ac <HAL_DMA2D_Abort>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d021      	beq.n	8005074 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e04a      	b.n	80050ca <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b20      	cmp	r3, #32
 8005040:	d108      	bne.n	8005054 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8005042:	2100      	movs	r1, #0
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f8f7 	bl	8005238 <HAL_DMA2D_CLUTLoading_Abort>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d011      	beq.n	8005074 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e03a      	b.n	80050ca <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d108      	bne.n	8005074 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8005062:	2101      	movs	r1, #1
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8e7 	bl	8005238 <HAL_DMA2D_CLUTLoading_Abort>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e02a      	b.n	80050ca <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	223f      	movs	r2, #63	; 0x3f
 8005082:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2200      	movs	r2, #0
 800508a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2200      	movs	r2, #0
 8005092:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2200      	movs	r2, #0
 800509a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2200      	movs	r2, #0
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2200      	movs	r2, #0
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fd fccb 	bl	8002a48 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800

080050d8 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_DMA2D_Start_IT+0x1c>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e020      	b.n	8005136 <HAL_DMA2D_Start_IT+0x5e>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fa84 	bl	800561c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005122:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b086      	sub	sp, #24
 8005142:	af02      	add	r7, sp, #8
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8005156:	2302      	movs	r3, #2
 8005158:	e024      	b.n	80051a4 <HAL_DMA2D_BlendingStart_IT+0x66>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fa4d 	bl	800561c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005190:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 0205 	bic.w	r2, r3, #5
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0204 	orr.w	r2, r2, #4
 80051c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051c8:	f7fe fb7a 	bl	80038c0 <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80051ce:	e017      	b.n	8005200 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80051d0:	f7fe fb76 	bl	80038c0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051de:	d90f      	bls.n	8005200 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2203      	movs	r2, #3
 80051f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e017      	b.n	8005230 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e0      	bne.n	80051d0 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800521c:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3324      	adds	r3, #36	; 0x24
 8005248:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0204 	orr.w	r2, r2, #4
 8005258:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d103      	bne.n	8005268 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	331c      	adds	r3, #28
 8005266:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8005268:	f7fe fb2a 	bl	80038c0 <HAL_GetTick>
 800526c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800526e:	e017      	b.n	80052a0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005270:	f7fe fb26 	bl	80038c0 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800527e:	d90f      	bls.n	80052a0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	f043 0220 	orr.w	r2, r3, #32
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2203      	movs	r2, #3
 8005290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e016      	b.n	80052ce <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e1      	bne.n	8005270 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80052ba:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d026      	beq.n	8005346 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d021      	beq.n	8005346 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005310:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	f043 0201 	orr.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2201      	movs	r2, #1
 8005324:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2204      	movs	r2, #4
 800532a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d026      	beq.n	800539e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d021      	beq.n	800539e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005368:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2220      	movs	r2, #32
 8005370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	f043 0202 	orr.w	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d026      	beq.n	80053f6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d021      	beq.n	80053f6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2208      	movs	r2, #8
 80053c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	f043 0204 	orr.w	r2, r3, #4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2204      	movs	r2, #4
 80053da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00e      	beq.n	8005428 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005418:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2204      	movs	r2, #4
 8005420:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f853 	bl	80054ce <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d024      	beq.n	800547c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01f      	beq.n	800547c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800544a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2202      	movs	r2, #2
 8005452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01f      	beq.n	80054c6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01a      	beq.n	80054c6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800549e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2210      	movs	r2, #16
 80054a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f80e 	bl	80054e2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_DMA2D_ConfigLayer+0x20>
 8005514:	2302      	movs	r3, #2
 8005516:	e079      	b.n	800560c <HAL_DMA2D_ConfigLayer+0x114>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	3318      	adds	r3, #24
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005542:	4b35      	ldr	r3, [pc, #212]	; (8005618 <HAL_DMA2D_ConfigLayer+0x120>)
 8005544:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b0a      	cmp	r3, #10
 800554c:	d003      	beq.n	8005556 <HAL_DMA2D_ConfigLayer+0x5e>
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b09      	cmp	r3, #9
 8005554:	d107      	bne.n	8005566 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e005      	b.n	8005572 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d120      	bne.n	80055ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	43db      	mvns	r3, r3
 8005582:	ea02 0103 	and.w	r1, r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	430a      	orrs	r2, r1
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b0a      	cmp	r3, #10
 80055a0:	d003      	beq.n	80055aa <HAL_DMA2D_ConfigLayer+0xb2>
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b09      	cmp	r3, #9
 80055a8:	d127      	bne.n	80055fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28
 80055b8:	e01f      	b.n	80055fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	43db      	mvns	r3, r3
 80055c4:	ea02 0103 	and.w	r1, r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b0a      	cmp	r3, #10
 80055e2:	d003      	beq.n	80055ec <HAL_DMA2D_ConfigLayer+0xf4>
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b09      	cmp	r3, #9
 80055ea:	d106      	bne.n	80055fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055f8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	ff03000f 	.word	0xff03000f

0800561c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800561c:	b480      	push	{r7}
 800561e:	b08b      	sub	sp, #44	; 0x2c
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	041a      	lsls	r2, r3, #16
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	431a      	orrs	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005654:	d174      	bne.n	8005740 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800565c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005664:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800566c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	431a      	orrs	r2, r3
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	4313      	orrs	r3, r2
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
 800568c:	e053      	b.n	8005736 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d106      	bne.n	80056a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	4313      	orrs	r3, r2
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
 80056a2:	e048      	b.n	8005736 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d111      	bne.n	80056d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	0cdb      	lsrs	r3, r3, #19
 80056b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	0a9b      	lsrs	r3, r3, #10
 80056b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	08db      	lsrs	r3, r3, #3
 80056bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	02db      	lsls	r3, r3, #11
 80056c6:	4313      	orrs	r3, r2
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	e032      	b.n	8005736 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d117      	bne.n	8005708 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	0fdb      	lsrs	r3, r3, #31
 80056dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	0cdb      	lsrs	r3, r3, #19
 80056e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	0adb      	lsrs	r3, r3, #11
 80056e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	08db      	lsrs	r3, r3, #3
 80056ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	029b      	lsls	r3, r3, #10
 80056f8:	431a      	orrs	r2, r3
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	03db      	lsls	r3, r3, #15
 80056fe:	4313      	orrs	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e016      	b.n	8005736 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	0f1b      	lsrs	r3, r3, #28
 800570c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	0d1b      	lsrs	r3, r3, #20
 8005712:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	0b1b      	lsrs	r3, r3, #12
 8005718:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	011a      	lsls	r2, r3, #4
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	431a      	orrs	r2, r3
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	031b      	lsls	r3, r3, #12
 800572e:	4313      	orrs	r3, r2
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800573e:	e003      	b.n	8005748 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	60da      	str	r2, [r3, #12]
}
 8005748:	bf00      	nop
 800574a:	372c      	adds	r7, #44	; 0x2c
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005754:	b480      	push	{r7}
 8005756:	b089      	sub	sp, #36	; 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e175      	b.n	8005a60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005774:	2201      	movs	r2, #1
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	429a      	cmp	r2, r3
 800578e:	f040 8164 	bne.w	8005a5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d00b      	beq.n	80057b2 <HAL_GPIO_Init+0x5e>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d007      	beq.n	80057b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057a6:	2b11      	cmp	r3, #17
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b12      	cmp	r3, #18
 80057b0:	d130      	bne.n	8005814 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	2203      	movs	r2, #3
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4013      	ands	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057e8:	2201      	movs	r2, #1
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 0201 	and.w	r2, r3, #1
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	2203      	movs	r2, #3
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d003      	beq.n	8005854 <HAL_GPIO_Init+0x100>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b12      	cmp	r3, #18
 8005852:	d123      	bne.n	800589c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	08da      	lsrs	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3208      	adds	r2, #8
 800585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	08da      	lsrs	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3208      	adds	r2, #8
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	2203      	movs	r2, #3
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 0203 	and.w	r2, r3, #3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80be 	beq.w	8005a5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058de:	4b66      	ldr	r3, [pc, #408]	; (8005a78 <HAL_GPIO_Init+0x324>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	4a65      	ldr	r2, [pc, #404]	; (8005a78 <HAL_GPIO_Init+0x324>)
 80058e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058e8:	6453      	str	r3, [r2, #68]	; 0x44
 80058ea:	4b63      	ldr	r3, [pc, #396]	; (8005a78 <HAL_GPIO_Init+0x324>)
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80058f6:	4a61      	ldr	r2, [pc, #388]	; (8005a7c <HAL_GPIO_Init+0x328>)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	089b      	lsrs	r3, r3, #2
 80058fc:	3302      	adds	r3, #2
 80058fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005902:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	220f      	movs	r2, #15
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43db      	mvns	r3, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a58      	ldr	r2, [pc, #352]	; (8005a80 <HAL_GPIO_Init+0x32c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d037      	beq.n	8005992 <HAL_GPIO_Init+0x23e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a57      	ldr	r2, [pc, #348]	; (8005a84 <HAL_GPIO_Init+0x330>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d031      	beq.n	800598e <HAL_GPIO_Init+0x23a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a56      	ldr	r2, [pc, #344]	; (8005a88 <HAL_GPIO_Init+0x334>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02b      	beq.n	800598a <HAL_GPIO_Init+0x236>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a55      	ldr	r2, [pc, #340]	; (8005a8c <HAL_GPIO_Init+0x338>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d025      	beq.n	8005986 <HAL_GPIO_Init+0x232>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a54      	ldr	r2, [pc, #336]	; (8005a90 <HAL_GPIO_Init+0x33c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01f      	beq.n	8005982 <HAL_GPIO_Init+0x22e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a53      	ldr	r2, [pc, #332]	; (8005a94 <HAL_GPIO_Init+0x340>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d019      	beq.n	800597e <HAL_GPIO_Init+0x22a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a52      	ldr	r2, [pc, #328]	; (8005a98 <HAL_GPIO_Init+0x344>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <HAL_GPIO_Init+0x226>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a51      	ldr	r2, [pc, #324]	; (8005a9c <HAL_GPIO_Init+0x348>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00d      	beq.n	8005976 <HAL_GPIO_Init+0x222>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a50      	ldr	r2, [pc, #320]	; (8005aa0 <HAL_GPIO_Init+0x34c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d007      	beq.n	8005972 <HAL_GPIO_Init+0x21e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a4f      	ldr	r2, [pc, #316]	; (8005aa4 <HAL_GPIO_Init+0x350>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d101      	bne.n	800596e <HAL_GPIO_Init+0x21a>
 800596a:	2309      	movs	r3, #9
 800596c:	e012      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800596e:	230a      	movs	r3, #10
 8005970:	e010      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005972:	2308      	movs	r3, #8
 8005974:	e00e      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005976:	2307      	movs	r3, #7
 8005978:	e00c      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800597a:	2306      	movs	r3, #6
 800597c:	e00a      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800597e:	2305      	movs	r3, #5
 8005980:	e008      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005982:	2304      	movs	r3, #4
 8005984:	e006      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005986:	2303      	movs	r3, #3
 8005988:	e004      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800598a:	2302      	movs	r3, #2
 800598c:	e002      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005992:	2300      	movs	r3, #0
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	f002 0203 	and.w	r2, r2, #3
 800599a:	0092      	lsls	r2, r2, #2
 800599c:	4093      	lsls	r3, r2
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059a4:	4935      	ldr	r1, [pc, #212]	; (8005a7c <HAL_GPIO_Init+0x328>)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	089b      	lsrs	r3, r3, #2
 80059aa:	3302      	adds	r3, #2
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059b2:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059dc:	4b32      	ldr	r3, [pc, #200]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a00:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a06:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a2a:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b0f      	cmp	r3, #15
 8005a64:	f67f ae86 	bls.w	8005774 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	3724      	adds	r7, #36	; 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	40013800 	.word	0x40013800
 8005a80:	40020000 	.word	0x40020000
 8005a84:	40020400 	.word	0x40020400
 8005a88:	40020800 	.word	0x40020800
 8005a8c:	40020c00 	.word	0x40020c00
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40021400 	.word	0x40021400
 8005a98:	40021800 	.word	0x40021800
 8005a9c:	40021c00 	.word	0x40021c00
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	40022400 	.word	0x40022400
 8005aa8:	40013c00 	.word	0x40013c00

08005aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e001      	b.n	8005ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	807b      	strh	r3, [r7, #2]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005aec:	787b      	ldrb	r3, [r7, #1]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005af2:	887a      	ldrh	r2, [r7, #2]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005af8:	e003      	b.n	8005b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005afa:	887b      	ldrh	r3, [r7, #2]
 8005afc:	041a      	lsls	r2, r3, #16
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	619a      	str	r2, [r3, #24]
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e07f      	b.n	8005c22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f8a9 	bl	8005c8e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d107      	bne.n	8005b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b86:	609a      	str	r2, [r3, #8]
 8005b88:	e006      	b.n	8005b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d104      	bne.n	8005baa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <HAL_I2C_Init+0x11c>)
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	ea42 0103 	orr.w	r1, r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	021a      	lsls	r2, r3, #8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69d9      	ldr	r1, [r3, #28]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1a      	ldr	r2, [r3, #32]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	02008000 	.word	0x02008000

08005c30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e021      	b.n	8005c86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2224      	movs	r2, #36	; 0x24
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f821 	bl	8005ca2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	817b      	strh	r3, [r7, #10]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	813b      	strh	r3, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	f040 80f9 	bne.w	8005ed2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_I2C_Mem_Write+0x34>
 8005ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0ed      	b.n	8005ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_I2C_Mem_Write+0x4e>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e0e6      	b.n	8005ed4 <HAL_I2C_Mem_Write+0x21c>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d0e:	f7fd fdd7 	bl	80038c0 <HAL_GetTick>
 8005d12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2319      	movs	r3, #25
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fad1 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0d1      	b.n	8005ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2221      	movs	r2, #33	; 0x21
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2240      	movs	r2, #64	; 0x40
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d58:	88f8      	ldrh	r0, [r7, #6]
 8005d5a:	893a      	ldrh	r2, [r7, #8]
 8005d5c:	8979      	ldrh	r1, [r7, #10]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	4603      	mov	r3, r0
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f9e1 	bl	8006130 <I2C_RequestMemoryWrite>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0a9      	b.n	8005ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2bff      	cmp	r3, #255	; 0xff
 8005d88:	d90e      	bls.n	8005da8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	22ff      	movs	r2, #255	; 0xff
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	8979      	ldrh	r1, [r7, #10]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fbb3 	bl	800650c <I2C_TransferConfig>
 8005da6:	e00f      	b.n	8005dc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	8979      	ldrh	r1, [r7, #10]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fba2 	bl	800650c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fabb 	bl	8006348 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e07b      	b.n	8005ed4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	781a      	ldrb	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d034      	beq.n	8005e80 <HAL_I2C_Mem_Write+0x1c8>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d130      	bne.n	8005e80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	2200      	movs	r2, #0
 8005e26:	2180      	movs	r1, #128	; 0x80
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fa4d 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e04d      	b.n	8005ed4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2bff      	cmp	r3, #255	; 0xff
 8005e40:	d90e      	bls.n	8005e60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	22ff      	movs	r2, #255	; 0xff
 8005e46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	8979      	ldrh	r1, [r7, #10]
 8005e50:	2300      	movs	r3, #0
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fb57 	bl	800650c <I2C_TransferConfig>
 8005e5e:	e00f      	b.n	8005e80 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	8979      	ldrh	r1, [r7, #10]
 8005e72:	2300      	movs	r3, #0
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fb46 	bl	800650c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d19e      	bne.n	8005dc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fa9a 	bl	80063c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e01a      	b.n	8005ed4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6859      	ldr	r1, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <HAL_I2C_Mem_Write+0x224>)
 8005eb2:	400b      	ands	r3, r1
 8005eb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e000      	b.n	8005ed4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005ed2:	2302      	movs	r3, #2
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	fe00e800 	.word	0xfe00e800

08005ee0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	461a      	mov	r2, r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	817b      	strh	r3, [r7, #10]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	813b      	strh	r3, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	f040 80fd 	bne.w	8006102 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_I2C_Mem_Read+0x34>
 8005f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0f1      	b.n	8006104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_I2C_Mem_Read+0x4e>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e0ea      	b.n	8006104 <HAL_I2C_Mem_Read+0x224>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f36:	f7fd fcc3 	bl	80038c0 <HAL_GetTick>
 8005f3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2319      	movs	r3, #25
 8005f42:	2201      	movs	r2, #1
 8005f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f9bd 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0d5      	b.n	8006104 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2222      	movs	r2, #34	; 0x22
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2240      	movs	r2, #64	; 0x40
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a3a      	ldr	r2, [r7, #32]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f80:	88f8      	ldrh	r0, [r7, #6]
 8005f82:	893a      	ldrh	r2, [r7, #8]
 8005f84:	8979      	ldrh	r1, [r7, #10]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	4603      	mov	r3, r0
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f921 	bl	80061d8 <I2C_RequestMemoryRead>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0ad      	b.n	8006104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2bff      	cmp	r3, #255	; 0xff
 8005fb0:	d90e      	bls.n	8005fd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	8979      	ldrh	r1, [r7, #10]
 8005fc0:	4b52      	ldr	r3, [pc, #328]	; (800610c <HAL_I2C_Mem_Read+0x22c>)
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fa9f 	bl	800650c <I2C_TransferConfig>
 8005fce:	e00f      	b.n	8005ff0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	8979      	ldrh	r1, [r7, #10]
 8005fe2:	4b4a      	ldr	r3, [pc, #296]	; (800610c <HAL_I2C_Mem_Read+0x22c>)
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fa8e 	bl	800650c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2104      	movs	r1, #4
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f964 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e07c      	b.n	8006104 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d034      	beq.n	80060b0 <HAL_I2C_Mem_Read+0x1d0>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d130      	bne.n	80060b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	2200      	movs	r2, #0
 8006056:	2180      	movs	r1, #128	; 0x80
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f935 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e04d      	b.n	8006104 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2bff      	cmp	r3, #255	; 0xff
 8006070:	d90e      	bls.n	8006090 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	b2da      	uxtb	r2, r3
 800607e:	8979      	ldrh	r1, [r7, #10]
 8006080:	2300      	movs	r3, #0
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fa3f 	bl	800650c <I2C_TransferConfig>
 800608e:	e00f      	b.n	80060b0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	8979      	ldrh	r1, [r7, #10]
 80060a2:	2300      	movs	r3, #0
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fa2e 	bl	800650c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d19a      	bne.n	8005ff0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f982 	bl	80063c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e01a      	b.n	8006104 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2220      	movs	r2, #32
 80060d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6859      	ldr	r1, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <HAL_I2C_Mem_Read+0x230>)
 80060e2:	400b      	ands	r3, r1
 80060e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e000      	b.n	8006104 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006102:	2302      	movs	r3, #2
  }
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	80002400 	.word	0x80002400
 8006110:	fe00e800 	.word	0xfe00e800

08006114 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006122:	b2db      	uxtb	r3, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4603      	mov	r3, r0
 8006140:	817b      	strh	r3, [r7, #10]
 8006142:	460b      	mov	r3, r1
 8006144:	813b      	strh	r3, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	8979      	ldrh	r1, [r7, #10]
 8006150:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <I2C_RequestMemoryWrite+0xa4>)
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f9d7 	bl	800650c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f8f0 	bl	8006348 <I2C_WaitOnTXISFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e02c      	b.n	80061cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d105      	bne.n	8006184 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006178:	893b      	ldrh	r3, [r7, #8]
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	629a      	str	r2, [r3, #40]	; 0x28
 8006182:	e015      	b.n	80061b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006184:	893b      	ldrh	r3, [r7, #8]
 8006186:	0a1b      	lsrs	r3, r3, #8
 8006188:	b29b      	uxth	r3, r3
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	69b9      	ldr	r1, [r7, #24]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f8d6 	bl	8006348 <I2C_WaitOnTXISFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e012      	b.n	80061cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061a6:	893b      	ldrh	r3, [r7, #8]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2180      	movs	r1, #128	; 0x80
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f884 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	80002000 	.word	0x80002000

080061d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	460b      	mov	r3, r1
 80061ec:	813b      	strh	r3, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	8979      	ldrh	r1, [r7, #10]
 80061f8:	4b20      	ldr	r3, [pc, #128]	; (800627c <I2C_RequestMemoryRead+0xa4>)
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f984 	bl	800650c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	69b9      	ldr	r1, [r7, #24]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f89d 	bl	8006348 <I2C_WaitOnTXISFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e02c      	b.n	8006272 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800621e:	893b      	ldrh	r3, [r7, #8]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
 8006228:	e015      	b.n	8006256 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800622a:	893b      	ldrh	r3, [r7, #8]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	b29b      	uxth	r3, r3
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	69b9      	ldr	r1, [r7, #24]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f883 	bl	8006348 <I2C_WaitOnTXISFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e012      	b.n	8006272 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800624c:	893b      	ldrh	r3, [r7, #8]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2200      	movs	r2, #0
 800625e:	2140      	movs	r1, #64	; 0x40
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f831 	bl	80062c8 <I2C_WaitOnFlagUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	80002000 	.word	0x80002000

08006280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d103      	bne.n	800629e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2200      	movs	r2, #0
 800629c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d007      	beq.n	80062bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	619a      	str	r2, [r3, #24]
  }
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062d8:	e022      	b.n	8006320 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d01e      	beq.n	8006320 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e2:	f7fd faed 	bl	80038c0 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d302      	bcc.n	80062f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d113      	bne.n	8006320 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e00f      	b.n	8006340 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4013      	ands	r3, r2
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	429a      	cmp	r2, r3
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	429a      	cmp	r2, r3
 800633c:	d0cd      	beq.n	80062da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006354:	e02c      	b.n	80063b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f870 	bl	8006440 <I2C_IsAcknowledgeFailed>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e02a      	b.n	80063c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d01e      	beq.n	80063b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006372:	f7fd faa5 	bl	80038c0 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d113      	bne.n	80063b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e007      	b.n	80063c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d1cb      	bne.n	8006356 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063d4:	e028      	b.n	8006428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f830 	bl	8006440 <I2C_IsAcknowledgeFailed>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e026      	b.n	8006438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ea:	f7fd fa69 	bl	80038c0 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d302      	bcc.n	8006400 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d113      	bne.n	8006428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006404:	f043 0220 	orr.w	r2, r3, #32
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e007      	b.n	8006438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	d1cf      	bne.n	80063d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b10      	cmp	r3, #16
 8006458:	d151      	bne.n	80064fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800645a:	e022      	b.n	80064a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d01e      	beq.n	80064a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006464:	f7fd fa2c 	bl	80038c0 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	429a      	cmp	r2, r3
 8006472:	d302      	bcc.n	800647a <I2C_IsAcknowledgeFailed+0x3a>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d113      	bne.n	80064a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e02e      	b.n	8006500 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d1d5      	bne.n	800645c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2210      	movs	r2, #16
 80064b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2220      	movs	r2, #32
 80064be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff fedd 	bl	8006280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6859      	ldr	r1, [r3, #4]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	4b0d      	ldr	r3, [pc, #52]	; (8006508 <I2C_IsAcknowledgeFailed+0xc8>)
 80064d2:	400b      	ands	r3, r1
 80064d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	f043 0204 	orr.w	r2, r3, #4
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	fe00e800 	.word	0xfe00e800

0800650c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	607b      	str	r3, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	817b      	strh	r3, [r7, #10]
 800651a:	4613      	mov	r3, r2
 800651c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	0d5b      	lsrs	r3, r3, #21
 8006528:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800652c:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <I2C_TransferConfig+0x58>)
 800652e:	430b      	orrs	r3, r1
 8006530:	43db      	mvns	r3, r3
 8006532:	ea02 0103 	and.w	r1, r2, r3
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800653c:	7a7b      	ldrb	r3, [r7, #9]
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	431a      	orrs	r2, r3
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	03ff63ff 	.word	0x03ff63ff

08006568 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e0bf      	b.n	80066fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fc fa74 	bl	8002a7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80065aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6999      	ldr	r1, [r3, #24]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6899      	ldr	r1, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b4a      	ldr	r3, [pc, #296]	; (8006704 <HAL_LTDC_Init+0x19c>)
 80065dc:	400b      	ands	r3, r1
 80065de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6899      	ldr	r1, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68d9      	ldr	r1, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	4b3e      	ldr	r3, [pc, #248]	; (8006704 <HAL_LTDC_Init+0x19c>)
 800660a:	400b      	ands	r3, r1
 800660c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	041b      	lsls	r3, r3, #16
 8006614:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68d9      	ldr	r1, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1a      	ldr	r2, [r3, #32]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6919      	ldr	r1, [r3, #16]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b33      	ldr	r3, [pc, #204]	; (8006704 <HAL_LTDC_Init+0x19c>)
 8006638:	400b      	ands	r3, r1
 800663a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6919      	ldr	r1, [r3, #16]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6959      	ldr	r1, [r3, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b27      	ldr	r3, [pc, #156]	; (8006704 <HAL_LTDC_Init+0x19c>)
 8006666:	400b      	ands	r3, r1
 8006668:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6959      	ldr	r1, [r3, #20]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80066aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0206 	orr.w	r2, r2, #6
 80066d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	f000f800 	.word	0xf000f800

08006708 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d023      	beq.n	8006772 <HAL_LTDC_IRQHandler+0x6a>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01e      	beq.n	8006772 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0204 	bic.w	r2, r2, #4
 8006742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2204      	movs	r2, #4
 800674a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006752:	f043 0201 	orr.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2204      	movs	r2, #4
 8006760:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f86f 	bl	8006850 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d023      	beq.n	80067c4 <HAL_LTDC_IRQHandler+0xbc>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01e      	beq.n	80067c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0202 	bic.w	r2, r2, #2
 8006794:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2202      	movs	r2, #2
 800679c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067a4:	f043 0202 	orr.w	r2, r3, #2
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f846 	bl	8006850 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01b      	beq.n	8006806 <HAL_LTDC_IRQHandler+0xfe>
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d016      	beq.n	8006806 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2201      	movs	r2, #1
 80067ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f011 fc5f 	bl	80180c4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01b      	beq.n	8006848 <HAL_LTDC_IRQHandler+0x140>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d016      	beq.n	8006848 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0208 	bic.w	r2, r2, #8
 8006828:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2208      	movs	r2, #8
 8006830:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f80e 	bl	8006864 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006878:	b5b0      	push	{r4, r5, r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_LTDC_ConfigLayer+0x1a>
 800688e:	2302      	movs	r3, #2
 8006890:	e02c      	b.n	80068ec <HAL_LTDC_ConfigLayer+0x74>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2134      	movs	r1, #52	; 0x34
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4614      	mov	r4, r2
 80068b6:	461d      	mov	r5, r3
 80068b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f849 	bl	8006964 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2201      	movs	r2, #1
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bdb0      	pop	{r4, r5, r7, pc}

080068f4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_LTDC_ProgramLineEvent+0x18>
 8006908:	2302      	movs	r3, #2
 800690a:	e023      	b.n	8006954 <HAL_LTDC_ProgramLineEvent+0x60>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0201 	bic.w	r2, r2, #1
 800692a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800692c:	4a0c      	ldr	r2, [pc, #48]	; (8006960 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0201 	orr.w	r2, r2, #1
 8006940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	40016800 	.word	0x40016800

08006964 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006964:	b480      	push	{r7}
 8006966:	b089      	sub	sp, #36	; 0x24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	0c1b      	lsrs	r3, r3, #16
 800697c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006980:	4413      	add	r3, r2
 8006982:	041b      	lsls	r3, r3, #16
 8006984:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	01db      	lsls	r3, r3, #7
 8006990:	4413      	add	r3, r2
 8006992:	3384      	adds	r3, #132	; 0x84
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	4611      	mov	r1, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	01d2      	lsls	r2, r2, #7
 80069a0:	440a      	add	r2, r1
 80069a2:	3284      	adds	r2, #132	; 0x84
 80069a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	0c1b      	lsrs	r3, r3, #16
 80069b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ba:	4413      	add	r3, r2
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	01db      	lsls	r3, r3, #7
 80069c8:	440b      	add	r3, r1
 80069ca:	3384      	adds	r3, #132	; 0x84
 80069cc:	4619      	mov	r1, r3
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069e2:	4413      	add	r3, r2
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	01db      	lsls	r3, r3, #7
 80069f2:	4413      	add	r3, r2
 80069f4:	3384      	adds	r3, #132	; 0x84
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	4611      	mov	r1, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	01d2      	lsls	r2, r2, #7
 8006a02:	440a      	add	r2, r1
 8006a04:	3284      	adds	r2, #132	; 0x84
 8006a06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a1a:	4413      	add	r3, r2
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4619      	mov	r1, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	01db      	lsls	r3, r3, #7
 8006a28:	440b      	add	r3, r1
 8006a2a:	3384      	adds	r3, #132	; 0x84
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	01db      	lsls	r3, r3, #7
 8006a3e:	4413      	add	r3, r2
 8006a40:	3384      	adds	r3, #132	; 0x84
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	01d2      	lsls	r2, r2, #7
 8006a4e:	440a      	add	r2, r1
 8006a50:	3284      	adds	r2, #132	; 0x84
 8006a52:	f023 0307 	bic.w	r3, r3, #7
 8006a56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	01db      	lsls	r3, r3, #7
 8006a62:	4413      	add	r3, r2
 8006a64:	3384      	adds	r3, #132	; 0x84
 8006a66:	461a      	mov	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	061b      	lsls	r3, r3, #24
 8006a88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	01db      	lsls	r3, r3, #7
 8006a94:	4413      	add	r3, r2
 8006a96:	3384      	adds	r3, #132	; 0x84
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	01db      	lsls	r3, r3, #7
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3384      	adds	r3, #132	; 0x84
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	2300      	movs	r3, #0
 8006aac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	01db      	lsls	r3, r3, #7
 8006ac8:	440b      	add	r3, r1
 8006aca:	3384      	adds	r3, #132	; 0x84
 8006acc:	4619      	mov	r1, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	01db      	lsls	r3, r3, #7
 8006ade:	4413      	add	r3, r2
 8006ae0:	3384      	adds	r3, #132	; 0x84
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	4611      	mov	r1, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	01d2      	lsls	r2, r2, #7
 8006aee:	440a      	add	r2, r1
 8006af0:	3284      	adds	r2, #132	; 0x84
 8006af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006af6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	01db      	lsls	r3, r3, #7
 8006b02:	4413      	add	r3, r2
 8006b04:	3384      	adds	r3, #132	; 0x84
 8006b06:	461a      	mov	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	01db      	lsls	r3, r3, #7
 8006b18:	4413      	add	r3, r2
 8006b1a:	3384      	adds	r3, #132	; 0x84
 8006b1c:	69da      	ldr	r2, [r3, #28]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4619      	mov	r1, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	01db      	lsls	r3, r3, #7
 8006b28:	440b      	add	r3, r1
 8006b2a:	3384      	adds	r3, #132	; 0x84
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4b58      	ldr	r3, [pc, #352]	; (8006c90 <LTDC_SetConfig+0x32c>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	68f9      	ldr	r1, [r7, #12]
 8006b3e:	6809      	ldr	r1, [r1, #0]
 8006b40:	4608      	mov	r0, r1
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	01c9      	lsls	r1, r1, #7
 8006b46:	4401      	add	r1, r0
 8006b48:	3184      	adds	r1, #132	; 0x84
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	01db      	lsls	r3, r3, #7
 8006b58:	4413      	add	r3, r2
 8006b5a:	3384      	adds	r3, #132	; 0x84
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	01db      	lsls	r3, r3, #7
 8006b68:	4413      	add	r3, r2
 8006b6a:	3384      	adds	r3, #132	; 0x84
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	2300      	movs	r3, #0
 8006b70:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	01db      	lsls	r3, r3, #7
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3384      	adds	r3, #132	; 0x84
 8006b80:	461a      	mov	r2, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006b90:	2304      	movs	r3, #4
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e01b      	b.n	8006bce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d102      	bne.n	8006ba4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	e014      	b.n	8006bce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d00b      	beq.n	8006bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d007      	beq.n	8006bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d003      	beq.n	8006bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006bc0:	2b07      	cmp	r3, #7
 8006bc2:	d102      	bne.n	8006bca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	e001      	b.n	8006bce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	01db      	lsls	r3, r3, #7
 8006bd8:	4413      	add	r3, r2
 8006bda:	3384      	adds	r3, #132	; 0x84
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	4611      	mov	r1, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	01d2      	lsls	r2, r2, #7
 8006be8:	440a      	add	r2, r1
 8006bea:	3284      	adds	r2, #132	; 0x84
 8006bec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	fb02 f303 	mul.w	r3, r2, r3
 8006bfc:	041a      	lsls	r2, r3, #16
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6859      	ldr	r1, [r3, #4]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	1acb      	subs	r3, r1, r3
 8006c08:	69f9      	ldr	r1, [r7, #28]
 8006c0a:	fb01 f303 	mul.w	r3, r1, r3
 8006c0e:	3303      	adds	r3, #3
 8006c10:	68f9      	ldr	r1, [r7, #12]
 8006c12:	6809      	ldr	r1, [r1, #0]
 8006c14:	4608      	mov	r0, r1
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	01c9      	lsls	r1, r1, #7
 8006c1a:	4401      	add	r1, r0
 8006c1c:	3184      	adds	r1, #132	; 0x84
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	01db      	lsls	r3, r3, #7
 8006c2c:	4413      	add	r3, r2
 8006c2e:	3384      	adds	r3, #132	; 0x84
 8006c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4619      	mov	r1, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	01db      	lsls	r3, r3, #7
 8006c3c:	440b      	add	r3, r1
 8006c3e:	3384      	adds	r3, #132	; 0x84
 8006c40:	4619      	mov	r1, r3
 8006c42:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <LTDC_SetConfig+0x330>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	01db      	lsls	r3, r3, #7
 8006c52:	4413      	add	r3, r2
 8006c54:	3384      	adds	r3, #132	; 0x84
 8006c56:	461a      	mov	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	01db      	lsls	r3, r3, #7
 8006c68:	4413      	add	r3, r2
 8006c6a:	3384      	adds	r3, #132	; 0x84
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	4611      	mov	r1, r2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	01d2      	lsls	r2, r2, #7
 8006c78:	440a      	add	r2, r1
 8006c7a:	3284      	adds	r2, #132	; 0x84
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	6013      	str	r3, [r2, #0]
}
 8006c82:	bf00      	nop
 8006c84:	3724      	adds	r7, #36	; 0x24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	fffff8f8 	.word	0xfffff8f8
 8006c94:	fffff800 	.word	0xfffff800

08006c98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca6:	6013      	str	r3, [r2, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40007000 	.word	0x40007000

08006cb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006cc2:	4b23      	ldr	r3, [pc, #140]	; (8006d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	4a22      	ldr	r2, [pc, #136]	; (8006d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cce:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006cda:	4b1e      	ldr	r3, [pc, #120]	; (8006d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ce6:	f7fc fdeb 	bl	80038c0 <HAL_GetTick>
 8006cea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006cec:	e009      	b.n	8006d02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006cee:	f7fc fde7 	bl	80038c0 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cfc:	d901      	bls.n	8006d02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e022      	b.n	8006d48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d02:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0e:	d1ee      	bne.n	8006cee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a0f      	ldr	r2, [pc, #60]	; (8006d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d1c:	f7fc fdd0 	bl	80038c0 <HAL_GetTick>
 8006d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d22:	e009      	b.n	8006d38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d24:	f7fc fdcc 	bl	80038c0 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d32:	d901      	bls.n	8006d38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e007      	b.n	8006d48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d44:	d1ee      	bne.n	8006d24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40007000 	.word	0x40007000

08006d58 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006d60:	f7fc fdae 	bl	80038c0 <HAL_GetTick>
 8006d64:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e067      	b.n	8006e40 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fb ff41 	bl	8002c0c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006d8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f85e 	bl	8006e50 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	021a      	lsls	r2, r3, #8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	2120      	movs	r1, #32
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f856 	bl	8006e6c <QSPI_WaitFlagStateUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d135      	bne.n	8006e36 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <HAL_QSPI_Init+0xf0>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6852      	ldr	r2, [r2, #4]
 8006dd8:	0611      	lsls	r1, r2, #24
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68d2      	ldr	r2, [r2, #12]
 8006dde:	4311      	orrs	r1, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	69d2      	ldr	r2, [r2, #28]
 8006de4:	4311      	orrs	r1, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6a12      	ldr	r2, [r2, #32]
 8006dea:	4311      	orrs	r1, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <HAL_QSPI_Init+0xf4>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6912      	ldr	r2, [r2, #16]
 8006e02:	0411      	lsls	r1, r2, #16
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6952      	ldr	r2, [r2, #20]
 8006e08:	4311      	orrs	r1, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6992      	ldr	r2, [r2, #24]
 8006e0e:	4311      	orrs	r1, r2
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	430b      	orrs	r3, r1
 8006e16:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	00ffff2f 	.word	0x00ffff2f
 8006e4c:	ffe0f8fe 	.word	0xffe0f8fe

08006e50 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006e7c:	e01a      	b.n	8006eb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d016      	beq.n	8006eb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e86:	f7fc fd1b 	bl	80038c0 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d302      	bcc.n	8006e9c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea8:	f043 0201 	orr.w	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e00e      	b.n	8006ed2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	bf14      	ite	ne
 8006ec2:	2301      	movne	r3, #1
 8006ec4:	2300      	moveq	r3, #0
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d1d6      	bne.n	8006e7e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e291      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 8087 	beq.w	800700e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f00:	4b96      	ldr	r3, [pc, #600]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 030c 	and.w	r3, r3, #12
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d00c      	beq.n	8006f26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f0c:	4b93      	ldr	r3, [pc, #588]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 030c 	and.w	r3, r3, #12
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d112      	bne.n	8006f3e <HAL_RCC_OscConfig+0x62>
 8006f18:	4b90      	ldr	r3, [pc, #576]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f24:	d10b      	bne.n	8006f3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f26:	4b8d      	ldr	r3, [pc, #564]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d06c      	beq.n	800700c <HAL_RCC_OscConfig+0x130>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d168      	bne.n	800700c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e26b      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f46:	d106      	bne.n	8006f56 <HAL_RCC_OscConfig+0x7a>
 8006f48:	4b84      	ldr	r3, [pc, #528]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a83      	ldr	r2, [pc, #524]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e02e      	b.n	8006fb4 <HAL_RCC_OscConfig+0xd8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10c      	bne.n	8006f78 <HAL_RCC_OscConfig+0x9c>
 8006f5e:	4b7f      	ldr	r3, [pc, #508]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a7e      	ldr	r2, [pc, #504]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	4b7c      	ldr	r3, [pc, #496]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a7b      	ldr	r2, [pc, #492]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	e01d      	b.n	8006fb4 <HAL_RCC_OscConfig+0xd8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f80:	d10c      	bne.n	8006f9c <HAL_RCC_OscConfig+0xc0>
 8006f82:	4b76      	ldr	r3, [pc, #472]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a75      	ldr	r2, [pc, #468]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	4b73      	ldr	r3, [pc, #460]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a72      	ldr	r2, [pc, #456]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	e00b      	b.n	8006fb4 <HAL_RCC_OscConfig+0xd8>
 8006f9c:	4b6f      	ldr	r3, [pc, #444]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a6e      	ldr	r2, [pc, #440]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	4b6c      	ldr	r3, [pc, #432]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a6b      	ldr	r2, [pc, #428]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d013      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fc fc80 	bl	80038c0 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fc4:	f7fc fc7c 	bl	80038c0 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b64      	cmp	r3, #100	; 0x64
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e21f      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fd6:	4b61      	ldr	r3, [pc, #388]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f0      	beq.n	8006fc4 <HAL_RCC_OscConfig+0xe8>
 8006fe2:	e014      	b.n	800700e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fc fc6c 	bl	80038c0 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fec:	f7fc fc68 	bl	80038c0 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	; 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e20b      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ffe:	4b57      	ldr	r3, [pc, #348]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x110>
 800700a:	e000      	b.n	800700e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800700c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d069      	beq.n	80070ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800701a:	4b50      	ldr	r3, [pc, #320]	; (800715c <HAL_RCC_OscConfig+0x280>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00b      	beq.n	800703e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007026:	4b4d      	ldr	r3, [pc, #308]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 030c 	and.w	r3, r3, #12
 800702e:	2b08      	cmp	r3, #8
 8007030:	d11c      	bne.n	800706c <HAL_RCC_OscConfig+0x190>
 8007032:	4b4a      	ldr	r3, [pc, #296]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d116      	bne.n	800706c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800703e:	4b47      	ldr	r3, [pc, #284]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_RCC_OscConfig+0x17a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d001      	beq.n	8007056 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e1df      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007056:	4b41      	ldr	r3, [pc, #260]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	493d      	ldr	r1, [pc, #244]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007066:	4313      	orrs	r3, r2
 8007068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800706a:	e040      	b.n	80070ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d023      	beq.n	80070bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007074:	4b39      	ldr	r3, [pc, #228]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a38      	ldr	r2, [pc, #224]	; (800715c <HAL_RCC_OscConfig+0x280>)
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fc fc1e 	bl	80038c0 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007088:	f7fc fc1a 	bl	80038c0 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e1bd      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800709a:	4b30      	ldr	r3, [pc, #192]	; (800715c <HAL_RCC_OscConfig+0x280>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f0      	beq.n	8007088 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070a6:	4b2d      	ldr	r3, [pc, #180]	; (800715c <HAL_RCC_OscConfig+0x280>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	4929      	ldr	r1, [pc, #164]	; (800715c <HAL_RCC_OscConfig+0x280>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	600b      	str	r3, [r1, #0]
 80070ba:	e018      	b.n	80070ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070bc:	4b27      	ldr	r3, [pc, #156]	; (800715c <HAL_RCC_OscConfig+0x280>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a26      	ldr	r2, [pc, #152]	; (800715c <HAL_RCC_OscConfig+0x280>)
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fc fbfa 	bl	80038c0 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070d0:	f7fc fbf6 	bl	80038c0 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e199      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070e2:	4b1e      	ldr	r3, [pc, #120]	; (800715c <HAL_RCC_OscConfig+0x280>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d038      	beq.n	800716c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d019      	beq.n	8007136 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007102:	4b16      	ldr	r3, [pc, #88]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007106:	4a15      	ldr	r2, [pc, #84]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710e:	f7fc fbd7 	bl	80038c0 <HAL_GetTick>
 8007112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007114:	e008      	b.n	8007128 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007116:	f7fc fbd3 	bl	80038c0 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e176      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <HAL_RCC_OscConfig+0x280>)
 800712a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0f0      	beq.n	8007116 <HAL_RCC_OscConfig+0x23a>
 8007134:	e01a      	b.n	800716c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <HAL_RCC_OscConfig+0x280>)
 8007138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800713a:	4a08      	ldr	r2, [pc, #32]	; (800715c <HAL_RCC_OscConfig+0x280>)
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007142:	f7fc fbbd 	bl	80038c0 <HAL_GetTick>
 8007146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007148:	e00a      	b.n	8007160 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800714a:	f7fc fbb9 	bl	80038c0 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d903      	bls.n	8007160 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e15c      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
 800715c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007160:	4b91      	ldr	r3, [pc, #580]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1ee      	bne.n	800714a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80a4 	beq.w	80072c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800717a:	4b8b      	ldr	r3, [pc, #556]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10d      	bne.n	80071a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007186:	4b88      	ldr	r3, [pc, #544]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	4a87      	ldr	r2, [pc, #540]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007190:	6413      	str	r3, [r2, #64]	; 0x40
 8007192:	4b85      	ldr	r3, [pc, #532]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719a:	60bb      	str	r3, [r7, #8]
 800719c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a2:	4b82      	ldr	r3, [pc, #520]	; (80073ac <HAL_RCC_OscConfig+0x4d0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d118      	bne.n	80071e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80071ae:	4b7f      	ldr	r3, [pc, #508]	; (80073ac <HAL_RCC_OscConfig+0x4d0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a7e      	ldr	r2, [pc, #504]	; (80073ac <HAL_RCC_OscConfig+0x4d0>)
 80071b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ba:	f7fc fb81 	bl	80038c0 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c2:	f7fc fb7d 	bl	80038c0 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b64      	cmp	r3, #100	; 0x64
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e120      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071d4:	4b75      	ldr	r3, [pc, #468]	; (80073ac <HAL_RCC_OscConfig+0x4d0>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0f0      	beq.n	80071c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d106      	bne.n	80071f6 <HAL_RCC_OscConfig+0x31a>
 80071e8:	4b6f      	ldr	r3, [pc, #444]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 80071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ec:	4a6e      	ldr	r2, [pc, #440]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	6713      	str	r3, [r2, #112]	; 0x70
 80071f4:	e02d      	b.n	8007252 <HAL_RCC_OscConfig+0x376>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10c      	bne.n	8007218 <HAL_RCC_OscConfig+0x33c>
 80071fe:	4b6a      	ldr	r3, [pc, #424]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	4a69      	ldr	r2, [pc, #420]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007204:	f023 0301 	bic.w	r3, r3, #1
 8007208:	6713      	str	r3, [r2, #112]	; 0x70
 800720a:	4b67      	ldr	r3, [pc, #412]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720e:	4a66      	ldr	r2, [pc, #408]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007210:	f023 0304 	bic.w	r3, r3, #4
 8007214:	6713      	str	r3, [r2, #112]	; 0x70
 8007216:	e01c      	b.n	8007252 <HAL_RCC_OscConfig+0x376>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b05      	cmp	r3, #5
 800721e:	d10c      	bne.n	800723a <HAL_RCC_OscConfig+0x35e>
 8007220:	4b61      	ldr	r3, [pc, #388]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	4a60      	ldr	r2, [pc, #384]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007226:	f043 0304 	orr.w	r3, r3, #4
 800722a:	6713      	str	r3, [r2, #112]	; 0x70
 800722c:	4b5e      	ldr	r3, [pc, #376]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007230:	4a5d      	ldr	r2, [pc, #372]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	6713      	str	r3, [r2, #112]	; 0x70
 8007238:	e00b      	b.n	8007252 <HAL_RCC_OscConfig+0x376>
 800723a:	4b5b      	ldr	r3, [pc, #364]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	4a5a      	ldr	r2, [pc, #360]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	6713      	str	r3, [r2, #112]	; 0x70
 8007246:	4b58      	ldr	r3, [pc, #352]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	4a57      	ldr	r2, [pc, #348]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800724c:	f023 0304 	bic.w	r3, r3, #4
 8007250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d015      	beq.n	8007286 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800725a:	f7fc fb31 	bl	80038c0 <HAL_GetTick>
 800725e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007260:	e00a      	b.n	8007278 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007262:	f7fc fb2d 	bl	80038c0 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007270:	4293      	cmp	r3, r2
 8007272:	d901      	bls.n	8007278 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e0ce      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007278:	4b4b      	ldr	r3, [pc, #300]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0ee      	beq.n	8007262 <HAL_RCC_OscConfig+0x386>
 8007284:	e014      	b.n	80072b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007286:	f7fc fb1b 	bl	80038c0 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800728c:	e00a      	b.n	80072a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728e:	f7fc fb17 	bl	80038c0 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	f241 3288 	movw	r2, #5000	; 0x1388
 800729c:	4293      	cmp	r3, r2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e0b8      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072a4:	4b40      	ldr	r3, [pc, #256]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1ee      	bne.n	800728e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d105      	bne.n	80072c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072b6:	4b3c      	ldr	r3, [pc, #240]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	4a3b      	ldr	r2, [pc, #236]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 80072bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80a4 	beq.w	8007414 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072cc:	4b36      	ldr	r3, [pc, #216]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 030c 	and.w	r3, r3, #12
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d06b      	beq.n	80073b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d149      	bne.n	8007374 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072e0:	4b31      	ldr	r3, [pc, #196]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a30      	ldr	r2, [pc, #192]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 80072e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fc fae8 	bl	80038c0 <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072f4:	f7fc fae4 	bl	80038c0 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e087      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007306:	4b28      	ldr	r3, [pc, #160]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69da      	ldr	r2, [r3, #28]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	019b      	lsls	r3, r3, #6
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	3b01      	subs	r3, #1
 800732c:	041b      	lsls	r3, r3, #16
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	061b      	lsls	r3, r3, #24
 8007336:	4313      	orrs	r3, r2
 8007338:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800733a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800733e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007340:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800734a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fc fab8 	bl	80038c0 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007354:	f7fc fab4 	bl	80038c0 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e057      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007366:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <HAL_RCC_OscConfig+0x478>
 8007372:	e04f      	b.n	8007414 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a0b      	ldr	r2, [pc, #44]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800737a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800737e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7fc fa9e 	bl	80038c0 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007388:	f7fc fa9a 	bl	80038c0 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e03d      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739a:	4b03      	ldr	r3, [pc, #12]	; (80073a8 <HAL_RCC_OscConfig+0x4cc>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0x4ac>
 80073a6:	e035      	b.n	8007414 <HAL_RCC_OscConfig+0x538>
 80073a8:	40023800 	.word	0x40023800
 80073ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073b0:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <HAL_RCC_OscConfig+0x544>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d028      	beq.n	8007410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d121      	bne.n	8007410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d11a      	bne.n	8007410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073e0:	4013      	ands	r3, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d111      	bne.n	8007410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	3b01      	subs	r3, #1
 80073fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d107      	bne.n	8007410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800740c:	429a      	cmp	r2, r3
 800740e:	d001      	beq.n	8007414 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40023800 	.word	0x40023800

08007424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e0d0      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800743c:	4b6a      	ldr	r3, [pc, #424]	; (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d910      	bls.n	800746c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800744a:	4b67      	ldr	r3, [pc, #412]	; (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f023 020f 	bic.w	r2, r3, #15
 8007452:	4965      	ldr	r1, [pc, #404]	; (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	4313      	orrs	r3, r2
 8007458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800745a:	4b63      	ldr	r3, [pc, #396]	; (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d001      	beq.n	800746c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0b8      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d020      	beq.n	80074ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007484:	4b59      	ldr	r3, [pc, #356]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	4a58      	ldr	r2, [pc, #352]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 800748a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800748e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0308 	and.w	r3, r3, #8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800749c:	4b53      	ldr	r3, [pc, #332]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	4a52      	ldr	r2, [pc, #328]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a8:	4b50      	ldr	r3, [pc, #320]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	494d      	ldr	r1, [pc, #308]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d040      	beq.n	8007548 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d107      	bne.n	80074de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ce:	4b47      	ldr	r3, [pc, #284]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d115      	bne.n	8007506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e07f      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e6:	4b41      	ldr	r3, [pc, #260]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e073      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074f6:	4b3d      	ldr	r3, [pc, #244]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e06b      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f023 0203 	bic.w	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	4936      	ldr	r1, [pc, #216]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007514:	4313      	orrs	r3, r2
 8007516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007518:	f7fc f9d2 	bl	80038c0 <HAL_GetTick>
 800751c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751e:	e00a      	b.n	8007536 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007520:	f7fc f9ce 	bl	80038c0 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	f241 3288 	movw	r2, #5000	; 0x1388
 800752e:	4293      	cmp	r3, r2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e053      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007536:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 020c 	and.w	r2, r3, #12
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	429a      	cmp	r2, r3
 8007546:	d1eb      	bne.n	8007520 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007548:	4b27      	ldr	r3, [pc, #156]	; (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d210      	bcs.n	8007578 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007556:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f023 020f 	bic.w	r2, r3, #15
 800755e:	4922      	ldr	r1, [pc, #136]	; (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4313      	orrs	r3, r2
 8007564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007566:	4b20      	ldr	r3, [pc, #128]	; (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d001      	beq.n	8007578 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e032      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007584:	4b19      	ldr	r3, [pc, #100]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4916      	ldr	r1, [pc, #88]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007592:	4313      	orrs	r3, r2
 8007594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075a2:	4b12      	ldr	r3, [pc, #72]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	490e      	ldr	r1, [pc, #56]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075b6:	f000 f821 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 80075ba:	4602      	mov	r2, r0
 80075bc:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	490a      	ldr	r1, [pc, #40]	; (80075f0 <HAL_RCC_ClockConfig+0x1cc>)
 80075c8:	5ccb      	ldrb	r3, [r1, r3]
 80075ca:	fa22 f303 	lsr.w	r3, r2, r3
 80075ce:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <HAL_RCC_ClockConfig+0x1d0>)
 80075d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <HAL_RCC_ClockConfig+0x1d4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fb ffbc 	bl	8003554 <HAL_InitTick>

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	40023c00 	.word	0x40023c00
 80075ec:	40023800 	.word	0x40023800
 80075f0:	0802a38c 	.word	0x0802a38c
 80075f4:	20000018 	.word	0x20000018
 80075f8:	2000001c 	.word	0x2000001c

080075fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075fc:	b5b0      	push	{r4, r5, r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007602:	2100      	movs	r1, #0
 8007604:	6079      	str	r1, [r7, #4]
 8007606:	2100      	movs	r1, #0
 8007608:	60f9      	str	r1, [r7, #12]
 800760a:	2100      	movs	r1, #0
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800760e:	2100      	movs	r1, #0
 8007610:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007612:	4952      	ldr	r1, [pc, #328]	; (800775c <HAL_RCC_GetSysClockFreq+0x160>)
 8007614:	6889      	ldr	r1, [r1, #8]
 8007616:	f001 010c 	and.w	r1, r1, #12
 800761a:	2908      	cmp	r1, #8
 800761c:	d00d      	beq.n	800763a <HAL_RCC_GetSysClockFreq+0x3e>
 800761e:	2908      	cmp	r1, #8
 8007620:	f200 8094 	bhi.w	800774c <HAL_RCC_GetSysClockFreq+0x150>
 8007624:	2900      	cmp	r1, #0
 8007626:	d002      	beq.n	800762e <HAL_RCC_GetSysClockFreq+0x32>
 8007628:	2904      	cmp	r1, #4
 800762a:	d003      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0x38>
 800762c:	e08e      	b.n	800774c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800762e:	4b4c      	ldr	r3, [pc, #304]	; (8007760 <HAL_RCC_GetSysClockFreq+0x164>)
 8007630:	60bb      	str	r3, [r7, #8]
      break;
 8007632:	e08e      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007634:	4b4b      	ldr	r3, [pc, #300]	; (8007764 <HAL_RCC_GetSysClockFreq+0x168>)
 8007636:	60bb      	str	r3, [r7, #8]
      break;
 8007638:	e08b      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800763a:	4948      	ldr	r1, [pc, #288]	; (800775c <HAL_RCC_GetSysClockFreq+0x160>)
 800763c:	6849      	ldr	r1, [r1, #4]
 800763e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007642:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007644:	4945      	ldr	r1, [pc, #276]	; (800775c <HAL_RCC_GetSysClockFreq+0x160>)
 8007646:	6849      	ldr	r1, [r1, #4]
 8007648:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800764c:	2900      	cmp	r1, #0
 800764e:	d024      	beq.n	800769a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007650:	4942      	ldr	r1, [pc, #264]	; (800775c <HAL_RCC_GetSysClockFreq+0x160>)
 8007652:	6849      	ldr	r1, [r1, #4]
 8007654:	0989      	lsrs	r1, r1, #6
 8007656:	4608      	mov	r0, r1
 8007658:	f04f 0100 	mov.w	r1, #0
 800765c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007660:	f04f 0500 	mov.w	r5, #0
 8007664:	ea00 0204 	and.w	r2, r0, r4
 8007668:	ea01 0305 	and.w	r3, r1, r5
 800766c:	493d      	ldr	r1, [pc, #244]	; (8007764 <HAL_RCC_GetSysClockFreq+0x168>)
 800766e:	fb01 f003 	mul.w	r0, r1, r3
 8007672:	2100      	movs	r1, #0
 8007674:	fb01 f102 	mul.w	r1, r1, r2
 8007678:	1844      	adds	r4, r0, r1
 800767a:	493a      	ldr	r1, [pc, #232]	; (8007764 <HAL_RCC_GetSysClockFreq+0x168>)
 800767c:	fba2 0101 	umull	r0, r1, r2, r1
 8007680:	1863      	adds	r3, r4, r1
 8007682:	4619      	mov	r1, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	461a      	mov	r2, r3
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	f7f9 f8a4 	bl	80007d8 <__aeabi_uldivmod>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4613      	mov	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e04a      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800769a:	4b30      	ldr	r3, [pc, #192]	; (800775c <HAL_RCC_GetSysClockFreq+0x160>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	099b      	lsrs	r3, r3, #6
 80076a0:	461a      	mov	r2, r3
 80076a2:	f04f 0300 	mov.w	r3, #0
 80076a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076aa:	f04f 0100 	mov.w	r1, #0
 80076ae:	ea02 0400 	and.w	r4, r2, r0
 80076b2:	ea03 0501 	and.w	r5, r3, r1
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	014b      	lsls	r3, r1, #5
 80076c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076c8:	0142      	lsls	r2, r0, #5
 80076ca:	4610      	mov	r0, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	1b00      	subs	r0, r0, r4
 80076d0:	eb61 0105 	sbc.w	r1, r1, r5
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	f04f 0300 	mov.w	r3, #0
 80076dc:	018b      	lsls	r3, r1, #6
 80076de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80076e2:	0182      	lsls	r2, r0, #6
 80076e4:	1a12      	subs	r2, r2, r0
 80076e6:	eb63 0301 	sbc.w	r3, r3, r1
 80076ea:	f04f 0000 	mov.w	r0, #0
 80076ee:	f04f 0100 	mov.w	r1, #0
 80076f2:	00d9      	lsls	r1, r3, #3
 80076f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076f8:	00d0      	lsls	r0, r2, #3
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	1912      	adds	r2, r2, r4
 8007700:	eb45 0303 	adc.w	r3, r5, r3
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f04f 0100 	mov.w	r1, #0
 800770c:	0299      	lsls	r1, r3, #10
 800770e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007712:	0290      	lsls	r0, r2, #10
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4610      	mov	r0, r2
 800771a:	4619      	mov	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	461a      	mov	r2, r3
 8007720:	f04f 0300 	mov.w	r3, #0
 8007724:	f7f9 f858 	bl	80007d8 <__aeabi_uldivmod>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4613      	mov	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007730:	4b0a      	ldr	r3, [pc, #40]	; (800775c <HAL_RCC_GetSysClockFreq+0x160>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	0c1b      	lsrs	r3, r3, #16
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	3301      	adds	r3, #1
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	fbb2 f3f3 	udiv	r3, r2, r3
 8007748:	60bb      	str	r3, [r7, #8]
      break;
 800774a:	e002      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <HAL_RCC_GetSysClockFreq+0x164>)
 800774e:	60bb      	str	r3, [r7, #8]
      break;
 8007750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007752:	68bb      	ldr	r3, [r7, #8]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bdb0      	pop	{r4, r5, r7, pc}
 800775c:	40023800 	.word	0x40023800
 8007760:	00f42400 	.word	0x00f42400
 8007764:	017d7840 	.word	0x017d7840

08007768 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <HAL_RCC_GetHCLKFreq+0x14>)
 800776e:	681b      	ldr	r3, [r3, #0]
}
 8007770:	4618      	mov	r0, r3
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20000018 	.word	0x20000018

08007780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007784:	f7ff fff0 	bl	8007768 <HAL_RCC_GetHCLKFreq>
 8007788:	4602      	mov	r2, r0
 800778a:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	0a9b      	lsrs	r3, r3, #10
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	4903      	ldr	r1, [pc, #12]	; (80077a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007796:	5ccb      	ldrb	r3, [r1, r3]
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800779c:	4618      	mov	r0, r3
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	40023800 	.word	0x40023800
 80077a4:	0802a39c 	.word	0x0802a39c

080077a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077ac:	f7ff ffdc 	bl	8007768 <HAL_RCC_GetHCLKFreq>
 80077b0:	4602      	mov	r2, r0
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	0b5b      	lsrs	r3, r3, #13
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	4903      	ldr	r1, [pc, #12]	; (80077cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077be:	5ccb      	ldrb	r3, [r1, r3]
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40023800 	.word	0x40023800
 80077cc:	0802a39c 	.word	0x0802a39c

080077d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	220f      	movs	r2, #15
 80077de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077e0:	4b12      	ldr	r3, [pc, #72]	; (800782c <HAL_RCC_GetClockConfig+0x5c>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 0203 	and.w	r2, r3, #3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80077ec:	4b0f      	ldr	r3, [pc, #60]	; (800782c <HAL_RCC_GetClockConfig+0x5c>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80077f8:	4b0c      	ldr	r3, [pc, #48]	; (800782c <HAL_RCC_GetClockConfig+0x5c>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007804:	4b09      	ldr	r3, [pc, #36]	; (800782c <HAL_RCC_GetClockConfig+0x5c>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	08db      	lsrs	r3, r3, #3
 800780a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <HAL_RCC_GetClockConfig+0x60>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 020f 	and.w	r2, r3, #15
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	601a      	str	r2, [r3, #0]
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40023800 	.word	0x40023800
 8007830:	40023c00 	.word	0x40023c00

08007834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d012      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800785c:	4b69      	ldr	r3, [pc, #420]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	4a68      	ldr	r2, [pc, #416]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007862:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007866:	6093      	str	r3, [r2, #8]
 8007868:	4b66      	ldr	r3, [pc, #408]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007870:	4964      	ldr	r1, [pc, #400]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007872:	4313      	orrs	r3, r2
 8007874:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800787e:	2301      	movs	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d017      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800788e:	4b5d      	ldr	r3, [pc, #372]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789c:	4959      	ldr	r1, [pc, #356]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ac:	d101      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80078ae:	2301      	movs	r3, #1
 80078b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80078ba:	2301      	movs	r3, #1
 80078bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d017      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078ca:	4b4e      	ldr	r3, [pc, #312]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	494a      	ldr	r1, [pc, #296]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078e8:	d101      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078f6:	2301      	movs	r3, #1
 80078f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007906:	2301      	movs	r3, #1
 8007908:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 808b 	beq.w	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007918:	4b3a      	ldr	r3, [pc, #232]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	4a39      	ldr	r2, [pc, #228]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007922:	6413      	str	r3, [r2, #64]	; 0x40
 8007924:	4b37      	ldr	r3, [pc, #220]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800792c:	60bb      	str	r3, [r7, #8]
 800792e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007930:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a34      	ldr	r2, [pc, #208]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800793a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793c:	f7fb ffc0 	bl	80038c0 <HAL_GetTick>
 8007940:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007944:	f7fb ffbc 	bl	80038c0 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b64      	cmp	r3, #100	; 0x64
 8007950:	d901      	bls.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e355      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007956:	4b2c      	ldr	r3, [pc, #176]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0f0      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007962:	4b28      	ldr	r3, [pc, #160]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d035      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	429a      	cmp	r2, r3
 800797e:	d02e      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007980:	4b20      	ldr	r3, [pc, #128]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007988:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800798a:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	4a1d      	ldr	r2, [pc, #116]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007994:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007996:	4b1b      	ldr	r3, [pc, #108]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799a:	4a1a      	ldr	r2, [pc, #104]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800799c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079a2:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079a8:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d114      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fb ff84 	bl	80038c0 <HAL_GetTick>
 80079b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ba:	e00a      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079bc:	f7fb ff80 	bl	80038c0 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e317      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0ee      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ea:	d111      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079fa:	400b      	ands	r3, r1
 80079fc:	4901      	ldr	r1, [pc, #4]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	608b      	str	r3, [r1, #8]
 8007a02:	e00b      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a04:	40023800 	.word	0x40023800
 8007a08:	40007000 	.word	0x40007000
 8007a0c:	0ffffcff 	.word	0x0ffffcff
 8007a10:	4bb0      	ldr	r3, [pc, #704]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	4aaf      	ldr	r2, [pc, #700]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a1a:	6093      	str	r3, [r2, #8]
 8007a1c:	4bad      	ldr	r3, [pc, #692]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	49aa      	ldr	r1, [pc, #680]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0310 	and.w	r3, r3, #16
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d010      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a3a:	4ba6      	ldr	r3, [pc, #664]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a40:	4aa4      	ldr	r2, [pc, #656]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007a4a:	4ba2      	ldr	r3, [pc, #648]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	499f      	ldr	r1, [pc, #636]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a68:	4b9a      	ldr	r3, [pc, #616]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a76:	4997      	ldr	r1, [pc, #604]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a8a:	4b92      	ldr	r3, [pc, #584]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a98:	498e      	ldr	r1, [pc, #568]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007aac:	4b89      	ldr	r3, [pc, #548]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aba:	4986      	ldr	r1, [pc, #536]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ace:	4b81      	ldr	r3, [pc, #516]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007adc:	497d      	ldr	r1, [pc, #500]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007af0:	4b78      	ldr	r3, [pc, #480]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af6:	f023 0203 	bic.w	r2, r3, #3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	4975      	ldr	r1, [pc, #468]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b12:	4b70      	ldr	r3, [pc, #448]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f023 020c 	bic.w	r2, r3, #12
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b20:	496c      	ldr	r1, [pc, #432]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b34:	4b67      	ldr	r3, [pc, #412]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b42:	4964      	ldr	r1, [pc, #400]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b56:	4b5f      	ldr	r3, [pc, #380]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b64:	495b      	ldr	r1, [pc, #364]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b78:	4b56      	ldr	r3, [pc, #344]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b86:	4953      	ldr	r1, [pc, #332]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b9a:	4b4e      	ldr	r3, [pc, #312]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	494a      	ldr	r1, [pc, #296]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007bbc:	4b45      	ldr	r3, [pc, #276]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bca:	4942      	ldr	r1, [pc, #264]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007bde:	4b3d      	ldr	r3, [pc, #244]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bec:	4939      	ldr	r1, [pc, #228]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c00:	4b34      	ldr	r3, [pc, #208]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c0e:	4931      	ldr	r1, [pc, #196]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d011      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c22:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c30:	4928      	ldr	r1, [pc, #160]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c40:	d101      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c42:	2301      	movs	r3, #1
 8007c44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c52:	2301      	movs	r3, #1
 8007c54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c62:	4b1c      	ldr	r3, [pc, #112]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c70:	4918      	ldr	r1, [pc, #96]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00b      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c84:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c94:	490f      	ldr	r1, [pc, #60]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d005      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007caa:	f040 80d8 	bne.w	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a08      	ldr	r2, [pc, #32]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cba:	f7fb fe01 	bl	80038c0 <HAL_GetTick>
 8007cbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cc0:	e00a      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cc2:	f7fb fdfd 	bl	80038c0 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b64      	cmp	r3, #100	; 0x64
 8007cce:	d903      	bls.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e196      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007cd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cd8:	4b6c      	ldr	r3, [pc, #432]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1ee      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d021      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d11d      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007cf8:	4b64      	ldr	r3, [pc, #400]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfe:	0c1b      	lsrs	r3, r3, #16
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d06:	4b61      	ldr	r3, [pc, #388]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d0c:	0e1b      	lsrs	r3, r3, #24
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	019a      	lsls	r2, r3, #6
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	061b      	lsls	r3, r3, #24
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	071b      	lsls	r3, r3, #28
 8007d2c:	4957      	ldr	r1, [pc, #348]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d02e      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d5e:	d129      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d60:	4b4a      	ldr	r3, [pc, #296]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d66:	0c1b      	lsrs	r3, r3, #16
 8007d68:	f003 0303 	and.w	r3, r3, #3
 8007d6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d6e:	4b47      	ldr	r3, [pc, #284]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d74:	0f1b      	lsrs	r3, r3, #28
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	019a      	lsls	r2, r3, #6
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	041b      	lsls	r3, r3, #16
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	061b      	lsls	r3, r3, #24
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	071b      	lsls	r3, r3, #28
 8007d94:	493d      	ldr	r1, [pc, #244]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d9c:	4b3b      	ldr	r3, [pc, #236]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da2:	f023 021f 	bic.w	r2, r3, #31
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	3b01      	subs	r3, #1
 8007dac:	4937      	ldr	r1, [pc, #220]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01d      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007dc0:	4b32      	ldr	r3, [pc, #200]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc6:	0e1b      	lsrs	r3, r3, #24
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dce:	4b2f      	ldr	r3, [pc, #188]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd4:	0f1b      	lsrs	r3, r3, #28
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	019a      	lsls	r2, r3, #6
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	431a      	orrs	r2, r3
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	061b      	lsls	r3, r3, #24
 8007dee:	431a      	orrs	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	071b      	lsls	r3, r3, #28
 8007df4:	4925      	ldr	r1, [pc, #148]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d011      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	019a      	lsls	r2, r3, #6
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	041b      	lsls	r3, r3, #16
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	061b      	lsls	r3, r3, #24
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	071b      	lsls	r3, r3, #28
 8007e24:	4919      	ldr	r1, [pc, #100]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e2c:	4b17      	ldr	r3, [pc, #92]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a16      	ldr	r2, [pc, #88]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e38:	f7fb fd42 	bl	80038c0 <HAL_GetTick>
 8007e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e3e:	e008      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e40:	f7fb fd3e 	bl	80038c0 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b64      	cmp	r3, #100	; 0x64
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e0d7      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e52:	4b0e      	ldr	r3, [pc, #56]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f0      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	f040 80cd 	bne.w	8008000 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e72:	f7fb fd25 	bl	80038c0 <HAL_GetTick>
 8007e76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e78:	e00a      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e7a:	f7fb fd21 	bl	80038c0 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b64      	cmp	r3, #100	; 0x64
 8007e86:	d903      	bls.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e0ba      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007e8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e90:	4b5e      	ldr	r3, [pc, #376]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9c:	d0ed      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d02e      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d12a      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ec6:	4b51      	ldr	r3, [pc, #324]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ecc:	0c1b      	lsrs	r3, r3, #16
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ed4:	4b4d      	ldr	r3, [pc, #308]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eda:	0f1b      	lsrs	r3, r3, #28
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	019a      	lsls	r2, r3, #6
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	041b      	lsls	r3, r3, #16
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	061b      	lsls	r3, r3, #24
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	071b      	lsls	r3, r3, #28
 8007efa:	4944      	ldr	r1, [pc, #272]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f02:	4b42      	ldr	r3, [pc, #264]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	3b01      	subs	r3, #1
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	493d      	ldr	r1, [pc, #244]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d022      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f30:	d11d      	bne.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f32:	4b36      	ldr	r3, [pc, #216]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f38:	0e1b      	lsrs	r3, r3, #24
 8007f3a:	f003 030f 	and.w	r3, r3, #15
 8007f3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f40:	4b32      	ldr	r3, [pc, #200]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f46:	0f1b      	lsrs	r3, r3, #28
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	019a      	lsls	r2, r3, #6
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	041b      	lsls	r3, r3, #16
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	061b      	lsls	r3, r3, #24
 8007f60:	431a      	orrs	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	071b      	lsls	r3, r3, #28
 8007f66:	4929      	ldr	r1, [pc, #164]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0308 	and.w	r3, r3, #8
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d028      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f80:	0e1b      	lsrs	r3, r3, #24
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f88:	4b20      	ldr	r3, [pc, #128]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	f003 0303 	and.w	r3, r3, #3
 8007f94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	019a      	lsls	r2, r3, #6
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	061b      	lsls	r3, r3, #24
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	071b      	lsls	r3, r3, #28
 8007fae:	4917      	ldr	r1, [pc, #92]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	4911      	ldr	r1, [pc, #68]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a0e      	ldr	r2, [pc, #56]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd8:	f7fb fc72 	bl	80038c0 <HAL_GetTick>
 8007fdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fde:	e008      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fe0:	f7fb fc6e 	bl	80038c0 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b64      	cmp	r3, #100	; 0x64
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e007      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ffe:	d1ef      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	40023800 	.word	0x40023800

08008010 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800802e:	f040 808c 	bne.w	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008032:	4b95      	ldr	r3, [pc, #596]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008038:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008040:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008048:	d07c      	beq.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008050:	d87d      	bhi.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800805e:	d039      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008060:	e075      	b.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008062:	4b89      	ldr	r3, [pc, #548]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d108      	bne.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800806e:	4b86      	ldr	r3, [pc, #536]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008076:	4a85      	ldr	r2, [pc, #532]	; (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008078:	fbb2 f3f3 	udiv	r3, r2, r3
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	e007      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008080:	4b81      	ldr	r3, [pc, #516]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008088:	4a81      	ldr	r2, [pc, #516]	; (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800808a:	fbb2 f3f3 	udiv	r3, r2, r3
 800808e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008090:	4b7d      	ldr	r3, [pc, #500]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008096:	0e1b      	lsrs	r3, r3, #24
 8008098:	f003 030f 	and.w	r3, r3, #15
 800809c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800809e:	4b7a      	ldr	r3, [pc, #488]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a4:	099b      	lsrs	r3, r3, #6
 80080a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	fb02 f203 	mul.w	r2, r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80080b8:	4b73      	ldr	r3, [pc, #460]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	f003 031f 	and.w	r3, r3, #31
 80080c4:	3301      	adds	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d0:	617b      	str	r3, [r7, #20]
        break;
 80080d2:	e03d      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080d4:	4b6c      	ldr	r3, [pc, #432]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d108      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080e0:	4b69      	ldr	r3, [pc, #420]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080e8:	4a68      	ldr	r2, [pc, #416]	; (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	e007      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080f2:	4b65      	ldr	r3, [pc, #404]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080fa:	4a65      	ldr	r2, [pc, #404]	; (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008100:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008102:	4b61      	ldr	r3, [pc, #388]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008108:	0e1b      	lsrs	r3, r3, #24
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008110:	4b5d      	ldr	r3, [pc, #372]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008116:	099b      	lsrs	r3, r3, #6
 8008118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	fb02 f203 	mul.w	r2, r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	fbb2 f3f3 	udiv	r3, r2, r3
 8008128:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800812a:	4b57      	ldr	r3, [pc, #348]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800812c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008140:	617b      	str	r3, [r7, #20]
        break;
 8008142:	e005      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008144:	4b53      	ldr	r3, [pc, #332]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008146:	617b      	str	r3, [r7, #20]
        break;
 8008148:	e002      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800814a:	bf00      	nop
 800814c:	e000      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800814e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008156:	f040 808c 	bne.w	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800815a:	4b4b      	ldr	r3, [pc, #300]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800815c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008160:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008168:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008170:	d07c      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008178:	d87d      	bhi.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d004      	beq.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008186:	d039      	beq.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008188:	e075      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800818a:	4b3f      	ldr	r3, [pc, #252]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d108      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008196:	4b3c      	ldr	r3, [pc, #240]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800819e:	4a3b      	ldr	r2, [pc, #236]	; (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80081a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	e007      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80081a8:	4b37      	ldr	r3, [pc, #220]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081b0:	4a37      	ldr	r2, [pc, #220]	; (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80081b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80081b8:	4b33      	ldr	r3, [pc, #204]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081be:	0e1b      	lsrs	r3, r3, #24
 80081c0:	f003 030f 	and.w	r3, r3, #15
 80081c4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80081c6:	4b30      	ldr	r3, [pc, #192]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081cc:	099b      	lsrs	r3, r3, #6
 80081ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	fb02 f203 	mul.w	r2, r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80081e0:	4b29      	ldr	r3, [pc, #164]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	3301      	adds	r3, #1
 80081ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	617b      	str	r3, [r7, #20]
        break;
 80081fa:	e03d      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081fc:	4b22      	ldr	r3, [pc, #136]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d108      	bne.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008208:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008210:	4a1e      	ldr	r2, [pc, #120]	; (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008212:	fbb2 f3f3 	udiv	r3, r2, r3
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	e007      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800821a:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008222:	4a1b      	ldr	r2, [pc, #108]	; (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800822a:	4b17      	ldr	r3, [pc, #92]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800822c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008230:	0e1b      	lsrs	r3, r3, #24
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008238:	4b13      	ldr	r3, [pc, #76]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800823a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800823e:	099b      	lsrs	r3, r3, #6
 8008240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	fb02 f203 	mul.w	r2, r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008250:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008252:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008258:	f003 031f 	and.w	r3, r3, #31
 800825c:	3301      	adds	r3, #1
 800825e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	fbb2 f3f3 	udiv	r3, r2, r3
 8008268:	617b      	str	r3, [r7, #20]
        break;
 800826a:	e005      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800826e:	617b      	str	r3, [r7, #20]
        break;
 8008270:	e002      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8008272:	bf00      	nop
 8008274:	e000      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8008276:	bf00      	nop

  return frequency;
 8008278:	697b      	ldr	r3, [r7, #20]
}
 800827a:	4618      	mov	r0, r3
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40023800 	.word	0x40023800
 800828c:	00f42400 	.word	0x00f42400
 8008290:	017d7840 	.word	0x017d7840
 8008294:	00bb8000 	.word	0x00bb8000

08008298 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e06b      	b.n	8008382 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	7f5b      	ldrb	r3, [r3, #29]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d105      	bne.n	80082c0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fa fd36 	bl	8002d2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	22ca      	movs	r2, #202	; 0xca
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2253      	movs	r2, #83	; 0x53
 80082d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fb00 	bl	80088dc <RTC_EnterInitMode>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d008      	beq.n	80082f4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	22ff      	movs	r2, #255	; 0xff
 80082e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2204      	movs	r2, #4
 80082ee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e046      	b.n	8008382 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6899      	ldr	r1, [r3, #8]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	4b23      	ldr	r3, [pc, #140]	; (800838c <HAL_RTC_Init+0xf4>)
 8008300:	400b      	ands	r3, r1
 8008302:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6899      	ldr	r1, [r3, #8]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	68d2      	ldr	r2, [r2, #12]
 800832a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6919      	ldr	r1, [r3, #16]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	041a      	lsls	r2, r3, #16
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800834e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0208 	bic.w	r2, r2, #8
 800835e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699a      	ldr	r2, [r3, #24]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	22ff      	movs	r2, #255	; 0xff
 8008378:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008380:	2300      	movs	r3, #0
  }
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	ff8fffbf 	.word	0xff8fffbf

08008390 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	7f1b      	ldrb	r3, [r3, #28]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_RTC_SetTime+0x1c>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e0a8      	b.n	80084fe <HAL_RTC_SetTime+0x16e>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2202      	movs	r2, #2
 80083b6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d126      	bne.n	800840c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d102      	bne.n	80083d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 faac 	bl	8008934 <RTC_ByteToBcd2>
 80083dc:	4603      	mov	r3, r0
 80083de:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 faa5 	bl	8008934 <RTC_ByteToBcd2>
 80083ea:	4603      	mov	r3, r0
 80083ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083ee:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	789b      	ldrb	r3, [r3, #2]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fa9d 	bl	8008934 <RTC_ByteToBcd2>
 80083fa:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	7b1b      	ldrb	r3, [r3, #12]
 8008404:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	e018      	b.n	800843e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800842c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008432:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	7b1b      	ldrb	r3, [r3, #12]
 8008438:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	22ca      	movs	r2, #202	; 0xca
 8008444:	625a      	str	r2, [r3, #36]	; 0x24
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2253      	movs	r2, #83	; 0x53
 800844c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 fa44 	bl	80088dc <RTC_EnterInitMode>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00b      	beq.n	8008472 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	22ff      	movs	r2, #255	; 0xff
 8008460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2204      	movs	r2, #4
 8008466:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e045      	b.n	80084fe <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	6979      	ldr	r1, [r7, #20]
 8008478:	4b23      	ldr	r3, [pc, #140]	; (8008508 <HAL_RTC_SetTime+0x178>)
 800847a:	400b      	ands	r3, r1
 800847c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800848c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6899      	ldr	r1, [r3, #8]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	431a      	orrs	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084b4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d111      	bne.n	80084e8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f9e1 	bl	800888c <HAL_RTC_WaitForSynchro>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	22ff      	movs	r2, #255	; 0xff
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2204      	movs	r2, #4
 80084dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e00a      	b.n	80084fe <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	22ff      	movs	r2, #255	; 0xff
 80084ee:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80084fc:	2300      	movs	r3, #0
  }
}
 80084fe:	4618      	mov	r0, r3
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	bd90      	pop	{r4, r7, pc}
 8008506:	bf00      	nop
 8008508:	007f7f7f 	.word	0x007f7f7f

0800850c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800850c:	b590      	push	{r4, r7, lr}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	7f1b      	ldrb	r3, [r3, #28]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_RTC_SetDate+0x1c>
 8008524:	2302      	movs	r3, #2
 8008526:	e092      	b.n	800864e <HAL_RTC_SetDate+0x142>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2202      	movs	r2, #2
 8008532:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10e      	bne.n	8008558 <HAL_RTC_SetDate+0x4c>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	f003 0310 	and.w	r3, r3, #16
 8008542:	2b00      	cmp	r3, #0
 8008544:	d008      	beq.n	8008558 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	f023 0310 	bic.w	r3, r3, #16
 800854e:	b2db      	uxtb	r3, r3
 8008550:	330a      	adds	r3, #10
 8008552:	b2da      	uxtb	r2, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d11c      	bne.n	8008598 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	78db      	ldrb	r3, [r3, #3]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 f9e6 	bl	8008934 <RTC_ByteToBcd2>
 8008568:	4603      	mov	r3, r0
 800856a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	785b      	ldrb	r3, [r3, #1]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f9df 	bl	8008934 <RTC_ByteToBcd2>
 8008576:	4603      	mov	r3, r0
 8008578:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800857a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	789b      	ldrb	r3, [r3, #2]
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f9d7 	bl	8008934 <RTC_ByteToBcd2>
 8008586:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008588:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008592:	4313      	orrs	r3, r2
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	e00e      	b.n	80085b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	78db      	ldrb	r3, [r3, #3]
 800859c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085a4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80085aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	22ca      	movs	r2, #202	; 0xca
 80085bc:	625a      	str	r2, [r3, #36]	; 0x24
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2253      	movs	r2, #83	; 0x53
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 f988 	bl	80088dc <RTC_EnterInitMode>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00b      	beq.n	80085ea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	22ff      	movs	r2, #255	; 0xff
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2204      	movs	r2, #4
 80085de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e031      	b.n	800864e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	6979      	ldr	r1, [r7, #20]
 80085f0:	4b19      	ldr	r3, [pc, #100]	; (8008658 <HAL_RTC_SetDate+0x14c>)
 80085f2:	400b      	ands	r3, r1
 80085f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008604:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d111      	bne.n	8008638 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f939 	bl	800888c <HAL_RTC_WaitForSynchro>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	22ff      	movs	r2, #255	; 0xff
 8008626:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2204      	movs	r2, #4
 800862c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e00a      	b.n	800864e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	22ff      	movs	r2, #255	; 0xff
 800863e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800864c:	2300      	movs	r3, #0
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	bd90      	pop	{r4, r7, pc}
 8008656:	bf00      	nop
 8008658:	00ffff3f 	.word	0x00ffff3f

0800865c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800865c:	b590      	push	{r4, r7, lr}
 800865e:	b089      	sub	sp, #36	; 0x24
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	61fb      	str	r3, [r7, #28]
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	7f1b      	ldrb	r3, [r3, #28]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_RTC_SetAlarm+0x24>
 800867c:	2302      	movs	r3, #2
 800867e:	e101      	b.n	8008884 <HAL_RTC_SetAlarm+0x228>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2202      	movs	r2, #2
 800868a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d137      	bne.n	8008702 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2200      	movs	r2, #0
 80086a4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f942 	bl	8008934 <RTC_ByteToBcd2>
 80086b0:	4603      	mov	r3, r0
 80086b2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	785b      	ldrb	r3, [r3, #1]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f93b 	bl	8008934 <RTC_ByteToBcd2>
 80086be:	4603      	mov	r3, r0
 80086c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086c2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	789b      	ldrb	r3, [r3, #2]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 f933 	bl	8008934 <RTC_ByteToBcd2>
 80086ce:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086d0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	7b1b      	ldrb	r3, [r3, #12]
 80086d8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086da:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f925 	bl	8008934 <RTC_ByteToBcd2>
 80086ea:	4603      	mov	r3, r0
 80086ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086ee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086fc:	4313      	orrs	r3, r2
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	e023      	b.n	800874a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008722:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008728:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	7b1b      	ldrb	r3, [r3, #12]
 800872e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008730:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008738:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800873a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008740:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008746:	4313      	orrs	r3, r2
 8008748:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	22ca      	movs	r2, #202	; 0xca
 800875c:	625a      	str	r2, [r3, #36]	; 0x24
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2253      	movs	r2, #83	; 0x53
 8008764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800876e:	d13f      	bne.n	80087f0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800877e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800878e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008790:	f7fb f896 	bl	80038c0 <HAL_GetTick>
 8008794:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008796:	e013      	b.n	80087c0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008798:	f7fb f892 	bl	80038c0 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087a6:	d90b      	bls.n	80087c0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	22ff      	movs	r2, #255	; 0xff
 80087ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2203      	movs	r2, #3
 80087b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e061      	b.n	8008884 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0e4      	beq.n	8008798 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ec:	609a      	str	r2, [r3, #8]
 80087ee:	e03e      	b.n	800886e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087fe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800880e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008810:	f7fb f856 	bl	80038c0 <HAL_GetTick>
 8008814:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008816:	e013      	b.n	8008840 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008818:	f7fb f852 	bl	80038c0 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008826:	d90b      	bls.n	8008840 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	22ff      	movs	r2, #255	; 0xff
 800882e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2203      	movs	r2, #3
 8008834:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e021      	b.n	8008884 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0e4      	beq.n	8008818 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800886c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	22ff      	movs	r2, #255	; 0xff
 8008874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3724      	adds	r7, #36	; 0x24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd90      	pop	{r4, r7, pc}

0800888c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088a8:	f7fb f80a 	bl	80038c0 <HAL_GetTick>
 80088ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088ae:	e009      	b.n	80088c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088b0:	f7fb f806 	bl	80038c0 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088be:	d901      	bls.n	80088c4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e007      	b.n	80088d4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0ee      	beq.n	80088b0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d119      	bne.n	800892a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295
 80088fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008900:	f7fa ffde 	bl	80038c0 <HAL_GetTick>
 8008904:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008906:	e009      	b.n	800891c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008908:	f7fa ffda 	bl	80038c0 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008916:	d901      	bls.n	800891c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e007      	b.n	800892c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0ee      	beq.n	8008908 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008942:	e005      	b.n	8008950 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	3b0a      	subs	r3, #10
 800894e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b09      	cmp	r3, #9
 8008954:	d8f6      	bhi.n	8008944 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	b2da      	uxtb	r2, r3
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	4313      	orrs	r3, r2
 8008962:	b2db      	uxtb	r3, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	7f1b      	ldrb	r3, [r3, #28]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008988:	2302      	movs	r3, #2
 800898a:	e03e      	b.n	8008a0a <HAL_RTCEx_SetTimeStamp+0x9a>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2201      	movs	r2, #1
 8008990:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2202      	movs	r2, #2
 8008996:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689a      	ldr	r2, [r3, #8]
 800899e:	4b1e      	ldr	r3, [pc, #120]	; (8008a18 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	22ca      	movs	r2, #202	; 0xca
 80089b2:	625a      	str	r2, [r3, #36]	; 0x24
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2253      	movs	r2, #83	; 0x53
 80089ba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0206 	bic.w	r2, r2, #6
 80089ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	430a      	orrs	r2, r1
 80089da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	22ff      	movs	r2, #255	; 0xff
 80089fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	fffff7f7 	.word	0xfffff7f7

08008a1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e14d      	b.n	8008cd6 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d106      	bne.n	8008a54 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7fa fd16 	bl	8003480 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f953 	bl	8008d08 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d00c      	beq.n	8008a84 <HAL_SAI_Init+0x68>
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d80d      	bhi.n	8008a8a <HAL_SAI_Init+0x6e>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <HAL_SAI_Init+0x5c>
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d003      	beq.n	8008a7e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008a76:	e008      	b.n	8008a8a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	61fb      	str	r3, [r7, #28]
      break;
 8008a7c:	e006      	b.n	8008a8c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008a7e:	2310      	movs	r3, #16
 8008a80:	61fb      	str	r3, [r7, #28]
      break;
 8008a82:	e003      	b.n	8008a8c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008a84:	2320      	movs	r3, #32
 8008a86:	61fb      	str	r3, [r7, #28]
      break;
 8008a88:	e000      	b.n	8008a8c <HAL_SAI_Init+0x70>
    break;
 8008a8a:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b03      	cmp	r3, #3
 8008a92:	d81e      	bhi.n	8008ad2 <HAL_SAI_Init+0xb6>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <HAL_SAI_Init+0x80>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008aad 	.word	0x08008aad
 8008aa0:	08008ab3 	.word	0x08008ab3
 8008aa4:	08008abb 	.word	0x08008abb
 8008aa8:	08008ac3 	.word	0x08008ac3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	617b      	str	r3, [r7, #20]
      }
      break;
 8008ab0:	e010      	b.n	8008ad4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ab6:	617b      	str	r3, [r7, #20]
      }
      break;
 8008ab8:	e00c      	b.n	8008ad4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008abe:	617b      	str	r3, [r7, #20]
      }
      break;
 8008ac0:	e008      	b.n	8008ad4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ac2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ac6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f043 0301 	orr.w	r3, r3, #1
 8008ace:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008ad0:	e000      	b.n	8008ad4 <HAL_SAI_Init+0xb8>
  default:
    break;
 8008ad2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a81      	ldr	r2, [pc, #516]	; (8008ce0 <HAL_SAI_Init+0x2c4>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d004      	beq.n	8008ae8 <HAL_SAI_Init+0xcc>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a80      	ldr	r2, [pc, #512]	; (8008ce4 <HAL_SAI_Init+0x2c8>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d103      	bne.n	8008af0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008ae8:	4a7f      	ldr	r2, [pc, #508]	; (8008ce8 <HAL_SAI_Init+0x2cc>)
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	e002      	b.n	8008af6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008af0:	4a7e      	ldr	r2, [pc, #504]	; (8008cec <HAL_SAI_Init+0x2d0>)
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d043      	beq.n	8008b86 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a76      	ldr	r2, [pc, #472]	; (8008ce0 <HAL_SAI_Init+0x2c4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d004      	beq.n	8008b16 <HAL_SAI_Init+0xfa>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a74      	ldr	r2, [pc, #464]	; (8008ce4 <HAL_SAI_Init+0x2c8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d104      	bne.n	8008b20 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b16:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b1a:	f7ff fa79 	bl	8008010 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b1e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a72      	ldr	r2, [pc, #456]	; (8008cf0 <HAL_SAI_Init+0x2d4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d004      	beq.n	8008b34 <HAL_SAI_Init+0x118>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a71      	ldr	r2, [pc, #452]	; (8008cf4 <HAL_SAI_Init+0x2d8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d104      	bne.n	8008b3e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b38:	f7ff fa6a 	bl	8008010 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b3c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	461a      	mov	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	025b      	lsls	r3, r3, #9
 8008b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b54:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4a67      	ldr	r2, [pc, #412]	; (8008cf8 <HAL_SAI_Init+0x2dc>)
 8008b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5e:	08da      	lsrs	r2, r3, #3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008b64:	68f9      	ldr	r1, [r7, #12]
 8008b66:	4b64      	ldr	r3, [pc, #400]	; (8008cf8 <HAL_SAI_Init+0x2dc>)
 8008b68:	fba3 2301 	umull	r2, r3, r3, r1
 8008b6c:	08da      	lsrs	r2, r3, #3
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	1aca      	subs	r2, r1, r3
 8008b78:	2a08      	cmp	r2, #8
 8008b7a:	d904      	bls.n	8008b86 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <HAL_SAI_Init+0x17a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d109      	bne.n	8008baa <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_SAI_Init+0x186>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e001      	b.n	8008ba6 <HAL_SAI_Init+0x18a>
 8008ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ba6:	61bb      	str	r3, [r7, #24]
 8008ba8:	e008      	b.n	8008bbc <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d102      	bne.n	8008bb8 <HAL_SAI_Init+0x19c>
 8008bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bb6:	e000      	b.n	8008bba <HAL_SAI_Init+0x19e>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4b4d      	ldr	r3, [pc, #308]	; (8008cfc <HAL_SAI_Init+0x2e0>)
 8008bc8:	400b      	ands	r3, r1
 8008bca:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6819      	ldr	r1, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008be0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	431a      	orrs	r2, r3
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008bf4:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c00:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	051b      	lsls	r3, r3, #20
 8008c08:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6859      	ldr	r1, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	4b38      	ldr	r3, [pc, #224]	; (8008d00 <HAL_SAI_Init+0x2e4>)
 8008c1e:	400b      	ands	r3, r1
 8008c20:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6859      	ldr	r1, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	699a      	ldr	r2, [r3, #24]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6899      	ldr	r1, [r3, #8]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b2e      	ldr	r3, [pc, #184]	; (8008d04 <HAL_SAI_Init+0x2e8>)
 8008c4c:	400b      	ands	r3, r1
 8008c4e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6899      	ldr	r1, [r3, #8]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008c60:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008c66:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008c6c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c72:	3b01      	subs	r3, #1
 8008c74:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008c76:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68d9      	ldr	r1, [r3, #12]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008c8e:	400b      	ands	r3, r1
 8008c90:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68d9      	ldr	r1, [r3, #12]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca6:	041b      	lsls	r3, r3, #16
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3720      	adds	r7, #32
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	40015804 	.word	0x40015804
 8008ce4:	40015824 	.word	0x40015824
 8008ce8:	40015800 	.word	0x40015800
 8008cec:	40015c00 	.word	0x40015c00
 8008cf0:	40015c04 	.word	0x40015c04
 8008cf4:	40015c24 	.word	0x40015c24
 8008cf8:	cccccccd 	.word	0xcccccccd
 8008cfc:	ff05c010 	.word	0xff05c010
 8008d00:	ffff1ff0 	.word	0xffff1ff0
 8008d04:	fff88000 	.word	0xfff88000

08008d08 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d08:	b490      	push	{r4, r7}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008d10:	4b16      	ldr	r3, [pc, #88]	; (8008d6c <SAI_Disable+0x64>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <SAI_Disable+0x68>)
 8008d16:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1a:	0b1b      	lsrs	r3, r3, #12
 8008d1c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d30:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008d32:	4623      	mov	r3, r4
 8008d34:	1e5c      	subs	r4, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d4e:	e006      	b.n	8008d5e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e9      	bne.n	8008d32 <SAI_Disable+0x2a>

  return status;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc90      	pop	{r4, r7}
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	20000018 	.word	0x20000018
 8008d70:	95cbec1b 	.word	0x95cbec1b

08008d74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e022      	b.n	8008dcc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d105      	bne.n	8008d9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7f9 ffe1 	bl	8002d60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2203      	movs	r2, #3
 8008da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f814 	bl	8008dd4 <HAL_SD_InitCard>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e00a      	b.n	8008dcc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dd4:	b5b0      	push	{r4, r5, r7, lr}
 8008dd6:	b08e      	sub	sp, #56	; 0x38
 8008dd8:	af04      	add	r7, sp, #16
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008de4:	2300      	movs	r3, #0
 8008de6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008df0:	2376      	movs	r3, #118	; 0x76
 8008df2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681d      	ldr	r5, [r3, #0]
 8008df8:	466c      	mov	r4, sp
 8008dfa:	f107 0314 	add.w	r3, r7, #20
 8008dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f002 ff5d 	bl	800bccc <SDMMC_Init>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e03b      	b.n	8008e9c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e32:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f002 ff80 	bl	800bd3e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e4c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fde4 	bl	8009a1c <SD_PowerON>
 8008e54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e013      	b.n	8008e9c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fd05 	bl	8009884 <SD_InitCard>
 8008e7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3728      	adds	r7, #40	; 0x28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bdb0      	pop	{r4, r5, r7, pc}

08008ea4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08c      	sub	sp, #48	; 0x30
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d107      	bne.n	8008ecc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0cc      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	f040 80c5 	bne.w	8009064 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	441a      	add	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d907      	bls.n	8008efe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e0b3      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2203      	movs	r2, #3
 8008f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	4a53      	ldr	r2, [pc, #332]	; (8009070 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	4a52      	ldr	r2, [pc, #328]	; (8009074 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008f2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	2200      	movs	r2, #0
 8008f34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3380      	adds	r3, #128	; 0x80
 8008f40:	4619      	mov	r1, r3
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	025b      	lsls	r3, r3, #9
 8008f48:	089b      	lsrs	r3, r3, #2
 8008f4a:	f7fb ff71 	bl	8004e30 <HAL_DMA_Start_IT>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d017      	beq.n	8008f84 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008f62:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a43      	ldr	r2, [pc, #268]	; (8009078 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e070      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0208 	orr.w	r2, r2, #8
 8008f92:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d002      	beq.n	8008fa2 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	025b      	lsls	r3, r3, #9
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008faa:	4618      	mov	r0, r3
 8008fac:	f002 ff5a 	bl	800be64 <SDMMC_CmdBlockLength>
 8008fb0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00f      	beq.n	8008fd8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a2e      	ldr	r2, [pc, #184]	; (8009078 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e046      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fdc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	025b      	lsls	r3, r3, #9
 8008fe2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008fe4:	2390      	movs	r3, #144	; 0x90
 8008fe6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f107 0210 	add.w	r2, r7, #16
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f002 ff04 	bl	800be0c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d90a      	bls.n	8009020 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2282      	movs	r2, #130	; 0x82
 800900e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009016:	4618      	mov	r0, r3
 8009018:	f002 ff68 	bl	800beec <SDMMC_CmdReadMultiBlock>
 800901c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800901e:	e009      	b.n	8009034 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2281      	movs	r2, #129	; 0x81
 8009024:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800902c:	4618      	mov	r0, r3
 800902e:	f002 ff3b 	bl	800bea8 <SDMMC_CmdReadSingleBlock>
 8009032:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d012      	beq.n	8009060 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a0e      	ldr	r2, [pc, #56]	; (8009078 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8009040:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	431a      	orrs	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e002      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	e000      	b.n	8009066 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8009064:	2302      	movs	r3, #2
  }
}
 8009066:	4618      	mov	r0, r3
 8009068:	3730      	adds	r7, #48	; 0x30
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	0800976f 	.word	0x0800976f
 8009074:	080097e1 	.word	0x080097e1
 8009078:	004005ff 	.word	0x004005ff

0800907c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08c      	sub	sp, #48	; 0x30
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e0cf      	b.n	8009244 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	f040 80c8 	bne.w	8009242 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	441a      	add	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d907      	bls.n	80090d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e0b6      	b.n	8009244 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2203      	movs	r2, #3
 80090da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2200      	movs	r2, #0
 80090e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f042 021a 	orr.w	r2, r2, #26
 80090f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fa:	4a54      	ldr	r2, [pc, #336]	; (800924c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80090fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	4a53      	ldr	r2, [pc, #332]	; (8009250 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009104:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910a:	2200      	movs	r2, #0
 800910c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009112:	2b01      	cmp	r3, #1
 8009114:	d002      	beq.n	800911c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	025b      	lsls	r3, r3, #9
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009124:	4618      	mov	r0, r3
 8009126:	f002 fe9d 	bl	800be64 <SDMMC_CmdBlockLength>
 800912a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00f      	beq.n	8009152 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a47      	ldr	r2, [pc, #284]	; (8009254 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009138:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	431a      	orrs	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e078      	b.n	8009244 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d90a      	bls.n	800916e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	22a0      	movs	r2, #160	; 0xa0
 800915c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009164:	4618      	mov	r0, r3
 8009166:	f002 ff05 	bl	800bf74 <SDMMC_CmdWriteMultiBlock>
 800916a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800916c:	e009      	b.n	8009182 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2290      	movs	r2, #144	; 0x90
 8009172:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800917a:	4618      	mov	r0, r3
 800917c:	f002 fed8 	bl	800bf30 <SDMMC_CmdWriteSingleBlock>
 8009180:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d012      	beq.n	80091ae <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a31      	ldr	r2, [pc, #196]	; (8009254 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	431a      	orrs	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e04a      	b.n	8009244 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0208 	orr.w	r2, r2, #8
 80091bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3380      	adds	r3, #128	; 0x80
 80091ca:	461a      	mov	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	025b      	lsls	r3, r3, #9
 80091d0:	089b      	lsrs	r3, r3, #2
 80091d2:	f7fb fe2d 	bl	8004e30 <HAL_DMA_Start_IT>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01a      	beq.n	8009212 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 021a 	bic.w	r2, r2, #26
 80091ea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a18      	ldr	r2, [pc, #96]	; (8009254 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80091f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e018      	b.n	8009244 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009212:	f04f 33ff 	mov.w	r3, #4294967295
 8009216:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	025b      	lsls	r3, r3, #9
 800921c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800921e:	2390      	movs	r3, #144	; 0x90
 8009220:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009222:	2300      	movs	r3, #0
 8009224:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009226:	2300      	movs	r3, #0
 8009228:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800922a:	2301      	movs	r3, #1
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f107 0210 	add.w	r2, r7, #16
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f002 fde7 	bl	800be0c <SDMMC_ConfigData>

      return HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	e000      	b.n	8009244 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009242:	2302      	movs	r3, #2
  }
}
 8009244:	4618      	mov	r0, r3
 8009246:	3730      	adds	r7, #48	; 0x30
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	08009745 	.word	0x08009745
 8009250:	080097e1 	.word	0x080097e1
 8009254:	004005ff 	.word	0x004005ff

08009258 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800927a:	0f9b      	lsrs	r3, r3, #30
 800927c:	b2da      	uxtb	r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009286:	0e9b      	lsrs	r3, r3, #26
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	b2da      	uxtb	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009298:	0e1b      	lsrs	r3, r3, #24
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 0303 	and.w	r3, r3, #3
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092aa:	0c1b      	lsrs	r3, r3, #16
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092cc:	0d1b      	lsrs	r3, r3, #20
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d8:	0c1b      	lsrs	r3, r3, #16
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	f003 030f 	and.w	r3, r3, #15
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ea:	0bdb      	lsrs	r3, r3, #15
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092fc:	0b9b      	lsrs	r3, r3, #14
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	b2da      	uxtb	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800930e:	0b5b      	lsrs	r3, r3, #13
 8009310:	b2db      	uxtb	r3, r3
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009320:	0b1b      	lsrs	r3, r3, #12
 8009322:	b2db      	uxtb	r3, r3
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	b2da      	uxtb	r2, r3
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2200      	movs	r2, #0
 8009332:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009338:	2b00      	cmp	r3, #0
 800933a:	d163      	bne.n	8009404 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009340:	009a      	lsls	r2, r3, #2
 8009342:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009346:	4013      	ands	r3, r2
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800934c:	0f92      	lsrs	r2, r2, #30
 800934e:	431a      	orrs	r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009358:	0edb      	lsrs	r3, r3, #27
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	b2da      	uxtb	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800936a:	0e1b      	lsrs	r3, r3, #24
 800936c:	b2db      	uxtb	r3, r3
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	b2da      	uxtb	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800937c:	0d5b      	lsrs	r3, r3, #21
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938e:	0c9b      	lsrs	r3, r3, #18
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a0:	0bdb      	lsrs	r3, r3, #15
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0307 	and.w	r3, r3, #7
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	7e1b      	ldrb	r3, [r3, #24]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0307 	and.w	r3, r3, #7
 80093c2:	3302      	adds	r3, #2
 80093c4:	2201      	movs	r2, #1
 80093c6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80093ce:	fb02 f203 	mul.w	r2, r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	7a1b      	ldrb	r3, [r3, #8]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	2201      	movs	r2, #1
 80093e2:	409a      	lsls	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80093f0:	0a52      	lsrs	r2, r2, #9
 80093f2:	fb02 f203 	mul.w	r2, r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009400:	661a      	str	r2, [r3, #96]	; 0x60
 8009402:	e031      	b.n	8009468 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009408:	2b01      	cmp	r3, #1
 800940a:	d11d      	bne.n	8009448 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009410:	041b      	lsls	r3, r3, #16
 8009412:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800941a:	0c1b      	lsrs	r3, r3, #16
 800941c:	431a      	orrs	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	3301      	adds	r3, #1
 8009428:	029a      	lsls	r2, r3, #10
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800943c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	661a      	str	r2, [r3, #96]	; 0x60
 8009446:	e00f      	b.n	8009468 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a58      	ldr	r2, [pc, #352]	; (80095b0 <HAL_SD_GetCardCSD+0x344>)
 800944e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e09d      	b.n	80095a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800946c:	0b9b      	lsrs	r3, r3, #14
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	b2da      	uxtb	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800947e:	09db      	lsrs	r3, r3, #7
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009486:	b2da      	uxtb	r2, r3
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009496:	b2da      	uxtb	r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a0:	0fdb      	lsrs	r3, r3, #31
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ac:	0f5b      	lsrs	r3, r3, #29
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	f003 0303 	and.w	r3, r3, #3
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094be:	0e9b      	lsrs	r3, r3, #26
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d0:	0d9b      	lsrs	r3, r3, #22
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f003 030f 	and.w	r3, r3, #15
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e2:	0d5b      	lsrs	r3, r3, #21
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fe:	0c1b      	lsrs	r3, r3, #16
 8009500:	b2db      	uxtb	r3, r3
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	b2da      	uxtb	r2, r3
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009512:	0bdb      	lsrs	r3, r3, #15
 8009514:	b2db      	uxtb	r3, r3
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	b2da      	uxtb	r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009526:	0b9b      	lsrs	r3, r3, #14
 8009528:	b2db      	uxtb	r3, r3
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	b2da      	uxtb	r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	0b5b      	lsrs	r3, r3, #13
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	b2da      	uxtb	r2, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954e:	0b1b      	lsrs	r3, r3, #12
 8009550:	b2db      	uxtb	r3, r3
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	b2da      	uxtb	r2, r3
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009562:	0a9b      	lsrs	r3, r3, #10
 8009564:	b2db      	uxtb	r3, r3
 8009566:	f003 0303 	and.w	r3, r3, #3
 800956a:	b2da      	uxtb	r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009576:	0a1b      	lsrs	r3, r3, #8
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	b2da      	uxtb	r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009592:	b2da      	uxtb	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	004005ff 	.word	0x004005ff

080095b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800960c:	b5b0      	push	{r4, r5, r7, lr}
 800960e:	b08e      	sub	sp, #56	; 0x38
 8009610:	af04      	add	r7, sp, #16
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2203      	movs	r2, #3
 800961a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009622:	2b03      	cmp	r3, #3
 8009624:	d02e      	beq.n	8009684 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962c:	d106      	bne.n	800963c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009632:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	639a      	str	r2, [r3, #56]	; 0x38
 800963a:	e029      	b.n	8009690 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009642:	d10a      	bne.n	800965a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fa9f 	bl	8009b88 <SD_WideBus_Enable>
 800964a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	431a      	orrs	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	639a      	str	r2, [r3, #56]	; 0x38
 8009658:	e01a      	b.n	8009690 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fadc 	bl	8009c1e <SD_WideBus_Disable>
 8009666:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	639a      	str	r2, [r3, #56]	; 0x38
 8009674:	e00c      	b.n	8009690 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	639a      	str	r2, [r3, #56]	; 0x38
 8009682:	e005      	b.n	8009690 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009688:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	d009      	beq.n	80096ac <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a18      	ldr	r2, [pc, #96]	; (8009700 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800969e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e024      	b.n	80096f6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681d      	ldr	r5, [r3, #0]
 80096d2:	466c      	mov	r4, sp
 80096d4:	f107 0318 	add.w	r3, r7, #24
 80096d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096e0:	f107 030c 	add.w	r3, r7, #12
 80096e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096e6:	4628      	mov	r0, r5
 80096e8:	f002 faf0 	bl	800bccc <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3728      	adds	r7, #40	; 0x28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bdb0      	pop	{r4, r5, r7, pc}
 80096fe:	bf00      	nop
 8009700:	004005ff 	.word	0x004005ff

08009704 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009710:	f107 030c 	add.w	r3, r7, #12
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa0e 	bl	8009b38 <SD_SendStatus>
 800971c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	431a      	orrs	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	0a5b      	lsrs	r3, r3, #9
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800973a:	693b      	ldr	r3, [r7, #16]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009760:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	2b82      	cmp	r3, #130	; 0x82
 8009782:	d111      	bne.n	80097a8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4618      	mov	r0, r3
 800978a:	f002 fc15 	bl	800bfb8 <SDMMC_CmdStopTransfer>
 800978e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d008      	beq.n	80097a8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	431a      	orrs	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7ff fd58 	bl	8009258 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f022 0208 	bic.w	r2, r2, #8
 80097b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80097c0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f003 f85b 	bl	800c88c <HAL_SD_RxCpltCallback>
#endif
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7fb fb7e 	bl	8004ef0 <HAL_DMA_GetError>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d03e      	beq.n	8009878 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009800:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009808:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d002      	beq.n	8009816 <SD_DMAError+0x36>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d12d      	bne.n	8009872 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a19      	ldr	r2, [pc, #100]	; (8009880 <SD_DMAError+0xa0>)
 800981c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800982c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009832:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800983a:	6978      	ldr	r0, [r7, #20]
 800983c:	f7ff ff62 	bl	8009704 <HAL_SD_GetCardState>
 8009840:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b06      	cmp	r3, #6
 8009846:	d002      	beq.n	800984e <SD_DMAError+0x6e>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b05      	cmp	r3, #5
 800984c:	d10a      	bne.n	8009864 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f002 fbb0 	bl	800bfb8 <SDMMC_CmdStopTransfer>
 8009858:	4602      	mov	r2, r0
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	431a      	orrs	r2, r3
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2200      	movs	r2, #0
 8009870:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009872:	6978      	ldr	r0, [r7, #20]
 8009874:	f7ff fcf0 	bl	8009258 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009878:	bf00      	nop
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	004005ff 	.word	0x004005ff

08009884 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009884:	b5b0      	push	{r4, r5, r7, lr}
 8009886:	b094      	sub	sp, #80	; 0x50
 8009888:	af04      	add	r7, sp, #16
 800988a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800988c:	2301      	movs	r3, #1
 800988e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4618      	mov	r0, r3
 8009896:	f002 fa61 	bl	800bd5c <SDMMC_GetPowerState>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80098a4:	e0b6      	b.n	8009a14 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d02f      	beq.n	800990e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f002 fc8b 	bl	800c1ce <SDMMC_CmdSendCID>
 80098b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80098ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80098c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c2:	e0a7      	b.n	8009a14 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2100      	movs	r1, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f002 fa8b 	bl	800bde6 <SDMMC_GetResponse>
 80098d0:	4602      	mov	r2, r0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2104      	movs	r1, #4
 80098dc:	4618      	mov	r0, r3
 80098de:	f002 fa82 	bl	800bde6 <SDMMC_GetResponse>
 80098e2:	4602      	mov	r2, r0
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2108      	movs	r1, #8
 80098ee:	4618      	mov	r0, r3
 80098f0:	f002 fa79 	bl	800bde6 <SDMMC_GetResponse>
 80098f4:	4602      	mov	r2, r0
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	210c      	movs	r1, #12
 8009900:	4618      	mov	r0, r3
 8009902:	f002 fa70 	bl	800bde6 <SDMMC_GetResponse>
 8009906:	4602      	mov	r2, r0
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009912:	2b03      	cmp	r3, #3
 8009914:	d00d      	beq.n	8009932 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f107 020e 	add.w	r2, r7, #14
 800991e:	4611      	mov	r1, r2
 8009920:	4618      	mov	r0, r3
 8009922:	f002 fc91 	bl	800c248 <SDMMC_CmdSetRelAdd>
 8009926:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <SD_InitCard+0xae>
    {
      return errorstate;
 800992e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009930:	e070      	b.n	8009a14 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	2b03      	cmp	r3, #3
 8009938:	d036      	beq.n	80099a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800993a:	89fb      	ldrh	r3, [r7, #14]
 800993c:	461a      	mov	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800994a:	041b      	lsls	r3, r3, #16
 800994c:	4619      	mov	r1, r3
 800994e:	4610      	mov	r0, r2
 8009950:	f002 fc5b 	bl	800c20a <SDMMC_CmdSendCSD>
 8009954:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <SD_InitCard+0xdc>
    {
      return errorstate;
 800995c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995e:	e059      	b.n	8009a14 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2100      	movs	r1, #0
 8009966:	4618      	mov	r0, r3
 8009968:	f002 fa3d 	bl	800bde6 <SDMMC_GetResponse>
 800996c:	4602      	mov	r2, r0
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2104      	movs	r1, #4
 8009978:	4618      	mov	r0, r3
 800997a:	f002 fa34 	bl	800bde6 <SDMMC_GetResponse>
 800997e:	4602      	mov	r2, r0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2108      	movs	r1, #8
 800998a:	4618      	mov	r0, r3
 800998c:	f002 fa2b 	bl	800bde6 <SDMMC_GetResponse>
 8009990:	4602      	mov	r2, r0
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	210c      	movs	r1, #12
 800999c:	4618      	mov	r0, r3
 800999e:	f002 fa22 	bl	800bde6 <SDMMC_GetResponse>
 80099a2:	4602      	mov	r2, r0
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2104      	movs	r1, #4
 80099ae:	4618      	mov	r0, r3
 80099b0:	f002 fa19 	bl	800bde6 <SDMMC_GetResponse>
 80099b4:	4603      	mov	r3, r0
 80099b6:	0d1a      	lsrs	r2, r3, #20
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80099bc:	f107 0310 	add.w	r3, r7, #16
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff fc52 	bl	800926c <HAL_SD_GetCardCSD>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099d2:	e01f      	b.n	8009a14 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6819      	ldr	r1, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099dc:	041b      	lsls	r3, r3, #16
 80099de:	461a      	mov	r2, r3
 80099e0:	f04f 0300 	mov.w	r3, #0
 80099e4:	4608      	mov	r0, r1
 80099e6:	f002 fb09 	bl	800bffc <SDMMC_CmdSelDesel>
 80099ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80099ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <SD_InitCard+0x172>
  {
    return errorstate;
 80099f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f4:	e00e      	b.n	8009a14 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681d      	ldr	r5, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	466c      	mov	r4, sp
 80099fe:	f103 0210 	add.w	r2, r3, #16
 8009a02:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a08:	3304      	adds	r3, #4
 8009a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f002 f95d 	bl	800bccc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3740      	adds	r7, #64	; 0x40
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bdb0      	pop	{r4, r5, r7, pc}

08009a1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f002 fb04 	bl	800c042 <SDMMC_CmdGoIdleState>
 8009a3a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	e072      	b.n	8009b2c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f002 fb17 	bl	800c07e <SDMMC_CmdOperCond>
 8009a50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00d      	beq.n	8009a74 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f002 faed 	bl	800c042 <SDMMC_CmdGoIdleState>
 8009a68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d004      	beq.n	8009a7a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	e05b      	b.n	8009b2c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d137      	bne.n	8009af2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2100      	movs	r1, #0
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f002 fb17 	bl	800c0bc <SDMMC_CmdAppCommand>
 8009a8e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d02d      	beq.n	8009af2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a9a:	e047      	b.n	8009b2c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f002 fb0a 	bl	800c0bc <SDMMC_CmdAppCommand>
 8009aa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <SD_PowerON+0x98>
    {
      return errorstate;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	e03b      	b.n	8009b2c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	491e      	ldr	r1, [pc, #120]	; (8009b34 <SD_PowerON+0x118>)
 8009aba:	4618      	mov	r0, r3
 8009abc:	f002 fb20 	bl	800c100 <SDMMC_CmdAppOperCommand>
 8009ac0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ac8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009acc:	e02e      	b.n	8009b2c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 f986 	bl	800bde6 <SDMMC_GetResponse>
 8009ada:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	0fdb      	lsrs	r3, r3, #31
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <SD_PowerON+0xcc>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e000      	b.n	8009aea <SD_PowerON+0xce>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]

    count++;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d802      	bhi.n	8009b02 <SD_PowerON+0xe6>
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0cc      	beq.n	8009a9c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d902      	bls.n	8009b12 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b10:	e00c      	b.n	8009b2c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	645a      	str	r2, [r3, #68]	; 0x44
 8009b22:	e002      	b.n	8009b2a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	c1100000 	.word	0xc1100000

08009b38 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d102      	bne.n	8009b4e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b4c:	e018      	b.n	8009b80 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b56:	041b      	lsls	r3, r3, #16
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	f002 fb95 	bl	800c28a <SDMMC_CmdSendStatus>
 8009b60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	e009      	b.n	8009b80 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2100      	movs	r1, #0
 8009b72:	4618      	mov	r0, r3
 8009b74:	f002 f937 	bl	800bde6 <SDMMC_GetResponse>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009b90:	2300      	movs	r3, #0
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	2300      	movs	r3, #0
 8009b96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f002 f921 	bl	800bde6 <SDMMC_GetResponse>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bae:	d102      	bne.n	8009bb6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009bb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bb4:	e02f      	b.n	8009c16 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009bb6:	f107 030c 	add.w	r3, r7, #12
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f879 	bl	8009cb4 <SD_FindSCR>
 8009bc2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	e023      	b.n	8009c16 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d01c      	beq.n	8009c12 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be0:	041b      	lsls	r3, r3, #16
 8009be2:	4619      	mov	r1, r3
 8009be4:	4610      	mov	r0, r2
 8009be6:	f002 fa69 	bl	800c0bc <SDMMC_CmdAppCommand>
 8009bea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	e00f      	b.n	8009c16 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2102      	movs	r1, #2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f002 faa3 	bl	800c148 <SDMMC_CmdBusWidth>
 8009c02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	e003      	b.n	8009c16 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e001      	b.n	8009c16 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b086      	sub	sp, #24
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c26:	2300      	movs	r3, #0
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f002 f8d6 	bl	800bde6 <SDMMC_GetResponse>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c44:	d102      	bne.n	8009c4c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c4a:	e02f      	b.n	8009cac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c4c:	f107 030c 	add.w	r3, r7, #12
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f82e 	bl	8009cb4 <SD_FindSCR>
 8009c58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	e023      	b.n	8009cac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d01c      	beq.n	8009ca8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c76:	041b      	lsls	r3, r3, #16
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	f002 fa1e 	bl	800c0bc <SDMMC_CmdAppCommand>
 8009c80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	e00f      	b.n	8009cac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2100      	movs	r1, #0
 8009c92:	4618      	mov	r0, r3
 8009c94:	f002 fa58 	bl	800c148 <SDMMC_CmdBusWidth>
 8009c98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	e003      	b.n	8009cac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e001      	b.n	8009cac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ca8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009cb4:	b590      	push	{r4, r7, lr}
 8009cb6:	b08f      	sub	sp, #60	; 0x3c
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009cbe:	f7f9 fdff 	bl	80038c0 <HAL_GetTick>
 8009cc2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60bb      	str	r3, [r7, #8]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2108      	movs	r1, #8
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f002 f8c2 	bl	800be64 <SDMMC_CmdBlockLength>
 8009ce0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <SD_FindSCR+0x38>
  {
    return errorstate;
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	e0a9      	b.n	8009e40 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	f002 f9df 	bl	800c0bc <SDMMC_CmdAppCommand>
 8009cfe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	e09a      	b.n	8009e40 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009d10:	2308      	movs	r3, #8
 8009d12:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009d14:	2330      	movs	r3, #48	; 0x30
 8009d16:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d20:	2301      	movs	r3, #1
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f107 0210 	add.w	r2, r7, #16
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f002 f86c 	bl	800be0c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f002 fa27 	bl	800c18c <SDMMC_CmdSendSCR>
 8009d3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d022      	beq.n	8009d8c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d48:	e07a      	b.n	8009e40 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00e      	beq.n	8009d76 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6819      	ldr	r1, [r3, #0]
 8009d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	f107 0208 	add.w	r2, r7, #8
 8009d64:	18d4      	adds	r4, r2, r3
 8009d66:	4608      	mov	r0, r1
 8009d68:	f001 ffdc 	bl	800bd24 <SDMMC_ReadFIFO>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	6023      	str	r3, [r4, #0]
      index++;
 8009d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d72:	3301      	adds	r3, #1
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d76:	f7f9 fda3 	bl	80038c0 <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d84:	d102      	bne.n	8009d8c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d8a:	e059      	b.n	8009e40 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d92:	f240 432a 	movw	r3, #1066	; 0x42a
 8009d96:	4013      	ands	r3, r2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0d6      	beq.n	8009d4a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d005      	beq.n	8009db6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2208      	movs	r2, #8
 8009db0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009db2:	2308      	movs	r3, #8
 8009db4:	e044      	b.n	8009e40 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbc:	f003 0302 	and.w	r3, r3, #2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e037      	b.n	8009e40 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d005      	beq.n	8009dea <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2220      	movs	r2, #32
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009de6:	2320      	movs	r3, #32
 8009de8:	e02a      	b.n	8009e40 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f240 523a 	movw	r2, #1338	; 0x53a
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	061a      	lsls	r2, r3, #24
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	021b      	lsls	r3, r3, #8
 8009dfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	0a1b      	lsrs	r3, r3, #8
 8009e06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e0a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	0e1b      	lsrs	r3, r3, #24
 8009e10:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	601a      	str	r2, [r3, #0]
    scr++;
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e18:	3304      	adds	r3, #4
 8009e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	061a      	lsls	r2, r3, #24
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	021b      	lsls	r3, r3, #8
 8009e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	0a1b      	lsrs	r3, r3, #8
 8009e2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e32:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	0e1b      	lsrs	r3, r3, #24
 8009e38:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	373c      	adds	r7, #60	; 0x3c
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd90      	pop	{r4, r7, pc}

08009e48 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e025      	b.n	8009ea8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7f9 fafb 	bl	800346c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2202      	movs	r2, #2
 8009e7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4619      	mov	r1, r3
 8009e88:	4610      	mov	r0, r2
 8009e8a:	f001 fdf9 	bl	800ba80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	461a      	mov	r2, r3
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	f001 fe63 	bl	800bb64 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d101      	bne.n	8009ecc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e018      	b.n	8009efe <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fec1 	bl	800bc64 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d104      	bne.n	8009ef4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2205      	movs	r2, #5
 8009eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009ef2:	e003      	b.n	8009efc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d101      	bne.n	8009f20 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e00e      	b.n	8009f3e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2202      	movs	r2, #2
 8009f24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 feb9 	bl	800bca6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e04c      	b.n	8009ff4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7f8 ff58 	bl	8002e24 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0203 	bic.w	r2, r2, #3
 8009f8a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	4b19      	ldr	r3, [pc, #100]	; (8009ffc <HAL_SPDIFRX_Init+0xb4>)
 8009f98:	4013      	ands	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009fa4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009faa:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009fb0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009fb6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009fbc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009fc2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009fc8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009fce:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009fd4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	fff88407 	.word	0xfff88407

0800a000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e084      	b.n	800a11c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d106      	bne.n	800a032 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7f8 ff3b 	bl	8002ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2202      	movs	r2, #2
 800a036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a048:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a052:	d902      	bls.n	800a05a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e002      	b.n	800a060 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a05a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a05e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a068:	d007      	beq.n	800a07a <HAL_SPI_Init+0x7a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a072:	d002      	beq.n	800a07a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10b      	bne.n	800a09a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a08a:	d903      	bls.n	800a094 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	631a      	str	r2, [r3, #48]	; 0x30
 800a092:	e002      	b.n	800a09a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0b8:	431a      	orrs	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a1b      	ldr	r3, [r3, #32]
 800a0c4:	ea42 0103 	orr.w	r1, r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	430a      	orrs	r2, r1
 800a0d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	0c1b      	lsrs	r3, r3, #16
 800a0da:	f003 0204 	and.w	r2, r3, #4
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e8:	431a      	orrs	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	ea42 0103 	orr.w	r1, r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	69da      	ldr	r2, [r3, #28]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a10a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e01d      	b.n	800a172 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d106      	bne.n	800a150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7f8 ff0e 	bl	8002f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2202      	movs	r2, #2
 800a154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f000 fb84 	bl	800a870 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689a      	ldr	r2, [r3, #8]
 800a19a:	4b0c      	ldr	r3, [pc, #48]	; (800a1cc <HAL_TIM_Base_Start_IT+0x50>)
 800a19c:	4013      	ands	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b06      	cmp	r3, #6
 800a1a4:	d00b      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0x42>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ac:	d007      	beq.n	800a1be <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f042 0201 	orr.w	r2, r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	00010007 	.word	0x00010007

0800a1d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e01d      	b.n	800a21e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d106      	bne.n	800a1fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7f8 ff26 	bl	8003048 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2202      	movs	r2, #2
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3304      	adds	r3, #4
 800a20c:	4619      	mov	r1, r3
 800a20e:	4610      	mov	r0, r2
 800a210:	f000 fb2e 	bl	800a870 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d122      	bne.n	800a282 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b02      	cmp	r3, #2
 800a248:	d11b      	bne.n	800a282 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f06f 0202 	mvn.w	r2, #2
 800a252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fae3 	bl	800a834 <HAL_TIM_IC_CaptureCallback>
 800a26e:	e005      	b.n	800a27c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fad5 	bl	800a820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fae6 	bl	800a848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d122      	bne.n	800a2d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f003 0304 	and.w	r3, r3, #4
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d11b      	bne.n	800a2d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f06f 0204 	mvn.w	r2, #4
 800a2a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fab9 	bl	800a834 <HAL_TIM_IC_CaptureCallback>
 800a2c2:	e005      	b.n	800a2d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 faab 	bl	800a820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fabc 	bl	800a848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	f003 0308 	and.w	r3, r3, #8
 800a2e0:	2b08      	cmp	r3, #8
 800a2e2:	d122      	bne.n	800a32a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f003 0308 	and.w	r3, r3, #8
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d11b      	bne.n	800a32a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f06f 0208 	mvn.w	r2, #8
 800a2fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2204      	movs	r2, #4
 800a300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	f003 0303 	and.w	r3, r3, #3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fa8f 	bl	800a834 <HAL_TIM_IC_CaptureCallback>
 800a316:	e005      	b.n	800a324 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fa81 	bl	800a820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa92 	bl	800a848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	f003 0310 	and.w	r3, r3, #16
 800a334:	2b10      	cmp	r3, #16
 800a336:	d122      	bne.n	800a37e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f003 0310 	and.w	r3, r3, #16
 800a342:	2b10      	cmp	r3, #16
 800a344:	d11b      	bne.n	800a37e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f06f 0210 	mvn.w	r2, #16
 800a34e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2208      	movs	r2, #8
 800a354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fa65 	bl	800a834 <HAL_TIM_IC_CaptureCallback>
 800a36a:	e005      	b.n	800a378 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa57 	bl	800a820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa68 	bl	800a848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	f003 0301 	and.w	r3, r3, #1
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d10e      	bne.n	800a3aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b01      	cmp	r3, #1
 800a398:	d107      	bne.n	800a3aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f06f 0201 	mvn.w	r2, #1
 800a3a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7f8 f963 	bl	8002670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b4:	2b80      	cmp	r3, #128	; 0x80
 800a3b6:	d10e      	bne.n	800a3d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c2:	2b80      	cmp	r3, #128	; 0x80
 800a3c4:	d107      	bne.n	800a3d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fefb 	bl	800b1cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3e4:	d10e      	bne.n	800a404 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f0:	2b80      	cmp	r3, #128	; 0x80
 800a3f2:	d107      	bne.n	800a404 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 feee 	bl	800b1e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40e:	2b40      	cmp	r3, #64	; 0x40
 800a410:	d10e      	bne.n	800a430 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41c:	2b40      	cmp	r3, #64	; 0x40
 800a41e:	d107      	bne.n	800a430 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fa16 	bl	800a85c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b20      	cmp	r3, #32
 800a43c:	d10e      	bne.n	800a45c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f003 0320 	and.w	r3, r3, #32
 800a448:	2b20      	cmp	r3, #32
 800a44a:	d107      	bne.n	800a45c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f06f 0220 	mvn.w	r2, #32
 800a454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 feae 	bl	800b1b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a476:	2b01      	cmp	r3, #1
 800a478:	d101      	bne.n	800a47e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e105      	b.n	800a68a <HAL_TIM_PWM_ConfigChannel+0x226>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2202      	movs	r2, #2
 800a48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b14      	cmp	r3, #20
 800a492:	f200 80f0 	bhi.w	800a676 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a496:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a4f1 	.word	0x0800a4f1
 800a4a0:	0800a677 	.word	0x0800a677
 800a4a4:	0800a677 	.word	0x0800a677
 800a4a8:	0800a677 	.word	0x0800a677
 800a4ac:	0800a531 	.word	0x0800a531
 800a4b0:	0800a677 	.word	0x0800a677
 800a4b4:	0800a677 	.word	0x0800a677
 800a4b8:	0800a677 	.word	0x0800a677
 800a4bc:	0800a573 	.word	0x0800a573
 800a4c0:	0800a677 	.word	0x0800a677
 800a4c4:	0800a677 	.word	0x0800a677
 800a4c8:	0800a677 	.word	0x0800a677
 800a4cc:	0800a5b3 	.word	0x0800a5b3
 800a4d0:	0800a677 	.word	0x0800a677
 800a4d4:	0800a677 	.word	0x0800a677
 800a4d8:	0800a677 	.word	0x0800a677
 800a4dc:	0800a5f5 	.word	0x0800a5f5
 800a4e0:	0800a677 	.word	0x0800a677
 800a4e4:	0800a677 	.word	0x0800a677
 800a4e8:	0800a677 	.word	0x0800a677
 800a4ec:	0800a635 	.word	0x0800a635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68b9      	ldr	r1, [r7, #8]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fa5a 	bl	800a9b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	699a      	ldr	r2, [r3, #24]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0208 	orr.w	r2, r2, #8
 800a50a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f022 0204 	bic.w	r2, r2, #4
 800a51a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6999      	ldr	r1, [r3, #24]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	691a      	ldr	r2, [r3, #16]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	619a      	str	r2, [r3, #24]
      break;
 800a52e:	e0a3      	b.n	800a678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68b9      	ldr	r1, [r7, #8]
 800a536:	4618      	mov	r0, r3
 800a538:	f000 faac 	bl	800aa94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a54a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	699a      	ldr	r2, [r3, #24]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a55a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6999      	ldr	r1, [r3, #24]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	021a      	lsls	r2, r3, #8
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	619a      	str	r2, [r3, #24]
      break;
 800a570:	e082      	b.n	800a678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 fb03 	bl	800ab84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	69da      	ldr	r2, [r3, #28]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0208 	orr.w	r2, r2, #8
 800a58c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	69da      	ldr	r2, [r3, #28]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0204 	bic.w	r2, r2, #4
 800a59c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69d9      	ldr	r1, [r3, #28]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	691a      	ldr	r2, [r3, #16]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	61da      	str	r2, [r3, #28]
      break;
 800a5b0:	e062      	b.n	800a678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fb59 	bl	800ac70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69da      	ldr	r2, [r3, #28]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69da      	ldr	r2, [r3, #28]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69d9      	ldr	r1, [r3, #28]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	021a      	lsls	r2, r3, #8
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	61da      	str	r2, [r3, #28]
      break;
 800a5f2:	e041      	b.n	800a678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 fb90 	bl	800ad20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0208 	orr.w	r2, r2, #8
 800a60e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0204 	bic.w	r2, r2, #4
 800a61e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	691a      	ldr	r2, [r3, #16]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	430a      	orrs	r2, r1
 800a630:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a632:	e021      	b.n	800a678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 fbc2 	bl	800adc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a64e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a65e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	021a      	lsls	r2, r3, #8
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	430a      	orrs	r2, r1
 800a672:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a674:	e000      	b.n	800a678 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a676:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop

0800a694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_TIM_ConfigClockSource+0x18>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e0b3      	b.n	800a814 <HAL_TIM_ConfigClockSource+0x180>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4b55      	ldr	r3, [pc, #340]	; (800a81c <HAL_TIM_ConfigClockSource+0x188>)
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e4:	d03e      	beq.n	800a764 <HAL_TIM_ConfigClockSource+0xd0>
 800a6e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ea:	f200 8087 	bhi.w	800a7fc <HAL_TIM_ConfigClockSource+0x168>
 800a6ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f2:	f000 8085 	beq.w	800a800 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6fa:	d87f      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x168>
 800a6fc:	2b70      	cmp	r3, #112	; 0x70
 800a6fe:	d01a      	beq.n	800a736 <HAL_TIM_ConfigClockSource+0xa2>
 800a700:	2b70      	cmp	r3, #112	; 0x70
 800a702:	d87b      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x168>
 800a704:	2b60      	cmp	r3, #96	; 0x60
 800a706:	d050      	beq.n	800a7aa <HAL_TIM_ConfigClockSource+0x116>
 800a708:	2b60      	cmp	r3, #96	; 0x60
 800a70a:	d877      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x168>
 800a70c:	2b50      	cmp	r3, #80	; 0x50
 800a70e:	d03c      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0xf6>
 800a710:	2b50      	cmp	r3, #80	; 0x50
 800a712:	d873      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x168>
 800a714:	2b40      	cmp	r3, #64	; 0x40
 800a716:	d058      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x136>
 800a718:	2b40      	cmp	r3, #64	; 0x40
 800a71a:	d86f      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x168>
 800a71c:	2b30      	cmp	r3, #48	; 0x30
 800a71e:	d064      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x156>
 800a720:	2b30      	cmp	r3, #48	; 0x30
 800a722:	d86b      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x168>
 800a724:	2b20      	cmp	r3, #32
 800a726:	d060      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x156>
 800a728:	2b20      	cmp	r3, #32
 800a72a:	d867      	bhi.n	800a7fc <HAL_TIM_ConfigClockSource+0x168>
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d05c      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x156>
 800a730:	2b10      	cmp	r3, #16
 800a732:	d05a      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a734:	e062      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	6899      	ldr	r1, [r3, #8]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	685a      	ldr	r2, [r3, #4]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f000 fc0b 	bl	800af60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a758:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	609a      	str	r2, [r3, #8]
      break;
 800a762:	e04e      	b.n	800a802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	6899      	ldr	r1, [r3, #8]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	f000 fbf4 	bl	800af60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689a      	ldr	r2, [r3, #8]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a786:	609a      	str	r2, [r3, #8]
      break;
 800a788:	e03b      	b.n	800a802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	6859      	ldr	r1, [r3, #4]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	461a      	mov	r2, r3
 800a798:	f000 fb68 	bl	800ae6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2150      	movs	r1, #80	; 0x50
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fbc1 	bl	800af2a <TIM_ITRx_SetConfig>
      break;
 800a7a8:	e02b      	b.n	800a802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	6859      	ldr	r1, [r3, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f000 fb87 	bl	800aeca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2160      	movs	r1, #96	; 0x60
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fbb1 	bl	800af2a <TIM_ITRx_SetConfig>
      break;
 800a7c8:	e01b      	b.n	800a802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6859      	ldr	r1, [r3, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f000 fb48 	bl	800ae6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2140      	movs	r1, #64	; 0x40
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 fba1 	bl	800af2a <TIM_ITRx_SetConfig>
      break;
 800a7e8:	e00b      	b.n	800a802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	f000 fb98 	bl	800af2a <TIM_ITRx_SetConfig>
      break;
 800a7fa:	e002      	b.n	800a802 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a7fc:	bf00      	nop
 800a7fe:	e000      	b.n	800a802 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a800:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	fffeff88 	.word	0xfffeff88

0800a820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a40      	ldr	r2, [pc, #256]	; (800a984 <TIM_Base_SetConfig+0x114>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d013      	beq.n	800a8b0 <TIM_Base_SetConfig+0x40>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a88e:	d00f      	beq.n	800a8b0 <TIM_Base_SetConfig+0x40>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a3d      	ldr	r2, [pc, #244]	; (800a988 <TIM_Base_SetConfig+0x118>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00b      	beq.n	800a8b0 <TIM_Base_SetConfig+0x40>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a3c      	ldr	r2, [pc, #240]	; (800a98c <TIM_Base_SetConfig+0x11c>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d007      	beq.n	800a8b0 <TIM_Base_SetConfig+0x40>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a3b      	ldr	r2, [pc, #236]	; (800a990 <TIM_Base_SetConfig+0x120>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d003      	beq.n	800a8b0 <TIM_Base_SetConfig+0x40>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a3a      	ldr	r2, [pc, #232]	; (800a994 <TIM_Base_SetConfig+0x124>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d108      	bne.n	800a8c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a2f      	ldr	r2, [pc, #188]	; (800a984 <TIM_Base_SetConfig+0x114>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d02b      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8d0:	d027      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a2c      	ldr	r2, [pc, #176]	; (800a988 <TIM_Base_SetConfig+0x118>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d023      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a2b      	ldr	r2, [pc, #172]	; (800a98c <TIM_Base_SetConfig+0x11c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d01f      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a2a      	ldr	r2, [pc, #168]	; (800a990 <TIM_Base_SetConfig+0x120>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d01b      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a29      	ldr	r2, [pc, #164]	; (800a994 <TIM_Base_SetConfig+0x124>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d017      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a28      	ldr	r2, [pc, #160]	; (800a998 <TIM_Base_SetConfig+0x128>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d013      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a27      	ldr	r2, [pc, #156]	; (800a99c <TIM_Base_SetConfig+0x12c>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00f      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a26      	ldr	r2, [pc, #152]	; (800a9a0 <TIM_Base_SetConfig+0x130>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d00b      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a25      	ldr	r2, [pc, #148]	; (800a9a4 <TIM_Base_SetConfig+0x134>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d007      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a24      	ldr	r2, [pc, #144]	; (800a9a8 <TIM_Base_SetConfig+0x138>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d003      	beq.n	800a922 <TIM_Base_SetConfig+0xb2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a23      	ldr	r2, [pc, #140]	; (800a9ac <TIM_Base_SetConfig+0x13c>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d108      	bne.n	800a934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	4313      	orrs	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	4313      	orrs	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	689a      	ldr	r2, [r3, #8]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a0a      	ldr	r2, [pc, #40]	; (800a984 <TIM_Base_SetConfig+0x114>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d003      	beq.n	800a968 <TIM_Base_SetConfig+0xf8>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a0c      	ldr	r2, [pc, #48]	; (800a994 <TIM_Base_SetConfig+0x124>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d103      	bne.n	800a970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	691a      	ldr	r2, [r3, #16]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	615a      	str	r2, [r3, #20]
}
 800a976:	bf00      	nop
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	40010000 	.word	0x40010000
 800a988:	40000400 	.word	0x40000400
 800a98c:	40000800 	.word	0x40000800
 800a990:	40000c00 	.word	0x40000c00
 800a994:	40010400 	.word	0x40010400
 800a998:	40014000 	.word	0x40014000
 800a99c:	40014400 	.word	0x40014400
 800a9a0:	40014800 	.word	0x40014800
 800a9a4:	40001800 	.word	0x40001800
 800a9a8:	40001c00 	.word	0x40001c00
 800a9ac:	40002000 	.word	0x40002000

0800a9b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	f023 0201 	bic.w	r2, r3, #1
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	4b2b      	ldr	r3, [pc, #172]	; (800aa88 <TIM_OC1_SetConfig+0xd8>)
 800a9dc:	4013      	ands	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f023 0303 	bic.w	r3, r3, #3
 800a9e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f023 0302 	bic.w	r3, r3, #2
 800a9f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a21      	ldr	r2, [pc, #132]	; (800aa8c <TIM_OC1_SetConfig+0xdc>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d003      	beq.n	800aa14 <TIM_OC1_SetConfig+0x64>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a20      	ldr	r2, [pc, #128]	; (800aa90 <TIM_OC1_SetConfig+0xe0>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d10c      	bne.n	800aa2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f023 0308 	bic.w	r3, r3, #8
 800aa1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f023 0304 	bic.w	r3, r3, #4
 800aa2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a16      	ldr	r2, [pc, #88]	; (800aa8c <TIM_OC1_SetConfig+0xdc>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d003      	beq.n	800aa3e <TIM_OC1_SetConfig+0x8e>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a15      	ldr	r2, [pc, #84]	; (800aa90 <TIM_OC1_SetConfig+0xe0>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d111      	bne.n	800aa62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	621a      	str	r2, [r3, #32]
}
 800aa7c:	bf00      	nop
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	fffeff8f 	.word	0xfffeff8f
 800aa8c:	40010000 	.word	0x40010000
 800aa90:	40010400 	.word	0x40010400

0800aa94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	f023 0210 	bic.w	r2, r3, #16
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	4b2e      	ldr	r3, [pc, #184]	; (800ab78 <TIM_OC2_SetConfig+0xe4>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	021b      	lsls	r3, r3, #8
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f023 0320 	bic.w	r3, r3, #32
 800aade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	011b      	lsls	r3, r3, #4
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a23      	ldr	r2, [pc, #140]	; (800ab7c <TIM_OC2_SetConfig+0xe8>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d003      	beq.n	800aafc <TIM_OC2_SetConfig+0x68>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a22      	ldr	r2, [pc, #136]	; (800ab80 <TIM_OC2_SetConfig+0xec>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d10d      	bne.n	800ab18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	011b      	lsls	r3, r3, #4
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a18      	ldr	r2, [pc, #96]	; (800ab7c <TIM_OC2_SetConfig+0xe8>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d003      	beq.n	800ab28 <TIM_OC2_SetConfig+0x94>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a17      	ldr	r2, [pc, #92]	; (800ab80 <TIM_OC2_SetConfig+0xec>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d113      	bne.n	800ab50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	697a      	ldr	r2, [r7, #20]
 800ab68:	621a      	str	r2, [r3, #32]
}
 800ab6a:	bf00      	nop
 800ab6c:	371c      	adds	r7, #28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	feff8fff 	.word	0xfeff8fff
 800ab7c:	40010000 	.word	0x40010000
 800ab80:	40010400 	.word	0x40010400

0800ab84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4b2d      	ldr	r3, [pc, #180]	; (800ac64 <TIM_OC3_SetConfig+0xe0>)
 800abb0:	4013      	ands	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0303 	bic.w	r3, r3, #3
 800abba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a22      	ldr	r2, [pc, #136]	; (800ac68 <TIM_OC3_SetConfig+0xe4>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d003      	beq.n	800abea <TIM_OC3_SetConfig+0x66>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a21      	ldr	r2, [pc, #132]	; (800ac6c <TIM_OC3_SetConfig+0xe8>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d10d      	bne.n	800ac06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a17      	ldr	r2, [pc, #92]	; (800ac68 <TIM_OC3_SetConfig+0xe4>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d003      	beq.n	800ac16 <TIM_OC3_SetConfig+0x92>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a16      	ldr	r2, [pc, #88]	; (800ac6c <TIM_OC3_SetConfig+0xe8>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d113      	bne.n	800ac3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	011b      	lsls	r3, r3, #4
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	621a      	str	r2, [r3, #32]
}
 800ac58:	bf00      	nop
 800ac5a:	371c      	adds	r7, #28
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	fffeff8f 	.word	0xfffeff8f
 800ac68:	40010000 	.word	0x40010000
 800ac6c:	40010400 	.word	0x40010400

0800ac70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <TIM_OC4_SetConfig+0xa4>)
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	021b      	lsls	r3, r3, #8
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	031b      	lsls	r3, r3, #12
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a13      	ldr	r2, [pc, #76]	; (800ad18 <TIM_OC4_SetConfig+0xa8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d003      	beq.n	800acd8 <TIM_OC4_SetConfig+0x68>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a12      	ldr	r2, [pc, #72]	; (800ad1c <TIM_OC4_SetConfig+0xac>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d109      	bne.n	800acec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	019b      	lsls	r3, r3, #6
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	4313      	orrs	r3, r2
 800acea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	621a      	str	r2, [r3, #32]
}
 800ad06:	bf00      	nop
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	feff8fff 	.word	0xfeff8fff
 800ad18:	40010000 	.word	0x40010000
 800ad1c:	40010400 	.word	0x40010400

0800ad20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	4b1b      	ldr	r3, [pc, #108]	; (800adb8 <TIM_OC5_SetConfig+0x98>)
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	041b      	lsls	r3, r3, #16
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a12      	ldr	r2, [pc, #72]	; (800adbc <TIM_OC5_SetConfig+0x9c>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d003      	beq.n	800ad7e <TIM_OC5_SetConfig+0x5e>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a11      	ldr	r2, [pc, #68]	; (800adc0 <TIM_OC5_SetConfig+0xa0>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d109      	bne.n	800ad92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	021b      	lsls	r3, r3, #8
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	621a      	str	r2, [r3, #32]
}
 800adac:	bf00      	nop
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	fffeff8f 	.word	0xfffeff8f
 800adbc:	40010000 	.word	0x40010000
 800adc0:	40010400 	.word	0x40010400

0800adc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	4b1c      	ldr	r3, [pc, #112]	; (800ae60 <TIM_OC6_SetConfig+0x9c>)
 800adf0:	4013      	ands	r3, r2
 800adf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	021b      	lsls	r3, r3, #8
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	051b      	lsls	r3, r3, #20
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a13      	ldr	r2, [pc, #76]	; (800ae64 <TIM_OC6_SetConfig+0xa0>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d003      	beq.n	800ae24 <TIM_OC6_SetConfig+0x60>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a12      	ldr	r2, [pc, #72]	; (800ae68 <TIM_OC6_SetConfig+0xa4>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d109      	bne.n	800ae38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	029b      	lsls	r3, r3, #10
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	621a      	str	r2, [r3, #32]
}
 800ae52:	bf00      	nop
 800ae54:	371c      	adds	r7, #28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	feff8fff 	.word	0xfeff8fff
 800ae64:	40010000 	.word	0x40010000
 800ae68:	40010400 	.word	0x40010400

0800ae6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	f023 0201 	bic.w	r2, r3, #1
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	011b      	lsls	r3, r3, #4
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f023 030a 	bic.w	r3, r3, #10
 800aea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	693a      	ldr	r2, [r7, #16]
 800aeb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	621a      	str	r2, [r3, #32]
}
 800aebe:	bf00      	nop
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b087      	sub	sp, #28
 800aece:	af00      	add	r7, sp, #0
 800aed0:	60f8      	str	r0, [r7, #12]
 800aed2:	60b9      	str	r1, [r7, #8]
 800aed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	f023 0210 	bic.w	r2, r3, #16
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	031b      	lsls	r3, r3, #12
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	4313      	orrs	r3, r2
 800af10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	621a      	str	r2, [r3, #32]
}
 800af1e:	bf00      	nop
 800af20:	371c      	adds	r7, #28
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b085      	sub	sp, #20
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	4313      	orrs	r3, r2
 800af48:	f043 0307 	orr.w	r3, r3, #7
 800af4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	609a      	str	r2, [r3, #8]
}
 800af54:	bf00      	nop
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
 800af6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	021a      	lsls	r2, r3, #8
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	431a      	orrs	r2, r3
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	4313      	orrs	r3, r2
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	609a      	str	r2, [r3, #8]
}
 800af94:	bf00      	nop
 800af96:	371c      	adds	r7, #28
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d101      	bne.n	800afb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afb4:	2302      	movs	r3, #2
 800afb6:	e06d      	b.n	800b094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2202      	movs	r2, #2
 800afc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a30      	ldr	r2, [pc, #192]	; (800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d004      	beq.n	800afec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a2f      	ldr	r2, [pc, #188]	; (800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d108      	bne.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aff2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	4313      	orrs	r3, r2
 800affc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a20      	ldr	r2, [pc, #128]	; (800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d022      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b02a:	d01d      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a1d      	ldr	r2, [pc, #116]	; (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d018      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a1c      	ldr	r2, [pc, #112]	; (800b0ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d013      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a1a      	ldr	r2, [pc, #104]	; (800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d00e      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a15      	ldr	r2, [pc, #84]	; (800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d009      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a16      	ldr	r2, [pc, #88]	; (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d004      	beq.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a15      	ldr	r2, [pc, #84]	; (800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d10c      	bne.n	800b082 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b06e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	4313      	orrs	r3, r2
 800b078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	40010000 	.word	0x40010000
 800b0a4:	40010400 	.word	0x40010400
 800b0a8:	40000400 	.word	0x40000400
 800b0ac:	40000800 	.word	0x40000800
 800b0b0:	40000c00 	.word	0x40000c00
 800b0b4:	40014000 	.word	0x40014000
 800b0b8:	40001800 	.word	0x40001800

0800b0bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d101      	bne.n	800b0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	e065      	b.n	800b1a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	041b      	lsls	r3, r3, #16
 800b14e:	4313      	orrs	r3, r2
 800b150:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a16      	ldr	r2, [pc, #88]	; (800b1b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d004      	beq.n	800b166 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a14      	ldr	r2, [pc, #80]	; (800b1b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d115      	bne.n	800b192 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	051b      	lsls	r3, r3, #20
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	69db      	ldr	r3, [r3, #28]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	40010000 	.word	0x40010000
 800b1b4:	40010400 	.word	0x40010400

0800b1b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e040      	b.n	800b288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d106      	bne.n	800b21c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7f8 f804 	bl	8003224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2224      	movs	r2, #36	; 0x24
 800b220:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f022 0201 	bic.w	r2, r2, #1
 800b230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f82c 	bl	800b290 <UART_SetConfig>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d101      	bne.n	800b242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e022      	b.n	800b288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 facc 	bl	800b7e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b25e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	689a      	ldr	r2, [r3, #8]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b26e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f042 0201 	orr.w	r2, r2, #1
 800b27e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fb53 	bl	800b92c <UART_CheckIdleState>
 800b286:	4603      	mov	r3, r0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b298:	2300      	movs	r3, #0
 800b29a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	689a      	ldr	r2, [r3, #8]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	431a      	orrs	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	4ba7      	ldr	r3, [pc, #668]	; (800b55c <UART_SetConfig+0x2cc>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	6812      	ldr	r2, [r2, #0]
 800b2c6:	6939      	ldr	r1, [r7, #16]
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	430a      	orrs	r2, r1
 800b2e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	430a      	orrs	r2, r1
 800b304:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a95      	ldr	r2, [pc, #596]	; (800b560 <UART_SetConfig+0x2d0>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d120      	bne.n	800b352 <UART_SetConfig+0xc2>
 800b310:	4b94      	ldr	r3, [pc, #592]	; (800b564 <UART_SetConfig+0x2d4>)
 800b312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b316:	f003 0303 	and.w	r3, r3, #3
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d816      	bhi.n	800b34c <UART_SetConfig+0xbc>
 800b31e:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <UART_SetConfig+0x94>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b335 	.word	0x0800b335
 800b328:	0800b341 	.word	0x0800b341
 800b32c:	0800b33b 	.word	0x0800b33b
 800b330:	0800b347 	.word	0x0800b347
 800b334:	2301      	movs	r3, #1
 800b336:	77fb      	strb	r3, [r7, #31]
 800b338:	e14f      	b.n	800b5da <UART_SetConfig+0x34a>
 800b33a:	2302      	movs	r3, #2
 800b33c:	77fb      	strb	r3, [r7, #31]
 800b33e:	e14c      	b.n	800b5da <UART_SetConfig+0x34a>
 800b340:	2304      	movs	r3, #4
 800b342:	77fb      	strb	r3, [r7, #31]
 800b344:	e149      	b.n	800b5da <UART_SetConfig+0x34a>
 800b346:	2308      	movs	r3, #8
 800b348:	77fb      	strb	r3, [r7, #31]
 800b34a:	e146      	b.n	800b5da <UART_SetConfig+0x34a>
 800b34c:	2310      	movs	r3, #16
 800b34e:	77fb      	strb	r3, [r7, #31]
 800b350:	e143      	b.n	800b5da <UART_SetConfig+0x34a>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a84      	ldr	r2, [pc, #528]	; (800b568 <UART_SetConfig+0x2d8>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d132      	bne.n	800b3c2 <UART_SetConfig+0x132>
 800b35c:	4b81      	ldr	r3, [pc, #516]	; (800b564 <UART_SetConfig+0x2d4>)
 800b35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b362:	f003 030c 	and.w	r3, r3, #12
 800b366:	2b0c      	cmp	r3, #12
 800b368:	d828      	bhi.n	800b3bc <UART_SetConfig+0x12c>
 800b36a:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <UART_SetConfig+0xe0>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b3a5 	.word	0x0800b3a5
 800b374:	0800b3bd 	.word	0x0800b3bd
 800b378:	0800b3bd 	.word	0x0800b3bd
 800b37c:	0800b3bd 	.word	0x0800b3bd
 800b380:	0800b3b1 	.word	0x0800b3b1
 800b384:	0800b3bd 	.word	0x0800b3bd
 800b388:	0800b3bd 	.word	0x0800b3bd
 800b38c:	0800b3bd 	.word	0x0800b3bd
 800b390:	0800b3ab 	.word	0x0800b3ab
 800b394:	0800b3bd 	.word	0x0800b3bd
 800b398:	0800b3bd 	.word	0x0800b3bd
 800b39c:	0800b3bd 	.word	0x0800b3bd
 800b3a0:	0800b3b7 	.word	0x0800b3b7
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	77fb      	strb	r3, [r7, #31]
 800b3a8:	e117      	b.n	800b5da <UART_SetConfig+0x34a>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	77fb      	strb	r3, [r7, #31]
 800b3ae:	e114      	b.n	800b5da <UART_SetConfig+0x34a>
 800b3b0:	2304      	movs	r3, #4
 800b3b2:	77fb      	strb	r3, [r7, #31]
 800b3b4:	e111      	b.n	800b5da <UART_SetConfig+0x34a>
 800b3b6:	2308      	movs	r3, #8
 800b3b8:	77fb      	strb	r3, [r7, #31]
 800b3ba:	e10e      	b.n	800b5da <UART_SetConfig+0x34a>
 800b3bc:	2310      	movs	r3, #16
 800b3be:	77fb      	strb	r3, [r7, #31]
 800b3c0:	e10b      	b.n	800b5da <UART_SetConfig+0x34a>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a69      	ldr	r2, [pc, #420]	; (800b56c <UART_SetConfig+0x2dc>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d120      	bne.n	800b40e <UART_SetConfig+0x17e>
 800b3cc:	4b65      	ldr	r3, [pc, #404]	; (800b564 <UART_SetConfig+0x2d4>)
 800b3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b3d6:	2b30      	cmp	r3, #48	; 0x30
 800b3d8:	d013      	beq.n	800b402 <UART_SetConfig+0x172>
 800b3da:	2b30      	cmp	r3, #48	; 0x30
 800b3dc:	d814      	bhi.n	800b408 <UART_SetConfig+0x178>
 800b3de:	2b20      	cmp	r3, #32
 800b3e0:	d009      	beq.n	800b3f6 <UART_SetConfig+0x166>
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	d810      	bhi.n	800b408 <UART_SetConfig+0x178>
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <UART_SetConfig+0x160>
 800b3ea:	2b10      	cmp	r3, #16
 800b3ec:	d006      	beq.n	800b3fc <UART_SetConfig+0x16c>
 800b3ee:	e00b      	b.n	800b408 <UART_SetConfig+0x178>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	77fb      	strb	r3, [r7, #31]
 800b3f4:	e0f1      	b.n	800b5da <UART_SetConfig+0x34a>
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	77fb      	strb	r3, [r7, #31]
 800b3fa:	e0ee      	b.n	800b5da <UART_SetConfig+0x34a>
 800b3fc:	2304      	movs	r3, #4
 800b3fe:	77fb      	strb	r3, [r7, #31]
 800b400:	e0eb      	b.n	800b5da <UART_SetConfig+0x34a>
 800b402:	2308      	movs	r3, #8
 800b404:	77fb      	strb	r3, [r7, #31]
 800b406:	e0e8      	b.n	800b5da <UART_SetConfig+0x34a>
 800b408:	2310      	movs	r3, #16
 800b40a:	77fb      	strb	r3, [r7, #31]
 800b40c:	e0e5      	b.n	800b5da <UART_SetConfig+0x34a>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a57      	ldr	r2, [pc, #348]	; (800b570 <UART_SetConfig+0x2e0>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d120      	bne.n	800b45a <UART_SetConfig+0x1ca>
 800b418:	4b52      	ldr	r3, [pc, #328]	; (800b564 <UART_SetConfig+0x2d4>)
 800b41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b41e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b422:	2bc0      	cmp	r3, #192	; 0xc0
 800b424:	d013      	beq.n	800b44e <UART_SetConfig+0x1be>
 800b426:	2bc0      	cmp	r3, #192	; 0xc0
 800b428:	d814      	bhi.n	800b454 <UART_SetConfig+0x1c4>
 800b42a:	2b80      	cmp	r3, #128	; 0x80
 800b42c:	d009      	beq.n	800b442 <UART_SetConfig+0x1b2>
 800b42e:	2b80      	cmp	r3, #128	; 0x80
 800b430:	d810      	bhi.n	800b454 <UART_SetConfig+0x1c4>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <UART_SetConfig+0x1ac>
 800b436:	2b40      	cmp	r3, #64	; 0x40
 800b438:	d006      	beq.n	800b448 <UART_SetConfig+0x1b8>
 800b43a:	e00b      	b.n	800b454 <UART_SetConfig+0x1c4>
 800b43c:	2300      	movs	r3, #0
 800b43e:	77fb      	strb	r3, [r7, #31]
 800b440:	e0cb      	b.n	800b5da <UART_SetConfig+0x34a>
 800b442:	2302      	movs	r3, #2
 800b444:	77fb      	strb	r3, [r7, #31]
 800b446:	e0c8      	b.n	800b5da <UART_SetConfig+0x34a>
 800b448:	2304      	movs	r3, #4
 800b44a:	77fb      	strb	r3, [r7, #31]
 800b44c:	e0c5      	b.n	800b5da <UART_SetConfig+0x34a>
 800b44e:	2308      	movs	r3, #8
 800b450:	77fb      	strb	r3, [r7, #31]
 800b452:	e0c2      	b.n	800b5da <UART_SetConfig+0x34a>
 800b454:	2310      	movs	r3, #16
 800b456:	77fb      	strb	r3, [r7, #31]
 800b458:	e0bf      	b.n	800b5da <UART_SetConfig+0x34a>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a45      	ldr	r2, [pc, #276]	; (800b574 <UART_SetConfig+0x2e4>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d125      	bne.n	800b4b0 <UART_SetConfig+0x220>
 800b464:	4b3f      	ldr	r3, [pc, #252]	; (800b564 <UART_SetConfig+0x2d4>)
 800b466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b46a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b46e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b472:	d017      	beq.n	800b4a4 <UART_SetConfig+0x214>
 800b474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b478:	d817      	bhi.n	800b4aa <UART_SetConfig+0x21a>
 800b47a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b47e:	d00b      	beq.n	800b498 <UART_SetConfig+0x208>
 800b480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b484:	d811      	bhi.n	800b4aa <UART_SetConfig+0x21a>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <UART_SetConfig+0x202>
 800b48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b48e:	d006      	beq.n	800b49e <UART_SetConfig+0x20e>
 800b490:	e00b      	b.n	800b4aa <UART_SetConfig+0x21a>
 800b492:	2300      	movs	r3, #0
 800b494:	77fb      	strb	r3, [r7, #31]
 800b496:	e0a0      	b.n	800b5da <UART_SetConfig+0x34a>
 800b498:	2302      	movs	r3, #2
 800b49a:	77fb      	strb	r3, [r7, #31]
 800b49c:	e09d      	b.n	800b5da <UART_SetConfig+0x34a>
 800b49e:	2304      	movs	r3, #4
 800b4a0:	77fb      	strb	r3, [r7, #31]
 800b4a2:	e09a      	b.n	800b5da <UART_SetConfig+0x34a>
 800b4a4:	2308      	movs	r3, #8
 800b4a6:	77fb      	strb	r3, [r7, #31]
 800b4a8:	e097      	b.n	800b5da <UART_SetConfig+0x34a>
 800b4aa:	2310      	movs	r3, #16
 800b4ac:	77fb      	strb	r3, [r7, #31]
 800b4ae:	e094      	b.n	800b5da <UART_SetConfig+0x34a>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a30      	ldr	r2, [pc, #192]	; (800b578 <UART_SetConfig+0x2e8>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d125      	bne.n	800b506 <UART_SetConfig+0x276>
 800b4ba:	4b2a      	ldr	r3, [pc, #168]	; (800b564 <UART_SetConfig+0x2d4>)
 800b4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4c8:	d017      	beq.n	800b4fa <UART_SetConfig+0x26a>
 800b4ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4ce:	d817      	bhi.n	800b500 <UART_SetConfig+0x270>
 800b4d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4d4:	d00b      	beq.n	800b4ee <UART_SetConfig+0x25e>
 800b4d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4da:	d811      	bhi.n	800b500 <UART_SetConfig+0x270>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <UART_SetConfig+0x258>
 800b4e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4e4:	d006      	beq.n	800b4f4 <UART_SetConfig+0x264>
 800b4e6:	e00b      	b.n	800b500 <UART_SetConfig+0x270>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	77fb      	strb	r3, [r7, #31]
 800b4ec:	e075      	b.n	800b5da <UART_SetConfig+0x34a>
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	77fb      	strb	r3, [r7, #31]
 800b4f2:	e072      	b.n	800b5da <UART_SetConfig+0x34a>
 800b4f4:	2304      	movs	r3, #4
 800b4f6:	77fb      	strb	r3, [r7, #31]
 800b4f8:	e06f      	b.n	800b5da <UART_SetConfig+0x34a>
 800b4fa:	2308      	movs	r3, #8
 800b4fc:	77fb      	strb	r3, [r7, #31]
 800b4fe:	e06c      	b.n	800b5da <UART_SetConfig+0x34a>
 800b500:	2310      	movs	r3, #16
 800b502:	77fb      	strb	r3, [r7, #31]
 800b504:	e069      	b.n	800b5da <UART_SetConfig+0x34a>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a1c      	ldr	r2, [pc, #112]	; (800b57c <UART_SetConfig+0x2ec>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d137      	bne.n	800b580 <UART_SetConfig+0x2f0>
 800b510:	4b14      	ldr	r3, [pc, #80]	; (800b564 <UART_SetConfig+0x2d4>)
 800b512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b516:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b51a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b51e:	d017      	beq.n	800b550 <UART_SetConfig+0x2c0>
 800b520:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b524:	d817      	bhi.n	800b556 <UART_SetConfig+0x2c6>
 800b526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b52a:	d00b      	beq.n	800b544 <UART_SetConfig+0x2b4>
 800b52c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b530:	d811      	bhi.n	800b556 <UART_SetConfig+0x2c6>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <UART_SetConfig+0x2ae>
 800b536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b53a:	d006      	beq.n	800b54a <UART_SetConfig+0x2ba>
 800b53c:	e00b      	b.n	800b556 <UART_SetConfig+0x2c6>
 800b53e:	2300      	movs	r3, #0
 800b540:	77fb      	strb	r3, [r7, #31]
 800b542:	e04a      	b.n	800b5da <UART_SetConfig+0x34a>
 800b544:	2302      	movs	r3, #2
 800b546:	77fb      	strb	r3, [r7, #31]
 800b548:	e047      	b.n	800b5da <UART_SetConfig+0x34a>
 800b54a:	2304      	movs	r3, #4
 800b54c:	77fb      	strb	r3, [r7, #31]
 800b54e:	e044      	b.n	800b5da <UART_SetConfig+0x34a>
 800b550:	2308      	movs	r3, #8
 800b552:	77fb      	strb	r3, [r7, #31]
 800b554:	e041      	b.n	800b5da <UART_SetConfig+0x34a>
 800b556:	2310      	movs	r3, #16
 800b558:	77fb      	strb	r3, [r7, #31]
 800b55a:	e03e      	b.n	800b5da <UART_SetConfig+0x34a>
 800b55c:	efff69f3 	.word	0xefff69f3
 800b560:	40011000 	.word	0x40011000
 800b564:	40023800 	.word	0x40023800
 800b568:	40004400 	.word	0x40004400
 800b56c:	40004800 	.word	0x40004800
 800b570:	40004c00 	.word	0x40004c00
 800b574:	40005000 	.word	0x40005000
 800b578:	40011400 	.word	0x40011400
 800b57c:	40007800 	.word	0x40007800
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a94      	ldr	r2, [pc, #592]	; (800b7d8 <UART_SetConfig+0x548>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d125      	bne.n	800b5d6 <UART_SetConfig+0x346>
 800b58a:	4b94      	ldr	r3, [pc, #592]	; (800b7dc <UART_SetConfig+0x54c>)
 800b58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b594:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b598:	d017      	beq.n	800b5ca <UART_SetConfig+0x33a>
 800b59a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b59e:	d817      	bhi.n	800b5d0 <UART_SetConfig+0x340>
 800b5a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5a4:	d00b      	beq.n	800b5be <UART_SetConfig+0x32e>
 800b5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5aa:	d811      	bhi.n	800b5d0 <UART_SetConfig+0x340>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <UART_SetConfig+0x328>
 800b5b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5b4:	d006      	beq.n	800b5c4 <UART_SetConfig+0x334>
 800b5b6:	e00b      	b.n	800b5d0 <UART_SetConfig+0x340>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	77fb      	strb	r3, [r7, #31]
 800b5bc:	e00d      	b.n	800b5da <UART_SetConfig+0x34a>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	77fb      	strb	r3, [r7, #31]
 800b5c2:	e00a      	b.n	800b5da <UART_SetConfig+0x34a>
 800b5c4:	2304      	movs	r3, #4
 800b5c6:	77fb      	strb	r3, [r7, #31]
 800b5c8:	e007      	b.n	800b5da <UART_SetConfig+0x34a>
 800b5ca:	2308      	movs	r3, #8
 800b5cc:	77fb      	strb	r3, [r7, #31]
 800b5ce:	e004      	b.n	800b5da <UART_SetConfig+0x34a>
 800b5d0:	2310      	movs	r3, #16
 800b5d2:	77fb      	strb	r3, [r7, #31]
 800b5d4:	e001      	b.n	800b5da <UART_SetConfig+0x34a>
 800b5d6:	2310      	movs	r3, #16
 800b5d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5e2:	d17f      	bne.n	800b6e4 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800b5e4:	7ffb      	ldrb	r3, [r7, #31]
 800b5e6:	2b08      	cmp	r3, #8
 800b5e8:	d85c      	bhi.n	800b6a4 <UART_SetConfig+0x414>
 800b5ea:	a201      	add	r2, pc, #4	; (adr r2, 800b5f0 <UART_SetConfig+0x360>)
 800b5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f0:	0800b615 	.word	0x0800b615
 800b5f4:	0800b635 	.word	0x0800b635
 800b5f8:	0800b655 	.word	0x0800b655
 800b5fc:	0800b6a5 	.word	0x0800b6a5
 800b600:	0800b66d 	.word	0x0800b66d
 800b604:	0800b6a5 	.word	0x0800b6a5
 800b608:	0800b6a5 	.word	0x0800b6a5
 800b60c:	0800b6a5 	.word	0x0800b6a5
 800b610:	0800b68d 	.word	0x0800b68d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b614:	f7fc f8b4 	bl	8007780 <HAL_RCC_GetPCLK1Freq>
 800b618:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	005a      	lsls	r2, r3, #1
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	085b      	lsrs	r3, r3, #1
 800b624:	441a      	add	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b62e:	b29b      	uxth	r3, r3
 800b630:	61bb      	str	r3, [r7, #24]
        break;
 800b632:	e03a      	b.n	800b6aa <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b634:	f7fc f8b8 	bl	80077a8 <HAL_RCC_GetPCLK2Freq>
 800b638:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	005a      	lsls	r2, r3, #1
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	085b      	lsrs	r3, r3, #1
 800b644:	441a      	add	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64e:	b29b      	uxth	r3, r3
 800b650:	61bb      	str	r3, [r7, #24]
        break;
 800b652:	e02a      	b.n	800b6aa <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	085a      	lsrs	r2, r3, #1
 800b65a:	4b61      	ldr	r3, [pc, #388]	; (800b7e0 <UART_SetConfig+0x550>)
 800b65c:	4413      	add	r3, r2
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	6852      	ldr	r2, [r2, #4]
 800b662:	fbb3 f3f2 	udiv	r3, r3, r2
 800b666:	b29b      	uxth	r3, r3
 800b668:	61bb      	str	r3, [r7, #24]
        break;
 800b66a:	e01e      	b.n	800b6aa <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b66c:	f7fb ffc6 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 800b670:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	005a      	lsls	r2, r3, #1
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	085b      	lsrs	r3, r3, #1
 800b67c:	441a      	add	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	fbb2 f3f3 	udiv	r3, r2, r3
 800b686:	b29b      	uxth	r3, r3
 800b688:	61bb      	str	r3, [r7, #24]
        break;
 800b68a:	e00e      	b.n	800b6aa <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	085b      	lsrs	r3, r3, #1
 800b692:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	61bb      	str	r3, [r7, #24]
        break;
 800b6a2:	e002      	b.n	800b6aa <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	75fb      	strb	r3, [r7, #23]
        break;
 800b6a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	2b0f      	cmp	r3, #15
 800b6ae:	d916      	bls.n	800b6de <UART_SetConfig+0x44e>
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b6:	d212      	bcs.n	800b6de <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	f023 030f 	bic.w	r3, r3, #15
 800b6c0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	085b      	lsrs	r3, r3, #1
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	f003 0307 	and.w	r3, r3, #7
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	897b      	ldrh	r3, [r7, #10]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	897a      	ldrh	r2, [r7, #10]
 800b6da:	60da      	str	r2, [r3, #12]
 800b6dc:	e070      	b.n	800b7c0 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	75fb      	strb	r3, [r7, #23]
 800b6e2:	e06d      	b.n	800b7c0 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800b6e4:	7ffb      	ldrb	r3, [r7, #31]
 800b6e6:	2b08      	cmp	r3, #8
 800b6e8:	d859      	bhi.n	800b79e <UART_SetConfig+0x50e>
 800b6ea:	a201      	add	r2, pc, #4	; (adr r2, 800b6f0 <UART_SetConfig+0x460>)
 800b6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f0:	0800b715 	.word	0x0800b715
 800b6f4:	0800b733 	.word	0x0800b733
 800b6f8:	0800b751 	.word	0x0800b751
 800b6fc:	0800b79f 	.word	0x0800b79f
 800b700:	0800b769 	.word	0x0800b769
 800b704:	0800b79f 	.word	0x0800b79f
 800b708:	0800b79f 	.word	0x0800b79f
 800b70c:	0800b79f 	.word	0x0800b79f
 800b710:	0800b787 	.word	0x0800b787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b714:	f7fc f834 	bl	8007780 <HAL_RCC_GetPCLK1Freq>
 800b718:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	085a      	lsrs	r2, r3, #1
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	441a      	add	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	fbb2 f3f3 	udiv	r3, r2, r3
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	61bb      	str	r3, [r7, #24]
        break;
 800b730:	e038      	b.n	800b7a4 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b732:	f7fc f839 	bl	80077a8 <HAL_RCC_GetPCLK2Freq>
 800b736:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	085a      	lsrs	r2, r3, #1
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	441a      	add	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	61bb      	str	r3, [r7, #24]
        break;
 800b74e:	e029      	b.n	800b7a4 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	085a      	lsrs	r2, r3, #1
 800b756:	4b23      	ldr	r3, [pc, #140]	; (800b7e4 <UART_SetConfig+0x554>)
 800b758:	4413      	add	r3, r2
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6852      	ldr	r2, [r2, #4]
 800b75e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b762:	b29b      	uxth	r3, r3
 800b764:	61bb      	str	r3, [r7, #24]
        break;
 800b766:	e01d      	b.n	800b7a4 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b768:	f7fb ff48 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 800b76c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	085a      	lsrs	r2, r3, #1
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	441a      	add	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b780:	b29b      	uxth	r3, r3
 800b782:	61bb      	str	r3, [r7, #24]
        break;
 800b784:	e00e      	b.n	800b7a4 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	085b      	lsrs	r3, r3, #1
 800b78c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	fbb2 f3f3 	udiv	r3, r2, r3
 800b798:	b29b      	uxth	r3, r3
 800b79a:	61bb      	str	r3, [r7, #24]
        break;
 800b79c:	e002      	b.n	800b7a4 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	75fb      	strb	r3, [r7, #23]
        break;
 800b7a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	2b0f      	cmp	r3, #15
 800b7a8:	d908      	bls.n	800b7bc <UART_SetConfig+0x52c>
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b0:	d204      	bcs.n	800b7bc <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	69ba      	ldr	r2, [r7, #24]
 800b7b8:	60da      	str	r2, [r3, #12]
 800b7ba:	e001      	b.n	800b7c0 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3720      	adds	r7, #32
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	40007c00 	.word	0x40007c00
 800b7dc:	40023800 	.word	0x40023800
 800b7e0:	01e84800 	.word	0x01e84800
 800b7e4:	00f42400 	.word	0x00f42400

0800b7e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f4:	f003 0301 	and.w	r3, r3, #1
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	430a      	orrs	r2, r1
 800b810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	f003 0302 	and.w	r3, r3, #2
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	430a      	orrs	r2, r1
 800b832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b838:	f003 0304 	and.w	r3, r3, #4
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00a      	beq.n	800b856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	f003 0308 	and.w	r3, r3, #8
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00a      	beq.n	800b878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	430a      	orrs	r2, r1
 800b876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87c:	f003 0310 	and.w	r3, r3, #16
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00a      	beq.n	800b89a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	430a      	orrs	r2, r1
 800b898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89e:	f003 0320 	and.w	r3, r3, #32
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00a      	beq.n	800b8bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	430a      	orrs	r2, r1
 800b8ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d01a      	beq.n	800b8fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8e6:	d10a      	bne.n	800b8fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	430a      	orrs	r2, r1
 800b91e:	605a      	str	r2, [r3, #4]
  }
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af02      	add	r7, sp, #8
 800b932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b93a:	f7f7 ffc1 	bl	80038c0 <HAL_GetTick>
 800b93e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0308 	and.w	r3, r3, #8
 800b94a:	2b08      	cmp	r3, #8
 800b94c:	d10e      	bne.n	800b96c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b94e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f814 	bl	800b98a <UART_WaitOnFlagUntilTimeout>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b968:	2303      	movs	r3, #3
 800b96a:	e00a      	b.n	800b982 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2220      	movs	r2, #32
 800b970:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2220      	movs	r2, #32
 800b976:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	603b      	str	r3, [r7, #0]
 800b996:	4613      	mov	r3, r2
 800b998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b99a:	e05d      	b.n	800ba58 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d059      	beq.n	800ba58 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9a4:	f7f7 ff8c 	bl	80038c0 <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	69ba      	ldr	r2, [r7, #24]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d302      	bcc.n	800b9ba <UART_WaitOnFlagUntilTimeout+0x30>
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d11b      	bne.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f022 0201 	bic.w	r2, r2, #1
 800b9d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	e042      	b.n	800ba78 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0304 	and.w	r3, r3, #4
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d02b      	beq.n	800ba58 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba0e:	d123      	bne.n	800ba58 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba18:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f022 0201 	bic.w	r2, r2, #1
 800ba38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2220      	movs	r2, #32
 800ba3e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2220      	movs	r2, #32
 800ba44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2220      	movs	r2, #32
 800ba4a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e00f      	b.n	800ba78 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	69da      	ldr	r2, [r3, #28]
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	4013      	ands	r3, r2
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	bf0c      	ite	eq
 800ba68:	2301      	moveq	r3, #1
 800ba6a:	2300      	movne	r3, #0
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	461a      	mov	r2, r3
 800ba70:	79fb      	ldrb	r3, [r7, #7]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d092      	beq.n	800b99c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d027      	beq.n	800baea <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	4b2f      	ldr	r3, [pc, #188]	; (800bb60 <FMC_SDRAM_Init+0xe0>)
 800baa4:	4013      	ands	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bab0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bab6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800babc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bac2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bac8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bace:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bad4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bada:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	4313      	orrs	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	e032      	b.n	800bb50 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800baf6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb00:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bb06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	4b12      	ldr	r3, [pc, #72]	; (800bb60 <FMC_SDRAM_Init+0xe0>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bb2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bb30:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bb36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bb3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	ffff8000 	.word	0xffff8000

0800bb64 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d02e      	beq.n	800bbdc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb8a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bba4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bbae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bbb8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bbc2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	609a      	str	r2, [r3, #8]
 800bbda:	e039      	b.n	800bc50 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	4b1e      	ldr	r3, [pc, #120]	; (800bc60 <FMC_SDRAM_Timing_Init+0xfc>)
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc0e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	3b01      	subs	r3, #1
 800bc26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bc28:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bc32:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	371c      	adds	r7, #28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	ff0f0fff 	.word	0xff0f0fff

0800bc64 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bc7c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	3b01      	subs	r3, #1
 800bc84:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800bc86:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	695a      	ldr	r2, [r3, #20]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	431a      	orrs	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bccc:	b084      	sub	sp, #16
 800bcce:	b480      	push	{r7}
 800bcd0:	b085      	sub	sp, #20
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	f107 001c 	add.w	r0, r7, #28
 800bcda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bce2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bce4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bce6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bcea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bcee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bcf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bcf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <SDMMC_Init+0x54>)
 800bd04:	4013      	ands	r3, r2
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	b004      	add	sp, #16
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	ffff8100 	.word	0xffff8100

0800bd24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2203      	movs	r2, #3
 800bd4a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bd4c:	2002      	movs	r0, #2
 800bd4e:	f7f7 fdc3 	bl	80038d8 <HAL_Delay>
  
  return HAL_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0303 	and.w	r3, r3, #3
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd82:	2300      	movs	r3, #0
 800bd84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd96:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bd9c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bda2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	4b06      	ldr	r3, [pc, #24]	; (800bdc8 <SDMMC_SendCommand+0x50>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	fffff000 	.word	0xfffff000

0800bdcc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	b2db      	uxtb	r3, r3
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b085      	sub	sp, #20
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	3314      	adds	r3, #20
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
}  
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be32:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800be38:	431a      	orrs	r2, r3
                       Data->DPSM);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800be3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	4313      	orrs	r3, r2
 800be44:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	431a      	orrs	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800be56:	2300      	movs	r3, #0

}
 800be58:	4618      	mov	r0, r3
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b088      	sub	sp, #32
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800be72:	2310      	movs	r3, #16
 800be74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be76:	2340      	movs	r3, #64	; 0x40
 800be78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be7a:	2300      	movs	r3, #0
 800be7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be84:	f107 0308 	add.w	r3, r7, #8
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff ff74 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800be90:	f241 3288 	movw	r2, #5000	; 0x1388
 800be94:	2110      	movs	r1, #16
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa42 	bl	800c320 <SDMMC_GetCmdResp1>
 800be9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be9e:	69fb      	ldr	r3, [r7, #28]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3720      	adds	r7, #32
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800beb6:	2311      	movs	r3, #17
 800beb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beba:	2340      	movs	r3, #64	; 0x40
 800bebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bebe:	2300      	movs	r3, #0
 800bec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bec8:	f107 0308 	add.w	r3, r7, #8
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff ff52 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bed4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed8:	2111      	movs	r1, #17
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fa20 	bl	800c320 <SDMMC_GetCmdResp1>
 800bee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee2:	69fb      	ldr	r3, [r7, #28]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3720      	adds	r7, #32
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800befa:	2312      	movs	r3, #18
 800befc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800befe:	2340      	movs	r3, #64	; 0x40
 800bf00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf02:	2300      	movs	r3, #0
 800bf04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff ff30 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf1c:	2112      	movs	r1, #18
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f9fe 	bl	800c320 <SDMMC_GetCmdResp1>
 800bf24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf26:	69fb      	ldr	r3, [r7, #28]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bf3e:	2318      	movs	r3, #24
 800bf40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf42:	2340      	movs	r3, #64	; 0x40
 800bf44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf46:	2300      	movs	r3, #0
 800bf48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf50:	f107 0308 	add.w	r3, r7, #8
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff ff0e 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf60:	2118      	movs	r1, #24
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f9dc 	bl	800c320 <SDMMC_GetCmdResp1>
 800bf68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf6a:	69fb      	ldr	r3, [r7, #28]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3720      	adds	r7, #32
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bf82:	2319      	movs	r3, #25
 800bf84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf86:	2340      	movs	r3, #64	; 0x40
 800bf88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf94:	f107 0308 	add.w	r3, r7, #8
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff feec 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bfa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa4:	2119      	movs	r1, #25
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f9ba 	bl	800c320 <SDMMC_GetCmdResp1>
 800bfac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfae:	69fb      	ldr	r3, [r7, #28]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3720      	adds	r7, #32
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b088      	sub	sp, #32
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfc8:	2340      	movs	r3, #64	; 0x40
 800bfca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fecb 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bfe2:	4a05      	ldr	r2, [pc, #20]	; (800bff8 <SDMMC_CmdStopTransfer+0x40>)
 800bfe4:	210c      	movs	r1, #12
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f99a 	bl	800c320 <SDMMC_GetCmdResp1>
 800bfec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfee:	69fb      	ldr	r3, [r7, #28]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3720      	adds	r7, #32
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	05f5e100 	.word	0x05f5e100

0800bffc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08a      	sub	sp, #40	; 0x28
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c00c:	2307      	movs	r3, #7
 800c00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c010:	2340      	movs	r3, #64	; 0x40
 800c012:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c014:	2300      	movs	r3, #0
 800c016:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c01c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c01e:	f107 0310 	add.w	r3, r7, #16
 800c022:	4619      	mov	r1, r3
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f7ff fea7 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c02a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c02e:	2107      	movs	r1, #7
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f000 f975 	bl	800c320 <SDMMC_GetCmdResp1>
 800c036:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3728      	adds	r7, #40	; 0x28
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b088      	sub	sp, #32
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c04e:	2300      	movs	r3, #0
 800c050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c052:	2300      	movs	r3, #0
 800c054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c056:	2300      	movs	r3, #0
 800c058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c05e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c060:	f107 0308 	add.w	r3, r7, #8
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff fe86 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f92f 	bl	800c2d0 <SDMMC_GetCmdError>
 800c072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c074:	69fb      	ldr	r3, [r7, #28]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3720      	adds	r7, #32
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b088      	sub	sp, #32
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c086:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c08c:	2308      	movs	r3, #8
 800c08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c090:	2340      	movs	r3, #64	; 0x40
 800c092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c094:	2300      	movs	r3, #0
 800c096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c09c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c09e:	f107 0308 	add.w	r3, r7, #8
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff fe67 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fb18 	bl	800c6e0 <SDMMC_GetCmdResp7>
 800c0b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0b2:	69fb      	ldr	r3, [r7, #28]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3720      	adds	r7, #32
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c0ca:	2337      	movs	r3, #55	; 0x37
 800c0cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0ce:	2340      	movs	r3, #64	; 0x40
 800c0d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0dc:	f107 0308 	add.w	r3, r7, #8
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff fe48 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0ec:	2137      	movs	r1, #55	; 0x37
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f916 	bl	800c320 <SDMMC_GetCmdResp1>
 800c0f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0f6:	69fb      	ldr	r3, [r7, #28]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3720      	adds	r7, #32
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b088      	sub	sp, #32
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <SDMMC_CmdAppOperCommand+0x44>)
 800c10e:	4313      	orrs	r3, r2
 800c110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c112:	2329      	movs	r3, #41	; 0x29
 800c114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c116:	2340      	movs	r3, #64	; 0x40
 800c118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c124:	f107 0308 	add.w	r3, r7, #8
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff fe24 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fa27 	bl	800c584 <SDMMC_GetCmdResp3>
 800c136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c138:	69fb      	ldr	r3, [r7, #28]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3720      	adds	r7, #32
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	80100000 	.word	0x80100000

0800c148 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c156:	2306      	movs	r3, #6
 800c158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c15a:	2340      	movs	r3, #64	; 0x40
 800c15c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c15e:	2300      	movs	r3, #0
 800c160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c166:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c168:	f107 0308 	add.w	r3, r7, #8
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fe02 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c174:	f241 3288 	movw	r2, #5000	; 0x1388
 800c178:	2106      	movs	r1, #6
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f8d0 	bl	800c320 <SDMMC_GetCmdResp1>
 800c180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c182:	69fb      	ldr	r3, [r7, #28]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3720      	adds	r7, #32
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b088      	sub	sp, #32
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c198:	2333      	movs	r3, #51	; 0x33
 800c19a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c19c:	2340      	movs	r3, #64	; 0x40
 800c19e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1aa:	f107 0308 	add.w	r3, r7, #8
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff fde1 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c1b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1ba:	2133      	movs	r1, #51	; 0x33
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f8af 	bl	800c320 <SDMMC_GetCmdResp1>
 800c1c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1c4:	69fb      	ldr	r3, [r7, #28]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3720      	adds	r7, #32
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b088      	sub	sp, #32
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c1da:	2302      	movs	r3, #2
 800c1dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c1de:	23c0      	movs	r3, #192	; 0xc0
 800c1e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ec:	f107 0308 	add.w	r3, r7, #8
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff fdc0 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f97d 	bl	800c4f8 <SDMMC_GetCmdResp2>
 800c1fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c200:	69fb      	ldr	r3, [r7, #28]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b088      	sub	sp, #32
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c218:	2309      	movs	r3, #9
 800c21a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c21c:	23c0      	movs	r3, #192	; 0xc0
 800c21e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c220:	2300      	movs	r3, #0
 800c222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c228:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c22a:	f107 0308 	add.w	r3, r7, #8
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7ff fda1 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f95e 	bl	800c4f8 <SDMMC_GetCmdResp2>
 800c23c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c23e:	69fb      	ldr	r3, [r7, #28]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3720      	adds	r7, #32
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c252:	2300      	movs	r3, #0
 800c254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c256:	2303      	movs	r3, #3
 800c258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c25a:	2340      	movs	r3, #64	; 0x40
 800c25c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c266:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c268:	f107 0308 	add.w	r3, r7, #8
 800c26c:	4619      	mov	r1, r3
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7ff fd82 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	2103      	movs	r1, #3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f9bd 	bl	800c5f8 <SDMMC_GetCmdResp6>
 800c27e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c280:	69fb      	ldr	r3, [r7, #28]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b088      	sub	sp, #32
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c298:	230d      	movs	r3, #13
 800c29a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c29c:	2340      	movs	r3, #64	; 0x40
 800c29e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2aa:	f107 0308 	add.w	r3, r7, #8
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff fd61 	bl	800bd78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2ba:	210d      	movs	r1, #13
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f82f 	bl	800c320 <SDMMC_GetCmdResp1>
 800c2c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3720      	adds	r7, #32
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c2d0:	b490      	push	{r4, r7}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2d8:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <SDMMC_GetCmdError+0x48>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a0f      	ldr	r2, [pc, #60]	; (800c31c <SDMMC_GetCmdError+0x4c>)
 800c2de:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e2:	0a5b      	lsrs	r3, r3, #9
 800c2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c2ec:	4623      	mov	r3, r4
 800c2ee:	1e5c      	subs	r4, r3, #1
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d102      	bne.n	800c2fa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2f8:	e009      	b.n	800c30e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0f2      	beq.n	800c2ec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	22c5      	movs	r2, #197	; 0xc5
 800c30a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bc90      	pop	{r4, r7}
 800c316:	4770      	bx	lr
 800c318:	20000018 	.word	0x20000018
 800c31c:	10624dd3 	.word	0x10624dd3

0800c320 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c320:	b590      	push	{r4, r7, lr}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	460b      	mov	r3, r1
 800c32a:	607a      	str	r2, [r7, #4]
 800c32c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c32e:	4b6f      	ldr	r3, [pc, #444]	; (800c4ec <SDMMC_GetCmdResp1+0x1cc>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a6f      	ldr	r2, [pc, #444]	; (800c4f0 <SDMMC_GetCmdResp1+0x1d0>)
 800c334:	fba2 2303 	umull	r2, r3, r2, r3
 800c338:	0a5b      	lsrs	r3, r3, #9
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c340:	4623      	mov	r3, r4
 800c342:	1e5c      	subs	r4, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c348:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c34c:	e0c9      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c352:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0f0      	beq.n	800c340 <SDMMC_GetCmdResp1+0x20>
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1eb      	bne.n	800c340 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c36c:	f003 0304 	and.w	r3, r3, #4
 800c370:	2b00      	cmp	r3, #0
 800c372:	d004      	beq.n	800c37e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2204      	movs	r2, #4
 800c378:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c37a:	2304      	movs	r3, #4
 800c37c:	e0b1      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	2b00      	cmp	r3, #0
 800c388:	d004      	beq.n	800c394 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2201      	movs	r2, #1
 800c38e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c390:	2301      	movs	r3, #1
 800c392:	e0a6      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	22c5      	movs	r2, #197	; 0xc5
 800c398:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7ff fd16 	bl	800bdcc <SDMMC_GetCommandResponse>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	7afb      	ldrb	r3, [r7, #11]
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d001      	beq.n	800c3ae <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e099      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff fd18 	bl	800bde6 <SDMMC_GetResponse>
 800c3b6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	4b4e      	ldr	r3, [pc, #312]	; (800c4f4 <SDMMC_GetCmdResp1+0x1d4>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e08d      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	da02      	bge.n	800c3d2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c3cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3d0:	e087      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c3dc:	2340      	movs	r3, #64	; 0x40
 800c3de:	e080      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c3ea:	2380      	movs	r3, #128	; 0x80
 800c3ec:	e079      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c3f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3fc:	e071      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c40c:	e069      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c41c:	e061      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c428:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c42c:	e059      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c43c:	e051      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c44c:	e049      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c458:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c45c:	e041      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c46c:	e039      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c47c:	e031      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c488:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c48c:	e029      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c498:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c49c:	e021      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c4ac:	e019      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c4b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c4bc:	e011      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c4c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c4cc:	e009      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f003 0308 	and.w	r3, r3, #8
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c4d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c4dc:	e001      	b.n	800c4e2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	371c      	adds	r7, #28
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd90      	pop	{r4, r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20000018 	.word	0x20000018
 800c4f0:	10624dd3 	.word	0x10624dd3
 800c4f4:	fdffe008 	.word	0xfdffe008

0800c4f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c4f8:	b490      	push	{r4, r7}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c500:	4b1e      	ldr	r3, [pc, #120]	; (800c57c <SDMMC_GetCmdResp2+0x84>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a1e      	ldr	r2, [pc, #120]	; (800c580 <SDMMC_GetCmdResp2+0x88>)
 800c506:	fba2 2303 	umull	r2, r3, r2, r3
 800c50a:	0a5b      	lsrs	r3, r3, #9
 800c50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c510:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c514:	4623      	mov	r3, r4
 800c516:	1e5c      	subs	r4, r3, #1
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d102      	bne.n	800c522 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c51c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c520:	e026      	b.n	800c570 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c526:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0f0      	beq.n	800c514 <SDMMC_GetCmdResp2+0x1c>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1eb      	bne.n	800c514 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c540:	f003 0304 	and.w	r3, r3, #4
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2204      	movs	r2, #4
 800c54c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c54e:	2304      	movs	r3, #4
 800c550:	e00e      	b.n	800c570 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d004      	beq.n	800c568 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c564:	2301      	movs	r3, #1
 800c566:	e003      	b.n	800c570 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	22c5      	movs	r2, #197	; 0xc5
 800c56c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bc90      	pop	{r4, r7}
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	20000018 	.word	0x20000018
 800c580:	10624dd3 	.word	0x10624dd3

0800c584 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c584:	b490      	push	{r4, r7}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c58c:	4b18      	ldr	r3, [pc, #96]	; (800c5f0 <SDMMC_GetCmdResp3+0x6c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a18      	ldr	r2, [pc, #96]	; (800c5f4 <SDMMC_GetCmdResp3+0x70>)
 800c592:	fba2 2303 	umull	r2, r3, r2, r3
 800c596:	0a5b      	lsrs	r3, r3, #9
 800c598:	f241 3288 	movw	r2, #5000	; 0x1388
 800c59c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5a0:	4623      	mov	r3, r4
 800c5a2:	1e5c      	subs	r4, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d102      	bne.n	800c5ae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5ac:	e01b      	b.n	800c5e6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d0f0      	beq.n	800c5a0 <SDMMC_GetCmdResp3+0x1c>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1eb      	bne.n	800c5a0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5cc:	f003 0304 	and.w	r3, r3, #4
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2204      	movs	r2, #4
 800c5d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5da:	2304      	movs	r3, #4
 800c5dc:	e003      	b.n	800c5e6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	22c5      	movs	r2, #197	; 0xc5
 800c5e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bc90      	pop	{r4, r7}
 800c5ee:	4770      	bx	lr
 800c5f0:	20000018 	.word	0x20000018
 800c5f4:	10624dd3 	.word	0x10624dd3

0800c5f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c5f8:	b590      	push	{r4, r7, lr}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	460b      	mov	r3, r1
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c606:	4b34      	ldr	r3, [pc, #208]	; (800c6d8 <SDMMC_GetCmdResp6+0xe0>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a34      	ldr	r2, [pc, #208]	; (800c6dc <SDMMC_GetCmdResp6+0xe4>)
 800c60c:	fba2 2303 	umull	r2, r3, r2, r3
 800c610:	0a5b      	lsrs	r3, r3, #9
 800c612:	f241 3288 	movw	r2, #5000	; 0x1388
 800c616:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c61a:	4623      	mov	r3, r4
 800c61c:	1e5c      	subs	r4, r3, #1
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c622:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c626:	e052      	b.n	800c6ce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0f0      	beq.n	800c61a <SDMMC_GetCmdResp6+0x22>
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1eb      	bne.n	800c61a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c646:	f003 0304 	and.w	r3, r3, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2204      	movs	r2, #4
 800c652:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c654:	2304      	movs	r3, #4
 800c656:	e03a      	b.n	800c6ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d004      	beq.n	800c66e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2201      	movs	r2, #1
 800c668:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e02f      	b.n	800c6ce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f7ff fbac 	bl	800bdcc <SDMMC_GetCommandResponse>
 800c674:	4603      	mov	r3, r0
 800c676:	461a      	mov	r2, r3
 800c678:	7afb      	ldrb	r3, [r7, #11]
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d001      	beq.n	800c682 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c67e:	2301      	movs	r3, #1
 800c680:	e025      	b.n	800c6ce <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	22c5      	movs	r2, #197	; 0xc5
 800c686:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c688:	2100      	movs	r1, #0
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff fbab 	bl	800bde6 <SDMMC_GetResponse>
 800c690:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d106      	bne.n	800c6aa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	0c1b      	lsrs	r3, r3, #16
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e011      	b.n	800c6ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6b8:	e009      	b.n	800c6ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c8:	e001      	b.n	800c6ce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	371c      	adds	r7, #28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd90      	pop	{r4, r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000018 	.word	0x20000018
 800c6dc:	10624dd3 	.word	0x10624dd3

0800c6e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c6e0:	b490      	push	{r4, r7}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c6e8:	4b21      	ldr	r3, [pc, #132]	; (800c770 <SDMMC_GetCmdResp7+0x90>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a21      	ldr	r2, [pc, #132]	; (800c774 <SDMMC_GetCmdResp7+0x94>)
 800c6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f2:	0a5b      	lsrs	r3, r3, #9
 800c6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c6fc:	4623      	mov	r3, r4
 800c6fe:	1e5c      	subs	r4, r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	d102      	bne.n	800c70a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c708:	e02c      	b.n	800c764 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c70e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0f0      	beq.n	800c6fc <SDMMC_GetCmdResp7+0x1c>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1eb      	bne.n	800c6fc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2204      	movs	r2, #4
 800c734:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c736:	2304      	movs	r3, #4
 800c738:	e014      	b.n	800c764 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	d004      	beq.n	800c750 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c74c:	2301      	movs	r3, #1
 800c74e:	e009      	b.n	800c764 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2240      	movs	r2, #64	; 0x40
 800c760:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c762:	2300      	movs	r3, #0
  
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bc90      	pop	{r4, r7}
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	20000018 	.word	0x20000018
 800c774:	10624dd3 	.word	0x10624dd3

0800c778 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c77c:	4904      	ldr	r1, [pc, #16]	; (800c790 <MX_FATFS_Init+0x18>)
 800c77e:	4805      	ldr	r0, [pc, #20]	; (800c794 <MX_FATFS_Init+0x1c>)
 800c780:	f000 fa96 	bl	800ccb0 <FATFS_LinkDriver>
 800c784:	4603      	mov	r3, r0
 800c786:	461a      	mov	r2, r3
 800c788:	4b03      	ldr	r3, [pc, #12]	; (800c798 <MX_FATFS_Init+0x20>)
 800c78a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c78c:	bf00      	nop
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	2000c948 	.word	0x2000c948
 800c794:	0802a3a4 	.word	0x0802a3a4
 800c798:	2000c944 	.word	0x2000c944

0800c79c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c7a6:	f000 f87b 	bl	800c8a0 <BSP_SD_IsDetected>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d001      	beq.n	800c7b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	e012      	b.n	800c7da <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c7b4:	480b      	ldr	r0, [pc, #44]	; (800c7e4 <BSP_SD_Init+0x48>)
 800c7b6:	f7fc fadd 	bl	8008d74 <HAL_SD_Init>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d109      	bne.n	800c7d8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c7c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c7c8:	4806      	ldr	r0, [pc, #24]	; (800c7e4 <BSP_SD_Init+0x48>)
 800c7ca:	f7fc ff1f 	bl	800960c <HAL_SD_ConfigWideBusOperation>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c7d8:	79fb      	ldrb	r3, [r7, #7]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	2000c3d0 	.word	0x2000c3d0

0800c7e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	68f9      	ldr	r1, [r7, #12]
 800c7fe:	4806      	ldr	r0, [pc, #24]	; (800c818 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c800:	f7fc fb50 	bl	8008ea4 <HAL_SD_ReadBlocks_DMA>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3718      	adds	r7, #24
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	2000c3d0 	.word	0x2000c3d0

0800c81c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c828:	2300      	movs	r3, #0
 800c82a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	68f9      	ldr	r1, [r7, #12]
 800c832:	4806      	ldr	r0, [pc, #24]	; (800c84c <BSP_SD_WriteBlocks_DMA+0x30>)
 800c834:	f7fc fc22 	bl	800907c <HAL_SD_WriteBlocks_DMA>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c842:	7dfb      	ldrb	r3, [r7, #23]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	2000c3d0 	.word	0x2000c3d0

0800c850 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c854:	4805      	ldr	r0, [pc, #20]	; (800c86c <BSP_SD_GetCardState+0x1c>)
 800c856:	f7fc ff55 	bl	8009704 <HAL_SD_GetCardState>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b04      	cmp	r3, #4
 800c85e:	bf14      	ite	ne
 800c860:	2301      	movne	r3, #1
 800c862:	2300      	moveq	r3, #0
 800c864:	b2db      	uxtb	r3, r3
}
 800c866:	4618      	mov	r0, r3
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	2000c3d0 	.word	0x2000c3d0

0800c870 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c878:	6879      	ldr	r1, [r7, #4]
 800c87a:	4803      	ldr	r0, [pc, #12]	; (800c888 <BSP_SD_GetCardInfo+0x18>)
 800c87c:	f7fc fe9a 	bl	80095b4 <HAL_SD_GetCardInfo>
}
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	2000c3d0 	.word	0x2000c3d0

0800c88c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c894:	f000 f9b2 	bl	800cbfc <BSP_SD_ReadCpltCallback>
}
 800c898:	bf00      	nop
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c8aa:	f000 f80b 	bl	800c8c4 <BSP_PlatformIsDetected>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	b2db      	uxtb	r3, r3
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c8ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c8d2:	4806      	ldr	r0, [pc, #24]	; (800c8ec <BSP_PlatformIsDetected+0x28>)
 800c8d4:	f7f9 f8ea 	bl	8005aac <HAL_GPIO_ReadPin>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
}  
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	40020800 	.word	0x40020800

0800c8f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c8f8:	f000 fa26 	bl	800cd48 <osKernelSysTick>
 800c8fc:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c8fe:	e006      	b.n	800c90e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c900:	f7ff ffa6 	bl	800c850 <BSP_SD_GetCardState>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	e009      	b.n	800c922 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c90e:	f000 fa1b 	bl	800cd48 <osKernelSysTick>
 800c912:	4602      	mov	r2, r0
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d8f0      	bhi.n	800c900 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c91e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
	...

0800c92c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	4603      	mov	r3, r0
 800c934:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c936:	4b0b      	ldr	r3, [pc, #44]	; (800c964 <SD_CheckStatus+0x38>)
 800c938:	2201      	movs	r2, #1
 800c93a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c93c:	f7ff ff88 	bl	800c850 <BSP_SD_GetCardState>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d107      	bne.n	800c956 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <SD_CheckStatus+0x38>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	f023 0301 	bic.w	r3, r3, #1
 800c950:	b2da      	uxtb	r2, r3
 800c952:	4b04      	ldr	r3, [pc, #16]	; (800c964 <SD_CheckStatus+0x38>)
 800c954:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c956:	4b03      	ldr	r3, [pc, #12]	; (800c964 <SD_CheckStatus+0x38>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	b2db      	uxtb	r3, r3
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20000021 	.word	0x20000021

0800c968 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c968:	b590      	push	{r4, r7, lr}
 800c96a:	b087      	sub	sp, #28
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	4603      	mov	r3, r0
 800c970:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c972:	4b20      	ldr	r3, [pc, #128]	; (800c9f4 <SD_initialize+0x8c>)
 800c974:	2201      	movs	r2, #1
 800c976:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c978:	f000 f9da 	bl	800cd30 <osKernelRunning>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d030      	beq.n	800c9e4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c982:	f7ff ff0b 	bl	800c79c <BSP_SD_Init>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d107      	bne.n	800c99c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7ff ffcc 	bl	800c92c <SD_CheckStatus>
 800c994:	4603      	mov	r3, r0
 800c996:	461a      	mov	r2, r3
 800c998:	4b16      	ldr	r3, [pc, #88]	; (800c9f4 <SD_initialize+0x8c>)
 800c99a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c99c:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <SD_initialize+0x8c>)
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d01e      	beq.n	800c9e4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c9a6:	4b14      	ldr	r3, [pc, #80]	; (800c9f8 <SD_initialize+0x90>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10e      	bne.n	800c9cc <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c9ae:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <SD_initialize+0x94>)
 800c9b0:	f107 0408 	add.w	r4, r7, #8
 800c9b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c9ba:	f107 0308 	add.w	r3, r7, #8
 800c9be:	2100      	movs	r1, #0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fa31 	bl	800ce28 <osMessageCreate>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	4a0b      	ldr	r2, [pc, #44]	; (800c9f8 <SD_initialize+0x90>)
 800c9ca:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	; (800c9f8 <SD_initialize+0x90>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d107      	bne.n	800c9e4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c9d4:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <SD_initialize+0x8c>)
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	f043 0301 	orr.w	r3, r3, #1
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	4b04      	ldr	r3, [pc, #16]	; (800c9f4 <SD_initialize+0x8c>)
 800c9e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c9e4:	4b03      	ldr	r3, [pc, #12]	; (800c9f4 <SD_initialize+0x8c>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	b2db      	uxtb	r3, r3
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	371c      	adds	r7, #28
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd90      	pop	{r4, r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20000021 	.word	0x20000021
 800c9f8:	200003f0 	.word	0x200003f0
 800c9fc:	08029724 	.word	0x08029724

0800ca00 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca0a:	79fb      	ldrb	r3, [r7, #7]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7ff ff8d 	bl	800c92c <SD_CheckStatus>
 800ca12:	4603      	mov	r3, r0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b08a      	sub	sp, #40	; 0x28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60b9      	str	r1, [r7, #8]
 800ca24:	607a      	str	r2, [r7, #4]
 800ca26:	603b      	str	r3, [r7, #0]
 800ca28:	4603      	mov	r3, r0
 800ca2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca32:	f247 5030 	movw	r0, #30000	; 0x7530
 800ca36:	f7ff ff5b 	bl	800c8f0 <SD_CheckStatusWithTimeout>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	da02      	bge.n	800ca46 <SD_read+0x2a>
  {
    return res;
 800ca40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca44:	e032      	b.n	800caac <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	6879      	ldr	r1, [r7, #4]
 800ca4a:	68b8      	ldr	r0, [r7, #8]
 800ca4c:	f7ff fecc 	bl	800c7e8 <BSP_SD_ReadBlocks_DMA>
 800ca50:	4603      	mov	r3, r0
 800ca52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800ca56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d124      	bne.n	800caa8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ca5e:	4b15      	ldr	r3, [pc, #84]	; (800cab4 <SD_read+0x98>)
 800ca60:	6819      	ldr	r1, [r3, #0]
 800ca62:	f107 0314 	add.w	r3, r7, #20
 800ca66:	f247 5230 	movw	r2, #30000	; 0x7530
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 fa44 	bl	800cef8 <osMessageGet>

    if (event.status == osEventMessage)
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2b10      	cmp	r3, #16
 800ca74:	d118      	bne.n	800caa8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d115      	bne.n	800caa8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ca7c:	f000 f964 	bl	800cd48 <osKernelSysTick>
 800ca80:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ca82:	e008      	b.n	800ca96 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ca84:	f7ff fee4 	bl	800c850 <BSP_SD_GetCardState>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d103      	bne.n	800ca96 <SD_read+0x7a>
              {
                res = RES_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ca94:	e008      	b.n	800caa8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ca96:	f000 f957 	bl	800cd48 <osKernelSysTick>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	f247 522f 	movw	r2, #29999	; 0x752f
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d9ed      	bls.n	800ca84 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800caa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800caac:	4618      	mov	r0, r3
 800caae:	3728      	adds	r7, #40	; 0x28
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	200003f0 	.word	0x200003f0

0800cab8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	; 0x28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60b9      	str	r1, [r7, #8]
 800cac0:	607a      	str	r2, [r7, #4]
 800cac2:	603b      	str	r3, [r7, #0]
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cace:	f247 5030 	movw	r0, #30000	; 0x7530
 800cad2:	f7ff ff0d 	bl	800c8f0 <SD_CheckStatusWithTimeout>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	da02      	bge.n	800cae2 <SD_write+0x2a>
  {
    return res;
 800cadc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae0:	e02e      	b.n	800cb40 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	6879      	ldr	r1, [r7, #4]
 800cae6:	68b8      	ldr	r0, [r7, #8]
 800cae8:	f7ff fe98 	bl	800c81c <BSP_SD_WriteBlocks_DMA>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d124      	bne.n	800cb3c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800caf2:	4b15      	ldr	r3, [pc, #84]	; (800cb48 <SD_write+0x90>)
 800caf4:	6819      	ldr	r1, [r3, #0]
 800caf6:	f107 0314 	add.w	r3, r7, #20
 800cafa:	f247 5230 	movw	r2, #30000	; 0x7530
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 f9fa 	bl	800cef8 <osMessageGet>

    if (event.status == osEventMessage)
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2b10      	cmp	r3, #16
 800cb08:	d118      	bne.n	800cb3c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d115      	bne.n	800cb3c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800cb10:	f000 f91a 	bl	800cd48 <osKernelSysTick>
 800cb14:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cb16:	e008      	b.n	800cb2a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb18:	f7ff fe9a 	bl	800c850 <BSP_SD_GetCardState>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d103      	bne.n	800cb2a <SD_write+0x72>
          {
            res = RES_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cb28:	e008      	b.n	800cb3c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cb2a:	f000 f90d 	bl	800cd48 <osKernelSysTick>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	f247 522f 	movw	r2, #29999	; 0x752f
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d9ed      	bls.n	800cb18 <SD_write+0x60>
    }

  }
#endif

  return res;
 800cb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3728      	adds	r7, #40	; 0x28
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	200003f0 	.word	0x200003f0

0800cb4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08c      	sub	sp, #48	; 0x30
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	4603      	mov	r3, r0
 800cb54:	603a      	str	r2, [r7, #0]
 800cb56:	71fb      	strb	r3, [r7, #7]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb62:	4b25      	ldr	r3, [pc, #148]	; (800cbf8 <SD_ioctl+0xac>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <SD_ioctl+0x28>
 800cb70:	2303      	movs	r3, #3
 800cb72:	e03c      	b.n	800cbee <SD_ioctl+0xa2>

  switch (cmd)
 800cb74:	79bb      	ldrb	r3, [r7, #6]
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d834      	bhi.n	800cbe4 <SD_ioctl+0x98>
 800cb7a:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <SD_ioctl+0x34>)
 800cb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb80:	0800cb91 	.word	0x0800cb91
 800cb84:	0800cb99 	.word	0x0800cb99
 800cb88:	0800cbb1 	.word	0x0800cbb1
 800cb8c:	0800cbcb 	.word	0x0800cbcb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cb96:	e028      	b.n	800cbea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cb98:	f107 030c 	add.w	r3, r7, #12
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff fe67 	bl	800c870 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbae:	e01c      	b.n	800cbea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbb0:	f107 030c 	add.w	r3, r7, #12
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff fe5b 	bl	800c870 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbc8:	e00f      	b.n	800cbea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbca:	f107 030c 	add.w	r3, r7, #12
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff fe4e 	bl	800c870 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd6:	0a5a      	lsrs	r2, r3, #9
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbe2:	e002      	b.n	800cbea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cbe4:	2304      	movs	r3, #4
 800cbe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cbea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3730      	adds	r7, #48	; 0x30
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000021 	.word	0x20000021

0800cbfc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800cc00:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <BSP_SD_ReadCpltCallback+0x18>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2200      	movs	r2, #0
 800cc06:	2101      	movs	r1, #1
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 f935 	bl	800ce78 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800cc0e:	bf00      	nop
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	200003f0 	.word	0x200003f0

0800cc18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	4613      	mov	r3, r2
 800cc24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc26:	2301      	movs	r3, #1
 800cc28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc2e:	4b1f      	ldr	r3, [pc, #124]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc30:	7a5b      	ldrb	r3, [r3, #9]
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d131      	bne.n	800cc9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc38:	4b1c      	ldr	r3, [pc, #112]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc3a:	7a5b      	ldrb	r3, [r3, #9]
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	461a      	mov	r2, r3
 800cc40:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc42:	2100      	movs	r1, #0
 800cc44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc46:	4b19      	ldr	r3, [pc, #100]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc48:	7a5b      	ldrb	r3, [r3, #9]
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	4a17      	ldr	r2, [pc, #92]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc56:	4b15      	ldr	r3, [pc, #84]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc58:	7a5b      	ldrb	r3, [r3, #9]
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	4b13      	ldr	r3, [pc, #76]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc60:	4413      	add	r3, r2
 800cc62:	79fa      	ldrb	r2, [r7, #7]
 800cc64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc66:	4b11      	ldr	r3, [pc, #68]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc68:	7a5b      	ldrb	r3, [r3, #9]
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	b2d1      	uxtb	r1, r2
 800cc70:	4a0e      	ldr	r2, [pc, #56]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc72:	7251      	strb	r1, [r2, #9]
 800cc74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc76:	7dbb      	ldrb	r3, [r7, #22]
 800cc78:	3330      	adds	r3, #48	; 0x30
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	3301      	adds	r3, #1
 800cc84:	223a      	movs	r2, #58	; 0x3a
 800cc86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	3302      	adds	r3, #2
 800cc8c:	222f      	movs	r2, #47	; 0x2f
 800cc8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	3303      	adds	r3, #3
 800cc94:	2200      	movs	r2, #0
 800cc96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	200003f4 	.word	0x200003f4

0800ccb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ccba:	2200      	movs	r2, #0
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff ffaa 	bl	800cc18 <FATFS_LinkDriverEx>
 800ccc4:	4603      	mov	r3, r0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ccdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cce0:	2b84      	cmp	r3, #132	; 0x84
 800cce2:	d005      	beq.n	800ccf0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cce4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4413      	add	r3, r2
 800ccec:	3303      	adds	r3, #3
 800ccee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b083      	sub	sp, #12
 800cd02:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd04:	f3ef 8305 	mrs	r3, IPSR
 800cd08:	607b      	str	r3, [r7, #4]
  return(result);
 800cd0a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	bf14      	ite	ne
 800cd10:	2301      	movne	r3, #1
 800cd12:	2300      	moveq	r3, #0
 800cd14:	b2db      	uxtb	r3, r3
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cd26:	f001 fb1d 	bl	800e364 <vTaskStartScheduler>
  
  return osOK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800cd34:	f001 ff70 	bl	800ec18 <xTaskGetSchedulerState>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d101      	bne.n	800cd42 <osKernelRunning+0x12>
    return 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e000      	b.n	800cd44 <osKernelRunning+0x14>
  else
    return 1;
 800cd42:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cd4c:	f7ff ffd7 	bl	800ccfe <inHandlerMode>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d003      	beq.n	800cd5e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cd56:	f001 fc25 	bl	800e5a4 <xTaskGetTickCountFromISR>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	e002      	b.n	800cd64 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cd5e:	f001 fc11 	bl	800e584 <xTaskGetTickCount>
 800cd62:	4603      	mov	r3, r0
  }
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd6a:	b089      	sub	sp, #36	; 0x24
 800cd6c:	af04      	add	r7, sp, #16
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d020      	beq.n	800cdbc <osThreadCreate+0x54>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01c      	beq.n	800cdbc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685c      	ldr	r4, [r3, #4]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681d      	ldr	r5, [r3, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	691e      	ldr	r6, [r3, #16]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff ff9a 	bl	800ccce <makeFreeRtosPriority>
 800cd9a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cda4:	9202      	str	r2, [sp, #8]
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	9100      	str	r1, [sp, #0]
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	4632      	mov	r2, r6
 800cdae:	4629      	mov	r1, r5
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f001 f8fb 	bl	800dfac <xTaskCreateStatic>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	e01c      	b.n	800cdf6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685c      	ldr	r4, [r3, #4]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdc8:	b29e      	uxth	r6, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff ff7c 	bl	800ccce <makeFreeRtosPriority>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	f107 030c 	add.w	r3, r7, #12
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	9200      	str	r2, [sp, #0]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	4632      	mov	r2, r6
 800cde4:	4629      	mov	r1, r5
 800cde6:	4620      	mov	r0, r4
 800cde8:	f001 f943 	bl	800e072 <xTaskCreate>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d001      	beq.n	800cdf6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e000      	b.n	800cdf8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce00 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d001      	beq.n	800ce16 <osDelay+0x16>
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	e000      	b.n	800ce18 <osDelay+0x18>
 800ce16:	2301      	movs	r3, #1
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f001 fa6d 	bl	800e2f8 <vTaskDelay>
  
  return osOK;
 800ce1e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ce28:	b590      	push	{r4, r7, lr}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af02      	add	r7, sp, #8
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d011      	beq.n	800ce5e <osMessageCreate+0x36>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00d      	beq.n	800ce5e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6818      	ldr	r0, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6859      	ldr	r1, [r3, #4]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	689a      	ldr	r2, [r3, #8]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	2400      	movs	r4, #0
 800ce54:	9400      	str	r4, [sp, #0]
 800ce56:	f000 f9e1 	bl	800d21c <xQueueGenericCreateStatic>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	e008      	b.n	800ce70 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6818      	ldr	r0, [r3, #0]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	4619      	mov	r1, r3
 800ce6a:	f000 fa59 	bl	800d320 <xQueueGenericCreate>
 800ce6e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd90      	pop	{r4, r7, pc}

0800ce78 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ce84:	2300      	movs	r3, #0
 800ce86:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d101      	bne.n	800ce96 <osMessagePut+0x1e>
    ticks = 1;
 800ce92:	2301      	movs	r3, #1
 800ce94:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ce96:	f7ff ff32 	bl	800ccfe <inHandlerMode>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d018      	beq.n	800ced2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cea0:	f107 0210 	add.w	r2, r7, #16
 800cea4:	f107 0108 	add.w	r1, r7, #8
 800cea8:	2300      	movs	r3, #0
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f000 fba0 	bl	800d5f0 <xQueueGenericSendFromISR>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d001      	beq.n	800ceba <osMessagePut+0x42>
      return osErrorOS;
 800ceb6:	23ff      	movs	r3, #255	; 0xff
 800ceb8:	e018      	b.n	800ceec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d014      	beq.n	800ceea <osMessagePut+0x72>
 800cec0:	4b0c      	ldr	r3, [pc, #48]	; (800cef4 <osMessagePut+0x7c>)
 800cec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	e00b      	b.n	800ceea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ced2:	f107 0108 	add.w	r1, r7, #8
 800ced6:	2300      	movs	r3, #0
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 fa82 	bl	800d3e4 <xQueueGenericSend>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d001      	beq.n	800ceea <osMessagePut+0x72>
      return osErrorOS;
 800cee6:	23ff      	movs	r3, #255	; 0xff
 800cee8:	e000      	b.n	800ceec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	e000ed04 	.word	0xe000ed04

0800cef8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b08b      	sub	sp, #44	; 0x2c
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10a      	bne.n	800cf28 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cf12:	2380      	movs	r3, #128	; 0x80
 800cf14:	617b      	str	r3, [r7, #20]
    return event;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	461c      	mov	r4, r3
 800cf1a:	f107 0314 	add.w	r3, r7, #20
 800cf1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf26:	e054      	b.n	800cfd2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf36:	d103      	bne.n	800cf40 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cf38:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf3e:	e009      	b.n	800cf54 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d006      	beq.n	800cf54 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d101      	bne.n	800cf54 <osMessageGet+0x5c>
      ticks = 1;
 800cf50:	2301      	movs	r3, #1
 800cf52:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cf54:	f7ff fed3 	bl	800ccfe <inHandlerMode>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d01c      	beq.n	800cf98 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cf5e:	f107 0220 	add.w	r2, r7, #32
 800cf62:	f107 0314 	add.w	r3, r7, #20
 800cf66:	3304      	adds	r3, #4
 800cf68:	4619      	mov	r1, r3
 800cf6a:	68b8      	ldr	r0, [r7, #8]
 800cf6c:	f000 fe70 	bl	800dc50 <xQueueReceiveFromISR>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d102      	bne.n	800cf7c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cf76:	2310      	movs	r3, #16
 800cf78:	617b      	str	r3, [r7, #20]
 800cf7a:	e001      	b.n	800cf80 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf80:	6a3b      	ldr	r3, [r7, #32]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d01d      	beq.n	800cfc2 <osMessageGet+0xca>
 800cf86:	4b15      	ldr	r3, [pc, #84]	; (800cfdc <osMessageGet+0xe4>)
 800cf88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	e014      	b.n	800cfc2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cf98:	f107 0314 	add.w	r3, r7, #20
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	68b8      	ldr	r0, [r7, #8]
 800cfa4:	f000 fc5a 	bl	800d85c <xQueueReceive>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d102      	bne.n	800cfb4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cfae:	2310      	movs	r3, #16
 800cfb0:	617b      	str	r3, [r7, #20]
 800cfb2:	e006      	b.n	800cfc2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <osMessageGet+0xc6>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	e000      	b.n	800cfc0 <osMessageGet+0xc8>
 800cfbe:	2340      	movs	r3, #64	; 0x40
 800cfc0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	461c      	mov	r4, r3
 800cfc6:	f107 0314 	add.w	r3, r7, #20
 800cfca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	372c      	adds	r7, #44	; 0x2c
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd90      	pop	{r4, r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	e000ed04 	.word	0xe000ed04

0800cfe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f103 0208 	add.w	r2, r3, #8
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f04f 32ff 	mov.w	r2, #4294967295
 800cff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f103 0208 	add.w	r2, r3, #8
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f103 0208 	add.w	r2, r3, #8
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d03a:	b480      	push	{r7}
 800d03c:	b085      	sub	sp, #20
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	689a      	ldr	r2, [r3, #8]
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	1c5a      	adds	r2, r3, #1
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
}
 800d076:	bf00      	nop
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d098:	d103      	bne.n	800d0a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	60fb      	str	r3, [r7, #12]
 800d0a0:	e00c      	b.n	800d0bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	60fb      	str	r3, [r7, #12]
 800d0a8:	e002      	b.n	800d0b0 <vListInsert+0x2e>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d2f6      	bcs.n	800d0aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	601a      	str	r2, [r3, #0]
}
 800d0e8:	bf00      	nop
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	6892      	ldr	r2, [r2, #8]
 800d10a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	6852      	ldr	r2, [r2, #4]
 800d114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d103      	bne.n	800d128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689a      	ldr	r2, [r3, #8]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	1e5a      	subs	r2, r3, #1
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3714      	adds	r7, #20
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10c      	bne.n	800d176 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	b672      	cpsid	i
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	b662      	cpsie	i
 800d170:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d176:	f002 f899 	bl	800f2ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d182:	68f9      	ldr	r1, [r7, #12]
 800d184:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d186:	fb01 f303 	mul.w	r3, r1, r3
 800d18a:	441a      	add	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	68f9      	ldr	r1, [r7, #12]
 800d1aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1ac:	fb01 f303 	mul.w	r3, r1, r3
 800d1b0:	441a      	add	r2, r3
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	22ff      	movs	r2, #255	; 0xff
 800d1ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	22ff      	movs	r2, #255	; 0xff
 800d1c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d114      	bne.n	800d1f6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01a      	beq.n	800d20a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	3310      	adds	r3, #16
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f001 fb57 	bl	800e88c <xTaskRemoveFromEventList>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d012      	beq.n	800d20a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d1e4:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <xQueueGenericReset+0xd0>)
 800d1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	e009      	b.n	800d20a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3310      	adds	r3, #16
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff fef0 	bl	800cfe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	3324      	adds	r3, #36	; 0x24
 800d204:	4618      	mov	r0, r3
 800d206:	f7ff feeb 	bl	800cfe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d20a:	f002 f883 	bl	800f314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d20e:	2301      	movs	r3, #1
}
 800d210:	4618      	mov	r0, r3
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	e000ed04 	.word	0xe000ed04

0800d21c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08e      	sub	sp, #56	; 0x38
 800d220:	af02      	add	r7, sp, #8
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d10c      	bne.n	800d24a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	b672      	cpsid	i
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	b662      	cpsie	i
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d246:	bf00      	nop
 800d248:	e7fe      	b.n	800d248 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10c      	bne.n	800d26a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	b672      	cpsid	i
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	b662      	cpsie	i
 800d264:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d266:	bf00      	nop
 800d268:	e7fe      	b.n	800d268 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <xQueueGenericCreateStatic+0x5a>
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <xQueueGenericCreateStatic+0x5e>
 800d276:	2301      	movs	r3, #1
 800d278:	e000      	b.n	800d27c <xQueueGenericCreateStatic+0x60>
 800d27a:	2300      	movs	r3, #0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d10c      	bne.n	800d29a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	b672      	cpsid	i
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	b662      	cpsie	i
 800d294:	623b      	str	r3, [r7, #32]
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d102      	bne.n	800d2a6 <xQueueGenericCreateStatic+0x8a>
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d101      	bne.n	800d2aa <xQueueGenericCreateStatic+0x8e>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e000      	b.n	800d2ac <xQueueGenericCreateStatic+0x90>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10c      	bne.n	800d2ca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	b672      	cpsid	i
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	b662      	cpsie	i
 800d2c4:	61fb      	str	r3, [r7, #28]
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d2ca:	2348      	movs	r3, #72	; 0x48
 800d2cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2b48      	cmp	r3, #72	; 0x48
 800d2d2:	d00c      	beq.n	800d2ee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d8:	b672      	cpsid	i
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	b662      	cpsie	i
 800d2e8:	61bb      	str	r3, [r7, #24]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d2ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00d      	beq.n	800d316 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d302:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	4613      	mov	r3, r2
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	68b9      	ldr	r1, [r7, #8]
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f000 f847 	bl	800d3a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d318:	4618      	mov	r0, r3
 800d31a:	3730      	adds	r7, #48	; 0x30
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08a      	sub	sp, #40	; 0x28
 800d324:	af02      	add	r7, sp, #8
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	4613      	mov	r3, r2
 800d32c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10c      	bne.n	800d34e <xQueueGenericCreate+0x2e>
	__asm volatile
 800d334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d338:	b672      	cpsid	i
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	b662      	cpsie	i
 800d348:	613b      	str	r3, [r7, #16]
}
 800d34a:	bf00      	nop
 800d34c:	e7fe      	b.n	800d34c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d102      	bne.n	800d35a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d354:	2300      	movs	r3, #0
 800d356:	61fb      	str	r3, [r7, #28]
 800d358:	e004      	b.n	800d364 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	fb02 f303 	mul.w	r3, r2, r3
 800d362:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	3348      	adds	r3, #72	; 0x48
 800d368:	4618      	mov	r0, r3
 800d36a:	f002 f8cb 	bl	800f504 <pvPortMalloc>
 800d36e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d011      	beq.n	800d39a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	3348      	adds	r3, #72	; 0x48
 800d37e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d388:	79fa      	ldrb	r2, [r7, #7]
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	4613      	mov	r3, r2
 800d390:	697a      	ldr	r2, [r7, #20]
 800d392:	68b9      	ldr	r1, [r7, #8]
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f000 f805 	bl	800d3a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d39a:	69bb      	ldr	r3, [r7, #24]
	}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3720      	adds	r7, #32
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
 800d3b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d103      	bne.n	800d3c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	e002      	b.n	800d3c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	69b8      	ldr	r0, [r7, #24]
 800d3d6:	f7ff feb7 	bl	800d148 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d3da:	bf00      	nop
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
	...

0800d3e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08e      	sub	sp, #56	; 0x38
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
 800d3f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10c      	bne.n	800d41a <xQueueGenericSend+0x36>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	b672      	cpsid	i
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	b662      	cpsie	i
 800d414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d416:	bf00      	nop
 800d418:	e7fe      	b.n	800d418 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d103      	bne.n	800d428 <xQueueGenericSend+0x44>
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <xQueueGenericSend+0x48>
 800d428:	2301      	movs	r3, #1
 800d42a:	e000      	b.n	800d42e <xQueueGenericSend+0x4a>
 800d42c:	2300      	movs	r3, #0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10c      	bne.n	800d44c <xQueueGenericSend+0x68>
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	b672      	cpsid	i
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	b662      	cpsie	i
 800d446:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d448:	bf00      	nop
 800d44a:	e7fe      	b.n	800d44a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d103      	bne.n	800d45a <xQueueGenericSend+0x76>
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d456:	2b01      	cmp	r3, #1
 800d458:	d101      	bne.n	800d45e <xQueueGenericSend+0x7a>
 800d45a:	2301      	movs	r3, #1
 800d45c:	e000      	b.n	800d460 <xQueueGenericSend+0x7c>
 800d45e:	2300      	movs	r3, #0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d10c      	bne.n	800d47e <xQueueGenericSend+0x9a>
	__asm volatile
 800d464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d468:	b672      	cpsid	i
 800d46a:	f383 8811 	msr	BASEPRI, r3
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	b662      	cpsie	i
 800d478:	623b      	str	r3, [r7, #32]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d47e:	f001 fbcb 	bl	800ec18 <xTaskGetSchedulerState>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d102      	bne.n	800d48e <xQueueGenericSend+0xaa>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <xQueueGenericSend+0xae>
 800d48e:	2301      	movs	r3, #1
 800d490:	e000      	b.n	800d494 <xQueueGenericSend+0xb0>
 800d492:	2300      	movs	r3, #0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10c      	bne.n	800d4b2 <xQueueGenericSend+0xce>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49c:	b672      	cpsid	i
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	b662      	cpsie	i
 800d4ac:	61fb      	str	r3, [r7, #28]
}
 800d4ae:	bf00      	nop
 800d4b0:	e7fe      	b.n	800d4b0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4b2:	f001 fefb 	bl	800f2ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d302      	bcc.n	800d4c8 <xQueueGenericSend+0xe4>
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d129      	bne.n	800d51c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4c8:	683a      	ldr	r2, [r7, #0]
 800d4ca:	68b9      	ldr	r1, [r7, #8]
 800d4cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4ce:	f000 fc5d 	bl	800dd8c <prvCopyDataToQueue>
 800d4d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d010      	beq.n	800d4fe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4de:	3324      	adds	r3, #36	; 0x24
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f001 f9d3 	bl	800e88c <xTaskRemoveFromEventList>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d013      	beq.n	800d514 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d4ec:	4b3f      	ldr	r3, [pc, #252]	; (800d5ec <xQueueGenericSend+0x208>)
 800d4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	e00a      	b.n	800d514 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	2b00      	cmp	r3, #0
 800d502:	d007      	beq.n	800d514 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d504:	4b39      	ldr	r3, [pc, #228]	; (800d5ec <xQueueGenericSend+0x208>)
 800d506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d514:	f001 fefe 	bl	800f314 <vPortExitCritical>
				return pdPASS;
 800d518:	2301      	movs	r3, #1
 800d51a:	e063      	b.n	800d5e4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d103      	bne.n	800d52a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d522:	f001 fef7 	bl	800f314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d526:	2300      	movs	r3, #0
 800d528:	e05c      	b.n	800d5e4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d106      	bne.n	800d53e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d530:	f107 0314 	add.w	r3, r7, #20
 800d534:	4618      	mov	r0, r3
 800d536:	f001 fa0d 	bl	800e954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d53a:	2301      	movs	r3, #1
 800d53c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d53e:	f001 fee9 	bl	800f314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d542:	f000 ff73 	bl	800e42c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d546:	f001 feb1 	bl	800f2ac <vPortEnterCritical>
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d550:	b25b      	sxtb	r3, r3
 800d552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d556:	d103      	bne.n	800d560 <xQueueGenericSend+0x17c>
 800d558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d566:	b25b      	sxtb	r3, r3
 800d568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56c:	d103      	bne.n	800d576 <xQueueGenericSend+0x192>
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d576:	f001 fecd 	bl	800f314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d57a:	1d3a      	adds	r2, r7, #4
 800d57c:	f107 0314 	add.w	r3, r7, #20
 800d580:	4611      	mov	r1, r2
 800d582:	4618      	mov	r0, r3
 800d584:	f001 f9fc 	bl	800e980 <xTaskCheckForTimeOut>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d124      	bne.n	800d5d8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d58e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d590:	f000 fcf4 	bl	800df7c <prvIsQueueFull>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d018      	beq.n	800d5cc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59c:	3310      	adds	r3, #16
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f001 f94c 	bl	800e840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5aa:	f000 fc7f 	bl	800deac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d5ae:	f000 ff4b 	bl	800e448 <xTaskResumeAll>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f47f af7c 	bne.w	800d4b2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d5ba:	4b0c      	ldr	r3, [pc, #48]	; (800d5ec <xQueueGenericSend+0x208>)
 800d5bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	e772      	b.n	800d4b2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d5cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ce:	f000 fc6d 	bl	800deac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5d2:	f000 ff39 	bl	800e448 <xTaskResumeAll>
 800d5d6:	e76c      	b.n	800d4b2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d5d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5da:	f000 fc67 	bl	800deac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5de:	f000 ff33 	bl	800e448 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d5e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3738      	adds	r7, #56	; 0x38
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	e000ed04 	.word	0xe000ed04

0800d5f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b08e      	sub	sp, #56	; 0x38
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
 800d5fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10c      	bne.n	800d622 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	b672      	cpsid	i
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	b662      	cpsie	i
 800d61c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d61e:	bf00      	nop
 800d620:	e7fe      	b.n	800d620 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d103      	bne.n	800d630 <xQueueGenericSendFromISR+0x40>
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d101      	bne.n	800d634 <xQueueGenericSendFromISR+0x44>
 800d630:	2301      	movs	r3, #1
 800d632:	e000      	b.n	800d636 <xQueueGenericSendFromISR+0x46>
 800d634:	2300      	movs	r3, #0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10c      	bne.n	800d654 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63e:	b672      	cpsid	i
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	b662      	cpsie	i
 800d64e:	623b      	str	r3, [r7, #32]
}
 800d650:	bf00      	nop
 800d652:	e7fe      	b.n	800d652 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b02      	cmp	r3, #2
 800d658:	d103      	bne.n	800d662 <xQueueGenericSendFromISR+0x72>
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d101      	bne.n	800d666 <xQueueGenericSendFromISR+0x76>
 800d662:	2301      	movs	r3, #1
 800d664:	e000      	b.n	800d668 <xQueueGenericSendFromISR+0x78>
 800d666:	2300      	movs	r3, #0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10c      	bne.n	800d686 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d670:	b672      	cpsid	i
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	b662      	cpsie	i
 800d680:	61fb      	str	r3, [r7, #28]
}
 800d682:	bf00      	nop
 800d684:	e7fe      	b.n	800d684 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d686:	f001 fef9 	bl	800f47c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d68a:	f3ef 8211 	mrs	r2, BASEPRI
 800d68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d692:	b672      	cpsid	i
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	b662      	cpsie	i
 800d6a2:	61ba      	str	r2, [r7, #24]
 800d6a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d6a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d302      	bcc.n	800d6bc <xQueueGenericSendFromISR+0xcc>
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	2b02      	cmp	r3, #2
 800d6ba:	d12c      	bne.n	800d716 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6c6:	683a      	ldr	r2, [r7, #0]
 800d6c8:	68b9      	ldr	r1, [r7, #8]
 800d6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6cc:	f000 fb5e 	bl	800dd8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d6d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d8:	d112      	bne.n	800d700 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d016      	beq.n	800d710 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	3324      	adds	r3, #36	; 0x24
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f001 f8d0 	bl	800e88c <xTaskRemoveFromEventList>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00e      	beq.n	800d710 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00b      	beq.n	800d710 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	e007      	b.n	800d710 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d700:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d704:	3301      	adds	r3, #1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	b25a      	sxtb	r2, r3
 800d70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d710:	2301      	movs	r3, #1
 800d712:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d714:	e001      	b.n	800d71a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d716:	2300      	movs	r3, #0
 800d718:	637b      	str	r3, [r7, #52]	; 0x34
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d724:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3738      	adds	r7, #56	; 0x38
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b08e      	sub	sp, #56	; 0x38
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10c      	bne.n	800d75e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d748:	b672      	cpsid	i
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	b662      	cpsie	i
 800d758:	623b      	str	r3, [r7, #32]
}
 800d75a:	bf00      	nop
 800d75c:	e7fe      	b.n	800d75c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00c      	beq.n	800d780 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76a:	b672      	cpsid	i
 800d76c:	f383 8811 	msr	BASEPRI, r3
 800d770:	f3bf 8f6f 	isb	sy
 800d774:	f3bf 8f4f 	dsb	sy
 800d778:	b662      	cpsie	i
 800d77a:	61fb      	str	r3, [r7, #28]
}
 800d77c:	bf00      	nop
 800d77e:	e7fe      	b.n	800d77e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d103      	bne.n	800d790 <xQueueGiveFromISR+0x60>
 800d788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <xQueueGiveFromISR+0x64>
 800d790:	2301      	movs	r3, #1
 800d792:	e000      	b.n	800d796 <xQueueGiveFromISR+0x66>
 800d794:	2300      	movs	r3, #0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10c      	bne.n	800d7b4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	b672      	cpsid	i
 800d7a0:	f383 8811 	msr	BASEPRI, r3
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	b662      	cpsie	i
 800d7ae:	61bb      	str	r3, [r7, #24]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7b4:	f001 fe62 	bl	800f47c <vPortValidateInterruptPriority>
	__asm volatile
 800d7b8:	f3ef 8211 	mrs	r2, BASEPRI
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	b672      	cpsid	i
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	b662      	cpsie	i
 800d7d0:	617a      	str	r2, [r7, #20]
 800d7d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d7d4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7dc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d22b      	bcs.n	800d840 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	1c5a      	adds	r2, r3, #1
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d802:	d112      	bne.n	800d82a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d016      	beq.n	800d83a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80e:	3324      	adds	r3, #36	; 0x24
 800d810:	4618      	mov	r0, r3
 800d812:	f001 f83b 	bl	800e88c <xTaskRemoveFromEventList>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00e      	beq.n	800d83a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00b      	beq.n	800d83a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2201      	movs	r2, #1
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	e007      	b.n	800d83a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d82a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d82e:	3301      	adds	r3, #1
 800d830:	b2db      	uxtb	r3, r3
 800d832:	b25a      	sxtb	r2, r3
 800d834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d83a:	2301      	movs	r3, #1
 800d83c:	637b      	str	r3, [r7, #52]	; 0x34
 800d83e:	e001      	b.n	800d844 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d840:	2300      	movs	r3, #0
 800d842:	637b      	str	r3, [r7, #52]	; 0x34
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f383 8811 	msr	BASEPRI, r3
}
 800d84e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d852:	4618      	mov	r0, r3
 800d854:	3738      	adds	r7, #56	; 0x38
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b08c      	sub	sp, #48	; 0x30
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d868:	2300      	movs	r3, #0
 800d86a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d872:	2b00      	cmp	r3, #0
 800d874:	d10c      	bne.n	800d890 <xQueueReceive+0x34>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	b672      	cpsid	i
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	b662      	cpsie	i
 800d88a:	623b      	str	r3, [r7, #32]
}
 800d88c:	bf00      	nop
 800d88e:	e7fe      	b.n	800d88e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d103      	bne.n	800d89e <xQueueReceive+0x42>
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d101      	bne.n	800d8a2 <xQueueReceive+0x46>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e000      	b.n	800d8a4 <xQueueReceive+0x48>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10c      	bne.n	800d8c2 <xQueueReceive+0x66>
	__asm volatile
 800d8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ac:	b672      	cpsid	i
 800d8ae:	f383 8811 	msr	BASEPRI, r3
 800d8b2:	f3bf 8f6f 	isb	sy
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	b662      	cpsie	i
 800d8bc:	61fb      	str	r3, [r7, #28]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8c2:	f001 f9a9 	bl	800ec18 <xTaskGetSchedulerState>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d102      	bne.n	800d8d2 <xQueueReceive+0x76>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d101      	bne.n	800d8d6 <xQueueReceive+0x7a>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e000      	b.n	800d8d8 <xQueueReceive+0x7c>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10c      	bne.n	800d8f6 <xQueueReceive+0x9a>
	__asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	b672      	cpsid	i
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	b662      	cpsie	i
 800d8f0:	61bb      	str	r3, [r7, #24]
}
 800d8f2:	bf00      	nop
 800d8f4:	e7fe      	b.n	800d8f4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8f6:	f001 fcd9 	bl	800f2ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	2b00      	cmp	r3, #0
 800d904:	d01f      	beq.n	800d946 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d906:	68b9      	ldr	r1, [r7, #8]
 800d908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d90a:	f000 faa9 	bl	800de60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	1e5a      	subs	r2, r3, #1
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00f      	beq.n	800d93e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d920:	3310      	adds	r3, #16
 800d922:	4618      	mov	r0, r3
 800d924:	f000 ffb2 	bl	800e88c <xTaskRemoveFromEventList>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d007      	beq.n	800d93e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d92e:	4b3d      	ldr	r3, [pc, #244]	; (800da24 <xQueueReceive+0x1c8>)
 800d930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d934:	601a      	str	r2, [r3, #0]
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d93e:	f001 fce9 	bl	800f314 <vPortExitCritical>
				return pdPASS;
 800d942:	2301      	movs	r3, #1
 800d944:	e069      	b.n	800da1a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d103      	bne.n	800d954 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d94c:	f001 fce2 	bl	800f314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d950:	2300      	movs	r3, #0
 800d952:	e062      	b.n	800da1a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d95a:	f107 0310 	add.w	r3, r7, #16
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 fff8 	bl	800e954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d964:	2301      	movs	r3, #1
 800d966:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d968:	f001 fcd4 	bl	800f314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d96c:	f000 fd5e 	bl	800e42c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d970:	f001 fc9c 	bl	800f2ac <vPortEnterCritical>
 800d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d97a:	b25b      	sxtb	r3, r3
 800d97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d980:	d103      	bne.n	800d98a <xQueueReceive+0x12e>
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	2200      	movs	r2, #0
 800d986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d990:	b25b      	sxtb	r3, r3
 800d992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d996:	d103      	bne.n	800d9a0 <xQueueReceive+0x144>
 800d998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99a:	2200      	movs	r2, #0
 800d99c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9a0:	f001 fcb8 	bl	800f314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9a4:	1d3a      	adds	r2, r7, #4
 800d9a6:	f107 0310 	add.w	r3, r7, #16
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 ffe7 	bl	800e980 <xTaskCheckForTimeOut>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d123      	bne.n	800da00 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9ba:	f000 fac9 	bl	800df50 <prvIsQueueEmpty>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d017      	beq.n	800d9f4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c6:	3324      	adds	r3, #36	; 0x24
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f000 ff37 	bl	800e840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9d4:	f000 fa6a 	bl	800deac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9d8:	f000 fd36 	bl	800e448 <xTaskResumeAll>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d189      	bne.n	800d8f6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d9e2:	4b10      	ldr	r3, [pc, #64]	; (800da24 <xQueueReceive+0x1c8>)
 800d9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	e780      	b.n	800d8f6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f6:	f000 fa59 	bl	800deac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9fa:	f000 fd25 	bl	800e448 <xTaskResumeAll>
 800d9fe:	e77a      	b.n	800d8f6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da02:	f000 fa53 	bl	800deac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da06:	f000 fd1f 	bl	800e448 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da0c:	f000 faa0 	bl	800df50 <prvIsQueueEmpty>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	f43f af6f 	beq.w	800d8f6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3730      	adds	r7, #48	; 0x30
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	e000ed04 	.word	0xe000ed04

0800da28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08e      	sub	sp, #56	; 0x38
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da32:	2300      	movs	r3, #0
 800da34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d10c      	bne.n	800da5e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800da44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da48:	b672      	cpsid	i
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	b662      	cpsie	i
 800da58:	623b      	str	r3, [r7, #32]
}
 800da5a:	bf00      	nop
 800da5c:	e7fe      	b.n	800da5c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da62:	2b00      	cmp	r3, #0
 800da64:	d00c      	beq.n	800da80 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800da66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6a:	b672      	cpsid	i
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	b662      	cpsie	i
 800da7a:	61fb      	str	r3, [r7, #28]
}
 800da7c:	bf00      	nop
 800da7e:	e7fe      	b.n	800da7e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da80:	f001 f8ca 	bl	800ec18 <xTaskGetSchedulerState>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d102      	bne.n	800da90 <xQueueSemaphoreTake+0x68>
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d101      	bne.n	800da94 <xQueueSemaphoreTake+0x6c>
 800da90:	2301      	movs	r3, #1
 800da92:	e000      	b.n	800da96 <xQueueSemaphoreTake+0x6e>
 800da94:	2300      	movs	r3, #0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10c      	bne.n	800dab4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	b672      	cpsid	i
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	b662      	cpsie	i
 800daae:	61bb      	str	r3, [r7, #24]
}
 800dab0:	bf00      	nop
 800dab2:	e7fe      	b.n	800dab2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dab4:	f001 fbfa 	bl	800f2ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d024      	beq.n	800db0e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac6:	1e5a      	subs	r2, r3, #1
 800dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d104      	bne.n	800dade <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dad4:	f001 fa66 	bl	800efa4 <pvTaskIncrementMutexHeldCount>
 800dad8:	4602      	mov	r2, r0
 800dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dadc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00f      	beq.n	800db06 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	3310      	adds	r3, #16
 800daea:	4618      	mov	r0, r3
 800daec:	f000 fece 	bl	800e88c <xTaskRemoveFromEventList>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d007      	beq.n	800db06 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800daf6:	4b55      	ldr	r3, [pc, #340]	; (800dc4c <xQueueSemaphoreTake+0x224>)
 800daf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dafc:	601a      	str	r2, [r3, #0]
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db06:	f001 fc05 	bl	800f314 <vPortExitCritical>
				return pdPASS;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e099      	b.n	800dc42 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d113      	bne.n	800db3c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800db14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00c      	beq.n	800db34 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	b672      	cpsid	i
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	b662      	cpsie	i
 800db2e:	617b      	str	r3, [r7, #20]
}
 800db30:	bf00      	nop
 800db32:	e7fe      	b.n	800db32 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db34:	f001 fbee 	bl	800f314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db38:	2300      	movs	r3, #0
 800db3a:	e082      	b.n	800dc42 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d106      	bne.n	800db50 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db42:	f107 030c 	add.w	r3, r7, #12
 800db46:	4618      	mov	r0, r3
 800db48:	f000 ff04 	bl	800e954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db4c:	2301      	movs	r3, #1
 800db4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db50:	f001 fbe0 	bl	800f314 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db54:	f000 fc6a 	bl	800e42c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db58:	f001 fba8 	bl	800f2ac <vPortEnterCritical>
 800db5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db62:	b25b      	sxtb	r3, r3
 800db64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db68:	d103      	bne.n	800db72 <xQueueSemaphoreTake+0x14a>
 800db6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db78:	b25b      	sxtb	r3, r3
 800db7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db7e:	d103      	bne.n	800db88 <xQueueSemaphoreTake+0x160>
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db88:	f001 fbc4 	bl	800f314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db8c:	463a      	mov	r2, r7
 800db8e:	f107 030c 	add.w	r3, r7, #12
 800db92:	4611      	mov	r1, r2
 800db94:	4618      	mov	r0, r3
 800db96:	f000 fef3 	bl	800e980 <xTaskCheckForTimeOut>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d132      	bne.n	800dc06 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dba2:	f000 f9d5 	bl	800df50 <prvIsQueueEmpty>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d026      	beq.n	800dbfa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d109      	bne.n	800dbc8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800dbb4:	f001 fb7a 	bl	800f2ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f001 f849 	bl	800ec54 <xTaskPriorityInherit>
 800dbc2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dbc4:	f001 fba6 	bl	800f314 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	3324      	adds	r3, #36	; 0x24
 800dbcc:	683a      	ldr	r2, [r7, #0]
 800dbce:	4611      	mov	r1, r2
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 fe35 	bl	800e840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbd8:	f000 f968 	bl	800deac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbdc:	f000 fc34 	bl	800e448 <xTaskResumeAll>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f47f af66 	bne.w	800dab4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800dbe8:	4b18      	ldr	r3, [pc, #96]	; (800dc4c <xQueueSemaphoreTake+0x224>)
 800dbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	e75c      	b.n	800dab4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dbfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbfc:	f000 f956 	bl	800deac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc00:	f000 fc22 	bl	800e448 <xTaskResumeAll>
 800dc04:	e756      	b.n	800dab4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dc06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc08:	f000 f950 	bl	800deac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc0c:	f000 fc1c 	bl	800e448 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc12:	f000 f99d 	bl	800df50 <prvIsQueueEmpty>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f43f af4b 	beq.w	800dab4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00d      	beq.n	800dc40 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800dc24:	f001 fb42 	bl	800f2ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc2a:	f000 f897 	bl	800dd5c <prvGetDisinheritPriorityAfterTimeout>
 800dc2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc36:	4618      	mov	r0, r3
 800dc38:	f001 f916 	bl	800ee68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc3c:	f001 fb6a 	bl	800f314 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3738      	adds	r7, #56	; 0x38
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	e000ed04 	.word	0xe000ed04

0800dc50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b08e      	sub	sp, #56	; 0x38
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	60b9      	str	r1, [r7, #8]
 800dc5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10c      	bne.n	800dc80 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800dc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6a:	b672      	cpsid	i
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	b662      	cpsie	i
 800dc7a:	623b      	str	r3, [r7, #32]
}
 800dc7c:	bf00      	nop
 800dc7e:	e7fe      	b.n	800dc7e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d103      	bne.n	800dc8e <xQueueReceiveFromISR+0x3e>
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <xQueueReceiveFromISR+0x42>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e000      	b.n	800dc94 <xQueueReceiveFromISR+0x44>
 800dc92:	2300      	movs	r3, #0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10c      	bne.n	800dcb2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800dc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9c:	b672      	cpsid	i
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	b662      	cpsie	i
 800dcac:	61fb      	str	r3, [r7, #28]
}
 800dcae:	bf00      	nop
 800dcb0:	e7fe      	b.n	800dcb0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcb2:	f001 fbe3 	bl	800f47c <vPortValidateInterruptPriority>
	__asm volatile
 800dcb6:	f3ef 8211 	mrs	r2, BASEPRI
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	b672      	cpsid	i
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	b662      	cpsie	i
 800dcce:	61ba      	str	r2, [r7, #24]
 800dcd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dcd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d02f      	beq.n	800dd42 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dcec:	68b9      	ldr	r1, [r7, #8]
 800dcee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcf0:	f000 f8b6 	bl	800de60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	1e5a      	subs	r2, r3, #1
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dcfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd04:	d112      	bne.n	800dd2c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd08:	691b      	ldr	r3, [r3, #16]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d016      	beq.n	800dd3c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd10:	3310      	adds	r3, #16
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 fdba 	bl	800e88c <xTaskRemoveFromEventList>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00e      	beq.n	800dd3c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00b      	beq.n	800dd3c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	601a      	str	r2, [r3, #0]
 800dd2a:	e007      	b.n	800dd3c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd30:	3301      	adds	r3, #1
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	b25a      	sxtb	r2, r3
 800dd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd40:	e001      	b.n	800dd46 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800dd42:	2300      	movs	r3, #0
 800dd44:	637b      	str	r3, [r7, #52]	; 0x34
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	f383 8811 	msr	BASEPRI, r3
}
 800dd50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3738      	adds	r7, #56	; 0x38
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d006      	beq.n	800dd7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f1c3 0307 	rsb	r3, r3, #7
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	e001      	b.n	800dd7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
	}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10d      	bne.n	800ddc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d14d      	bne.n	800de4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 ffcc 	bl	800ed54 <xTaskPriorityDisinherit>
 800ddbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	609a      	str	r2, [r3, #8]
 800ddc4:	e043      	b.n	800de4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d119      	bne.n	800de00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6858      	ldr	r0, [r3, #4]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	68b9      	ldr	r1, [r7, #8]
 800ddd8:	f01a fc62 	bl	80286a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde4:	441a      	add	r2, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	685a      	ldr	r2, [r3, #4]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d32b      	bcc.n	800de4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	605a      	str	r2, [r3, #4]
 800ddfe:	e026      	b.n	800de4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	68d8      	ldr	r0, [r3, #12]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de08:	461a      	mov	r2, r3
 800de0a:	68b9      	ldr	r1, [r7, #8]
 800de0c:	f01a fc48 	bl	80286a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	68da      	ldr	r2, [r3, #12]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de18:	425b      	negs	r3, r3
 800de1a:	441a      	add	r2, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	68da      	ldr	r2, [r3, #12]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d207      	bcs.n	800de3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	689a      	ldr	r2, [r3, #8]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de34:	425b      	negs	r3, r3
 800de36:	441a      	add	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d105      	bne.n	800de4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	3b01      	subs	r3, #1
 800de4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	1c5a      	adds	r2, r3, #1
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800de56:	697b      	ldr	r3, [r7, #20]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d018      	beq.n	800dea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68da      	ldr	r2, [r3, #12]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7a:	441a      	add	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	68da      	ldr	r2, [r3, #12]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d303      	bcc.n	800de94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68d9      	ldr	r1, [r3, #12]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de9c:	461a      	mov	r2, r3
 800de9e:	6838      	ldr	r0, [r7, #0]
 800dea0:	f01a fbfe 	bl	80286a0 <memcpy>
	}
}
 800dea4:	bf00      	nop
 800dea6:	3708      	adds	r7, #8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800deb4:	f001 f9fa 	bl	800f2ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800debe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dec0:	e011      	b.n	800dee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d012      	beq.n	800def0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	3324      	adds	r3, #36	; 0x24
 800dece:	4618      	mov	r0, r3
 800ded0:	f000 fcdc 	bl	800e88c <xTaskRemoveFromEventList>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800deda:	f000 fdb7 	bl	800ea4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dede:	7bfb      	ldrb	r3, [r7, #15]
 800dee0:	3b01      	subs	r3, #1
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deea:	2b00      	cmp	r3, #0
 800deec:	dce9      	bgt.n	800dec2 <prvUnlockQueue+0x16>
 800deee:	e000      	b.n	800def2 <prvUnlockQueue+0x46>
					break;
 800def0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	22ff      	movs	r2, #255	; 0xff
 800def6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800defa:	f001 fa0b 	bl	800f314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800defe:	f001 f9d5 	bl	800f2ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df0a:	e011      	b.n	800df30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d012      	beq.n	800df3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	3310      	adds	r3, #16
 800df18:	4618      	mov	r0, r3
 800df1a:	f000 fcb7 	bl	800e88c <xTaskRemoveFromEventList>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df24:	f000 fd92 	bl	800ea4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df28:	7bbb      	ldrb	r3, [r7, #14]
 800df2a:	3b01      	subs	r3, #1
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df34:	2b00      	cmp	r3, #0
 800df36:	dce9      	bgt.n	800df0c <prvUnlockQueue+0x60>
 800df38:	e000      	b.n	800df3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	22ff      	movs	r2, #255	; 0xff
 800df40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df44:	f001 f9e6 	bl	800f314 <vPortExitCritical>
}
 800df48:	bf00      	nop
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df58:	f001 f9a8 	bl	800f2ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df60:	2b00      	cmp	r3, #0
 800df62:	d102      	bne.n	800df6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df64:	2301      	movs	r3, #1
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	e001      	b.n	800df6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df6a:	2300      	movs	r3, #0
 800df6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df6e:	f001 f9d1 	bl	800f314 <vPortExitCritical>

	return xReturn;
 800df72:	68fb      	ldr	r3, [r7, #12]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df84:	f001 f992 	bl	800f2ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df90:	429a      	cmp	r2, r3
 800df92:	d102      	bne.n	800df9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df94:	2301      	movs	r3, #1
 800df96:	60fb      	str	r3, [r7, #12]
 800df98:	e001      	b.n	800df9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df9a:	2300      	movs	r3, #0
 800df9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df9e:	f001 f9b9 	bl	800f314 <vPortExitCritical>

	return xReturn;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08e      	sub	sp, #56	; 0x38
 800dfb0:	af04      	add	r7, sp, #16
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10c      	bne.n	800dfda <xTaskCreateStatic+0x2e>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc4:	b672      	cpsid	i
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	b662      	cpsie	i
 800dfd4:	623b      	str	r3, [r7, #32]
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800dfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10c      	bne.n	800dffa <xTaskCreateStatic+0x4e>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe4:	b672      	cpsid	i
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	b662      	cpsie	i
 800dff4:	61fb      	str	r3, [r7, #28]
}
 800dff6:	bf00      	nop
 800dff8:	e7fe      	b.n	800dff8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dffa:	2358      	movs	r3, #88	; 0x58
 800dffc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	2b58      	cmp	r3, #88	; 0x58
 800e002:	d00c      	beq.n	800e01e <xTaskCreateStatic+0x72>
	__asm volatile
 800e004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e008:	b672      	cpsid	i
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	b662      	cpsie	i
 800e018:	61bb      	str	r3, [r7, #24]
}
 800e01a:	bf00      	nop
 800e01c:	e7fe      	b.n	800e01c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e01e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e022:	2b00      	cmp	r3, #0
 800e024:	d01e      	beq.n	800e064 <xTaskCreateStatic+0xb8>
 800e026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d01b      	beq.n	800e064 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e034:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e038:	2202      	movs	r2, #2
 800e03a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e03e:	2300      	movs	r3, #0
 800e040:	9303      	str	r3, [sp, #12]
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	9302      	str	r3, [sp, #8]
 800e046:	f107 0314 	add.w	r3, r7, #20
 800e04a:	9301      	str	r3, [sp, #4]
 800e04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	68b9      	ldr	r1, [r7, #8]
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f000 f850 	bl	800e0fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e05c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e05e:	f000 f8e1 	bl	800e224 <prvAddNewTaskToReadyList>
 800e062:	e001      	b.n	800e068 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800e064:	2300      	movs	r3, #0
 800e066:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e068:	697b      	ldr	r3, [r7, #20]
	}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3728      	adds	r7, #40	; 0x28
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e072:	b580      	push	{r7, lr}
 800e074:	b08c      	sub	sp, #48	; 0x30
 800e076:	af04      	add	r7, sp, #16
 800e078:	60f8      	str	r0, [r7, #12]
 800e07a:	60b9      	str	r1, [r7, #8]
 800e07c:	603b      	str	r3, [r7, #0]
 800e07e:	4613      	mov	r3, r2
 800e080:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e082:	88fb      	ldrh	r3, [r7, #6]
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4618      	mov	r0, r3
 800e088:	f001 fa3c 	bl	800f504 <pvPortMalloc>
 800e08c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00e      	beq.n	800e0b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e094:	2058      	movs	r0, #88	; 0x58
 800e096:	f001 fa35 	bl	800f504 <pvPortMalloc>
 800e09a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d003      	beq.n	800e0aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	631a      	str	r2, [r3, #48]	; 0x30
 800e0a8:	e005      	b.n	800e0b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e0aa:	6978      	ldr	r0, [r7, #20]
 800e0ac:	f001 fafa 	bl	800f6a4 <vPortFree>
 800e0b0:	e001      	b.n	800e0b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d017      	beq.n	800e0ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0c4:	88fa      	ldrh	r2, [r7, #6]
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	9303      	str	r3, [sp, #12]
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	9302      	str	r3, [sp, #8]
 800e0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	68b9      	ldr	r1, [r7, #8]
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f000 f80e 	bl	800e0fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0e0:	69f8      	ldr	r0, [r7, #28]
 800e0e2:	f000 f89f 	bl	800e224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	61bb      	str	r3, [r7, #24]
 800e0ea:	e002      	b.n	800e0f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0f2:	69bb      	ldr	r3, [r7, #24]
	}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3720      	adds	r7, #32
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	461a      	mov	r2, r3
 800e114:	21a5      	movs	r1, #165	; 0xa5
 800e116:	f01a fad1 	bl	80286bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e11e:	6879      	ldr	r1, [r7, #4]
 800e120:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e124:	440b      	add	r3, r1
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	4413      	add	r3, r2
 800e12a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	f023 0307 	bic.w	r3, r3, #7
 800e132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00c      	beq.n	800e158 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	b672      	cpsid	i
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	b662      	cpsie	i
 800e152:	617b      	str	r3, [r7, #20]
}
 800e154:	bf00      	nop
 800e156:	e7fe      	b.n	800e156 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d01f      	beq.n	800e19e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e15e:	2300      	movs	r3, #0
 800e160:	61fb      	str	r3, [r7, #28]
 800e162:	e012      	b.n	800e18a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	4413      	add	r3, r2
 800e16a:	7819      	ldrb	r1, [r3, #0]
 800e16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	4413      	add	r3, r2
 800e172:	3334      	adds	r3, #52	; 0x34
 800e174:	460a      	mov	r2, r1
 800e176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	4413      	add	r3, r2
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d006      	beq.n	800e192 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	3301      	adds	r3, #1
 800e188:	61fb      	str	r3, [r7, #28]
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	2b0f      	cmp	r3, #15
 800e18e:	d9e9      	bls.n	800e164 <prvInitialiseNewTask+0x68>
 800e190:	e000      	b.n	800e194 <prvInitialiseNewTask+0x98>
			{
				break;
 800e192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e196:	2200      	movs	r2, #0
 800e198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e19c:	e003      	b.n	800e1a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a8:	2b06      	cmp	r3, #6
 800e1aa:	d901      	bls.n	800e1b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e1ac:	2306      	movs	r3, #6
 800e1ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1be:	2200      	movs	r2, #0
 800e1c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe ff2a 	bl	800d020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ce:	3318      	adds	r3, #24
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fe ff25 	bl	800d020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1de:	f1c3 0207 	rsb	r2, r3, #7
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	68f9      	ldr	r1, [r7, #12]
 800e204:	69b8      	ldr	r0, [r7, #24]
 800e206:	f000 ff47 	bl	800f098 <pxPortInitialiseStack>
 800e20a:	4602      	mov	r2, r0
 800e20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e21a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e21c:	bf00      	nop
 800e21e:	3720      	adds	r7, #32
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e22c:	f001 f83e 	bl	800f2ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e230:	4b2a      	ldr	r3, [pc, #168]	; (800e2dc <prvAddNewTaskToReadyList+0xb8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3301      	adds	r3, #1
 800e236:	4a29      	ldr	r2, [pc, #164]	; (800e2dc <prvAddNewTaskToReadyList+0xb8>)
 800e238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e23a:	4b29      	ldr	r3, [pc, #164]	; (800e2e0 <prvAddNewTaskToReadyList+0xbc>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d109      	bne.n	800e256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e242:	4a27      	ldr	r2, [pc, #156]	; (800e2e0 <prvAddNewTaskToReadyList+0xbc>)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e248:	4b24      	ldr	r3, [pc, #144]	; (800e2dc <prvAddNewTaskToReadyList+0xb8>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d110      	bne.n	800e272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e250:	f000 fc22 	bl	800ea98 <prvInitialiseTaskLists>
 800e254:	e00d      	b.n	800e272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e256:	4b23      	ldr	r3, [pc, #140]	; (800e2e4 <prvAddNewTaskToReadyList+0xc0>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d109      	bne.n	800e272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e25e:	4b20      	ldr	r3, [pc, #128]	; (800e2e0 <prvAddNewTaskToReadyList+0xbc>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e268:	429a      	cmp	r2, r3
 800e26a:	d802      	bhi.n	800e272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e26c:	4a1c      	ldr	r2, [pc, #112]	; (800e2e0 <prvAddNewTaskToReadyList+0xbc>)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e272:	4b1d      	ldr	r3, [pc, #116]	; (800e2e8 <prvAddNewTaskToReadyList+0xc4>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3301      	adds	r3, #1
 800e278:	4a1b      	ldr	r2, [pc, #108]	; (800e2e8 <prvAddNewTaskToReadyList+0xc4>)
 800e27a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	2201      	movs	r2, #1
 800e282:	409a      	lsls	r2, r3
 800e284:	4b19      	ldr	r3, [pc, #100]	; (800e2ec <prvAddNewTaskToReadyList+0xc8>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4313      	orrs	r3, r2
 800e28a:	4a18      	ldr	r2, [pc, #96]	; (800e2ec <prvAddNewTaskToReadyList+0xc8>)
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e292:	4613      	mov	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4a15      	ldr	r2, [pc, #84]	; (800e2f0 <prvAddNewTaskToReadyList+0xcc>)
 800e29c:	441a      	add	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	f7fe fec8 	bl	800d03a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e2aa:	f001 f833 	bl	800f314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e2ae:	4b0d      	ldr	r3, [pc, #52]	; (800e2e4 <prvAddNewTaskToReadyList+0xc0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00e      	beq.n	800e2d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2b6:	4b0a      	ldr	r3, [pc, #40]	; (800e2e0 <prvAddNewTaskToReadyList+0xbc>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d207      	bcs.n	800e2d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e2c4:	4b0b      	ldr	r3, [pc, #44]	; (800e2f4 <prvAddNewTaskToReadyList+0xd0>)
 800e2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ca:	601a      	str	r2, [r3, #0]
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2d4:	bf00      	nop
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20000500 	.word	0x20000500
 800e2e0:	20000400 	.word	0x20000400
 800e2e4:	2000050c 	.word	0x2000050c
 800e2e8:	2000051c 	.word	0x2000051c
 800e2ec:	20000508 	.word	0x20000508
 800e2f0:	20000404 	.word	0x20000404
 800e2f4:	e000ed04 	.word	0xe000ed04

0800e2f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e300:	2300      	movs	r3, #0
 800e302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d019      	beq.n	800e33e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e30a:	4b14      	ldr	r3, [pc, #80]	; (800e35c <vTaskDelay+0x64>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00c      	beq.n	800e32c <vTaskDelay+0x34>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e316:	b672      	cpsid	i
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	b662      	cpsie	i
 800e326:	60bb      	str	r3, [r7, #8]
}
 800e328:	bf00      	nop
 800e32a:	e7fe      	b.n	800e32a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e32c:	f000 f87e 	bl	800e42c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e330:	2100      	movs	r1, #0
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 fe4a 	bl	800efcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e338:	f000 f886 	bl	800e448 <xTaskResumeAll>
 800e33c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d107      	bne.n	800e354 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e344:	4b06      	ldr	r3, [pc, #24]	; (800e360 <vTaskDelay+0x68>)
 800e346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e354:	bf00      	nop
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20000528 	.word	0x20000528
 800e360:	e000ed04 	.word	0xe000ed04

0800e364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08a      	sub	sp, #40	; 0x28
 800e368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e36a:	2300      	movs	r3, #0
 800e36c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e36e:	2300      	movs	r3, #0
 800e370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e372:	463a      	mov	r2, r7
 800e374:	1d39      	adds	r1, r7, #4
 800e376:	f107 0308 	add.w	r3, r7, #8
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7f2 fbc2 	bl	8000b04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	9202      	str	r2, [sp, #8]
 800e388:	9301      	str	r3, [sp, #4]
 800e38a:	2300      	movs	r3, #0
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	2300      	movs	r3, #0
 800e390:	460a      	mov	r2, r1
 800e392:	4920      	ldr	r1, [pc, #128]	; (800e414 <vTaskStartScheduler+0xb0>)
 800e394:	4820      	ldr	r0, [pc, #128]	; (800e418 <vTaskStartScheduler+0xb4>)
 800e396:	f7ff fe09 	bl	800dfac <xTaskCreateStatic>
 800e39a:	4603      	mov	r3, r0
 800e39c:	4a1f      	ldr	r2, [pc, #124]	; (800e41c <vTaskStartScheduler+0xb8>)
 800e39e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3a0:	4b1e      	ldr	r3, [pc, #120]	; (800e41c <vTaskStartScheduler+0xb8>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d002      	beq.n	800e3ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	617b      	str	r3, [r7, #20]
 800e3ac:	e001      	b.n	800e3b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d118      	bne.n	800e3ea <vTaskStartScheduler+0x86>
	__asm volatile
 800e3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3bc:	b672      	cpsid	i
 800e3be:	f383 8811 	msr	BASEPRI, r3
 800e3c2:	f3bf 8f6f 	isb	sy
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	b662      	cpsie	i
 800e3cc:	613b      	str	r3, [r7, #16]
}
 800e3ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e3d0:	4b13      	ldr	r3, [pc, #76]	; (800e420 <vTaskStartScheduler+0xbc>)
 800e3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3d8:	4b12      	ldr	r3, [pc, #72]	; (800e424 <vTaskStartScheduler+0xc0>)
 800e3da:	2201      	movs	r2, #1
 800e3dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3de:	4b12      	ldr	r3, [pc, #72]	; (800e428 <vTaskStartScheduler+0xc4>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3e4:	f000 fee4 	bl	800f1b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3e8:	e010      	b.n	800e40c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f0:	d10c      	bne.n	800e40c <vTaskStartScheduler+0xa8>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f6:	b672      	cpsid	i
 800e3f8:	f383 8811 	msr	BASEPRI, r3
 800e3fc:	f3bf 8f6f 	isb	sy
 800e400:	f3bf 8f4f 	dsb	sy
 800e404:	b662      	cpsie	i
 800e406:	60fb      	str	r3, [r7, #12]
}
 800e408:	bf00      	nop
 800e40a:	e7fe      	b.n	800e40a <vTaskStartScheduler+0xa6>
}
 800e40c:	bf00      	nop
 800e40e:	3718      	adds	r7, #24
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	08029734 	.word	0x08029734
 800e418:	0800ea65 	.word	0x0800ea65
 800e41c:	20000524 	.word	0x20000524
 800e420:	20000520 	.word	0x20000520
 800e424:	2000050c 	.word	0x2000050c
 800e428:	20000504 	.word	0x20000504

0800e42c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e42c:	b480      	push	{r7}
 800e42e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e430:	4b04      	ldr	r3, [pc, #16]	; (800e444 <vTaskSuspendAll+0x18>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3301      	adds	r3, #1
 800e436:	4a03      	ldr	r2, [pc, #12]	; (800e444 <vTaskSuspendAll+0x18>)
 800e438:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e43a:	bf00      	nop
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr
 800e444:	20000528 	.word	0x20000528

0800e448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e452:	2300      	movs	r3, #0
 800e454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e456:	4b42      	ldr	r3, [pc, #264]	; (800e560 <xTaskResumeAll+0x118>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d10c      	bne.n	800e478 <xTaskResumeAll+0x30>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	b672      	cpsid	i
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	b662      	cpsie	i
 800e472:	603b      	str	r3, [r7, #0]
}
 800e474:	bf00      	nop
 800e476:	e7fe      	b.n	800e476 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e478:	f000 ff18 	bl	800f2ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e47c:	4b38      	ldr	r3, [pc, #224]	; (800e560 <xTaskResumeAll+0x118>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	3b01      	subs	r3, #1
 800e482:	4a37      	ldr	r2, [pc, #220]	; (800e560 <xTaskResumeAll+0x118>)
 800e484:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e486:	4b36      	ldr	r3, [pc, #216]	; (800e560 <xTaskResumeAll+0x118>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d161      	bne.n	800e552 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e48e:	4b35      	ldr	r3, [pc, #212]	; (800e564 <xTaskResumeAll+0x11c>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d05d      	beq.n	800e552 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e496:	e02e      	b.n	800e4f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e498:	4b33      	ldr	r3, [pc, #204]	; (800e568 <xTaskResumeAll+0x120>)
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	3318      	adds	r3, #24
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fe fe25 	bl	800d0f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fe fe20 	bl	800d0f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	409a      	lsls	r2, r3
 800e4bc:	4b2b      	ldr	r3, [pc, #172]	; (800e56c <xTaskResumeAll+0x124>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	4a2a      	ldr	r2, [pc, #168]	; (800e56c <xTaskResumeAll+0x124>)
 800e4c4:	6013      	str	r3, [r2, #0]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ca:	4613      	mov	r3, r2
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	4413      	add	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4a27      	ldr	r2, [pc, #156]	; (800e570 <xTaskResumeAll+0x128>)
 800e4d4:	441a      	add	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	3304      	adds	r3, #4
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4610      	mov	r0, r2
 800e4de:	f7fe fdac 	bl	800d03a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e6:	4b23      	ldr	r3, [pc, #140]	; (800e574 <xTaskResumeAll+0x12c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d302      	bcc.n	800e4f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e4f0:	4b21      	ldr	r3, [pc, #132]	; (800e578 <xTaskResumeAll+0x130>)
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4f6:	4b1c      	ldr	r3, [pc, #112]	; (800e568 <xTaskResumeAll+0x120>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1cc      	bne.n	800e498 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e504:	f000 fb68 	bl	800ebd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e508:	4b1c      	ldr	r3, [pc, #112]	; (800e57c <xTaskResumeAll+0x134>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d010      	beq.n	800e536 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e514:	f000 f858 	bl	800e5c8 <xTaskIncrementTick>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e51e:	4b16      	ldr	r3, [pc, #88]	; (800e578 <xTaskResumeAll+0x130>)
 800e520:	2201      	movs	r2, #1
 800e522:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	3b01      	subs	r3, #1
 800e528:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1f1      	bne.n	800e514 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e530:	4b12      	ldr	r3, [pc, #72]	; (800e57c <xTaskResumeAll+0x134>)
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e536:	4b10      	ldr	r3, [pc, #64]	; (800e578 <xTaskResumeAll+0x130>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d009      	beq.n	800e552 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e53e:	2301      	movs	r3, #1
 800e540:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e542:	4b0f      	ldr	r3, [pc, #60]	; (800e580 <xTaskResumeAll+0x138>)
 800e544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e548:	601a      	str	r2, [r3, #0]
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e552:	f000 fedf 	bl	800f314 <vPortExitCritical>

	return xAlreadyYielded;
 800e556:	68bb      	ldr	r3, [r7, #8]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3710      	adds	r7, #16
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	20000528 	.word	0x20000528
 800e564:	20000500 	.word	0x20000500
 800e568:	200004c0 	.word	0x200004c0
 800e56c:	20000508 	.word	0x20000508
 800e570:	20000404 	.word	0x20000404
 800e574:	20000400 	.word	0x20000400
 800e578:	20000514 	.word	0x20000514
 800e57c:	20000510 	.word	0x20000510
 800e580:	e000ed04 	.word	0xe000ed04

0800e584 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e58a:	4b05      	ldr	r3, [pc, #20]	; (800e5a0 <xTaskGetTickCount+0x1c>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e590:	687b      	ldr	r3, [r7, #4]
}
 800e592:	4618      	mov	r0, r3
 800e594:	370c      	adds	r7, #12
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	20000504 	.word	0x20000504

0800e5a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5aa:	f000 ff67 	bl	800f47c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e5b2:	4b04      	ldr	r3, [pc, #16]	; (800e5c4 <xTaskGetTickCountFromISR+0x20>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5b8:	683b      	ldr	r3, [r7, #0]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3708      	adds	r7, #8
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000504 	.word	0x20000504

0800e5c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5d2:	4b4f      	ldr	r3, [pc, #316]	; (800e710 <xTaskIncrementTick+0x148>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f040 808a 	bne.w	800e6f0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5dc:	4b4d      	ldr	r3, [pc, #308]	; (800e714 <xTaskIncrementTick+0x14c>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5e4:	4a4b      	ldr	r2, [pc, #300]	; (800e714 <xTaskIncrementTick+0x14c>)
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d122      	bne.n	800e636 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5f0:	4b49      	ldr	r3, [pc, #292]	; (800e718 <xTaskIncrementTick+0x150>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00c      	beq.n	800e614 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fe:	b672      	cpsid	i
 800e600:	f383 8811 	msr	BASEPRI, r3
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	b662      	cpsie	i
 800e60e:	603b      	str	r3, [r7, #0]
}
 800e610:	bf00      	nop
 800e612:	e7fe      	b.n	800e612 <xTaskIncrementTick+0x4a>
 800e614:	4b40      	ldr	r3, [pc, #256]	; (800e718 <xTaskIncrementTick+0x150>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	60fb      	str	r3, [r7, #12]
 800e61a:	4b40      	ldr	r3, [pc, #256]	; (800e71c <xTaskIncrementTick+0x154>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a3e      	ldr	r2, [pc, #248]	; (800e718 <xTaskIncrementTick+0x150>)
 800e620:	6013      	str	r3, [r2, #0]
 800e622:	4a3e      	ldr	r2, [pc, #248]	; (800e71c <xTaskIncrementTick+0x154>)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6013      	str	r3, [r2, #0]
 800e628:	4b3d      	ldr	r3, [pc, #244]	; (800e720 <xTaskIncrementTick+0x158>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	3301      	adds	r3, #1
 800e62e:	4a3c      	ldr	r2, [pc, #240]	; (800e720 <xTaskIncrementTick+0x158>)
 800e630:	6013      	str	r3, [r2, #0]
 800e632:	f000 fad1 	bl	800ebd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e636:	4b3b      	ldr	r3, [pc, #236]	; (800e724 <xTaskIncrementTick+0x15c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d348      	bcc.n	800e6d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e640:	4b35      	ldr	r3, [pc, #212]	; (800e718 <xTaskIncrementTick+0x150>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d104      	bne.n	800e654 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e64a:	4b36      	ldr	r3, [pc, #216]	; (800e724 <xTaskIncrementTick+0x15c>)
 800e64c:	f04f 32ff 	mov.w	r2, #4294967295
 800e650:	601a      	str	r2, [r3, #0]
					break;
 800e652:	e03e      	b.n	800e6d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e654:	4b30      	ldr	r3, [pc, #192]	; (800e718 <xTaskIncrementTick+0x150>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e664:	693a      	ldr	r2, [r7, #16]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d203      	bcs.n	800e674 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e66c:	4a2d      	ldr	r2, [pc, #180]	; (800e724 <xTaskIncrementTick+0x15c>)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e672:	e02e      	b.n	800e6d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	3304      	adds	r3, #4
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe fd3b 	bl	800d0f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e682:	2b00      	cmp	r3, #0
 800e684:	d004      	beq.n	800e690 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	3318      	adds	r3, #24
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fe fd32 	bl	800d0f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e694:	2201      	movs	r2, #1
 800e696:	409a      	lsls	r2, r3
 800e698:	4b23      	ldr	r3, [pc, #140]	; (800e728 <xTaskIncrementTick+0x160>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4313      	orrs	r3, r2
 800e69e:	4a22      	ldr	r2, [pc, #136]	; (800e728 <xTaskIncrementTick+0x160>)
 800e6a0:	6013      	str	r3, [r2, #0]
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	4a1f      	ldr	r2, [pc, #124]	; (800e72c <xTaskIncrementTick+0x164>)
 800e6b0:	441a      	add	r2, r3
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	3304      	adds	r3, #4
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	f7fe fcbe 	bl	800d03a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c2:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <xTaskIncrementTick+0x168>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d3b9      	bcc.n	800e640 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6d0:	e7b6      	b.n	800e640 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6d2:	4b17      	ldr	r3, [pc, #92]	; (800e730 <xTaskIncrementTick+0x168>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d8:	4914      	ldr	r1, [pc, #80]	; (800e72c <xTaskIncrementTick+0x164>)
 800e6da:	4613      	mov	r3, r2
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	4413      	add	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	440b      	add	r3, r1
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d907      	bls.n	800e6fa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	617b      	str	r3, [r7, #20]
 800e6ee:	e004      	b.n	800e6fa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e6f0:	4b10      	ldr	r3, [pc, #64]	; (800e734 <xTaskIncrementTick+0x16c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	4a0f      	ldr	r2, [pc, #60]	; (800e734 <xTaskIncrementTick+0x16c>)
 800e6f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e6fa:	4b0f      	ldr	r3, [pc, #60]	; (800e738 <xTaskIncrementTick+0x170>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d001      	beq.n	800e706 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e702:	2301      	movs	r3, #1
 800e704:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e706:	697b      	ldr	r3, [r7, #20]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3718      	adds	r7, #24
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20000528 	.word	0x20000528
 800e714:	20000504 	.word	0x20000504
 800e718:	200004b8 	.word	0x200004b8
 800e71c:	200004bc 	.word	0x200004bc
 800e720:	20000518 	.word	0x20000518
 800e724:	20000520 	.word	0x20000520
 800e728:	20000508 	.word	0x20000508
 800e72c:	20000404 	.word	0x20000404
 800e730:	20000400 	.word	0x20000400
 800e734:	20000510 	.word	0x20000510
 800e738:	20000514 	.word	0x20000514

0800e73c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b088      	sub	sp, #32
 800e740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e742:	4b3a      	ldr	r3, [pc, #232]	; (800e82c <vTaskSwitchContext+0xf0>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e74a:	4b39      	ldr	r3, [pc, #228]	; (800e830 <vTaskSwitchContext+0xf4>)
 800e74c:	2201      	movs	r2, #1
 800e74e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e750:	e068      	b.n	800e824 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800e752:	4b37      	ldr	r3, [pc, #220]	; (800e830 <vTaskSwitchContext+0xf4>)
 800e754:	2200      	movs	r2, #0
 800e756:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e758:	4b36      	ldr	r3, [pc, #216]	; (800e834 <vTaskSwitchContext+0xf8>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e75e:	61fb      	str	r3, [r7, #28]
 800e760:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e764:	61bb      	str	r3, [r7, #24]
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	69ba      	ldr	r2, [r7, #24]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d111      	bne.n	800e794 <vTaskSwitchContext+0x58>
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	3304      	adds	r3, #4
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	69ba      	ldr	r2, [r7, #24]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d10b      	bne.n	800e794 <vTaskSwitchContext+0x58>
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	3308      	adds	r3, #8
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	69ba      	ldr	r2, [r7, #24]
 800e784:	429a      	cmp	r2, r3
 800e786:	d105      	bne.n	800e794 <vTaskSwitchContext+0x58>
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	330c      	adds	r3, #12
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	69ba      	ldr	r2, [r7, #24]
 800e790:	429a      	cmp	r2, r3
 800e792:	d008      	beq.n	800e7a6 <vTaskSwitchContext+0x6a>
 800e794:	4b27      	ldr	r3, [pc, #156]	; (800e834 <vTaskSwitchContext+0xf8>)
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	4b26      	ldr	r3, [pc, #152]	; (800e834 <vTaskSwitchContext+0xf8>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3334      	adds	r3, #52	; 0x34
 800e79e:	4619      	mov	r1, r3
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	f7f2 f99c 	bl	8000ade <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7a6:	4b24      	ldr	r3, [pc, #144]	; (800e838 <vTaskSwitchContext+0xfc>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	fab3 f383 	clz	r3, r3
 800e7b2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e7b4:	7afb      	ldrb	r3, [r7, #11]
 800e7b6:	f1c3 031f 	rsb	r3, r3, #31
 800e7ba:	617b      	str	r3, [r7, #20]
 800e7bc:	491f      	ldr	r1, [pc, #124]	; (800e83c <vTaskSwitchContext+0x100>)
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	4413      	add	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	440b      	add	r3, r1
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10c      	bne.n	800e7ea <vTaskSwitchContext+0xae>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d4:	b672      	cpsid	i
 800e7d6:	f383 8811 	msr	BASEPRI, r3
 800e7da:	f3bf 8f6f 	isb	sy
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	b662      	cpsie	i
 800e7e4:	607b      	str	r3, [r7, #4]
}
 800e7e6:	bf00      	nop
 800e7e8:	e7fe      	b.n	800e7e8 <vTaskSwitchContext+0xac>
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4413      	add	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4a11      	ldr	r2, [pc, #68]	; (800e83c <vTaskSwitchContext+0x100>)
 800e7f6:	4413      	add	r3, r2
 800e7f8:	613b      	str	r3, [r7, #16]
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	685a      	ldr	r2, [r3, #4]
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	605a      	str	r2, [r3, #4]
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	685a      	ldr	r2, [r3, #4]
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	3308      	adds	r3, #8
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d104      	bne.n	800e81a <vTaskSwitchContext+0xde>
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	685a      	ldr	r2, [r3, #4]
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	605a      	str	r2, [r3, #4]
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	4a04      	ldr	r2, [pc, #16]	; (800e834 <vTaskSwitchContext+0xf8>)
 800e822:	6013      	str	r3, [r2, #0]
}
 800e824:	bf00      	nop
 800e826:	3720      	adds	r7, #32
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	20000528 	.word	0x20000528
 800e830:	20000514 	.word	0x20000514
 800e834:	20000400 	.word	0x20000400
 800e838:	20000508 	.word	0x20000508
 800e83c:	20000404 	.word	0x20000404

0800e840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10c      	bne.n	800e86a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	b672      	cpsid	i
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	b662      	cpsie	i
 800e864:	60fb      	str	r3, [r7, #12]
}
 800e866:	bf00      	nop
 800e868:	e7fe      	b.n	800e868 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e86a:	4b07      	ldr	r3, [pc, #28]	; (800e888 <vTaskPlaceOnEventList+0x48>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3318      	adds	r3, #24
 800e870:	4619      	mov	r1, r3
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7fe fc05 	bl	800d082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e878:	2101      	movs	r1, #1
 800e87a:	6838      	ldr	r0, [r7, #0]
 800e87c:	f000 fba6 	bl	800efcc <prvAddCurrentTaskToDelayedList>
}
 800e880:	bf00      	nop
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	20000400 	.word	0x20000400

0800e88c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10c      	bne.n	800e8bc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a6:	b672      	cpsid	i
 800e8a8:	f383 8811 	msr	BASEPRI, r3
 800e8ac:	f3bf 8f6f 	isb	sy
 800e8b0:	f3bf 8f4f 	dsb	sy
 800e8b4:	b662      	cpsie	i
 800e8b6:	60fb      	str	r3, [r7, #12]
}
 800e8b8:	bf00      	nop
 800e8ba:	e7fe      	b.n	800e8ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	3318      	adds	r3, #24
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fc17 	bl	800d0f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8c6:	4b1d      	ldr	r3, [pc, #116]	; (800e93c <xTaskRemoveFromEventList+0xb0>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d11c      	bne.n	800e908 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	3304      	adds	r3, #4
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fc0e 	bl	800d0f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8dc:	2201      	movs	r2, #1
 800e8de:	409a      	lsls	r2, r3
 800e8e0:	4b17      	ldr	r3, [pc, #92]	; (800e940 <xTaskRemoveFromEventList+0xb4>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	4a16      	ldr	r2, [pc, #88]	; (800e940 <xTaskRemoveFromEventList+0xb4>)
 800e8e8:	6013      	str	r3, [r2, #0]
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4a13      	ldr	r2, [pc, #76]	; (800e944 <xTaskRemoveFromEventList+0xb8>)
 800e8f8:	441a      	add	r2, r3
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	4619      	mov	r1, r3
 800e900:	4610      	mov	r0, r2
 800e902:	f7fe fb9a 	bl	800d03a <vListInsertEnd>
 800e906:	e005      	b.n	800e914 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	3318      	adds	r3, #24
 800e90c:	4619      	mov	r1, r3
 800e90e:	480e      	ldr	r0, [pc, #56]	; (800e948 <xTaskRemoveFromEventList+0xbc>)
 800e910:	f7fe fb93 	bl	800d03a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e918:	4b0c      	ldr	r3, [pc, #48]	; (800e94c <xTaskRemoveFromEventList+0xc0>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91e:	429a      	cmp	r2, r3
 800e920:	d905      	bls.n	800e92e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e922:	2301      	movs	r3, #1
 800e924:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e926:	4b0a      	ldr	r3, [pc, #40]	; (800e950 <xTaskRemoveFromEventList+0xc4>)
 800e928:	2201      	movs	r2, #1
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	e001      	b.n	800e932 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e92e:	2300      	movs	r3, #0
 800e930:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e932:	697b      	ldr	r3, [r7, #20]
}
 800e934:	4618      	mov	r0, r3
 800e936:	3718      	adds	r7, #24
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	20000528 	.word	0x20000528
 800e940:	20000508 	.word	0x20000508
 800e944:	20000404 	.word	0x20000404
 800e948:	200004c0 	.word	0x200004c0
 800e94c:	20000400 	.word	0x20000400
 800e950:	20000514 	.word	0x20000514

0800e954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e95c:	4b06      	ldr	r3, [pc, #24]	; (800e978 <vTaskInternalSetTimeOutState+0x24>)
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e964:	4b05      	ldr	r3, [pc, #20]	; (800e97c <vTaskInternalSetTimeOutState+0x28>)
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	605a      	str	r2, [r3, #4]
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr
 800e978:	20000518 	.word	0x20000518
 800e97c:	20000504 	.word	0x20000504

0800e980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10c      	bne.n	800e9aa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e994:	b672      	cpsid	i
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	b662      	cpsie	i
 800e9a4:	613b      	str	r3, [r7, #16]
}
 800e9a6:	bf00      	nop
 800e9a8:	e7fe      	b.n	800e9a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d10c      	bne.n	800e9ca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b4:	b672      	cpsid	i
 800e9b6:	f383 8811 	msr	BASEPRI, r3
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	b662      	cpsie	i
 800e9c4:	60fb      	str	r3, [r7, #12]
}
 800e9c6:	bf00      	nop
 800e9c8:	e7fe      	b.n	800e9c8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e9ca:	f000 fc6f 	bl	800f2ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9ce:	4b1d      	ldr	r3, [pc, #116]	; (800ea44 <xTaskCheckForTimeOut+0xc4>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	69ba      	ldr	r2, [r7, #24]
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e6:	d102      	bne.n	800e9ee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	61fb      	str	r3, [r7, #28]
 800e9ec:	e023      	b.n	800ea36 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	4b15      	ldr	r3, [pc, #84]	; (800ea48 <xTaskCheckForTimeOut+0xc8>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d007      	beq.n	800ea0a <xTaskCheckForTimeOut+0x8a>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	69ba      	ldr	r2, [r7, #24]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d302      	bcc.n	800ea0a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea04:	2301      	movs	r3, #1
 800ea06:	61fb      	str	r3, [r7, #28]
 800ea08:	e015      	b.n	800ea36 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d20b      	bcs.n	800ea2c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	1ad2      	subs	r2, r2, r3
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7ff ff97 	bl	800e954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea26:	2300      	movs	r3, #0
 800ea28:	61fb      	str	r3, [r7, #28]
 800ea2a:	e004      	b.n	800ea36 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea32:	2301      	movs	r3, #1
 800ea34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea36:	f000 fc6d 	bl	800f314 <vPortExitCritical>

	return xReturn;
 800ea3a:	69fb      	ldr	r3, [r7, #28]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3720      	adds	r7, #32
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	20000504 	.word	0x20000504
 800ea48:	20000518 	.word	0x20000518

0800ea4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea50:	4b03      	ldr	r3, [pc, #12]	; (800ea60 <vTaskMissedYield+0x14>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	601a      	str	r2, [r3, #0]
}
 800ea56:	bf00      	nop
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr
 800ea60:	20000514 	.word	0x20000514

0800ea64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea6c:	f000 f854 	bl	800eb18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea70:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <prvIdleTask+0x2c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d907      	bls.n	800ea88 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ea78:	4b06      	ldr	r3, [pc, #24]	; (800ea94 <prvIdleTask+0x30>)
 800ea7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea7e:	601a      	str	r2, [r3, #0]
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ea88:	f7f2 f822 	bl	8000ad0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ea8c:	e7ee      	b.n	800ea6c <prvIdleTask+0x8>
 800ea8e:	bf00      	nop
 800ea90:	20000404 	.word	0x20000404
 800ea94:	e000ed04 	.word	0xe000ed04

0800ea98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	607b      	str	r3, [r7, #4]
 800eaa2:	e00c      	b.n	800eabe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4a12      	ldr	r2, [pc, #72]	; (800eaf8 <prvInitialiseTaskLists+0x60>)
 800eab0:	4413      	add	r3, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fe fa94 	bl	800cfe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3301      	adds	r3, #1
 800eabc:	607b      	str	r3, [r7, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b06      	cmp	r3, #6
 800eac2:	d9ef      	bls.n	800eaa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eac4:	480d      	ldr	r0, [pc, #52]	; (800eafc <prvInitialiseTaskLists+0x64>)
 800eac6:	f7fe fa8b 	bl	800cfe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eaca:	480d      	ldr	r0, [pc, #52]	; (800eb00 <prvInitialiseTaskLists+0x68>)
 800eacc:	f7fe fa88 	bl	800cfe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ead0:	480c      	ldr	r0, [pc, #48]	; (800eb04 <prvInitialiseTaskLists+0x6c>)
 800ead2:	f7fe fa85 	bl	800cfe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ead6:	480c      	ldr	r0, [pc, #48]	; (800eb08 <prvInitialiseTaskLists+0x70>)
 800ead8:	f7fe fa82 	bl	800cfe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eadc:	480b      	ldr	r0, [pc, #44]	; (800eb0c <prvInitialiseTaskLists+0x74>)
 800eade:	f7fe fa7f 	bl	800cfe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eae2:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <prvInitialiseTaskLists+0x78>)
 800eae4:	4a05      	ldr	r2, [pc, #20]	; (800eafc <prvInitialiseTaskLists+0x64>)
 800eae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eae8:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <prvInitialiseTaskLists+0x7c>)
 800eaea:	4a05      	ldr	r2, [pc, #20]	; (800eb00 <prvInitialiseTaskLists+0x68>)
 800eaec:	601a      	str	r2, [r3, #0]
}
 800eaee:	bf00      	nop
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20000404 	.word	0x20000404
 800eafc:	20000490 	.word	0x20000490
 800eb00:	200004a4 	.word	0x200004a4
 800eb04:	200004c0 	.word	0x200004c0
 800eb08:	200004d4 	.word	0x200004d4
 800eb0c:	200004ec 	.word	0x200004ec
 800eb10:	200004b8 	.word	0x200004b8
 800eb14:	200004bc 	.word	0x200004bc

0800eb18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb1e:	e019      	b.n	800eb54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb20:	f000 fbc4 	bl	800f2ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb24:	4b10      	ldr	r3, [pc, #64]	; (800eb68 <prvCheckTasksWaitingTermination+0x50>)
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fe fadf 	bl	800d0f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb36:	4b0d      	ldr	r3, [pc, #52]	; (800eb6c <prvCheckTasksWaitingTermination+0x54>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	4a0b      	ldr	r2, [pc, #44]	; (800eb6c <prvCheckTasksWaitingTermination+0x54>)
 800eb3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb40:	4b0b      	ldr	r3, [pc, #44]	; (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	4a0a      	ldr	r2, [pc, #40]	; (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb4a:	f000 fbe3 	bl	800f314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f810 	bl	800eb74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb54:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e1      	bne.n	800eb20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb5c:	bf00      	nop
 800eb5e:	bf00      	nop
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	200004d4 	.word	0x200004d4
 800eb6c:	20000500 	.word	0x20000500
 800eb70:	200004e8 	.word	0x200004e8

0800eb74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d108      	bne.n	800eb98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 fd8a 	bl	800f6a4 <vPortFree>
				vPortFree( pxTCB );
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fd87 	bl	800f6a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb96:	e01a      	b.n	800ebce <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d103      	bne.n	800ebaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 fd7e 	bl	800f6a4 <vPortFree>
	}
 800eba8:	e011      	b.n	800ebce <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	d00c      	beq.n	800ebce <prvDeleteTCB+0x5a>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb8:	b672      	cpsid	i
 800ebba:	f383 8811 	msr	BASEPRI, r3
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	b662      	cpsie	i
 800ebc8:	60fb      	str	r3, [r7, #12]
}
 800ebca:	bf00      	nop
 800ebcc:	e7fe      	b.n	800ebcc <prvDeleteTCB+0x58>
	}
 800ebce:	bf00      	nop
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
	...

0800ebd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebde:	4b0c      	ldr	r3, [pc, #48]	; (800ec10 <prvResetNextTaskUnblockTime+0x38>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d104      	bne.n	800ebf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebe8:	4b0a      	ldr	r3, [pc, #40]	; (800ec14 <prvResetNextTaskUnblockTime+0x3c>)
 800ebea:	f04f 32ff 	mov.w	r2, #4294967295
 800ebee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebf0:	e008      	b.n	800ec04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebf2:	4b07      	ldr	r3, [pc, #28]	; (800ec10 <prvResetNextTaskUnblockTime+0x38>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	4a04      	ldr	r2, [pc, #16]	; (800ec14 <prvResetNextTaskUnblockTime+0x3c>)
 800ec02:	6013      	str	r3, [r2, #0]
}
 800ec04:	bf00      	nop
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr
 800ec10:	200004b8 	.word	0x200004b8
 800ec14:	20000520 	.word	0x20000520

0800ec18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec18:	b480      	push	{r7}
 800ec1a:	b083      	sub	sp, #12
 800ec1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec1e:	4b0b      	ldr	r3, [pc, #44]	; (800ec4c <xTaskGetSchedulerState+0x34>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d102      	bne.n	800ec2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec26:	2301      	movs	r3, #1
 800ec28:	607b      	str	r3, [r7, #4]
 800ec2a:	e008      	b.n	800ec3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec2c:	4b08      	ldr	r3, [pc, #32]	; (800ec50 <xTaskGetSchedulerState+0x38>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d102      	bne.n	800ec3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec34:	2302      	movs	r3, #2
 800ec36:	607b      	str	r3, [r7, #4]
 800ec38:	e001      	b.n	800ec3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec3e:	687b      	ldr	r3, [r7, #4]
	}
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	2000050c 	.word	0x2000050c
 800ec50:	20000528 	.word	0x20000528

0800ec54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec60:	2300      	movs	r3, #0
 800ec62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d069      	beq.n	800ed3e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec6e:	4b36      	ldr	r3, [pc, #216]	; (800ed48 <xTaskPriorityInherit+0xf4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d259      	bcs.n	800ed2c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	699b      	ldr	r3, [r3, #24]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	db06      	blt.n	800ec8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec80:	4b31      	ldr	r3, [pc, #196]	; (800ed48 <xTaskPriorityInherit+0xf4>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec86:	f1c3 0207 	rsb	r2, r3, #7
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	6959      	ldr	r1, [r3, #20]
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec96:	4613      	mov	r3, r2
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	4413      	add	r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4a2b      	ldr	r2, [pc, #172]	; (800ed4c <xTaskPriorityInherit+0xf8>)
 800eca0:	4413      	add	r3, r2
 800eca2:	4299      	cmp	r1, r3
 800eca4:	d13a      	bne.n	800ed1c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	3304      	adds	r3, #4
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fe fa22 	bl	800d0f4 <uxListRemove>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d115      	bne.n	800ece2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecba:	4924      	ldr	r1, [pc, #144]	; (800ed4c <xTaskPriorityInherit+0xf8>)
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	4413      	add	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	440b      	add	r3, r1
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <xTaskPriorityInherit+0x8e>
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd6:	43da      	mvns	r2, r3
 800ecd8:	4b1d      	ldr	r3, [pc, #116]	; (800ed50 <xTaskPriorityInherit+0xfc>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4013      	ands	r3, r2
 800ecde:	4a1c      	ldr	r2, [pc, #112]	; (800ed50 <xTaskPriorityInherit+0xfc>)
 800ece0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ece2:	4b19      	ldr	r3, [pc, #100]	; (800ed48 <xTaskPriorityInherit+0xf4>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	409a      	lsls	r2, r3
 800ecf4:	4b16      	ldr	r3, [pc, #88]	; (800ed50 <xTaskPriorityInherit+0xfc>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	4a15      	ldr	r2, [pc, #84]	; (800ed50 <xTaskPriorityInherit+0xfc>)
 800ecfc:	6013      	str	r3, [r2, #0]
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed02:	4613      	mov	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	4413      	add	r3, r2
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4a10      	ldr	r2, [pc, #64]	; (800ed4c <xTaskPriorityInherit+0xf8>)
 800ed0c:	441a      	add	r2, r3
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	3304      	adds	r3, #4
 800ed12:	4619      	mov	r1, r3
 800ed14:	4610      	mov	r0, r2
 800ed16:	f7fe f990 	bl	800d03a <vListInsertEnd>
 800ed1a:	e004      	b.n	800ed26 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed1c:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <xTaskPriorityInherit+0xf4>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed26:	2301      	movs	r3, #1
 800ed28:	60fb      	str	r3, [r7, #12]
 800ed2a:	e008      	b.n	800ed3e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed30:	4b05      	ldr	r3, [pc, #20]	; (800ed48 <xTaskPriorityInherit+0xf4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d201      	bcs.n	800ed3e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	20000400 	.word	0x20000400
 800ed4c:	20000404 	.word	0x20000404
 800ed50:	20000508 	.word	0x20000508

0800ed54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed60:	2300      	movs	r3, #0
 800ed62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d072      	beq.n	800ee50 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed6a:	4b3c      	ldr	r3, [pc, #240]	; (800ee5c <xTaskPriorityDisinherit+0x108>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d00c      	beq.n	800ed8e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ed74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed78:	b672      	cpsid	i
 800ed7a:	f383 8811 	msr	BASEPRI, r3
 800ed7e:	f3bf 8f6f 	isb	sy
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	b662      	cpsie	i
 800ed88:	60fb      	str	r3, [r7, #12]
}
 800ed8a:	bf00      	nop
 800ed8c:	e7fe      	b.n	800ed8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10c      	bne.n	800edb0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ed96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9a:	b672      	cpsid	i
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	b662      	cpsie	i
 800edaa:	60bb      	str	r3, [r7, #8]
}
 800edac:	bf00      	nop
 800edae:	e7fe      	b.n	800edae <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edb4:	1e5a      	subs	r2, r3, #1
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d044      	beq.n	800ee50 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d140      	bne.n	800ee50 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	3304      	adds	r3, #4
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fe f98e 	bl	800d0f4 <uxListRemove>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d115      	bne.n	800ee0a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ede2:	491f      	ldr	r1, [pc, #124]	; (800ee60 <xTaskPriorityDisinherit+0x10c>)
 800ede4:	4613      	mov	r3, r2
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	440b      	add	r3, r1
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10a      	bne.n	800ee0a <xTaskPriorityDisinherit+0xb6>
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf8:	2201      	movs	r2, #1
 800edfa:	fa02 f303 	lsl.w	r3, r2, r3
 800edfe:	43da      	mvns	r2, r3
 800ee00:	4b18      	ldr	r3, [pc, #96]	; (800ee64 <xTaskPriorityDisinherit+0x110>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4013      	ands	r3, r2
 800ee06:	4a17      	ldr	r2, [pc, #92]	; (800ee64 <xTaskPriorityDisinherit+0x110>)
 800ee08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee16:	f1c3 0207 	rsb	r2, r3, #7
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee22:	2201      	movs	r2, #1
 800ee24:	409a      	lsls	r2, r3
 800ee26:	4b0f      	ldr	r3, [pc, #60]	; (800ee64 <xTaskPriorityDisinherit+0x110>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	4a0d      	ldr	r2, [pc, #52]	; (800ee64 <xTaskPriorityDisinherit+0x110>)
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee34:	4613      	mov	r3, r2
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4a08      	ldr	r2, [pc, #32]	; (800ee60 <xTaskPriorityDisinherit+0x10c>)
 800ee3e:	441a      	add	r2, r3
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	3304      	adds	r3, #4
 800ee44:	4619      	mov	r1, r3
 800ee46:	4610      	mov	r0, r2
 800ee48:	f7fe f8f7 	bl	800d03a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee50:	697b      	ldr	r3, [r7, #20]
	}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3718      	adds	r7, #24
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20000400 	.word	0x20000400
 800ee60:	20000404 	.word	0x20000404
 800ee64:	20000508 	.word	0x20000508

0800ee68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee76:	2301      	movs	r3, #1
 800ee78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f000 8087 	beq.w	800ef90 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10c      	bne.n	800eea4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	b672      	cpsid	i
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	b662      	cpsie	i
 800ee9e:	60fb      	str	r3, [r7, #12]
}
 800eea0:	bf00      	nop
 800eea2:	e7fe      	b.n	800eea2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eea8:	683a      	ldr	r2, [r7, #0]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d902      	bls.n	800eeb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	61fb      	str	r3, [r7, #28]
 800eeb2:	e002      	b.n	800eeba <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeb8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebe:	69fa      	ldr	r2, [r7, #28]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d065      	beq.n	800ef90 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eec8:	697a      	ldr	r2, [r7, #20]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d160      	bne.n	800ef90 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eece:	4b32      	ldr	r3, [pc, #200]	; (800ef98 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	69ba      	ldr	r2, [r7, #24]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d10c      	bne.n	800eef2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800eed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eedc:	b672      	cpsid	i
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	b662      	cpsie	i
 800eeec:	60bb      	str	r3, [r7, #8]
}
 800eeee:	bf00      	nop
 800eef0:	e7fe      	b.n	800eef0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	69fa      	ldr	r2, [r7, #28]
 800eefc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	699b      	ldr	r3, [r3, #24]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	db04      	blt.n	800ef10 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	f1c3 0207 	rsb	r2, r3, #7
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	6959      	ldr	r1, [r3, #20]
 800ef14:	693a      	ldr	r2, [r7, #16]
 800ef16:	4613      	mov	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	4413      	add	r3, r2
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	4a1f      	ldr	r2, [pc, #124]	; (800ef9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef20:	4413      	add	r3, r2
 800ef22:	4299      	cmp	r1, r3
 800ef24:	d134      	bne.n	800ef90 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	3304      	adds	r3, #4
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fe f8e2 	bl	800d0f4 <uxListRemove>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d115      	bne.n	800ef62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef3a:	4918      	ldr	r1, [pc, #96]	; (800ef9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	4413      	add	r3, r2
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	440b      	add	r3, r1
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d10a      	bne.n	800ef62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef50:	2201      	movs	r2, #1
 800ef52:	fa02 f303 	lsl.w	r3, r2, r3
 800ef56:	43da      	mvns	r2, r3
 800ef58:	4b11      	ldr	r3, [pc, #68]	; (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	4a10      	ldr	r2, [pc, #64]	; (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ef60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef66:	2201      	movs	r2, #1
 800ef68:	409a      	lsls	r2, r3
 800ef6a:	4b0d      	ldr	r3, [pc, #52]	; (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	4a0b      	ldr	r2, [pc, #44]	; (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef78:	4613      	mov	r3, r2
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4a06      	ldr	r2, [pc, #24]	; (800ef9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef82:	441a      	add	r2, r3
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	3304      	adds	r3, #4
 800ef88:	4619      	mov	r1, r3
 800ef8a:	4610      	mov	r0, r2
 800ef8c:	f7fe f855 	bl	800d03a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef90:	bf00      	nop
 800ef92:	3720      	adds	r7, #32
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	20000400 	.word	0x20000400
 800ef9c:	20000404 	.word	0x20000404
 800efa0:	20000508 	.word	0x20000508

0800efa4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800efa4:	b480      	push	{r7}
 800efa6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efa8:	4b07      	ldr	r3, [pc, #28]	; (800efc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800efb0:	4b05      	ldr	r3, [pc, #20]	; (800efc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800efb6:	3201      	adds	r2, #1
 800efb8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800efba:	4b03      	ldr	r3, [pc, #12]	; (800efc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800efbc:	681b      	ldr	r3, [r3, #0]
	}
 800efbe:	4618      	mov	r0, r3
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	20000400 	.word	0x20000400

0800efcc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efd6:	4b29      	ldr	r3, [pc, #164]	; (800f07c <prvAddCurrentTaskToDelayedList+0xb0>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efdc:	4b28      	ldr	r3, [pc, #160]	; (800f080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3304      	adds	r3, #4
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe f886 	bl	800d0f4 <uxListRemove>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b00      	cmp	r3, #0
 800efec:	d10b      	bne.n	800f006 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800efee:	4b24      	ldr	r3, [pc, #144]	; (800f080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff4:	2201      	movs	r2, #1
 800eff6:	fa02 f303 	lsl.w	r3, r2, r3
 800effa:	43da      	mvns	r2, r3
 800effc:	4b21      	ldr	r3, [pc, #132]	; (800f084 <prvAddCurrentTaskToDelayedList+0xb8>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4013      	ands	r3, r2
 800f002:	4a20      	ldr	r2, [pc, #128]	; (800f084 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f004:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00c:	d10a      	bne.n	800f024 <prvAddCurrentTaskToDelayedList+0x58>
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d007      	beq.n	800f024 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f014:	4b1a      	ldr	r3, [pc, #104]	; (800f080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	3304      	adds	r3, #4
 800f01a:	4619      	mov	r1, r3
 800f01c:	481a      	ldr	r0, [pc, #104]	; (800f088 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f01e:	f7fe f80c 	bl	800d03a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f022:	e026      	b.n	800f072 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4413      	add	r3, r2
 800f02a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f02c:	4b14      	ldr	r3, [pc, #80]	; (800f080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d209      	bcs.n	800f050 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f03c:	4b13      	ldr	r3, [pc, #76]	; (800f08c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	4b0f      	ldr	r3, [pc, #60]	; (800f080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	3304      	adds	r3, #4
 800f046:	4619      	mov	r1, r3
 800f048:	4610      	mov	r0, r2
 800f04a:	f7fe f81a 	bl	800d082 <vListInsert>
}
 800f04e:	e010      	b.n	800f072 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f050:	4b0f      	ldr	r3, [pc, #60]	; (800f090 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	4b0a      	ldr	r3, [pc, #40]	; (800f080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	3304      	adds	r3, #4
 800f05a:	4619      	mov	r1, r3
 800f05c:	4610      	mov	r0, r2
 800f05e:	f7fe f810 	bl	800d082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f062:	4b0c      	ldr	r3, [pc, #48]	; (800f094 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	68ba      	ldr	r2, [r7, #8]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d202      	bcs.n	800f072 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f06c:	4a09      	ldr	r2, [pc, #36]	; (800f094 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	6013      	str	r3, [r2, #0]
}
 800f072:	bf00      	nop
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	20000504 	.word	0x20000504
 800f080:	20000400 	.word	0x20000400
 800f084:	20000508 	.word	0x20000508
 800f088:	200004ec 	.word	0x200004ec
 800f08c:	200004bc 	.word	0x200004bc
 800f090:	200004b8 	.word	0x200004b8
 800f094:	20000520 	.word	0x20000520

0800f098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	3b04      	subs	r3, #4
 800f0a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f0b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3b04      	subs	r3, #4
 800f0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	f023 0201 	bic.w	r2, r3, #1
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	3b04      	subs	r3, #4
 800f0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f0c8:	4a0c      	ldr	r2, [pc, #48]	; (800f0fc <pxPortInitialiseStack+0x64>)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	3b14      	subs	r3, #20
 800f0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	3b04      	subs	r3, #4
 800f0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f06f 0202 	mvn.w	r2, #2
 800f0e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	3b20      	subs	r3, #32
 800f0ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3714      	adds	r7, #20
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	0800f101 	.word	0x0800f101

0800f100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f10a:	4b14      	ldr	r3, [pc, #80]	; (800f15c <prvTaskExitError+0x5c>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f112:	d00c      	beq.n	800f12e <prvTaskExitError+0x2e>
	__asm volatile
 800f114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f118:	b672      	cpsid	i
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	b662      	cpsie	i
 800f128:	60fb      	str	r3, [r7, #12]
}
 800f12a:	bf00      	nop
 800f12c:	e7fe      	b.n	800f12c <prvTaskExitError+0x2c>
	__asm volatile
 800f12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f132:	b672      	cpsid	i
 800f134:	f383 8811 	msr	BASEPRI, r3
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	f3bf 8f4f 	dsb	sy
 800f140:	b662      	cpsie	i
 800f142:	60bb      	str	r3, [r7, #8]
}
 800f144:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f146:	bf00      	nop
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d0fc      	beq.n	800f148 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f14e:	bf00      	nop
 800f150:	bf00      	nop
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	20000024 	.word	0x20000024

0800f160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f160:	4b07      	ldr	r3, [pc, #28]	; (800f180 <pxCurrentTCBConst2>)
 800f162:	6819      	ldr	r1, [r3, #0]
 800f164:	6808      	ldr	r0, [r1, #0]
 800f166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16a:	f380 8809 	msr	PSP, r0
 800f16e:	f3bf 8f6f 	isb	sy
 800f172:	f04f 0000 	mov.w	r0, #0
 800f176:	f380 8811 	msr	BASEPRI, r0
 800f17a:	4770      	bx	lr
 800f17c:	f3af 8000 	nop.w

0800f180 <pxCurrentTCBConst2>:
 800f180:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f184:	bf00      	nop
 800f186:	bf00      	nop

0800f188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f188:	4808      	ldr	r0, [pc, #32]	; (800f1ac <prvPortStartFirstTask+0x24>)
 800f18a:	6800      	ldr	r0, [r0, #0]
 800f18c:	6800      	ldr	r0, [r0, #0]
 800f18e:	f380 8808 	msr	MSP, r0
 800f192:	f04f 0000 	mov.w	r0, #0
 800f196:	f380 8814 	msr	CONTROL, r0
 800f19a:	b662      	cpsie	i
 800f19c:	b661      	cpsie	f
 800f19e:	f3bf 8f4f 	dsb	sy
 800f1a2:	f3bf 8f6f 	isb	sy
 800f1a6:	df00      	svc	0
 800f1a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f1aa:	bf00      	nop
 800f1ac:	e000ed08 	.word	0xe000ed08

0800f1b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1b6:	4b37      	ldr	r3, [pc, #220]	; (800f294 <xPortStartScheduler+0xe4>)
 800f1b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	22ff      	movs	r2, #255	; 0xff
 800f1c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1d0:	78fb      	ldrb	r3, [r7, #3]
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1d8:	b2da      	uxtb	r2, r3
 800f1da:	4b2f      	ldr	r3, [pc, #188]	; (800f298 <xPortStartScheduler+0xe8>)
 800f1dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1de:	4b2f      	ldr	r3, [pc, #188]	; (800f29c <xPortStartScheduler+0xec>)
 800f1e0:	2207      	movs	r2, #7
 800f1e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1e4:	e009      	b.n	800f1fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f1e6:	4b2d      	ldr	r3, [pc, #180]	; (800f29c <xPortStartScheduler+0xec>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	4a2b      	ldr	r2, [pc, #172]	; (800f29c <xPortStartScheduler+0xec>)
 800f1ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f1f0:	78fb      	ldrb	r3, [r7, #3]
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1fa:	78fb      	ldrb	r3, [r7, #3]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f202:	2b80      	cmp	r3, #128	; 0x80
 800f204:	d0ef      	beq.n	800f1e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f206:	4b25      	ldr	r3, [pc, #148]	; (800f29c <xPortStartScheduler+0xec>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f1c3 0307 	rsb	r3, r3, #7
 800f20e:	2b04      	cmp	r3, #4
 800f210:	d00c      	beq.n	800f22c <xPortStartScheduler+0x7c>
	__asm volatile
 800f212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f216:	b672      	cpsid	i
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	b662      	cpsie	i
 800f226:	60bb      	str	r3, [r7, #8]
}
 800f228:	bf00      	nop
 800f22a:	e7fe      	b.n	800f22a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f22c:	4b1b      	ldr	r3, [pc, #108]	; (800f29c <xPortStartScheduler+0xec>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	021b      	lsls	r3, r3, #8
 800f232:	4a1a      	ldr	r2, [pc, #104]	; (800f29c <xPortStartScheduler+0xec>)
 800f234:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f236:	4b19      	ldr	r3, [pc, #100]	; (800f29c <xPortStartScheduler+0xec>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f23e:	4a17      	ldr	r2, [pc, #92]	; (800f29c <xPortStartScheduler+0xec>)
 800f240:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	b2da      	uxtb	r2, r3
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f24a:	4b15      	ldr	r3, [pc, #84]	; (800f2a0 <xPortStartScheduler+0xf0>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a14      	ldr	r2, [pc, #80]	; (800f2a0 <xPortStartScheduler+0xf0>)
 800f250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f254:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f256:	4b12      	ldr	r3, [pc, #72]	; (800f2a0 <xPortStartScheduler+0xf0>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a11      	ldr	r2, [pc, #68]	; (800f2a0 <xPortStartScheduler+0xf0>)
 800f25c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f260:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f262:	f000 f8dd 	bl	800f420 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f266:	4b0f      	ldr	r3, [pc, #60]	; (800f2a4 <xPortStartScheduler+0xf4>)
 800f268:	2200      	movs	r2, #0
 800f26a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f26c:	f000 f8fc 	bl	800f468 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f270:	4b0d      	ldr	r3, [pc, #52]	; (800f2a8 <xPortStartScheduler+0xf8>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4a0c      	ldr	r2, [pc, #48]	; (800f2a8 <xPortStartScheduler+0xf8>)
 800f276:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f27a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f27c:	f7ff ff84 	bl	800f188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f280:	f7ff fa5c 	bl	800e73c <vTaskSwitchContext>
	prvTaskExitError();
 800f284:	f7ff ff3c 	bl	800f100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	e000e400 	.word	0xe000e400
 800f298:	2000052c 	.word	0x2000052c
 800f29c:	20000530 	.word	0x20000530
 800f2a0:	e000ed20 	.word	0xe000ed20
 800f2a4:	20000024 	.word	0x20000024
 800f2a8:	e000ef34 	.word	0xe000ef34

0800f2ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
	__asm volatile
 800f2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b6:	b672      	cpsid	i
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	b662      	cpsie	i
 800f2c6:	607b      	str	r3, [r7, #4]
}
 800f2c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2ca:	4b10      	ldr	r3, [pc, #64]	; (800f30c <vPortEnterCritical+0x60>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	4a0e      	ldr	r2, [pc, #56]	; (800f30c <vPortEnterCritical+0x60>)
 800f2d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2d4:	4b0d      	ldr	r3, [pc, #52]	; (800f30c <vPortEnterCritical+0x60>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d111      	bne.n	800f300 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2dc:	4b0c      	ldr	r3, [pc, #48]	; (800f310 <vPortEnterCritical+0x64>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00c      	beq.n	800f300 <vPortEnterCritical+0x54>
	__asm volatile
 800f2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ea:	b672      	cpsid	i
 800f2ec:	f383 8811 	msr	BASEPRI, r3
 800f2f0:	f3bf 8f6f 	isb	sy
 800f2f4:	f3bf 8f4f 	dsb	sy
 800f2f8:	b662      	cpsie	i
 800f2fa:	603b      	str	r3, [r7, #0]
}
 800f2fc:	bf00      	nop
 800f2fe:	e7fe      	b.n	800f2fe <vPortEnterCritical+0x52>
	}
}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	20000024 	.word	0x20000024
 800f310:	e000ed04 	.word	0xe000ed04

0800f314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f31a:	4b13      	ldr	r3, [pc, #76]	; (800f368 <vPortExitCritical+0x54>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10c      	bne.n	800f33c <vPortExitCritical+0x28>
	__asm volatile
 800f322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f326:	b672      	cpsid	i
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	b662      	cpsie	i
 800f336:	607b      	str	r3, [r7, #4]
}
 800f338:	bf00      	nop
 800f33a:	e7fe      	b.n	800f33a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f33c:	4b0a      	ldr	r3, [pc, #40]	; (800f368 <vPortExitCritical+0x54>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	3b01      	subs	r3, #1
 800f342:	4a09      	ldr	r2, [pc, #36]	; (800f368 <vPortExitCritical+0x54>)
 800f344:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f346:	4b08      	ldr	r3, [pc, #32]	; (800f368 <vPortExitCritical+0x54>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d105      	bne.n	800f35a <vPortExitCritical+0x46>
 800f34e:	2300      	movs	r3, #0
 800f350:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	f383 8811 	msr	BASEPRI, r3
}
 800f358:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f35a:	bf00      	nop
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	20000024 	.word	0x20000024
 800f36c:	00000000 	.word	0x00000000

0800f370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f370:	f3ef 8009 	mrs	r0, PSP
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	4b15      	ldr	r3, [pc, #84]	; (800f3d0 <pxCurrentTCBConst>)
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	f01e 0f10 	tst.w	lr, #16
 800f380:	bf08      	it	eq
 800f382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38a:	6010      	str	r0, [r2, #0]
 800f38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f394:	b672      	cpsid	i
 800f396:	f380 8811 	msr	BASEPRI, r0
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	b662      	cpsie	i
 800f3a4:	f7ff f9ca 	bl	800e73c <vTaskSwitchContext>
 800f3a8:	f04f 0000 	mov.w	r0, #0
 800f3ac:	f380 8811 	msr	BASEPRI, r0
 800f3b0:	bc09      	pop	{r0, r3}
 800f3b2:	6819      	ldr	r1, [r3, #0]
 800f3b4:	6808      	ldr	r0, [r1, #0]
 800f3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ba:	f01e 0f10 	tst.w	lr, #16
 800f3be:	bf08      	it	eq
 800f3c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3c4:	f380 8809 	msr	PSP, r0
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop

0800f3d0 <pxCurrentTCBConst>:
 800f3d0:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3d4:	bf00      	nop
 800f3d6:	bf00      	nop

0800f3d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e2:	b672      	cpsid	i
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	b662      	cpsie	i
 800f3f2:	607b      	str	r3, [r7, #4]
}
 800f3f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f3f6:	f7ff f8e7 	bl	800e5c8 <xTaskIncrementTick>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d003      	beq.n	800f408 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f400:	4b06      	ldr	r3, [pc, #24]	; (800f41c <SysTick_Handler+0x44>)
 800f402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f406:	601a      	str	r2, [r3, #0]
 800f408:	2300      	movs	r3, #0
 800f40a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	f383 8811 	msr	BASEPRI, r3
}
 800f412:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f414:	bf00      	nop
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	e000ed04 	.word	0xe000ed04

0800f420 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f420:	b480      	push	{r7}
 800f422:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f424:	4b0b      	ldr	r3, [pc, #44]	; (800f454 <vPortSetupTimerInterrupt+0x34>)
 800f426:	2200      	movs	r2, #0
 800f428:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f42a:	4b0b      	ldr	r3, [pc, #44]	; (800f458 <vPortSetupTimerInterrupt+0x38>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f430:	4b0a      	ldr	r3, [pc, #40]	; (800f45c <vPortSetupTimerInterrupt+0x3c>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a0a      	ldr	r2, [pc, #40]	; (800f460 <vPortSetupTimerInterrupt+0x40>)
 800f436:	fba2 2303 	umull	r2, r3, r2, r3
 800f43a:	099b      	lsrs	r3, r3, #6
 800f43c:	4a09      	ldr	r2, [pc, #36]	; (800f464 <vPortSetupTimerInterrupt+0x44>)
 800f43e:	3b01      	subs	r3, #1
 800f440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f442:	4b04      	ldr	r3, [pc, #16]	; (800f454 <vPortSetupTimerInterrupt+0x34>)
 800f444:	2207      	movs	r2, #7
 800f446:	601a      	str	r2, [r3, #0]
}
 800f448:	bf00      	nop
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	e000e010 	.word	0xe000e010
 800f458:	e000e018 	.word	0xe000e018
 800f45c:	20000018 	.word	0x20000018
 800f460:	10624dd3 	.word	0x10624dd3
 800f464:	e000e014 	.word	0xe000e014

0800f468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f468:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f478 <vPortEnableVFP+0x10>
 800f46c:	6801      	ldr	r1, [r0, #0]
 800f46e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f472:	6001      	str	r1, [r0, #0]
 800f474:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f476:	bf00      	nop
 800f478:	e000ed88 	.word	0xe000ed88

0800f47c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f47c:	b480      	push	{r7}
 800f47e:	b085      	sub	sp, #20
 800f480:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f482:	f3ef 8305 	mrs	r3, IPSR
 800f486:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2b0f      	cmp	r3, #15
 800f48c:	d916      	bls.n	800f4bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f48e:	4a19      	ldr	r2, [pc, #100]	; (800f4f4 <vPortValidateInterruptPriority+0x78>)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	4413      	add	r3, r2
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f498:	4b17      	ldr	r3, [pc, #92]	; (800f4f8 <vPortValidateInterruptPriority+0x7c>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	7afa      	ldrb	r2, [r7, #11]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d20c      	bcs.n	800f4bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a6:	b672      	cpsid	i
 800f4a8:	f383 8811 	msr	BASEPRI, r3
 800f4ac:	f3bf 8f6f 	isb	sy
 800f4b0:	f3bf 8f4f 	dsb	sy
 800f4b4:	b662      	cpsie	i
 800f4b6:	607b      	str	r3, [r7, #4]
}
 800f4b8:	bf00      	nop
 800f4ba:	e7fe      	b.n	800f4ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4bc:	4b0f      	ldr	r3, [pc, #60]	; (800f4fc <vPortValidateInterruptPriority+0x80>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4c4:	4b0e      	ldr	r3, [pc, #56]	; (800f500 <vPortValidateInterruptPriority+0x84>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d90c      	bls.n	800f4e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d0:	b672      	cpsid	i
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	b662      	cpsie	i
 800f4e0:	603b      	str	r3, [r7, #0]
}
 800f4e2:	bf00      	nop
 800f4e4:	e7fe      	b.n	800f4e4 <vPortValidateInterruptPriority+0x68>
	}
 800f4e6:	bf00      	nop
 800f4e8:	3714      	adds	r7, #20
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	e000e3f0 	.word	0xe000e3f0
 800f4f8:	2000052c 	.word	0x2000052c
 800f4fc:	e000ed0c 	.word	0xe000ed0c
 800f500:	20000530 	.word	0x20000530

0800f504 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b08a      	sub	sp, #40	; 0x28
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f50c:	2300      	movs	r3, #0
 800f50e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f510:	f7fe ff8c 	bl	800e42c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f514:	4b5e      	ldr	r3, [pc, #376]	; (800f690 <pvPortMalloc+0x18c>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d101      	bne.n	800f520 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f51c:	f000 f920 	bl	800f760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f520:	4b5c      	ldr	r3, [pc, #368]	; (800f694 <pvPortMalloc+0x190>)
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4013      	ands	r3, r2
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f040 8092 	bne.w	800f652 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d01f      	beq.n	800f574 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f534:	2208      	movs	r2, #8
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4413      	add	r3, r2
 800f53a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f003 0307 	and.w	r3, r3, #7
 800f542:	2b00      	cmp	r3, #0
 800f544:	d016      	beq.n	800f574 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f023 0307 	bic.w	r3, r3, #7
 800f54c:	3308      	adds	r3, #8
 800f54e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f003 0307 	and.w	r3, r3, #7
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00c      	beq.n	800f574 <pvPortMalloc+0x70>
	__asm volatile
 800f55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f55e:	b672      	cpsid	i
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	b662      	cpsie	i
 800f56e:	617b      	str	r3, [r7, #20]
}
 800f570:	bf00      	nop
 800f572:	e7fe      	b.n	800f572 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d06b      	beq.n	800f652 <pvPortMalloc+0x14e>
 800f57a:	4b47      	ldr	r3, [pc, #284]	; (800f698 <pvPortMalloc+0x194>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	429a      	cmp	r2, r3
 800f582:	d866      	bhi.n	800f652 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f584:	4b45      	ldr	r3, [pc, #276]	; (800f69c <pvPortMalloc+0x198>)
 800f586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f588:	4b44      	ldr	r3, [pc, #272]	; (800f69c <pvPortMalloc+0x198>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f58e:	e004      	b.n	800f59a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d903      	bls.n	800f5ac <pvPortMalloc+0xa8>
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d1f1      	bne.n	800f590 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f5ac:	4b38      	ldr	r3, [pc, #224]	; (800f690 <pvPortMalloc+0x18c>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d04d      	beq.n	800f652 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5b6:	6a3b      	ldr	r3, [r7, #32]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2208      	movs	r2, #8
 800f5bc:	4413      	add	r3, r2
 800f5be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	6a3b      	ldr	r3, [r7, #32]
 800f5c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	1ad2      	subs	r2, r2, r3
 800f5d0:	2308      	movs	r3, #8
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d921      	bls.n	800f61c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4413      	add	r3, r2
 800f5de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	f003 0307 	and.w	r3, r3, #7
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00c      	beq.n	800f604 <pvPortMalloc+0x100>
	__asm volatile
 800f5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ee:	b672      	cpsid	i
 800f5f0:	f383 8811 	msr	BASEPRI, r3
 800f5f4:	f3bf 8f6f 	isb	sy
 800f5f8:	f3bf 8f4f 	dsb	sy
 800f5fc:	b662      	cpsie	i
 800f5fe:	613b      	str	r3, [r7, #16]
}
 800f600:	bf00      	nop
 800f602:	e7fe      	b.n	800f602 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	685a      	ldr	r2, [r3, #4]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	1ad2      	subs	r2, r2, r3
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f616:	69b8      	ldr	r0, [r7, #24]
 800f618:	f000 f904 	bl	800f824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f61c:	4b1e      	ldr	r3, [pc, #120]	; (800f698 <pvPortMalloc+0x194>)
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	4a1c      	ldr	r2, [pc, #112]	; (800f698 <pvPortMalloc+0x194>)
 800f628:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f62a:	4b1b      	ldr	r3, [pc, #108]	; (800f698 <pvPortMalloc+0x194>)
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	4b1c      	ldr	r3, [pc, #112]	; (800f6a0 <pvPortMalloc+0x19c>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	429a      	cmp	r2, r3
 800f634:	d203      	bcs.n	800f63e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f636:	4b18      	ldr	r3, [pc, #96]	; (800f698 <pvPortMalloc+0x194>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a19      	ldr	r2, [pc, #100]	; (800f6a0 <pvPortMalloc+0x19c>)
 800f63c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	685a      	ldr	r2, [r3, #4]
 800f642:	4b14      	ldr	r3, [pc, #80]	; (800f694 <pvPortMalloc+0x190>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	431a      	orrs	r2, r3
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64e:	2200      	movs	r2, #0
 800f650:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f652:	f7fe fef9 	bl	800e448 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f65c:	f7f1 fa4a 	bl	8000af4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	f003 0307 	and.w	r3, r3, #7
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00c      	beq.n	800f684 <pvPortMalloc+0x180>
	__asm volatile
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	b672      	cpsid	i
 800f670:	f383 8811 	msr	BASEPRI, r3
 800f674:	f3bf 8f6f 	isb	sy
 800f678:	f3bf 8f4f 	dsb	sy
 800f67c:	b662      	cpsie	i
 800f67e:	60fb      	str	r3, [r7, #12]
}
 800f680:	bf00      	nop
 800f682:	e7fe      	b.n	800f682 <pvPortMalloc+0x17e>
	return pvReturn;
 800f684:	69fb      	ldr	r3, [r7, #28]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3728      	adds	r7, #40	; 0x28
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	2000853c 	.word	0x2000853c
 800f694:	20008548 	.word	0x20008548
 800f698:	20008540 	.word	0x20008540
 800f69c:	20008534 	.word	0x20008534
 800f6a0:	20008544 	.word	0x20008544

0800f6a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d04c      	beq.n	800f750 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f6b6:	2308      	movs	r3, #8
 800f6b8:	425b      	negs	r3, r3
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	4413      	add	r3, r2
 800f6be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	685a      	ldr	r2, [r3, #4]
 800f6c8:	4b23      	ldr	r3, [pc, #140]	; (800f758 <vPortFree+0xb4>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10c      	bne.n	800f6ec <vPortFree+0x48>
	__asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d6:	b672      	cpsid	i
 800f6d8:	f383 8811 	msr	BASEPRI, r3
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	b662      	cpsie	i
 800f6e6:	60fb      	str	r3, [r7, #12]
}
 800f6e8:	bf00      	nop
 800f6ea:	e7fe      	b.n	800f6ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00c      	beq.n	800f70e <vPortFree+0x6a>
	__asm volatile
 800f6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f8:	b672      	cpsid	i
 800f6fa:	f383 8811 	msr	BASEPRI, r3
 800f6fe:	f3bf 8f6f 	isb	sy
 800f702:	f3bf 8f4f 	dsb	sy
 800f706:	b662      	cpsie	i
 800f708:	60bb      	str	r3, [r7, #8]
}
 800f70a:	bf00      	nop
 800f70c:	e7fe      	b.n	800f70c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	4b11      	ldr	r3, [pc, #68]	; (800f758 <vPortFree+0xb4>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4013      	ands	r3, r2
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d019      	beq.n	800f750 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d115      	bne.n	800f750 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	4b0b      	ldr	r3, [pc, #44]	; (800f758 <vPortFree+0xb4>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	43db      	mvns	r3, r3
 800f72e:	401a      	ands	r2, r3
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f734:	f7fe fe7a 	bl	800e42c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	4b07      	ldr	r3, [pc, #28]	; (800f75c <vPortFree+0xb8>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4413      	add	r3, r2
 800f742:	4a06      	ldr	r2, [pc, #24]	; (800f75c <vPortFree+0xb8>)
 800f744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f746:	6938      	ldr	r0, [r7, #16]
 800f748:	f000 f86c 	bl	800f824 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f74c:	f7fe fe7c 	bl	800e448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f750:	bf00      	nop
 800f752:	3718      	adds	r7, #24
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	20008548 	.word	0x20008548
 800f75c:	20008540 	.word	0x20008540

0800f760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f760:	b480      	push	{r7}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f76a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f76c:	4b27      	ldr	r3, [pc, #156]	; (800f80c <prvHeapInit+0xac>)
 800f76e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f003 0307 	and.w	r3, r3, #7
 800f776:	2b00      	cmp	r3, #0
 800f778:	d00c      	beq.n	800f794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	3307      	adds	r3, #7
 800f77e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f023 0307 	bic.w	r3, r3, #7
 800f786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	4a1f      	ldr	r2, [pc, #124]	; (800f80c <prvHeapInit+0xac>)
 800f790:	4413      	add	r3, r2
 800f792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f798:	4a1d      	ldr	r2, [pc, #116]	; (800f810 <prvHeapInit+0xb0>)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f79e:	4b1c      	ldr	r3, [pc, #112]	; (800f810 <prvHeapInit+0xb0>)
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	68ba      	ldr	r2, [r7, #8]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7ac:	2208      	movs	r2, #8
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	1a9b      	subs	r3, r3, r2
 800f7b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f023 0307 	bic.w	r3, r3, #7
 800f7ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	4a15      	ldr	r2, [pc, #84]	; (800f814 <prvHeapInit+0xb4>)
 800f7c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7c2:	4b14      	ldr	r3, [pc, #80]	; (800f814 <prvHeapInit+0xb4>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7ca:	4b12      	ldr	r3, [pc, #72]	; (800f814 <prvHeapInit+0xb4>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	1ad2      	subs	r2, r2, r3
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7e0:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <prvHeapInit+0xb4>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	4a0a      	ldr	r2, [pc, #40]	; (800f818 <prvHeapInit+0xb8>)
 800f7ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	4a09      	ldr	r2, [pc, #36]	; (800f81c <prvHeapInit+0xbc>)
 800f7f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f7f8:	4b09      	ldr	r3, [pc, #36]	; (800f820 <prvHeapInit+0xc0>)
 800f7fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f7fe:	601a      	str	r2, [r3, #0]
}
 800f800:	bf00      	nop
 800f802:	3714      	adds	r7, #20
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	20000534 	.word	0x20000534
 800f810:	20008534 	.word	0x20008534
 800f814:	2000853c 	.word	0x2000853c
 800f818:	20008544 	.word	0x20008544
 800f81c:	20008540 	.word	0x20008540
 800f820:	20008548 	.word	0x20008548

0800f824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f824:	b480      	push	{r7}
 800f826:	b085      	sub	sp, #20
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f82c:	4b28      	ldr	r3, [pc, #160]	; (800f8d0 <prvInsertBlockIntoFreeList+0xac>)
 800f82e:	60fb      	str	r3, [r7, #12]
 800f830:	e002      	b.n	800f838 <prvInsertBlockIntoFreeList+0x14>
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	60fb      	str	r3, [r7, #12]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d8f7      	bhi.n	800f832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	68ba      	ldr	r2, [r7, #8]
 800f84c:	4413      	add	r3, r2
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	429a      	cmp	r2, r3
 800f852:	d108      	bne.n	800f866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	685a      	ldr	r2, [r3, #4]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	441a      	add	r2, r3
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	68ba      	ldr	r2, [r7, #8]
 800f870:	441a      	add	r2, r3
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	429a      	cmp	r2, r3
 800f878:	d118      	bne.n	800f8ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	4b15      	ldr	r3, [pc, #84]	; (800f8d4 <prvInsertBlockIntoFreeList+0xb0>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	429a      	cmp	r2, r3
 800f884:	d00d      	beq.n	800f8a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	685a      	ldr	r2, [r3, #4]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	441a      	add	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	601a      	str	r2, [r3, #0]
 800f8a0:	e008      	b.n	800f8b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8a2:	4b0c      	ldr	r3, [pc, #48]	; (800f8d4 <prvInsertBlockIntoFreeList+0xb0>)
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	e003      	b.n	800f8b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d002      	beq.n	800f8c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8c2:	bf00      	nop
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	20008534 	.word	0x20008534
 800f8d4:	2000853c 	.word	0x2000853c

0800f8d8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08c      	sub	sp, #48	; 0x30
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4a51      	ldr	r2, [pc, #324]	; (800fa28 <I2Cx_MspInit+0x150>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d14d      	bne.n	800f984 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f8e8:	4b50      	ldr	r3, [pc, #320]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ec:	4a4f      	ldr	r2, [pc, #316]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8f2:	6313      	str	r3, [r2, #48]	; 0x30
 800f8f4:	4b4d      	ldr	r3, [pc, #308]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8fc:	61bb      	str	r3, [r7, #24]
 800f8fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800f900:	2380      	movs	r3, #128	; 0x80
 800f902:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f904:	2312      	movs	r3, #18
 800f906:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f908:	2300      	movs	r3, #0
 800f90a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f90c:	2302      	movs	r3, #2
 800f90e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800f910:	2304      	movs	r3, #4
 800f912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f914:	f107 031c 	add.w	r3, r7, #28
 800f918:	4619      	mov	r1, r3
 800f91a:	4845      	ldr	r0, [pc, #276]	; (800fa30 <I2Cx_MspInit+0x158>)
 800f91c:	f7f5 ff1a 	bl	8005754 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800f920:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f926:	f107 031c 	add.w	r3, r7, #28
 800f92a:	4619      	mov	r1, r3
 800f92c:	4840      	ldr	r0, [pc, #256]	; (800fa30 <I2Cx_MspInit+0x158>)
 800f92e:	f7f5 ff11 	bl	8005754 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800f932:	4b3e      	ldr	r3, [pc, #248]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f936:	4a3d      	ldr	r2, [pc, #244]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f938:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f93c:	6413      	str	r3, [r2, #64]	; 0x40
 800f93e:	4b3b      	ldr	r3, [pc, #236]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f946:	617b      	str	r3, [r7, #20]
 800f948:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800f94a:	4b38      	ldr	r3, [pc, #224]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f94c:	6a1b      	ldr	r3, [r3, #32]
 800f94e:	4a37      	ldr	r2, [pc, #220]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f954:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800f956:	4b35      	ldr	r3, [pc, #212]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f958:	6a1b      	ldr	r3, [r3, #32]
 800f95a:	4a34      	ldr	r2, [pc, #208]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f95c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f960:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800f962:	2200      	movs	r2, #0
 800f964:	210f      	movs	r1, #15
 800f966:	2048      	movs	r0, #72	; 0x48
 800f968:	f7f5 f8c6 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800f96c:	2048      	movs	r0, #72	; 0x48
 800f96e:	f7f5 f8df 	bl	8004b30 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800f972:	2200      	movs	r2, #0
 800f974:	210f      	movs	r1, #15
 800f976:	2049      	movs	r0, #73	; 0x49
 800f978:	f7f5 f8be 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800f97c:	2049      	movs	r0, #73	; 0x49
 800f97e:	f7f5 f8d7 	bl	8004b30 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800f982:	e04d      	b.n	800fa20 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f984:	4b29      	ldr	r3, [pc, #164]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f988:	4a28      	ldr	r2, [pc, #160]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f98a:	f043 0302 	orr.w	r3, r3, #2
 800f98e:	6313      	str	r3, [r2, #48]	; 0x30
 800f990:	4b26      	ldr	r3, [pc, #152]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f994:	f003 0302 	and.w	r3, r3, #2
 800f998:	613b      	str	r3, [r7, #16]
 800f99a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800f99c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f9a0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f9a2:	2312      	movs	r3, #18
 800f9a4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f9aa:	2302      	movs	r3, #2
 800f9ac:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800f9ae:	2304      	movs	r3, #4
 800f9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f9b2:	f107 031c 	add.w	r3, r7, #28
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	481e      	ldr	r0, [pc, #120]	; (800fa34 <I2Cx_MspInit+0x15c>)
 800f9ba:	f7f5 fecb 	bl	8005754 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800f9be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f9c4:	f107 031c 	add.w	r3, r7, #28
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	481a      	ldr	r0, [pc, #104]	; (800fa34 <I2Cx_MspInit+0x15c>)
 800f9cc:	f7f5 fec2 	bl	8005754 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800f9d0:	4b16      	ldr	r3, [pc, #88]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9d4:	4a15      	ldr	r2, [pc, #84]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f9d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9da:	6413      	str	r3, [r2, #64]	; 0x40
 800f9dc:	4b13      	ldr	r3, [pc, #76]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f9e4:	60fb      	str	r3, [r7, #12]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800f9e8:	4b10      	ldr	r3, [pc, #64]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f9ea:	6a1b      	ldr	r3, [r3, #32]
 800f9ec:	4a0f      	ldr	r2, [pc, #60]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f9ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9f2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800f9f4:	4b0d      	ldr	r3, [pc, #52]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f9f6:	6a1b      	ldr	r3, [r3, #32]
 800f9f8:	4a0c      	ldr	r2, [pc, #48]	; (800fa2c <I2Cx_MspInit+0x154>)
 800f9fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f9fe:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800fa00:	2200      	movs	r2, #0
 800fa02:	210f      	movs	r1, #15
 800fa04:	201f      	movs	r0, #31
 800fa06:	f7f5 f877 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800fa0a:	201f      	movs	r0, #31
 800fa0c:	f7f5 f890 	bl	8004b30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800fa10:	2200      	movs	r2, #0
 800fa12:	210f      	movs	r1, #15
 800fa14:	2020      	movs	r0, #32
 800fa16:	f7f5 f86f 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800fa1a:	2020      	movs	r0, #32
 800fa1c:	f7f5 f888 	bl	8004b30 <HAL_NVIC_EnableIRQ>
}
 800fa20:	bf00      	nop
 800fa22:	3730      	adds	r7, #48	; 0x30
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	2000854c 	.word	0x2000854c
 800fa2c:	40023800 	.word	0x40023800
 800fa30:	40021c00 	.word	0x40021c00
 800fa34:	40020400 	.word	0x40020400

0800fa38 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7f6 fb67 	bl	8006114 <HAL_I2C_GetState>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d125      	bne.n	800fa98 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4a14      	ldr	r2, [pc, #80]	; (800faa0 <I2Cx_Init+0x68>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d103      	bne.n	800fa5c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4a13      	ldr	r2, [pc, #76]	; (800faa4 <I2Cx_Init+0x6c>)
 800fa58:	601a      	str	r2, [r3, #0]
 800fa5a:	e002      	b.n	800fa62 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	4a12      	ldr	r2, [pc, #72]	; (800faa8 <I2Cx_Init+0x70>)
 800fa60:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a11      	ldr	r2, [pc, #68]	; (800faac <I2Cx_Init+0x74>)
 800fa66:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2201      	movs	r2, #1
 800fa72:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7ff ff23 	bl	800f8d8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7f6 f83c 	bl	8005b10 <HAL_I2C_Init>
  }
}
 800fa98:	bf00      	nop
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	2000854c 	.word	0x2000854c
 800faa4:	40005c00 	.word	0x40005c00
 800faa8:	40005400 	.word	0x40005400
 800faac:	40912732 	.word	0x40912732

0800fab0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b08a      	sub	sp, #40	; 0x28
 800fab4:	af04      	add	r7, sp, #16
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	4608      	mov	r0, r1
 800faba:	4611      	mov	r1, r2
 800fabc:	461a      	mov	r2, r3
 800fabe:	4603      	mov	r3, r0
 800fac0:	72fb      	strb	r3, [r7, #11]
 800fac2:	460b      	mov	r3, r1
 800fac4:	813b      	strh	r3, [r7, #8]
 800fac6:	4613      	mov	r3, r2
 800fac8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800face:	7afb      	ldrb	r3, [r7, #11]
 800fad0:	b299      	uxth	r1, r3
 800fad2:	88f8      	ldrh	r0, [r7, #6]
 800fad4:	893a      	ldrh	r2, [r7, #8]
 800fad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fada:	9302      	str	r3, [sp, #8]
 800fadc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fade:	9301      	str	r3, [sp, #4]
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	4603      	mov	r3, r0
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f7f6 f9fa 	bl	8005ee0 <HAL_I2C_Mem_Read>
 800faec:	4603      	mov	r3, r0
 800faee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800faf0:	7dfb      	ldrb	r3, [r7, #23]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d004      	beq.n	800fb00 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800faf6:	7afb      	ldrb	r3, [r7, #11]
 800faf8:	4619      	mov	r1, r3
 800fafa:	68f8      	ldr	r0, [r7, #12]
 800fafc:	f000 f832 	bl	800fb64 <I2Cx_Error>
  }
  return status;    
 800fb00:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b08a      	sub	sp, #40	; 0x28
 800fb0e:	af04      	add	r7, sp, #16
 800fb10:	60f8      	str	r0, [r7, #12]
 800fb12:	4608      	mov	r0, r1
 800fb14:	4611      	mov	r1, r2
 800fb16:	461a      	mov	r2, r3
 800fb18:	4603      	mov	r3, r0
 800fb1a:	72fb      	strb	r3, [r7, #11]
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	813b      	strh	r3, [r7, #8]
 800fb20:	4613      	mov	r3, r2
 800fb22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fb24:	2300      	movs	r3, #0
 800fb26:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fb28:	7afb      	ldrb	r3, [r7, #11]
 800fb2a:	b299      	uxth	r1, r3
 800fb2c:	88f8      	ldrh	r0, [r7, #6]
 800fb2e:	893a      	ldrh	r2, [r7, #8]
 800fb30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb34:	9302      	str	r3, [sp, #8]
 800fb36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	6a3b      	ldr	r3, [r7, #32]
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	4603      	mov	r3, r0
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f7f6 f8b9 	bl	8005cb8 <HAL_I2C_Mem_Write>
 800fb46:	4603      	mov	r3, r0
 800fb48:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800fb4a:	7dfb      	ldrb	r3, [r7, #23]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d004      	beq.n	800fb5a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800fb50:	7afb      	ldrb	r3, [r7, #11]
 800fb52:	4619      	mov	r1, r3
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f000 f805 	bl	800fb64 <I2Cx_Error>
  }
  return status;
 800fb5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3718      	adds	r7, #24
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7f6 f85d 	bl	8005c30 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f7ff ff5e 	bl	800fa38 <I2Cx_Init>
}
 800fb7c:	bf00      	nop
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800fb88:	4802      	ldr	r0, [pc, #8]	; (800fb94 <TS_IO_Init+0x10>)
 800fb8a:	f7ff ff55 	bl	800fa38 <I2Cx_Init>
}
 800fb8e:	bf00      	nop
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	2000854c 	.word	0x2000854c

0800fb98 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af02      	add	r7, sp, #8
 800fb9e:	4603      	mov	r3, r0
 800fba0:	71fb      	strb	r3, [r7, #7]
 800fba2:	460b      	mov	r3, r1
 800fba4:	71bb      	strb	r3, [r7, #6]
 800fba6:	4613      	mov	r3, r2
 800fba8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800fbaa:	79bb      	ldrb	r3, [r7, #6]
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	79f9      	ldrb	r1, [r7, #7]
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	9301      	str	r3, [sp, #4]
 800fbb4:	1d7b      	adds	r3, r7, #5
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	2301      	movs	r3, #1
 800fbba:	4803      	ldr	r0, [pc, #12]	; (800fbc8 <TS_IO_Write+0x30>)
 800fbbc:	f7ff ffa5 	bl	800fb0a <I2Cx_WriteMultiple>
}
 800fbc0:	bf00      	nop
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	2000854c 	.word	0x2000854c

0800fbcc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af02      	add	r7, sp, #8
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	460a      	mov	r2, r1
 800fbd6:	71fb      	strb	r3, [r7, #7]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800fbe0:	79bb      	ldrb	r3, [r7, #6]
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	79f9      	ldrb	r1, [r7, #7]
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	9301      	str	r3, [sp, #4]
 800fbea:	f107 030f 	add.w	r3, r7, #15
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	4804      	ldr	r0, [pc, #16]	; (800fc04 <TS_IO_Read+0x38>)
 800fbf4:	f7ff ff5c 	bl	800fab0 <I2Cx_ReadMultiple>

  return read_value;
 800fbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	2000854c 	.word	0x2000854c

0800fc08 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f7f3 fe61 	bl	80038d8 <HAL_Delay>
}
 800fc16:	bf00      	nop
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
	...

0800fc20 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	4603      	mov	r3, r0
 800fc28:	460a      	mov	r2, r1
 800fc2a:	80fb      	strh	r3, [r7, #6]
 800fc2c:	4613      	mov	r3, r2
 800fc2e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800fc30:	2300      	movs	r3, #0
 800fc32:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800fc34:	4a14      	ldr	r2, [pc, #80]	; (800fc88 <BSP_TS_Init+0x68>)
 800fc36:	88fb      	ldrh	r3, [r7, #6]
 800fc38:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800fc3a:	4a14      	ldr	r2, [pc, #80]	; (800fc8c <BSP_TS_Init+0x6c>)
 800fc3c:	88bb      	ldrh	r3, [r7, #4]
 800fc3e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800fc40:	4b13      	ldr	r3, [pc, #76]	; (800fc90 <BSP_TS_Init+0x70>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2070      	movs	r0, #112	; 0x70
 800fc46:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800fc48:	4b11      	ldr	r3, [pc, #68]	; (800fc90 <BSP_TS_Init+0x70>)
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	2070      	movs	r0, #112	; 0x70
 800fc4e:	4798      	blx	r3
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b51      	cmp	r3, #81	; 0x51
 800fc54:	d111      	bne.n	800fc7a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800fc56:	4b0f      	ldr	r3, [pc, #60]	; (800fc94 <BSP_TS_Init+0x74>)
 800fc58:	4a0d      	ldr	r2, [pc, #52]	; (800fc90 <BSP_TS_Init+0x70>)
 800fc5a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800fc5c:	4b0e      	ldr	r3, [pc, #56]	; (800fc98 <BSP_TS_Init+0x78>)
 800fc5e:	2270      	movs	r2, #112	; 0x70
 800fc60:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800fc62:	4b0e      	ldr	r3, [pc, #56]	; (800fc9c <BSP_TS_Init+0x7c>)
 800fc64:	2208      	movs	r2, #8
 800fc66:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800fc68:	4b0a      	ldr	r3, [pc, #40]	; (800fc94 <BSP_TS_Init+0x74>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	4a0a      	ldr	r2, [pc, #40]	; (800fc98 <BSP_TS_Init+0x78>)
 800fc70:	7812      	ldrb	r2, [r2, #0]
 800fc72:	b292      	uxth	r2, r2
 800fc74:	4610      	mov	r0, r2
 800fc76:	4798      	blx	r3
 800fc78:	e001      	b.n	800fc7e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800fc7a:	2303      	movs	r3, #3
 800fc7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	2000859c 	.word	0x2000859c
 800fc8c:	2000859e 	.word	0x2000859e
 800fc90:	20000058 	.word	0x20000058
 800fc94:	20008598 	.word	0x20008598
 800fc98:	200085a1 	.word	0x200085a1
 800fc9c:	200085a0 	.word	0x200085a0

0800fca0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800fca0:	b590      	push	{r4, r7, lr}
 800fca2:	b097      	sub	sp, #92	; 0x5c
 800fca4:	af02      	add	r7, sp, #8
 800fca6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800fcba:	4b97      	ldr	r3, [pc, #604]	; (800ff18 <BSP_TS_GetState+0x278>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	691b      	ldr	r3, [r3, #16]
 800fcc0:	4a96      	ldr	r2, [pc, #600]	; (800ff1c <BSP_TS_GetState+0x27c>)
 800fcc2:	7812      	ldrb	r2, [r2, #0]
 800fcc4:	b292      	uxth	r2, r2
 800fcc6:	4610      	mov	r0, r2
 800fcc8:	4798      	blx	r3
 800fcca:	4603      	mov	r3, r0
 800fccc:	461a      	mov	r2, r3
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f000 81a8 	beq.w	801002c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800fcdc:	2300      	movs	r3, #0
 800fcde:	64bb      	str	r3, [r7, #72]	; 0x48
 800fce0:	e197      	b.n	8010012 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800fce2:	4b8d      	ldr	r3, [pc, #564]	; (800ff18 <BSP_TS_GetState+0x278>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	695b      	ldr	r3, [r3, #20]
 800fce8:	4a8c      	ldr	r2, [pc, #560]	; (800ff1c <BSP_TS_GetState+0x27c>)
 800fcea:	7812      	ldrb	r2, [r2, #0]
 800fcec:	b290      	uxth	r0, r2
 800fcee:	f107 0120 	add.w	r1, r7, #32
 800fcf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcf4:	0052      	lsls	r2, r2, #1
 800fcf6:	188c      	adds	r4, r1, r2
 800fcf8:	f107 0114 	add.w	r1, r7, #20
 800fcfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcfe:	0052      	lsls	r2, r2, #1
 800fd00:	440a      	add	r2, r1
 800fd02:	4621      	mov	r1, r4
 800fd04:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800fd06:	4b86      	ldr	r3, [pc, #536]	; (800ff20 <BSP_TS_GetState+0x280>)
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d11b      	bne.n	800fd46 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800fd0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd10:	005b      	lsls	r3, r3, #1
 800fd12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd16:	4413      	add	r3, r2
 800fd18:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fd1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd1e:	005b      	lsls	r3, r3, #1
 800fd20:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd24:	440b      	add	r3, r1
 800fd26:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800fd2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd2c:	005b      	lsls	r3, r3, #1
 800fd2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd32:	4413      	add	r3, r2
 800fd34:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fd38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd3a:	005b      	lsls	r3, r3, #1
 800fd3c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd40:	440b      	add	r3, r1
 800fd42:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800fd46:	4b76      	ldr	r3, [pc, #472]	; (800ff20 <BSP_TS_GetState+0x280>)
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	f003 0302 	and.w	r3, r3, #2
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d010      	beq.n	800fd74 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800fd52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd54:	005b      	lsls	r3, r3, #1
 800fd56:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd5a:	4413      	add	r3, r2
 800fd5c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800fd60:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd68:	005b      	lsls	r3, r3, #1
 800fd6a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd6e:	440b      	add	r3, r1
 800fd70:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800fd74:	4b6a      	ldr	r3, [pc, #424]	; (800ff20 <BSP_TS_GetState+0x280>)
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	f003 0304 	and.w	r3, r3, #4
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d010      	beq.n	800fda2 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800fd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd82:	005b      	lsls	r3, r3, #1
 800fd84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd88:	4413      	add	r3, r2
 800fd8a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800fd8e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd96:	005b      	lsls	r3, r3, #1
 800fd98:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd9c:	440b      	add	r3, r1
 800fd9e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800fda2:	4b5f      	ldr	r3, [pc, #380]	; (800ff20 <BSP_TS_GetState+0x280>)
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	f003 0308 	and.w	r3, r3, #8
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d01b      	beq.n	800fde6 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800fdae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdb0:	005b      	lsls	r3, r3, #1
 800fdb2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fdbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdbe:	005b      	lsls	r3, r3, #1
 800fdc0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fdc4:	440b      	add	r3, r1
 800fdc6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800fdca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fdd2:	4413      	add	r3, r2
 800fdd4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fdd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdda:	005b      	lsls	r3, r3, #1
 800fddc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fde0:	440b      	add	r3, r1
 800fde2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800fde6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fde8:	005b      	lsls	r3, r3, #1
 800fdea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fdee:	4413      	add	r3, r2
 800fdf0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	4a4b      	ldr	r2, [pc, #300]	; (800ff24 <BSP_TS_GetState+0x284>)
 800fdf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdfe:	4299      	cmp	r1, r3
 800fe00:	d90e      	bls.n	800fe20 <BSP_TS_GetState+0x180>
 800fe02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe04:	005b      	lsls	r3, r3, #1
 800fe06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800fe10:	4944      	ldr	r1, [pc, #272]	; (800ff24 <BSP_TS_GetState+0x284>)
 800fe12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	e00d      	b.n	800fe3c <BSP_TS_GetState+0x19c>
 800fe20:	4a40      	ldr	r2, [pc, #256]	; (800ff24 <BSP_TS_GetState+0x284>)
 800fe22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe2c:	005b      	lsls	r3, r3, #1
 800fe2e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fe32:	440b      	add	r3, r1
 800fe34:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fe38:	1ad3      	subs	r3, r2, r3
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800fe40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe42:	005b      	lsls	r3, r3, #1
 800fe44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe48:	4413      	add	r3, r2
 800fe4a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	4a35      	ldr	r2, [pc, #212]	; (800ff28 <BSP_TS_GetState+0x288>)
 800fe52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe58:	4299      	cmp	r1, r3
 800fe5a:	d90e      	bls.n	800fe7a <BSP_TS_GetState+0x1da>
 800fe5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe5e:	005b      	lsls	r3, r3, #1
 800fe60:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe64:	4413      	add	r3, r2
 800fe66:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800fe6a:	492f      	ldr	r1, [pc, #188]	; (800ff28 <BSP_TS_GetState+0x288>)
 800fe6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	1ad3      	subs	r3, r2, r3
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	e00d      	b.n	800fe96 <BSP_TS_GetState+0x1f6>
 800fe7a:	4a2b      	ldr	r2, [pc, #172]	; (800ff28 <BSP_TS_GetState+0x288>)
 800fe7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe86:	005b      	lsls	r3, r3, #1
 800fe88:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fe8c:	440b      	add	r3, r1
 800fe8e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800fe9a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fe9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fea2:	4413      	add	r3, r2
 800fea4:	2b05      	cmp	r3, #5
 800fea6:	dd17      	ble.n	800fed8 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800fea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feaa:	005b      	lsls	r3, r3, #1
 800feac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800feb0:	4413      	add	r3, r2
 800feb2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800feb6:	4619      	mov	r1, r3
 800feb8:	4a1a      	ldr	r2, [pc, #104]	; (800ff24 <BSP_TS_GetState+0x284>)
 800feba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800febc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800fec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fec8:	4413      	add	r3, r2
 800feca:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fece:	4619      	mov	r1, r3
 800fed0:	4a15      	ldr	r2, [pc, #84]	; (800ff28 <BSP_TS_GetState+0x288>)
 800fed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fed4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800fed8:	4b10      	ldr	r3, [pc, #64]	; (800ff1c <BSP_TS_GetState+0x27c>)
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	2b70      	cmp	r3, #112	; 0x70
 800fede:	d125      	bne.n	800ff2c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800fee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fee2:	005b      	lsls	r3, r3, #1
 800fee4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fee8:	4413      	add	r3, r2
 800feea:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fef2:	005b      	lsls	r3, r3, #1
 800fef4:	4413      	add	r3, r2
 800fef6:	460a      	mov	r2, r1
 800fef8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800fefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff02:	4413      	add	r3, r2
 800ff04:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	005b      	lsls	r3, r3, #1
 800ff10:	4413      	add	r3, r2
 800ff12:	460a      	mov	r2, r1
 800ff14:	809a      	strh	r2, [r3, #4]
 800ff16:	e02c      	b.n	800ff72 <BSP_TS_GetState+0x2d2>
 800ff18:	20008598 	.word	0x20008598
 800ff1c:	200085a1 	.word	0x200085a1
 800ff20:	200085a0 	.word	0x200085a0
 800ff24:	200085a4 	.word	0x200085a4
 800ff28:	200085b8 	.word	0x200085b8
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800ff2c:	4b42      	ldr	r3, [pc, #264]	; (8010038 <BSP_TS_GetState+0x398>)
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	4619      	mov	r1, r3
 800ff32:	4a42      	ldr	r2, [pc, #264]	; (801003c <BSP_TS_GetState+0x39c>)
 800ff34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff3a:	fb03 f301 	mul.w	r3, r3, r1
 800ff3e:	0b1b      	lsrs	r3, r3, #12
 800ff40:	b299      	uxth	r1, r3
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff46:	005b      	lsls	r3, r3, #1
 800ff48:	4413      	add	r3, r2
 800ff4a:	460a      	mov	r2, r1
 800ff4c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800ff4e:	4b3c      	ldr	r3, [pc, #240]	; (8010040 <BSP_TS_GetState+0x3a0>)
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	4619      	mov	r1, r3
 800ff54:	4a3b      	ldr	r2, [pc, #236]	; (8010044 <BSP_TS_GetState+0x3a4>)
 800ff56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff5c:	fb03 f301 	mul.w	r3, r3, r1
 800ff60:	0b1b      	lsrs	r3, r3, #12
 800ff62:	b299      	uxth	r1, r3
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff68:	3304      	adds	r3, #4
 800ff6a:	005b      	lsls	r3, r3, #1
 800ff6c:	4413      	add	r3, r2
 800ff6e:	460a      	mov	r2, r1
 800ff70:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800ff72:	4b35      	ldr	r3, [pc, #212]	; (8010048 <BSP_TS_GetState+0x3a8>)
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	b298      	uxth	r0, r3
 800ff78:	f107 010c 	add.w	r1, r7, #12
 800ff7c:	f107 0210 	add.w	r2, r7, #16
 800ff80:	f107 0308 	add.w	r3, r7, #8
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	460b      	mov	r3, r1
 800ff88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ff8a:	f008 faa5 	bl	80184d8 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	b2d9      	uxtb	r1, r3
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff96:	4413      	add	r3, r2
 800ff98:	3316      	adds	r3, #22
 800ff9a:	460a      	mov	r2, r1
 800ff9c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	b2d9      	uxtb	r1, r3
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffa6:	4413      	add	r3, r2
 800ffa8:	3320      	adds	r3, #32
 800ffaa:	460a      	mov	r2, r1
 800ffac:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	2b03      	cmp	r3, #3
 800ffb2:	d827      	bhi.n	8010004 <BSP_TS_GetState+0x364>
 800ffb4:	a201      	add	r2, pc, #4	; (adr r2, 800ffbc <BSP_TS_GetState+0x31c>)
 800ffb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffba:	bf00      	nop
 800ffbc:	0800ffcd 	.word	0x0800ffcd
 800ffc0:	0800ffdb 	.word	0x0800ffdb
 800ffc4:	0800ffe9 	.word	0x0800ffe9
 800ffc8:	0800fff7 	.word	0x0800fff7
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffd0:	4413      	add	r3, r2
 800ffd2:	331b      	adds	r3, #27
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	701a      	strb	r2, [r3, #0]
          break;
 800ffd8:	e018      	b.n	801000c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffde:	4413      	add	r3, r2
 800ffe0:	331b      	adds	r3, #27
 800ffe2:	2202      	movs	r2, #2
 800ffe4:	701a      	strb	r2, [r3, #0]
          break;
 800ffe6:	e011      	b.n	801000c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffec:	4413      	add	r3, r2
 800ffee:	331b      	adds	r3, #27
 800fff0:	2203      	movs	r2, #3
 800fff2:	701a      	strb	r2, [r3, #0]
          break;
 800fff4:	e00a      	b.n	801000c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fffa:	4413      	add	r3, r2
 800fffc:	331b      	adds	r3, #27
 800fffe:	2200      	movs	r2, #0
 8010000:	701a      	strb	r2, [r3, #0]
          break;
 8010002:	e003      	b.n	801000c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8010004:	2301      	movs	r3, #1
 8010006:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 801000a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 801000c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801000e:	3301      	adds	r3, #1
 8010010:	64bb      	str	r3, [r7, #72]	; 0x48
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	461a      	mov	r2, r3
 8010018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801001a:	4293      	cmp	r3, r2
 801001c:	f4ff ae61 	bcc.w	800fce2 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 f813 	bl	801004c <BSP_TS_Get_GestureId>
 8010026:	4603      	mov	r3, r0
 8010028:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 801002c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8010030:	4618      	mov	r0, r3
 8010032:	3754      	adds	r7, #84	; 0x54
 8010034:	46bd      	mov	sp, r7
 8010036:	bd90      	pop	{r4, r7, pc}
 8010038:	2000859c 	.word	0x2000859c
 801003c:	200085a4 	.word	0x200085a4
 8010040:	2000859e 	.word	0x2000859e
 8010044:	200085b8 	.word	0x200085b8
 8010048:	200085a1 	.word	0x200085a1

0801004c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8010054:	2300      	movs	r3, #0
 8010056:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8010058:	2300      	movs	r3, #0
 801005a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 801005c:	4b3b      	ldr	r3, [pc, #236]	; (801014c <BSP_TS_Get_GestureId+0x100>)
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	b29b      	uxth	r3, r3
 8010062:	f107 0208 	add.w	r2, r7, #8
 8010066:	4611      	mov	r1, r2
 8010068:	4618      	mov	r0, r3
 801006a:	f008 fa1c 	bl	80184a6 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	2b49      	cmp	r3, #73	; 0x49
 8010072:	d05e      	beq.n	8010132 <BSP_TS_Get_GestureId+0xe6>
 8010074:	2b49      	cmp	r3, #73	; 0x49
 8010076:	d860      	bhi.n	801013a <BSP_TS_Get_GestureId+0xee>
 8010078:	2b1c      	cmp	r3, #28
 801007a:	d83f      	bhi.n	80100fc <BSP_TS_Get_GestureId+0xb0>
 801007c:	2b1c      	cmp	r3, #28
 801007e:	d85c      	bhi.n	801013a <BSP_TS_Get_GestureId+0xee>
 8010080:	a201      	add	r2, pc, #4	; (adr r2, 8010088 <BSP_TS_Get_GestureId+0x3c>)
 8010082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010086:	bf00      	nop
 8010088:	08010103 	.word	0x08010103
 801008c:	0801013b 	.word	0x0801013b
 8010090:	0801013b 	.word	0x0801013b
 8010094:	0801013b 	.word	0x0801013b
 8010098:	0801013b 	.word	0x0801013b
 801009c:	0801013b 	.word	0x0801013b
 80100a0:	0801013b 	.word	0x0801013b
 80100a4:	0801013b 	.word	0x0801013b
 80100a8:	0801013b 	.word	0x0801013b
 80100ac:	0801013b 	.word	0x0801013b
 80100b0:	0801013b 	.word	0x0801013b
 80100b4:	0801013b 	.word	0x0801013b
 80100b8:	0801013b 	.word	0x0801013b
 80100bc:	0801013b 	.word	0x0801013b
 80100c0:	0801013b 	.word	0x0801013b
 80100c4:	0801013b 	.word	0x0801013b
 80100c8:	0801010b 	.word	0x0801010b
 80100cc:	0801013b 	.word	0x0801013b
 80100d0:	0801013b 	.word	0x0801013b
 80100d4:	0801013b 	.word	0x0801013b
 80100d8:	08010113 	.word	0x08010113
 80100dc:	0801013b 	.word	0x0801013b
 80100e0:	0801013b 	.word	0x0801013b
 80100e4:	0801013b 	.word	0x0801013b
 80100e8:	0801011b 	.word	0x0801011b
 80100ec:	0801013b 	.word	0x0801013b
 80100f0:	0801013b 	.word	0x0801013b
 80100f4:	0801013b 	.word	0x0801013b
 80100f8:	08010123 	.word	0x08010123
 80100fc:	2b40      	cmp	r3, #64	; 0x40
 80100fe:	d014      	beq.n	801012a <BSP_TS_Get_GestureId+0xde>
 8010100:	e01b      	b.n	801013a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010108:	e01a      	b.n	8010140 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2201      	movs	r2, #1
 801010e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010110:	e016      	b.n	8010140 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2202      	movs	r2, #2
 8010116:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010118:	e012      	b.n	8010140 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2203      	movs	r2, #3
 801011e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010120:	e00e      	b.n	8010140 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2204      	movs	r2, #4
 8010126:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010128:	e00a      	b.n	8010140 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2205      	movs	r2, #5
 801012e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010130:	e006      	b.n	8010140 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2206      	movs	r2, #6
 8010136:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010138:	e002      	b.n	8010140 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 801013a:	2301      	movs	r3, #1
 801013c:	73fb      	strb	r3, [r7, #15]
      break;
 801013e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8010140:	7bfb      	ldrb	r3, [r7, #15]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	200085a1 	.word	0x200085a1

08010150 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8010154:	f007 fbd2 	bl	80178fc <touchgfx_init>
}
 8010158:	bf00      	nop
 801015a:	bd80      	pop	{r7, pc}

0801015c <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8010160:	f007 fbf6 	bl	8017950 <touchgfx_taskEntry>
}
 8010164:	bf00      	nop
 8010166:	bd80      	pop	{r7, pc}

08010168 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
    {
 8010170:	4a04      	ldr	r2, [pc, #16]	; (8010184 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	601a      	str	r2, [r3, #0]
    }
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4618      	mov	r0, r3
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr
 8010184:	0802a3d4 	.word	0x0802a3d4

08010188 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
    }
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f7ff ffe9 	bl	8010168 <_ZN8touchgfx12FontProviderD1Ev>
 8010196:	2104      	movs	r1, #4
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f018 f9d5 	bl	8028548 <_ZdlPvj>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4618      	mov	r0, r3
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	460b      	mov	r3, r1
 80101b2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80101b4:	887b      	ldrh	r3, [r7, #2]
 80101b6:	2b07      	cmp	r3, #7
 80101b8:	d83a      	bhi.n	8010230 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 80101ba:	a201      	add	r2, pc, #4	; (adr r2, 80101c0 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80101bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c0:	080101e1 	.word	0x080101e1
 80101c4:	080101eb 	.word	0x080101eb
 80101c8:	080101f5 	.word	0x080101f5
 80101cc:	080101ff 	.word	0x080101ff
 80101d0:	08010209 	.word	0x08010209
 80101d4:	08010213 	.word	0x08010213
 80101d8:	0801021d 	.word	0x0801021d
 80101dc:	08010227 	.word	0x08010227
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80101e0:	f005 fa72 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 80101e4:	4603      	mov	r3, r0
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	e023      	b.n	8010232 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80101ea:	f005 fa6d 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 80101ee:	4603      	mov	r3, r0
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	e01e      	b.n	8010232 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80101f4:	f005 fa68 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 80101f8:	4603      	mov	r3, r0
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	e019      	b.n	8010232 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80101fe:	f005 fa63 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 8010202:	4603      	mov	r3, r0
 8010204:	689b      	ldr	r3, [r3, #8]
 8010206:	e014      	b.n	8010232 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8010208:	f005 fa5e 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 801020c:	4603      	mov	r3, r0
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	e00f      	b.n	8010232 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8010212:	f005 fa59 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 8010216:	4603      	mov	r3, r0
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	e00a      	b.n	8010232 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 801021c:	f005 fa54 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 8010220:	4603      	mov	r3, r0
 8010222:	695b      	ldr	r3, [r3, #20]
 8010224:	e005      	b.n	8010232 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8010226:	f005 fa4f 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 801022a:	4603      	mov	r3, r0
 801022c:	699b      	ldr	r3, [r3, #24]
 801022e:	e000      	b.n	8010232 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 8010230:	2300      	movs	r3, #0
    }
}
 8010232:	4618      	mov	r0, r3
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop

0801023c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	4a05      	ldr	r2, [pc, #20]	; (801025c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	601a      	str	r2, [r3, #0]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4618      	mov	r0, r3
 801024e:	f7ff ff8b 	bl	8010168 <_ZN8touchgfx12FontProviderD1Ev>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4618      	mov	r0, r3
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	0802a3c0 	.word	0x0802a3c0

08010260 <_ZN23ApplicationFontProviderD0Ev>:
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7ff ffe7 	bl	801023c <_ZN23ApplicationFontProviderD1Ev>
 801026e:	2104      	movs	r1, #4
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f018 f969 	bl	8028548 <_ZdlPvj>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4618      	mov	r0, r3
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	4a04      	ldr	r2, [pc, #16]	; (801029c <_ZN8touchgfx4FontD1Ev+0x1c>)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4618      	mov	r0, r3
 8010292:	370c      	adds	r7, #12
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr
 801029c:	0802c924 	.word	0x0802c924

080102a0 <_ZN8touchgfx4FontD0Ev>:
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7ff ffe9 	bl	8010280 <_ZN8touchgfx4FontD1Ev>
 80102ae:	2110      	movs	r1, #16
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f018 f949 	bl	8028548 <_ZdlPvj>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4618      	mov	r0, r3
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80102c0:	b590      	push	{r4, r7, lr}
 80102c2:	b087      	sub	sp, #28
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	460b      	mov	r3, r1
 80102ca:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80102d0:	2300      	movs	r3, #0
 80102d2:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	3308      	adds	r3, #8
 80102da:	681c      	ldr	r4, [r3, #0]
 80102dc:	f107 030f 	add.w	r3, r7, #15
 80102e0:	f107 0210 	add.w	r2, r7, #16
 80102e4:	8879      	ldrh	r1, [r7, #2]
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	47a0      	blx	r4
 80102ea:	6178      	str	r0, [r7, #20]
        return glyph;
 80102ec:	697b      	ldr	r3, [r7, #20]
    }
 80102ee:	4618      	mov	r0, r3
 80102f0:	371c      	adds	r7, #28
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd90      	pop	{r4, r7, pc}

080102f6 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80102f6:	b480      	push	{r7}
 80102f8:	b083      	sub	sp, #12
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	895b      	ldrh	r3, [r3, #10]
    }
 8010302:	4618      	mov	r0, r3
 8010304:	370c      	adds	r7, #12
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr

0801030e <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801030e:	b480      	push	{r7}
 8010310:	b083      	sub	sp, #12
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	899b      	ldrh	r3, [r3, #12]
    }
 801031a:	4618      	mov	r0, r3
 801031c:	370c      	adds	r7, #12
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	889b      	ldrh	r3, [r3, #4]
    }
 8010332:	4618      	mov	r0, r3
 8010334:	370c      	adds	r7, #12
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr

0801033e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 801033e:	b480      	push	{r7}
 8010340:	b083      	sub	sp, #12
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	889a      	ldrh	r2, [r3, #4]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	799b      	ldrb	r3, [r3, #6]
 801034e:	b29b      	uxth	r3, r3
 8010350:	4413      	add	r3, r2
 8010352:	b29b      	uxth	r3, r3
    }
 8010354:	4618      	mov	r0, r3
 8010356:	370c      	adds	r7, #12
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	79db      	ldrb	r3, [r3, #7]
 801036c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8010370:	b2db      	uxtb	r3, r3
    }
 8010372:	4618      	mov	r0, r3
 8010374:	370c      	adds	r7, #12
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr

0801037e <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 801037e:	b480      	push	{r7}
 8010380:	b083      	sub	sp, #12
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
    {
        return a4;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	79db      	ldrb	r3, [r3, #7]
 801038a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801038e:	b2db      	uxtb	r3, r3
    }
 8010390:	4618      	mov	r0, r3
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	4a05      	ldr	r2, [pc, #20]	; (80103bc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7ff ff67 	bl	8010280 <_ZN8touchgfx4FontD1Ev>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	0802c9dc 	.word	0x0802c9dc

080103c0 <_ZN8touchgfx9ConstFontD0Ev>:
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7ff ffe7 	bl	801039c <_ZN8touchgfx9ConstFontD1Ev>
 80103ce:	2118      	movs	r1, #24
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f018 f8b9 	bl	8028548 <_ZdlPvj>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4618      	mov	r0, r3
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	4a05      	ldr	r2, [pc, #20]	; (8010400 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	601a      	str	r2, [r3, #0]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff ffd3 	bl	801039c <_ZN8touchgfx9ConstFontD1Ev>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4618      	mov	r0, r3
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	0802a3e8 	.word	0x0802a3e8

08010404 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7ff ffe7 	bl	80103e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010412:	2124      	movs	r1, #36	; 0x24
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f018 f897 	bl	8028548 <_ZdlPvj>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 f82d 	bl	801048c <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 8010432:	4b08      	ldr	r3, [pc, #32]	; (8010454 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	4b08      	ldr	r3, [pc, #32]	; (8010458 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8010438:	6819      	ldr	r1, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	881b      	ldrh	r3, [r3, #0]
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	440b      	add	r3, r1
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	4413      	add	r3, r2
 8010448:	681b      	ldr	r3, [r3, #0]
    }
 801044a:	4618      	mov	r0, r3
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	2000bf88 	.word	0x2000bf88
 8010458:	2000bf80 	.word	0x2000bf80

0801045c <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 f811 	bl	801048c <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 801046a:	4b07      	ldr	r3, [pc, #28]	; (8010488 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	881b      	ldrh	r3, [r3, #0]
 8010472:	005b      	lsls	r3, r3, #1
 8010474:	4413      	add	r3, r2
 8010476:	785b      	ldrb	r3, [r3, #1]
 8010478:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801047c:	b2db      	uxtb	r3, r3
    }
 801047e:	4618      	mov	r0, r3
 8010480:	3708      	adds	r7, #8
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	2000bf80 	.word	0x2000bf80

0801048c <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010494:	4b0c      	ldr	r3, [pc, #48]	; (80104c8 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d105      	bne.n	80104a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 801049c:	4b0b      	ldr	r3, [pc, #44]	; (80104cc <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 801049e:	4a0c      	ldr	r2, [pc, #48]	; (80104d0 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 80104a0:	21de      	movs	r1, #222	; 0xde
 80104a2:	480c      	ldr	r0, [pc, #48]	; (80104d4 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 80104a4:	f018 f87e 	bl	80285a4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	881a      	ldrh	r2, [r3, #0]
 80104ac:	4b0a      	ldr	r3, [pc, #40]	; (80104d8 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 80104ae:	881b      	ldrh	r3, [r3, #0]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d305      	bcc.n	80104c0 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 80104b4:	4b09      	ldr	r3, [pc, #36]	; (80104dc <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 80104b6:	4a06      	ldr	r2, [pc, #24]	; (80104d0 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 80104b8:	21df      	movs	r1, #223	; 0xdf
 80104ba:	4806      	ldr	r0, [pc, #24]	; (80104d4 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 80104bc:	f018 f872 	bl	80285a4 <__assert_func>
    }
 80104c0:	bf00      	nop
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	2000bf80 	.word	0x2000bf80
 80104cc:	0802973c 	.word	0x0802973c
 80104d0:	08029780 	.word	0x08029780
 80104d4:	080297b0 	.word	0x080297b0
 80104d8:	2000bf84 	.word	0x2000bf84
 80104dc:	080297f4 	.word	0x080297f4

080104e0 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	7b5b      	ldrb	r3, [r3, #13]
 80104ec:	021b      	lsls	r3, r3, #8
 80104ee:	b21b      	sxth	r3, r3
 80104f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104f4:	b21a      	sxth	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	7adb      	ldrb	r3, [r3, #11]
 80104fa:	b21b      	sxth	r3, r3
 80104fc:	4313      	orrs	r3, r2
 80104fe:	b21b      	sxth	r3, r3
 8010500:	b29b      	uxth	r3, r3
    }
 8010502:	4618      	mov	r0, r3
 8010504:	370c      	adds	r7, #12
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr

0801050e <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 801050e:	b480      	push	{r7}
 8010510:	b083      	sub	sp, #12
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6a1b      	ldr	r3, [r3, #32]
    }
 801051a:	4618      	mov	r0, r3
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
	...

08010528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8010528:	b580      	push	{r7, lr}
 801052a:	b08c      	sub	sp, #48	; 0x30
 801052c:	af08      	add	r7, sp, #32
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	4611      	mov	r1, r2
 8010534:	461a      	mov	r2, r3
 8010536:	460b      	mov	r3, r1
 8010538:	80fb      	strh	r3, [r7, #6]
 801053a:	4613      	mov	r3, r2
 801053c:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 801053e:	68f8      	ldr	r0, [r7, #12]
 8010540:	88b9      	ldrh	r1, [r7, #4]
 8010542:	88fa      	ldrh	r2, [r7, #6]
 8010544:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010546:	9306      	str	r3, [sp, #24]
 8010548:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801054a:	9305      	str	r3, [sp, #20]
 801054c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010550:	9304      	str	r3, [sp, #16]
 8010552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010556:	9303      	str	r3, [sp, #12]
 8010558:	f897 3020 	ldrb.w	r3, [r7, #32]
 801055c:	9302      	str	r3, [sp, #8]
 801055e:	7f3b      	ldrb	r3, [r7, #28]
 8010560:	9301      	str	r3, [sp, #4]
 8010562:	7e3b      	ldrb	r3, [r7, #24]
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	460b      	mov	r3, r1
 8010568:	68b9      	ldr	r1, [r7, #8]
 801056a:	f00c fcd5 	bl	801cf18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 801056e:	4a08      	ldr	r2, [pc, #32]	; (8010590 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	601a      	str	r2, [r3, #0]
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010578:	619a      	str	r2, [r3, #24]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801057e:	61da      	str	r2, [r3, #28]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010584:	621a      	str	r2, [r3, #32]
{
}
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	4618      	mov	r0, r3
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	0802a3e8 	.word	0x0802a3e8

08010594 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8010594:	b480      	push	{r7}
 8010596:	b085      	sub	sp, #20
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	699b      	ldr	r3, [r3, #24]
 80105a2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	889b      	ldrh	r3, [r3, #4]
 80105a8:	0adb      	lsrs	r3, r3, #11
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	68fa      	ldr	r2, [r7, #12]
 80105b0:	4413      	add	r3, r2
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4413      	add	r3, r2
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr

080105c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b086      	sub	sp, #24
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	60f8      	str	r0, [r7, #12]
 80105ce:	460b      	mov	r3, r1
 80105d0:	607a      	str	r2, [r7, #4]
 80105d2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d003      	beq.n	80105e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	7b1b      	ldrb	r3, [r3, #12]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d101      	bne.n	80105e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	e023      	b.n	801062e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f7ff ff7a 	bl	80104e0 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 80105ec:	4603      	mov	r3, r0
 80105ee:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 80105f0:	8abb      	ldrh	r3, [r7, #20]
 80105f2:	82fb      	strh	r3, [r7, #22]
 80105f4:	8afa      	ldrh	r2, [r7, #22]
 80105f6:	8abb      	ldrh	r3, [r7, #20]
 80105f8:	6879      	ldr	r1, [r7, #4]
 80105fa:	7b09      	ldrb	r1, [r1, #12]
 80105fc:	440b      	add	r3, r1
 80105fe:	429a      	cmp	r2, r3
 8010600:	da14      	bge.n	801062c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	69da      	ldr	r2, [r3, #28]
 8010606:	8afb      	ldrh	r3, [r7, #22]
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	4413      	add	r3, r2
 801060c:	881b      	ldrh	r3, [r3, #0]
 801060e:	897a      	ldrh	r2, [r7, #10]
 8010610:	429a      	cmp	r2, r3
 8010612:	d107      	bne.n	8010624 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	69da      	ldr	r2, [r3, #28]
 8010618:	8afb      	ldrh	r3, [r7, #22]
 801061a:	009b      	lsls	r3, r3, #2
 801061c:	4413      	add	r3, r2
 801061e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8010622:	e004      	b.n	801062e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8010624:	8afb      	ldrh	r3, [r7, #22]
 8010626:	3301      	adds	r3, #1
 8010628:	82fb      	strh	r3, [r7, #22]
 801062a:	e7e3      	b.n	80105f4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3718      	adds	r7, #24
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
	...

08010638 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 8010638:	b580      	push	{r7, lr}
 801063a:	af00      	add	r7, sp, #0
 801063c:	4801      	ldr	r0, [pc, #4]	; (8010644 <__tcf_0+0xc>)
 801063e:	f7ff fecf 	bl	80103e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010642:	bd80      	pop	{r7, pc}
 8010644:	200085cc 	.word	0x200085cc

08010648 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b08a      	sub	sp, #40	; 0x28
 801064c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 801064e:	4b1e      	ldr	r3, [pc, #120]	; (80106c8 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	f3bf 8f5b 	dmb	ish
 8010656:	b2db      	uxtb	r3, r3
 8010658:	f003 0301 	and.w	r3, r3, #1
 801065c:	2b00      	cmp	r3, #0
 801065e:	bf0c      	ite	eq
 8010660:	2301      	moveq	r3, #1
 8010662:	2300      	movne	r3, #0
 8010664:	b2db      	uxtb	r3, r3
 8010666:	2b00      	cmp	r3, #0
 8010668:	d02a      	beq.n	80106c0 <_Z25getFont_Asap_Bold_10_4bppv+0x78>
 801066a:	4817      	ldr	r0, [pc, #92]	; (80106c8 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 801066c:	f017 ff6e 	bl	802854c <__cxa_guard_acquire>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	bf14      	ite	ne
 8010676:	2301      	movne	r3, #1
 8010678:	2300      	moveq	r3, #0
 801067a:	b2db      	uxtb	r3, r3
 801067c:	2b00      	cmp	r3, #0
 801067e:	d01f      	beq.n	80106c0 <_Z25getFont_Asap_Bold_10_4bppv+0x78>
 8010680:	2300      	movs	r3, #0
 8010682:	9309      	str	r3, [sp, #36]	; 0x24
 8010684:	2300      	movs	r3, #0
 8010686:	9308      	str	r3, [sp, #32]
 8010688:	233f      	movs	r3, #63	; 0x3f
 801068a:	9307      	str	r3, [sp, #28]
 801068c:	4b0f      	ldr	r3, [pc, #60]	; (80106cc <_Z25getFont_Asap_Bold_10_4bppv+0x84>)
 801068e:	9306      	str	r3, [sp, #24]
 8010690:	4b0f      	ldr	r3, [pc, #60]	; (80106d0 <_Z25getFont_Asap_Bold_10_4bppv+0x88>)
 8010692:	9305      	str	r3, [sp, #20]
 8010694:	2301      	movs	r3, #1
 8010696:	9304      	str	r3, [sp, #16]
 8010698:	2300      	movs	r3, #0
 801069a:	9303      	str	r3, [sp, #12]
 801069c:	2301      	movs	r3, #1
 801069e:	9302      	str	r3, [sp, #8]
 80106a0:	2304      	movs	r3, #4
 80106a2:	9301      	str	r3, [sp, #4]
 80106a4:	2300      	movs	r3, #0
 80106a6:	9300      	str	r3, [sp, #0]
 80106a8:	230a      	movs	r3, #10
 80106aa:	2204      	movs	r2, #4
 80106ac:	4909      	ldr	r1, [pc, #36]	; (80106d4 <_Z25getFont_Asap_Bold_10_4bppv+0x8c>)
 80106ae:	480a      	ldr	r0, [pc, #40]	; (80106d8 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
 80106b0:	f7ff ff3a 	bl	8010528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80106b4:	4804      	ldr	r0, [pc, #16]	; (80106c8 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 80106b6:	f017 ff55 	bl	8028564 <__cxa_guard_release>
 80106ba:	4808      	ldr	r0, [pc, #32]	; (80106dc <_Z25getFont_Asap_Bold_10_4bppv+0x94>)
 80106bc:	f017 ff90 	bl	80285e0 <atexit>
    return Asap_Bold_10_4bpp;
 80106c0:	4b05      	ldr	r3, [pc, #20]	; (80106d8 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	200085f0 	.word	0x200085f0
 80106cc:	08031be8 	.word	0x08031be8
 80106d0:	0802a434 	.word	0x0802a434
 80106d4:	08031c10 	.word	0x08031c10
 80106d8:	200085cc 	.word	0x200085cc
 80106dc:	08010639 	.word	0x08010639

080106e0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 80106e0:	b580      	push	{r7, lr}
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	4801      	ldr	r0, [pc, #4]	; (80106ec <__tcf_0+0xc>)
 80106e6:	f7ff fe7b 	bl	80103e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	200085f4 	.word	0x200085f4

080106f0 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b08a      	sub	sp, #40	; 0x28
 80106f4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 80106f6:	4b1e      	ldr	r3, [pc, #120]	; (8010770 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	f3bf 8f5b 	dmb	ish
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	f003 0301 	and.w	r3, r3, #1
 8010704:	2b00      	cmp	r3, #0
 8010706:	bf0c      	ite	eq
 8010708:	2301      	moveq	r3, #1
 801070a:	2300      	movne	r3, #0
 801070c:	b2db      	uxtb	r3, r3
 801070e:	2b00      	cmp	r3, #0
 8010710:	d02a      	beq.n	8010768 <_Z25getFont_Asap_Bold_12_4bppv+0x78>
 8010712:	4817      	ldr	r0, [pc, #92]	; (8010770 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 8010714:	f017 ff1a 	bl	802854c <__cxa_guard_acquire>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	bf14      	ite	ne
 801071e:	2301      	movne	r3, #1
 8010720:	2300      	moveq	r3, #0
 8010722:	b2db      	uxtb	r3, r3
 8010724:	2b00      	cmp	r3, #0
 8010726:	d01f      	beq.n	8010768 <_Z25getFont_Asap_Bold_12_4bppv+0x78>
 8010728:	2300      	movs	r3, #0
 801072a:	9309      	str	r3, [sp, #36]	; 0x24
 801072c:	2300      	movs	r3, #0
 801072e:	9308      	str	r3, [sp, #32]
 8010730:	233f      	movs	r3, #63	; 0x3f
 8010732:	9307      	str	r3, [sp, #28]
 8010734:	4b0f      	ldr	r3, [pc, #60]	; (8010774 <_Z25getFont_Asap_Bold_12_4bppv+0x84>)
 8010736:	9306      	str	r3, [sp, #24]
 8010738:	4b0f      	ldr	r3, [pc, #60]	; (8010778 <_Z25getFont_Asap_Bold_12_4bppv+0x88>)
 801073a:	9305      	str	r3, [sp, #20]
 801073c:	2301      	movs	r3, #1
 801073e:	9304      	str	r3, [sp, #16]
 8010740:	2300      	movs	r3, #0
 8010742:	9303      	str	r3, [sp, #12]
 8010744:	2301      	movs	r3, #1
 8010746:	9302      	str	r3, [sp, #8]
 8010748:	2304      	movs	r3, #4
 801074a:	9301      	str	r3, [sp, #4]
 801074c:	2300      	movs	r3, #0
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	230c      	movs	r3, #12
 8010752:	2209      	movs	r2, #9
 8010754:	4909      	ldr	r1, [pc, #36]	; (801077c <_Z25getFont_Asap_Bold_12_4bppv+0x8c>)
 8010756:	480a      	ldr	r0, [pc, #40]	; (8010780 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
 8010758:	f7ff fee6 	bl	8010528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801075c:	4804      	ldr	r0, [pc, #16]	; (8010770 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 801075e:	f017 ff01 	bl	8028564 <__cxa_guard_release>
 8010762:	4808      	ldr	r0, [pc, #32]	; (8010784 <_Z25getFont_Asap_Bold_12_4bppv+0x94>)
 8010764:	f017 ff3c 	bl	80285e0 <atexit>
    return Asap_Bold_12_4bpp;
 8010768:	4b05      	ldr	r3, [pc, #20]	; (8010780 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
}
 801076a:	4618      	mov	r0, r3
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	20008618 	.word	0x20008618
 8010774:	08031bec 	.word	0x08031bec
 8010778:	0802a438 	.word	0x0802a438
 801077c:	08031c48 	.word	0x08031c48
 8010780:	200085f4 	.word	0x200085f4
 8010784:	080106e1 	.word	0x080106e1

08010788 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 8010788:	b580      	push	{r7, lr}
 801078a:	af00      	add	r7, sp, #0
 801078c:	4801      	ldr	r0, [pc, #4]	; (8010794 <__tcf_0+0xc>)
 801078e:	f7ff fe27 	bl	80103e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010792:	bd80      	pop	{r7, pc}
 8010794:	2000861c 	.word	0x2000861c

08010798 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b08a      	sub	sp, #40	; 0x28
 801079c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 801079e:	4b1e      	ldr	r3, [pc, #120]	; (8010818 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	f3bf 8f5b 	dmb	ish
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	f003 0301 	and.w	r3, r3, #1
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	bf0c      	ite	eq
 80107b0:	2301      	moveq	r3, #1
 80107b2:	2300      	movne	r3, #0
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d02a      	beq.n	8010810 <_Z25getFont_Asap_Bold_18_4bppv+0x78>
 80107ba:	4817      	ldr	r0, [pc, #92]	; (8010818 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 80107bc:	f017 fec6 	bl	802854c <__cxa_guard_acquire>
 80107c0:	4603      	mov	r3, r0
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	bf14      	ite	ne
 80107c6:	2301      	movne	r3, #1
 80107c8:	2300      	moveq	r3, #0
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d01f      	beq.n	8010810 <_Z25getFont_Asap_Bold_18_4bppv+0x78>
 80107d0:	2300      	movs	r3, #0
 80107d2:	9309      	str	r3, [sp, #36]	; 0x24
 80107d4:	2300      	movs	r3, #0
 80107d6:	9308      	str	r3, [sp, #32]
 80107d8:	2300      	movs	r3, #0
 80107da:	9307      	str	r3, [sp, #28]
 80107dc:	4b0f      	ldr	r3, [pc, #60]	; (801081c <_Z25getFont_Asap_Bold_18_4bppv+0x84>)
 80107de:	9306      	str	r3, [sp, #24]
 80107e0:	4b0f      	ldr	r3, [pc, #60]	; (8010820 <_Z25getFont_Asap_Bold_18_4bppv+0x88>)
 80107e2:	9305      	str	r3, [sp, #20]
 80107e4:	2301      	movs	r3, #1
 80107e6:	9304      	str	r3, [sp, #16]
 80107e8:	2300      	movs	r3, #0
 80107ea:	9303      	str	r3, [sp, #12]
 80107ec:	2301      	movs	r3, #1
 80107ee:	9302      	str	r3, [sp, #8]
 80107f0:	2304      	movs	r3, #4
 80107f2:	9301      	str	r3, [sp, #4]
 80107f4:	2300      	movs	r3, #0
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	2312      	movs	r3, #18
 80107fa:	221d      	movs	r2, #29
 80107fc:	4909      	ldr	r1, [pc, #36]	; (8010824 <_Z25getFont_Asap_Bold_18_4bppv+0x8c>)
 80107fe:	480a      	ldr	r0, [pc, #40]	; (8010828 <_Z25getFont_Asap_Bold_18_4bppv+0x90>)
 8010800:	f7ff fe92 	bl	8010528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010804:	4804      	ldr	r0, [pc, #16]	; (8010818 <_Z25getFont_Asap_Bold_18_4bppv+0x80>)
 8010806:	f017 fead 	bl	8028564 <__cxa_guard_release>
 801080a:	4808      	ldr	r0, [pc, #32]	; (801082c <_Z25getFont_Asap_Bold_18_4bppv+0x94>)
 801080c:	f017 fee8 	bl	80285e0 <atexit>
    return Asap_Bold_18_4bpp;
 8010810:	4b05      	ldr	r3, [pc, #20]	; (8010828 <_Z25getFont_Asap_Bold_18_4bppv+0x90>)
}
 8010812:	4618      	mov	r0, r3
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	20008640 	.word	0x20008640
 801081c:	08031bf0 	.word	0x08031bf0
 8010820:	0802a43c 	.word	0x0802a43c
 8010824:	08031cc8 	.word	0x08031cc8
 8010828:	2000861c 	.word	0x2000861c
 801082c:	08010789 	.word	0x08010789

08010830 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010830:	b580      	push	{r7, lr}
 8010832:	af00      	add	r7, sp, #0
 8010834:	4801      	ldr	r0, [pc, #4]	; (801083c <__tcf_0+0xc>)
 8010836:	f7ff fdd3 	bl	80103e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 801083a:	bd80      	pop	{r7, pc}
 801083c:	20008644 	.word	0x20008644

08010840 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b08a      	sub	sp, #40	; 0x28
 8010844:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010846:	4b1e      	ldr	r3, [pc, #120]	; (80108c0 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	f3bf 8f5b 	dmb	ish
 801084e:	b2db      	uxtb	r3, r3
 8010850:	f003 0301 	and.w	r3, r3, #1
 8010854:	2b00      	cmp	r3, #0
 8010856:	bf0c      	ite	eq
 8010858:	2301      	moveq	r3, #1
 801085a:	2300      	movne	r3, #0
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b00      	cmp	r3, #0
 8010860:	d02a      	beq.n	80108b8 <_Z25getFont_Asap_Bold_21_4bppv+0x78>
 8010862:	4817      	ldr	r0, [pc, #92]	; (80108c0 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 8010864:	f017 fe72 	bl	802854c <__cxa_guard_acquire>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	bf14      	ite	ne
 801086e:	2301      	movne	r3, #1
 8010870:	2300      	moveq	r3, #0
 8010872:	b2db      	uxtb	r3, r3
 8010874:	2b00      	cmp	r3, #0
 8010876:	d01f      	beq.n	80108b8 <_Z25getFont_Asap_Bold_21_4bppv+0x78>
 8010878:	2300      	movs	r3, #0
 801087a:	9309      	str	r3, [sp, #36]	; 0x24
 801087c:	2300      	movs	r3, #0
 801087e:	9308      	str	r3, [sp, #32]
 8010880:	233f      	movs	r3, #63	; 0x3f
 8010882:	9307      	str	r3, [sp, #28]
 8010884:	4b0f      	ldr	r3, [pc, #60]	; (80108c4 <_Z25getFont_Asap_Bold_21_4bppv+0x84>)
 8010886:	9306      	str	r3, [sp, #24]
 8010888:	4b0f      	ldr	r3, [pc, #60]	; (80108c8 <_Z25getFont_Asap_Bold_21_4bppv+0x88>)
 801088a:	9305      	str	r3, [sp, #20]
 801088c:	2301      	movs	r3, #1
 801088e:	9304      	str	r3, [sp, #16]
 8010890:	2300      	movs	r3, #0
 8010892:	9303      	str	r3, [sp, #12]
 8010894:	2301      	movs	r3, #1
 8010896:	9302      	str	r3, [sp, #8]
 8010898:	2304      	movs	r3, #4
 801089a:	9301      	str	r3, [sp, #4]
 801089c:	2300      	movs	r3, #0
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	2315      	movs	r3, #21
 80108a2:	220d      	movs	r2, #13
 80108a4:	4909      	ldr	r1, [pc, #36]	; (80108cc <_Z25getFont_Asap_Bold_21_4bppv+0x8c>)
 80108a6:	480a      	ldr	r0, [pc, #40]	; (80108d0 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
 80108a8:	f7ff fe3e 	bl	8010528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80108ac:	4804      	ldr	r0, [pc, #16]	; (80108c0 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 80108ae:	f017 fe59 	bl	8028564 <__cxa_guard_release>
 80108b2:	4808      	ldr	r0, [pc, #32]	; (80108d4 <_Z25getFont_Asap_Bold_21_4bppv+0x94>)
 80108b4:	f017 fe94 	bl	80285e0 <atexit>
    return Asap_Bold_21_4bpp;
 80108b8:	4b05      	ldr	r3, [pc, #20]	; (80108d0 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	20008668 	.word	0x20008668
 80108c4:	08031c00 	.word	0x08031c00
 80108c8:	0802a440 	.word	0x0802a440
 80108cc:	08031e60 	.word	0x08031e60
 80108d0:	20008644 	.word	0x20008644
 80108d4:	08010831 	.word	0x08010831

080108d8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80108d8:	b580      	push	{r7, lr}
 80108da:	af00      	add	r7, sp, #0
 80108dc:	4801      	ldr	r0, [pc, #4]	; (80108e4 <__tcf_0+0xc>)
 80108de:	f7ff fd7f 	bl	80103e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	2000866c 	.word	0x2000866c

080108e8 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b08a      	sub	sp, #40	; 0x28
 80108ec:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80108ee:	4b1e      	ldr	r3, [pc, #120]	; (8010968 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	f3bf 8f5b 	dmb	ish
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	f003 0301 	and.w	r3, r3, #1
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	bf0c      	ite	eq
 8010900:	2301      	moveq	r3, #1
 8010902:	2300      	movne	r3, #0
 8010904:	b2db      	uxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d02a      	beq.n	8010960 <_Z25getFont_Asap_Bold_30_4bppv+0x78>
 801090a:	4817      	ldr	r0, [pc, #92]	; (8010968 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 801090c:	f017 fe1e 	bl	802854c <__cxa_guard_acquire>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	bf14      	ite	ne
 8010916:	2301      	movne	r3, #1
 8010918:	2300      	moveq	r3, #0
 801091a:	b2db      	uxtb	r3, r3
 801091c:	2b00      	cmp	r3, #0
 801091e:	d01f      	beq.n	8010960 <_Z25getFont_Asap_Bold_30_4bppv+0x78>
 8010920:	2300      	movs	r3, #0
 8010922:	9309      	str	r3, [sp, #36]	; 0x24
 8010924:	2300      	movs	r3, #0
 8010926:	9308      	str	r3, [sp, #32]
 8010928:	233f      	movs	r3, #63	; 0x3f
 801092a:	9307      	str	r3, [sp, #28]
 801092c:	4b0f      	ldr	r3, [pc, #60]	; (801096c <_Z25getFont_Asap_Bold_30_4bppv+0x84>)
 801092e:	9306      	str	r3, [sp, #24]
 8010930:	4b0f      	ldr	r3, [pc, #60]	; (8010970 <_Z25getFont_Asap_Bold_30_4bppv+0x88>)
 8010932:	9305      	str	r3, [sp, #20]
 8010934:	2301      	movs	r3, #1
 8010936:	9304      	str	r3, [sp, #16]
 8010938:	2300      	movs	r3, #0
 801093a:	9303      	str	r3, [sp, #12]
 801093c:	2301      	movs	r3, #1
 801093e:	9302      	str	r3, [sp, #8]
 8010940:	2304      	movs	r3, #4
 8010942:	9301      	str	r3, [sp, #4]
 8010944:	2300      	movs	r3, #0
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	231e      	movs	r3, #30
 801094a:	220c      	movs	r2, #12
 801094c:	4909      	ldr	r1, [pc, #36]	; (8010974 <_Z25getFont_Asap_Bold_30_4bppv+0x8c>)
 801094e:	480a      	ldr	r0, [pc, #40]	; (8010978 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
 8010950:	f7ff fdea 	bl	8010528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010954:	4804      	ldr	r0, [pc, #16]	; (8010968 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 8010956:	f017 fe05 	bl	8028564 <__cxa_guard_release>
 801095a:	4808      	ldr	r0, [pc, #32]	; (801097c <_Z25getFont_Asap_Bold_30_4bppv+0x94>)
 801095c:	f017 fe40 	bl	80285e0 <atexit>
    return Asap_Bold_30_4bpp;
 8010960:	4b05      	ldr	r3, [pc, #20]	; (8010978 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
}
 8010962:	4618      	mov	r0, r3
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	20008690 	.word	0x20008690
 801096c:	08031c04 	.word	0x08031c04
 8010970:	0802a444 	.word	0x0802a444
 8010974:	08031f18 	.word	0x08031f18
 8010978:	2000866c 	.word	0x2000866c
 801097c:	080108d9 	.word	0x080108d9

08010980 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010980:	b580      	push	{r7, lr}
 8010982:	af00      	add	r7, sp, #0
 8010984:	4801      	ldr	r0, [pc, #4]	; (801098c <__tcf_0+0xc>)
 8010986:	f7ff fd2b 	bl	80103e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 801098a:	bd80      	pop	{r7, pc}
 801098c:	20008694 	.word	0x20008694

08010990 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b08a      	sub	sp, #40	; 0x28
 8010994:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010996:	4b1e      	ldr	r3, [pc, #120]	; (8010a10 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	f3bf 8f5b 	dmb	ish
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	f003 0301 	and.w	r3, r3, #1
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	bf0c      	ite	eq
 80109a8:	2301      	moveq	r3, #1
 80109aa:	2300      	movne	r3, #0
 80109ac:	b2db      	uxtb	r3, r3
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d02a      	beq.n	8010a08 <_Z25getFont_Asap_Bold_40_4bppv+0x78>
 80109b2:	4817      	ldr	r0, [pc, #92]	; (8010a10 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 80109b4:	f017 fdca 	bl	802854c <__cxa_guard_acquire>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	bf14      	ite	ne
 80109be:	2301      	movne	r3, #1
 80109c0:	2300      	moveq	r3, #0
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d01f      	beq.n	8010a08 <_Z25getFont_Asap_Bold_40_4bppv+0x78>
 80109c8:	2300      	movs	r3, #0
 80109ca:	9309      	str	r3, [sp, #36]	; 0x24
 80109cc:	2300      	movs	r3, #0
 80109ce:	9308      	str	r3, [sp, #32]
 80109d0:	233f      	movs	r3, #63	; 0x3f
 80109d2:	9307      	str	r3, [sp, #28]
 80109d4:	4b0f      	ldr	r3, [pc, #60]	; (8010a14 <_Z25getFont_Asap_Bold_40_4bppv+0x84>)
 80109d6:	9306      	str	r3, [sp, #24]
 80109d8:	4b0f      	ldr	r3, [pc, #60]	; (8010a18 <_Z25getFont_Asap_Bold_40_4bppv+0x88>)
 80109da:	9305      	str	r3, [sp, #20]
 80109dc:	2301      	movs	r3, #1
 80109de:	9304      	str	r3, [sp, #16]
 80109e0:	2300      	movs	r3, #0
 80109e2:	9303      	str	r3, [sp, #12]
 80109e4:	2301      	movs	r3, #1
 80109e6:	9302      	str	r3, [sp, #8]
 80109e8:	2304      	movs	r3, #4
 80109ea:	9301      	str	r3, [sp, #4]
 80109ec:	2300      	movs	r3, #0
 80109ee:	9300      	str	r3, [sp, #0]
 80109f0:	2328      	movs	r3, #40	; 0x28
 80109f2:	220d      	movs	r2, #13
 80109f4:	4909      	ldr	r1, [pc, #36]	; (8010a1c <_Z25getFont_Asap_Bold_40_4bppv+0x8c>)
 80109f6:	480a      	ldr	r0, [pc, #40]	; (8010a20 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
 80109f8:	f7ff fd96 	bl	8010528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80109fc:	4804      	ldr	r0, [pc, #16]	; (8010a10 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 80109fe:	f017 fdb1 	bl	8028564 <__cxa_guard_release>
 8010a02:	4808      	ldr	r0, [pc, #32]	; (8010a24 <_Z25getFont_Asap_Bold_40_4bppv+0x94>)
 8010a04:	f017 fdec 	bl	80285e0 <atexit>
    return Asap_Bold_40_4bpp;
 8010a08:	4b05      	ldr	r3, [pc, #20]	; (8010a20 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	200086b8 	.word	0x200086b8
 8010a14:	08031c08 	.word	0x08031c08
 8010a18:	0802a448 	.word	0x0802a448
 8010a1c:	08031fc0 	.word	0x08031fc0
 8010a20:	20008694 	.word	0x20008694
 8010a24:	08010981 	.word	0x08010981

08010a28 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	4801      	ldr	r0, [pc, #4]	; (8010a34 <__tcf_0+0xc>)
 8010a2e:	f7ff fcd7 	bl	80103e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	200086bc 	.word	0x200086bc

08010a38 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b08a      	sub	sp, #40	; 0x28
 8010a3c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010a3e:	4b1e      	ldr	r3, [pc, #120]	; (8010ab8 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	f3bf 8f5b 	dmb	ish
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	f003 0301 	and.w	r3, r3, #1
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	bf0c      	ite	eq
 8010a50:	2301      	moveq	r3, #1
 8010a52:	2300      	movne	r3, #0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d02a      	beq.n	8010ab0 <_Z25getFont_Asap_Bold_60_4bppv+0x78>
 8010a5a:	4817      	ldr	r0, [pc, #92]	; (8010ab8 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 8010a5c:	f017 fd76 	bl	802854c <__cxa_guard_acquire>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	bf14      	ite	ne
 8010a66:	2301      	movne	r3, #1
 8010a68:	2300      	moveq	r3, #0
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d01f      	beq.n	8010ab0 <_Z25getFont_Asap_Bold_60_4bppv+0x78>
 8010a70:	2300      	movs	r3, #0
 8010a72:	9309      	str	r3, [sp, #36]	; 0x24
 8010a74:	2300      	movs	r3, #0
 8010a76:	9308      	str	r3, [sp, #32]
 8010a78:	233f      	movs	r3, #63	; 0x3f
 8010a7a:	9307      	str	r3, [sp, #28]
 8010a7c:	4b0f      	ldr	r3, [pc, #60]	; (8010abc <_Z25getFont_Asap_Bold_60_4bppv+0x84>)
 8010a7e:	9306      	str	r3, [sp, #24]
 8010a80:	4b0f      	ldr	r3, [pc, #60]	; (8010ac0 <_Z25getFont_Asap_Bold_60_4bppv+0x88>)
 8010a82:	9305      	str	r3, [sp, #20]
 8010a84:	2300      	movs	r3, #0
 8010a86:	9304      	str	r3, [sp, #16]
 8010a88:	2300      	movs	r3, #0
 8010a8a:	9303      	str	r3, [sp, #12]
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	9302      	str	r3, [sp, #8]
 8010a90:	2304      	movs	r3, #4
 8010a92:	9301      	str	r3, [sp, #4]
 8010a94:	2300      	movs	r3, #0
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	233c      	movs	r3, #60	; 0x3c
 8010a9a:	220d      	movs	r2, #13
 8010a9c:	4909      	ldr	r1, [pc, #36]	; (8010ac4 <_Z25getFont_Asap_Bold_60_4bppv+0x8c>)
 8010a9e:	480a      	ldr	r0, [pc, #40]	; (8010ac8 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
 8010aa0:	f7ff fd42 	bl	8010528 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010aa4:	4804      	ldr	r0, [pc, #16]	; (8010ab8 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 8010aa6:	f017 fd5d 	bl	8028564 <__cxa_guard_release>
 8010aaa:	4808      	ldr	r0, [pc, #32]	; (8010acc <_Z25getFont_Asap_Bold_60_4bppv+0x94>)
 8010aac:	f017 fd98 	bl	80285e0 <atexit>
    return Asap_Bold_60_4bpp;
 8010ab0:	4b05      	ldr	r3, [pc, #20]	; (8010ac8 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	200086e0 	.word	0x200086e0
 8010abc:	08031c0c 	.word	0x08031c0c
 8010ac0:	0802a44c 	.word	0x0802a44c
 8010ac4:	08032078 	.word	0x08032078
 8010ac8:	200086bc 	.word	0x200086bc
 8010acc:	08010a29 	.word	0x08010a29

08010ad0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	4618      	mov	r0, r3
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
    {
    }
 8010af2:	bf00      	nop
 8010af4:	370c      	adds	r7, #12
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr

08010afe <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010afe:	b480      	push	{r7}
 8010b00:	b083      	sub	sp, #12
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	6039      	str	r1, [r7, #0]
    {
    }
 8010b08:	bf00      	nop
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
    {
    }
 8010b1e:	bf00      	nop
 8010b20:	370c      	adds	r7, #12
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr

08010b2a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8010b2a:	b480      	push	{r7}
 8010b2c:	b083      	sub	sp, #12
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	460b      	mov	r3, r1
 8010b34:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010b36:	bf00      	nop
 8010b38:	370c      	adds	r7, #12
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr

08010b42 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8010b42:	b480      	push	{r7}
 8010b44:	b083      	sub	sp, #12
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
    {
    }
 8010b4a:	bf00      	nop
 8010b4c:	370c      	adds	r7, #12
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8010b56:	b480      	push	{r7}
 8010b58:	b083      	sub	sp, #12
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
    {
    }
 8010b5e:	bf00      	nop
 8010b60:	370c      	adds	r7, #12
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr
	...

08010b6c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
    {
 8010b74:	4a04      	ldr	r2, [pc, #16]	; (8010b88 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	601a      	str	r2, [r3, #0]
    }
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr
 8010b88:	0802a598 	.word	0x0802a598

08010b8c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
    }
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff ffe9 	bl	8010b6c <_ZN8touchgfx15UIEventListenerD1Ev>
 8010b9a:	2104      	movs	r1, #4
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f017 fcd3 	bl	8028548 <_ZdlPvj>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8010bb4:	4a07      	ldr	r2, [pc, #28]	; (8010bd4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	601a      	str	r2, [r3, #0]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	605a      	str	r2, [r3, #4]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	721a      	strb	r2, [r3, #8]
    {
    }
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	370c      	adds	r7, #12
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	0802a578 	.word	0x0802a578

08010bd8 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
    {
 8010be0:	4a04      	ldr	r2, [pc, #16]	; (8010bf4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	601a      	str	r2, [r3, #0]
    }
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	4618      	mov	r0, r3
 8010bea:	370c      	adds	r7, #12
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr
 8010bf4:	0802a578 	.word	0x0802a578

08010bf8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
    }
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f7ff ffe9 	bl	8010bd8 <_ZN8touchgfx10TransitionD1Ev>
 8010c06:	210c      	movs	r1, #12
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f017 fc9d 	bl	8028548 <_ZdlPvj>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4618      	mov	r0, r3
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	bf00      	nop
 8010c22:	370c      	adds	r7, #12
 8010c24:	46bd      	mov	sp, r7
 8010c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2a:	4770      	bx	lr

08010c2c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8010c2c:	b480      	push	{r7}
 8010c2e:	b083      	sub	sp, #12
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	bf00      	nop
 8010c36:	370c      	adds	r7, #12
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	bf00      	nop
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr

08010c54 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	683a      	ldr	r2, [r7, #0]
 8010c62:	605a      	str	r2, [r3, #4]
    }
 8010c64:	bf00      	nop
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010c7c:	bf00      	nop
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
    {
 8010c90:	4a04      	ldr	r2, [pc, #16]	; (8010ca4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	601a      	str	r2, [r3, #0]
    }
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	0802a560 	.word	0x0802a560

08010ca8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
    }
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f7ff ffe9 	bl	8010c88 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010cb6:	2104      	movs	r1, #4
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f017 fc45 	bl	8028548 <_ZdlPvj>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	4608      	mov	r0, r1
 8010cd2:	4611      	mov	r1, r2
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	817b      	strh	r3, [r7, #10]
 8010cda:	460b      	mov	r3, r1
 8010cdc:	813b      	strh	r3, [r7, #8]
 8010cde:	4613      	mov	r3, r2
 8010ce0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	3334      	adds	r3, #52	; 0x34
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010cee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	4798      	blx	r3
        setWidth(width);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	3338      	adds	r3, #56	; 0x38
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d02:	4611      	mov	r1, r2
 8010d04:	68f8      	ldr	r0, [r7, #12]
 8010d06:	4798      	blx	r3
        setHeight(height);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	333c      	adds	r3, #60	; 0x3c
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010d14:	4611      	mov	r1, r2
 8010d16:	68f8      	ldr	r0, [r7, #12]
 8010d18:	4798      	blx	r3
    }
 8010d1a:	bf00      	nop
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8010d22:	b480      	push	{r7}
 8010d24:	b083      	sub	sp, #12
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8010d30:	4618      	mov	r0, r3
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8010d3c:	b480      	push	{r7}
 8010d3e:	b083      	sub	sp, #12
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
	...

08010d58 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010d58:	b480      	push	{r7}
 8010d5a:	af00      	add	r7, sp, #0
    {
        return instance;
 8010d5c:	4b03      	ldr	r3, [pc, #12]	; (8010d6c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
    }
 8010d60:	4618      	mov	r0, r3
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop
 8010d6c:	2000bef0 	.word	0x2000bef0

08010d70 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010d70:	b480      	push	{r7}
 8010d72:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010d74:	4b0b      	ldr	r3, [pc, #44]	; (8010da4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d008      	beq.n	8010d92 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010d80:	4b08      	ldr	r3, [pc, #32]	; (8010da4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d003      	beq.n	8010d92 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010d8a:	4b06      	ldr	r3, [pc, #24]	; (8010da4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d90:	e002      	b.n	8010d98 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8010d92:	4b04      	ldr	r3, [pc, #16]	; (8010da4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010d98:	4618      	mov	r0, r3
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da0:	4770      	bx	lr
 8010da2:	bf00      	nop
 8010da4:	2000bef0 	.word	0x2000bef0

08010da8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	4a05      	ldr	r2, [pc, #20]	; (8010dc8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	601a      	str	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7ff fed7 	bl	8010b6c <_ZN8touchgfx15UIEventListenerD1Ev>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	0802c83c 	.word	0x0802c83c

08010dcc <_ZN8touchgfx11ApplicationD0Ev>:
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f7ff ffe7 	bl	8010da8 <_ZN8touchgfx11ApplicationD1Ev>
 8010dda:	f44f 7198 	mov.w	r1, #304	; 0x130
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f017 fbb2 	bl	8028548 <_ZdlPvj>
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	4618      	mov	r0, r3
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
	...

08010df0 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f00b fbc6 	bl	801c58c <_ZN8touchgfx11ApplicationC1Ev>
 8010e00:	4a09      	ldr	r2, [pc, #36]	; (8010e28 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	601a      	str	r2, [r3, #0]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2200      	movs	r2, #0
 8010e12:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4a04      	ldr	r2, [pc, #16]	; (8010e2c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010e1a:	6013      	str	r3, [r2, #0]
    }
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3708      	adds	r7, #8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	bf00      	nop
 8010e28:	0802a524 	.word	0x0802a524
 8010e2c:	2000bf7c 	.word	0x2000bf7c

08010e30 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	4a05      	ldr	r2, [pc, #20]	; (8010e50 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	601a      	str	r2, [r3, #0]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7ff ffb1 	bl	8010da8 <_ZN8touchgfx11ApplicationD1Ev>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	0802a524 	.word	0x0802a524

08010e54 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7ff ffe7 	bl	8010e30 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010e62:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f017 fb6e 	bl	8028548 <_ZdlPvj>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b082      	sub	sp, #8
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f000 f804 	bl	8010e8c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010e84:	bf00      	nop
 8010e86:	3708      	adds	r7, #8
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d00f      	beq.n	8010ebe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	330c      	adds	r3, #12
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	4798      	blx	r3
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d001      	beq.n	8010ebe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010eba:	2301      	movs	r3, #1
 8010ebc:	e000      	b.n	8010ec0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d00e      	beq.n	8010ee2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	3308      	adds	r3, #8
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2200      	movs	r2, #0
 8010ede:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8010ee2:	bf00      	nop
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b084      	sub	sp, #16
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	60f8      	str	r0, [r7, #12]
 8010ef2:	60b9      	str	r1, [r7, #8]
 8010ef4:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8010ef6:	f00b fb27 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 8010efa:	4603      	mov	r3, r0
 8010efc:	4618      	mov	r0, r3
 8010efe:	f00b fb29 	bl	801c554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d008      	beq.n	8010f1c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	330c      	adds	r3, #12
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	4610      	mov	r0, r2
 8010f1a:	4798      	blx	r3
    }
    if (*currentTrans)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d007      	beq.n	8010f34 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4610      	mov	r0, r2
 8010f32:	4798      	blx	r3
    }
    if (*currentScreen)
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d008      	beq.n	8010f4e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	3314      	adds	r3, #20
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4610      	mov	r0, r2
 8010f4c:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d008      	beq.n	8010f68 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	3304      	adds	r3, #4
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4610      	mov	r0, r2
 8010f66:	4798      	blx	r3
    }
    if (*currentScreen)
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d007      	beq.n	8010f80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4610      	mov	r0, r2
 8010f7e:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d008      	beq.n	8010f9a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	3308      	adds	r3, #8
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4610      	mov	r0, r2
 8010f98:	4798      	blx	r3
    }
}
 8010f9a:	bf00      	nop
 8010f9c:	3710      	adds	r7, #16
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b084      	sub	sp, #16
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	60f8      	str	r0, [r7, #12]
 8010faa:	60b9      	str	r1, [r7, #8]
 8010fac:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	330c      	adds	r3, #12
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	68f8      	ldr	r0, [r7, #12]
 8010fb8:	4798      	blx	r3
    newPresenter->activate();
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	68b8      	ldr	r0, [r7, #8]
 8010fc2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010fc4:	6879      	ldr	r1, [r7, #4]
 8010fc6:	68f8      	ldr	r0, [r7, #12]
 8010fc8:	f00c fbce 	bl	801d768 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	3310      	adds	r3, #16
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	4798      	blx	r3

    Application::getInstance()->draw();
 8010fd8:	f00b fab6 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	3228      	adds	r2, #40	; 0x28
 8010fe2:	6812      	ldr	r2, [r2, #0]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	4790      	blx	r2
}
 8010fe8:	bf00      	nop
 8010fea:	3710      	adds	r7, #16
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	683a      	ldr	r2, [r7, #0]
 8010ffe:	601a      	str	r2, [r3, #0]
    }
 8011000:	bf00      	nop
 8011002:	370c      	adds	r7, #12
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr

0801100c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	4a08      	ldr	r2, [pc, #32]	; (8011038 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	601a      	str	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8011020:	4618      	mov	r0, r3
 8011022:	f000 fdb3 	bl	8011b8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff ff01 	bl	8010e30 <_ZN8touchgfx14MVPApplicationD1Ev>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4618      	mov	r0, r3
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	0802a4d0 	.word	0x0802a4d0

0801103c <_ZN23FrontendApplicationBaseD0Ev>:
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7ff ffe1 	bl	801100c <_ZN23FrontendApplicationBaseD1Ev>
 801104a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f017 fa7a 	bl	8028548 <_ZdlPvj>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
	...

08011060 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4618      	mov	r0, r3
 801106c:	f7ff fd9e 	bl	8010bac <_ZN8touchgfx10TransitionC1Ev>
 8011070:	4a03      	ldr	r2, [pc, #12]	; (8011080 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	0802a4b0 	.word	0x0802a4b0

08011084 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	4a05      	ldr	r2, [pc, #20]	; (80110a4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	601a      	str	r2, [r3, #0]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fd9f 	bl	8010bd8 <_ZN8touchgfx10TransitionD1Ev>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	0802a4b0 	.word	0x0802a4b0

080110a8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7ff ffe7 	bl	8011084 <_ZN8touchgfx12NoTransitionD1Ev>
 80110b6:	210c      	movs	r1, #12
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f017 fa45 	bl	8028548 <_ZdlPvj>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	4618      	mov	r0, r3
 80110c2:	3708      	adds	r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2201      	movs	r2, #1
 80110d4:	721a      	strb	r2, [r3, #8]
    }
 80110d6:	bf00      	nop
 80110d8:	370c      	adds	r7, #12
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr

080110e2 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 80110e2:	b480      	push	{r7}
 80110e4:	b083      	sub	sp, #12
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
 80110ea:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	683a      	ldr	r2, [r7, #0]
 80110f0:	605a      	str	r2, [r3, #4]
    }
 80110f2:	bf00      	nop
 80110f4:	370c      	adds	r7, #12
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
	...

08011100 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	4618      	mov	r0, r3
 8011110:	f7ff fe6e 	bl	8010df0 <_ZN8touchgfx14MVPApplicationC1Ev>
 8011114:	4a13      	ldr	r2, [pc, #76]	; (8011164 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	601a      	str	r2, [r3, #0]
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8011120:	4618      	mov	r0, r3
 8011122:	f000 f92b 	bl	801137c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	68ba      	ldr	r2, [r7, #8]
 8011132:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8011136:	f7ff fe0f 	bl	8010d58 <_ZN8touchgfx3HAL11getInstanceEv>
 801113a:	4603      	mov	r3, r0
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	3208      	adds	r2, #8
 8011140:	6812      	ldr	r2, [r2, #0]
 8011142:	2100      	movs	r1, #0
 8011144:	4618      	mov	r0, r3
 8011146:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8011148:	2000      	movs	r0, #0
 801114a:	f004 fa45 	bl	80155d8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 801114e:	f7ff fe0f 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8011152:	4603      	mov	r3, r0
 8011154:	4618      	mov	r0, r3
 8011156:	f010 ff08 	bl	8021f6a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	4618      	mov	r0, r3
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	0802a4d0 	.word	0x0802a4d0

08011168 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	683a      	ldr	r2, [r7, #0]
 801118e:	4611      	mov	r1, r2
 8011190:	4618      	mov	r0, r3
 8011192:	f7ff ffe9 	bl	8011168 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	685a      	ldr	r2, [r3, #4]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	605a      	str	r2, [r3, #4]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	683a      	ldr	r2, [r7, #0]
 80111a2:	3308      	adds	r3, #8
 80111a4:	3208      	adds	r2, #8
 80111a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4618      	mov	r0, r3
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 80111b8:	b590      	push	{r4, r7, lr}
 80111ba:	b089      	sub	sp, #36	; 0x24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80111c6:	4b10      	ldr	r3, [pc, #64]	; (8011208 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 80111c8:	61bb      	str	r3, [r7, #24]
 80111ca:	2300      	movs	r3, #0
 80111cc:	61fb      	str	r3, [r7, #28]
 80111ce:	f107 0008 	add.w	r0, r7, #8
 80111d2:	f107 0318 	add.w	r3, r7, #24
 80111d6:	cb0c      	ldmia	r3, {r2, r3}
 80111d8:	6879      	ldr	r1, [r7, #4]
 80111da:	f000 f8eb 	bl	80113b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80111de:	f107 0308 	add.w	r3, r7, #8
 80111e2:	4619      	mov	r1, r3
 80111e4:	4620      	mov	r0, r4
 80111e6:	f7ff ffcb 	bl	8011180 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80111ea:	f107 0308 	add.w	r3, r7, #8
 80111ee:	4618      	mov	r0, r3
 80111f0:	f000 fccc 	bl	8011b8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8011200:	bf00      	nop
 8011202:	3724      	adds	r7, #36	; 0x24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd90      	pop	{r4, r7, pc}
 8011208:	0801120d 	.word	0x0801120d

0801120c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af02      	add	r7, sp, #8
 8011212:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011220:	461a      	mov	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	4b04      	ldr	r3, [pc, #16]	; (801123c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 801122c:	4804      	ldr	r0, [pc, #16]	; (8011240 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 801122e:	f000 f8e1 	bl	80113f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8011232:	bf00      	nop
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	2000bf70 	.word	0x2000bf70
 8011240:	2000bf6c 	.word	0x2000bf6c

08011244 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionEast()
{
 8011244:	b590      	push	{r4, r7, lr}
 8011246:	b089      	sub	sp, #36	; 0x24
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionEastImpl);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8011252:	4b10      	ldr	r3, [pc, #64]	; (8011294 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv+0x50>)
 8011254:	61bb      	str	r3, [r7, #24]
 8011256:	2300      	movs	r3, #0
 8011258:	61fb      	str	r3, [r7, #28]
 801125a:	f107 0008 	add.w	r0, r7, #8
 801125e:	f107 0318 	add.w	r3, r7, #24
 8011262:	cb0c      	ldmia	r3, {r2, r3}
 8011264:	6879      	ldr	r1, [r7, #4]
 8011266:	f000 f8a5 	bl	80113b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801126a:	f107 0308 	add.w	r3, r7, #8
 801126e:	4619      	mov	r1, r3
 8011270:	4620      	mov	r0, r4
 8011272:	f7ff ff85 	bl	8011180 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011276:	f107 0308 	add.w	r3, r7, #8
 801127a:	4618      	mov	r0, r3
 801127c:	f000 fc86 	bl	8011b8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801128c:	bf00      	nop
 801128e:	3724      	adds	r7, #36	; 0x24
 8011290:	46bd      	mov	sp, r7
 8011292:	bd90      	pop	{r4, r7, pc}
 8011294:	08011299 	.word	0x08011299

08011298 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionEastImpl()
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af02      	add	r7, sp, #8
 801129e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80112ac:	461a      	mov	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80112b4:	9300      	str	r3, [sp, #0]
 80112b6:	4b04      	ldr	r3, [pc, #16]	; (80112c8 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv+0x30>)
 80112b8:	4804      	ldr	r0, [pc, #16]	; (80112cc <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv+0x34>)
 80112ba:	f000 f947 	bl	801154c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80112be:	bf00      	nop
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	2000bf70 	.word	0x2000bf70
 80112cc:	2000bf6c 	.word	0x2000bf6c

080112d0 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>:

// SecondScreen

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEast()
{
 80112d0:	b590      	push	{r4, r7, lr}
 80112d2:	b089      	sub	sp, #36	; 0x24
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSecondScreenScreenSlideTransitionEastImpl);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80112de:	4b10      	ldr	r3, [pc, #64]	; (8011320 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv+0x50>)
 80112e0:	61bb      	str	r3, [r7, #24]
 80112e2:	2300      	movs	r3, #0
 80112e4:	61fb      	str	r3, [r7, #28]
 80112e6:	f107 0008 	add.w	r0, r7, #8
 80112ea:	f107 0318 	add.w	r3, r7, #24
 80112ee:	cb0c      	ldmia	r3, {r2, r3}
 80112f0:	6879      	ldr	r1, [r7, #4]
 80112f2:	f000 f85f 	bl	80113b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80112f6:	f107 0308 	add.w	r3, r7, #8
 80112fa:	4619      	mov	r1, r3
 80112fc:	4620      	mov	r0, r4
 80112fe:	f7ff ff3f 	bl	8011180 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011302:	f107 0308 	add.w	r3, r7, #8
 8011306:	4618      	mov	r0, r3
 8011308:	f000 fc40 	bl	8011b8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8011318:	bf00      	nop
 801131a:	3724      	adds	r7, #36	; 0x24
 801131c:	46bd      	mov	sp, r7
 801131e:	bd90      	pop	{r4, r7, pc}
 8011320:	08011325 	.word	0x08011325

08011324 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEastImpl()
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af02      	add	r7, sp, #8
 801132a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SecondScreenView, SecondScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011338:	461a      	mov	r2, r3
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	4b04      	ldr	r3, [pc, #16]	; (8011354 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x30>)
 8011344:	4804      	ldr	r0, [pc, #16]	; (8011358 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x34>)
 8011346:	f000 f9af 	bl	80116a8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801134a:	bf00      	nop
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	2000bf70 	.word	0x2000bf70
 8011358:	2000bf6c 	.word	0x2000bf6c

0801135c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801135c:	b480      	push	{r7}
 801135e:	b083      	sub	sp, #12
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	4a04      	ldr	r2, [pc, #16]	; (8011378 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	601a      	str	r2, [r3, #0]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	4618      	mov	r0, r3
 801136e:	370c      	adds	r7, #12
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr
 8011378:	0802a560 	.word	0x0802a560

0801137c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	4618      	mov	r0, r3
 8011388:	f7ff ffe8 	bl	801135c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801138c:	4a08      	ldr	r2, [pc, #32]	; (80113b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	601a      	str	r2, [r3, #0]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	605a      	str	r2, [r3, #4]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	609a      	str	r2, [r3, #8]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	60da      	str	r2, [r3, #12]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4618      	mov	r0, r3
 80113a8:	3708      	adds	r7, #8
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	0802a50c 	.word	0x0802a50c

080113b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	4639      	mov	r1, r7
 80113c0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7ff ffc8 	bl	801135c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80113cc:	4a08      	ldr	r2, [pc, #32]	; (80113f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	68ba      	ldr	r2, [r7, #8]
 80113d6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	3308      	adds	r3, #8
 80113dc:	463a      	mov	r2, r7
 80113de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	4618      	mov	r0, r3
 80113ea:	3710      	adds	r7, #16
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	0802a50c 	.word	0x0802a50c

080113f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80113f4:	b590      	push	{r4, r7, lr}
 80113f6:	b089      	sub	sp, #36	; 0x24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
 8011400:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	689a      	ldr	r2, [r3, #8]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	689b      	ldr	r3, [r3, #8]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	3320      	adds	r3, #32
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4610      	mov	r0, r2
 8011412:	4798      	blx	r3
 8011414:	4603      	mov	r3, r0
 8011416:	f642 0243 	movw	r2, #10307	; 0x2843
 801141a:	4293      	cmp	r3, r2
 801141c:	d805      	bhi.n	801142a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801141e:	4b46      	ldr	r3, [pc, #280]	; (8011538 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8011420:	4a46      	ldr	r2, [pc, #280]	; (801153c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8011422:	21c2      	movs	r1, #194	; 0xc2
 8011424:	4846      	ldr	r0, [pc, #280]	; (8011540 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8011426:	f017 f8bd 	bl	80285a4 <__assert_func>
 801142a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	685a      	ldr	r2, [r3, #4]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	3320      	adds	r3, #32
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	4610      	mov	r0, r2
 801143c:	4798      	blx	r3
 801143e:	4603      	mov	r3, r0
 8011440:	2b0f      	cmp	r3, #15
 8011442:	d805      	bhi.n	8011450 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8011444:	4b3f      	ldr	r3, [pc, #252]	; (8011544 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8011446:	4a3d      	ldr	r2, [pc, #244]	; (801153c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8011448:	21c3      	movs	r1, #195	; 0xc3
 801144a:	483d      	ldr	r0, [pc, #244]	; (8011540 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801144c:	f017 f8aa 	bl	80285a4 <__assert_func>
 8011450:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68da      	ldr	r2, [r3, #12]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	3320      	adds	r3, #32
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4610      	mov	r0, r2
 8011462:	4798      	blx	r3
 8011464:	4603      	mov	r3, r0
 8011466:	2b0b      	cmp	r3, #11
 8011468:	d805      	bhi.n	8011476 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801146a:	4b37      	ldr	r3, [pc, #220]	; (8011548 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 801146c:	4a33      	ldr	r2, [pc, #204]	; (801153c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801146e:	21c4      	movs	r1, #196	; 0xc4
 8011470:	4833      	ldr	r0, [pc, #204]	; (8011540 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8011472:	f017 f897 	bl	80285a4 <__assert_func>
 8011476:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011478:	683a      	ldr	r2, [r7, #0]
 801147a:	68b9      	ldr	r1, [r7, #8]
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f7ff fd34 	bl	8010eea <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	2100      	movs	r1, #0
 8011488:	4618      	mov	r0, r3
 801148a:	f000 f9b7 	bl	80117fc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801148e:	4603      	mov	r3, r0
 8011490:	4619      	mov	r1, r3
 8011492:	200c      	movs	r0, #12
 8011494:	f7ff fb1c 	bl	8010ad0 <_ZnwjPv>
 8011498:	4604      	mov	r4, r0
 801149a:	4620      	mov	r0, r4
 801149c:	f7ff fde0 	bl	8011060 <_ZN8touchgfx12NoTransitionC1Ev>
 80114a0:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	689b      	ldr	r3, [r3, #8]
 80114a6:	2100      	movs	r1, #0
 80114a8:	4618      	mov	r0, r3
 80114aa:	f000 f9ba 	bl	8011822 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80114ae:	4603      	mov	r3, r0
 80114b0:	4619      	mov	r1, r3
 80114b2:	f642 0044 	movw	r0, #10308	; 0x2844
 80114b6:	f7ff fb0b 	bl	8010ad0 <_ZnwjPv>
 80114ba:	4604      	mov	r4, r0
 80114bc:	4620      	mov	r0, r4
 80114be:	f004 fb05 	bl	8015acc <_ZN8MainViewC1Ev>
 80114c2:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	2100      	movs	r1, #0
 80114ca:	4618      	mov	r0, r3
 80114cc:	f000 f9bc 	bl	8011848 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80114d0:	4603      	mov	r3, r0
 80114d2:	4619      	mov	r1, r3
 80114d4:	2010      	movs	r0, #16
 80114d6:	f7ff fafb 	bl	8010ad0 <_ZnwjPv>
 80114da:	4604      	mov	r4, r0
 80114dc:	69b9      	ldr	r1, [r7, #24]
 80114de:	4620      	mov	r0, r4
 80114e0:	f004 fa48 	bl	8015974 <_ZN13MainPresenterC1ER8MainView>
 80114e4:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	69fa      	ldr	r2, [r7, #28]
 80114ea:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	697a      	ldr	r2, [r7, #20]
 80114f0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	69ba      	ldr	r2, [r7, #24]
 80114f6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	3304      	adds	r3, #4
 8011502:	e000      	b.n	8011506 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
 8011504:	2300      	movs	r3, #0
 8011506:	4619      	mov	r1, r3
 8011508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801150a:	f7ff fd71 	bl	8010ff0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	3304      	adds	r3, #4
 8011512:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011514:	4618      	mov	r0, r3
 8011516:	f7ff fde4 	bl	80110e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	6979      	ldr	r1, [r7, #20]
 801151e:	4618      	mov	r0, r3
 8011520:	f000 f9a5 	bl	801186e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8011524:	69fa      	ldr	r2, [r7, #28]
 8011526:	6979      	ldr	r1, [r7, #20]
 8011528:	69b8      	ldr	r0, [r7, #24]
 801152a:	f7ff fd3a 	bl	8010fa2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 801152e:	697b      	ldr	r3, [r7, #20]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3724      	adds	r7, #36	; 0x24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd90      	pop	{r4, r7, pc}
 8011538:	08029848 	.word	0x08029848
 801153c:	080298d8 	.word	0x080298d8
 8011540:	080299d8 	.word	0x080299d8
 8011544:	08029a1c 	.word	0x08029a1c
 8011548:	08029ac0 	.word	0x08029ac0

0801154c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801154c:	b590      	push	{r4, r7, lr}
 801154e:	b089      	sub	sp, #36	; 0x24
 8011550:	af00      	add	r7, sp, #0
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	607a      	str	r2, [r7, #4]
 8011558:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	689a      	ldr	r2, [r3, #8]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	3320      	adds	r3, #32
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4610      	mov	r0, r2
 801156a:	4798      	blx	r3
 801156c:	4603      	mov	r3, r0
 801156e:	f642 0243 	movw	r2, #10307	; 0x2843
 8011572:	4293      	cmp	r3, r2
 8011574:	d805      	bhi.n	8011582 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8011576:	4b47      	ldr	r3, [pc, #284]	; (8011694 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8011578:	4a47      	ldr	r2, [pc, #284]	; (8011698 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801157a:	21c2      	movs	r1, #194	; 0xc2
 801157c:	4847      	ldr	r0, [pc, #284]	; (801169c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 801157e:	f017 f811 	bl	80285a4 <__assert_func>
 8011582:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	685a      	ldr	r2, [r3, #4]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	3320      	adds	r3, #32
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	4610      	mov	r0, r2
 8011594:	4798      	blx	r3
 8011596:	4603      	mov	r3, r0
 8011598:	2b0f      	cmp	r3, #15
 801159a:	d805      	bhi.n	80115a8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801159c:	4b40      	ldr	r3, [pc, #256]	; (80116a0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 801159e:	4a3e      	ldr	r2, [pc, #248]	; (8011698 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80115a0:	21c3      	movs	r1, #195	; 0xc3
 80115a2:	483e      	ldr	r0, [pc, #248]	; (801169c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80115a4:	f016 fffe 	bl	80285a4 <__assert_func>
 80115a8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68da      	ldr	r2, [r3, #12]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	3320      	adds	r3, #32
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4610      	mov	r0, r2
 80115ba:	4798      	blx	r3
 80115bc:	4603      	mov	r3, r0
 80115be:	2b53      	cmp	r3, #83	; 0x53
 80115c0:	d805      	bhi.n	80115ce <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80115c2:	4b38      	ldr	r3, [pc, #224]	; (80116a4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>)
 80115c4:	4a34      	ldr	r2, [pc, #208]	; (8011698 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80115c6:	21c4      	movs	r1, #196	; 0xc4
 80115c8:	4834      	ldr	r0, [pc, #208]	; (801169c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 80115ca:	f016 ffeb 	bl	80285a4 <__assert_func>
 80115ce:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80115d0:	683a      	ldr	r2, [r7, #0]
 80115d2:	68b9      	ldr	r1, [r7, #8]
 80115d4:	68f8      	ldr	r0, [r7, #12]
 80115d6:	f7ff fc88 	bl	8010eea <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	2100      	movs	r1, #0
 80115e0:	4618      	mov	r0, r3
 80115e2:	f000 f952 	bl	801188a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 80115e6:	4603      	mov	r3, r0
 80115e8:	4619      	mov	r1, r3
 80115ea:	2054      	movs	r0, #84	; 0x54
 80115ec:	f7ff fa70 	bl	8010ad0 <_ZnwjPv>
 80115f0:	4604      	mov	r4, r0
 80115f2:	2114      	movs	r1, #20
 80115f4:	4620      	mov	r0, r4
 80115f6:	f000 f97d 	bl	80118f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80115fa:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	2100      	movs	r1, #0
 8011602:	4618      	mov	r0, r3
 8011604:	f000 f90d 	bl	8011822 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011608:	4603      	mov	r3, r0
 801160a:	4619      	mov	r1, r3
 801160c:	f642 0044 	movw	r0, #10308	; 0x2844
 8011610:	f7ff fa5e 	bl	8010ad0 <_ZnwjPv>
 8011614:	4604      	mov	r4, r0
 8011616:	4620      	mov	r0, r4
 8011618:	f004 fa58 	bl	8015acc <_ZN8MainViewC1Ev>
 801161c:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	2100      	movs	r1, #0
 8011624:	4618      	mov	r0, r3
 8011626:	f000 f90f 	bl	8011848 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 801162a:	4603      	mov	r3, r0
 801162c:	4619      	mov	r1, r3
 801162e:	2010      	movs	r0, #16
 8011630:	f7ff fa4e 	bl	8010ad0 <_ZnwjPv>
 8011634:	4604      	mov	r4, r0
 8011636:	69b9      	ldr	r1, [r7, #24]
 8011638:	4620      	mov	r0, r4
 801163a:	f004 f99b 	bl	8015974 <_ZN13MainPresenterC1ER8MainView>
 801163e:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	69fa      	ldr	r2, [r7, #28]
 8011644:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	697a      	ldr	r2, [r7, #20]
 801164a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	69ba      	ldr	r2, [r7, #24]
 8011650:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d002      	beq.n	801165e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	3304      	adds	r3, #4
 801165c:	e000      	b.n	8011660 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
 801165e:	2300      	movs	r3, #0
 8011660:	4619      	mov	r1, r3
 8011662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011664:	f7ff fcc4 	bl	8010ff0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	3304      	adds	r3, #4
 801166c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801166e:	4618      	mov	r0, r3
 8011670:	f7ff fd37 	bl	80110e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	6979      	ldr	r1, [r7, #20]
 8011678:	4618      	mov	r0, r3
 801167a:	f000 f8f8 	bl	801186e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801167e:	69fa      	ldr	r2, [r7, #28]
 8011680:	6979      	ldr	r1, [r7, #20]
 8011682:	69b8      	ldr	r0, [r7, #24]
 8011684:	f7ff fc8d 	bl	8010fa2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8011688:	697b      	ldr	r3, [r7, #20]
}
 801168a:	4618      	mov	r0, r3
 801168c:	3724      	adds	r7, #36	; 0x24
 801168e:	46bd      	mov	sp, r7
 8011690:	bd90      	pop	{r4, r7, pc}
 8011692:	bf00      	nop
 8011694:	08029848 	.word	0x08029848
 8011698:	08029b64 	.word	0x08029b64
 801169c:	080299d8 	.word	0x080299d8
 80116a0:	08029a1c 	.word	0x08029a1c
 80116a4:	08029ac0 	.word	0x08029ac0

080116a8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80116a8:	b590      	push	{r4, r7, lr}
 80116aa:	b089      	sub	sp, #36	; 0x24
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	607a      	str	r2, [r7, #4]
 80116b4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	689a      	ldr	r2, [r3, #8]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	689b      	ldr	r3, [r3, #8]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	3320      	adds	r3, #32
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4610      	mov	r0, r2
 80116c6:	4798      	blx	r3
 80116c8:	4603      	mov	r3, r0
 80116ca:	2bf7      	cmp	r3, #247	; 0xf7
 80116cc:	d805      	bhi.n	80116da <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80116ce:	4b46      	ldr	r3, [pc, #280]	; (80117e8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80116d0:	4a46      	ldr	r2, [pc, #280]	; (80117ec <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80116d2:	21c2      	movs	r1, #194	; 0xc2
 80116d4:	4846      	ldr	r0, [pc, #280]	; (80117f0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80116d6:	f016 ff65 	bl	80285a4 <__assert_func>
 80116da:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	685a      	ldr	r2, [r3, #4]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	3320      	adds	r3, #32
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	4610      	mov	r0, r2
 80116ec:	4798      	blx	r3
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b0f      	cmp	r3, #15
 80116f2:	d805      	bhi.n	8011700 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 80116f4:	4b3f      	ldr	r3, [pc, #252]	; (80117f4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80116f6:	4a3d      	ldr	r2, [pc, #244]	; (80117ec <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80116f8:	21c3      	movs	r1, #195	; 0xc3
 80116fa:	483d      	ldr	r0, [pc, #244]	; (80117f0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80116fc:	f016 ff52 	bl	80285a4 <__assert_func>
 8011700:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	68da      	ldr	r2, [r3, #12]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	3320      	adds	r3, #32
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4610      	mov	r0, r2
 8011712:	4798      	blx	r3
 8011714:	4603      	mov	r3, r0
 8011716:	2b53      	cmp	r3, #83	; 0x53
 8011718:	d805      	bhi.n	8011726 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 801171a:	4b37      	ldr	r3, [pc, #220]	; (80117f8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 801171c:	4a33      	ldr	r2, [pc, #204]	; (80117ec <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801171e:	21c4      	movs	r1, #196	; 0xc4
 8011720:	4833      	ldr	r0, [pc, #204]	; (80117f0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8011722:	f016 ff3f 	bl	80285a4 <__assert_func>
 8011726:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011728:	683a      	ldr	r2, [r7, #0]
 801172a:	68b9      	ldr	r1, [r7, #8]
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	f7ff fbdc 	bl	8010eea <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	2100      	movs	r1, #0
 8011738:	4618      	mov	r0, r3
 801173a:	f000 f8a6 	bl	801188a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801173e:	4603      	mov	r3, r0
 8011740:	4619      	mov	r1, r3
 8011742:	2054      	movs	r0, #84	; 0x54
 8011744:	f7ff f9c4 	bl	8010ad0 <_ZnwjPv>
 8011748:	4604      	mov	r4, r0
 801174a:	2114      	movs	r1, #20
 801174c:	4620      	mov	r0, r4
 801174e:	f000 f8d1 	bl	80118f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8011752:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	689b      	ldr	r3, [r3, #8]
 8011758:	2100      	movs	r1, #0
 801175a:	4618      	mov	r0, r3
 801175c:	f000 f95e 	bl	8011a1c <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>
 8011760:	4603      	mov	r3, r0
 8011762:	4619      	mov	r1, r3
 8011764:	20f8      	movs	r0, #248	; 0xf8
 8011766:	f7ff f9b3 	bl	8010ad0 <_ZnwjPv>
 801176a:	4604      	mov	r4, r0
 801176c:	4620      	mov	r0, r4
 801176e:	f004 fe09 	bl	8016384 <_ZN16SecondScreenViewC1Ev>
 8011772:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	2100      	movs	r1, #0
 801177a:	4618      	mov	r0, r3
 801177c:	f000 f961 	bl	8011a42 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>
 8011780:	4603      	mov	r3, r0
 8011782:	4619      	mov	r1, r3
 8011784:	2010      	movs	r0, #16
 8011786:	f7ff f9a3 	bl	8010ad0 <_ZnwjPv>
 801178a:	4604      	mov	r4, r0
 801178c:	69b9      	ldr	r1, [r7, #24]
 801178e:	4620      	mov	r0, r4
 8011790:	f004 fda2 	bl	80162d8 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>
 8011794:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	69fa      	ldr	r2, [r7, #28]
 801179a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	697a      	ldr	r2, [r7, #20]
 80117a0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	69ba      	ldr	r2, [r7, #24]
 80117a6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d002      	beq.n	80117b4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	3304      	adds	r3, #4
 80117b2:	e000      	b.n	80117b6 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80117b4:	2300      	movs	r3, #0
 80117b6:	4619      	mov	r1, r3
 80117b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117ba:	f7ff fc19 	bl	8010ff0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	3304      	adds	r3, #4
 80117c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7ff fc8c 	bl	80110e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80117ca:	69bb      	ldr	r3, [r7, #24]
 80117cc:	6979      	ldr	r1, [r7, #20]
 80117ce:	4618      	mov	r0, r3
 80117d0:	f000 f94a 	bl	8011a68 <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80117d4:	69fa      	ldr	r2, [r7, #28]
 80117d6:	6979      	ldr	r1, [r7, #20]
 80117d8:	69b8      	ldr	r0, [r7, #24]
 80117da:	f7ff fbe2 	bl	8010fa2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80117de:	697b      	ldr	r3, [r7, #20]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3724      	adds	r7, #36	; 0x24
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd90      	pop	{r4, r7, pc}
 80117e8:	08029848 	.word	0x08029848
 80117ec:	08029c78 	.word	0x08029c78
 80117f0:	080299d8 	.word	0x080299d8
 80117f4:	08029a1c 	.word	0x08029a1c
 80117f8:	08029ac0 	.word	0x08029ac0

080117fc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	460b      	mov	r3, r1
 8011806:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	3324      	adds	r3, #36	; 0x24
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	887a      	ldrh	r2, [r7, #2]
 8011812:	4611      	mov	r1, r2
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	4798      	blx	r3
 8011818:	4603      	mov	r3, r0
    }
 801181a:	4618      	mov	r0, r3
 801181c:	3708      	adds	r7, #8
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}

08011822 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8011822:	b580      	push	{r7, lr}
 8011824:	b082      	sub	sp, #8
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	460b      	mov	r3, r1
 801182c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	3324      	adds	r3, #36	; 0x24
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	887a      	ldrh	r2, [r7, #2]
 8011838:	4611      	mov	r1, r2
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	4798      	blx	r3
 801183e:	4603      	mov	r3, r0
    }
 8011840:	4618      	mov	r0, r3
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	460b      	mov	r3, r1
 8011852:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	3324      	adds	r3, #36	; 0x24
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	887a      	ldrh	r2, [r7, #2]
 801185e:	4611      	mov	r1, r2
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	4798      	blx	r3
 8011864:	4603      	mov	r3, r0
    }
 8011866:	4618      	mov	r0, r3
 8011868:	3708      	adds	r7, #8
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801186e:	b480      	push	{r7}
 8011870:	b083      	sub	sp, #12
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
 8011876:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	683a      	ldr	r2, [r7, #0]
 801187c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801187e:	bf00      	nop
 8011880:	370c      	adds	r7, #12
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr

0801188a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 801188a:	b580      	push	{r7, lr}
 801188c:	b082      	sub	sp, #8
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
 8011892:	460b      	mov	r3, r1
 8011894:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	3324      	adds	r3, #36	; 0x24
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	887a      	ldrh	r2, [r7, #2]
 80118a0:	4611      	mov	r1, r2
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	4798      	blx	r3
 80118a6:	4603      	mov	r3, r0
    }
 80118a8:	4618      	mov	r0, r3
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	4a05      	ldr	r2, [pc, #20]	; (80118d0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	601a      	str	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f000 f943 	bl	8011b4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	0802a480 	.word	0x0802a480

080118d4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f7ff ffe7 	bl	80118b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80118e2:	2110      	movs	r1, #16
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f016 fe2f 	bl	8028548 <_ZdlPvj>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 80118f4:	b590      	push	{r4, r7, lr}
 80118f6:	b087      	sub	sp, #28
 80118f8:	af02      	add	r7, sp, #8
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	4618      	mov	r0, r3
 8011904:	f7ff f952 	bl	8010bac <_ZN8touchgfx10TransitionC1Ev>
 8011908:	4a3f      	ldr	r2, [pc, #252]	; (8011a08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	601a      	str	r2, [r3, #0]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	330c      	adds	r3, #12
 8011912:	4618      	mov	r0, r3
 8011914:	f009 f918 	bl	801ab48 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	639a      	str	r2, [r3, #56]	; 0x38
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8011928:	4a38      	ldr	r2, [pc, #224]	; (8011a0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 801192a:	f107 0308 	add.w	r3, r7, #8
 801192e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011932:	e883 0003 	stmia.w	r3, {r0, r1}
 8011936:	f107 0308 	add.w	r3, r7, #8
 801193a:	cb0c      	ldmia	r3, {r2, r3}
 801193c:	6879      	ldr	r1, [r7, #4]
 801193e:	4620      	mov	r0, r4
 8011940:	f000 f8e4 	bl	8011b0c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2202      	movs	r2, #2
 8011948:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	78fa      	ldrb	r2, [r7, #3]
 8011950:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011964:	4b2a      	ldr	r3, [pc, #168]	; (8011a10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d047      	beq.n	80119fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f103 000c 	add.w	r0, r3, #12
 8011972:	4b28      	ldr	r3, [pc, #160]	; (8011a14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	b21a      	sxth	r2, r3
 8011978:	4b27      	ldr	r3, [pc, #156]	; (8011a18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801197a:	881b      	ldrh	r3, [r3, #0]
 801197c:	b21b      	sxth	r3, r3
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	4613      	mov	r3, r2
 8011982:	2200      	movs	r2, #0
 8011984:	2100      	movs	r1, #0
 8011986:	f7ff f99f 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	330c      	adds	r3, #12
 801198e:	4618      	mov	r0, r3
 8011990:	f009 f856 	bl	801aa40 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801199a:	2b03      	cmp	r3, #3
 801199c:	d82a      	bhi.n	80119f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 801199e:	a201      	add	r2, pc, #4	; (adr r2, 80119a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 80119a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119a4:	080119d5 	.word	0x080119d5
 80119a8:	080119e3 	.word	0x080119e3
 80119ac:	080119b5 	.word	0x080119b5
 80119b0:	080119c7 	.word	0x080119c7
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 80119b4:	4b17      	ldr	r3, [pc, #92]	; (8011a14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80119b6:	881b      	ldrh	r3, [r3, #0]
 80119b8:	425b      	negs	r3, r3
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	b21a      	sxth	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80119c4:	e01a      	b.n	80119fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 80119c6:	4b13      	ldr	r3, [pc, #76]	; (8011a14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	b21a      	sxth	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80119d2:	e013      	b.n	80119fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 80119d4:	4b10      	ldr	r3, [pc, #64]	; (8011a18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80119d6:	881b      	ldrh	r3, [r3, #0]
 80119d8:	b21a      	sxth	r2, r3
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80119e0:	e00c      	b.n	80119fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 80119e2:	4b0d      	ldr	r3, [pc, #52]	; (8011a18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80119e4:	881b      	ldrh	r3, [r3, #0]
 80119e6:	425b      	negs	r3, r3
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	b21a      	sxth	r2, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80119f2:	e003      	b.n	80119fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2201      	movs	r2, #1
 80119f8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 80119fa:	bf00      	nop
            }
        }
    }
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	4618      	mov	r0, r3
 8011a00:	3714      	adds	r7, #20
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd90      	pop	{r4, r7, pc}
 8011a06:	bf00      	nop
 8011a08:	0802a458 	.word	0x0802a458
 8011a0c:	08029d9c 	.word	0x08029d9c
 8011a10:	2000beed 	.word	0x2000beed
 8011a14:	2000bee2 	.word	0x2000bee2
 8011a18:	2000bee4 	.word	0x2000bee4

08011a1c <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>:
    T& at(const uint16_t index)
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	460b      	mov	r3, r1
 8011a26:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	3324      	adds	r3, #36	; 0x24
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	887a      	ldrh	r2, [r7, #2]
 8011a32:	4611      	mov	r1, r2
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	4798      	blx	r3
 8011a38:	4603      	mov	r3, r0
    }
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3708      	adds	r7, #8
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}

08011a42 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8011a42:	b580      	push	{r7, lr}
 8011a44:	b082      	sub	sp, #8
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	3324      	adds	r3, #36	; 0x24
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	887a      	ldrh	r2, [r7, #2]
 8011a58:	4611      	mov	r1, r2
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	4798      	blx	r3
 8011a5e:	4603      	mov	r3, r0
    }
 8011a60:	4618      	mov	r0, r3
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	683a      	ldr	r2, [r7, #0]
 8011a76:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011a78:	bf00      	nop
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a92:	683a      	ldr	r2, [r7, #0]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d024      	beq.n	8011ae2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5e>
        {
            return;
        }

        switch (direction)
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	dc02      	bgt.n	8011aa8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	da0e      	bge.n	8011ac4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x40>
 8011aa6:	e018      	b.n	8011ada <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x56>
 8011aa8:	3b02      	subs	r3, #2
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d815      	bhi.n	8011ada <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x56>
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	3354      	adds	r3, #84	; 0x54
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011abc:	2200      	movs	r2, #0
 8011abe:	6838      	ldr	r0, [r7, #0]
 8011ac0:	4798      	blx	r3
            break;
 8011ac2:	e00f      	b.n	8011ae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	3354      	adds	r3, #84	; 0x54
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	6838      	ldr	r0, [r7, #0]
 8011ad6:	4798      	blx	r3
            break;
 8011ad8:	e004      	b.n	8011ae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2201      	movs	r2, #1
 8011ade:	721a      	strb	r2, [r3, #8]
            break;
 8011ae0:	e000      	b.n	8011ae4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
            return;
 8011ae2:	bf00      	nop
        }
    }
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
	...

08011aec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	4a04      	ldr	r2, [pc, #16]	; (8011b08 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	601a      	str	r2, [r3, #0]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	4618      	mov	r0, r3
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr
 8011b08:	0802a498 	.word	0x0802a498

08011b0c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	4639      	mov	r1, r7
 8011b18:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7ff ffe4 	bl	8011aec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011b24:	4a08      	ldr	r2, [pc, #32]	; (8011b48 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	68ba      	ldr	r2, [r7, #8]
 8011b2e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	3308      	adds	r3, #8
 8011b34:	463a      	mov	r2, r7
 8011b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b3a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	4618      	mov	r0, r3
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	0802a480 	.word	0x0802a480

08011b4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
    }
 8011b54:	4a04      	ldr	r2, [pc, #16]	; (8011b68 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr
 8011b68:	0802a498 	.word	0x0802a498

08011b6c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
    }
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f7ff ffe9 	bl	8011b4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011b7a:	2104      	movs	r1, #4
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f016 fce3 	bl	8028548 <_ZdlPvj>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	4618      	mov	r0, r3
 8011b86:	3708      	adds	r7, #8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	4a05      	ldr	r2, [pc, #20]	; (8011bac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	601a      	str	r2, [r3, #0]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7ff f873 	bl	8010c88 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	0802a50c 	.word	0x0802a50c

08011bb0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7ff ffe7 	bl	8011b8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011bbe:	2110      	movs	r1, #16
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f016 fcc1 	bl	8028548 <_ZdlPvj>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
    }
 8011bd8:	4a0a      	ldr	r2, [pc, #40]	; (8011c04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	601a      	str	r2, [r3, #0]
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	333c      	adds	r3, #60	; 0x3c
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff fe64 	bl	80118b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	330c      	adds	r3, #12
 8011bec:	4618      	mov	r0, r3
 8011bee:	f008 ff26 	bl	801aa3e <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7fe ffef 	bl	8010bd8 <_ZN8touchgfx10TransitionD1Ev>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3708      	adds	r7, #8
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	0802a458 	.word	0x0802a458

08011c08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
    }
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f7ff ffdd 	bl	8011bd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8011c16:	2154      	movs	r1, #84	; 0x54
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f016 fc95 	bl	8028548 <_ZdlPvj>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	4618      	mov	r0, r3
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011c30:	4b56      	ldr	r3, [pc, #344]	; (8011d8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x164>)
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	f083 0301 	eor.w	r3, r3, #1
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d003      	beq.n	8011c46 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2201      	movs	r2, #1
 8011c42:	721a      	strb	r2, [r3, #8]
            return;
 8011c44:	e09f      	b.n	8011d86 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x15e>
        Transition::handleTickEvent();
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7fe ffe5 	bl	8010c18 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011c54:	3301      	adds	r3, #1
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d82f      	bhi.n	8011cce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011c74:	b298      	uxth	r0, r3
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	2100      	movs	r1, #0
 8011c86:	f00b fd86 	bl	801d796 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	f003 0301 	and.w	r3, r3, #1
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d01b      	beq.n	8011cde <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011cb4:	2a00      	cmp	r2, #0
 8011cb6:	dd01      	ble.n	8011cbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8011cb8:	2201      	movs	r2, #1
 8011cba:	e001      	b.n	8011cc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8011cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cc0:	4413      	add	r3, r2
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	b21a      	sxth	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011ccc:	e007      	b.n	8011cde <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8011cdc:	e053      	b.n	8011d86 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x15e>
        switch (direction)
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	dc02      	bgt.n	8011cee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc6>
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	da20      	bge.n	8011d2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
 8011cec:	e03c      	b.n	8011d68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x140>
 8011cee:	3b02      	subs	r3, #2
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d839      	bhi.n	8011d68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x140>
            calculatedValue -= snapshot.getX();
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	330c      	adds	r3, #12
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7ff f812 	bl	8010d22 <_ZNK8touchgfx8Drawable4getXEv>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	4619      	mov	r1, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011d08:	b29a      	uxth	r2, r3
 8011d0a:	b28b      	uxth	r3, r1
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	b21a      	sxth	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f103 000c 	add.w	r0, r3, #12
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011d24:	2200      	movs	r2, #0
 8011d26:	4619      	mov	r1, r3
 8011d28:	f00b f86c 	bl	801ce04 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011d2c:	e020      	b.n	8011d70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x148>
            calculatedValue -= snapshot.getY();
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	330c      	adds	r3, #12
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7ff f802 	bl	8010d3c <_ZNK8touchgfx8Drawable4getYEv>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011d42:	b29a      	uxth	r2, r3
 8011d44:	b28b      	uxth	r3, r1
 8011d46:	1ad3      	subs	r3, r2, r3
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	b21a      	sxth	r2, r3
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f103 000c 	add.w	r0, r3, #12
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011d5e:	461a      	mov	r2, r3
 8011d60:	2100      	movs	r1, #0
 8011d62:	f00b f84f 	bl	801ce04 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011d66:	e003      	b.n	8011d70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x148>
            done = true;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	721a      	strb	r2, [r3, #8]
            break;
 8011d6e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6858      	ldr	r0, [r3, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	3378      	adds	r3, #120	; 0x78
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	323c      	adds	r2, #60	; 0x3c
 8011d82:	4611      	mov	r1, r2
 8011d84:	4798      	blx	r3
    }
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	2000beed 	.word	0x2000beed

08011d90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8011d98:	4b0b      	ldr	r3, [pc, #44]	; (8011dc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d00e      	beq.n	8011dbe <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00a      	beq.n	8011dbe <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6858      	ldr	r0, [r3, #4]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	3364      	adds	r3, #100	; 0x64
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	320c      	adds	r2, #12
 8011dba:	4611      	mov	r1, r2
 8011dbc:	4798      	blx	r3
    }
 8011dbe:	bf00      	nop
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	2000beed 	.word	0x2000beed

08011dcc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b088      	sub	sp, #32
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8011dd4:	4b1a      	ldr	r3, [pc, #104]	; (8011e40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d02d      	beq.n	8011e38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fe ff2e 	bl	8010c40 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011de4:	4a17      	ldr	r2, [pc, #92]	; (8011e44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8011de6:	f107 0318 	add.w	r3, r7, #24
 8011dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011dee:	e883 0003 	stmia.w	r3, {r0, r1}
 8011df2:	f107 0008 	add.w	r0, r7, #8
 8011df6:	f107 0318 	add.w	r3, r7, #24
 8011dfa:	cb0c      	ldmia	r3, {r2, r3}
 8011dfc:	6879      	ldr	r1, [r7, #4]
 8011dfe:	f7ff fe85 	bl	8011b0c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	685a      	ldr	r2, [r3, #4]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3378      	adds	r3, #120	; 0x78
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f107 0108 	add.w	r1, r7, #8
 8011e14:	4610      	mov	r0, r2
 8011e16:	4798      	blx	r3
            screenContainer->add(snapshot);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6858      	ldr	r0, [r3, #4]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	3360      	adds	r3, #96	; 0x60
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	320c      	adds	r2, #12
 8011e2a:	4611      	mov	r1, r2
 8011e2c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011e2e:	f107 0308 	add.w	r3, r7, #8
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7ff fd3c 	bl	80118b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8011e38:	bf00      	nop
 8011e3a:	3720      	adds	r7, #32
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	2000beed 	.word	0x2000beed
 8011e44:	08029da4 	.word	0x08029da4

08011e48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011e58:	2b03      	cmp	r3, #3
 8011e5a:	d83b      	bhi.n	8011ed4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8011e5c:	a201      	add	r2, pc, #4	; (adr r2, 8011e64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8011e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e62:	bf00      	nop
 8011e64:	08011ea5 	.word	0x08011ea5
 8011e68:	08011ebf 	.word	0x08011ebf
 8011e6c:	08011e75 	.word	0x08011e75
 8011e70:	08011e8b 	.word	0x08011e8b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	3354      	adds	r3, #84	; 0x54
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4a18      	ldr	r2, [pc, #96]	; (8011ee0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011e7e:	8812      	ldrh	r2, [r2, #0]
 8011e80:	b211      	sxth	r1, r2
 8011e82:	2200      	movs	r2, #0
 8011e84:	6838      	ldr	r0, [r7, #0]
 8011e86:	4798      	blx	r3
            break;
 8011e88:	e025      	b.n	8011ed6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	3354      	adds	r3, #84	; 0x54
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a13      	ldr	r2, [pc, #76]	; (8011ee0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011e94:	8812      	ldrh	r2, [r2, #0]
 8011e96:	4252      	negs	r2, r2
 8011e98:	b292      	uxth	r2, r2
 8011e9a:	b211      	sxth	r1, r2
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	6838      	ldr	r0, [r7, #0]
 8011ea0:	4798      	blx	r3
            break;
 8011ea2:	e018      	b.n	8011ed6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	3354      	adds	r3, #84	; 0x54
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4a0d      	ldr	r2, [pc, #52]	; (8011ee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011eae:	8812      	ldrh	r2, [r2, #0]
 8011eb0:	4252      	negs	r2, r2
 8011eb2:	b292      	uxth	r2, r2
 8011eb4:	b212      	sxth	r2, r2
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	6838      	ldr	r0, [r7, #0]
 8011eba:	4798      	blx	r3
            break;
 8011ebc:	e00b      	b.n	8011ed6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	3354      	adds	r3, #84	; 0x54
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	4a07      	ldr	r2, [pc, #28]	; (8011ee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011ec8:	8812      	ldrh	r2, [r2, #0]
 8011eca:	b212      	sxth	r2, r2
 8011ecc:	2100      	movs	r1, #0
 8011ece:	6838      	ldr	r0, [r7, #0]
 8011ed0:	4798      	blx	r3
            break;
 8011ed2:	e000      	b.n	8011ed6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8011ed4:	bf00      	nop
    }
 8011ed6:	bf00      	nop
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	2000bee2 	.word	0x2000bee2
 8011ee4:	2000bee4 	.word	0x2000bee4

08011ee8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	68d2      	ldr	r2, [r2, #12]
 8011efa:	1052      	asrs	r2, r2, #1
 8011efc:	1898      	adds	r0, r3, r2
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	f003 0301 	and.w	r3, r3, #1
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d102      	bne.n	8011f10 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	689b      	ldr	r3, [r3, #8]
 8011f0e:	e00a      	b.n	8011f26 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	68d2      	ldr	r2, [r2, #12]
 8011f18:	1052      	asrs	r2, r2, #1
 8011f1a:	4413      	add	r3, r2
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	6892      	ldr	r2, [r2, #8]
 8011f22:	4413      	add	r3, r2
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	6839      	ldr	r1, [r7, #0]
 8011f28:	4798      	blx	r3
    }
 8011f2a:	bf00      	nop
 8011f2c:	3708      	adds	r7, #8
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}

08011f32 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8011f32:	b480      	push	{r7}
 8011f34:	b083      	sub	sp, #12
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d010      	beq.n	8011f64 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d107      	bne.n	8011f5a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	f003 0301 	and.w	r3, r3, #1
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d101      	bne.n	8011f5a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011f56:	2301      	movs	r3, #1
 8011f58:	e000      	b.n	8011f5c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	2b01      	cmp	r3, #1
 8011f5e:	d001      	beq.n	8011f64 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011f60:	2301      	movs	r3, #1
 8011f62:	e000      	b.n	8011f66 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011f64:	2300      	movs	r3, #0
    }
 8011f66:	4618      	mov	r0, r3
 8011f68:	370c      	adds	r7, #12
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr

08011f72 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b082      	sub	sp, #8
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	68d2      	ldr	r2, [r2, #12]
 8011f82:	1052      	asrs	r2, r2, #1
 8011f84:	1899      	adds	r1, r3, r2
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	f003 0301 	and.w	r3, r3, #1
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d102      	bne.n	8011f98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	e00a      	b.n	8011fae <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	68d2      	ldr	r2, [r2, #12]
 8011fa0:	1052      	asrs	r2, r2, #1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	6892      	ldr	r2, [r2, #8]
 8011faa:	4413      	add	r3, r2
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4608      	mov	r0, r1
 8011fb0:	4798      	blx	r3
    }
 8011fb2:	bf00      	nop
 8011fb4:	3708      	adds	r7, #8
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}

08011fba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8011fba:	b480      	push	{r7}
 8011fbc:	b083      	sub	sp, #12
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d010      	beq.n	8011fec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	689b      	ldr	r3, [r3, #8]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d107      	bne.n	8011fe2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	f003 0301 	and.w	r3, r3, #1
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d101      	bne.n	8011fe2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e000      	b.n	8011fe4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	d001      	beq.n	8011fec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e000      	b.n	8011fee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8011fec:	2300      	movs	r3, #0
    }
 8011fee:	4618      	mov	r0, r3
 8011ff0:	370c      	adds	r7, #12
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr

08011ffa <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 8011ffa:	b480      	push	{r7}
 8011ffc:	b083      	sub	sp, #12
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2200      	movs	r2, #0
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	4618      	mov	r0, r3
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr

08012016 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8012016:	b480      	push	{r7}
 8012018:	b083      	sub	sp, #12
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
 801201e:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	683a      	ldr	r2, [r7, #0]
 8012024:	601a      	str	r2, [r3, #0]
    }
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4618      	mov	r0, r3
 801202a:	370c      	adds	r7, #12
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2200      	movs	r2, #0
 8012040:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2200      	movs	r2, #0
 8012046:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	80da      	strh	r2, [r3, #6]
    }
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	4618      	mov	r0, r3
 8012058:	370c      	adds	r7, #12
 801205a:	46bd      	mov	sp, r7
 801205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012060:	4770      	bx	lr

08012062 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8012062:	b480      	push	{r7}
 8012064:	b085      	sub	sp, #20
 8012066:	af00      	add	r7, sp, #0
 8012068:	60f8      	str	r0, [r7, #12]
 801206a:	4608      	mov	r0, r1
 801206c:	4611      	mov	r1, r2
 801206e:	461a      	mov	r2, r3
 8012070:	4603      	mov	r3, r0
 8012072:	817b      	strh	r3, [r7, #10]
 8012074:	460b      	mov	r3, r1
 8012076:	813b      	strh	r3, [r7, #8]
 8012078:	4613      	mov	r3, r2
 801207a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	897a      	ldrh	r2, [r7, #10]
 8012080:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	893a      	ldrh	r2, [r7, #8]
 8012086:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	88fa      	ldrh	r2, [r7, #6]
 801208c:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	8b3a      	ldrh	r2, [r7, #24]
 8012092:	80da      	strh	r2, [r3, #6]
    }
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	4618      	mov	r0, r3
 8012098:	3714      	adds	r7, #20
 801209a:	46bd      	mov	sp, r7
 801209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a0:	4770      	bx	lr

080120a2 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 80120a2:	b480      	push	{r7}
 80120a4:	b083      	sub	sp, #12
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
    {
        return _type;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	791b      	ldrb	r3, [r3, #4]
    }
 80120ae:	4618      	mov	r0, r3
 80120b0:	370c      	adds	r7, #12
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr

080120ba <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 80120ba:	b480      	push	{r7}
 80120bc:	b083      	sub	sp, #12
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	460b      	mov	r3, r1
 80120c4:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	887a      	ldrh	r2, [r7, #2]
 80120ca:	801a      	strh	r2, [r3, #0]
    {
    }
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	4618      	mov	r0, r3
 80120d0:	370c      	adds	r7, #12
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr
	...

080120dc <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af02      	add	r7, sp, #8
 80120e2:	6078      	str	r0, [r7, #4]
        visible(true)
 80120e4:	4a13      	ldr	r2, [pc, #76]	; (8012134 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	601a      	str	r2, [r3, #0]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	1d18      	adds	r0, r3, #4
 80120ee:	2300      	movs	r3, #0
 80120f0:	9300      	str	r3, [sp, #0]
 80120f2:	2300      	movs	r3, #0
 80120f4:	2200      	movs	r2, #0
 80120f6:	2100      	movs	r1, #0
 80120f8:	f7ff ffb3 	bl	8012062 <_ZN8touchgfx4RectC1Essss>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	330c      	adds	r3, #12
 8012100:	4618      	mov	r0, r3
 8012102:	f7ff ff97 	bl	8012034 <_ZN8touchgfx4RectC1Ev>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2200      	movs	r2, #0
 801210a:	615a      	str	r2, [r3, #20]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2200      	movs	r2, #0
 8012110:	619a      	str	r2, [r3, #24]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2200      	movs	r2, #0
 8012116:	61da      	str	r2, [r3, #28]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2201      	movs	r2, #1
 8012124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	4618      	mov	r0, r3
 801212c:	3708      	adds	r7, #8
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	0802c974 	.word	0x0802c974

08012138 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	4a04      	ldr	r2, [pc, #16]	; (8012154 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	601a      	str	r2, [r3, #0]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4618      	mov	r0, r3
 801214a:	370c      	adds	r7, #12
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr
 8012154:	0802c974 	.word	0x0802c974

08012158 <_ZN8touchgfx8DrawableD0Ev>:
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff ffe9 	bl	8012138 <_ZN8touchgfx8DrawableD1Ev>
 8012166:	2128      	movs	r1, #40	; 0x28
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f016 f9ed 	bl	8028548 <_ZdlPvj>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4618      	mov	r0, r3
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	460b      	mov	r3, r1
 8012182:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	887a      	ldrh	r2, [r7, #2]
 8012188:	809a      	strh	r2, [r3, #4]
    }
 801218a:	bf00      	nop
 801218c:	370c      	adds	r7, #12
 801218e:	46bd      	mov	sp, r7
 8012190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012194:	4770      	bx	lr

08012196 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8012196:	b480      	push	{r7}
 8012198:	b083      	sub	sp, #12
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
 801219e:	460b      	mov	r3, r1
 80121a0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	887a      	ldrh	r2, [r7, #2]
 80121a6:	80da      	strh	r2, [r3, #6]
    }
 80121a8:	bf00      	nop
 80121aa:	370c      	adds	r7, #12
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr

080121b4 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	460b      	mov	r3, r1
 80121be:	807b      	strh	r3, [r7, #2]
 80121c0:	4613      	mov	r3, r2
 80121c2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	332c      	adds	r3, #44	; 0x2c
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80121d0:	4611      	mov	r1, r2
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	4798      	blx	r3
        setY(y);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	3330      	adds	r3, #48	; 0x30
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80121e2:	4611      	mov	r1, r2
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	4798      	blx	r3
    }
 80121e8:	bf00      	nop
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80121f0:	b480      	push	{r7}
 80121f2:	b083      	sub	sp, #12
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	460b      	mov	r3, r1
 80121fa:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	887a      	ldrh	r2, [r7, #2]
 8012200:	811a      	strh	r2, [r3, #8]
    }
 8012202:	bf00      	nop
 8012204:	370c      	adds	r7, #12
 8012206:	46bd      	mov	sp, r7
 8012208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220c:	4770      	bx	lr

0801220e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 801220e:	b480      	push	{r7}
 8012210:	b083      	sub	sp, #12
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
 8012216:	460b      	mov	r3, r1
 8012218:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	887a      	ldrh	r2, [r7, #2]
 801221e:	815a      	strh	r2, [r3, #10]
    }
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr

0801222c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	bf00      	nop
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
 801224a:	bf00      	nop
 801224c:	370c      	adds	r7, #12
 801224e:	46bd      	mov	sp, r7
 8012250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012254:	4770      	bx	lr

08012256 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8012256:	b480      	push	{r7}
 8012258:	b083      	sub	sp, #12
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]
 801225e:	6039      	str	r1, [r7, #0]
 8012260:	bf00      	nop
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
 8012276:	bf00      	nop
 8012278:	370c      	adds	r7, #12
 801227a:	46bd      	mov	sp, r7
 801227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012280:	4770      	bx	lr

08012282 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8012282:	b480      	push	{r7}
 8012284:	b083      	sub	sp, #12
 8012286:	af00      	add	r7, sp, #0
 8012288:	6078      	str	r0, [r7, #4]
 801228a:	bf00      	nop
 801228c:	370c      	adds	r7, #12
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr

08012296 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8012296:	b480      	push	{r7}
 8012298:	b083      	sub	sp, #12
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
 801229e:	460b      	mov	r3, r1
 80122a0:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	78fa      	ldrb	r2, [r7, #3]
 80122a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80122aa:	bf00      	nop
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 80122b6:	b480      	push	{r7}
 80122b8:	b083      	sub	sp, #12
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
 80122be:	460b      	mov	r3, r1
 80122c0:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	78fa      	ldrb	r2, [r7, #3]
 80122c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80122ca:	bf00      	nop
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80122d6:	b480      	push	{r7}
 80122d8:	b083      	sub	sp, #12
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80122e4:	4618      	mov	r0, r3
 80122e6:	370c      	adds	r7, #12
 80122e8:	46bd      	mov	sp, r7
 80122ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ee:	4770      	bx	lr

080122f0 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80122fe:	4618      	mov	r0, r3
 8012300:	370c      	adds	r7, #12
 8012302:	46bd      	mov	sp, r7
 8012304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012308:	4770      	bx	lr

0801230a <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801230a:	b580      	push	{r7, lr}
 801230c:	b082      	sub	sp, #8
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	460b      	mov	r3, r1
 8012314:	807b      	strh	r3, [r7, #2]
 8012316:	4613      	mov	r3, r2
 8012318:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	3354      	adds	r3, #84	; 0x54
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	8879      	ldrh	r1, [r7, #2]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801232a:	b292      	uxth	r2, r2
 801232c:	1a8a      	subs	r2, r1, r2
 801232e:	b292      	uxth	r2, r2
 8012330:	b210      	sxth	r0, r2
 8012332:	8839      	ldrh	r1, [r7, #0]
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801233a:	b292      	uxth	r2, r2
 801233c:	1a8a      	subs	r2, r1, r2
 801233e:	b292      	uxth	r2, r2
 8012340:	b212      	sxth	r2, r2
 8012342:	4601      	mov	r1, r0
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	4798      	blx	r3
    }
 8012348:	bf00      	nop
 801234a:	3708      	adds	r7, #8
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801235e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012366:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801236e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012370:	bf00      	nop
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f7ff ffe1 	bl	8012350 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681a      	ldr	r2, [r3, #0]
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	601a      	str	r2, [r3, #0]
    }
 801239c:	bf00      	nop
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
        firstChild(0)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7ff fe94 	bl	80120dc <_ZN8touchgfx8DrawableC1Ev>
 80123b4:	4a05      	ldr	r2, [pc, #20]	; (80123cc <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2200      	movs	r2, #0
 80123be:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	4618      	mov	r0, r3
 80123c4:	3708      	adds	r7, #8
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}
 80123ca:	bf00      	nop
 80123cc:	0802b668 	.word	0x0802b668

080123d0 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	4a05      	ldr	r2, [pc, #20]	; (80123f0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	601a      	str	r2, [r3, #0]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7ff fea9 	bl	8012138 <_ZN8touchgfx8DrawableD1Ev>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4618      	mov	r0, r3
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	0802b668 	.word	0x0802b668

080123f4 <_ZN8touchgfx9ContainerD0Ev>:
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7ff ffe7 	bl	80123d0 <_ZN8touchgfx9ContainerD1Ev>
 8012402:	212c      	movs	r1, #44	; 0x2c
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f016 f89f 	bl	8028548 <_ZdlPvj>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4618      	mov	r0, r3
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	4a06      	ldr	r2, [pc, #24]	; (8012438 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	601a      	str	r2, [r3, #0]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	3304      	adds	r3, #4
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff ffd2 	bl	80123d0 <_ZN8touchgfx9ContainerD1Ev>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	4618      	mov	r0, r3
 8012430:	3708      	adds	r7, #8
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	0802ca6c 	.word	0x0802ca6c

0801243c <_ZN8touchgfx6ScreenD0Ev>:
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7ff ffe5 	bl	8012414 <_ZN8touchgfx6ScreenD1Ev>
 801244a:	213c      	movs	r1, #60	; 0x3c
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f016 f87b 	bl	8028548 <_ZdlPvj>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	4618      	mov	r0, r3
 8012456:	3708      	adds	r7, #8
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 801245c:	b480      	push	{r7}
 801245e:	b083      	sub	sp, #12
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	bf00      	nop
 8012466:	370c      	adds	r7, #12
 8012468:	46bd      	mov	sp, r7
 801246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246e:	4770      	bx	lr

08012470 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8012470:	b480      	push	{r7}
 8012472:	b083      	sub	sp, #12
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	bf00      	nop
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012482:	4770      	bx	lr

08012484 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	bf00      	nop
 801248e:	370c      	adds	r7, #12
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr

08012498 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
    {
    }
 80124a0:	bf00      	nop
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	460b      	mov	r3, r1
 80124b6:	70fb      	strb	r3, [r7, #3]
    {
    }
 80124b8:	bf00      	nop
 80124ba:	370c      	adds	r7, #12
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr

080124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	3304      	adds	r3, #4
 80124d2:	6839      	ldr	r1, [r7, #0]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f006 fd6d 	bl	8018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80124da:	bf00      	nop
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
	...

080124e4 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7ff fdf4 	bl	80120dc <_ZN8touchgfx8DrawableC1Ev>
 80124f4:	4a03      	ldr	r2, [pc, #12]	; (8012504 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	601a      	str	r2, [r3, #0]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4618      	mov	r0, r3
 80124fe:	3708      	adds	r7, #8
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	0802a890 	.word	0x0802a890

08012508 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	4a05      	ldr	r2, [pc, #20]	; (8012528 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	601a      	str	r2, [r3, #0]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	4618      	mov	r0, r3
 801251a:	f7ff fe0d 	bl	8012138 <_ZN8touchgfx8DrawableD1Ev>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	4618      	mov	r0, r3
 8012522:	3708      	adds	r7, #8
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	0802a890 	.word	0x0802a890

0801252c <_ZN8touchgfx6WidgetD0Ev>:
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f7ff ffe7 	bl	8012508 <_ZN8touchgfx6WidgetD1Ev>
 801253a:	2128      	movs	r1, #40	; 0x28
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f016 f803 	bl	8028548 <_ZdlPvj>
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4618      	mov	r0, r3
 8012546:	3708      	adds	r7, #8
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	60f8      	str	r0, [r7, #12]
 8012554:	607b      	str	r3, [r7, #4]
 8012556:	460b      	mov	r3, r1
 8012558:	817b      	strh	r3, [r7, #10]
 801255a:	4613      	mov	r3, r2
 801255c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	4618      	mov	r0, r3
 8012562:	f7ff feb8 	bl	80122d6 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012566:	4603      	mov	r3, r0
 8012568:	2b00      	cmp	r3, #0
 801256a:	d008      	beq.n	801257e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	4618      	mov	r0, r3
 8012570:	f7ff febe 	bl	80122f0 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012574:	4603      	mov	r3, r0
 8012576:	2b00      	cmp	r3, #0
 8012578:	d001      	beq.n	801257e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801257a:	2301      	movs	r3, #1
 801257c:	e000      	b.n	8012580 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 801257e:	2300      	movs	r3, #0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d002      	beq.n	801258a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8012584:	68fa      	ldr	r2, [r7, #12]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	601a      	str	r2, [r3, #0]
        }
    }
 801258a:	bf00      	nop
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
	...

08012594 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff ffa0 	bl	80124e4 <_ZN8touchgfx6WidgetC1Ev>
 80125a4:	4a0a      	ldr	r2, [pc, #40]	; (80125d0 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	601a      	str	r2, [r3, #0]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	22ff      	movs	r2, #255	; 0xff
 80125ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	3328      	adds	r3, #40	; 0x28
 80125b6:	2100      	movs	r1, #0
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff fd2c 	bl	8012016 <_ZN8touchgfx9colortypeC1Em>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4618      	mov	r0, r3
 80125ca:	3708      	adds	r7, #8
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	0802c410 	.word	0x0802c410

080125d4 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	4a05      	ldr	r2, [pc, #20]	; (80125f4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	601a      	str	r2, [r3, #0]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7ff ff8f 	bl	8012508 <_ZN8touchgfx6WidgetD1Ev>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4618      	mov	r0, r3
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	0802c410 	.word	0x0802c410

080125f8 <_ZN8touchgfx3BoxD0Ev>:
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7ff ffe7 	bl	80125d4 <_ZN8touchgfx3BoxD1Ev>
 8012606:	2130      	movs	r1, #48	; 0x30
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f015 ff9d 	bl	8028548 <_ZdlPvj>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	4618      	mov	r0, r3
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	683a      	ldr	r2, [r7, #0]
 8012626:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012628:	bf00      	nop
 801262a:	370c      	adds	r7, #12
 801262c:	46bd      	mov	sp, r7
 801262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012632:	4770      	bx	lr

08012634 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	460b      	mov	r3, r1
 801263e:	807b      	strh	r3, [r7, #2]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	887a      	ldrh	r2, [r7, #2]
 8012644:	801a      	strh	r2, [r3, #0]
    }
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	4618      	mov	r0, r3
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
        assertValid();
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f7fd ff15 	bl	801048c <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8012662:	4b06      	ldr	r3, [pc, #24]	; (801267c <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	881b      	ldrh	r3, [r3, #0]
 801266a:	4619      	mov	r1, r3
 801266c:	4610      	mov	r0, r2
 801266e:	f003 f809 	bl	8015684 <_ZNK8touchgfx5Texts7getTextEt>
 8012672:	4603      	mov	r3, r0
    }
 8012674:	4618      	mov	r0, r3
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	2000bf8c 	.word	0x2000bf8c

08012680 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	4618      	mov	r0, r3
 801268c:	f7ff ff2a 	bl	80124e4 <_ZN8touchgfx6WidgetC1Ev>
 8012690:	4a13      	ldr	r2, [pc, #76]	; (80126e0 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	601a      	str	r2, [r3, #0]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	3326      	adds	r3, #38	; 0x26
 801269a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801269e:	4618      	mov	r0, r3
 80126a0:	f7ff ffc8 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	3328      	adds	r3, #40	; 0x28
 80126a8:	2100      	movs	r1, #0
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7ff fcb3 	bl	8012016 <_ZN8touchgfx9colortypeC1Em>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2200      	movs	r2, #0
 80126b4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	22ff      	movs	r2, #255	; 0xff
 80126ba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2200      	movs	r2, #0
 80126c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2200      	movs	r2, #0
 80126ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	4618      	mov	r0, r3
 80126da:	3708      	adds	r7, #8
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}
 80126e0:	0802c394 	.word	0x0802c394

080126e4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af02      	add	r7, sp, #8
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80126ee:	2300      	movs	r3, #0
 80126f0:	9300      	str	r3, [sp, #0]
 80126f2:	2300      	movs	r3, #0
 80126f4:	2200      	movs	r2, #0
 80126f6:	2100      	movs	r1, #0
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f7ff fcb2 	bl	8012062 <_ZN8touchgfx4RectC1Essss>
    }
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	3708      	adds	r7, #8
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8012706:	b480      	push	{r7}
 8012708:	b083      	sub	sp, #12
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
 801270e:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	683a      	ldr	r2, [r7, #0]
 8012714:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012716:	bf00      	nop
 8012718:	370c      	adds	r7, #12
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr

08012722 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8012722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012724:	b085      	sub	sp, #20
 8012726:	af00      	add	r7, sp, #0
 8012728:	6078      	str	r0, [r7, #4]
 801272a:	460b      	mov	r3, r1
 801272c:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 801272e:	687e      	ldr	r6, [r7, #4]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	3330      	adds	r3, #48	; 0x30
 8012736:	681c      	ldr	r4, [r3, #0]
 8012738:	887d      	ldrh	r5, [r7, #2]
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f845 	bl	80127ca <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8012740:	4603      	mov	r3, r0
 8012742:	81bb      	strh	r3, [r7, #12]
 8012744:	f107 030c 	add.w	r3, r7, #12
 8012748:	4618      	mov	r0, r3
 801274a:	f7fd fe6b 	bl	8010424 <_ZNK8touchgfx9TypedText7getFontEv>
 801274e:	4603      	mov	r3, r0
 8012750:	681a      	ldr	r2, [r3, #0]
 8012752:	322c      	adds	r2, #44	; 0x2c
 8012754:	6812      	ldr	r2, [r2, #0]
 8012756:	4618      	mov	r0, r3
 8012758:	4790      	blx	r2
 801275a:	4603      	mov	r3, r0
 801275c:	1aeb      	subs	r3, r5, r3
 801275e:	b29b      	uxth	r3, r3
 8012760:	b21b      	sxth	r3, r3
 8012762:	4619      	mov	r1, r3
 8012764:	4630      	mov	r0, r6
 8012766:	47a0      	blx	r4
    }
 8012768:	bf00      	nop
 801276a:	3714      	adds	r7, #20
 801276c:	46bd      	mov	sp, r7
 801276e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012770 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	460b      	mov	r3, r1
 801277a:	807b      	strh	r3, [r7, #2]
 801277c:	4613      	mov	r3, r2
 801277e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	332c      	adds	r3, #44	; 0x2c
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801278e:	4610      	mov	r0, r2
 8012790:	4798      	blx	r3
        setBaselineY(baselineY);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	3360      	adds	r3, #96	; 0x60
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801279e:	4611      	mov	r1, r2
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	4798      	blx	r3
    }
 80127a4:	bf00      	nop
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 80127ac:	b480      	push	{r7}
 80127ae:	b083      	sub	sp, #12
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	460b      	mov	r3, r1
 80127b6:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	887a      	ldrh	r2, [r7, #2]
 80127bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 80127be:	bf00      	nop
 80127c0:	370c      	adds	r7, #12
 80127c2:	46bd      	mov	sp, r7
 80127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c8:	4770      	bx	lr

080127ca <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 80127ca:	b480      	push	{r7}
 80127cc:	b083      	sub	sp, #12
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 80127d6:	4618      	mov	r0, r3
 80127d8:	370c      	adds	r7, #12
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr
	...

080127e4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	4a05      	ldr	r2, [pc, #20]	; (8012804 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	601a      	str	r2, [r3, #0]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7ff fe87 	bl	8012508 <_ZN8touchgfx6WidgetD1Ev>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	4618      	mov	r0, r3
 80127fe:	3708      	adds	r7, #8
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	0802c394 	.word	0x0802c394

08012808 <_ZN8touchgfx8TextAreaD0Ev>:
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f7ff ffe7 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012816:	2134      	movs	r1, #52	; 0x34
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f015 fe95 	bl	8028548 <_ZdlPvj>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
        : TextArea()
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	4618      	mov	r0, r3
 8012834:	f7ff ff24 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 8012838:	4a03      	ldr	r2, [pc, #12]	; (8012848 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	601a      	str	r2, [r3, #0]
    {
    }
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	0802a814 	.word	0x0802a814

0801284c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	4a05      	ldr	r2, [pc, #20]	; (801286c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	601a      	str	r2, [r3, #0]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4618      	mov	r0, r3
 801285e:	f7ff ffc1 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	3708      	adds	r7, #8
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}
 801286c:	0802a814 	.word	0x0802a814

08012870 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7ff ffe7 	bl	801284c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801287e:	2134      	movs	r1, #52	; 0x34
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f015 fe61 	bl	8028548 <_ZdlPvj>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4618      	mov	r0, r3
 801289c:	f7ff ffc4 	bl	8012828 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 80128a0:	4a05      	ldr	r2, [pc, #20]	; (80128b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	601a      	str	r2, [r3, #0]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2200      	movs	r2, #0
 80128aa:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4618      	mov	r0, r3
 80128b0:	3708      	adds	r7, #8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	0802c4fc 	.word	0x0802c4fc

080128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	683a      	ldr	r2, [r7, #0]
 80128ca:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80128cc:	bf00      	nop
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ff fdfd 	bl	80124e4 <_ZN8touchgfx6WidgetC1Ev>
 80128ea:	4a0b      	ldr	r2, [pc, #44]	; (8012918 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	601a      	str	r2, [r3, #0]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	3326      	adds	r3, #38	; 0x26
 80128f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7ff fbde 	bl	80120ba <_ZN8touchgfx6BitmapC1Et>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	22ff      	movs	r2, #255	; 0xff
 8012902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8012906:	6839      	ldr	r1, [r7, #0]
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f008 fd6f 	bl	801b3ec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	4618      	mov	r0, r3
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	0802c5e0 	.word	0x0802c5e0

0801291c <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	683a      	ldr	r2, [r7, #0]
 801292a:	601a      	str	r2, [r3, #0]
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	4618      	mov	r0, r3
 8012930:	370c      	adds	r7, #12
 8012932:	46bd      	mov	sp, r7
 8012934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012938:	4770      	bx	lr

0801293a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 801293a:	b480      	push	{r7}
 801293c:	b083      	sub	sp, #12
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
        {
            return v;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
        }
 8012946:	4618      	mov	r0, r3
 8012948:	370c      	adds	r7, #12
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr

08012952 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8012952:	b590      	push	{r4, r7, lr}
 8012954:	b083      	sub	sp, #12
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3340      	adds	r3, #64	; 0x40
 8012960:	4618      	mov	r0, r3
 8012962:	f7ff ffea 	bl	801293a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012966:	4604      	mov	r4, r0
 8012968:	463b      	mov	r3, r7
 801296a:	4618      	mov	r0, r3
 801296c:	f7ff ffe5 	bl	801293a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012970:	4603      	mov	r3, r0
 8012972:	429c      	cmp	r4, r3
 8012974:	bf0c      	ite	eq
 8012976:	2301      	moveq	r3, #1
 8012978:	2300      	movne	r3, #0
 801297a:	b2db      	uxtb	r3, r3
 801297c:	2b00      	cmp	r3, #0
 801297e:	d106      	bne.n	801298e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	683a      	ldr	r2, [r7, #0]
 8012984:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f007 fe7c 	bl	801a684 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801298c:	e000      	b.n	8012990 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 801298e:	bf00      	nop
    }
 8012990:	370c      	adds	r7, #12
 8012992:	46bd      	mov	sp, r7
 8012994:	bd90      	pop	{r4, r7, pc}
	...

08012998 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	4a05      	ldr	r2, [pc, #20]	; (80129b8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4618      	mov	r0, r3
 80129aa:	f007 fc7f 	bl	801a2ac <_ZN8touchgfx15AbstractPainterD1Ev>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	4618      	mov	r0, r3
 80129b2:	3708      	adds	r7, #8
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	0802be78 	.word	0x0802be78

080129bc <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f7ff ffe7 	bl	8012998 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80129ca:	2114      	movs	r1, #20
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f015 fdbb 	bl	8028548 <_ZdlPvj>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4618      	mov	r0, r3
 80129d6:	3708      	adds	r7, #8
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	4a05      	ldr	r2, [pc, #20]	; (80129fc <_ZN8touchgfx5ImageD1Ev+0x20>)
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7ff fd8b 	bl	8012508 <_ZN8touchgfx6WidgetD1Ev>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	4618      	mov	r0, r3
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	0802c5e0 	.word	0x0802c5e0

08012a00 <_ZN8touchgfx5ImageD0Ev>:
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7ff ffe7 	bl	80129dc <_ZN8touchgfx5ImageD1Ev>
 8012a0e:	212c      	movs	r1, #44	; 0x2c
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f015 fd99 	bl	8028548 <_ZdlPvj>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7ff fcba 	bl	80123a4 <_ZN8touchgfx9ContainerC1Ev>
 8012a30:	4a0b      	ldr	r2, [pc, #44]	; (8012a60 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	601a      	str	r2, [r3, #0]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	22ff      	movs	r2, #255	; 0xff
 8012a42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2101      	movs	r1, #1
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7ff fc30 	bl	80122b6 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	0802a780 	.word	0x0802a780

08012a64 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	4a05      	ldr	r2, [pc, #20]	; (8012a84 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	601a      	str	r2, [r3, #0]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7ff fcab 	bl	80123d0 <_ZN8touchgfx9ContainerD1Ev>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3708      	adds	r7, #8
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	0802a780 	.word	0x0802a780

08012a88 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff ffe7 	bl	8012a64 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8012a96:	2134      	movs	r1, #52	; 0x34
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f015 fd55 	bl	8028548 <_ZdlPvj>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	78fa      	ldrb	r2, [r7, #3]
 8012ab8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	3384      	adds	r3, #132	; 0x84
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	4798      	blx	r3
    }
 8012ac8:	bf00      	nop
 8012aca:	3708      	adds	r7, #8
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 8012ad0:	b480      	push	{r7}
 8012ad2:	b083      	sub	sp, #12
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8012ade:	4618      	mov	r0, r3
 8012ae0:	370c      	adds	r7, #12
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr

08012aea <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
     *
     * @brief Sets an alpha value.
     *
     * @param newAlpha The new alpha.
     */
    void setAlpha(uint8_t newAlpha)
 8012aea:	b580      	push	{r7, lr}
 8012aec:	b082      	sub	sp, #8
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
 8012af2:	460b      	mov	r3, r1
 8012af4:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	78fa      	ldrb	r2, [r7, #3]
 8012afa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	3388      	adds	r3, #136	; 0x88
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	4798      	blx	r3
    }
 8012b0a:	bf00      	nop
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 8012b12:	b480      	push	{r7}
 8012b14:	b083      	sub	sp, #12
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8012b20:	4618      	mov	r0, r3
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	683a      	ldr	r2, [r7, #0]
 8012b3a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012b3c:	bf00      	nop
 8012b3e:	370c      	adds	r7, #12
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {}
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	bf00      	nop
 8012b52:	370c      	adds	r7, #12
 8012b54:	46bd      	mov	sp, r7
 8012b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5a:	4770      	bx	lr

08012b5c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {}
 8012b5c:	b480      	push	{r7}
 8012b5e:	b083      	sub	sp, #12
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	bf00      	nop
 8012b66:	370c      	adds	r7, #12
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr

08012b70 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
    /**
     * @fn TouchButtonTrigger::TouchButtonTrigger()
     *
     * @brief Default constructor.
     */
    TouchButtonTrigger() :
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7ff ff50 	bl	8012a20 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8012b80:	4a03      	ldr	r2, [pc, #12]	; (8012b90 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	601a      	str	r2, [r3, #0]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3708      	adds	r7, #8
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	0802a6d4 	.word	0x0802a6d4

08012b94 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
    /**
     * @fn virtual TouchButtonTrigger::~TouchButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~TouchButtonTrigger() { }
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	4a05      	ldr	r2, [pc, #20]	; (8012bb4 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	601a      	str	r2, [r3, #0]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7ff ff5d 	bl	8012a64 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4618      	mov	r0, r3
 8012bae:	3708      	adds	r7, #8
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	0802a6d4 	.word	0x0802a6d4

08012bb8 <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7ff ffe7 	bl	8012b94 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8012bc6:	2134      	movs	r1, #52	; 0x34
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f015 fcbd 	bl	8028548 <_ZdlPvj>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7ff ff73 	bl	8012ad0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8012bea:	4603      	mov	r3, r0
 8012bec:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8012bee:	6838      	ldr	r0, [r7, #0]
 8012bf0:	f7ff fa57 	bl	80120a2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	bf0c      	ite	eq
 8012bfa:	2301      	moveq	r3, #1
 8012bfc:	2300      	movne	r3, #0
 8012bfe:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8012c00:	7bbb      	ldrb	r3, [r7, #14]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d005      	beq.n	8012c12 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8012c06:	7bfb      	ldrb	r3, [r7, #15]
 8012c08:	f083 0301 	eor.w	r3, r3, #1
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d108      	bne.n	8012c24 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8012c12:	7bbb      	ldrb	r3, [r7, #14]
 8012c14:	f083 0301 	eor.w	r3, r3, #1
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d00f      	beq.n	8012c3e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8012c1e:	7bfb      	ldrb	r3, [r7, #15]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00c      	beq.n	8012c3e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	7bba      	ldrb	r2, [r7, #14]
 8012c28:	4611      	mov	r1, r2
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7ff ff3c 	bl	8012aa8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	3314      	adds	r3, #20
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4610      	mov	r0, r2
 8012c3c:	4798      	blx	r3
        }
        if (newPressedValue && action)
 8012c3e:	7bbb      	ldrb	r3, [r7, #14]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d019      	beq.n	8012c78 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d015      	beq.n	8012c78 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        {
            if (action->isValid())
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	330c      	adds	r3, #12
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4610      	mov	r0, r2
 8012c5c:	4798      	blx	r3
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d009      	beq.n	8012c78 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
            {
                action->execute(*this);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	3308      	adds	r3, #8
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	6879      	ldr	r1, [r7, #4]
 8012c74:	4610      	mov	r0, r2
 8012c76:	4798      	blx	r3
            }
        }
    }
 8012c78:	bf00      	nop
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7ff fc2a 	bl	80124e4 <_ZN8touchgfx6WidgetC1Ev>
 8012c90:	4a0d      	ldr	r2, [pc, #52]	; (8012cc8 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	601a      	str	r2, [r3, #0]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	22ff      	movs	r2, #255	; 0xff
 8012c9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	3328      	adds	r3, #40	; 0x28
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7ff f9b6 	bl	8012016 <_ZN8touchgfx9colortypeC1Em>
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	332c      	adds	r3, #44	; 0x2c
 8012cae:	2100      	movs	r1, #0
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff f9b0 	bl	8012016 <_ZN8touchgfx9colortypeC1Em>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	0802c578 	.word	0x0802c578

08012ccc <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	4a05      	ldr	r2, [pc, #20]	; (8012cec <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	601a      	str	r2, [r3, #0]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7ff fc13 	bl	8012508 <_ZN8touchgfx6WidgetD1Ev>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	0802c578 	.word	0x0802c578

08012cf0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f7ff ffe7 	bl	8012ccc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8012cfe:	2134      	movs	r1, #52	; 0x34
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f015 fc21 	bl	8028548 <_ZdlPvj>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 8012d10:	b480      	push	{r7}
 8012d12:	b083      	sub	sp, #12
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	683a      	ldr	r2, [r7, #0]
 8012d1e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012d20:	bf00      	nop
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 8012d2c:	b480      	push	{r7}
 8012d2e:	b083      	sub	sp, #12
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	683a      	ldr	r2, [r7, #0]
 8012d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8012d3c:	bf00      	nop
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	460b      	mov	r3, r1
 8012d52:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	78fa      	ldrb	r2, [r7, #3]
 8012d58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8012d5c:	bf00      	nop
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr

08012d68 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
     *
     * @brief Sets an alpha.
     *
     * @param alpha The alpha.
     */
    void setAlpha(uint8_t alpha)
 8012d68:	b480      	push	{r7}
 8012d6a:	b083      	sub	sp, #12
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	460b      	mov	r3, r1
 8012d72:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	78fa      	ldrb	r2, [r7, #3]
 8012d78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8012d7c:	bf00      	nop
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	4a05      	ldr	r2, [pc, #20]	; (8012da8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	601a      	str	r2, [r3, #0]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7ff fb3b 	bl	8012414 <_ZN8touchgfx6ScreenD1Ev>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	4618      	mov	r0, r3
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	0802a6a0 	.word	0x0802a6a0

08012dac <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff ffe7 	bl	8012d88 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8012dba:	2140      	movs	r1, #64	; 0x40
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f015 fbc3 	bl	8028548 <_ZdlPvj>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	4a8a      	ldr	r2, [pc, #552]	; (8013000 <_ZN12MainViewBaseD1Ev+0x234>)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	601a      	str	r2, [r3, #0]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 8012de0:	4618      	mov	r0, r3
 8012de2:	f001 ff97 	bl	8014d14 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8012dec:	4618      	mov	r0, r3
 8012dee:	f001 fde5 	bl	80149bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f001 ffad 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7ff fced 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8012e10:	4618      	mov	r0, r3
 8012e12:	f001 ffa1 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7ff fce1 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f001 ff95 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8012e34:	4618      	mov	r0, r3
 8012e36:	f001 ff8f 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8012e40:	4618      	mov	r0, r3
 8012e42:	f001 ff89 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7ff fcc9 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f001 ff7d 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8012e64:	4618      	mov	r0, r3
 8012e66:	f005 fda9 	bl	80189bc <_ZN8touchgfx13ImageProgressD1Ev>
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8012e70:	4618      	mov	r0, r3
 8012e72:	f001 ff71 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f001 ffaf 	bl	8014de0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f001 ff87 	bl	8014d9c <_ZN8touchgfx4LineD1Ev>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8012e94:	4618      	mov	r0, r3
 8012e96:	f001 ffa3 	bl	8014de0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f001 ff7b 	bl	8014d9c <_ZN8touchgfx4LineD1Ev>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8012eac:	4618      	mov	r0, r3
 8012eae:	f005 fc85 	bl	80187bc <_ZN8touchgfx11BoxProgressD1Ev>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff fc93 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f001 ff47 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f001 ff41 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7ff fc81 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7ff fc7b 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f001 ff2f 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012f00:	4618      	mov	r0, r3
 8012f02:	f001 ff29 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7ff fc69 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff fc63 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012f24:	4618      	mov	r0, r3
 8012f26:	f001 ff5b 	bl	8014de0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8012f30:	4618      	mov	r0, r3
 8012f32:	f001 ff33 	bl	8014d9c <_ZN8touchgfx4LineD1Ev>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f001 ff0b 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f001 ff05 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012f54:	4618      	mov	r0, r3
 8012f56:	f001 feff 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012f60:	4618      	mov	r0, r3
 8012f62:	f001 fef9 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f001 fef3 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f001 feed 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012f84:	4618      	mov	r0, r3
 8012f86:	f001 fee7 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012f90:	4618      	mov	r0, r3
 8012f92:	f001 fee1 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7ff fd1d 	bl	80129dc <_ZN8touchgfx5ImageD1Ev>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f001 fed5 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f001 fecf 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7ff fc0f 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	33d8      	adds	r3, #216	; 0xd8
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7ff fc0a 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	33a4      	adds	r3, #164	; 0xa4
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7ff fc05 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	3370      	adds	r3, #112	; 0x70
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7ff fc00 	bl	80127e4 <_ZN8touchgfx8TextAreaD1Ev>
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	3340      	adds	r3, #64	; 0x40
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7ff faf3 	bl	80125d4 <_ZN8touchgfx3BoxD1Ev>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7ff fec9 	bl	8012d88 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	0802a5c0 	.word	0x0802a5c0

08013004 <_ZN12MainViewBaseD0Ev>:
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7ff fedd 	bl	8012dcc <_ZN12MainViewBaseD1Ev>
 8013012:	f642 0144 	movw	r1, #10308	; 0x2844
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f015 fa96 	bl	8028548 <_ZdlPvj>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	4618      	mov	r0, r3
 8013020:	3708      	adds	r7, #8
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}

08013026 <_ZN12MainViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8013026:	b580      	push	{r7, lr}
 8013028:	b082      	sub	sp, #8
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801302e:	f009 fa8b 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 8013032:	4603      	mov	r3, r0
    }
 8013034:	4618      	mov	r0, r3
 8013036:	3708      	adds	r7, #8
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}

0801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 801303c:	b590      	push	{r4, r7, lr}
 801303e:	b083      	sub	sp, #12
 8013040:	af00      	add	r7, sp, #0
 8013042:	4603      	mov	r3, r0
 8013044:	71fb      	strb	r3, [r7, #7]
 8013046:	460b      	mov	r3, r1
 8013048:	71bb      	strb	r3, [r7, #6]
 801304a:	4613      	mov	r3, r2
 801304c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 801304e:	f7fd fe83 	bl	8010d58 <_ZN8touchgfx3HAL11getInstanceEv>
 8013052:	4603      	mov	r3, r0
 8013054:	2b00      	cmp	r3, #0
 8013056:	d105      	bne.n	8013064 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8013058:	4b0a      	ldr	r3, [pc, #40]	; (8013084 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 801305a:	4a0b      	ldr	r2, [pc, #44]	; (8013088 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 801305c:	2138      	movs	r1, #56	; 0x38
 801305e:	480b      	ldr	r0, [pc, #44]	; (801308c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8013060:	f015 faa0 	bl	80285a4 <__assert_func>
 8013064:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8013066:	f7fd fe83 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801306a:	6803      	ldr	r3, [r0, #0]
 801306c:	332c      	adds	r3, #44	; 0x2c
 801306e:	681c      	ldr	r4, [r3, #0]
 8013070:	797b      	ldrb	r3, [r7, #5]
 8013072:	79ba      	ldrb	r2, [r7, #6]
 8013074:	79f9      	ldrb	r1, [r7, #7]
 8013076:	47a0      	blx	r4
 8013078:	4603      	mov	r3, r0
    }
 801307a:	4618      	mov	r0, r3
 801307c:	370c      	adds	r7, #12
 801307e:	46bd      	mov	sp, r7
 8013080:	bd90      	pop	{r4, r7, pc}
 8013082:	bf00      	nop
 8013084:	08029eb8 	.word	0x08029eb8
 8013088:	08029efc 	.word	0x08029efc
 801308c:	08029f58 	.word	0x08029f58

08013090 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase() :
 8013090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013094:	b0c2      	sub	sp, #264	; 0x108
 8013096:	af02      	add	r7, sp, #8
 8013098:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4618      	mov	r0, r3
 801309e:	f001 fcb5 	bl	8014a0c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 80130a2:	4ada      	ldr	r2, [pc, #872]	; (801340c <_ZN12MainViewBaseC1Ev+0x37c>)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	601a      	str	r2, [r3, #0]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	3340      	adds	r3, #64	; 0x40
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7ff fa71 	bl	8012594 <_ZN8touchgfx3BoxC1Ev>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	3370      	adds	r3, #112	; 0x70
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7ff fae2 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	33a4      	adds	r3, #164	; 0xa4
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7ff fadd 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	33d8      	adds	r3, #216	; 0xd8
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7ff fad8 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7ff fad2 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7ff fbd4 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7ff fbce 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80130fa:	f107 030c 	add.w	r3, r7, #12
 80130fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013102:	4618      	mov	r0, r3
 8013104:	f7fe ffd9 	bl	80120ba <_ZN8touchgfx6BitmapC1Et>
 8013108:	f107 030c 	add.w	r3, r7, #12
 801310c:	4619      	mov	r1, r3
 801310e:	4620      	mov	r0, r4
 8013110:	f7ff fbe2 	bl	80128d8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801311a:	4618      	mov	r0, r3
 801311c:	f7ff fbb8 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013126:	4618      	mov	r0, r3
 8013128:	f7ff fbb2 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013132:	4618      	mov	r0, r3
 8013134:	f7ff fbac 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801313e:	4618      	mov	r0, r3
 8013140:	f7ff fba6 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801314a:	4618      	mov	r0, r3
 801314c:	f7ff fba0 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013156:	4618      	mov	r0, r3
 8013158:	f7ff fb9a 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8013162:	4618      	mov	r0, r3
 8013164:	f7ff fb94 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801316e:	4618      	mov	r0, r3
 8013170:	f7ff fb8e 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801317a:	4618      	mov	r0, r3
 801317c:	f007 fa62 	bl	801a644 <_ZN8touchgfx4LineC1Ev>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8013186:	f107 0310 	add.w	r3, r7, #16
 801318a:	2100      	movs	r1, #0
 801318c:	4618      	mov	r0, r3
 801318e:	f7fe ff42 	bl	8012016 <_ZN8touchgfx9colortypeC1Em>
 8013192:	22ff      	movs	r2, #255	; 0xff
 8013194:	6939      	ldr	r1, [r7, #16]
 8013196:	4620      	mov	r0, r4
 8013198:	f007 f846 	bl	801a228 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7ff fa6c 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7ff fa66 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7ff fb68 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7ff fb62 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7ff fa54 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80131de:	4618      	mov	r0, r3
 80131e0:	f7ff fa4e 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7ff fb50 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7ff fb4a 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013202:	4618      	mov	r0, r3
 8013204:	f7ff fa3c 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801320e:	4618      	mov	r0, r3
 8013210:	f005 fae8 	bl	80187e4 <_ZN8touchgfx11BoxProgressC1Ev>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 801321a:	4618      	mov	r0, r3
 801321c:	f007 fa12 	bl	801a644 <_ZN8touchgfx4LineC1Ev>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8013226:	f107 0314 	add.w	r3, r7, #20
 801322a:	2100      	movs	r1, #0
 801322c:	4618      	mov	r0, r3
 801322e:	f7fe fef2 	bl	8012016 <_ZN8touchgfx9colortypeC1Em>
 8013232:	22ff      	movs	r2, #255	; 0xff
 8013234:	6979      	ldr	r1, [r7, #20]
 8013236:	4620      	mov	r0, r4
 8013238:	f006 fff6 	bl	801a228 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013242:	4618      	mov	r0, r3
 8013244:	f007 f9fe 	bl	801a644 <_ZN8touchgfx4LineC1Ev>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 801324e:	f107 0318 	add.w	r3, r7, #24
 8013252:	2100      	movs	r1, #0
 8013254:	4618      	mov	r0, r3
 8013256:	f7fe fede 	bl	8012016 <_ZN8touchgfx9colortypeC1Em>
 801325a:	22ff      	movs	r2, #255	; 0xff
 801325c:	69b9      	ldr	r1, [r7, #24]
 801325e:	4620      	mov	r0, r4
 8013260:	f006 ffe2 	bl	801a228 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 801326a:	4618      	mov	r0, r3
 801326c:	f7ff fb10 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013276:	4618      	mov	r0, r3
 8013278:	f005 fbca 	bl	8018a10 <_ZN8touchgfx13ImageProgressC1Ev>
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8013282:	4618      	mov	r0, r3
 8013284:	f7ff fb04 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801328e:	4618      	mov	r0, r3
 8013290:	f7ff f9f6 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801329a:	4618      	mov	r0, r3
 801329c:	f7ff faf8 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7ff faf2 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7ff faec 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80132be:	4618      	mov	r0, r3
 80132c0:	f7ff f9de 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ff fae0 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7ff f9d2 	bl	8012680 <_ZN8touchgfx8TextAreaC1Ev>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7ff fad4 	bl	8012890 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80132ee:	4618      	mov	r0, r3
 80132f0:	f001 fba2 	bl	8014a38 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f603 4014 	addw	r0, r3, #3092	; 0xc14
 80132fa:	4b45      	ldr	r3, [pc, #276]	; (8013410 <_ZN12MainViewBaseC1Ev+0x380>)
 80132fc:	61fb      	str	r3, [r7, #28]
 80132fe:	2300      	movs	r3, #0
 8013300:	623b      	str	r3, [r7, #32]
 8013302:	f107 031c 	add.w	r3, r7, #28
 8013306:	cb0c      	ldmia	r3, {r2, r3}
 8013308:	6879      	ldr	r1, [r7, #4]
 801330a:	f001 fbdf 	bl	8014acc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8013314:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8013318:	4618      	mov	r0, r3
 801331a:	f008 f8d5 	bl	801b4c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013324:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013328:	9300      	str	r3, [sp, #0]
 801332a:	f44f 7348 	mov.w	r3, #800	; 0x320
 801332e:	2200      	movs	r2, #0
 8013330:	2100      	movs	r1, #0
 8013332:	f7fd fcc9 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801333c:	2200      	movs	r2, #0
 801333e:	2100      	movs	r1, #0
 8013340:	2000      	movs	r0, #0
 8013342:	f7ff fe7b 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013346:	4603      	mov	r3, r0
 8013348:	4619      	mov	r1, r3
 801334a:	4620      	mov	r0, r4
 801334c:	f7ff f964 	bl	8012618 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(224, 218);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	3370      	adds	r3, #112	; 0x70
 8013354:	22da      	movs	r2, #218	; 0xda
 8013356:	21e0      	movs	r1, #224	; 0xe0
 8013358:	4618      	mov	r0, r3
 801335a:	f7fe ff2b 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013364:	2200      	movs	r2, #0
 8013366:	21dc      	movs	r1, #220	; 0xdc
 8013368:	20ff      	movs	r0, #255	; 0xff
 801336a:	f7ff fe67 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801336e:	4603      	mov	r3, r0
 8013370:	4619      	mov	r1, r3
 8013372:	4620      	mov	r0, r4
 8013374:	f7ff f9c7 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	3370      	adds	r3, #112	; 0x70
 801337c:	2100      	movs	r1, #0
 801337e:	4618      	mov	r0, r3
 8013380:	f7ff fa14 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801338a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801338e:	211a      	movs	r1, #26
 8013390:	4618      	mov	r0, r3
 8013392:	f7ff f94f 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013396:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8013398:	4620      	mov	r0, r4
 801339a:	f007 fcfb 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(338, 126);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	33a4      	adds	r3, #164	; 0xa4
 80133a2:	227e      	movs	r2, #126	; 0x7e
 80133a4:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fe ff03 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80133b4:	2200      	movs	r2, #0
 80133b6:	21dc      	movs	r1, #220	; 0xdc
 80133b8:	20ff      	movs	r0, #255	; 0xff
 80133ba:	f7ff fe3f 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133be:	4603      	mov	r3, r0
 80133c0:	4619      	mov	r1, r3
 80133c2:	4620      	mov	r0, r4
 80133c4:	f7ff f99f 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	33a4      	adds	r3, #164	; 0xa4
 80133cc:	2100      	movs	r1, #0
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7ff f9ec 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80133da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80133de:	2119      	movs	r1, #25
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7ff f927 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80133e6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80133e8:	4620      	mov	r0, r4
 80133ea:	f007 fcd3 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(216, 136);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	33d8      	adds	r3, #216	; 0xd8
 80133f2:	2288      	movs	r2, #136	; 0x88
 80133f4:	21d8      	movs	r1, #216	; 0xd8
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fe fedc 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013402:	2200      	movs	r2, #0
 8013404:	21dc      	movs	r1, #220	; 0xdc
 8013406:	20ff      	movs	r0, #255	; 0xff
 8013408:	e004      	b.n	8013414 <_ZN12MainViewBaseC1Ev+0x384>
 801340a:	bf00      	nop
 801340c:	0802a5c0 	.word	0x0802a5c0
 8013410:	08014991 	.word	0x08014991
 8013414:	f7ff fe12 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013418:	4603      	mov	r3, r0
 801341a:	4619      	mov	r1, r3
 801341c:	4620      	mov	r0, r4
 801341e:	f7ff f972 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	33d8      	adds	r3, #216	; 0xd8
 8013426:	2100      	movs	r1, #0
 8013428:	4618      	mov	r0, r3
 801342a:	f7ff f9bf 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013438:	2113      	movs	r1, #19
 801343a:	4618      	mov	r0, r3
 801343c:	f7ff f8fa 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013440:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013442:	4620      	mov	r0, r4
 8013444:	f007 fca6 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(116, 126);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801344e:	227e      	movs	r2, #126	; 0x7e
 8013450:	2174      	movs	r1, #116	; 0x74
 8013452:	4618      	mov	r0, r3
 8013454:	f7fe feae 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801345e:	2200      	movs	r2, #0
 8013460:	21dc      	movs	r1, #220	; 0xdc
 8013462:	20ff      	movs	r0, #255	; 0xff
 8013464:	f7ff fdea 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013468:	4603      	mov	r3, r0
 801346a:	4619      	mov	r1, r3
 801346c:	4620      	mov	r0, r4
 801346e:	f7ff f94a 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013478:	2100      	movs	r1, #0
 801347a:	4618      	mov	r0, r3
 801347c:	f7ff f996 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8013486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801348a:	2112      	movs	r1, #18
 801348c:	4618      	mov	r0, r3
 801348e:	f7ff f8d1 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013492:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8013494:	4620      	mov	r0, r4
 8013496:	f007 fc7d 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 80134a0:	233e      	movs	r3, #62	; 0x3e
 80134a2:	9300      	str	r3, [sp, #0]
 80134a4:	2372      	movs	r3, #114	; 0x72
 80134a6:	224d      	movs	r2, #77	; 0x4d
 80134a8:	21bb      	movs	r1, #187	; 0xbb
 80134aa:	f7fd fc0d 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80134b4:	22ff      	movs	r2, #255	; 0xff
 80134b6:	21ff      	movs	r1, #255	; 0xff
 80134b8:	20ff      	movs	r0, #255	; 0xff
 80134ba:	f7ff fdbf 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80134be:	4603      	mov	r3, r0
 80134c0:	4619      	mov	r1, r3
 80134c2:	4620      	mov	r0, r4
 80134c4:	f7ff f91f 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80134ce:	2100      	movs	r1, #0
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7ff f96b 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 80134dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80134e0:	2103      	movs	r1, #3
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7ff f8a6 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80134e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff f8b1 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 80134f2:	4603      	mov	r3, r0
 80134f4:	4ae1      	ldr	r2, [pc, #900]	; (801387c <_ZN12MainViewBaseC1Ev+0x7ec>)
 80134f6:	2105      	movs	r1, #5
 80134f8:	4620      	mov	r0, r4
 80134fa:	f00b f8bb 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 801350a:	4619      	mov	r1, r3
 801350c:	4610      	mov	r0, r2
 801350e:	f7ff f9d5 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801351c:	2102      	movs	r1, #2
 801351e:	4618      	mov	r0, r3
 8013520:	f7ff f888 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013524:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8013526:	4620      	mov	r0, r4
 8013528:	f007 fc34 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(102, 85, 71, 41);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8013532:	2329      	movs	r3, #41	; 0x29
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	2347      	movs	r3, #71	; 0x47
 8013538:	2255      	movs	r2, #85	; 0x55
 801353a:	2166      	movs	r1, #102	; 0x66
 801353c:	f7fd fbc4 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8013546:	22ff      	movs	r2, #255	; 0xff
 8013548:	21ff      	movs	r1, #255	; 0xff
 801354a:	20ff      	movs	r0, #255	; 0xff
 801354c:	f7ff fd76 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013550:	4603      	mov	r3, r0
 8013552:	4619      	mov	r1, r3
 8013554:	4620      	mov	r0, r4
 8013556:	f7ff f8d6 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013560:	2100      	movs	r1, #0
 8013562:	4618      	mov	r0, r3
 8013564:	f7ff f922 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f603 347a 	addw	r4, r3, #2938	; 0xb7a
 801356e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013572:	2101      	movs	r1, #1
 8013574:	4618      	mov	r0, r3
 8013576:	f7ff f85d 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 801357a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801357e:	4618      	mov	r0, r3
 8013580:	f7ff f868 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8013584:	4603      	mov	r3, r0
 8013586:	4abd      	ldr	r2, [pc, #756]	; (801387c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013588:	2105      	movs	r1, #5
 801358a:	4620      	mov	r0, r4
 801358c:	f00b f872 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f603 337a 	addw	r3, r3, #2938	; 0xb7a
 801359c:	4619      	mov	r1, r3
 801359e:	4610      	mov	r0, r2
 80135a0:	f7ff f98c 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80135aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80135ae:	2100      	movs	r1, #0
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff f83f 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80135b6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80135ba:	4620      	mov	r0, r4
 80135bc:	f007 fbea 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80135c6:	223f      	movs	r2, #63	; 0x3f
 80135c8:	21b3      	movs	r1, #179	; 0xb3
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7fe fdf2 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80135d6:	2100      	movs	r1, #0
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fe fe5c 	bl	8012296 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 80135e4:	230e      	movs	r3, #14
 80135e6:	9300      	str	r3, [sp, #0]
 80135e8:	2312      	movs	r3, #18
 80135ea:	223f      	movs	r2, #63	; 0x3f
 80135ec:	2136      	movs	r1, #54	; 0x36
 80135ee:	f7fd fb6b 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 80135f8:	22ff      	movs	r2, #255	; 0xff
 80135fa:	21ff      	movs	r1, #255	; 0xff
 80135fc:	20ff      	movs	r0, #255	; 0xff
 80135fe:	f7ff fd1d 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013602:	4603      	mov	r3, r0
 8013604:	4619      	mov	r1, r3
 8013606:	4620      	mov	r0, r4
 8013608:	f7ff f87d 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8013612:	2100      	movs	r1, #0
 8013614:	4618      	mov	r0, r3
 8013616:	f7ff f8c9 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 8013620:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013624:	2126      	movs	r1, #38	; 0x26
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff f804 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 801362c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013630:	4618      	mov	r0, r3
 8013632:	f7ff f80f 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8013636:	4603      	mov	r3, r0
 8013638:	4a90      	ldr	r2, [pc, #576]	; (801387c <_ZN12MainViewBaseC1Ev+0x7ec>)
 801363a:	2102      	movs	r1, #2
 801363c:	4620      	mov	r0, r4
 801363e:	f00b f819 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 801364e:	4619      	mov	r1, r3
 8013650:	4610      	mov	r0, r2
 8013652:	f7ff f933 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 801365c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013660:	2104      	movs	r1, #4
 8013662:	4618      	mov	r0, r3
 8013664:	f7fe ffe6 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013668:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 801366c:	4620      	mov	r0, r4
 801366e:	f007 fb91 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8013678:	230e      	movs	r3, #14
 801367a:	9300      	str	r3, [sp, #0]
 801367c:	2312      	movs	r3, #18
 801367e:	223f      	movs	r2, #63	; 0x3f
 8013680:	2173      	movs	r1, #115	; 0x73
 8013682:	f7fd fb21 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f503 7405 	add.w	r4, r3, #532	; 0x214
 801368c:	22ff      	movs	r2, #255	; 0xff
 801368e:	21ff      	movs	r1, #255	; 0xff
 8013690:	20ff      	movs	r0, #255	; 0xff
 8013692:	f7ff fcd3 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013696:	4603      	mov	r3, r0
 8013698:	4619      	mov	r1, r3
 801369a:	4620      	mov	r0, r4
 801369c:	f7ff f833 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80136a6:	2100      	movs	r1, #0
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff f87f 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 80136b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80136b8:	2127      	movs	r1, #39	; 0x27
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7fe ffba 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80136c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7fe ffc5 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 80136ca:	4603      	mov	r3, r0
 80136cc:	4a6b      	ldr	r2, [pc, #428]	; (801387c <_ZN12MainViewBaseC1Ev+0x7ec>)
 80136ce:	2102      	movs	r1, #2
 80136d0:	4620      	mov	r0, r4
 80136d2:	f00a ffcf 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 80136e2:	4619      	mov	r1, r3
 80136e4:	4610      	mov	r0, r2
 80136e6:	f7ff f8e9 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80136f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136f4:	2105      	movs	r1, #5
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fe ff9c 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80136fc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8013700:	4620      	mov	r0, r4
 8013702:	f007 fb47 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 801370c:	230e      	movs	r3, #14
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	2312      	movs	r3, #18
 8013712:	223e      	movs	r2, #62	; 0x3e
 8013714:	21ad      	movs	r1, #173	; 0xad
 8013716:	f7fd fad7 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013720:	22ff      	movs	r2, #255	; 0xff
 8013722:	21ff      	movs	r1, #255	; 0xff
 8013724:	20ff      	movs	r0, #255	; 0xff
 8013726:	f7ff fc89 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801372a:	4603      	mov	r3, r0
 801372c:	4619      	mov	r1, r3
 801372e:	4620      	mov	r0, r4
 8013730:	f7fe ffe9 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801373a:	2100      	movs	r1, #0
 801373c:	4618      	mov	r0, r3
 801373e:	f7ff f835 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 8013748:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801374c:	2128      	movs	r1, #40	; 0x28
 801374e:	4618      	mov	r0, r3
 8013750:	f7fe ff70 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013754:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013758:	4618      	mov	r0, r3
 801375a:	f7fe ff7b 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 801375e:	4603      	mov	r3, r0
 8013760:	4a46      	ldr	r2, [pc, #280]	; (801387c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013762:	2102      	movs	r1, #2
 8013764:	4620      	mov	r0, r4
 8013766:	f00a ff85 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8013776:	4619      	mov	r1, r3
 8013778:	4610      	mov	r0, r2
 801377a:	f7ff f89f 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013784:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013788:	2106      	movs	r1, #6
 801378a:	4618      	mov	r0, r3
 801378c:	f7fe ff52 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013790:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8013794:	4620      	mov	r0, r4
 8013796:	f007 fafd 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f503 7021 	add.w	r0, r3, #644	; 0x284
 80137a0:	230e      	movs	r3, #14
 80137a2:	9300      	str	r3, [sp, #0]
 80137a4:	2312      	movs	r3, #18
 80137a6:	223e      	movs	r2, #62	; 0x3e
 80137a8:	21e7      	movs	r1, #231	; 0xe7
 80137aa:	f7fd fa8d 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f503 7421 	add.w	r4, r3, #644	; 0x284
 80137b4:	22ff      	movs	r2, #255	; 0xff
 80137b6:	21ff      	movs	r1, #255	; 0xff
 80137b8:	20ff      	movs	r0, #255	; 0xff
 80137ba:	f7ff fc3f 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80137be:	4603      	mov	r3, r0
 80137c0:	4619      	mov	r1, r3
 80137c2:	4620      	mov	r0, r4
 80137c4:	f7fe ff9f 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80137ce:	2100      	movs	r1, #0
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fe ffeb 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 80137dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80137e0:	2129      	movs	r1, #41	; 0x29
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fe ff26 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80137e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fe ff31 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 80137f2:	4603      	mov	r3, r0
 80137f4:	4a21      	ldr	r2, [pc, #132]	; (801387c <_ZN12MainViewBaseC1Ev+0x7ec>)
 80137f6:	2102      	movs	r1, #2
 80137f8:	4620      	mov	r0, r4
 80137fa:	f00a ff3b 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 801380a:	4619      	mov	r1, r3
 801380c:	4610      	mov	r0, r2
 801380e:	f7ff f855 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013818:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801381c:	2107      	movs	r1, #7
 801381e:	4618      	mov	r0, r3
 8013820:	f7fe ff08 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013824:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8013828:	4620      	mov	r0, r4
 801382a:	f007 fab3 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8013834:	230e      	movs	r3, #14
 8013836:	9300      	str	r3, [sp, #0]
 8013838:	2312      	movs	r3, #18
 801383a:	223f      	movs	r2, #63	; 0x3f
 801383c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8013840:	f7fd fa42 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 801384a:	22ff      	movs	r2, #255	; 0xff
 801384c:	21ff      	movs	r1, #255	; 0xff
 801384e:	20ff      	movs	r0, #255	; 0xff
 8013850:	f7ff fbf4 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013854:	4603      	mov	r3, r0
 8013856:	4619      	mov	r1, r3
 8013858:	4620      	mov	r0, r4
 801385a:	f7fe ff54 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013864:	2100      	movs	r1, #0
 8013866:	4618      	mov	r0, r3
 8013868:	f7fe ffa0 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f603 3494 	addw	r4, r3, #2964	; 0xb94
 8013872:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013876:	212a      	movs	r1, #42	; 0x2a
 8013878:	4618      	mov	r0, r3
 801387a:	e001      	b.n	8013880 <_ZN12MainViewBaseC1Ev+0x7f0>
 801387c:	08029f98 	.word	0x08029f98
 8013880:	f7fe fed8 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013884:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013888:	4618      	mov	r0, r3
 801388a:	f7fe fee3 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 801388e:	4603      	mov	r3, r0
 8013890:	4ae2      	ldr	r2, [pc, #904]	; (8013c1c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013892:	2102      	movs	r1, #2
 8013894:	4620      	mov	r0, r4
 8013896:	f00a feed 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80138a6:	4619      	mov	r1, r3
 80138a8:	4610      	mov	r0, r2
 80138aa:	f7ff f807 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80138b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80138b8:	2108      	movs	r1, #8
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fe feba 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80138c0:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 80138c4:	4620      	mov	r0, r4
 80138c6:	f007 fa65 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80138d0:	230e      	movs	r3, #14
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	2312      	movs	r3, #18
 80138d6:	223f      	movs	r2, #63	; 0x3f
 80138d8:	f240 115d 	movw	r1, #349	; 0x15d
 80138dc:	f7fd f9f4 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 80138e6:	22ff      	movs	r2, #255	; 0xff
 80138e8:	21ff      	movs	r1, #255	; 0xff
 80138ea:	20ff      	movs	r0, #255	; 0xff
 80138ec:	f7ff fba6 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80138f0:	4603      	mov	r3, r0
 80138f2:	4619      	mov	r1, r3
 80138f4:	4620      	mov	r0, r4
 80138f6:	f7fe ff06 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013900:	2100      	movs	r1, #0
 8013902:	4618      	mov	r0, r3
 8013904:	f7fe ff52 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f603 3498 	addw	r4, r3, #2968	; 0xb98
 801390e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013912:	212b      	movs	r1, #43	; 0x2b
 8013914:	4618      	mov	r0, r3
 8013916:	f7fe fe8d 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 801391a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801391e:	4618      	mov	r0, r3
 8013920:	f7fe fe98 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8013924:	4603      	mov	r3, r0
 8013926:	4abd      	ldr	r2, [pc, #756]	; (8013c1c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013928:	2102      	movs	r1, #2
 801392a:	4620      	mov	r0, r4
 801392c:	f00a fea2 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 801393c:	4619      	mov	r1, r3
 801393e:	4610      	mov	r0, r2
 8013940:	f7fe ffbc 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 801394a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801394e:	2109      	movs	r1, #9
 8013950:	4618      	mov	r0, r3
 8013952:	f7fe fe6f 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013956:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 801395a:	4620      	mov	r0, r4
 801395c:	f007 fa1a 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8013966:	230f      	movs	r3, #15
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	2312      	movs	r3, #18
 801396c:	223e      	movs	r2, #62	; 0x3e
 801396e:	f240 119b 	movw	r1, #411	; 0x19b
 8013972:	f7fd f9a9 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 801397c:	22ff      	movs	r2, #255	; 0xff
 801397e:	21ff      	movs	r1, #255	; 0xff
 8013980:	20ff      	movs	r0, #255	; 0xff
 8013982:	f7ff fb5b 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013986:	4603      	mov	r3, r0
 8013988:	4619      	mov	r1, r3
 801398a:	4620      	mov	r0, r4
 801398c:	f7fe febb 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8013996:	2100      	movs	r1, #0
 8013998:	4618      	mov	r0, r3
 801399a:	f7fe ff07 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f603 349c 	addw	r4, r3, #2972	; 0xb9c
 80139a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80139a8:	212c      	movs	r1, #44	; 0x2c
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fe fe42 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80139b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7fe fe4d 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 80139ba:	4603      	mov	r3, r0
 80139bc:	4a97      	ldr	r2, [pc, #604]	; (8013c1c <_ZN12MainViewBaseC1Ev+0xb8c>)
 80139be:	2102      	movs	r1, #2
 80139c0:	4620      	mov	r0, r4
 80139c2:	f00a fe57 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 80139d2:	4619      	mov	r1, r3
 80139d4:	4610      	mov	r0, r2
 80139d6:	f7fe ff71 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 80139e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80139e4:	210a      	movs	r1, #10
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7fe fe24 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80139ec:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80139f0:	4620      	mov	r0, r4
 80139f2:	f007 f9cf 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80139fc:	230e      	movs	r3, #14
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	2312      	movs	r3, #18
 8013a02:	223e      	movs	r2, #62	; 0x3e
 8013a04:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8013a08:	f7fd f95e 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8013a12:	22ff      	movs	r2, #255	; 0xff
 8013a14:	21ff      	movs	r1, #255	; 0xff
 8013a16:	20ff      	movs	r0, #255	; 0xff
 8013a18:	f7ff fb10 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	4619      	mov	r1, r3
 8013a20:	4620      	mov	r0, r4
 8013a22:	f7fe fe70 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7fe febc 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 8013a3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013a3e:	212d      	movs	r1, #45	; 0x2d
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7fe fdf7 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013a46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7fe fe02 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8013a50:	4603      	mov	r3, r0
 8013a52:	4a72      	ldr	r2, [pc, #456]	; (8013c1c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013a54:	2102      	movs	r1, #2
 8013a56:	4620      	mov	r0, r4
 8013a58:	f00a fe0c 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8013a68:	4619      	mov	r1, r3
 8013a6a:	4610      	mov	r0, r2
 8013a6c:	f7fe ff26 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8013a76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013a7a:	210b      	movs	r1, #11
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fe fdd9 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013a82:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8013a86:	4620      	mov	r0, r4
 8013a88:	f007 f984 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8013a92:	2305      	movs	r3, #5
 8013a94:	9300      	str	r3, [sp, #0]
 8013a96:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8013a9a:	223a      	movs	r2, #58	; 0x3a
 8013a9c:	f06f 0101 	mvn.w	r1, #1
 8013aa0:	f7fd f912 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8013aaa:	22ff      	movs	r2, #255	; 0xff
 8013aac:	21ff      	movs	r1, #255	; 0xff
 8013aae:	20ff      	movs	r0, #255	; 0xff
 8013ab0:	f7ff fac4 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	22ff      	movs	r2, #255	; 0xff
 8013ab8:	4619      	mov	r1, r3
 8013aba:	4620      	mov	r0, r4
 8013abc:	f006 fb99 	bl	801a1f2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8013acc:	4619      	mov	r1, r3
 8013ace:	4610      	mov	r0, r2
 8013ad0:	f006 fbf8 	bl	801a2c4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013ada:	2203      	movs	r2, #3
 8013adc:	2100      	movs	r1, #0
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f001 f814 	bl	8014b0c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013aea:	2203      	movs	r2, #3
 8013aec:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8013af0:	4618      	mov	r0, r3
 8013af2:	f001 f831 	bl	8014b58 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013afc:	2102      	movs	r1, #2
 8013afe:	4618      	mov	r0, r3
 8013b00:	f001 f850 	bl	8014ba4 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013b0a:	2101      	movs	r1, #1
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f006 fef3 	bl	801a8f8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(43, 126);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013b18:	227e      	movs	r2, #126	; 0x7e
 8013b1a:	212b      	movs	r1, #43	; 0x2b
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7fe fb49 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8013b28:	2200      	movs	r2, #0
 8013b2a:	21dc      	movs	r1, #220	; 0xdc
 8013b2c:	20ff      	movs	r0, #255	; 0xff
 8013b2e:	f7ff fa85 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b32:	4603      	mov	r3, r0
 8013b34:	4619      	mov	r1, r3
 8013b36:	4620      	mov	r0, r4
 8013b38:	f7fe fde5 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013b42:	2100      	movs	r1, #0
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fe fe31 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8013b50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013b54:	2110      	movs	r1, #16
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7fe fd6c 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013b5c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8013b60:	4620      	mov	r0, r4
 8013b62:	f007 f917 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(42, 193);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8013b6c:	22c1      	movs	r2, #193	; 0xc1
 8013b6e:	212a      	movs	r1, #42	; 0x2a
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7fe fb1f 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	21dc      	movs	r1, #220	; 0xdc
 8013b80:	20ff      	movs	r0, #255	; 0xff
 8013b82:	f7ff fa5b 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b86:	4603      	mov	r3, r0
 8013b88:	4619      	mov	r1, r3
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	f7fe fdbb 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8013b96:	2100      	movs	r1, #0
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fe fe07 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8013ba4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013ba8:	2111      	movs	r1, #17
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fe fd42 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013bb0:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f007 f8ed 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 85, 60, 42);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 8013bc0:	232a      	movs	r3, #42	; 0x2a
 8013bc2:	9300      	str	r3, [sp, #0]
 8013bc4:	233c      	movs	r3, #60	; 0x3c
 8013bc6:	2255      	movs	r2, #85	; 0x55
 8013bc8:	2119      	movs	r1, #25
 8013bca:	f7fd f87d 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8013bd4:	22ff      	movs	r2, #255	; 0xff
 8013bd6:	21ff      	movs	r1, #255	; 0xff
 8013bd8:	20ff      	movs	r0, #255	; 0xff
 8013bda:	f7ff fa2f 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013bde:	4603      	mov	r3, r0
 8013be0:	4619      	mov	r1, r3
 8013be2:	4620      	mov	r0, r4
 8013be4:	f7fe fd8f 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013bee:	2100      	movs	r1, #0
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fe fddb 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f603 34a4 	addw	r4, r3, #2980	; 0xba4
 8013bfc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013c00:	210d      	movs	r1, #13
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7fe fd16 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013c08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7fe fd21 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8013c12:	4603      	mov	r3, r0
 8013c14:	4a01      	ldr	r2, [pc, #4]	; (8013c1c <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013c16:	2105      	movs	r1, #5
 8013c18:	4620      	mov	r0, r4
 8013c1a:	e001      	b.n	8013c20 <_ZN12MainViewBaseC1Ev+0xb90>
 8013c1c:	08029f98 	.word	0x08029f98
 8013c20:	f00a fd28 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8013c30:	4619      	mov	r1, r3
 8013c32:	4610      	mov	r0, r2
 8013c34:	f7fe fe42 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8013c3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013c42:	210c      	movs	r1, #12
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7fe fcf5 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013c4a:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f007 f8a0 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 67, 42);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 8013c5a:	232a      	movs	r3, #42	; 0x2a
 8013c5c:	9300      	str	r3, [sp, #0]
 8013c5e:	2343      	movs	r3, #67	; 0x43
 8013c60:	2299      	movs	r2, #153	; 0x99
 8013c62:	2119      	movs	r1, #25
 8013c64:	f7fd f830 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8013c6e:	22ff      	movs	r2, #255	; 0xff
 8013c70:	21ff      	movs	r1, #255	; 0xff
 8013c72:	20ff      	movs	r0, #255	; 0xff
 8013c74:	f7ff f9e2 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f7fe fd42 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013c88:	2100      	movs	r1, #0
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7fe fd8e 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f603 34ae 	addw	r4, r3, #2990	; 0xbae
 8013c96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013c9a:	210f      	movs	r1, #15
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7fe fcc9 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013ca2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7fe fcd4 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8013cac:	4603      	mov	r3, r0
 8013cae:	4ae3      	ldr	r2, [pc, #908]	; (801403c <_ZN12MainViewBaseC1Ev+0xfac>)
 8013cb0:	2105      	movs	r1, #5
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	f00a fcde 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f603 33ae 	addw	r3, r3, #2990	; 0xbae
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	4610      	mov	r0, r2
 8013cc8:	f7fe fdf8 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8013cd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013cd6:	210e      	movs	r1, #14
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fe fcab 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013cde:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	f007 f856 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 193);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013cee:	22c1      	movs	r2, #193	; 0xc1
 8013cf0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fe fa5d 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8013d00:	2200      	movs	r2, #0
 8013d02:	21dc      	movs	r1, #220	; 0xdc
 8013d04:	20ff      	movs	r0, #255	; 0xff
 8013d06:	f7ff f999 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f7fe fcf9 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fe fd45 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8013d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013d2c:	2114      	movs	r1, #20
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7fe fc80 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013d34:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f007 f82b 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 193);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013d44:	22c1      	movs	r2, #193	; 0xc1
 8013d46:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7fe fa32 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8013d56:	2200      	movs	r2, #0
 8013d58:	21dc      	movs	r1, #220	; 0xdc
 8013d5a:	20ff      	movs	r0, #255	; 0xff
 8013d5c:	f7ff f96e 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d60:	4603      	mov	r3, r0
 8013d62:	4619      	mov	r1, r3
 8013d64:	4620      	mov	r0, r4
 8013d66:	f7fe fcce 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013d70:	2100      	movs	r1, #0
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7fe fd1a 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8013d7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013d82:	2115      	movs	r1, #21
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7fe fc55 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013d8a:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f007 f800 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 153, 75, 42);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 8013d9a:	232a      	movs	r3, #42	; 0x2a
 8013d9c:	9300      	str	r3, [sp, #0]
 8013d9e:	234b      	movs	r3, #75	; 0x4b
 8013da0:	2299      	movs	r2, #153	; 0x99
 8013da2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8013da6:	f7fc ff8f 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8013db0:	22ff      	movs	r2, #255	; 0xff
 8013db2:	21ff      	movs	r1, #255	; 0xff
 8013db4:	20ff      	movs	r0, #255	; 0xff
 8013db6:	f7ff f941 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	4620      	mov	r0, r4
 8013dc0:	f7fe fca1 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8013dca:	2100      	movs	r1, #0
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fe fced 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 8013dd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013ddc:	2117      	movs	r1, #23
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7fe fc28 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013de4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe fc33 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8013dee:	4603      	mov	r3, r0
 8013df0:	4a92      	ldr	r2, [pc, #584]	; (801403c <_ZN12MainViewBaseC1Ev+0xfac>)
 8013df2:	2105      	movs	r1, #5
 8013df4:	4620      	mov	r0, r4
 8013df6:	f00a fc3d 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8013e06:	4619      	mov	r1, r3
 8013e08:	4610      	mov	r0, r2
 8013e0a:	f7fe fd57 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8013e14:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013e18:	2116      	movs	r1, #22
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7fe fc0a 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013e20:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8013e24:	4620      	mov	r0, r4
 8013e26:	f006 ffb5 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 153, 71, 40);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8013e30:	2328      	movs	r3, #40	; 0x28
 8013e32:	9300      	str	r3, [sp, #0]
 8013e34:	2347      	movs	r3, #71	; 0x47
 8013e36:	2299      	movs	r2, #153	; 0x99
 8013e38:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8013e3c:	f7fc ff44 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8013e46:	22ff      	movs	r2, #255	; 0xff
 8013e48:	21ff      	movs	r1, #255	; 0xff
 8013e4a:	20ff      	movs	r0, #255	; 0xff
 8013e4c:	f7ff f8f6 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e50:	4603      	mov	r3, r0
 8013e52:	4619      	mov	r1, r3
 8013e54:	4620      	mov	r0, r4
 8013e56:	f7fe fc56 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013e60:	2100      	movs	r1, #0
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fe fca2 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f603 34c2 	addw	r4, r3, #3010	; 0xbc2
 8013e6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013e72:	2125      	movs	r1, #37	; 0x25
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7fe fbdd 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013e7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7fe fbe8 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8013e84:	4603      	mov	r3, r0
 8013e86:	4a6d      	ldr	r2, [pc, #436]	; (801403c <_ZN12MainViewBaseC1Ev+0xfac>)
 8013e88:	2105      	movs	r1, #5
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	f00a fbf2 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f603 33c2 	addw	r3, r3, #3010	; 0xbc2
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	4610      	mov	r0, r2
 8013ea0:	f7fe fd0c 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8013eaa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013eae:	2118      	movs	r1, #24
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7fe fbbf 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013eb6:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8013eba:	4620      	mov	r0, r4
 8013ebc:	f006 ff6a 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013ec6:	22f0      	movs	r2, #240	; 0xf0
 8013ec8:	f240 1197 	movw	r1, #407	; 0x197
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7fe f971 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8013ed8:	2200      	movs	r2, #0
 8013eda:	21dc      	movs	r1, #220	; 0xdc
 8013edc:	20ff      	movs	r0, #255	; 0xff
 8013ede:	f7ff f8ad 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f7fe fc0d 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013ef2:	2100      	movs	r1, #0
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fe fc59 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 8013f00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013f04:	211b      	movs	r1, #27
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fe fb94 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8013f0c:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8013f10:	4620      	mov	r0, r4
 8013f12:	f006 ff3f 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013f1c:	22e2      	movs	r2, #226	; 0xe2
 8013f1e:	f240 116f 	movw	r1, #367	; 0x16f
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7fe f946 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8013f2e:	230a      	movs	r3, #10
 8013f30:	9300      	str	r3, [sp, #0]
 8013f32:	2364      	movs	r3, #100	; 0x64
 8013f34:	2202      	movs	r2, #2
 8013f36:	2102      	movs	r1, #2
 8013f38:	f004 fc8a 	bl	8018850 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8013f42:	2300      	movs	r3, #0
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	2300      	movs	r3, #0
 8013f48:	2264      	movs	r2, #100	; 0x64
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	f004 fefe 	bl	8018d4c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013f56:	2100      	movs	r1, #0
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f004 fcd9 	bl	8018910 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8013f64:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013f68:	2100      	movs	r1, #0
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fe f8a5 	bl	80120ba <_ZN8touchgfx6BitmapC1Et>
 8013f70:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013f74:	4619      	mov	r1, r3
 8013f76:	4620      	mov	r0, r4
 8013f78:	f004 fedd 	bl	8018d36 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8013f82:	2200      	movs	r2, #0
 8013f84:	21dc      	movs	r1, #220	; 0xdc
 8013f86:	20ff      	movs	r0, #255	; 0xff
 8013f88:	f7ff f858 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	4619      	mov	r1, r3
 8013f90:	4620      	mov	r0, r4
 8013f92:	f004 fc07 	bl	80187a4 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013f9c:	213c      	movs	r1, #60	; 0x3c
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f004 fc6e 	bl	8018880 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 8013faa:	230a      	movs	r3, #10
 8013fac:	9300      	str	r3, [sp, #0]
 8013fae:	23b4      	movs	r3, #180	; 0xb4
 8013fb0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013fb4:	210e      	movs	r1, #14
 8013fb6:	f7fc fe87 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8013fc0:	22ff      	movs	r2, #255	; 0xff
 8013fc2:	21ff      	movs	r1, #255	; 0xff
 8013fc4:	20ff      	movs	r0, #255	; 0xff
 8013fc6:	f7ff f839 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	22ff      	movs	r2, #255	; 0xff
 8013fce:	4619      	mov	r1, r3
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f006 f90e 	bl	801a1f2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	4610      	mov	r0, r2
 8013fe6:	f006 f96d 	bl	801a2c4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8013ff0:	2205      	movs	r2, #5
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f000 fd89 	bl	8014b0c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8014000:	2205      	movs	r2, #5
 8014002:	21b4      	movs	r1, #180	; 0xb4
 8014004:	4618      	mov	r0, r3
 8014006:	f000 fda7 	bl	8014b58 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8014010:	2102      	movs	r1, #2
 8014012:	4618      	mov	r0, r3
 8014014:	f000 fdc6 	bl	8014ba4 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 801401e:	2100      	movs	r1, #0
 8014020:	4618      	mov	r0, r3
 8014022:	f006 fc69 	bl	801a8f8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 801402c:	230a      	movs	r3, #10
 801402e:	9300      	str	r3, [sp, #0]
 8014030:	23b4      	movs	r3, #180	; 0xb4
 8014032:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014036:	f240 111f 	movw	r1, #287	; 0x11f
 801403a:	e001      	b.n	8014040 <_ZN12MainViewBaseC1Ev+0xfb0>
 801403c:	08029f98 	.word	0x08029f98
 8014040:	f7fc fe42 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 801404a:	22ff      	movs	r2, #255	; 0xff
 801404c:	21ff      	movs	r1, #255	; 0xff
 801404e:	20ff      	movs	r0, #255	; 0xff
 8014050:	f7fe fff4 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014054:	4603      	mov	r3, r0
 8014056:	22ff      	movs	r2, #255	; 0xff
 8014058:	4619      	mov	r1, r3
 801405a:	4620      	mov	r0, r4
 801405c:	f006 f8c9 	bl	801a1f2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 801406c:	4619      	mov	r1, r3
 801406e:	4610      	mov	r0, r2
 8014070:	f006 f928 	bl	801a2c4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801407a:	2205      	movs	r2, #5
 801407c:	2100      	movs	r1, #0
 801407e:	4618      	mov	r0, r3
 8014080:	f000 fd44 	bl	8014b0c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801408a:	2205      	movs	r2, #5
 801408c:	21b4      	movs	r1, #180	; 0xb4
 801408e:	4618      	mov	r0, r3
 8014090:	f000 fd62 	bl	8014b58 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801409a:	2102      	movs	r1, #2
 801409c:	4618      	mov	r0, r3
 801409e:	f000 fd81 	bl	8014ba4 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80140a8:	2100      	movs	r1, #0
 80140aa:	4618      	mov	r0, r3
 80140ac:	f006 fc24 	bl	801a8f8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 80140b6:	2315      	movs	r3, #21
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	233c      	movs	r3, #60	; 0x3c
 80140bc:	22f7      	movs	r2, #247	; 0xf7
 80140be:	21d2      	movs	r1, #210	; 0xd2
 80140c0:	f7fc fe02 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 80140ca:	22ff      	movs	r2, #255	; 0xff
 80140cc:	21ff      	movs	r1, #255	; 0xff
 80140ce:	20ff      	movs	r0, #255	; 0xff
 80140d0:	f7fe ffb4 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80140d4:	4603      	mov	r3, r0
 80140d6:	4619      	mov	r1, r3
 80140d8:	4620      	mov	r0, r4
 80140da:	f7fe fb14 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80140e4:	2100      	movs	r1, #0
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fe fb60 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f603 34cc 	addw	r4, r3, #3020	; 0xbcc
 80140f2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80140f6:	211d      	movs	r1, #29
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7fe fa9b 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80140fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014102:	4618      	mov	r0, r3
 8014104:	f7fe faa6 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8014108:	4603      	mov	r3, r0
 801410a:	4ae2      	ldr	r2, [pc, #904]	; (8014494 <_ZN12MainViewBaseC1Ev+0x1404>)
 801410c:	2105      	movs	r1, #5
 801410e:	4620      	mov	r0, r4
 8014110:	f00a fab0 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
 8014120:	4619      	mov	r1, r3
 8014122:	4610      	mov	r0, r2
 8014124:	f7fe fbca 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 801412e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014132:	211c      	movs	r1, #28
 8014134:	4618      	mov	r0, r3
 8014136:	f7fe fa7d 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 801413a:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 801413e:	4620      	mov	r0, r4
 8014140:	f006 fe28 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801414a:	2201      	movs	r2, #1
 801414c:	2101      	movs	r1, #1
 801414e:	4618      	mov	r0, r3
 8014150:	f7fe f830 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 801415a:	2337      	movs	r3, #55	; 0x37
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8014162:	2202      	movs	r2, #2
 8014164:	2102      	movs	r1, #2
 8014166:	f004 fcc3 	bl	8018af0 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8014170:	2300      	movs	r3, #0
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	2300      	movs	r3, #0
 8014176:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801417a:	2100      	movs	r1, #0
 801417c:	f004 fde6 	bl	8018d4c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014186:	2100      	movs	r1, #0
 8014188:	4618      	mov	r0, r3
 801418a:	f004 fbc1 	bl	8018910 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014194:	2101      	movs	r1, #1
 8014196:	4618      	mov	r0, r3
 8014198:	f004 fc05 	bl	80189a6 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80141a2:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80141a6:	4618      	mov	r0, r3
 80141a8:	f004 fcba 	bl	8018b20 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80141b2:	2101      	movs	r1, #1
 80141b4:	4618      	mov	r0, r3
 80141b6:	f004 fbdf 	bl	8018978 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 80141c0:	2316      	movs	r3, #22
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	2337      	movs	r3, #55	; 0x37
 80141c6:	2204      	movs	r2, #4
 80141c8:	2119      	movs	r1, #25
 80141ca:	f7fc fd7d 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 80141d4:	22ff      	movs	r2, #255	; 0xff
 80141d6:	21ff      	movs	r1, #255	; 0xff
 80141d8:	20ff      	movs	r0, #255	; 0xff
 80141da:	f7fe ff2f 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80141de:	4603      	mov	r3, r0
 80141e0:	4619      	mov	r1, r3
 80141e2:	4620      	mov	r0, r4
 80141e4:	f7fe fa8f 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80141ee:	2100      	movs	r1, #0
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7fe fadb 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f603 34d6 	addw	r4, r3, #3030	; 0xbd6
 80141fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014200:	211f      	movs	r1, #31
 8014202:	4618      	mov	r0, r3
 8014204:	f7fe fa16 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8014208:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801420c:	4618      	mov	r0, r3
 801420e:	f7fe fa21 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8014212:	4603      	mov	r3, r0
 8014214:	4a9f      	ldr	r2, [pc, #636]	; (8014494 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014216:	2105      	movs	r1, #5
 8014218:	4620      	mov	r0, r4
 801421a:	f00a fa2b 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f603 33d6 	addw	r3, r3, #3030	; 0xbd6
 801422a:	4619      	mov	r1, r3
 801422c:	4610      	mov	r0, r2
 801422e:	f7fe fb45 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8014238:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801423c:	211e      	movs	r1, #30
 801423e:	4618      	mov	r0, r3
 8014240:	f7fe f9f8 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8014244:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8014248:	4620      	mov	r0, r4
 801424a:	f006 fda3 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014254:	220f      	movs	r2, #15
 8014256:	2152      	movs	r1, #82	; 0x52
 8014258:	4618      	mov	r0, r3
 801425a:	f7fd ffab 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8014264:	22ff      	movs	r2, #255	; 0xff
 8014266:	21ff      	movs	r1, #255	; 0xff
 8014268:	20ff      	movs	r0, #255	; 0xff
 801426a:	f7fe fee7 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801426e:	4603      	mov	r3, r0
 8014270:	4619      	mov	r1, r3
 8014272:	4620      	mov	r0, r4
 8014274:	f7fe fa47 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801427e:	2100      	movs	r1, #0
 8014280:	4618      	mov	r0, r3
 8014282:	f7fe fa93 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f603 1444 	addw	r4, r3, #2372	; 0x944
 801428c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014290:	2120      	movs	r1, #32
 8014292:	4618      	mov	r0, r3
 8014294:	f7fe f9ce 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8014298:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 801429c:	4620      	mov	r0, r4
 801429e:	f006 fd79 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f603 1078 	addw	r0, r3, #2424	; 0x978
 80142a8:	232a      	movs	r3, #42	; 0x2a
 80142aa:	9300      	str	r3, [sp, #0]
 80142ac:	2348      	movs	r3, #72	; 0x48
 80142ae:	2255      	movs	r2, #85	; 0x55
 80142b0:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80142b4:	f7fc fd08 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f603 1478 	addw	r4, r3, #2424	; 0x978
 80142be:	22ff      	movs	r2, #255	; 0xff
 80142c0:	21ff      	movs	r1, #255	; 0xff
 80142c2:	20ff      	movs	r0, #255	; 0xff
 80142c4:	f7fe feba 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80142c8:	4603      	mov	r3, r0
 80142ca:	4619      	mov	r1, r3
 80142cc:	4620      	mov	r0, r4
 80142ce:	f7fe fa1a 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80142d8:	2100      	movs	r1, #0
 80142da:	4618      	mov	r0, r3
 80142dc:	f7fe fa66 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
 80142e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80142ea:	2122      	movs	r1, #34	; 0x22
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fe f9a1 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80142f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7fe f9ac 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 80142fc:	4603      	mov	r3, r0
 80142fe:	4a65      	ldr	r2, [pc, #404]	; (8014494 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014300:	2105      	movs	r1, #5
 8014302:	4620      	mov	r0, r4
 8014304:	f00a f9b6 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f603 1278 	addw	r2, r3, #2424	; 0x978
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8014314:	4619      	mov	r1, r3
 8014316:	4610      	mov	r0, r2
 8014318:	f7fe fad0 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8014322:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014326:	2121      	movs	r1, #33	; 0x21
 8014328:	4618      	mov	r0, r3
 801432a:	f7fe f983 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 801432e:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8014332:	4620      	mov	r0, r4
 8014334:	f006 fd2e 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(195, 158, 96, 60);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 801433e:	233c      	movs	r3, #60	; 0x3c
 8014340:	9300      	str	r3, [sp, #0]
 8014342:	2360      	movs	r3, #96	; 0x60
 8014344:	229e      	movs	r2, #158	; 0x9e
 8014346:	21c3      	movs	r1, #195	; 0xc3
 8014348:	f7fc fcbe 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014352:	22ff      	movs	r2, #255	; 0xff
 8014354:	21ff      	movs	r1, #255	; 0xff
 8014356:	20ff      	movs	r0, #255	; 0xff
 8014358:	f7fe fe70 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801435c:	4603      	mov	r3, r0
 801435e:	4619      	mov	r1, r3
 8014360:	4620      	mov	r0, r4
 8014362:	f7fe f9d0 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 801436c:	2100      	movs	r1, #0
 801436e:	4618      	mov	r0, r3
 8014370:	f7fe fa1c 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f603 34ea 	addw	r4, r3, #3050	; 0xbea
 801437a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801437e:	2124      	movs	r1, #36	; 0x24
 8014380:	4618      	mov	r0, r3
 8014382:	f7fe f957 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8014386:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801438a:	4618      	mov	r0, r3
 801438c:	f7fe f962 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8014390:	4603      	mov	r3, r0
 8014392:	4a40      	ldr	r2, [pc, #256]	; (8014494 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014394:	2105      	movs	r1, #5
 8014396:	4620      	mov	r0, r4
 8014398:	f00a f96c 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f603 33ea 	addw	r3, r3, #3050	; 0xbea
 80143a8:	4619      	mov	r1, r3
 80143aa:	4610      	mov	r0, r2
 80143ac:	f7fe fa86 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 80143b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80143ba:	2123      	movs	r1, #35	; 0x23
 80143bc:	4618      	mov	r0, r3
 80143be:	f7fe f939 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80143c2:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 80143c6:	4620      	mov	r0, r4
 80143c8:	f006 fce4 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(100, 153, 78, 42);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 80143d2:	232a      	movs	r3, #42	; 0x2a
 80143d4:	9300      	str	r3, [sp, #0]
 80143d6:	234e      	movs	r3, #78	; 0x4e
 80143d8:	2299      	movs	r2, #153	; 0x99
 80143da:	2164      	movs	r1, #100	; 0x64
 80143dc:	f7fc fc74 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 80143e6:	22ff      	movs	r2, #255	; 0xff
 80143e8:	21ff      	movs	r1, #255	; 0xff
 80143ea:	20ff      	movs	r0, #255	; 0xff
 80143ec:	f7fe fe26 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143f0:	4603      	mov	r3, r0
 80143f2:	4619      	mov	r1, r3
 80143f4:	4620      	mov	r0, r4
 80143f6:	f7fe f986 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014400:	2100      	movs	r1, #0
 8014402:	4618      	mov	r0, r3
 8014404:	f7fe f9d2 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f603 34f4 	addw	r4, r3, #3060	; 0xbf4
 801440e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014412:	212f      	movs	r1, #47	; 0x2f
 8014414:	4618      	mov	r0, r3
 8014416:	f7fe f90d 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 801441a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801441e:	4618      	mov	r0, r3
 8014420:	f7fe f918 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8014424:	4603      	mov	r3, r0
 8014426:	4a1b      	ldr	r2, [pc, #108]	; (8014494 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014428:	2105      	movs	r1, #5
 801442a:	4620      	mov	r0, r4
 801442c:	f00a f922 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 801443c:	4619      	mov	r1, r3
 801443e:	4610      	mov	r0, r2
 8014440:	f7fe fa3c 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 801444a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801444e:	212e      	movs	r1, #46	; 0x2e
 8014450:	4618      	mov	r0, r3
 8014452:	f7fe f8ef 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8014456:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 801445a:	4620      	mov	r0, r4
 801445c:	f006 fc9a 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(114, 193);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014466:	22c1      	movs	r2, #193	; 0xc1
 8014468:	2172      	movs	r1, #114	; 0x72
 801446a:	4618      	mov	r0, r3
 801446c:	f7fd fea2 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014476:	2200      	movs	r2, #0
 8014478:	21dc      	movs	r1, #220	; 0xdc
 801447a:	20ff      	movs	r0, #255	; 0xff
 801447c:	f7fe fdde 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014480:	4603      	mov	r3, r0
 8014482:	4619      	mov	r1, r3
 8014484:	4620      	mov	r0, r4
 8014486:	f7fe f93e 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014490:	2100      	movs	r1, #0
 8014492:	e001      	b.n	8014498 <_ZN12MainViewBaseC1Ev+0x1408>
 8014494:	08029f98 	.word	0x08029f98
 8014498:	4618      	mov	r0, r3
 801449a:	f7fe f987 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 80144a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80144a8:	2130      	movs	r1, #48	; 0x30
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7fe f8c2 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80144b0:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 80144b4:	4620      	mov	r0, r4
 80144b6:	f006 fc6d 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(399, 85, 68, 42);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 80144c0:	232a      	movs	r3, #42	; 0x2a
 80144c2:	9300      	str	r3, [sp, #0]
 80144c4:	2344      	movs	r3, #68	; 0x44
 80144c6:	2255      	movs	r2, #85	; 0x55
 80144c8:	f240 118f 	movw	r1, #399	; 0x18f
 80144cc:	f7fc fbfc 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 80144d6:	22ff      	movs	r2, #255	; 0xff
 80144d8:	21ff      	movs	r1, #255	; 0xff
 80144da:	20ff      	movs	r0, #255	; 0xff
 80144dc:	f7fe fdae 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80144e0:	4603      	mov	r3, r0
 80144e2:	4619      	mov	r1, r3
 80144e4:	4620      	mov	r0, r4
 80144e6:	f7fe f90e 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80144f0:	2100      	movs	r1, #0
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7fe f95a 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f603 34fe 	addw	r4, r3, #3070	; 0xbfe
 80144fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8014502:	2132      	movs	r1, #50	; 0x32
 8014504:	4618      	mov	r0, r3
 8014506:	f7fe f895 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 801450a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801450e:	4618      	mov	r0, r3
 8014510:	f7fe f8a0 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8014514:	4603      	mov	r3, r0
 8014516:	4ad7      	ldr	r2, [pc, #860]	; (8014874 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8014518:	2105      	movs	r1, #5
 801451a:	4620      	mov	r0, r4
 801451c:	f00a f8aa 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f603 33fe 	addw	r3, r3, #3070	; 0xbfe
 801452c:	4619      	mov	r1, r3
 801452e:	4610      	mov	r0, r2
 8014530:	f7fe f9c4 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 801453a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801453e:	2131      	movs	r1, #49	; 0x31
 8014540:	4618      	mov	r0, r3
 8014542:	f7fe f877 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8014546:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 801454a:	4620      	mov	r0, r4
 801454c:	f006 fc22 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(407, 126);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014556:	227e      	movs	r2, #126	; 0x7e
 8014558:	f240 1197 	movw	r1, #407	; 0x197
 801455c:	4618      	mov	r0, r3
 801455e:	f7fd fe29 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8014568:	2200      	movs	r2, #0
 801456a:	21dc      	movs	r1, #220	; 0xdc
 801456c:	20ff      	movs	r0, #255	; 0xff
 801456e:	f7fe fd65 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014572:	4603      	mov	r3, r0
 8014574:	4619      	mov	r1, r3
 8014576:	4620      	mov	r0, r4
 8014578:	f7fe f8c5 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014582:	2100      	movs	r1, #0
 8014584:	4618      	mov	r0, r3
 8014586:	f7fe f911 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8014590:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8014594:	2133      	movs	r1, #51	; 0x33
 8014596:	4618      	mov	r0, r3
 8014598:	f7fe f84c 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 801459c:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 80145a0:	4620      	mov	r0, r4
 80145a2:	f006 fbf7 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 80145ac:	2311      	movs	r3, #17
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	2313      	movs	r3, #19
 80145b2:	22e2      	movs	r2, #226	; 0xe2
 80145b4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80145b8:	f7fc fb86 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 80145c2:	220d      	movs	r2, #13
 80145c4:	210d      	movs	r1, #13
 80145c6:	200d      	movs	r0, #13
 80145c8:	f7fe fd38 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80145cc:	4603      	mov	r3, r0
 80145ce:	4619      	mov	r1, r3
 80145d0:	4620      	mov	r0, r4
 80145d2:	f7fe f898 	bl	8012706 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80145dc:	2100      	movs	r1, #0
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fe f8e4 	bl	80127ac <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f603 4408 	addw	r4, r3, #3080	; 0xc08
 80145ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80145ee:	2135      	movs	r1, #53	; 0x35
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7fe f81f 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 80145f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fe f82a 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 8014600:	4603      	mov	r3, r0
 8014602:	4a9c      	ldr	r2, [pc, #624]	; (8014874 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8014604:	2105      	movs	r1, #5
 8014606:	4620      	mov	r0, r4
 8014608:	f00a f834 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8014618:	4619      	mov	r1, r3
 801461a:	4610      	mov	r0, r2
 801461c:	f7fe f94e 	bl	80128bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014626:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801462a:	2134      	movs	r1, #52	; 0x34
 801462c:	4618      	mov	r0, r3
 801462e:	f7fe f801 	bl	8012634 <_ZN8touchgfx9TypedTextC1Et>
 8014632:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8014636:	4620      	mov	r0, r4
 8014638:	f006 fbac 	bl	801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BtnGoToSecondScreen.setBoxWithBorderPosition(0, 0, 122, 272);
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014642:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014646:	9300      	str	r3, [sp, #0]
 8014648:	237a      	movs	r3, #122	; 0x7a
 801464a:	2200      	movs	r2, #0
 801464c:	2100      	movs	r1, #0
 801464e:	f000 fac1 	bl	8014bd4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    BtnGoToSecondScreen.setBorderSize(5);
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014658:	2105      	movs	r1, #5
 801465a:	4618      	mov	r0, r3
 801465c:	f000 fada 	bl	8014c14 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    BtnGoToSecondScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 8014666:	2299      	movs	r2, #153	; 0x99
 8014668:	2166      	movs	r1, #102	; 0x66
 801466a:	2000      	movs	r0, #0
 801466c:	f7fe fce6 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014670:	4605      	mov	r5, r0
 8014672:	22cc      	movs	r2, #204	; 0xcc
 8014674:	2199      	movs	r1, #153	; 0x99
 8014676:	2000      	movs	r0, #0
 8014678:	f7fe fce0 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801467c:	4606      	mov	r6, r0
 801467e:	2266      	movs	r2, #102	; 0x66
 8014680:	2133      	movs	r1, #51	; 0x33
 8014682:	2000      	movs	r0, #0
 8014684:	f7fe fcda 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014688:	4680      	mov	r8, r0
 801468a:	2299      	movs	r2, #153	; 0x99
 801468c:	2166      	movs	r1, #102	; 0x66
 801468e:	2033      	movs	r0, #51	; 0x33
 8014690:	f7fe fcd4 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014694:	4603      	mov	r3, r0
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	4643      	mov	r3, r8
 801469a:	4632      	mov	r2, r6
 801469c:	4629      	mov	r1, r5
 801469e:	4620      	mov	r0, r4
 80146a0:	f000 fac9 	bl	8014c36 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BtnGoToSecondScreen.setPosition(358, 0, 122, 272);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 80146aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	237a      	movs	r3, #122	; 0x7a
 80146b2:	2200      	movs	r2, #0
 80146b4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80146b8:	f7fc fb06 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    BtnGoToSecondScreen.setAlpha(0);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80146c2:	2100      	movs	r1, #0
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7fe fa10 	bl	8012aea <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    BtnGoToSecondScreen.setAction(flexButtonCallback);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f603 22f8 	addw	r2, r3, #2808	; 0xaf8
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 80146d6:	4619      	mov	r1, r3
 80146d8:	4610      	mov	r0, r2
 80146da:	f7fe fa27 	bl	8012b2c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 80146de:	687a      	ldr	r2, [r7, #4]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	3340      	adds	r3, #64	; 0x40
 80146e4:	4619      	mov	r1, r3
 80146e6:	4610      	mov	r0, r2
 80146e8:	f7fd feec 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	3370      	adds	r3, #112	; 0x70
 80146f2:	4619      	mov	r1, r3
 80146f4:	4610      	mov	r0, r2
 80146f6:	f7fd fee5 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 80146fa:	687a      	ldr	r2, [r7, #4]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	33a4      	adds	r3, #164	; 0xa4
 8014700:	4619      	mov	r1, r3
 8014702:	4610      	mov	r0, r2
 8014704:	f7fd fede 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	33d8      	adds	r3, #216	; 0xd8
 801470e:	4619      	mov	r1, r3
 8014710:	4610      	mov	r0, r2
 8014712:	f7fd fed7 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801471e:	4619      	mov	r1, r3
 8014720:	4610      	mov	r0, r2
 8014722:	f7fd fecf 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8014726:	687a      	ldr	r2, [r7, #4]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801472e:	4619      	mov	r1, r3
 8014730:	4610      	mov	r0, r2
 8014732:	f7fd fec7 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8014736:	687a      	ldr	r2, [r7, #4]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801473e:	4619      	mov	r1, r3
 8014740:	4610      	mov	r0, r2
 8014742:	f7fd febf 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801474e:	4619      	mov	r1, r3
 8014750:	4610      	mov	r0, r2
 8014752:	f7fd feb7 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801475e:	4619      	mov	r1, r3
 8014760:	4610      	mov	r0, r2
 8014762:	f7fd feaf 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801476e:	4619      	mov	r1, r3
 8014770:	4610      	mov	r0, r2
 8014772:	f7fd fea7 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8014776:	687a      	ldr	r2, [r7, #4]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801477e:	4619      	mov	r1, r3
 8014780:	4610      	mov	r0, r2
 8014782:	f7fd fe9f 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801478e:	4619      	mov	r1, r3
 8014790:	4610      	mov	r0, r2
 8014792:	f7fd fe97 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801479e:	4619      	mov	r1, r3
 80147a0:	4610      	mov	r0, r2
 80147a2:	f7fd fe8f 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80147ae:	4619      	mov	r1, r3
 80147b0:	4610      	mov	r0, r2
 80147b2:	f7fd fe87 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80147be:	4619      	mov	r1, r3
 80147c0:	4610      	mov	r0, r2
 80147c2:	f7fd fe7f 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 80147c6:	687a      	ldr	r2, [r7, #4]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80147ce:	4619      	mov	r1, r3
 80147d0:	4610      	mov	r0, r2
 80147d2:	f7fd fe77 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 80147d6:	687a      	ldr	r2, [r7, #4]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80147de:	4619      	mov	r1, r3
 80147e0:	4610      	mov	r0, r2
 80147e2:	f7fd fe6f 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80147ee:	4619      	mov	r1, r3
 80147f0:	4610      	mov	r0, r2
 80147f2:	f7fd fe67 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80147fe:	4619      	mov	r1, r3
 8014800:	4610      	mov	r0, r2
 8014802:	f7fd fe5f 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801480e:	4619      	mov	r1, r3
 8014810:	4610      	mov	r0, r2
 8014812:	f7fd fe57 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801481e:	4619      	mov	r1, r3
 8014820:	4610      	mov	r0, r2
 8014822:	f7fd fe4f 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801482e:	4619      	mov	r1, r3
 8014830:	4610      	mov	r0, r2
 8014832:	f7fd fe47 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801483e:	4619      	mov	r1, r3
 8014840:	4610      	mov	r0, r2
 8014842:	f7fd fe3f 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8014846:	687a      	ldr	r2, [r7, #4]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801484e:	4619      	mov	r1, r3
 8014850:	4610      	mov	r0, r2
 8014852:	f7fd fe37 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 801485e:	4619      	mov	r1, r3
 8014860:	4610      	mov	r0, r2
 8014862:	f7fd fe2f 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8014866:	687a      	ldr	r2, [r7, #4]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 801486e:	4619      	mov	r1, r3
 8014870:	e002      	b.n	8014878 <_ZN12MainViewBaseC1Ev+0x17e8>
 8014872:	bf00      	nop
 8014874:	08029f98 	.word	0x08029f98
 8014878:	4610      	mov	r0, r2
 801487a:	f7fd fe23 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8014886:	4619      	mov	r1, r3
 8014888:	4610      	mov	r0, r2
 801488a:	f7fd fe1b 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8014896:	4619      	mov	r1, r3
 8014898:	4610      	mov	r0, r2
 801489a:	f7fd fe13 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80148a6:	4619      	mov	r1, r3
 80148a8:	4610      	mov	r0, r2
 80148aa:	f7fd fe0b 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80148b6:	4619      	mov	r1, r3
 80148b8:	4610      	mov	r0, r2
 80148ba:	f7fd fe03 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80148c6:	4619      	mov	r1, r3
 80148c8:	4610      	mov	r0, r2
 80148ca:	f7fd fdfb 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80148d6:	4619      	mov	r1, r3
 80148d8:	4610      	mov	r0, r2
 80148da:	f7fd fdf3 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80148e6:	4619      	mov	r1, r3
 80148e8:	4610      	mov	r0, r2
 80148ea:	f7fd fdeb 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 80148ee:	687a      	ldr	r2, [r7, #4]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80148f6:	4619      	mov	r1, r3
 80148f8:	4610      	mov	r0, r2
 80148fa:	f7fd fde3 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8014906:	4619      	mov	r1, r3
 8014908:	4610      	mov	r0, r2
 801490a:	f7fd fddb 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014916:	4619      	mov	r1, r3
 8014918:	4610      	mov	r0, r2
 801491a:	f7fd fdd3 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014926:	4619      	mov	r1, r3
 8014928:	4610      	mov	r0, r2
 801492a:	f7fd fdcb 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8014936:	4619      	mov	r1, r3
 8014938:	4610      	mov	r0, r2
 801493a:	f7fd fdc3 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014946:	4619      	mov	r1, r3
 8014948:	4610      	mov	r0, r2
 801494a:	f7fd fdbb 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 801494e:	687a      	ldr	r2, [r7, #4]
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8014956:	4619      	mov	r1, r3
 8014958:	4610      	mov	r0, r2
 801495a:	f7fd fdb3 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BtnGoToSecondScreen);
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014966:	4619      	mov	r1, r3
 8014968:	4610      	mov	r0, r2
 801496a:	f7fd fdab 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	4618      	mov	r0, r3
 8014972:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014976:	46bd      	mov	sp, r7
 8014978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801497c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801497c:	b480      	push	{r7}
 801497e:	b083      	sub	sp, #12
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]

}
 8014984:	bf00      	nop
 8014986:	370c      	adds	r7, #12
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr

08014990 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
    if (&src == &BtnGoToSecondScreen)
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80149a0:	683a      	ldr	r2, [r7, #0]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d106      	bne.n	80149b4 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When BtnGoToSecondScreen clicked change screen to SecondScreen
        //Go to SecondScreen with screen transition towards East
        application().gotoSecondScreenScreenSlideTransitionEast();
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f7fe fb3d 	bl	8013026 <_ZN12MainViewBase11applicationEv>
 80149ac:	4603      	mov	r3, r0
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7fc fc8e 	bl	80112d0 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
    }
}
 80149b4:	bf00      	nop
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
    /**
     * @fn virtual BoxWithBorderButtonStyle::~BoxWithBorderButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorderButtonStyle() { }
 80149bc:	b580      	push	{r7, lr}
 80149be:	b082      	sub	sp, #8
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	4a08      	ldr	r2, [pc, #32]	; (80149e8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	601a      	str	r2, [r3, #0]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	3334      	adds	r3, #52	; 0x34
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fe f97c 	bl	8012ccc <_ZN8touchgfx13BoxWithBorderD1Ev>
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7fe f8dc 	bl	8012b94 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	4618      	mov	r0, r3
 80149e0:	3708      	adds	r7, #8
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	0802a60c 	.word	0x0802a60c

080149ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f7ff ffe1 	bl	80149bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 80149fa:	2178      	movs	r1, #120	; 0x78
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f013 fda3 	bl	8028548 <_ZdlPvj>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	4618      	mov	r0, r3
 8014a06:	3708      	adds	r7, #8
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	4618      	mov	r0, r3
 8014a18:	f008 fd2c 	bl	801d474 <_ZN8touchgfx6ScreenC1Ev>
 8014a1c:	4a05      	ldr	r2, [pc, #20]	; (8014a34 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	601a      	str	r2, [r3, #0]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2200      	movs	r2, #0
 8014a26:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3708      	adds	r7, #8
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}
 8014a32:	bf00      	nop
 8014a34:	0802a6a0 	.word	0x0802a6a0

08014a38 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7fe f894 	bl	8012b70 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 8014a48:	4a17      	ldr	r2, [pc, #92]	; (8014aa8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x70>)
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	601a      	str	r2, [r3, #0]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	3334      	adds	r3, #52	; 0x34
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fe f914 	bl	8012c80 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	3368      	adds	r3, #104	; 0x68
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7fd facc 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	336c      	adds	r3, #108	; 0x6c
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7fd fac7 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	3370      	adds	r3, #112	; 0x70
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fd fac2 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	3374      	adds	r3, #116	; 0x74
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7fd fabd 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	3334      	adds	r3, #52	; 0x34
 8014a84:	2200      	movs	r2, #0
 8014a86:	2100      	movs	r1, #0
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7fd fb93 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8014a8e:	687a      	ldr	r2, [r7, #4]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	3334      	adds	r3, #52	; 0x34
 8014a94:	4619      	mov	r1, r3
 8014a96:	4610      	mov	r0, r2
 8014a98:	f004 fa8c 	bl	8018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3708      	adds	r7, #8
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}
 8014aa6:	bf00      	nop
 8014aa8:	0802a60c 	.word	0x0802a60c

08014aac <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8014aac:	b480      	push	{r7}
 8014aae:	b083      	sub	sp, #12
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	4a04      	ldr	r2, [pc, #16]	; (8014ac8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	601a      	str	r2, [r3, #0]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	4618      	mov	r0, r3
 8014abe:	370c      	adds	r7, #12
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac6:	4770      	bx	lr
 8014ac8:	0802a768 	.word	0x0802a768

08014acc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	4639      	mov	r1, r7
 8014ad8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7ff ffe4 	bl	8014aac <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8014ae4:	4a08      	ldr	r2, [pc, #32]	; (8014b08 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	68ba      	ldr	r2, [r7, #8]
 8014aee:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	3308      	adds	r3, #8
 8014af4:	463a      	mov	r2, r7
 8014af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014afa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	4618      	mov	r0, r3
 8014b02:	3710      	adds	r7, #16
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	0802a5f4 	.word	0x0802a5f4

08014b0c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8014b0c:	b590      	push	{r4, r7, lr}
 8014b0e:	b089      	sub	sp, #36	; 0x24
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	015a      	lsls	r2, r3, #5
 8014b20:	f107 0314 	add.w	r3, r7, #20
 8014b24:	4611      	mov	r1, r2
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7fd fef8 	bl	801291c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	461c      	mov	r4, r3
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	61fb      	str	r3, [r7, #28]
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	015a      	lsls	r2, r3, #5
 8014b38:	f107 0310 	add.w	r3, r7, #16
 8014b3c:	4611      	mov	r1, r2
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7fd feec 	bl	801291c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014b44:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8014b46:	461a      	mov	r2, r3
 8014b48:	4621      	mov	r1, r4
 8014b4a:	68f8      	ldr	r0, [r7, #12]
 8014b4c:	f005 febe 	bl	801a8cc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8014b50:	bf00      	nop
 8014b52:	3724      	adds	r7, #36	; 0x24
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd90      	pop	{r4, r7, pc}

08014b58 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8014b58:	b590      	push	{r4, r7, lr}
 8014b5a:	b089      	sub	sp, #36	; 0x24
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	60b9      	str	r1, [r7, #8]
 8014b62:	607a      	str	r2, [r7, #4]
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	61bb      	str	r3, [r7, #24]
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	015a      	lsls	r2, r3, #5
 8014b6c:	f107 0314 	add.w	r3, r7, #20
 8014b70:	4611      	mov	r1, r2
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7fd fed2 	bl	801291c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	461c      	mov	r4, r3
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	61fb      	str	r3, [r7, #28]
 8014b80:	69fb      	ldr	r3, [r7, #28]
 8014b82:	015a      	lsls	r2, r3, #5
 8014b84:	f107 0310 	add.w	r3, r7, #16
 8014b88:	4611      	mov	r1, r2
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7fd fec6 	bl	801291c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014b90:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8014b92:	461a      	mov	r2, r3
 8014b94:	4621      	mov	r1, r4
 8014b96:	68f8      	ldr	r0, [r7, #12]
 8014b98:	f005 fea3 	bl	801a8e2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8014b9c:	bf00      	nop
 8014b9e:	3724      	adds	r7, #36	; 0x24
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd90      	pop	{r4, r7, pc}

08014ba4 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	6039      	str	r1, [r7, #0]
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	60fb      	str	r3, [r7, #12]
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	015a      	lsls	r2, r3, #5
 8014bb6:	f107 0308 	add.w	r3, r7, #8
 8014bba:	4611      	mov	r1, r2
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7fd fead 	bl	801291c <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014bc2:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f7fd fec3 	bl	8012952 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8014bcc:	bf00      	nop
 8014bce:	3710      	adds	r7, #16
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}

08014bd4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8014bd4:	b590      	push	{r4, r7, lr}
 8014bd6:	b087      	sub	sp, #28
 8014bd8:	af02      	add	r7, sp, #8
 8014bda:	60f8      	str	r0, [r7, #12]
 8014bdc:	4608      	mov	r0, r1
 8014bde:	4611      	mov	r1, r2
 8014be0:	461a      	mov	r2, r3
 8014be2:	4603      	mov	r3, r0
 8014be4:	817b      	strh	r3, [r7, #10]
 8014be6:	460b      	mov	r3, r1
 8014be8:	813b      	strh	r3, [r7, #8]
 8014bea:	4613      	mov	r3, r2
 8014bec:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8014bf4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8014bf8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014bfc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014c00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c04:	9300      	str	r3, [sp, #0]
 8014c06:	4623      	mov	r3, r4
 8014c08:	f7fc f85e 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8014c0c:	bf00      	nop
 8014c0e:	3714      	adds	r7, #20
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd90      	pop	{r4, r7, pc}

08014c14 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	3334      	adds	r3, #52	; 0x34
 8014c24:	78fa      	ldrb	r2, [r7, #3]
 8014c26:	4611      	mov	r1, r2
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7fe f88d 	bl	8012d48 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8014c2e:	bf00      	nop
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b084      	sub	sp, #16
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	60f8      	str	r0, [r7, #12]
 8014c3e:	60b9      	str	r1, [r7, #8]
 8014c40:	607a      	str	r2, [r7, #4]
 8014c42:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	68ba      	ldr	r2, [r7, #8]
 8014c48:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	683a      	ldr	r2, [r7, #0]
 8014c54:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	69ba      	ldr	r2, [r7, #24]
 8014c5a:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	3384      	adds	r3, #132	; 0x84
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	68f8      	ldr	r0, [r7, #12]
 8014c66:	4798      	blx	r3
    }
 8014c68:	bf00      	nop
 8014c6a:	3710      	adds	r7, #16
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}

08014c70 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8014c70:	b480      	push	{r7}
 8014c72:	b083      	sub	sp, #12
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
    }
 8014c78:	4a04      	ldr	r2, [pc, #16]	; (8014c8c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	601a      	str	r2, [r3, #0]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	4618      	mov	r0, r3
 8014c82:	370c      	adds	r7, #12
 8014c84:	46bd      	mov	sp, r7
 8014c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8a:	4770      	bx	lr
 8014c8c:	0802a768 	.word	0x0802a768

08014c90 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
    }
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f7ff ffe9 	bl	8014c70 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8014c9e:	2104      	movs	r1, #4
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f013 fc51 	bl	8028548 <_ZdlPvj>
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3708      	adds	r7, #8
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8014cb0:	b590      	push	{r4, r7, lr}
 8014cb2:	b083      	sub	sp, #12
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7fd ff05 	bl	8012ad0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d002      	beq.n	8014cd2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	336c      	adds	r3, #108	; 0x6c
 8014cd0:	e001      	b.n	8014cd6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	3368      	adds	r3, #104	; 0x68
 8014cd6:	6819      	ldr	r1, [r3, #0]
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f7fe f819 	bl	8012d10 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fd fef2 	bl	8012ad0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014cec:	4603      	mov	r3, r0
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d002      	beq.n	8014cf8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	3374      	adds	r3, #116	; 0x74
 8014cf6:	e001      	b.n	8014cfc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	3370      	adds	r3, #112	; 0x70
 8014cfc:	6819      	ldr	r1, [r3, #0]
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f7fe f814 	bl	8012d2c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fd ff1e 	bl	8012b48 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8014d0c:	bf00      	nop
 8014d0e:	370c      	adds	r7, #12
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd90      	pop	{r4, r7, pc}

08014d14 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b082      	sub	sp, #8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	4a05      	ldr	r2, [pc, #20]	; (8014d34 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	601a      	str	r2, [r3, #0]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7ff ffa3 	bl	8014c70 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	0802a5f4 	.word	0x0802a5f4

08014d38 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	6878      	ldr	r0, [r7, #4]
 8014d42:	f7ff ffe7 	bl	8014d14 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8014d46:	2110      	movs	r1, #16
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f013 fbfd 	bl	8028548 <_ZdlPvj>
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	4618      	mov	r0, r3
 8014d52:	3708      	adds	r7, #8
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}

08014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b082      	sub	sp, #8
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
 8014d60:	4a05      	ldr	r2, [pc, #20]	; (8014d78 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	601a      	str	r2, [r3, #0]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7fd fd6f 	bl	801284c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	4618      	mov	r0, r3
 8014d72:	3708      	adds	r7, #8
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	0802c4fc 	.word	0x0802c4fc

08014d7c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f7ff ffe7 	bl	8014d58 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014d8a:	2138      	movs	r1, #56	; 0x38
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f013 fbdb 	bl	8028548 <_ZdlPvj>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	4618      	mov	r0, r3
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	4a05      	ldr	r2, [pc, #20]	; (8014dbc <_ZN8touchgfx4LineD1Ev+0x20>)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	601a      	str	r2, [r3, #0]
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	4618      	mov	r0, r3
 8014dae:	f005 fb67 	bl	801a480 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	4618      	mov	r0, r3
 8014db6:	3708      	adds	r7, #8
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bd80      	pop	{r7, pc}
 8014dbc:	0802c238 	.word	0x0802c238

08014dc0 <_ZN8touchgfx4LineD0Ev>:
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b082      	sub	sp, #8
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f7ff ffe7 	bl	8014d9c <_ZN8touchgfx4LineD1Ev>
 8014dce:	2174      	movs	r1, #116	; 0x74
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f013 fbb9 	bl	8028548 <_ZdlPvj>
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3708      	adds	r7, #8
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	4a05      	ldr	r2, [pc, #20]	; (8014e00 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	601a      	str	r2, [r3, #0]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7fd fdd1 	bl	8012998 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3708      	adds	r7, #8
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}
 8014e00:	0802bf3c 	.word	0x0802bf3c

08014e04 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f7ff ffe7 	bl	8014de0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8014e12:	2118      	movs	r1, #24
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f013 fb97 	bl	8028548 <_ZdlPvj>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3708      	adds	r7, #8
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	685b      	ldr	r3, [r3, #4]
 8014e32:	687a      	ldr	r2, [r7, #4]
 8014e34:	68d2      	ldr	r2, [r2, #12]
 8014e36:	1052      	asrs	r2, r2, #1
 8014e38:	1898      	adds	r0, r3, r2
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	68db      	ldr	r3, [r3, #12]
 8014e3e:	f003 0301 	and.w	r3, r3, #1
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d102      	bne.n	8014e4c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	689b      	ldr	r3, [r3, #8]
 8014e4a:	e00a      	b.n	8014e62 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	687a      	ldr	r2, [r7, #4]
 8014e52:	68d2      	ldr	r2, [r2, #12]
 8014e54:	1052      	asrs	r2, r2, #1
 8014e56:	4413      	add	r3, r2
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	6892      	ldr	r2, [r2, #8]
 8014e5e:	4413      	add	r3, r2
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	6839      	ldr	r1, [r7, #0]
 8014e64:	4798      	blx	r3
    }
 8014e66:	bf00      	nop
 8014e68:	3708      	adds	r7, #8
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}

08014e6e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8014e6e:	b480      	push	{r7}
 8014e70:	b083      	sub	sp, #12
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d010      	beq.n	8014ea0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	689b      	ldr	r3, [r3, #8]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d107      	bne.n	8014e96 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	68db      	ldr	r3, [r3, #12]
 8014e8a:	f003 0301 	and.w	r3, r3, #1
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d101      	bne.n	8014e96 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014e92:	2301      	movs	r3, #1
 8014e94:	e000      	b.n	8014e98 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8014e96:	2300      	movs	r3, #0
 8014e98:	2b01      	cmp	r3, #1
 8014e9a:	d001      	beq.n	8014ea0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	e000      	b.n	8014ea2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8014ea0:	2300      	movs	r3, #0
    }
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	370c      	adds	r7, #12
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr

08014eae <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 8014eae:	b590      	push	{r4, r7, lr}
 8014eb0:	b083      	sub	sp, #12
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7fd fe27 	bl	8012b12 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	4620      	mov	r0, r4
 8014eca:	f7fd ff4d 	bl	8012d68 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7fd fe43 	bl	8012b5c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8014ed6:	bf00      	nop
 8014ed8:	370c      	adds	r7, #12
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd90      	pop	{r4, r7, pc}
	...

08014ee0 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7fd fd98 	bl	8012a20 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8014ef0:	4a03      	ldr	r2, [pc, #12]	; (8014f00 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	601a      	str	r2, [r3, #0]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3708      	adds	r7, #8
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	0802aa0c 	.word	0x0802aa0c

08014f04 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b082      	sub	sp, #8
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	4a05      	ldr	r2, [pc, #20]	; (8014f24 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	601a      	str	r2, [r3, #0]
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7fd fda5 	bl	8012a64 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3708      	adds	r7, #8
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}
 8014f24:	0802aa0c 	.word	0x0802aa0c

08014f28 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
 8014f30:	6878      	ldr	r0, [r7, #4]
 8014f32:	f7ff ffe7 	bl	8014f04 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8014f36:	2134      	movs	r1, #52	; 0x34
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f013 fb05 	bl	8028548 <_ZdlPvj>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	4618      	mov	r0, r3
 8014f42:	3708      	adds	r7, #8
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7fd fdbb 	bl	8012ad0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8014f5e:	6838      	ldr	r0, [r7, #0]
 8014f60:	f7fd f89f 	bl	80120a2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8014f64:	4603      	mov	r3, r0
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	bf0c      	ite	eq
 8014f6a:	2301      	moveq	r3, #1
 8014f6c:	2300      	movne	r3, #0
 8014f6e:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8014f70:	7bbb      	ldrb	r3, [r7, #14]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d005      	beq.n	8014f82 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8014f76:	7bfb      	ldrb	r3, [r7, #15]
 8014f78:	f083 0301 	eor.w	r3, r3, #1
 8014f7c:	b2db      	uxtb	r3, r3
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d108      	bne.n	8014f94 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8014f82:	7bbb      	ldrb	r3, [r7, #14]
 8014f84:	f083 0301 	eor.w	r3, r3, #1
 8014f88:	b2db      	uxtb	r3, r3
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d00f      	beq.n	8014fae <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8014f8e:	7bfb      	ldrb	r3, [r7, #15]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d00c      	beq.n	8014fae <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	7bba      	ldrb	r2, [r7, #14]
 8014f98:	4611      	mov	r1, r2
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7fd fd84 	bl	8012aa8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8014fa0:	687a      	ldr	r2, [r7, #4]
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	3314      	adds	r3, #20
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	4610      	mov	r0, r2
 8014fac:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8014fae:	7bfb      	ldrb	r3, [r7, #15]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d00b      	beq.n	8014fcc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8014fb4:	6838      	ldr	r0, [r7, #0]
 8014fb6:	f7fd f874 	bl	80120a2 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	2b01      	cmp	r3, #1
 8014fbe:	d105      	bne.n	8014fcc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d001      	beq.n	8014fcc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e000      	b.n	8014fce <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d015      	beq.n	8014ffe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	330c      	adds	r3, #12
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4610      	mov	r0, r2
 8014fe2:	4798      	blx	r3
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d009      	beq.n	8014ffe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	3308      	adds	r3, #8
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	6879      	ldr	r1, [r7, #4]
 8014ffa:	4610      	mov	r0, r2
 8014ffc:	4798      	blx	r3
            }
        }
    }
 8014ffe:	bf00      	nop
 8015000:	3710      	adds	r7, #16
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
	...

08015008 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>:
class View : public Screen
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	4a05      	ldr	r2, [pc, #20]	; (8015028 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev+0x20>)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	601a      	str	r2, [r3, #0]
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	4618      	mov	r0, r3
 801501a:	f7fd f9fb 	bl	8012414 <_ZN8touchgfx6ScreenD1Ev>
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	4618      	mov	r0, r3
 8015022:	3708      	adds	r7, #8
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}
 8015028:	0802a9d8 	.word	0x0802a9d8

0801502c <_ZN8touchgfx4ViewI21SecondScreenPresenterED0Ev>:
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f7ff ffe7 	bl	8015008 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 801503a:	2140      	movs	r1, #64	; 0x40
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f013 fa83 	bl	8028548 <_ZdlPvj>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4618      	mov	r0, r3
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <_ZN20SecondScreenViewBaseD1Ev>:

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	4a0d      	ldr	r2, [pc, #52]	; (801508c <_ZN20SecondScreenViewBaseD1Ev+0x40>)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	601a      	str	r2, [r3, #0]
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	33e8      	adds	r3, #232	; 0xe8
 801505e:	4618      	mov	r0, r3
 8015060:	f000 fa0c 	bl	801547c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	3370      	adds	r3, #112	; 0x70
 8015068:	4618      	mov	r0, r3
 801506a:	f000 f8ef 	bl	801524c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	3340      	adds	r3, #64	; 0x40
 8015072:	4618      	mov	r0, r3
 8015074:	f7fd faae 	bl	80125d4 <_ZN8touchgfx3BoxD1Ev>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	4618      	mov	r0, r3
 801507c:	f7ff ffc4 	bl	8015008 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	4618      	mov	r0, r3
 8015084:	3708      	adds	r7, #8
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop
 801508c:	0802a8f8 	.word	0x0802a8f8

08015090 <_ZN20SecondScreenViewBaseD0Ev>:
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f7ff ffd7 	bl	801504c <_ZN20SecondScreenViewBaseD1Ev>
 801509e:	21f8      	movs	r1, #248	; 0xf8
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f013 fa51 	bl	8028548 <_ZdlPvj>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	4618      	mov	r0, r3
 80150aa:	3708      	adds	r7, #8
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <_ZN20SecondScreenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80150b8:	f007 fa46 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 80150bc:	4603      	mov	r3, r0
    }
 80150be:	4618      	mov	r0, r3
 80150c0:	3708      	adds	r7, #8
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
	...

080150c8 <_ZN20SecondScreenViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/secondscreen_screen/SecondScreenViewBase.hpp>
#include <touchgfx/Color.hpp>

SecondScreenViewBase::SecondScreenViewBase() :
 80150c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150cc:	b086      	sub	sp, #24
 80150ce:	af02      	add	r7, sp, #8
 80150d0:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &SecondScreenViewBase::flexButtonCallbackHandler)
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	4618      	mov	r0, r3
 80150d6:	f000 f8e1 	bl	801529c <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>
 80150da:	4a4a      	ldr	r2, [pc, #296]	; (8015204 <_ZN20SecondScreenViewBaseC1Ev+0x13c>)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	601a      	str	r2, [r3, #0]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	3340      	adds	r3, #64	; 0x40
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7fd fa55 	bl	8012594 <_ZN8touchgfx3BoxC1Ev>
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	3370      	adds	r3, #112	; 0x70
 80150ee:	4618      	mov	r0, r3
 80150f0:	f000 f8ea 	bl	80152c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 80150fa:	4b43      	ldr	r3, [pc, #268]	; (8015208 <_ZN20SecondScreenViewBaseC1Ev+0x140>)
 80150fc:	60bb      	str	r3, [r7, #8]
 80150fe:	2300      	movs	r3, #0
 8015100:	60fb      	str	r3, [r7, #12]
 8015102:	f107 0308 	add.w	r3, r7, #8
 8015106:	cb0c      	ldmia	r3, {r2, r3}
 8015108:	6879      	ldr	r1, [r7, #4]
 801510a:	f000 f917 	bl	801533c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    backgroundBox.setPosition(0, 0, 480, 272);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8015114:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015118:	9300      	str	r3, [sp, #0]
 801511a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801511e:	2200      	movs	r2, #0
 8015120:	2100      	movs	r1, #0
 8015122:	f7fb fdd1 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801512c:	2200      	movs	r2, #0
 801512e:	2100      	movs	r1, #0
 8015130:	2000      	movs	r0, #0
 8015132:	f7fd ff83 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015136:	4603      	mov	r3, r0
 8015138:	4619      	mov	r1, r3
 801513a:	4620      	mov	r0, r4
 801513c:	f7fd fa6c 	bl	8012618 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ButtonGoToMainScreen.setBoxWithBorderPosition(0, 0, 133, 272);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8015146:	f44f 7388 	mov.w	r3, #272	; 0x110
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	2385      	movs	r3, #133	; 0x85
 801514e:	2200      	movs	r2, #0
 8015150:	2100      	movs	r1, #0
 8015152:	f000 f913 	bl	801537c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    ButtonGoToMainScreen.setBorderSize(5);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	3370      	adds	r3, #112	; 0x70
 801515a:	2105      	movs	r1, #5
 801515c:	4618      	mov	r0, r3
 801515e:	f000 f92d 	bl	80153bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    ButtonGoToMainScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015168:	2299      	movs	r2, #153	; 0x99
 801516a:	2166      	movs	r1, #102	; 0x66
 801516c:	2000      	movs	r0, #0
 801516e:	f7fd ff65 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015172:	4605      	mov	r5, r0
 8015174:	22cc      	movs	r2, #204	; 0xcc
 8015176:	2199      	movs	r1, #153	; 0x99
 8015178:	2000      	movs	r0, #0
 801517a:	f7fd ff5f 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801517e:	4606      	mov	r6, r0
 8015180:	2266      	movs	r2, #102	; 0x66
 8015182:	2133      	movs	r1, #51	; 0x33
 8015184:	2000      	movs	r0, #0
 8015186:	f7fd ff59 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801518a:	4680      	mov	r8, r0
 801518c:	2299      	movs	r2, #153	; 0x99
 801518e:	2166      	movs	r1, #102	; 0x66
 8015190:	2033      	movs	r0, #51	; 0x33
 8015192:	f7fd ff53 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015196:	4603      	mov	r3, r0
 8015198:	9300      	str	r3, [sp, #0]
 801519a:	4643      	mov	r3, r8
 801519c:	4632      	mov	r2, r6
 801519e:	4629      	mov	r1, r5
 80151a0:	4620      	mov	r0, r4
 80151a2:	f000 f91c 	bl	80153de <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    ButtonGoToMainScreen.setPosition(0, 0, 133, 272);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80151ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80151b0:	9300      	str	r3, [sp, #0]
 80151b2:	2385      	movs	r3, #133	; 0x85
 80151b4:	2200      	movs	r2, #0
 80151b6:	2100      	movs	r1, #0
 80151b8:	f7fb fd86 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    ButtonGoToMainScreen.setAlpha(0);
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	3370      	adds	r3, #112	; 0x70
 80151c0:	2100      	movs	r1, #0
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7fd fc91 	bl	8012aea <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    ButtonGoToMainScreen.setAction(flexButtonCallback);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	33e8      	adds	r3, #232	; 0xe8
 80151d2:	4619      	mov	r1, r3
 80151d4:	4610      	mov	r0, r2
 80151d6:	f7fd fca9 	bl	8012b2c <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 80151da:	687a      	ldr	r2, [r7, #4]
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	3340      	adds	r3, #64	; 0x40
 80151e0:	4619      	mov	r1, r3
 80151e2:	4610      	mov	r0, r2
 80151e4:	f7fd f96e 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ButtonGoToMainScreen);
 80151e8:	687a      	ldr	r2, [r7, #4]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	3370      	adds	r3, #112	; 0x70
 80151ee:	4619      	mov	r1, r3
 80151f0:	4610      	mov	r0, r2
 80151f2:	f7fd f967 	bl	80124c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	4618      	mov	r0, r3
 80151fa:	3710      	adds	r7, #16
 80151fc:	46bd      	mov	sp, r7
 80151fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015202:	bf00      	nop
 8015204:	0802a8f8 	.word	0x0802a8f8
 8015208:	08015221 	.word	0x08015221

0801520c <_ZN20SecondScreenViewBase11setupScreenEv>:

void SecondScreenViewBase::setupScreen()
{
 801520c:	b480      	push	{r7}
 801520e:	b083      	sub	sp, #12
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]

}
 8015214:	bf00      	nop
 8015216:	370c      	adds	r7, #12
 8015218:	46bd      	mov	sp, r7
 801521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521e:	4770      	bx	lr

08015220 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SecondScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonGoToMainScreen)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	3370      	adds	r3, #112	; 0x70
 801522e:	683a      	ldr	r2, [r7, #0]
 8015230:	429a      	cmp	r2, r3
 8015232:	d106      	bne.n	8015242 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //Interaction1
        //When ButtonGoToMainScreen clicked change screen to Main
        //Go to Main with screen transition towards East
        application().gotoMainScreenSlideTransitionEast();
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	f7ff ff3b 	bl	80150b0 <_ZN20SecondScreenViewBase11applicationEv>
 801523a:	4603      	mov	r3, r0
 801523c:	4618      	mov	r0, r3
 801523e:	f7fc f801 	bl	8011244 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv>
    }
}
 8015242:	bf00      	nop
 8015244:	3708      	adds	r7, #8
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
	...

0801524c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	4a08      	ldr	r2, [pc, #32]	; (8015278 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	601a      	str	r2, [r3, #0]
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	3334      	adds	r3, #52	; 0x34
 801525e:	4618      	mov	r0, r3
 8015260:	f7fd fd34 	bl	8012ccc <_ZN8touchgfx13BoxWithBorderD1Ev>
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	4618      	mov	r0, r3
 8015268:	f7ff fe4c 	bl	8014f04 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	4618      	mov	r0, r3
 8015270:	3708      	adds	r7, #8
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}
 8015276:	bf00      	nop
 8015278:	0802a944 	.word	0x0802a944

0801527c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f7ff ffe1 	bl	801524c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801528a:	2178      	movs	r1, #120	; 0x78
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f013 f95b 	bl	8028548 <_ZdlPvj>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	4618      	mov	r0, r3
 8015296:	3708      	adds	r7, #8
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}

0801529c <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>:
    View() : presenter(0)
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f008 f8e4 	bl	801d474 <_ZN8touchgfx6ScreenC1Ev>
 80152ac:	4a05      	ldr	r2, [pc, #20]	; (80152c4 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev+0x28>)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	601a      	str	r2, [r3, #0]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2200      	movs	r2, #0
 80152b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	4618      	mov	r0, r3
 80152bc:	3708      	adds	r7, #8
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}
 80152c2:	bf00      	nop
 80152c4:	0802a9d8 	.word	0x0802a9d8

080152c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7ff fe04 	bl	8014ee0 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 80152d8:	4a17      	ldr	r2, [pc, #92]	; (8015338 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	601a      	str	r2, [r3, #0]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	3334      	adds	r3, #52	; 0x34
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fd fccc 	bl	8012c80 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	3368      	adds	r3, #104	; 0x68
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7fc fe84 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	336c      	adds	r3, #108	; 0x6c
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7fc fe7f 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	3370      	adds	r3, #112	; 0x70
 8015300:	4618      	mov	r0, r3
 8015302:	f7fc fe7a 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	3374      	adds	r3, #116	; 0x74
 801530a:	4618      	mov	r0, r3
 801530c:	f7fc fe75 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	3334      	adds	r3, #52	; 0x34
 8015314:	2200      	movs	r2, #0
 8015316:	2100      	movs	r1, #0
 8015318:	4618      	mov	r0, r3
 801531a:	f7fc ff4b 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	3334      	adds	r3, #52	; 0x34
 8015324:	4619      	mov	r1, r3
 8015326:	4610      	mov	r0, r2
 8015328:	f003 fe44 	bl	8018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	4618      	mov	r0, r3
 8015330:	3708      	adds	r7, #8
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	0802a944 	.word	0x0802a944

0801533c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	4639      	mov	r1, r7
 8015348:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	4618      	mov	r0, r3
 8015350:	f7ff fbac 	bl	8014aac <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8015354:	4a08      	ldr	r2, [pc, #32]	; (8015378 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	68ba      	ldr	r2, [r7, #8]
 801535e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	3308      	adds	r3, #8
 8015364:	463a      	mov	r2, r7
 8015366:	e892 0003 	ldmia.w	r2, {r0, r1}
 801536a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	4618      	mov	r0, r3
 8015372:	3710      	adds	r7, #16
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}
 8015378:	0802a92c 	.word	0x0802a92c

0801537c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801537c:	b590      	push	{r4, r7, lr}
 801537e:	b087      	sub	sp, #28
 8015380:	af02      	add	r7, sp, #8
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	4608      	mov	r0, r1
 8015386:	4611      	mov	r1, r2
 8015388:	461a      	mov	r2, r3
 801538a:	4603      	mov	r3, r0
 801538c:	817b      	strh	r3, [r7, #10]
 801538e:	460b      	mov	r3, r1
 8015390:	813b      	strh	r3, [r7, #8]
 8015392:	4613      	mov	r3, r2
 8015394:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801539c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80153a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80153a4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80153a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153ac:	9300      	str	r3, [sp, #0]
 80153ae:	4623      	mov	r3, r4
 80153b0:	f7fb fc8a 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80153b4:	bf00      	nop
 80153b6:	3714      	adds	r7, #20
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd90      	pop	{r4, r7, pc}

080153bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	460b      	mov	r3, r1
 80153c6:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	3334      	adds	r3, #52	; 0x34
 80153cc:	78fa      	ldrb	r2, [r7, #3]
 80153ce:	4611      	mov	r1, r2
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7fd fcb9 	bl	8012d48 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 80153d6:	bf00      	nop
 80153d8:	3708      	adds	r7, #8
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}

080153de <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 80153de:	b580      	push	{r7, lr}
 80153e0:	b084      	sub	sp, #16
 80153e2:	af00      	add	r7, sp, #0
 80153e4:	60f8      	str	r0, [r7, #12]
 80153e6:	60b9      	str	r1, [r7, #8]
 80153e8:	607a      	str	r2, [r7, #4]
 80153ea:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	68ba      	ldr	r2, [r7, #8]
 80153f0:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	683a      	ldr	r2, [r7, #0]
 80153fc:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	69ba      	ldr	r2, [r7, #24]
 8015402:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	3384      	adds	r3, #132	; 0x84
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	68f8      	ldr	r0, [r7, #12]
 801540e:	4798      	blx	r3
    }
 8015410:	bf00      	nop
 8015412:	3710      	adds	r7, #16
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8015418:	b590      	push	{r4, r7, lr}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	4618      	mov	r0, r3
 801542a:	f7fd fb51 	bl	8012ad0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801542e:	4603      	mov	r3, r0
 8015430:	2b00      	cmp	r3, #0
 8015432:	d002      	beq.n	801543a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	336c      	adds	r3, #108	; 0x6c
 8015438:	e001      	b.n	801543e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	3368      	adds	r3, #104	; 0x68
 801543e:	6819      	ldr	r1, [r3, #0]
 8015440:	4620      	mov	r0, r4
 8015442:	f7fd fc65 	bl	8012d10 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	4618      	mov	r0, r3
 8015450:	f7fd fb3e 	bl	8012ad0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015454:	4603      	mov	r3, r0
 8015456:	2b00      	cmp	r3, #0
 8015458:	d002      	beq.n	8015460 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	3374      	adds	r3, #116	; 0x74
 801545e:	e001      	b.n	8015464 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	3370      	adds	r3, #112	; 0x70
 8015464:	6819      	ldr	r1, [r3, #0]
 8015466:	4620      	mov	r0, r4
 8015468:	f7fd fc60 	bl	8012d2c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	4618      	mov	r0, r3
 8015470:	f7fd fb6a 	bl	8012b48 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8015474:	bf00      	nop
 8015476:	370c      	adds	r7, #12
 8015478:	46bd      	mov	sp, r7
 801547a:	bd90      	pop	{r4, r7, pc}

0801547c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	4a05      	ldr	r2, [pc, #20]	; (801549c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	601a      	str	r2, [r3, #0]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	4618      	mov	r0, r3
 801548e:	f7ff fbef 	bl	8014c70 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	4618      	mov	r0, r3
 8015496:	3708      	adds	r7, #8
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}
 801549c:	0802a92c 	.word	0x0802a92c

080154a0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b082      	sub	sp, #8
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f7ff ffe7 	bl	801547c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80154ae:	2110      	movs	r1, #16
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f013 f849 	bl	8028548 <_ZdlPvj>
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	4618      	mov	r0, r3
 80154ba:	3708      	adds	r7, #8
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}

080154c0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	687a      	ldr	r2, [r7, #4]
 80154d0:	68d2      	ldr	r2, [r2, #12]
 80154d2:	1052      	asrs	r2, r2, #1
 80154d4:	1898      	adds	r0, r3, r2
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	68db      	ldr	r3, [r3, #12]
 80154da:	f003 0301 	and.w	r3, r3, #1
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d102      	bne.n	80154e8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	689b      	ldr	r3, [r3, #8]
 80154e6:	e00a      	b.n	80154fe <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	685b      	ldr	r3, [r3, #4]
 80154ec:	687a      	ldr	r2, [r7, #4]
 80154ee:	68d2      	ldr	r2, [r2, #12]
 80154f0:	1052      	asrs	r2, r2, #1
 80154f2:	4413      	add	r3, r2
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	6892      	ldr	r2, [r2, #8]
 80154fa:	4413      	add	r3, r2
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	6839      	ldr	r1, [r7, #0]
 8015500:	4798      	blx	r3
    }
 8015502:	bf00      	nop
 8015504:	3708      	adds	r7, #8
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}

0801550a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 801550a:	b480      	push	{r7}
 801550c:	b083      	sub	sp, #12
 801550e:	af00      	add	r7, sp, #0
 8015510:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	685b      	ldr	r3, [r3, #4]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d010      	beq.n	801553c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	689b      	ldr	r3, [r3, #8]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d107      	bne.n	8015532 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	68db      	ldr	r3, [r3, #12]
 8015526:	f003 0301 	and.w	r3, r3, #1
 801552a:	2b00      	cmp	r3, #0
 801552c:	d101      	bne.n	8015532 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801552e:	2301      	movs	r3, #1
 8015530:	e000      	b.n	8015534 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8015532:	2300      	movs	r3, #0
 8015534:	2b01      	cmp	r3, #1
 8015536:	d001      	beq.n	801553c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8015538:	2301      	movs	r3, #1
 801553a:	e000      	b.n	801553e <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 801553c:	2300      	movs	r3, #0
    }
 801553e:	4618      	mov	r0, r3
 8015540:	370c      	adds	r7, #12
 8015542:	46bd      	mov	sp, r7
 8015544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015548:	4770      	bx	lr

0801554a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 801554a:	b590      	push	{r4, r7, lr}
 801554c:	b083      	sub	sp, #12
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	4618      	mov	r0, r3
 801555c:	f7fd fad9 	bl	8012b12 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8015560:	4603      	mov	r3, r0
 8015562:	4619      	mov	r1, r3
 8015564:	4620      	mov	r0, r4
 8015566:	f7fd fbff 	bl	8012d68 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	4618      	mov	r0, r3
 801556e:	f7fd faf5 	bl	8012b5c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8015572:	bf00      	nop
 8015574:	370c      	adds	r7, #12
 8015576:	46bd      	mov	sp, r7
 8015578:	bd90      	pop	{r4, r7, pc}
	...

0801557c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801557c:	b480      	push	{r7}
 801557e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8015580:	4b02      	ldr	r3, [pc, #8]	; (801558c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8015582:	4618      	mov	r0, r3
 8015584:	46bd      	mov	sp, r7
 8015586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558a:	4770      	bx	lr
 801558c:	0802aa98 	.word	0x0802aa98

08015590 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8015590:	b480      	push	{r7}
 8015592:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8015594:	2303      	movs	r3, #3
}
 8015596:	4618      	mov	r0, r3
 8015598:	46bd      	mov	sp, r7
 801559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559e:	4770      	bx	lr

080155a0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80155a0:	b480      	push	{r7}
 80155a2:	b085      	sub	sp, #20
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	60f8      	str	r0, [r7, #12]
 80155a8:	60b9      	str	r1, [r7, #8]
 80155aa:	4613      	mov	r3, r2
 80155ac:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80155ae:	4a07      	ldr	r2, [pc, #28]	; (80155cc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80155b4:	4a06      	ldr	r2, [pc, #24]	; (80155d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80155ba:	4a06      	ldr	r2, [pc, #24]	; (80155d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80155bc:	88fb      	ldrh	r3, [r7, #6]
 80155be:	8013      	strh	r3, [r2, #0]
    }
 80155c0:	bf00      	nop
 80155c2:	3714      	adds	r7, #20
 80155c4:	46bd      	mov	sp, r7
 80155c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ca:	4770      	bx	lr
 80155cc:	2000bf80 	.word	0x2000bf80
 80155d0:	2000bf88 	.word	0x2000bf88
 80155d4:	2000bf84 	.word	0x2000bf84

080155d8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80155d8:	b590      	push	{r4, r7, lr}
 80155da:	b085      	sub	sp, #20
 80155dc:	af00      	add	r7, sp, #0
 80155de:	4603      	mov	r3, r0
 80155e0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80155e2:	2300      	movs	r3, #0
 80155e4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80155e6:	88fb      	ldrh	r3, [r7, #6]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d127      	bne.n	801563c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80155ec:	88fb      	ldrh	r3, [r7, #6]
 80155ee:	4a1e      	ldr	r2, [pc, #120]	; (8015668 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80155f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d016      	beq.n	8015626 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80155f8:	88fb      	ldrh	r3, [r7, #6]
 80155fa:	4a1b      	ldr	r2, [pc, #108]	; (8015668 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80155fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015600:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	68ba      	ldr	r2, [r7, #8]
 8015608:	4413      	add	r3, r2
 801560a:	4a18      	ldr	r2, [pc, #96]	; (801566c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801560c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	685b      	ldr	r3, [r3, #4]
 8015612:	68ba      	ldr	r2, [r7, #8]
 8015614:	4413      	add	r3, r2
 8015616:	4a16      	ldr	r2, [pc, #88]	; (8015670 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015618:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	68ba      	ldr	r2, [r7, #8]
 8015620:	4413      	add	r3, r2
 8015622:	60fb      	str	r3, [r7, #12]
 8015624:	e00a      	b.n	801563c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015626:	4b11      	ldr	r3, [pc, #68]	; (801566c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015628:	4a12      	ldr	r2, [pc, #72]	; (8015674 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801562a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801562c:	4a12      	ldr	r2, [pc, #72]	; (8015678 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801562e:	4b10      	ldr	r3, [pc, #64]	; (8015670 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015630:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015632:	88fb      	ldrh	r3, [r7, #6]
 8015634:	4a11      	ldr	r2, [pc, #68]	; (801567c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801563a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d00d      	beq.n	801565e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8015642:	4a0f      	ldr	r2, [pc, #60]	; (8015680 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8015644:	88fb      	ldrh	r3, [r7, #6]
 8015646:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8015648:	f000 f83e 	bl	80156c8 <_ZN17TypedTextDatabase8getFontsEv>
 801564c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801564e:	f000 f833 	bl	80156b8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015652:	4603      	mov	r3, r0
 8015654:	461a      	mov	r2, r3
 8015656:	4621      	mov	r1, r4
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f7ff ffa1 	bl	80155a0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801565e:	bf00      	nop
 8015660:	3714      	adds	r7, #20
 8015662:	46bd      	mov	sp, r7
 8015664:	bd90      	pop	{r4, r7, pc}
 8015666:	bf00      	nop
 8015668:	200086f4 	.word	0x200086f4
 801566c:	200086fc 	.word	0x200086fc
 8015670:	20008700 	.word	0x20008700
 8015674:	08065700 	.word	0x08065700
 8015678:	08065628 	.word	0x08065628
 801567c:	08065864 	.word	0x08065864
 8015680:	200086f8 	.word	0x200086f8

08015684 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8015684:	b480      	push	{r7}
 8015686:	b083      	sub	sp, #12
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	460b      	mov	r3, r1
 801568e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8015690:	4b07      	ldr	r3, [pc, #28]	; (80156b0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8015692:	681a      	ldr	r2, [r3, #0]
 8015694:	4b07      	ldr	r3, [pc, #28]	; (80156b4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8015696:	6819      	ldr	r1, [r3, #0]
 8015698:	887b      	ldrh	r3, [r7, #2]
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	440b      	add	r3, r1
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	005b      	lsls	r3, r3, #1
 80156a2:	4413      	add	r3, r2
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	370c      	adds	r7, #12
 80156a8:	46bd      	mov	sp, r7
 80156aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ae:	4770      	bx	lr
 80156b0:	200086fc 	.word	0x200086fc
 80156b4:	20008700 	.word	0x20008700

080156b8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80156b8:	b480      	push	{r7}
 80156ba:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80156bc:	2336      	movs	r3, #54	; 0x36
}
 80156be:	4618      	mov	r0, r3
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr

080156c8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80156c8:	b480      	push	{r7}
 80156ca:	af00      	add	r7, sp, #0
    return _fonts;
 80156cc:	4b02      	ldr	r3, [pc, #8]	; (80156d8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr
 80156d8:	20008704 	.word	0x20008704

080156dc <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80156dc:	b580      	push	{r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	6039      	str	r1, [r7, #0]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d127      	bne.n	801573c <_Z41__static_initialization_and_destruction_0ii+0x60>
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156f2:	4293      	cmp	r3, r2
 80156f4:	d122      	bne.n	801573c <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80156f6:	f7fb f84f 	bl	8010798 <_Z25getFont_Asap_Bold_18_4bppv>
 80156fa:	4603      	mov	r3, r0
};
 80156fc:	4a11      	ldr	r2, [pc, #68]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80156fe:	6013      	str	r3, [r2, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8015700:	f7fb f946 	bl	8010990 <_Z25getFont_Asap_Bold_40_4bppv>
 8015704:	4603      	mov	r3, r0
};
 8015706:	4a0f      	ldr	r2, [pc, #60]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015708:	6053      	str	r3, [r2, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 801570a:	f7fb f8ed 	bl	80108e8 <_Z25getFont_Asap_Bold_30_4bppv>
 801570e:	4603      	mov	r3, r0
};
 8015710:	4a0c      	ldr	r2, [pc, #48]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015712:	6093      	str	r3, [r2, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8015714:	f7fa ffec 	bl	80106f0 <_Z25getFont_Asap_Bold_12_4bppv>
 8015718:	4603      	mov	r3, r0
};
 801571a:	4a0a      	ldr	r2, [pc, #40]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801571c:	60d3      	str	r3, [r2, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 801571e:	f7fb f98b 	bl	8010a38 <_Z25getFont_Asap_Bold_60_4bppv>
 8015722:	4603      	mov	r3, r0
};
 8015724:	4a07      	ldr	r2, [pc, #28]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015726:	6113      	str	r3, [r2, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8015728:	f7fb f88a 	bl	8010840 <_Z25getFont_Asap_Bold_21_4bppv>
 801572c:	4603      	mov	r3, r0
};
 801572e:	4a05      	ldr	r2, [pc, #20]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015730:	6153      	str	r3, [r2, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8015732:	f7fa ff89 	bl	8010648 <_Z25getFont_Asap_Bold_10_4bppv>
 8015736:	4603      	mov	r3, r0
};
 8015738:	4a02      	ldr	r2, [pc, #8]	; (8015744 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801573a:	6193      	str	r3, [r2, #24]
}  // namespace TypedTextDatabase
 801573c:	bf00      	nop
 801573e:	3708      	adds	r7, #8
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}
 8015744:	20008704 	.word	0x20008704

08015748 <_GLOBAL__sub_I__fonts>:
 8015748:	b580      	push	{r7, lr}
 801574a:	af00      	add	r7, sp, #0
 801574c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015750:	2001      	movs	r0, #1
 8015752:	f7ff ffc3 	bl	80156dc <_Z41__static_initialization_and_destruction_0ii>
 8015756:	bd80      	pop	{r7, pc}

08015758 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	4a05      	ldr	r2, [pc, #20]	; (8015778 <_ZN19FrontendApplicationD1Ev+0x20>)
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	601a      	str	r2, [r3, #0]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	4618      	mov	r0, r3
 801576a:	f7fb fc4f 	bl	801100c <_ZN23FrontendApplicationBaseD1Ev>
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	4618      	mov	r0, r3
 8015772:	3708      	adds	r7, #8
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}
 8015778:	0802aadc 	.word	0x0802aadc

0801577c <_ZN19FrontendApplicationD0Ev>:
 801577c:	b580      	push	{r7, lr}
 801577e:	b082      	sub	sp, #8
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f7ff ffe7 	bl	8015758 <_ZN19FrontendApplicationD1Ev>
 801578a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f012 feda 	bl	8028548 <_ZdlPvj>
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	4618      	mov	r0, r3
 8015798:	3708      	adds	r7, #8
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}

0801579e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801579e:	b580      	push	{r7, lr}
 80157a0:	b082      	sub	sp, #8
 80157a2:	af00      	add	r7, sp, #0
 80157a4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80157ac:	4618      	mov	r0, r3
 80157ae:	f000 fd1d 	bl	80161ec <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	4618      	mov	r0, r3
 80157b6:	f006 fde1 	bl	801c37c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80157ba:	bf00      	nop
 80157bc:	3708      	adds	r7, #8
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
	...

080157c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	68b9      	ldr	r1, [r7, #8]
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7fb fc92 	bl	8011100 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80157dc:	4a03      	ldr	r2, [pc, #12]	; (80157ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	601a      	str	r2, [r3, #0]
{
}
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	4618      	mov	r0, r3
 80157e6:	3710      	adds	r7, #16
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	0802aadc 	.word	0x0802aadc

080157f0 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80157f0:	b480      	push	{r7}
 80157f2:	b083      	sub	sp, #12
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
    {
    }
 80157f8:	bf00      	nop
 80157fa:	370c      	adds	r7, #12
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8015804:	b480      	push	{r7}
 8015806:	b083      	sub	sp, #12
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
    {
    }
 801580c:	bf00      	nop
 801580e:	370c      	adds	r7, #12
 8015810:	46bd      	mov	sp, r7
 8015812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015816:	4770      	bx	lr

08015818 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8015818:	b480      	push	{r7}
 801581a:	b083      	sub	sp, #12
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
    {
 8015820:	4a04      	ldr	r2, [pc, #16]	; (8015834 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	601a      	str	r2, [r3, #0]
    }
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	4618      	mov	r0, r3
 801582a:	370c      	adds	r7, #12
 801582c:	46bd      	mov	sp, r7
 801582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015832:	4770      	bx	lr
 8015834:	0802ab68 	.word	0x0802ab68

08015838 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
    }
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f7ff ffe9 	bl	8015818 <_ZN8touchgfx9PresenterD1Ev>
 8015846:	2104      	movs	r1, #4
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f012 fe7d 	bl	8028548 <_ZdlPvj>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	4618      	mov	r0, r3
 8015852:	3708      	adds	r7, #8
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8015858:	b480      	push	{r7}
 801585a:	b083      	sub	sp, #12
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
    {
 8015860:	4a04      	ldr	r2, [pc, #16]	; (8015874 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	601a      	str	r2, [r3, #0]
    }
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	4618      	mov	r0, r3
 801586a:	370c      	adds	r7, #12
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr
 8015874:	0802ab68 	.word	0x0802ab68

08015878 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	4a06      	ldr	r2, [pc, #24]	; (801589c <_ZN13ModelListenerC1Ev+0x24>)
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	601a      	str	r2, [r3, #0]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2200      	movs	r2, #0
 801588a:	605a      	str	r2, [r3, #4]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	4618      	mov	r0, r3
 8015890:	370c      	adds	r7, #12
 8015892:	46bd      	mov	sp, r7
 8015894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015898:	4770      	bx	lr
 801589a:	bf00      	nop
 801589c:	0802ab50 	.word	0x0802ab50

080158a0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80158a0:	b480      	push	{r7}
 80158a2:	b083      	sub	sp, #12
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
 80158a8:	4a04      	ldr	r2, [pc, #16]	; (80158bc <_ZN13ModelListenerD1Ev+0x1c>)
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	601a      	str	r2, [r3, #0]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4618      	mov	r0, r3
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ba:	4770      	bx	lr
 80158bc:	0802ab50 	.word	0x0802ab50

080158c0 <_ZN13ModelListenerD0Ev>:
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f7ff ffe9 	bl	80158a0 <_ZN13ModelListenerD1Ev>
 80158ce:	2108      	movs	r1, #8
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f012 fe39 	bl	8028548 <_ZdlPvj>
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	4618      	mov	r0, r3
 80158da:	3708      	adds	r7, #8
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}

080158e0 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 80158e0:	b480      	push	{r7}
 80158e2:	b083      	sub	sp, #12
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	6039      	str	r1, [r7, #0]
 80158ea:	bf00      	nop
 80158ec:	370c      	adds	r7, #12
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr

080158f6 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 80158f6:	b480      	push	{r7}
 80158f8:	b083      	sub	sp, #12
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
 80158fe:	6039      	str	r1, [r7, #0]
 8015900:	bf00      	nop
 8015902:	370c      	adds	r7, #12
 8015904:	46bd      	mov	sp, r7
 8015906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590a:	4770      	bx	lr

0801590c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 801590c:	b580      	push	{r7, lr}
 801590e:	b082      	sub	sp, #8
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	4a09      	ldr	r2, [pc, #36]	; (801593c <_ZN13MainPresenterD1Ev+0x30>)
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	601a      	str	r2, [r3, #0]
 801591a:	4a09      	ldr	r2, [pc, #36]	; (8015940 <_ZN13MainPresenterD1Ev+0x34>)
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	605a      	str	r2, [r3, #4]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	3304      	adds	r3, #4
 8015924:	4618      	mov	r0, r3
 8015926:	f7ff ffbb 	bl	80158a0 <_ZN13ModelListenerD1Ev>
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	4618      	mov	r0, r3
 801592e:	f7ff ff73 	bl	8015818 <_ZN8touchgfx9PresenterD1Ev>
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	4618      	mov	r0, r3
 8015936:	3708      	adds	r7, #8
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	0802ab18 	.word	0x0802ab18
 8015940:	0802ab38 	.word	0x0802ab38

08015944 <_ZThn4_N13MainPresenterD1Ev>:
 8015944:	f1a0 0004 	sub.w	r0, r0, #4
 8015948:	e7e0      	b.n	801590c <_ZN13MainPresenterD1Ev>
 801594a:	bf00      	nop

0801594c <_ZN13MainPresenterD0Ev>:
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f7ff ffd9 	bl	801590c <_ZN13MainPresenterD1Ev>
 801595a:	2110      	movs	r1, #16
 801595c:	6878      	ldr	r0, [r7, #4]
 801595e:	f012 fdf3 	bl	8028548 <_ZdlPvj>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	4618      	mov	r0, r3
 8015966:	3708      	adds	r7, #8
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <_ZThn4_N13MainPresenterD0Ev>:
 801596c:	f1a0 0004 	sub.w	r0, r0, #4
 8015970:	e7ec      	b.n	801594c <_ZN13MainPresenterD0Ev>
	...

08015974 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8015974:	b580      	push	{r7, lr}
 8015976:	b082      	sub	sp, #8
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	6039      	str	r1, [r7, #0]
    : view(v)
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	4618      	mov	r0, r3
 8015982:	f7ff ff69 	bl	8015858 <_ZN8touchgfx9PresenterC1Ev>
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	3304      	adds	r3, #4
 801598a:	4618      	mov	r0, r3
 801598c:	f7ff ff74 	bl	8015878 <_ZN13ModelListenerC1Ev>
 8015990:	4a06      	ldr	r2, [pc, #24]	; (80159ac <_ZN13MainPresenterC1ER8MainView+0x38>)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	601a      	str	r2, [r3, #0]
 8015996:	4a06      	ldr	r2, [pc, #24]	; (80159b0 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	605a      	str	r2, [r3, #4]
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	683a      	ldr	r2, [r7, #0]
 80159a0:	60da      	str	r2, [r3, #12]
{
}
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	4618      	mov	r0, r3
 80159a6:	3708      	adds	r7, #8
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	0802ab18 	.word	0x0802ab18
 80159b0:	0802ab38 	.word	0x0802ab38

080159b4 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80159b4:	b480      	push	{r7}
 80159b6:	b083      	sub	sp, #12
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
}
 80159bc:	bf00      	nop
 80159be:	370c      	adds	r7, #12
 80159c0:	46bd      	mov	sp, r7
 80159c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c6:	4770      	bx	lr

080159c8 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80159c8:	b480      	push	{r7}
 80159ca:	b083      	sub	sp, #12
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
}
 80159d0:	bf00      	nop
 80159d2:	370c      	adds	r7, #12
 80159d4:	46bd      	mov	sp, r7
 80159d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159da:	4770      	bx	lr

080159dc <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b082      	sub	sp, #8
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
 80159e4:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	6839      	ldr	r1, [r7, #0]
 80159ec:	4618      	mov	r0, r3
 80159ee:	f000 f9e9 	bl	8015dc4 <_ZN8MainView9updateValEPh>
}
 80159f2:	bf00      	nop
 80159f4:	3708      	adds	r7, #8
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}

080159fa <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 80159fa:	f1a0 0004 	sub.w	r0, r0, #4
 80159fe:	f7ff bfed 	b.w	80159dc <_ZN13MainPresenter11setNewValueEPh>

08015a02 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8015a02:	b580      	push	{r7, lr}
 8015a04:	b082      	sub	sp, #8
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	6078      	str	r0, [r7, #4]
 8015a0a:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	68db      	ldr	r3, [r3, #12]
 8015a10:	6839      	ldr	r1, [r7, #0]
 8015a12:	4618      	mov	r0, r3
 8015a14:	f000 f8fa 	bl	8015c0c <_ZN8MainView14updateSettingsEPh>
}
 8015a18:	bf00      	nop
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}

08015a20 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8015a20:	f1a0 0004 	sub.w	r0, r0, #4
 8015a24:	f7ff bfed 	b.w	8015a02 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08015a28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b084      	sub	sp, #16
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	460b      	mov	r3, r1
 8015a32:	607a      	str	r2, [r7, #4]
 8015a34:	ed87 0a00 	vstr	s0, [r7]
 8015a38:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8015a3a:	463b      	mov	r3, r7
 8015a3c:	8979      	ldrh	r1, [r7, #10]
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	68f8      	ldr	r0, [r7, #12]
 8015a42:	f008 ff71 	bl	801e928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8015a46:	4603      	mov	r3, r0
    }
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3710      	adds	r7, #16
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8015a50:	b480      	push	{r7}
 8015a52:	b083      	sub	sp, #12
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
        return rect.width;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8015a5e:	4618      	mov	r0, r3
 8015a60:	370c      	adds	r7, #12
 8015a62:	46bd      	mov	sp, r7
 8015a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a68:	4770      	bx	lr

08015a6a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8015a6a:	b480      	push	{r7}
 8015a6c:	b083      	sub	sp, #12
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
        return rect.height;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8015a78:	4618      	mov	r0, r3
 8015a7a:	370c      	adds	r7, #12
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a82:	4770      	bx	lr

08015a84 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	4a05      	ldr	r2, [pc, #20]	; (8015aa4 <_ZN8MainViewD1Ev+0x20>)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	601a      	str	r2, [r3, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fd f999 	bl	8012dcc <_ZN12MainViewBaseD1Ev>
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	0802ab80 	.word	0x0802ab80

08015aa8 <_ZN8MainViewD0Ev>:
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f7ff ffe7 	bl	8015a84 <_ZN8MainViewD1Ev>
 8015ab6:	f642 0144 	movw	r1, #10308	; 0x2844
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f012 fd44 	bl	8028548 <_ZdlPvj>
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
	...

08015acc <_ZN8MainViewC1Ev>:
static int prev_egt = 0;
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView()
 8015acc:	b590      	push	{r4, r7, lr}
 8015ace:	b083      	sub	sp, #12
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7fd fada 	bl	8013090 <_ZN12MainViewBaseC1Ev>
 8015adc:	4a15      	ldr	r2, [pc, #84]	; (8015b34 <_ZN8MainViewC1Ev+0x68>)
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8015ae2:	4b15      	ldr	r3, [pc, #84]	; (8015b38 <_ZN8MainViewC1Ev+0x6c>)
 8015ae4:	881b      	ldrh	r3, [r3, #0]
 8015ae6:	461c      	mov	r4, r3
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8015aee:	4618      	mov	r0, r3
 8015af0:	f7ff ffae 	bl	8015a50 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015af4:	4603      	mov	r3, r0
 8015af6:	429c      	cmp	r4, r3
 8015af8:	dc0b      	bgt.n	8015b12 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8015afa:	4b10      	ldr	r3, [pc, #64]	; (8015b3c <_ZN8MainViewC1Ev+0x70>)
 8015afc:	881b      	ldrh	r3, [r3, #0]
 8015afe:	461c      	mov	r4, r3
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7ff ffaf 	bl	8015a6a <_ZNK8touchgfx8Drawable9getHeightEv>
 8015b0c:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8015b0e:	429c      	cmp	r4, r3
 8015b10:	dd01      	ble.n	8015b16 <_ZN8MainViewC1Ev+0x4a>
 8015b12:	2301      	movs	r3, #1
 8015b14:	e000      	b.n	8015b18 <_ZN8MainViewC1Ev+0x4c>
 8015b16:	2300      	movs	r3, #0
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d005      	beq.n	8015b28 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	3340      	adds	r3, #64	; 0x40
 8015b20:	2101      	movs	r1, #1
 8015b22:	4618      	mov	r0, r3
 8015b24:	f7fc fbb7 	bl	8012296 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	370c      	adds	r7, #12
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd90      	pop	{r4, r7, pc}
 8015b32:	bf00      	nop
 8015b34:	0802ab80 	.word	0x0802ab80
 8015b38:	2000bee2 	.word	0x2000bee2
 8015b3c:	2000bee4 	.word	0x2000bee4

08015b40 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8015b40:	b480      	push	{r7}
 8015b42:	b083      	sub	sp, #12
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
}
 8015b48:	bf00      	nop
 8015b4a:	370c      	adds	r7, #12
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b52:	4770      	bx	lr

08015b54 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
}
 8015b5c:	bf00      	nop
 8015b5e:	370c      	adds	r7, #12
 8015b60:	46bd      	mov	sp, r7
 8015b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b66:	4770      	bx	lr

08015b68 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8015b6e:	2200      	movs	r2, #0
 8015b70:	2100      	movs	r1, #0
 8015b72:	2000      	movs	r0, #0
 8015b74:	f7fd fa62 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	607b      	str	r3, [r7, #4]
}
 8015b7c:	bf00      	nop
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3708      	adds	r7, #8
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
	...

08015b88 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0

	color_index ++;
 8015b8e:	4b1e      	ldr	r3, [pc, #120]	; (8015c08 <_ZL20getColorFromRevLimitv+0x80>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	3301      	adds	r3, #1
 8015b94:	4a1c      	ldr	r2, [pc, #112]	; (8015c08 <_ZL20getColorFromRevLimitv+0x80>)
 8015b96:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8015b98:	4b1b      	ldr	r3, [pc, #108]	; (8015c08 <_ZL20getColorFromRevLimitv+0x80>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2b02      	cmp	r3, #2
 8015b9e:	dd02      	ble.n	8015ba6 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8015ba0:	4b19      	ldr	r3, [pc, #100]	; (8015c08 <_ZL20getColorFromRevLimitv+0x80>)
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	2100      	movs	r1, #0
 8015baa:	20ff      	movs	r0, #255	; 0xff
 8015bac:	f7fd fa46 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	2100      	movs	r1, #0
 8015bb8:	2000      	movs	r0, #0
 8015bba:	f7fd fa3f 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8015bc2:	22ff      	movs	r2, #255	; 0xff
 8015bc4:	21ff      	movs	r1, #255	; 0xff
 8015bc6:	20ff      	movs	r0, #255	; 0xff
 8015bc8:	f7fd fa38 	bl	801303c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8015bd0:	463b      	mov	r3, r7
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7fc fa11 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8015bd8:	4b0b      	ldr	r3, [pc, #44]	; (8015c08 <_ZL20getColorFromRevLimitv+0x80>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d101      	bne.n	8015be4 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8015be4:	4b08      	ldr	r3, [pc, #32]	; (8015c08 <_ZL20getColorFromRevLimitv+0x80>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	2b01      	cmp	r3, #1
 8015bea:	d101      	bne.n	8015bf0 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8015bf0:	4b05      	ldr	r3, [pc, #20]	; (8015c08 <_ZL20getColorFromRevLimitv+0x80>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b02      	cmp	r3, #2
 8015bf6:	d101      	bne.n	8015bfc <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8015bfc:	683b      	ldr	r3, [r7, #0]
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	20008720 	.word	0x20008720

08015c0c <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b086      	sub	sp, #24
 8015c10:	af02      	add	r7, sp, #8
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	4a66      	ldr	r2, [pc, #408]	; (8015db8 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8015c20:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	6a1b      	ldr	r3, [r3, #32]
 8015c2c:	ee07 3a90 	vmov	s15, r3
 8015c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c34:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8015dbc <_ZN8MainView14updateSettingsEPh+0x1b0>
 8015c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015c40:	ee17 3a90 	vmov	r3, s15
 8015c44:	b21a      	sxth	r2, r3
 8015c46:	2300      	movs	r3, #0
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	f003 f87d 	bl	8018d4c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f007 f8a3 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	4a55      	ldr	r2, [pc, #340]	; (8015dc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015c6a:	2102      	movs	r1, #2
 8015c6c:	f008 fd02 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8015c76:	4618      	mov	r0, r3
 8015c78:	f005 f862 	bl	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8015c82:	4618      	mov	r0, r3
 8015c84:	f007 f88e 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f603 3088 	addw	r0, r3, #2952	; 0xb88
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	689b      	ldr	r3, [r3, #8]
 8015c92:	4a4b      	ldr	r2, [pc, #300]	; (8015dc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015c94:	2102      	movs	r1, #2
 8015c96:	f008 fced 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f005 f84d 	bl	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015cac:	4618      	mov	r0, r3
 8015cae:	f007 f879 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	68db      	ldr	r3, [r3, #12]
 8015cbc:	4a40      	ldr	r2, [pc, #256]	; (8015dc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015cbe:	2102      	movs	r1, #2
 8015cc0:	f008 fcd8 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f005 f838 	bl	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f007 f864 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	691b      	ldr	r3, [r3, #16]
 8015ce6:	4a36      	ldr	r2, [pc, #216]	; (8015dc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015ce8:	2102      	movs	r1, #2
 8015cea:	f008 fcc3 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f005 f823 	bl	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8015d00:	4618      	mov	r0, r3
 8015d02:	f007 f84f 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f603 3094 	addw	r0, r3, #2964	; 0xb94
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	695b      	ldr	r3, [r3, #20]
 8015d10:	4a2b      	ldr	r2, [pc, #172]	; (8015dc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015d12:	2102      	movs	r1, #2
 8015d14:	f008 fcae 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f005 f80e 	bl	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f007 f83a 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f603 3098 	addw	r0, r3, #2968	; 0xb98
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	699b      	ldr	r3, [r3, #24]
 8015d3a:	4a21      	ldr	r2, [pc, #132]	; (8015dc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015d3c:	2102      	movs	r1, #2
 8015d3e:	f008 fc99 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f004 fff9 	bl	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8015d54:	4618      	mov	r0, r3
 8015d56:	f007 f825 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f603 309c 	addw	r0, r3, #2972	; 0xb9c
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	69db      	ldr	r3, [r3, #28]
 8015d64:	4a16      	ldr	r2, [pc, #88]	; (8015dc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015d66:	2102      	movs	r1, #2
 8015d68:	f008 fc84 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015d72:	4618      	mov	r0, r3
 8015d74:	f004 ffe4 	bl	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f007 f810 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f503 603a 	add.w	r0, r3, #2976	; 0xba0
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	6a1b      	ldr	r3, [r3, #32]
 8015d8e:	4a0c      	ldr	r2, [pc, #48]	; (8015dc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015d90:	2102      	movs	r1, #2
 8015d92:	f008 fc6f 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f004 ffcf 	bl	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8015da8:	4618      	mov	r0, r3
 8015daa:	f006 fffb 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8015dae:	bf00      	nop
 8015db0:	3710      	adds	r7, #16
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}
 8015db6:	bf00      	nop
 8015db8:	20000038 	.word	0x20000038
 8015dbc:	447a0000 	.word	0x447a0000
 8015dc0:	0802a188 	.word	0x0802a188

08015dc4 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8015dc4:	b590      	push	{r4, r7, lr}
 8015dc6:	b085      	sub	sp, #20
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
 8015dcc:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	681a      	ldr	r2, [r3, #0]
 8015dd6:	4b0e      	ldr	r3, [pc, #56]	; (8015e10 <_ZN8MainView9updateValEPh+0x4c>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	bfac      	ite	ge
 8015dde:	2301      	movge	r3, #1
 8015de0:	2300      	movlt	r3, #0
 8015de2:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8015de4:	7afb      	ldrb	r3, [r7, #11]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d016      	beq.n	8015e18 <_ZN8MainView9updateValEPh+0x54>
	{
		background_is_black = false;
 8015dea:	4b0a      	ldr	r3, [pc, #40]	; (8015e14 <_ZN8MainView9updateValEPh+0x50>)
 8015dec:	2200      	movs	r2, #0
 8015dee:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015df6:	f7ff fec7 	bl	8015b88 <_ZL20getColorFromRevLimitv>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	4620      	mov	r0, r4
 8015e00:	f7fc fc0a 	bl	8012618 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	3340      	adds	r3, #64	; 0x40
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f006 ffcb 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015e0e:	e01c      	b.n	8015e4a <_ZN8MainView9updateValEPh+0x86>
 8015e10:	20000038 	.word	0x20000038
 8015e14:	20008744 	.word	0x20008744
	}
	else if(!background_is_black){
 8015e18:	4bac      	ldr	r3, [pc, #688]	; (80160cc <_ZN8MainView9updateValEPh+0x308>)
 8015e1a:	781b      	ldrb	r3, [r3, #0]
 8015e1c:	f083 0301 	eor.w	r3, r3, #1
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d011      	beq.n	8015e4a <_ZN8MainView9updateValEPh+0x86>
		backgroundBox.setColor(getBlackColor());
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015e2c:	f7ff fe9c 	bl	8015b68 <_ZL13getBlackColorv>
 8015e30:	4603      	mov	r3, r0
 8015e32:	4619      	mov	r1, r3
 8015e34:	4620      	mov	r0, r4
 8015e36:	f7fc fbef 	bl	8012618 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	3340      	adds	r3, #64	; 0x40
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f006 ffb0 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8015e44:	4ba1      	ldr	r3, [pc, #644]	; (80160cc <_ZN8MainView9updateValEPh+0x308>)
 8015e46:	2201      	movs	r2, #1
 8015e48:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	4ba0      	ldr	r3, [pc, #640]	; (80160d0 <_ZN8MainView9updateValEPh+0x30c>)
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	429a      	cmp	r2, r3
 8015e54:	d021      	beq.n	8015e9a <_ZN8MainView9updateValEPh+0xd6>
		prev_rpm = values->rpm;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	4a9d      	ldr	r2, [pc, #628]	; (80160d0 <_ZN8MainView9updateValEPh+0x30c>)
 8015e5c:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	4619      	mov	r1, r3
 8015e6a:	4610      	mov	r0, r2
 8015e6c:	f002 fe58 	bl	8018b20 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8015e76:	4618      	mov	r0, r3
 8015e78:	f006 ff94 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f603 30d6 	addw	r0, r3, #3030	; 0xbd6
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	4a93      	ldr	r2, [pc, #588]	; (80160d4 <_ZN8MainView9updateValEPh+0x310>)
 8015e88:	2105      	movs	r1, #5
 8015e8a:	f008 fbf3 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8015e94:	4618      	mov	r0, r3
 8015e96:	f006 ff85 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->map != prev_map) {
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	689a      	ldr	r2, [r3, #8]
 8015e9e:	4b8e      	ldr	r3, [pc, #568]	; (80160d8 <_ZN8MainView9updateValEPh+0x314>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d012      	beq.n	8015ecc <_ZN8MainView9updateValEPh+0x108>
		prev_map = values->map;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	689b      	ldr	r3, [r3, #8]
 8015eaa:	4a8b      	ldr	r2, [pc, #556]	; (80160d8 <_ZN8MainView9updateValEPh+0x314>)
 8015eac:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f603 30ea 	addw	r0, r3, #3050	; 0xbea
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	689b      	ldr	r3, [r3, #8]
 8015eb8:	4a86      	ldr	r2, [pc, #536]	; (80160d4 <_ZN8MainView9updateValEPh+0x310>)
 8015eba:	2105      	movs	r1, #5
 8015ebc:	f008 fbda 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f006 ff6c 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	685a      	ldr	r2, [r3, #4]
 8015ed0:	4b82      	ldr	r3, [pc, #520]	; (80160dc <_ZN8MainView9updateValEPh+0x318>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d012      	beq.n	8015efe <_ZN8MainView9updateValEPh+0x13a>
		prev_clt = values->clt;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	685b      	ldr	r3, [r3, #4]
 8015edc:	4a7f      	ldr	r2, [pc, #508]	; (80160dc <_ZN8MainView9updateValEPh+0x318>)
 8015ede:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f503 603e 	add.w	r0, r3, #3040	; 0xbe0
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	4a7a      	ldr	r2, [pc, #488]	; (80160d4 <_ZN8MainView9updateValEPh+0x310>)
 8015eec:	2105      	movs	r1, #5
 8015eee:	f008 fbc1 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f006 ff53 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	ed93 7a03 	vldr	s14, [r3, #12]
 8015f04:	4b76      	ldr	r3, [pc, #472]	; (80160e0 <_ZN8MainView9updateValEPh+0x31c>)
 8015f06:	edd3 7a00 	vldr	s15, [r3]
 8015f0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8015f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f12:	d015      	beq.n	8015f40 <_ZN8MainView9updateValEPh+0x17c>
		prev_lambda = values->lambda;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	68db      	ldr	r3, [r3, #12]
 8015f18:	4a71      	ldr	r2, [pc, #452]	; (80160e0 <_ZN8MainView9updateValEPh+0x31c>)
 8015f1a:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	edd3 7a03 	vldr	s15, [r3, #12]
 8015f28:	eeb0 0a67 	vmov.f32	s0, s15
 8015f2c:	4a6d      	ldr	r2, [pc, #436]	; (80160e4 <_ZN8MainView9updateValEPh+0x320>)
 8015f2e:	2105      	movs	r1, #5
 8015f30:	f7ff fd7a 	bl	8015a28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f006 ff32 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda_trgt != prev_lambda_targ) {
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	ed93 7a04 	vldr	s14, [r3, #16]
 8015f46:	4b68      	ldr	r3, [pc, #416]	; (80160e8 <_ZN8MainView9updateValEPh+0x324>)
 8015f48:	edd3 7a00 	vldr	s15, [r3]
 8015f4c:	eeb4 7a67 	vcmp.f32	s14, s15
 8015f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f54:	d015      	beq.n	8015f82 <_ZN8MainView9updateValEPh+0x1be>
		prev_lambda_targ = values->lambda_trgt;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	691b      	ldr	r3, [r3, #16]
 8015f5a:	4a63      	ldr	r2, [pc, #396]	; (80160e8 <_ZN8MainView9updateValEPh+0x324>)
 8015f5c:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f603 307a 	addw	r0, r3, #2938	; 0xb7a
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	edd3 7a04 	vldr	s15, [r3, #16]
 8015f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8015f6e:	4a5d      	ldr	r2, [pc, #372]	; (80160e4 <_ZN8MainView9updateValEPh+0x320>)
 8015f70:	2105      	movs	r1, #5
 8015f72:	f7ff fd59 	bl	8015a28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TrgtValue.invalidate();
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f006 ff11 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	ed93 7a06 	vldr	s14, [r3, #24]
 8015f88:	4b58      	ldr	r3, [pc, #352]	; (80160ec <_ZN8MainView9updateValEPh+0x328>)
 8015f8a:	edd3 7a00 	vldr	s15, [r3]
 8015f8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8015f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f96:	d015      	beq.n	8015fc4 <_ZN8MainView9updateValEPh+0x200>
		prev_oil_press = values->oil_press;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	699b      	ldr	r3, [r3, #24]
 8015f9c:	4a53      	ldr	r2, [pc, #332]	; (80160ec <_ZN8MainView9updateValEPh+0x328>)
 8015f9e:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f603 30c2 	addw	r0, r3, #3010	; 0xbc2
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	edd3 7a06 	vldr	s15, [r3, #24]
 8015fac:	eeb0 0a67 	vmov.f32	s0, s15
 8015fb0:	4a4f      	ldr	r2, [pc, #316]	; (80160f0 <_ZN8MainView9updateValEPh+0x32c>)
 8015fb2:	2105      	movs	r1, #5
 8015fb4:	f7ff fd38 	bl	8015a28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f006 fef0 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	69da      	ldr	r2, [r3, #28]
 8015fc8:	4b4a      	ldr	r3, [pc, #296]	; (80160f4 <_ZN8MainView9updateValEPh+0x330>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d012      	beq.n	8015ff6 <_ZN8MainView9updateValEPh+0x232>
		prev_fuel_press = values->fuel_press;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	69db      	ldr	r3, [r3, #28]
 8015fd4:	4a47      	ldr	r2, [pc, #284]	; (80160f4 <_ZN8MainView9updateValEPh+0x330>)
 8015fd6:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",values->fuel_press);
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f603 30fe 	addw	r0, r3, #3070	; 0xbfe
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	69db      	ldr	r3, [r3, #28]
 8015fe2:	4a3c      	ldr	r2, [pc, #240]	; (80160d4 <_ZN8MainView9updateValEPh+0x310>)
 8015fe4:	2105      	movs	r1, #5
 8015fe6:	f008 fb45 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelPValue.invalidate();
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f006 fed7 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	695a      	ldr	r2, [r3, #20]
 8015ffa:	4b3f      	ldr	r3, [pc, #252]	; (80160f8 <_ZN8MainView9updateValEPh+0x334>)
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d012      	beq.n	8016028 <_ZN8MainView9updateValEPh+0x264>
		prev_oil_tmp = values->oil_tmp;
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	695b      	ldr	r3, [r3, #20]
 8016006:	4a3c      	ldr	r2, [pc, #240]	; (80160f8 <_ZN8MainView9updateValEPh+0x334>)
 8016008:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f603 30b8 	addw	r0, r3, #3000	; 0xbb8
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	695b      	ldr	r3, [r3, #20]
 8016014:	4a2f      	ldr	r2, [pc, #188]	; (80160d4 <_ZN8MainView9updateValEPh+0x310>)
 8016016:	2105      	movs	r1, #5
 8016018:	f008 fb2c 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8016022:	4618      	mov	r0, r3
 8016024:	f006 febe 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	6a1a      	ldr	r2, [r3, #32]
 801602c:	4b33      	ldr	r3, [pc, #204]	; (80160fc <_ZN8MainView9updateValEPh+0x338>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	429a      	cmp	r2, r3
 8016032:	d012      	beq.n	801605a <_ZN8MainView9updateValEPh+0x296>
		prev_iat = values->iat;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	6a1b      	ldr	r3, [r3, #32]
 8016038:	4a30      	ldr	r2, [pc, #192]	; (80160fc <_ZN8MainView9updateValEPh+0x338>)
 801603a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f603 30a4 	addw	r0, r3, #2980	; 0xba4
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	6a1b      	ldr	r3, [r3, #32]
 8016046:	4a23      	ldr	r2, [pc, #140]	; (80160d4 <_ZN8MainView9updateValEPh+0x310>)
 8016048:	2105      	movs	r1, #5
 801604a:	f008 fb13 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8016054:	4618      	mov	r0, r3
 8016056:	f006 fea5 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt != prev_egt) {
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801605e:	4b28      	ldr	r3, [pc, #160]	; (8016100 <_ZN8MainView9updateValEPh+0x33c>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	429a      	cmp	r2, r3
 8016064:	d012      	beq.n	801608c <_ZN8MainView9updateValEPh+0x2c8>
		prev_egt = values->egt;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801606a:	4a25      	ldr	r2, [pc, #148]	; (8016100 <_ZN8MainView9updateValEPh+0x33c>)
 801606c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f603 30ae 	addw	r0, r3, #2990	; 0xbae
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016078:	4a16      	ldr	r2, [pc, #88]	; (80160d4 <_ZN8MainView9updateValEPh+0x310>)
 801607a:	2105      	movs	r1, #5
 801607c:	f008 fafa 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8016086:	4618      	mov	r0, r3
 8016088:	f006 fe8c 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt_2 != prev_egt_2) {
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016090:	4b1c      	ldr	r3, [pc, #112]	; (8016104 <_ZN8MainView9updateValEPh+0x340>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	429a      	cmp	r2, r3
 8016096:	d012      	beq.n	80160be <_ZN8MainView9updateValEPh+0x2fa>
		prev_egt_2 = values->egt_2;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801609c:	4a19      	ldr	r2, [pc, #100]	; (8016104 <_ZN8MainView9updateValEPh+0x340>)
 801609e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d",values->egt_2);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f603 30f4 	addw	r0, r3, #3060	; 0xbf4
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160aa:	4a0a      	ldr	r2, [pc, #40]	; (80160d4 <_ZN8MainView9updateValEPh+0x310>)
 80160ac:	2105      	movs	r1, #5
 80160ae:	f008 fae1 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80160b8:	4618      	mov	r0, r3
 80160ba:	f006 fe73 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160c2:	4b11      	ldr	r3, [pc, #68]	; (8016108 <_ZN8MainView9updateValEPh+0x344>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d042      	beq.n	8016150 <_ZN8MainView9updateValEPh+0x38c>
 80160ca:	e01f      	b.n	801610c <_ZN8MainView9updateValEPh+0x348>
 80160cc:	20008744 	.word	0x20008744
 80160d0:	2000003c 	.word	0x2000003c
 80160d4:	0802a188 	.word	0x0802a188
 80160d8:	20000040 	.word	0x20000040
 80160dc:	20000044 	.word	0x20000044
 80160e0:	20000048 	.word	0x20000048
 80160e4:	0802a18c 	.word	0x0802a18c
 80160e8:	2000004c 	.word	0x2000004c
 80160ec:	20008728 	.word	0x20008728
 80160f0:	0802a194 	.word	0x0802a194
 80160f4:	2000872c 	.word	0x2000872c
 80160f8:	20008724 	.word	0x20008724
 80160fc:	20008730 	.word	0x20008730
 8016100:	20008734 	.word	0x20008734
 8016104:	20008738 	.word	0x20008738
 8016108:	2000873c 	.word	0x2000873c
		prev_tps = values->tps;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016110:	4a22      	ldr	r2, [pc, #136]	; (801619c <_ZN8MainView9updateValEPh+0x3d8>)
 8016112:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801611e:	4619      	mov	r1, r3
 8016120:	4610      	mov	r0, r2
 8016122:	f002 fbad 	bl	8018880 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801612c:	4618      	mov	r0, r3
 801612e:	f006 fe39 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f603 4008 	addw	r0, r3, #3080	; 0xc08
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801613c:	4a18      	ldr	r2, [pc, #96]	; (80161a0 <_ZN8MainView9updateValEPh+0x3dc>)
 801613e:	2105      	movs	r1, #5
 8016140:	f008 fa98 	bl	801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 801614a:	4618      	mov	r0, r3
 801614c:	f006 fe2a 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8016156:	4b13      	ldr	r3, [pc, #76]	; (80161a4 <_ZN8MainView9updateValEPh+0x3e0>)
 8016158:	edd3 7a00 	vldr	s15, [r3]
 801615c:	eeb4 7a67 	vcmp.f32	s14, s15
 8016160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016164:	d015      	beq.n	8016192 <_ZN8MainView9updateValEPh+0x3ce>
		prev_batt_v = values->batt_v;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801616a:	4a0e      	ldr	r2, [pc, #56]	; (80161a4 <_ZN8MainView9updateValEPh+0x3e0>)
 801616c:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f603 30cc 	addw	r0, r3, #3020	; 0xbcc
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801617a:	eeb0 0a67 	vmov.f32	s0, s15
 801617e:	4a0a      	ldr	r2, [pc, #40]	; (80161a8 <_ZN8MainView9updateValEPh+0x3e4>)
 8016180:	2105      	movs	r1, #5
 8016182:	f7ff fc51 	bl	8015a28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		BatteryVoltage.invalidate();
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 801618c:	4618      	mov	r0, r3
 801618e:	f006 fe09 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 8016192:	bf00      	nop
 8016194:	3714      	adds	r7, #20
 8016196:	46bd      	mov	sp, r7
 8016198:	bd90      	pop	{r4, r7, pc}
 801619a:	bf00      	nop
 801619c:	2000873c 	.word	0x2000873c
 80161a0:	0802a188 	.word	0x0802a188
 80161a4:	20008740 	.word	0x20008740
 80161a8:	0802a18c 	.word	0x0802a18c

080161ac <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b082      	sub	sp, #8
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2200      	movs	r2, #0
 80161b8:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 80161ba:	2200      	movs	r2, #0
 80161bc:	2134      	movs	r1, #52	; 0x34
 80161be:	2001      	movs	r0, #1
 80161c0:	f7f7 f8ae 	bl	800d320 <xQueueGenericCreate>
 80161c4:	4603      	mov	r3, r0
 80161c6:	4a07      	ldr	r2, [pc, #28]	; (80161e4 <_ZN5ModelC1Ev+0x38>)
 80161c8:	6013      	str	r3, [r2, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 80161ca:	2200      	movs	r2, #0
 80161cc:	2128      	movs	r1, #40	; 0x28
 80161ce:	2001      	movs	r0, #1
 80161d0:	f7f7 f8a6 	bl	800d320 <xQueueGenericCreate>
 80161d4:	4603      	mov	r3, r0
 80161d6:	4a04      	ldr	r2, [pc, #16]	; (80161e8 <_ZN5ModelC1Ev+0x3c>)
 80161d8:	6013      	str	r3, [r2, #0]
}
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	4618      	mov	r0, r3
 80161de:	3708      	adds	r7, #8
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}
 80161e4:	200087a4 	.word	0x200087a4
 80161e8:	200087a8 	.word	0x200087a8

080161ec <_ZN5Model4tickEv>:

void Model::tick()
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b082      	sub	sp, #8
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 80161f4:	4b1a      	ldr	r3, [pc, #104]	; (8016260 <_ZN5Model4tickEv+0x74>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	2200      	movs	r2, #0
 80161fa:	491a      	ldr	r1, [pc, #104]	; (8016264 <_ZN5Model4tickEv+0x78>)
 80161fc:	4618      	mov	r0, r3
 80161fe:	f7f7 fb2d 	bl	800d85c <xQueueReceive>
 8016202:	4603      	mov	r3, r0
 8016204:	2b01      	cmp	r3, #1
 8016206:	bf0c      	ite	eq
 8016208:	2301      	moveq	r3, #1
 801620a:	2300      	movne	r3, #0
 801620c:	b2db      	uxtb	r3, r3
 801620e:	2b00      	cmp	r3, #0
 8016210:	d009      	beq.n	8016226 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	3308      	adds	r3, #8
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	4910      	ldr	r1, [pc, #64]	; (8016264 <_ZN5Model4tickEv+0x78>)
 8016222:	4610      	mov	r0, r2
 8016224:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8016226:	4b10      	ldr	r3, [pc, #64]	; (8016268 <_ZN5Model4tickEv+0x7c>)
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	2200      	movs	r2, #0
 801622c:	490f      	ldr	r1, [pc, #60]	; (801626c <_ZN5Model4tickEv+0x80>)
 801622e:	4618      	mov	r0, r3
 8016230:	f7f7 fb14 	bl	800d85c <xQueueReceive>
 8016234:	4603      	mov	r3, r0
 8016236:	2b01      	cmp	r3, #1
 8016238:	bf0c      	ite	eq
 801623a:	2301      	moveq	r3, #1
 801623c:	2300      	movne	r3, #0
 801623e:	b2db      	uxtb	r3, r3
 8016240:	2b00      	cmp	r3, #0
 8016242:	d009      	beq.n	8016258 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681a      	ldr	r2, [r3, #0]
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	330c      	adds	r3, #12
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	4906      	ldr	r1, [pc, #24]	; (801626c <_ZN5Model4tickEv+0x80>)
 8016254:	4610      	mov	r0, r2
 8016256:	4798      	blx	r3
	}
}
 8016258:	bf00      	nop
 801625a:	3708      	adds	r7, #8
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}
 8016260:	200087a4 	.word	0x200087a4
 8016264:	20008748 	.word	0x20008748
 8016268:	200087a8 	.word	0x200087a8
 801626c:	2000877c 	.word	0x2000877c

08016270 <_ZN21SecondScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~SecondScreenPresenter() {};
 8016270:	b580      	push	{r7, lr}
 8016272:	b082      	sub	sp, #8
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	4a09      	ldr	r2, [pc, #36]	; (80162a0 <_ZN21SecondScreenPresenterD1Ev+0x30>)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	601a      	str	r2, [r3, #0]
 801627e:	4a09      	ldr	r2, [pc, #36]	; (80162a4 <_ZN21SecondScreenPresenterD1Ev+0x34>)
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	605a      	str	r2, [r3, #4]
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	3304      	adds	r3, #4
 8016288:	4618      	mov	r0, r3
 801628a:	f7ff fb09 	bl	80158a0 <_ZN13ModelListenerD1Ev>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	4618      	mov	r0, r3
 8016292:	f7ff fac1 	bl	8015818 <_ZN8touchgfx9PresenterD1Ev>
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	4618      	mov	r0, r3
 801629a:	3708      	adds	r7, #8
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	0802abb4 	.word	0x0802abb4
 80162a4:	0802abcc 	.word	0x0802abcc

080162a8 <_ZThn4_N21SecondScreenPresenterD1Ev>:
 80162a8:	f1a0 0004 	sub.w	r0, r0, #4
 80162ac:	e7e0      	b.n	8016270 <_ZN21SecondScreenPresenterD1Ev>
 80162ae:	bf00      	nop

080162b0 <_ZN21SecondScreenPresenterD0Ev>:
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b082      	sub	sp, #8
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	6878      	ldr	r0, [r7, #4]
 80162ba:	f7ff ffd9 	bl	8016270 <_ZN21SecondScreenPresenterD1Ev>
 80162be:	2110      	movs	r1, #16
 80162c0:	6878      	ldr	r0, [r7, #4]
 80162c2:	f012 f941 	bl	8028548 <_ZdlPvj>
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	4618      	mov	r0, r3
 80162ca:	3708      	adds	r7, #8
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <_ZThn4_N21SecondScreenPresenterD0Ev>:
 80162d0:	f1a0 0004 	sub.w	r0, r0, #4
 80162d4:	e7ec      	b.n	80162b0 <_ZN21SecondScreenPresenterD0Ev>
	...

080162d8 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

SecondScreenPresenter::SecondScreenPresenter(SecondScreenView& v)
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	6039      	str	r1, [r7, #0]
    : view(v)
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7ff fab7 	bl	8015858 <_ZN8touchgfx9PresenterC1Ev>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	3304      	adds	r3, #4
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7ff fac2 	bl	8015878 <_ZN13ModelListenerC1Ev>
 80162f4:	4a06      	ldr	r2, [pc, #24]	; (8016310 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x38>)
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	601a      	str	r2, [r3, #0]
 80162fa:	4a06      	ldr	r2, [pc, #24]	; (8016314 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x3c>)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	605a      	str	r2, [r3, #4]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	683a      	ldr	r2, [r7, #0]
 8016304:	60da      	str	r2, [r3, #12]
{

}
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	4618      	mov	r0, r3
 801630a:	3708      	adds	r7, #8
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}
 8016310:	0802abb4 	.word	0x0802abb4
 8016314:	0802abcc 	.word	0x0802abcc

08016318 <_ZN21SecondScreenPresenter8activateEv>:

void SecondScreenPresenter::activate()
{
 8016318:	b480      	push	{r7}
 801631a:	b083      	sub	sp, #12
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]

}
 8016320:	bf00      	nop
 8016322:	370c      	adds	r7, #12
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr

0801632c <_ZN21SecondScreenPresenter10deactivateEv>:

void SecondScreenPresenter::deactivate()
{
 801632c:	b480      	push	{r7}
 801632e:	b083      	sub	sp, #12
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]

}
 8016334:	bf00      	nop
 8016336:	370c      	adds	r7, #12
 8016338:	46bd      	mov	sp, r7
 801633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633e:	4770      	bx	lr

08016340 <_ZN16SecondScreenViewD1Ev>:

class SecondScreenView : public SecondScreenViewBase
{
public:
    SecondScreenView();
    virtual ~SecondScreenView() {}
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	4a05      	ldr	r2, [pc, #20]	; (8016360 <_ZN16SecondScreenViewD1Ev+0x20>)
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	601a      	str	r2, [r3, #0]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	4618      	mov	r0, r3
 8016352:	f7fe fe7b 	bl	801504c <_ZN20SecondScreenViewBaseD1Ev>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4618      	mov	r0, r3
 801635a:	3708      	adds	r7, #8
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}
 8016360:	0802abe4 	.word	0x0802abe4

08016364 <_ZN16SecondScreenViewD0Ev>:
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f7ff ffe7 	bl	8016340 <_ZN16SecondScreenViewD1Ev>
 8016372:	21f8      	movs	r1, #248	; 0xf8
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f012 f8e7 	bl	8028548 <_ZdlPvj>
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	4618      	mov	r0, r3
 801637e:	3708      	adds	r7, #8
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}

08016384 <_ZN16SecondScreenViewC1Ev>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>

SecondScreenView::SecondScreenView()
 8016384:	b580      	push	{r7, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	4618      	mov	r0, r3
 8016390:	f7fe fe9a 	bl	80150c8 <_ZN20SecondScreenViewBaseC1Ev>
 8016394:	4a03      	ldr	r2, [pc, #12]	; (80163a4 <_ZN16SecondScreenViewC1Ev+0x20>)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	601a      	str	r2, [r3, #0]
{

}
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	4618      	mov	r0, r3
 801639e:	3708      	adds	r7, #8
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}
 80163a4:	0802abe4 	.word	0x0802abe4

080163a8 <_ZN16SecondScreenView11setupScreenEv>:

void SecondScreenView::setupScreen()
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b082      	sub	sp, #8
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
    SecondScreenViewBase::setupScreen();
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7fe ff2a 	bl	801520c <_ZN20SecondScreenViewBase11setupScreenEv>
}
 80163b8:	bf00      	nop
 80163ba:	3708      	adds	r7, #8
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}

080163c0 <_ZN16SecondScreenView14tearDownScreenEv>:

void SecondScreenView::tearDownScreen()
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
    SecondScreenViewBase::tearDownScreen();
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f7fc f85a 	bl	8012484 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80163d0:	bf00      	nop
 80163d2:	3708      	adds	r7, #8
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}

080163d8 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80163d8:	b480      	push	{r7}
 80163da:	b083      	sub	sp, #12
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
    {
 80163e0:	4a04      	ldr	r2, [pc, #16]	; (80163f4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	601a      	str	r2, [r3, #0]
    }
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	4618      	mov	r0, r3
 80163ea:	370c      	adds	r7, #12
 80163ec:	46bd      	mov	sp, r7
 80163ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f2:	4770      	bx	lr
 80163f4:	0802ac30 	.word	0x0802ac30

080163f8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
    }
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f7ff ffe9 	bl	80163d8 <_ZN8touchgfx15TouchControllerD1Ev>
 8016406:	2104      	movs	r1, #4
 8016408:	6878      	ldr	r0, [r7, #4]
 801640a:	f012 f89d 	bl	8028548 <_ZdlPvj>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	4618      	mov	r0, r3
 8016412:	3708      	adds	r7, #8
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}

08016418 <_ZN20STM32TouchController4initEv>:

}


void STM32TouchController::init()
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	 BSP_TS_Init(420, 272);
 8016420:	f44f 7188 	mov.w	r1, #272	; 0x110
 8016424:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8016428:	f7f9 fbfa 	bl	800fc20 <BSP_TS_Init>
}
 801642c:	bf00      	nop
 801642e:	3708      	adds	r7, #8
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}

08016434 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b090      	sub	sp, #64	; 0x40
 8016438:	af00      	add	r7, sp, #0
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	TS_StateTypeDef state = { 0 };
 8016440:	f107 0314 	add.w	r3, r7, #20
 8016444:	222c      	movs	r2, #44	; 0x2c
 8016446:	2100      	movs	r1, #0
 8016448:	4618      	mov	r0, r3
 801644a:	f012 f937 	bl	80286bc <memset>
	    BSP_TS_GetState(&state);
 801644e:	f107 0314 	add.w	r3, r7, #20
 8016452:	4618      	mov	r0, r3
 8016454:	f7f9 fc24 	bl	800fca0 <BSP_TS_GetState>
	    if (state.touchDetected)
 8016458:	7d3b      	ldrb	r3, [r7, #20]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d009      	beq.n	8016472 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
	    {
	        x = state.touchX[0];
 801645e:	8afb      	ldrh	r3, [r7, #22]
 8016460:	461a      	mov	r2, r3
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	601a      	str	r2, [r3, #0]
	        y = state.touchY[0];
 8016466:	8c3b      	ldrh	r3, [r7, #32]
 8016468:	461a      	mov	r2, r3
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	601a      	str	r2, [r3, #0]

	        return true;
 801646e:	2301      	movs	r3, #1
 8016470:	e000      	b.n	8016474 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    }

    return false;
 8016472:	2300      	movs	r3, #0
}
 8016474:	4618      	mov	r0, r3
 8016476:	3740      	adds	r7, #64	; 0x40
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}

0801647c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801647c:	b580      	push	{r7, lr}
 801647e:	b082      	sub	sp, #8
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
 8016484:	4a05      	ldr	r2, [pc, #20]	; (801649c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	601a      	str	r2, [r3, #0]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	4618      	mov	r0, r3
 801648e:	f7ff ffa3 	bl	80163d8 <_ZN8touchgfx15TouchControllerD1Ev>
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	4618      	mov	r0, r3
 8016496:	3708      	adds	r7, #8
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	0802ac18 	.word	0x0802ac18

080164a0 <_ZN20STM32TouchControllerD0Ev>:
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b082      	sub	sp, #8
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f7ff ffe7 	bl	801647c <_ZN20STM32TouchControllerD1Ev>
 80164ae:	2104      	movs	r1, #4
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f012 f849 	bl	8028548 <_ZdlPvj>
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	4618      	mov	r0, r3
 80164ba:	3708      	adds	r7, #8
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}

080164c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80164c0:	b480      	push	{r7}
 80164c2:	b083      	sub	sp, #12
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	4603      	mov	r3, r0
 80164c8:	71fb      	strb	r3, [r7, #7]

}
 80164ca:	bf00      	nop
 80164cc:	370c      	adds	r7, #12
 80164ce:	46bd      	mov	sp, r7
 80164d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d4:	4770      	bx	lr

080164d6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80164d6:	b480      	push	{r7}
 80164d8:	b083      	sub	sp, #12
 80164da:	af00      	add	r7, sp, #0
 80164dc:	4603      	mov	r3, r0
 80164de:	71fb      	strb	r3, [r7, #7]

}
 80164e0:	bf00      	nop
 80164e2:	370c      	adds	r7, #12
 80164e4:	46bd      	mov	sp, r7
 80164e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ea:	4770      	bx	lr

080164ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	4603      	mov	r3, r0
 80164f4:	71fb      	strb	r3, [r7, #7]

}
 80164f6:	bf00      	nop
 80164f8:	370c      	adds	r7, #12
 80164fa:	46bd      	mov	sp, r7
 80164fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016500:	4770      	bx	lr
	...

08016504 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8016504:	b480      	push	{r7}
 8016506:	b083      	sub	sp, #12
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
    {
 801650c:	4a04      	ldr	r2, [pc, #16]	; (8016520 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	601a      	str	r2, [r3, #0]
    }
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	4618      	mov	r0, r3
 8016516:	370c      	adds	r7, #12
 8016518:	46bd      	mov	sp, r7
 801651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651e:	4770      	bx	lr
 8016520:	0802b910 	.word	0x0802b910

08016524 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
    }
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	f7ff ffe9 	bl	8016504 <_ZN8touchgfx3HALD1Ev>
 8016532:	2178      	movs	r1, #120	; 0x78
 8016534:	6878      	ldr	r0, [r7, #4]
 8016536:	f012 f807 	bl	8028548 <_ZdlPvj>
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	4618      	mov	r0, r3
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}

08016544 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	460b      	mov	r3, r1
 801654e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	78fa      	ldrb	r2, [r7, #3]
 8016554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2201      	movs	r2, #1
 801655c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8016560:	bf00      	nop
 8016562:	370c      	adds	r7, #12
 8016564:	46bd      	mov	sp, r7
 8016566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656a:	4770      	bx	lr

0801656c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 801656c:	b580      	push	{r7, lr}
 801656e:	b082      	sub	sp, #8
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	685a      	ldr	r2, [r3, #4]
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	4610      	mov	r0, r2
 8016582:	4798      	blx	r3
 8016584:	4603      	mov	r3, r0
    }
 8016586:	4618      	mov	r0, r3
 8016588:	3708      	adds	r7, #8
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}

0801658e <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801658e:	b580      	push	{r7, lr}
 8016590:	b082      	sub	sp, #8
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f003 fbcc 	bl	8019d34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	3390      	adds	r3, #144	; 0x90
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	4798      	blx	r3
    }
 80165a8:	bf00      	nop
 80165aa:	3708      	adds	r7, #8
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80165b0:	b480      	push	{r7}
 80165b2:	b083      	sub	sp, #12
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
    {
        return false;
 80165ba:	2300      	movs	r3, #0
    }
 80165bc:	4618      	mov	r0, r3
 80165be:	370c      	adds	r7, #12
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr

080165c8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80165c8:	b590      	push	{r4, r7, lr}
 80165ca:	b08b      	sub	sp, #44	; 0x2c
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	60b9      	str	r1, [r7, #8]
 80165d2:	4611      	mov	r1, r2
 80165d4:	461a      	mov	r2, r3
 80165d6:	460b      	mov	r3, r1
 80165d8:	80fb      	strh	r3, [r7, #6]
 80165da:	4613      	mov	r3, r2
 80165dc:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80165de:	f7fa fbc7 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 80165e2:	4603      	mov	r3, r0
 80165e4:	681a      	ldr	r2, [r3, #0]
 80165e6:	3228      	adds	r2, #40	; 0x28
 80165e8:	6812      	ldr	r2, [r2, #0]
 80165ea:	4618      	mov	r0, r3
 80165ec:	4790      	blx	r2
 80165ee:	4603      	mov	r3, r0
 80165f0:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80165f2:	8b7b      	ldrh	r3, [r7, #26]
 80165f4:	4a3d      	ldr	r2, [pc, #244]	; (80166ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80165f6:	8812      	ldrh	r2, [r2, #0]
 80165f8:	fb02 f303 	mul.w	r3, r2, r3
 80165fc:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80165fe:	68bb      	ldr	r3, [r7, #8]
 8016600:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8016602:	2300      	movs	r3, #0
 8016604:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8016606:	2300      	movs	r3, #0
 8016608:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 801660a:	797b      	ldrb	r3, [r7, #5]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d005      	beq.n	801661c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8016610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	4413      	add	r3, r2
 8016616:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8016618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661a:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 801661c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016620:	2b00      	cmp	r3, #0
 8016622:	d005      	beq.n	8016630 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8016624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016626:	697b      	ldr	r3, [r7, #20]
 8016628:	4413      	add	r3, r2
 801662a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 801662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662e:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8016630:	88fb      	ldrh	r3, [r7, #6]
 8016632:	3b01      	subs	r3, #1
 8016634:	2b1f      	cmp	r3, #31
 8016636:	d84d      	bhi.n	80166d4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8016638:	a201      	add	r2, pc, #4	; (adr r2, 8016640 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 801663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801663e:	bf00      	nop
 8016640:	080166c1 	.word	0x080166c1
 8016644:	080166c1 	.word	0x080166c1
 8016648:	080166d5 	.word	0x080166d5
 801664c:	080166c1 	.word	0x080166c1
 8016650:	080166d5 	.word	0x080166d5
 8016654:	080166d5 	.word	0x080166d5
 8016658:	080166d5 	.word	0x080166d5
 801665c:	080166c1 	.word	0x080166c1
 8016660:	080166d5 	.word	0x080166d5
 8016664:	080166d5 	.word	0x080166d5
 8016668:	080166d5 	.word	0x080166d5
 801666c:	080166d5 	.word	0x080166d5
 8016670:	080166d5 	.word	0x080166d5
 8016674:	080166d5 	.word	0x080166d5
 8016678:	080166d5 	.word	0x080166d5
 801667c:	080166c1 	.word	0x080166c1
 8016680:	080166d5 	.word	0x080166d5
 8016684:	080166d5 	.word	0x080166d5
 8016688:	080166d5 	.word	0x080166d5
 801668c:	080166d5 	.word	0x080166d5
 8016690:	080166d5 	.word	0x080166d5
 8016694:	080166d5 	.word	0x080166d5
 8016698:	080166d5 	.word	0x080166d5
 801669c:	080166c1 	.word	0x080166c1
 80166a0:	080166d5 	.word	0x080166d5
 80166a4:	080166d5 	.word	0x080166d5
 80166a8:	080166d5 	.word	0x080166d5
 80166ac:	080166d5 	.word	0x080166d5
 80166b0:	080166d5 	.word	0x080166d5
 80166b4:	080166d5 	.word	0x080166d5
 80166b8:	080166d5 	.word	0x080166d5
 80166bc:	080166c1 	.word	0x080166c1
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	3374      	adds	r3, #116	; 0x74
 80166c6:	681c      	ldr	r4, [r3, #0]
 80166c8:	69fb      	ldr	r3, [r7, #28]
 80166ca:	6a3a      	ldr	r2, [r7, #32]
 80166cc:	68b9      	ldr	r1, [r7, #8]
 80166ce:	68f8      	ldr	r0, [r7, #12]
 80166d0:	47a0      	blx	r4
            break;
 80166d2:	e006      	b.n	80166e2 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80166d4:	4b06      	ldr	r3, [pc, #24]	; (80166f0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80166d6:	4a07      	ldr	r2, [pc, #28]	; (80166f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80166d8:	f240 3125 	movw	r1, #805	; 0x325
 80166dc:	4806      	ldr	r0, [pc, #24]	; (80166f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80166de:	f011 ff61 	bl	80285a4 <__assert_func>
            break;
        }
    }
 80166e2:	bf00      	nop
 80166e4:	372c      	adds	r7, #44	; 0x2c
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd90      	pop	{r4, r7, pc}
 80166ea:	bf00      	nop
 80166ec:	2000beea 	.word	0x2000beea
 80166f0:	0802a19c 	.word	0x0802a19c
 80166f4:	0802a1bc 	.word	0x0802a1bc
 80166f8:	0802a210 	.word	0x0802a210

080166fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b084      	sub	sp, #16
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	607a      	str	r2, [r7, #4]
 8016708:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d106      	bne.n	801671e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8016710:	4b11      	ldr	r3, [pc, #68]	; (8016758 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8016712:	4a12      	ldr	r2, [pc, #72]	; (801675c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8016714:	f240 3137 	movw	r1, #823	; 0x337
 8016718:	4811      	ldr	r0, [pc, #68]	; (8016760 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801671a:	f011 ff43 	bl	80285a4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	68ba      	ldr	r2, [r7, #8]
 8016722:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	687a      	ldr	r2, [r7, #4]
 8016728:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	683a      	ldr	r2, [r7, #0]
 801672e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	2b00      	cmp	r3, #0
 8016734:	bf14      	ite	ne
 8016736:	2301      	movne	r3, #1
 8016738:	2300      	moveq	r3, #0
 801673a:	b2da      	uxtb	r2, r3
 801673c:	4b09      	ldr	r3, [pc, #36]	; (8016764 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801673e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	2b00      	cmp	r3, #0
 8016744:	bf14      	ite	ne
 8016746:	2301      	movne	r3, #1
 8016748:	2300      	moveq	r3, #0
 801674a:	b2da      	uxtb	r2, r3
 801674c:	4b06      	ldr	r3, [pc, #24]	; (8016768 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801674e:	701a      	strb	r2, [r3, #0]
    }
 8016750:	bf00      	nop
 8016752:	3710      	adds	r7, #16
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}
 8016758:	0802a254 	.word	0x0802a254
 801675c:	0802a28c 	.word	0x0802a28c
 8016760:	0802a210 	.word	0x0802a210
 8016764:	2000beec 	.word	0x2000beec
 8016768:	2000beed 	.word	0x2000beed

0801676c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 801676c:	b580      	push	{r7, lr}
 801676e:	b082      	sub	sp, #8
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
 8016774:	460b      	mov	r3, r1
 8016776:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801677c:	2b00      	cmp	r3, #0
 801677e:	d004      	beq.n	801678a <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016784:	887a      	ldrh	r2, [r7, #2]
 8016786:	4610      	mov	r0, r2
 8016788:	4798      	blx	r3
        }
    }
 801678a:	bf00      	nop
 801678c:	3708      	adds	r7, #8
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8016792:	b580      	push	{r7, lr}
 8016794:	b082      	sub	sp, #8
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	685a      	ldr	r2, [r3, #4]
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	3318      	adds	r3, #24
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4610      	mov	r0, r2
 80167aa:	4798      	blx	r3
 80167ac:	4603      	mov	r3, r0
    }
 80167ae:	4618      	mov	r0, r3
 80167b0:	3708      	adds	r7, #8
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
	...

080167b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80167b8:	b480      	push	{r7}
 80167ba:	b083      	sub	sp, #12
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d017      	beq.n	8016800 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80167d0:	4b1a      	ldr	r3, [pc, #104]	; (801683c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d12a      	bne.n	801682e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80167d8:	4b19      	ldr	r3, [pc, #100]	; (8016840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80167da:	881a      	ldrh	r2, [r3, #0]
 80167dc:	4b19      	ldr	r3, [pc, #100]	; (8016844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80167de:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80167e0:	4b19      	ldr	r3, [pc, #100]	; (8016848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80167e2:	881a      	ldrh	r2, [r3, #0]
 80167e4:	4b19      	ldr	r3, [pc, #100]	; (801684c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80167e6:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80167e8:	4b16      	ldr	r3, [pc, #88]	; (8016844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80167ea:	881a      	ldrh	r2, [r3, #0]
 80167ec:	4b16      	ldr	r3, [pc, #88]	; (8016848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80167ee:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80167f0:	4b16      	ldr	r3, [pc, #88]	; (801684c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80167f2:	881a      	ldrh	r2, [r3, #0]
 80167f4:	4b12      	ldr	r3, [pc, #72]	; (8016840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80167f6:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80167f8:	4b10      	ldr	r3, [pc, #64]	; (801683c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80167fa:	2201      	movs	r2, #1
 80167fc:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80167fe:	e016      	b.n	801682e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8016800:	4b0e      	ldr	r3, [pc, #56]	; (801683c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d012      	beq.n	801682e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8016808:	4b0f      	ldr	r3, [pc, #60]	; (8016848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801680a:	881a      	ldrh	r2, [r3, #0]
 801680c:	4b0d      	ldr	r3, [pc, #52]	; (8016844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801680e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8016810:	4b0b      	ldr	r3, [pc, #44]	; (8016840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016812:	881a      	ldrh	r2, [r3, #0]
 8016814:	4b0d      	ldr	r3, [pc, #52]	; (801684c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016816:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8016818:	4b0c      	ldr	r3, [pc, #48]	; (801684c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801681a:	881a      	ldrh	r2, [r3, #0]
 801681c:	4b0a      	ldr	r3, [pc, #40]	; (8016848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801681e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8016820:	4b08      	ldr	r3, [pc, #32]	; (8016844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016822:	881a      	ldrh	r2, [r3, #0]
 8016824:	4b06      	ldr	r3, [pc, #24]	; (8016840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016826:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8016828:	4b04      	ldr	r3, [pc, #16]	; (801683c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801682a:	2200      	movs	r2, #0
 801682c:	701a      	strb	r2, [r3, #0]
    }
 801682e:	bf00      	nop
 8016830:	370c      	adds	r7, #12
 8016832:	46bd      	mov	sp, r7
 8016834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016838:	4770      	bx	lr
 801683a:	bf00      	nop
 801683c:	2000bee6 	.word	0x2000bee6
 8016840:	2000bee2 	.word	0x2000bee2
 8016844:	2000bee8 	.word	0x2000bee8
 8016848:	2000bee4 	.word	0x2000bee4
 801684c:	2000beea 	.word	0x2000beea

08016850 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	4618      	mov	r0, r3
 801685c:	f002 fcec 	bl	8019238 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016860:	bf00      	nop
 8016862:	3708      	adds	r7, #8
 8016864:	46bd      	mov	sp, r7
 8016866:	bd80      	pop	{r7, pc}

08016868 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	4a05      	ldr	r2, [pc, #20]	; (8016888 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	601a      	str	r2, [r3, #0]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	4618      	mov	r0, r3
 801687a:	f7ff fe43 	bl	8016504 <_ZN8touchgfx3HALD1Ev>
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	4618      	mov	r0, r3
 8016882:	3708      	adds	r7, #8
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}
 8016888:	0802ae44 	.word	0x0802ae44

0801688c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	f7ff ffe7 	bl	8016868 <_ZN20TouchGFXGeneratedHALD1Ev>
 801689a:	2178      	movs	r1, #120	; 0x78
 801689c:	6878      	ldr	r0, [r7, #4]
 801689e:	f011 fe53 	bl	8028548 <_ZdlPvj>
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	4618      	mov	r0, r3
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}

080168ac <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7ff ffca 	bl	8016850 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80168bc:	bf00      	nop
 80168be:	3708      	adds	r7, #8
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}

080168c4 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	4618      	mov	r0, r3
 80168d0:	f001 fb18 	bl	8017f04 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80168d4:	bf00      	nop
 80168d6:	3708      	adds	r7, #8
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}

080168dc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	4618      	mov	r0, r3
 80168e8:	f001 fb98 	bl	801801c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80168ec:	4603      	mov	r3, r0
}
 80168ee:	4618      	mov	r0, r3
 80168f0:	3708      	adds	r7, #8
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}

080168f6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80168f6:	b580      	push	{r7, lr}
 80168f8:	b082      	sub	sp, #8
 80168fa:	af00      	add	r7, sp, #0
 80168fc:	6078      	str	r0, [r7, #4]
 80168fe:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6839      	ldr	r1, [r7, #0]
 8016904:	4618      	mov	r0, r3
 8016906:	f001 fb97 	bl	8018038 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801690a:	bf00      	nop
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016912:	b580      	push	{r7, lr}
 8016914:	b082      	sub	sp, #8
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
 801691a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6839      	ldr	r1, [r7, #0]
 8016920:	4618      	mov	r0, r3
 8016922:	f001 fb9f 	bl	8018064 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8016926:	bf00      	nop
 8016928:	3708      	adds	r7, #8
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}

0801692e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b082      	sub	sp, #8
 8016932:	af00      	add	r7, sp, #0
 8016934:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	4618      	mov	r0, r3
 801693a:	f001 fb15 	bl	8017f68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801693e:	bf00      	nop
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b082      	sub	sp, #8
 801694a:	af00      	add	r7, sp, #0
 801694c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	4618      	mov	r0, r3
 8016952:	f001 fb19 	bl	8017f88 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8016956:	bf00      	nop
 8016958:	3708      	adds	r7, #8
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}

0801695e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801695e:	b580      	push	{r7, lr}
 8016960:	b082      	sub	sp, #8
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	4618      	mov	r0, r3
 801696a:	f001 fb1b 	bl	8017fa4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801696e:	bf00      	nop
 8016970:	3708      	adds	r7, #8
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}

08016976 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8016976:	b580      	push	{r7, lr}
 8016978:	b082      	sub	sp, #8
 801697a:	af00      	add	r7, sp, #0
 801697c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	4618      	mov	r0, r3
 8016982:	f001 fb1d 	bl	8017fc0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8016986:	bf00      	nop
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
	...

08016990 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8016990:	b580      	push	{r7, lr}
 8016992:	b082      	sub	sp, #8
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
 8016998:	4a05      	ldr	r2, [pc, #20]	; (80169b0 <_ZN11TouchGFXHALD1Ev+0x20>)
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	601a      	str	r2, [r3, #0]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7ff ff61 	bl	8016868 <_ZN20TouchGFXGeneratedHALD1Ev>
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	4618      	mov	r0, r3
 80169aa:	3708      	adds	r7, #8
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}
 80169b0:	0802ac48 	.word	0x0802ac48

080169b4 <_ZN11TouchGFXHALD0Ev>:
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f7ff ffe7 	bl	8016990 <_ZN11TouchGFXHALD1Ev>
 80169c2:	2178      	movs	r1, #120	; 0x78
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f011 fdbf 	bl	8028548 <_ZdlPvj>
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	4618      	mov	r0, r3
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 80169d8:	2203      	movs	r2, #3
 80169da:	2100      	movs	r1, #0
 80169dc:	2001      	movs	r0, #1
 80169de:	f7f6 fc9f 	bl	800d320 <xQueueGenericCreate>
 80169e2:	4603      	mov	r3, r0
 80169e4:	4a0b      	ldr	r2, [pc, #44]	; (8016a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80169e6:	6013      	str	r3, [r2, #0]
 80169e8:	4b0a      	ldr	r3, [pc, #40]	; (8016a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d006      	beq.n	80169fe <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 80169f0:	4b08      	ldr	r3, [pc, #32]	; (8016a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80169f2:	6818      	ldr	r0, [r3, #0]
 80169f4:	2300      	movs	r3, #0
 80169f6:	2200      	movs	r2, #0
 80169f8:	2100      	movs	r1, #0
 80169fa:	f7f6 fcf3 	bl	800d3e4 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 80169fe:	2200      	movs	r2, #0
 8016a00:	2101      	movs	r1, #1
 8016a02:	2001      	movs	r0, #1
 8016a04:	f7f6 fc8c 	bl	800d320 <xQueueGenericCreate>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	4a03      	ldr	r2, [pc, #12]	; (8016a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8016a0c:	6013      	str	r3, [r2, #0]
}
 8016a0e:	bf00      	nop
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	200087ac 	.word	0x200087ac
 8016a18:	200087b0 	.word	0x200087b0

08016a1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8016a20:	4b04      	ldr	r3, [pc, #16]	; (8016a34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	f04f 31ff 	mov.w	r1, #4294967295
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7f6 fffd 	bl	800da28 <xQueueSemaphoreTake>
}
 8016a2e:	bf00      	nop
 8016a30:	bd80      	pop	{r7, pc}
 8016a32:	bf00      	nop
 8016a34:	200087ac 	.word	0x200087ac

08016a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8016a3c:	4b04      	ldr	r3, [pc, #16]	; (8016a50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8016a3e:	6818      	ldr	r0, [r3, #0]
 8016a40:	2300      	movs	r3, #0
 8016a42:	2200      	movs	r2, #0
 8016a44:	2100      	movs	r1, #0
 8016a46:	f7f6 fccd 	bl	800d3e4 <xQueueGenericSend>
}
 8016a4a:	bf00      	nop
 8016a4c:	bd80      	pop	{r7, pc}
 8016a4e:	bf00      	nop
 8016a50:	200087ac 	.word	0x200087ac

08016a54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8016a58:	4b03      	ldr	r3, [pc, #12]	; (8016a68 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	2100      	movs	r1, #0
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7f6 ffe2 	bl	800da28 <xQueueSemaphoreTake>
}
 8016a64:	bf00      	nop
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	200087ac 	.word	0x200087ac

08016a6c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8016a72:	2300      	movs	r3, #0
 8016a74:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8016a76:	4b0b      	ldr	r3, [pc, #44]	; (8016aa4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	1d3a      	adds	r2, r7, #4
 8016a7c:	4611      	mov	r1, r2
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7f6 fe56 	bl	800d730 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d007      	beq.n	8016a9a <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8016a8a:	4b07      	ldr	r3, [pc, #28]	; (8016aa8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8016a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a90:	601a      	str	r2, [r3, #0]
 8016a92:	f3bf 8f4f 	dsb	sy
 8016a96:	f3bf 8f6f 	isb	sy
}
 8016a9a:	bf00      	nop
 8016a9c:	3708      	adds	r7, #8
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	200087ac 	.word	0x200087ac
 8016aa8:	e000ed04 	.word	0xe000ed04

08016aac <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
    if (vsync_q)
 8016ab2:	4b0e      	ldr	r3, [pc, #56]	; (8016aec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d013      	beq.n	8016ae2 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8016aba:	2300      	movs	r3, #0
 8016abc:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8016abe:	4b0b      	ldr	r3, [pc, #44]	; (8016aec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8016ac0:	6818      	ldr	r0, [r3, #0]
 8016ac2:	1d3a      	adds	r2, r7, #4
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	490a      	ldr	r1, [pc, #40]	; (8016af0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8016ac8:	f7f6 fd92 	bl	800d5f0 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d007      	beq.n	8016ae2 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8016ad2:	4b08      	ldr	r3, [pc, #32]	; (8016af4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8016ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ad8:	601a      	str	r2, [r3, #0]
 8016ada:	f3bf 8f4f 	dsb	sy
 8016ade:	f3bf 8f6f 	isb	sy
    }
}
 8016ae2:	bf00      	nop
 8016ae4:	3708      	adds	r7, #8
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}
 8016aea:	bf00      	nop
 8016aec:	200087b0 	.word	0x200087b0
 8016af0:	20000050 	.word	0x20000050
 8016af4:	e000ed04 	.word	0xe000ed04

08016af8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8016afc:	4b08      	ldr	r3, [pc, #32]	; (8016b20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	2200      	movs	r2, #0
 8016b02:	4908      	ldr	r1, [pc, #32]	; (8016b24 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016b04:	4618      	mov	r0, r3
 8016b06:	f7f6 fea9 	bl	800d85c <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8016b0a:	4b05      	ldr	r3, [pc, #20]	; (8016b20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8016b12:	4904      	ldr	r1, [pc, #16]	; (8016b24 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7f6 fea1 	bl	800d85c <xQueueReceive>
}
 8016b1a:	bf00      	nop
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	200087b0 	.word	0x200087b0
 8016b24:	20000050 	.word	0x20000050

08016b28 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	4603      	mov	r3, r0
 8016b30:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8016b32:	88fb      	ldrh	r3, [r7, #6]
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7f7 fbdf 	bl	800e2f8 <vTaskDelay>
}
 8016b3a:	bf00      	nop
 8016b3c:	3708      	adds	r7, #8
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
	...

08016b44 <__NVIC_EnableIRQ>:
{
 8016b44:	b480      	push	{r7}
 8016b46:	b083      	sub	sp, #12
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	db0b      	blt.n	8016b6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016b56:	79fb      	ldrb	r3, [r7, #7]
 8016b58:	f003 021f 	and.w	r2, r3, #31
 8016b5c:	4907      	ldr	r1, [pc, #28]	; (8016b7c <__NVIC_EnableIRQ+0x38>)
 8016b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b62:	095b      	lsrs	r3, r3, #5
 8016b64:	2001      	movs	r0, #1
 8016b66:	fa00 f202 	lsl.w	r2, r0, r2
 8016b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016b6e:	bf00      	nop
 8016b70:	370c      	adds	r7, #12
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr
 8016b7a:	bf00      	nop
 8016b7c:	e000e100 	.word	0xe000e100

08016b80 <__NVIC_DisableIRQ>:
{
 8016b80:	b480      	push	{r7}
 8016b82:	b083      	sub	sp, #12
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	4603      	mov	r3, r0
 8016b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	db12      	blt.n	8016bb8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016b92:	79fb      	ldrb	r3, [r7, #7]
 8016b94:	f003 021f 	and.w	r2, r3, #31
 8016b98:	490a      	ldr	r1, [pc, #40]	; (8016bc4 <__NVIC_DisableIRQ+0x44>)
 8016b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b9e:	095b      	lsrs	r3, r3, #5
 8016ba0:	2001      	movs	r0, #1
 8016ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8016ba6:	3320      	adds	r3, #32
 8016ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016bac:	f3bf 8f4f 	dsb	sy
}
 8016bb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016bb2:	f3bf 8f6f 	isb	sy
}
 8016bb6:	bf00      	nop
}
 8016bb8:	bf00      	nop
 8016bba:	370c      	adds	r7, #12
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc2:	4770      	bx	lr
 8016bc4:	e000e100 	.word	0xe000e100

08016bc8 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8016bc8:	b480      	push	{r7}
 8016bca:	b083      	sub	sp, #12
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
        return color;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
    }
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	370c      	adds	r7, #12
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bde:	4770      	bx	lr

08016be0 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8016be0:	b480      	push	{r7}
 8016be2:	b083      	sub	sp, #12
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	b29b      	uxth	r3, r3
    }
 8016bee:	4618      	mov	r0, r3
 8016bf0:	370c      	adds	r7, #12
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf8:	4770      	bx	lr
	...

08016bfc <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8016bfc:	b480      	push	{r7}
 8016bfe:	b083      	sub	sp, #12
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
    {
 8016c04:	4a04      	ldr	r2, [pc, #16]	; (8016c18 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	601a      	str	r2, [r3, #0]
    }
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	370c      	adds	r7, #12
 8016c10:	46bd      	mov	sp, r7
 8016c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c16:	4770      	bx	lr
 8016c18:	0802ad4c 	.word	0x0802ad4c

08016c1c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
    }
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f7ff ffe9 	bl	8016bfc <_ZN8touchgfx9DMA_QueueD1Ev>
 8016c2a:	2104      	movs	r1, #4
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f011 fc8b 	bl	8028548 <_ZdlPvj>
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	4618      	mov	r0, r3
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b082      	sub	sp, #8
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	3344      	adds	r3, #68	; 0x44
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	4798      	blx	r3
    }
 8016c50:	bf00      	nop
 8016c52:	3708      	adds	r7, #8
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016c60:	2300      	movs	r3, #0
    }
 8016c62:	4618      	mov	r0, r3
 8016c64:	370c      	adds	r7, #12
 8016c66:	46bd      	mov	sp, r7
 8016c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6c:	4770      	bx	lr
	...

08016c70 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8016c70:	b480      	push	{r7}
 8016c72:	b083      	sub	sp, #12
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
    {
 8016c78:	4a04      	ldr	r2, [pc, #16]	; (8016c8c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	601a      	str	r2, [r3, #0]
    }
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	4618      	mov	r0, r3
 8016c82:	370c      	adds	r7, #12
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr
 8016c8c:	0802bd54 	.word	0x0802bd54

08016c90 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b082      	sub	sp, #8
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
    }
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	f7ff ffe9 	bl	8016c70 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016c9e:	210c      	movs	r1, #12
 8016ca0:	6878      	ldr	r0, [r7, #4]
 8016ca2:	f011 fc51 	bl	8028548 <_ZdlPvj>
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3708      	adds	r7, #8
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016cb0:	b480      	push	{r7}
 8016cb2:	b083      	sub	sp, #12
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
 8016cb8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016cba:	4a09      	ldr	r2, [pc, #36]	; (8016ce0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	601a      	str	r2, [r3, #0]
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	683a      	ldr	r2, [r7, #0]
 8016cc4:	605a      	str	r2, [r3, #4]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2200      	movs	r2, #0
 8016cca:	721a      	strb	r2, [r3, #8]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2200      	movs	r2, #0
 8016cd0:	725a      	strb	r2, [r3, #9]
    {
    }
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	370c      	adds	r7, #12
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cde:	4770      	bx	lr
 8016ce0:	0802bd54 	.word	0x0802bd54

08016ce4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	685a      	ldr	r2, [r3, #4]
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	685b      	ldr	r3, [r3, #4]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	3314      	adds	r3, #20
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	4610      	mov	r0, r2
 8016cfc:	4798      	blx	r3
    }
 8016cfe:	bf00      	nop
 8016d00:	3708      	adds	r7, #8
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bd80      	pop	{r7, pc}

08016d06 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8016d06:	b580      	push	{r7, lr}
 8016d08:	b082      	sub	sp, #8
 8016d0a:	af00      	add	r7, sp, #0
 8016d0c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	3328      	adds	r3, #40	; 0x28
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	4610      	mov	r0, r2
 8016d1a:	4798      	blx	r3
    }
 8016d1c:	bf00      	nop
 8016d1e:	3708      	adds	r7, #8
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8016d24:	b480      	push	{r7}
 8016d26:	b085      	sub	sp, #20
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	60f8      	str	r0, [r7, #12]
 8016d2c:	60b9      	str	r1, [r7, #8]
 8016d2e:	607a      	str	r2, [r7, #4]
 8016d30:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	68ba      	ldr	r2, [r7, #8]
 8016d42:	430a      	orrs	r2, r1
 8016d44:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d4c:	f023 0107 	bic.w	r1, r3, #7
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	430a      	orrs	r2, r1
 8016d58:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016d60:	4b06      	ldr	r3, [pc, #24]	; (8016d7c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8016d62:	4013      	ands	r3, r2
 8016d64:	68fa      	ldr	r2, [r7, #12]
 8016d66:	6812      	ldr	r2, [r2, #0]
 8016d68:	6839      	ldr	r1, [r7, #0]
 8016d6a:	430b      	orrs	r3, r1
 8016d6c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016d6e:	2300      	movs	r3, #0
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3714      	adds	r7, #20
 8016d74:	46bd      	mov	sp, r7
 8016d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7a:	4770      	bx	lr
 8016d7c:	ffffc000 	.word	0xffffc000

08016d80 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8016d88:	f7f9 ffe6 	bl	8010d58 <_ZN8touchgfx3HAL11getInstanceEv>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7ff ffa8 	bl	8016ce4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8016d94:	bf00      	nop
 8016d96:	3708      	adds	r7, #8
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b082      	sub	sp, #8
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
    assert(0);
 8016da4:	4b02      	ldr	r3, [pc, #8]	; (8016db0 <DMA2D_XferErrorCallback+0x14>)
 8016da6:	4a03      	ldr	r2, [pc, #12]	; (8016db4 <DMA2D_XferErrorCallback+0x18>)
 8016da8:	213e      	movs	r1, #62	; 0x3e
 8016daa:	4803      	ldr	r0, [pc, #12]	; (8016db8 <DMA2D_XferErrorCallback+0x1c>)
 8016dac:	f011 fbfa 	bl	80285a4 <__assert_func>
 8016db0:	0802a2dc 	.word	0x0802a2dc
 8016db4:	0802a2e0 	.word	0x0802a2e0
 8016db8:	0802a314 	.word	0x0802a314

08016dbc <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b082      	sub	sp, #8
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	3318      	adds	r3, #24
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7fb f916 	bl	8011ffa <_ZN8touchgfx9colortypeC1Ev>
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	3708      	adds	r7, #8
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bd80      	pop	{r7, pc}

08016dd8 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8016dd8:	b5b0      	push	{r4, r5, r7, lr}
 8016dda:	b082      	sub	sp, #8
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016de0:	687a      	ldr	r2, [r7, #4]
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	330c      	adds	r3, #12
 8016de6:	4619      	mov	r1, r3
 8016de8:	4610      	mov	r0, r2
 8016dea:	f7ff ff61 	bl	8016cb0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016dee:	4a0e      	ldr	r2, [pc, #56]	; (8016e28 <_ZN10STM32F7DMAC1Ev+0x50>)
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	601a      	str	r2, [r3, #0]
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	f103 000c 	add.w	r0, r3, #12
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	3320      	adds	r3, #32
 8016dfe:	2260      	movs	r2, #96	; 0x60
 8016e00:	4619      	mov	r1, r3
 8016e02:	f003 f8bd 	bl	8019f80 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	3320      	adds	r3, #32
 8016e0a:	245f      	movs	r4, #95	; 0x5f
 8016e0c:	461d      	mov	r5, r3
 8016e0e:	2c00      	cmp	r4, #0
 8016e10:	db05      	blt.n	8016e1e <_ZN10STM32F7DMAC1Ev+0x46>
 8016e12:	4628      	mov	r0, r5
 8016e14:	f7ff ffd2 	bl	8016dbc <_ZN8touchgfx6BlitOpC1Ev>
 8016e18:	3520      	adds	r5, #32
 8016e1a:	3c01      	subs	r4, #1
 8016e1c:	e7f7      	b.n	8016e0e <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	4618      	mov	r0, r3
 8016e22:	3708      	adds	r7, #8
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bdb0      	pop	{r4, r5, r7, pc}
 8016e28:	0802acfc 	.word	0x0802acfc

08016e2c <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b082      	sub	sp, #8
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
 8016e34:	4a0b      	ldr	r2, [pc, #44]	; (8016e64 <_ZN10STM32F7DMAD1Ev+0x38>)
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8016e3a:	480b      	ldr	r0, [pc, #44]	; (8016e68 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8016e3c:	f7ee f8dc 	bl	8004ff8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016e40:	205a      	movs	r0, #90	; 0x5a
 8016e42:	f7ff fe9d 	bl	8016b80 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	330c      	adds	r3, #12
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f000 faa4 	bl	8017398 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	4618      	mov	r0, r3
 8016e54:	f7ff ff0c 	bl	8016c70 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3708      	adds	r7, #8
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}
 8016e62:	bf00      	nop
 8016e64:	0802acfc 	.word	0x0802acfc
 8016e68:	2000c774 	.word	0x2000c774

08016e6c <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b082      	sub	sp, #8
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
}
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f7ff ffd9 	bl	8016e2c <_ZN10STM32F7DMAD1Ev>
 8016e7a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f011 fb62 	bl	8028548 <_ZdlPvj>
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	4618      	mov	r0, r3
 8016e88:	3708      	adds	r7, #8
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}
	...

08016e90 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8016e98:	4b09      	ldr	r3, [pc, #36]	; (8016ec0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016e9a:	4a0a      	ldr	r2, [pc, #40]	; (8016ec4 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8016e9c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8016e9e:	4808      	ldr	r0, [pc, #32]	; (8016ec0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016ea0:	f7ee f860 	bl	8004f64 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8016ea4:	4b06      	ldr	r3, [pc, #24]	; (8016ec0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016ea6:	4a08      	ldr	r2, [pc, #32]	; (8016ec8 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8016ea8:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8016eaa:	4b05      	ldr	r3, [pc, #20]	; (8016ec0 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016eac:	4a07      	ldr	r2, [pc, #28]	; (8016ecc <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8016eae:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016eb0:	205a      	movs	r0, #90	; 0x5a
 8016eb2:	f7ff fe47 	bl	8016b44 <__NVIC_EnableIRQ>
}
 8016eb6:	bf00      	nop
 8016eb8:	3708      	adds	r7, #8
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}
 8016ebe:	bf00      	nop
 8016ec0:	2000c774 	.word	0x2000c774
 8016ec4:	4002b000 	.word	0x4002b000
 8016ec8:	08016d81 	.word	0x08016d81
 8016ecc:	08016d9d 	.word	0x08016d9d

08016ed0 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8016ed0:	b480      	push	{r7}
 8016ed2:	b083      	sub	sp, #12
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8016ed8:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8016edc:	4618      	mov	r0, r3
 8016ede:	370c      	adds	r7, #12
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee6:	4770      	bx	lr

08016ee8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016ee8:	b590      	push	{r4, r7, lr}
 8016eea:	b08d      	sub	sp, #52	; 0x34
 8016eec:	af02      	add	r7, sp, #8
 8016eee:	6078      	str	r0, [r7, #4]
 8016ef0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8016ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016ef6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8016ef8:	2300      	movs	r3, #0
 8016efa:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016efc:	683b      	ldr	r3, [r7, #0]
 8016efe:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016f00:	2b20      	cmp	r3, #32
 8016f02:	d007      	beq.n	8016f14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8016f04:	683b      	ldr	r3, [r7, #0]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	2b40      	cmp	r3, #64	; 0x40
 8016f0a:	d003      	beq.n	8016f14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016f0c:	683b      	ldr	r3, [r7, #0]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	2b04      	cmp	r3, #4
 8016f12:	d101      	bne.n	8016f18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8016f14:	2301      	movs	r3, #1
 8016f16:	e000      	b.n	8016f1a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8016f18:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016f1a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8016f20:	2b80      	cmp	r3, #128	; 0x80
 8016f22:	d004      	beq.n	8016f2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f2c:	d101      	bne.n	8016f32 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016f2e:	2301      	movs	r3, #1
 8016f30:	e000      	b.n	8016f34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8016f32:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016f34:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016f36:	f7f9 ff1b 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	681a      	ldr	r2, [r3, #0]
 8016f3e:	3220      	adds	r2, #32
 8016f40:	6812      	ldr	r2, [r2, #0]
 8016f42:	4618      	mov	r0, r3
 8016f44:	4790      	blx	r2
 8016f46:	4603      	mov	r3, r0
 8016f48:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f52:	d012      	beq.n	8016f7a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
 8016f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f58:	d820      	bhi.n	8016f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8016f5a:	2b80      	cmp	r3, #128	; 0x80
 8016f5c:	d00a      	beq.n	8016f74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 8016f5e:	2b80      	cmp	r3, #128	; 0x80
 8016f60:	d81c      	bhi.n	8016f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8016f62:	2b40      	cmp	r3, #64	; 0x40
 8016f64:	d017      	beq.n	8016f96 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 8016f66:	2b40      	cmp	r3, #64	; 0x40
 8016f68:	d818      	bhi.n	8016f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8016f6a:	2b04      	cmp	r3, #4
 8016f6c:	d008      	beq.n	8016f80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x98>
 8016f6e:	2b20      	cmp	r3, #32
 8016f70:	d011      	beq.n	8016f96 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 8016f72:	e013      	b.n	8016f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016f74:	230a      	movs	r3, #10
 8016f76:	623b      	str	r3, [r7, #32]
        break;
 8016f78:	e01a      	b.n	8016fb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016f7a:	2309      	movs	r3, #9
 8016f7c:	623b      	str	r3, [r7, #32]
        break;
 8016f7e:	e017      	b.n	8016fb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016f84:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016f86:	7f7b      	ldrb	r3, [r7, #29]
 8016f88:	2b10      	cmp	r3, #16
 8016f8a:	d101      	bne.n	8016f90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8016f8c:	2302      	movs	r3, #2
 8016f8e:	e000      	b.n	8016f92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
 8016f90:	2301      	movs	r3, #1
 8016f92:	623b      	str	r3, [r7, #32]
        break;
 8016f94:	e00c      	b.n	8016fb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016f96:	2300      	movs	r3, #0
 8016f98:	623b      	str	r3, [r7, #32]
        break;
 8016f9a:	e009      	b.n	8016fb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016fa0:	7f7b      	ldrb	r3, [r7, #29]
 8016fa2:	2b10      	cmp	r3, #16
 8016fa4:	d101      	bne.n	8016faa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc2>
 8016fa6:	2302      	movs	r3, #2
 8016fa8:	e000      	b.n	8016fac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc4>
 8016faa:	2301      	movs	r3, #1
 8016fac:	623b      	str	r3, [r7, #32]
        break;
 8016fae:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016fb0:	4a76      	ldr	r2, [pc, #472]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016fb6:	7f7b      	ldrb	r3, [r7, #29]
 8016fb8:	2b10      	cmp	r3, #16
 8016fba:	d101      	bne.n	8016fc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 8016fbc:	2302      	movs	r3, #2
 8016fbe:	e000      	b.n	8016fc2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xda>
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	4a72      	ldr	r2, [pc, #456]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016fc4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	8adb      	ldrh	r3, [r3, #22]
 8016fca:	461a      	mov	r2, r3
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	8a1b      	ldrh	r3, [r3, #16]
 8016fd0:	1ad3      	subs	r3, r2, r3
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	4b6d      	ldr	r3, [pc, #436]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016fd6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016fd8:	7f7b      	ldrb	r3, [r7, #29]
 8016fda:	2b10      	cmp	r3, #16
 8016fdc:	d101      	bne.n	8016fe2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8016fde:	2202      	movs	r2, #2
 8016fe0:	e000      	b.n	8016fe4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 8016fe2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	8adb      	ldrh	r3, [r3, #22]
 8016fe8:	4619      	mov	r1, r3
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	8a1b      	ldrh	r3, [r3, #16]
 8016fee:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ff2:	4866      	ldr	r0, [pc, #408]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016ff4:	f7ff fe96 	bl	8016d24 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016ff8:	4a64      	ldr	r2, [pc, #400]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016ffa:	6a3b      	ldr	r3, [r7, #32]
 8016ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	8a9b      	ldrh	r3, [r3, #20]
 8017002:	461a      	mov	r2, r3
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	8a1b      	ldrh	r3, [r3, #16]
 8017008:	1ad3      	subs	r3, r2, r3
 801700a:	461a      	mov	r2, r3
 801700c:	4b5f      	ldr	r3, [pc, #380]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801700e:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8017010:	7ffb      	ldrb	r3, [r7, #31]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d103      	bne.n	801701e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8017016:	7fbb      	ldrb	r3, [r7, #30]
 8017018:	2b00      	cmp	r3, #0
 801701a:	f000 8082 	beq.w	8017122 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
    {
        if (blitOp.alpha < 255)
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	7f1b      	ldrb	r3, [r3, #28]
 8017022:	2bff      	cmp	r3, #255	; 0xff
 8017024:	d008      	beq.n	8017038 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8017026:	4b59      	ldr	r3, [pc, #356]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017028:	2202      	movs	r2, #2
 801702a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	7f1b      	ldrb	r3, [r3, #28]
 8017030:	461a      	mov	r2, r3
 8017032:	4b56      	ldr	r3, [pc, #344]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017034:	635a      	str	r2, [r3, #52]	; 0x34
 8017036:	e002      	b.n	801703e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8017038:	4b54      	ldr	r3, [pc, #336]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801703a:	2200      	movs	r2, #0
 801703c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801703e:	7fbb      	ldrb	r3, [r7, #30]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d059      	beq.n	80170f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
        {
            if (bitDepth == 16)
 8017044:	7f7b      	ldrb	r3, [r7, #29]
 8017046:	2b10      	cmp	r3, #16
 8017048:	d14a      	bne.n	80170e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	3318      	adds	r3, #24
 801704e:	4618      	mov	r0, r3
 8017050:	f7ff fdc6 	bl	8016be0 <_ZNK8touchgfx9colortypecvtEv>
 8017054:	4603      	mov	r3, r0
 8017056:	12db      	asrs	r3, r3, #11
 8017058:	f003 021f 	and.w	r2, r3, #31
 801705c:	4613      	mov	r3, r2
 801705e:	021b      	lsls	r3, r3, #8
 8017060:	1a9b      	subs	r3, r3, r2
 8017062:	4a4b      	ldr	r2, [pc, #300]	; (8017190 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8017064:	fb82 1203 	smull	r1, r2, r2, r3
 8017068:	441a      	add	r2, r3
 801706a:	1112      	asrs	r2, r2, #4
 801706c:	17db      	asrs	r3, r3, #31
 801706e:	1ad3      	subs	r3, r2, r3
 8017070:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	3318      	adds	r3, #24
 8017076:	4618      	mov	r0, r3
 8017078:	f7ff fdb2 	bl	8016be0 <_ZNK8touchgfx9colortypecvtEv>
 801707c:	4603      	mov	r3, r0
 801707e:	115b      	asrs	r3, r3, #5
 8017080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8017084:	4613      	mov	r3, r2
 8017086:	021b      	lsls	r3, r3, #8
 8017088:	1a9b      	subs	r3, r3, r2
 801708a:	4a42      	ldr	r2, [pc, #264]	; (8017194 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 801708c:	fb82 1203 	smull	r1, r2, r2, r3
 8017090:	441a      	add	r2, r3
 8017092:	1152      	asrs	r2, r2, #5
 8017094:	17db      	asrs	r3, r3, #31
 8017096:	1ad3      	subs	r3, r2, r3
 8017098:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	3318      	adds	r3, #24
 801709e:	4618      	mov	r0, r3
 80170a0:	f7ff fd9e 	bl	8016be0 <_ZNK8touchgfx9colortypecvtEv>
 80170a4:	4603      	mov	r3, r0
 80170a6:	f003 021f 	and.w	r2, r3, #31
 80170aa:	4613      	mov	r3, r2
 80170ac:	021b      	lsls	r3, r3, #8
 80170ae:	1a9b      	subs	r3, r3, r2
 80170b0:	4a37      	ldr	r2, [pc, #220]	; (8017190 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80170b2:	fb82 1203 	smull	r1, r2, r2, r3
 80170b6:	441a      	add	r2, r3
 80170b8:	1112      	asrs	r2, r2, #4
 80170ba:	17db      	asrs	r3, r3, #31
 80170bc:	1ad3      	subs	r3, r2, r3
 80170be:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80170c0:	683b      	ldr	r3, [r7, #0]
 80170c2:	7f1b      	ldrb	r3, [r3, #28]
 80170c4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	061a      	lsls	r2, r3, #24
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	041b      	lsls	r3, r3, #16
 80170ce:	431a      	orrs	r2, r3
 80170d0:	697b      	ldr	r3, [r7, #20]
 80170d2:	021b      	lsls	r3, r3, #8
 80170d4:	431a      	orrs	r2, r3
 80170d6:	693b      	ldr	r3, [r7, #16]
 80170d8:	4313      	orrs	r3, r2
 80170da:	4a2c      	ldr	r2, [pc, #176]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80170dc:	6353      	str	r3, [r2, #52]	; 0x34
 80170de:	e00b      	b.n	80170f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	3318      	adds	r3, #24
 80170e4:	4618      	mov	r0, r3
 80170e6:	f7ff fd6f 	bl	8016bc8 <_ZNK8touchgfx9colortype10getColor32Ev>
 80170ea:	4602      	mov	r2, r0
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	7f1b      	ldrb	r3, [r3, #28]
 80170f0:	061b      	lsls	r3, r3, #24
 80170f2:	4313      	orrs	r3, r2
 80170f4:	4a25      	ldr	r2, [pc, #148]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80170f6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	8adb      	ldrh	r3, [r3, #22]
 80170fc:	461a      	mov	r2, r3
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	8a1b      	ldrh	r3, [r3, #16]
 8017102:	1ad3      	subs	r3, r2, r3
 8017104:	461a      	mov	r2, r3
 8017106:	4b21      	ldr	r3, [pc, #132]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017108:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801710a:	7f7b      	ldrb	r3, [r7, #29]
 801710c:	2b10      	cmp	r3, #16
 801710e:	d101      	bne.n	8017114 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>
 8017110:	2302      	movs	r3, #2
 8017112:	e000      	b.n	8017116 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22e>
 8017114:	2301      	movs	r3, #1
 8017116:	4a1d      	ldr	r2, [pc, #116]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017118:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801711a:	2100      	movs	r1, #0
 801711c:	481b      	ldr	r0, [pc, #108]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801711e:	f7ee f9eb 	bl	80054f8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8017122:	2101      	movs	r1, #1
 8017124:	4819      	ldr	r0, [pc, #100]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8017126:	f7ee f9e7 	bl	80054f8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 801712a:	7ffb      	ldrb	r3, [r7, #31]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d102      	bne.n	8017136 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24e>
 8017130:	7fbb      	ldrb	r3, [r7, #30]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d015      	beq.n	8017162 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27a>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801713a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017140:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017146:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801714c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801714e:	683b      	ldr	r3, [r7, #0]
 8017150:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017152:	9301      	str	r3, [sp, #4]
 8017154:	9200      	str	r2, [sp, #0]
 8017156:	4623      	mov	r3, r4
 8017158:	4602      	mov	r2, r0
 801715a:	480c      	ldr	r0, [pc, #48]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801715c:	f7ed ffef 	bl	800513e <HAL_DMA2D_BlendingStart_IT>
 8017160:	e010      	b.n	8017184 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8017166:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801716c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801716e:	683b      	ldr	r3, [r7, #0]
 8017170:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8017172:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8017178:	9300      	str	r3, [sp, #0]
 801717a:	4603      	mov	r3, r0
 801717c:	4803      	ldr	r0, [pc, #12]	; (801718c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801717e:	f7ed ffab 	bl	80050d8 <HAL_DMA2D_Start_IT>
    }
}
 8017182:	bf00      	nop
 8017184:	bf00      	nop
 8017186:	372c      	adds	r7, #44	; 0x2c
 8017188:	46bd      	mov	sp, r7
 801718a:	bd90      	pop	{r4, r7, pc}
 801718c:	2000c774 	.word	0x2000c774
 8017190:	84210843 	.word	0x84210843
 8017194:	82082083 	.word	0x82082083

08017198 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8017198:	b590      	push	{r4, r7, lr}
 801719a:	b08d      	sub	sp, #52	; 0x34
 801719c:	af02      	add	r7, sp, #8
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80171a2:	f7f9 fde5 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 80171a6:	4603      	mov	r3, r0
 80171a8:	681a      	ldr	r2, [r3, #0]
 80171aa:	3220      	adds	r2, #32
 80171ac:	6812      	ldr	r2, [r2, #0]
 80171ae:	4618      	mov	r0, r3
 80171b0:	4790      	blx	r2
 80171b2:	4603      	mov	r3, r0
 80171b4:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80171b6:	7ffb      	ldrb	r3, [r7, #31]
 80171b8:	2b10      	cmp	r3, #16
 80171ba:	d101      	bne.n	80171c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80171bc:	2302      	movs	r3, #2
 80171be:	e000      	b.n	80171c2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80171c0:	2301      	movs	r3, #1
 80171c2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80171c4:	2300      	movs	r3, #0
 80171c6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80171c8:	7ffb      	ldrb	r3, [r7, #31]
 80171ca:	2b10      	cmp	r3, #16
 80171cc:	d149      	bne.n	8017262 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	3318      	adds	r3, #24
 80171d2:	4618      	mov	r0, r3
 80171d4:	f7ff fd04 	bl	8016be0 <_ZNK8touchgfx9colortypecvtEv>
 80171d8:	4603      	mov	r3, r0
 80171da:	12db      	asrs	r3, r3, #11
 80171dc:	f003 021f 	and.w	r2, r3, #31
 80171e0:	4613      	mov	r3, r2
 80171e2:	021b      	lsls	r3, r3, #8
 80171e4:	1a9b      	subs	r3, r3, r2
 80171e6:	4a69      	ldr	r2, [pc, #420]	; (801738c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80171e8:	fb82 1203 	smull	r1, r2, r2, r3
 80171ec:	441a      	add	r2, r3
 80171ee:	1112      	asrs	r2, r2, #4
 80171f0:	17db      	asrs	r3, r3, #31
 80171f2:	1ad3      	subs	r3, r2, r3
 80171f4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	3318      	adds	r3, #24
 80171fa:	4618      	mov	r0, r3
 80171fc:	f7ff fcf0 	bl	8016be0 <_ZNK8touchgfx9colortypecvtEv>
 8017200:	4603      	mov	r3, r0
 8017202:	115b      	asrs	r3, r3, #5
 8017204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8017208:	4613      	mov	r3, r2
 801720a:	021b      	lsls	r3, r3, #8
 801720c:	1a9b      	subs	r3, r3, r2
 801720e:	4a60      	ldr	r2, [pc, #384]	; (8017390 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8017210:	fb82 1203 	smull	r1, r2, r2, r3
 8017214:	441a      	add	r2, r3
 8017216:	1152      	asrs	r2, r2, #5
 8017218:	17db      	asrs	r3, r3, #31
 801721a:	1ad3      	subs	r3, r2, r3
 801721c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	3318      	adds	r3, #24
 8017222:	4618      	mov	r0, r3
 8017224:	f7ff fcdc 	bl	8016be0 <_ZNK8touchgfx9colortypecvtEv>
 8017228:	4603      	mov	r3, r0
 801722a:	f003 021f 	and.w	r2, r3, #31
 801722e:	4613      	mov	r3, r2
 8017230:	021b      	lsls	r3, r3, #8
 8017232:	1a9b      	subs	r3, r3, r2
 8017234:	4a55      	ldr	r2, [pc, #340]	; (801738c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8017236:	fb82 1203 	smull	r1, r2, r2, r3
 801723a:	441a      	add	r2, r3
 801723c:	1112      	asrs	r2, r2, #4
 801723e:	17db      	asrs	r3, r3, #31
 8017240:	1ad3      	subs	r3, r2, r3
 8017242:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8017244:	683b      	ldr	r3, [r7, #0]
 8017246:	7f1b      	ldrb	r3, [r3, #28]
 8017248:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801724a:	68bb      	ldr	r3, [r7, #8]
 801724c:	061a      	lsls	r2, r3, #24
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	041b      	lsls	r3, r3, #16
 8017252:	431a      	orrs	r2, r3
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	021b      	lsls	r3, r3, #8
 8017258:	4313      	orrs	r3, r2
 801725a:	68fa      	ldr	r2, [r7, #12]
 801725c:	4313      	orrs	r3, r2
 801725e:	623b      	str	r3, [r7, #32]
 8017260:	e00b      	b.n	801727a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	7f1b      	ldrb	r3, [r3, #28]
 8017266:	061b      	lsls	r3, r3, #24
 8017268:	461c      	mov	r4, r3
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	3318      	adds	r3, #24
 801726e:	4618      	mov	r0, r3
 8017270:	f7ff fcaa 	bl	8016bc8 <_ZNK8touchgfx9colortype10getColor32Ev>
 8017274:	4603      	mov	r3, r0
 8017276:	4323      	orrs	r3, r4
 8017278:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	2b08      	cmp	r3, #8
 8017280:	d103      	bne.n	801728a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8017282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8017286:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017288:	e003      	b.n	8017292 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801728a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801728e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017290:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8017292:	4a40      	ldr	r2, [pc, #256]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017296:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8017298:	7ffb      	ldrb	r3, [r7, #31]
 801729a:	2b10      	cmp	r3, #16
 801729c:	d101      	bne.n	80172a2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801729e:	2302      	movs	r3, #2
 80172a0:	e000      	b.n	80172a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80172a2:	2301      	movs	r3, #1
 80172a4:	4a3b      	ldr	r2, [pc, #236]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80172a6:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	8adb      	ldrh	r3, [r3, #22]
 80172ac:	461a      	mov	r2, r3
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	8a1b      	ldrh	r3, [r3, #16]
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	461a      	mov	r2, r3
 80172b6:	4b37      	ldr	r3, [pc, #220]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80172b8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80172ba:	7ffb      	ldrb	r3, [r7, #31]
 80172bc:	2b10      	cmp	r3, #16
 80172be:	d101      	bne.n	80172c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80172c0:	2202      	movs	r2, #2
 80172c2:	e000      	b.n	80172c6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80172c4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	8adb      	ldrh	r3, [r3, #22]
 80172ca:	4619      	mov	r1, r3
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	8a1b      	ldrh	r3, [r3, #16]
 80172d0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80172d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172d4:	482f      	ldr	r0, [pc, #188]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80172d6:	f7ff fd25 	bl	8016d24 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80172da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80172e0:	d11e      	bne.n	8017320 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80172e2:	4b2c      	ldr	r3, [pc, #176]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80172e4:	2201      	movs	r2, #1
 80172e6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80172e8:	4a2a      	ldr	r2, [pc, #168]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80172ea:	6a3b      	ldr	r3, [r7, #32]
 80172ec:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80172ee:	4b29      	ldr	r3, [pc, #164]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80172f0:	2209      	movs	r2, #9
 80172f2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	8adb      	ldrh	r3, [r3, #22]
 80172f8:	461a      	mov	r2, r3
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	8a1b      	ldrh	r3, [r3, #16]
 80172fe:	1ad3      	subs	r3, r2, r3
 8017300:	461a      	mov	r2, r3
 8017302:	4b24      	ldr	r3, [pc, #144]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017304:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8017306:	7ffb      	ldrb	r3, [r7, #31]
 8017308:	2b10      	cmp	r3, #16
 801730a:	d101      	bne.n	8017310 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 801730c:	2302      	movs	r3, #2
 801730e:	e000      	b.n	8017312 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8017310:	2301      	movs	r3, #1
 8017312:	4a20      	ldr	r2, [pc, #128]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017314:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8017316:	2100      	movs	r1, #0
 8017318:	481e      	ldr	r0, [pc, #120]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801731a:	f7ee f8ed 	bl	80054f8 <HAL_DMA2D_ConfigLayer>
 801731e:	e005      	b.n	801732c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8017320:	4a1c      	ldr	r2, [pc, #112]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017322:	69bb      	ldr	r3, [r7, #24]
 8017324:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8017326:	4b1b      	ldr	r3, [pc, #108]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017328:	2200      	movs	r2, #0
 801732a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801732c:	2101      	movs	r1, #1
 801732e:	4819      	ldr	r0, [pc, #100]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017330:	f7ee f8e2 	bl	80054f8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8017334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801733a:	d115      	bne.n	8017368 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017340:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8017342:	683b      	ldr	r3, [r7, #0]
 8017344:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017346:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8017348:	683b      	ldr	r3, [r7, #0]
 801734a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801734c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801734e:	683b      	ldr	r3, [r7, #0]
 8017350:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017352:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017358:	9301      	str	r3, [sp, #4]
 801735a:	9200      	str	r2, [sp, #0]
 801735c:	4623      	mov	r3, r4
 801735e:	4602      	mov	r2, r0
 8017360:	480c      	ldr	r0, [pc, #48]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017362:	f7ed feec 	bl	800513e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8017366:	e00d      	b.n	8017384 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8017368:	683b      	ldr	r3, [r7, #0]
 801736a:	68db      	ldr	r3, [r3, #12]
 801736c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801736e:	683b      	ldr	r3, [r7, #0]
 8017370:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8017372:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8017374:	683b      	ldr	r3, [r7, #0]
 8017376:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8017378:	9300      	str	r3, [sp, #0]
 801737a:	460b      	mov	r3, r1
 801737c:	6a39      	ldr	r1, [r7, #32]
 801737e:	4805      	ldr	r0, [pc, #20]	; (8017394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017380:	f7ed feaa 	bl	80050d8 <HAL_DMA2D_Start_IT>
}
 8017384:	bf00      	nop
 8017386:	372c      	adds	r7, #44	; 0x2c
 8017388:	46bd      	mov	sp, r7
 801738a:	bd90      	pop	{r4, r7, pc}
 801738c:	84210843 	.word	0x84210843
 8017390:	82082083 	.word	0x82082083
 8017394:	2000c774 	.word	0x2000c774

08017398 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	4a05      	ldr	r2, [pc, #20]	; (80173b8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	601a      	str	r2, [r3, #0]
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7ff fc27 	bl	8016bfc <_ZN8touchgfx9DMA_QueueD1Ev>
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	4618      	mov	r0, r3
 80173b2:	3708      	adds	r7, #8
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	0802bda4 	.word	0x0802bda4

080173bc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f7ff ffe7 	bl	8017398 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80173ca:	2114      	movs	r1, #20
 80173cc:	6878      	ldr	r0, [r7, #4]
 80173ce:	f011 f8bb 	bl	8028548 <_ZdlPvj>
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	4618      	mov	r0, r3
 80173d6:	3708      	adds	r7, #8
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80173dc:	b480      	push	{r7}
 80173de:	b083      	sub	sp, #12
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
        texts = t;
 80173e4:	4a04      	ldr	r2, [pc, #16]	; (80173f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	6013      	str	r3, [r2, #0]
    }
 80173ea:	bf00      	nop
 80173ec:	370c      	adds	r7, #12
 80173ee:	46bd      	mov	sp, r7
 80173f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f4:	4770      	bx	lr
 80173f6:	bf00      	nop
 80173f8:	2000bf8c 	.word	0x2000bf8c

080173fc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80173fc:	b480      	push	{r7}
 80173fe:	b085      	sub	sp, #20
 8017400:	af00      	add	r7, sp, #0
 8017402:	60f8      	str	r0, [r7, #12]
 8017404:	60b9      	str	r1, [r7, #8]
 8017406:	607a      	str	r2, [r7, #4]
 8017408:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801740a:	4a0b      	ldr	r2, [pc, #44]	; (8017438 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	601a      	str	r2, [r3, #0]
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	68ba      	ldr	r2, [r7, #8]
 8017414:	605a      	str	r2, [r3, #4]
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	687a      	ldr	r2, [r7, #4]
 801741a:	609a      	str	r2, [r3, #8]
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	683a      	ldr	r2, [r7, #0]
 8017420:	60da      	str	r2, [r3, #12]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	69ba      	ldr	r2, [r7, #24]
 8017426:	611a      	str	r2, [r3, #16]
    {
    }
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	4618      	mov	r0, r3
 801742c:	3714      	adds	r7, #20
 801742e:	46bd      	mov	sp, r7
 8017430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017434:	4770      	bx	lr
 8017436:	bf00      	nop
 8017438:	0802ae34 	.word	0x0802ae34

0801743c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801743c:	b480      	push	{r7}
 801743e:	b083      	sub	sp, #12
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
    {
 8017444:	4a04      	ldr	r2, [pc, #16]	; (8017458 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	601a      	str	r2, [r3, #0]
    }
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	4618      	mov	r0, r3
 801744e:	370c      	adds	r7, #12
 8017450:	46bd      	mov	sp, r7
 8017452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017456:	4770      	bx	lr
 8017458:	0802ae34 	.word	0x0802ae34

0801745c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
    }
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f7ff ffe9 	bl	801743c <_ZN8touchgfx7MVPHeapD1Ev>
 801746a:	2114      	movs	r1, #20
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f011 f86b 	bl	8028548 <_ZdlPvj>
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	4618      	mov	r0, r3
 8017476:	3708      	adds	r7, #8
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}

0801747c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 801747c:	b480      	push	{r7}
 801747e:	b083      	sub	sp, #12
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
    {
 8017484:	4a04      	ldr	r2, [pc, #16]	; (8017498 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	601a      	str	r2, [r3, #0]
    }
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	4618      	mov	r0, r3
 801748e:	370c      	adds	r7, #12
 8017490:	46bd      	mov	sp, r7
 8017492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017496:	4770      	bx	lr
 8017498:	0802c760 	.word	0x0802c760

0801749c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801749c:	b580      	push	{r7, lr}
 801749e:	b082      	sub	sp, #8
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
    }
 80174a4:	6878      	ldr	r0, [r7, #4]
 80174a6:	f7ff ffe9 	bl	801747c <_ZN8touchgfx3LCDD1Ev>
 80174aa:	2108      	movs	r1, #8
 80174ac:	6878      	ldr	r0, [r7, #4]
 80174ae:	f011 f84b 	bl	8028548 <_ZdlPvj>
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	4618      	mov	r0, r3
 80174b6:	3708      	adds	r7, #8
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}

080174bc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80174bc:	b480      	push	{r7}
 80174be:	b083      	sub	sp, #12
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	2200      	movs	r2, #0
 80174c8:	801a      	strh	r2, [r3, #0]
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	2200      	movs	r2, #0
 80174ce:	805a      	strh	r2, [r3, #2]
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2200      	movs	r2, #0
 80174d4:	809a      	strh	r2, [r3, #4]
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2200      	movs	r2, #0
 80174da:	80da      	strh	r2, [r3, #6]
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2200      	movs	r2, #0
 80174e0:	811a      	strh	r2, [r3, #8]
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2200      	movs	r2, #0
 80174e6:	815a      	strh	r2, [r3, #10]
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2200      	movs	r2, #0
 80174ec:	819a      	strh	r2, [r3, #12]
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2200      	movs	r2, #0
 80174f2:	739a      	strb	r2, [r3, #14]
        {
        }
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	4618      	mov	r0, r3
 80174f8:	370c      	adds	r7, #12
 80174fa:	46bd      	mov	sp, r7
 80174fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017500:	4770      	bx	lr

08017502 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8017502:	b580      	push	{r7, lr}
 8017504:	b082      	sub	sp, #8
 8017506:	af00      	add	r7, sp, #0
 8017508:	6078      	str	r0, [r7, #4]
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	4618      	mov	r0, r3
 801750e:	f7ff ffd5 	bl	80174bc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	2200      	movs	r2, #0
 8017516:	611a      	str	r2, [r3, #16]
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	2200      	movs	r2, #0
 801751c:	829a      	strh	r2, [r3, #20]
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	4618      	mov	r0, r3
 8017522:	3708      	adds	r7, #8
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}

08017528 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8017528:	b580      	push	{r7, lr}
 801752a:	b084      	sub	sp, #16
 801752c:	af00      	add	r7, sp, #0
 801752e:	60f8      	str	r0, [r7, #12]
 8017530:	60b9      	str	r1, [r7, #8]
 8017532:	607a      	str	r2, [r7, #4]
 8017534:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8017536:	4a44      	ldr	r2, [pc, #272]	; (8017648 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	601a      	str	r2, [r3, #0]
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	68ba      	ldr	r2, [r7, #8]
 8017540:	605a      	str	r2, [r3, #4]
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	687a      	ldr	r2, [r7, #4]
 8017546:	609a      	str	r2, [r3, #8]
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	683a      	ldr	r2, [r7, #0]
 801754c:	60da      	str	r2, [r3, #12]
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	2200      	movs	r2, #0
 8017552:	611a      	str	r2, [r3, #16]
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	2200      	movs	r2, #0
 8017558:	615a      	str	r2, [r3, #20]
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2200      	movs	r2, #0
 801755e:	619a      	str	r2, [r3, #24]
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	331c      	adds	r3, #28
 8017564:	4618      	mov	r0, r3
 8017566:	f7ff ffcc 	bl	8017502 <_ZN8touchgfx8GesturesC1Ev>
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2200      	movs	r2, #0
 801756e:	639a      	str	r2, [r3, #56]	; 0x38
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	2200      	movs	r2, #0
 8017574:	63da      	str	r2, [r3, #60]	; 0x3c
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	2200      	movs	r2, #0
 801757a:	641a      	str	r2, [r3, #64]	; 0x40
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	2200      	movs	r2, #0
 8017580:	645a      	str	r2, [r3, #68]	; 0x44
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	2200      	movs	r2, #0
 8017586:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	2201      	movs	r2, #1
 801758e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	2201      	movs	r2, #1
 8017596:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	2200      	movs	r2, #0
 801759e:	64da      	str	r2, [r3, #76]	; 0x4c
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	3350      	adds	r3, #80	; 0x50
 80175a4:	4618      	mov	r0, r3
 80175a6:	f7fa fd45 	bl	8012034 <_ZN8touchgfx4RectC1Ev>
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	2201      	movs	r2, #1
 80175ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	2200      	movs	r2, #0
 80175b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	2200      	movs	r2, #0
 80175be:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	2201      	movs	r2, #1
 80175c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	2200      	movs	r2, #0
 80175ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	2200      	movs	r2, #0
 80175d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	2200      	movs	r2, #0
 80175de:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	2200      	movs	r2, #0
 80175e6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2200      	movs	r2, #0
 80175ee:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	2200      	movs	r2, #0
 80175f6:	671a      	str	r2, [r3, #112]	; 0x70
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	2200      	movs	r2, #0
 80175fc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8017600:	4a12      	ldr	r2, [pc, #72]	; (801764c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8017606:	4a12      	ldr	r2, [pc, #72]	; (8017650 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8017608:	8b3b      	ldrh	r3, [r7, #24]
 801760a:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801760c:	4a11      	ldr	r2, [pc, #68]	; (8017654 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801760e:	8bbb      	ldrh	r3, [r7, #28]
 8017610:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8017612:	4b11      	ldr	r3, [pc, #68]	; (8017658 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8017614:	2200      	movs	r2, #0
 8017616:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8017618:	4b0d      	ldr	r3, [pc, #52]	; (8017650 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801761a:	881a      	ldrh	r2, [r3, #0]
 801761c:	4b0f      	ldr	r3, [pc, #60]	; (801765c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801761e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8017620:	4b0c      	ldr	r3, [pc, #48]	; (8017654 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8017622:	881a      	ldrh	r2, [r3, #0]
 8017624:	4b0e      	ldr	r3, [pc, #56]	; (8017660 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8017626:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8017628:	8b3a      	ldrh	r2, [r7, #24]
 801762a:	8bbb      	ldrh	r3, [r7, #28]
 801762c:	429a      	cmp	r2, r3
 801762e:	bf34      	ite	cc
 8017630:	2301      	movcc	r3, #1
 8017632:	2300      	movcs	r3, #0
 8017634:	b2db      	uxtb	r3, r3
 8017636:	461a      	mov	r2, r3
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	4618      	mov	r0, r3
 8017642:	3710      	adds	r7, #16
 8017644:	46bd      	mov	sp, r7
 8017646:	bd80      	pop	{r7, pc}
 8017648:	0802b910 	.word	0x0802b910
 801764c:	2000bef0 	.word	0x2000bef0
 8017650:	2000bee2 	.word	0x2000bee2
 8017654:	2000bee4 	.word	0x2000bee4
 8017658:	2000bee6 	.word	0x2000bee6
 801765c:	2000bee8 	.word	0x2000bee8
 8017660:	2000beea 	.word	0x2000beea

08017664 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	4618      	mov	r0, r3
 8017672:	f7f9 fda1 	bl	80111b8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8017676:	bf00      	nop
 8017678:	3708      	adds	r7, #8
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
	...

08017680 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8017680:	b580      	push	{r7, lr}
 8017682:	b086      	sub	sp, #24
 8017684:	af02      	add	r7, sp, #8
 8017686:	60f8      	str	r0, [r7, #12]
 8017688:	60b9      	str	r1, [r7, #8]
 801768a:	607a      	str	r2, [r7, #4]
 801768c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801768e:	68f8      	ldr	r0, [r7, #12]
 8017690:	69bb      	ldr	r3, [r7, #24]
 8017692:	9300      	str	r3, [sp, #0]
 8017694:	683b      	ldr	r3, [r7, #0]
 8017696:	687a      	ldr	r2, [r7, #4]
 8017698:	68b9      	ldr	r1, [r7, #8]
 801769a:	f7ff feaf 	bl	80173fc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801769e:	4a04      	ldr	r2, [pc, #16]	; (80176b0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	601a      	str	r2, [r3, #0]
    {

    }
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	4618      	mov	r0, r3
 80176a8:	3710      	adds	r7, #16
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
 80176ae:	bf00      	nop
 80176b0:	0802ae20 	.word	0x0802ae20

080176b4 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80176b4:	b580      	push	{r7, lr}
 80176b6:	af00      	add	r7, sp, #0
 80176b8:	4801      	ldr	r0, [pc, #4]	; (80176c0 <__tcf_0+0xc>)
 80176ba:	f000 f9f1 	bl	8017aa0 <_ZN12FrontendHeapD1Ev>
 80176be:	bd80      	pop	{r7, pc}
 80176c0:	200087b4 	.word	0x200087b4

080176c4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80176c4:	b580      	push	{r7, lr}
 80176c6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80176c8:	4b12      	ldr	r3, [pc, #72]	; (8017714 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	f3bf 8f5b 	dmb	ish
 80176d0:	b2db      	uxtb	r3, r3
 80176d2:	f003 0301 	and.w	r3, r3, #1
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	bf0c      	ite	eq
 80176da:	2301      	moveq	r3, #1
 80176dc:	2300      	movne	r3, #0
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d013      	beq.n	801770c <_ZN12FrontendHeap11getInstanceEv+0x48>
 80176e4:	480b      	ldr	r0, [pc, #44]	; (8017714 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80176e6:	f010 ff31 	bl	802854c <__cxa_guard_acquire>
 80176ea:	4603      	mov	r3, r0
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	bf14      	ite	ne
 80176f0:	2301      	movne	r3, #1
 80176f2:	2300      	moveq	r3, #0
 80176f4:	b2db      	uxtb	r3, r3
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d008      	beq.n	801770c <_ZN12FrontendHeap11getInstanceEv+0x48>
 80176fa:	4807      	ldr	r0, [pc, #28]	; (8017718 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80176fc:	f000 f832 	bl	8017764 <_ZN12FrontendHeapC1Ev>
 8017700:	4804      	ldr	r0, [pc, #16]	; (8017714 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8017702:	f010 ff2f 	bl	8028564 <__cxa_guard_release>
 8017706:	4805      	ldr	r0, [pc, #20]	; (801771c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8017708:	f010 ff6a 	bl	80285e0 <atexit>
        return instance;
 801770c:	4b02      	ldr	r3, [pc, #8]	; (8017718 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 801770e:	4618      	mov	r0, r3
 8017710:	bd80      	pop	{r7, pc}
 8017712:	bf00      	nop
 8017714:	2000b1dc 	.word	0x2000b1dc
 8017718:	200087b4 	.word	0x200087b4
 801771c:	080176b5 	.word	0x080176b5

08017720 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8017720:	b580      	push	{r7, lr}
 8017722:	b082      	sub	sp, #8
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	4a05      	ldr	r2, [pc, #20]	; (8017740 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	601a      	str	r2, [r3, #0]
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	4618      	mov	r0, r3
 8017732:	f7ff fe83 	bl	801743c <_ZN8touchgfx7MVPHeapD1Ev>
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	4618      	mov	r0, r3
 801773a:	3708      	adds	r7, #8
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}
 8017740:	0802ae20 	.word	0x0802ae20

08017744 <_ZN16FrontendHeapBaseD0Ev>:
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f7ff ffe7 	bl	8017720 <_ZN16FrontendHeapBaseD1Ev>
 8017752:	2114      	movs	r1, #20
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f010 fef7 	bl	8028548 <_ZdlPvj>
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	4618      	mov	r0, r3
 801775e:	3708      	adds	r7, #8
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}

08017764 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8017764:	b5b0      	push	{r4, r5, r7, lr}
 8017766:	b084      	sub	sp, #16
 8017768:	af02      	add	r7, sp, #8
 801776a:	6078      	str	r0, [r7, #4]
        app(model, *this)
 801776c:	6878      	ldr	r0, [r7, #4]
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f103 0414 	add.w	r4, r3, #20
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f642 0278 	movw	r2, #10360	; 0x2878
 8017780:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8017782:	6879      	ldr	r1, [r7, #4]
 8017784:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8017788:	440b      	add	r3, r1
        app(model, *this)
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	4613      	mov	r3, r2
 801778e:	462a      	mov	r2, r5
 8017790:	4621      	mov	r1, r4
 8017792:	f7ff ff75 	bl	8017680 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8017796:	4a1a      	ldr	r2, [pc, #104]	; (8017800 <_ZN12FrontendHeapC1Ev+0x9c>)
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	601a      	str	r2, [r3, #0]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	3314      	adds	r3, #20
 80177a0:	4618      	mov	r0, r3
 80177a2:	f000 f8df 	bl	8017964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	332c      	adds	r3, #44	; 0x2c
 80177aa:	4618      	mov	r0, r3
 80177ac:	f000 f90e 	bl	80179cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80177b0:	687a      	ldr	r2, [r7, #4]
 80177b2:	f642 0378 	movw	r3, #10360	; 0x2878
 80177b6:	4413      	add	r3, r2
 80177b8:	4618      	mov	r0, r3
 80177ba:	f000 f93d 	bl	8017a38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80177be:	687a      	ldr	r2, [r7, #4]
 80177c0:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80177c4:	4413      	add	r3, r2
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	f642 2124 	movw	r1, #10788	; 0x2a24
 80177cc:	4411      	add	r1, r2
 80177ce:	687a      	ldr	r2, [r7, #4]
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7fd fff7 	bl	80157c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80177d6:	687a      	ldr	r2, [r7, #4]
 80177d8:	f642 2324 	movw	r3, #10788	; 0x2a24
 80177dc:	4413      	add	r3, r2
 80177de:	4618      	mov	r0, r3
 80177e0:	f7fe fce4 	bl	80161ac <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	687a      	ldr	r2, [r7, #4]
 80177e8:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80177ec:	4413      	add	r3, r2
 80177ee:	4619      	mov	r1, r3
 80177f0:	f7ff ff38 	bl	8017664 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	4618      	mov	r0, r3
 80177f8:	3708      	adds	r7, #8
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bdb0      	pop	{r4, r5, r7, pc}
 80177fe:	bf00      	nop
 8017800:	0802ad70 	.word	0x0802ad70

08017804 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8017804:	b580      	push	{r7, lr}
 8017806:	b082      	sub	sp, #8
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
    {
 801780c:	4a05      	ldr	r2, [pc, #20]	; (8017824 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	601a      	str	r2, [r3, #0]
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	4618      	mov	r0, r3
 8017816:	f7ff fe31 	bl	801747c <_ZN8touchgfx3LCDD1Ev>
    }
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	4618      	mov	r0, r3
 801781e:	3708      	adds	r7, #8
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	0802db3c 	.word	0x0802db3c

08017828 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8017828:	b580      	push	{r7, lr}
 801782a:	b082      	sub	sp, #8
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
    }
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f7ff ffe7 	bl	8017804 <_ZN8touchgfx8LCD24bppD1Ev>
 8017836:	2158      	movs	r1, #88	; 0x58
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f010 fe85 	bl	8028548 <_ZdlPvj>
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	4618      	mov	r0, r3
 8017842:	3708      	adds	r7, #8
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8017848:	b580      	push	{r7, lr}
 801784a:	b086      	sub	sp, #24
 801784c:	af02      	add	r7, sp, #8
 801784e:	60f8      	str	r0, [r7, #12]
 8017850:	60b9      	str	r1, [r7, #8]
 8017852:	607a      	str	r2, [r7, #4]
 8017854:	603b      	str	r3, [r7, #0]
 8017856:	68f8      	ldr	r0, [r7, #12]
 8017858:	8bbb      	ldrh	r3, [r7, #28]
 801785a:	9301      	str	r3, [sp, #4]
 801785c:	8b3b      	ldrh	r3, [r7, #24]
 801785e:	9300      	str	r3, [sp, #0]
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	687a      	ldr	r2, [r7, #4]
 8017864:	68b9      	ldr	r1, [r7, #8]
 8017866:	f7ff fe5f 	bl	8017528 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801786a:	4a04      	ldr	r2, [pc, #16]	; (801787c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	601a      	str	r2, [r3, #0]
    }
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	4618      	mov	r0, r3
 8017874:	3710      	adds	r7, #16
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}
 801787a:	bf00      	nop
 801787c:	0802ae44 	.word	0x0802ae44

08017880 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8017880:	b580      	push	{r7, lr}
 8017882:	b086      	sub	sp, #24
 8017884:	af02      	add	r7, sp, #8
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	60b9      	str	r1, [r7, #8]
 801788a:	607a      	str	r2, [r7, #4]
 801788c:	603b      	str	r3, [r7, #0]
 801788e:	68f8      	ldr	r0, [r7, #12]
 8017890:	8bbb      	ldrh	r3, [r7, #28]
 8017892:	9301      	str	r3, [sp, #4]
 8017894:	8b3b      	ldrh	r3, [r7, #24]
 8017896:	9300      	str	r3, [sp, #0]
 8017898:	683b      	ldr	r3, [r7, #0]
 801789a:	687a      	ldr	r2, [r7, #4]
 801789c:	68b9      	ldr	r1, [r7, #8]
 801789e:	f7ff ffd3 	bl	8017848 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80178a2:	4a04      	ldr	r2, [pc, #16]	; (80178b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	601a      	str	r2, [r3, #0]
    }
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	4618      	mov	r0, r3
 80178ac:	3710      	adds	r7, #16
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	0802ac48 	.word	0x0802ac48

080178b8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80178b8:	b480      	push	{r7}
 80178ba:	b083      	sub	sp, #12
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
 80178c0:	4a04      	ldr	r2, [pc, #16]	; (80178d4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	601a      	str	r2, [r3, #0]
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	4618      	mov	r0, r3
 80178ca:	370c      	adds	r7, #12
 80178cc:	46bd      	mov	sp, r7
 80178ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d2:	4770      	bx	lr
 80178d4:	0802ac30 	.word	0x0802ac30

080178d8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	4618      	mov	r0, r3
 80178e4:	f7ff ffe8 	bl	80178b8 <_ZN8touchgfx15TouchControllerC1Ev>
 80178e8:	4a03      	ldr	r2, [pc, #12]	; (80178f8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	601a      	str	r2, [r3, #0]
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	4618      	mov	r0, r3
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	0802ac18 	.word	0x0802ac18

080178fc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80178fc:	b590      	push	{r4, r7, lr}
 80178fe:	b085      	sub	sp, #20
 8017900:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8017902:	f7fd fe3b 	bl	801557c <_ZN14BitmapDatabase11getInstanceEv>
 8017906:	4604      	mov	r4, r0
 8017908:	f7fd fe42 	bl	8015590 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801790c:	4603      	mov	r3, r0
 801790e:	4619      	mov	r1, r3
 8017910:	2300      	movs	r3, #0
 8017912:	9300      	str	r3, [sp, #0]
 8017914:	2300      	movs	r3, #0
 8017916:	2200      	movs	r2, #0
 8017918:	4620      	mov	r0, r4
 801791a:	f007 f8dd 	bl	801ead8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801791e:	4809      	ldr	r0, [pc, #36]	; (8017944 <touchgfx_init+0x48>)
 8017920:	f7ff fd5c 	bl	80173dc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8017924:	2000      	movs	r0, #0
 8017926:	f7fd fe57 	bl	80155d8 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801792a:	4807      	ldr	r0, [pc, #28]	; (8017948 <touchgfx_init+0x4c>)
 801792c:	f007 f822 	bl	801e974 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8017930:	f7ff fec8 	bl	80176c4 <_ZN12FrontendHeap11getInstanceEv>
 8017934:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8017936:	4805      	ldr	r0, [pc, #20]	; (801794c <touchgfx_init+0x50>)
 8017938:	f7fe ffc4 	bl	80168c4 <_ZN11TouchGFXHAL10initializeEv>
}
 801793c:	bf00      	nop
 801793e:	370c      	adds	r7, #12
 8017940:	46bd      	mov	sp, r7
 8017942:	bd90      	pop	{r4, r7, pc}
 8017944:	2000be5c 	.word	0x2000be5c
 8017948:	20000054 	.word	0x20000054
 801794c:	2000be60 	.word	0x2000be60

08017950 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8017950:	b580      	push	{r7, lr}
 8017952:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8017954:	4802      	ldr	r0, [pc, #8]	; (8017960 <touchgfx_taskEntry+0x10>)
 8017956:	f001 fca0 	bl	801929a <_ZN8touchgfx3HAL9taskEntryEv>
}
 801795a:	bf00      	nop
 801795c:	bd80      	pop	{r7, pc}
 801795e:	bf00      	nop
 8017960:	2000be60 	.word	0x2000be60

08017964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8017964:	b580      	push	{r7, lr}
 8017966:	b082      	sub	sp, #8
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	4618      	mov	r0, r3
 8017970:	f000 ff10 	bl	8018794 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017974:	4a03      	ldr	r2, [pc, #12]	; (8017984 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	601a      	str	r2, [r3, #0]
    {
    }
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	4618      	mov	r0, r3
 801797e:	3708      	adds	r7, #8
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	0802adec 	.word	0x0802adec

08017988 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8017988:	b580      	push	{r7, lr}
 801798a:	b082      	sub	sp, #8
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
    {
    }
 8017990:	4a05      	ldr	r2, [pc, #20]	; (80179a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	601a      	str	r2, [r3, #0]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	4618      	mov	r0, r3
 801799a:	f000 fef9 	bl	8018790 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	4618      	mov	r0, r3
 80179a2:	3708      	adds	r7, #8
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}
 80179a8:	0802adec 	.word	0x0802adec

080179ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b082      	sub	sp, #8
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
    }
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f7ff ffe7 	bl	8017988 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80179ba:	2118      	movs	r1, #24
 80179bc:	6878      	ldr	r0, [r7, #4]
 80179be:	f010 fdc3 	bl	8028548 <_ZdlPvj>
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	4618      	mov	r0, r3
 80179c6:	3708      	adds	r7, #8
 80179c8:	46bd      	mov	sp, r7
 80179ca:	bd80      	pop	{r7, pc}

080179cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b082      	sub	sp, #8
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	4618      	mov	r0, r3
 80179d8:	f000 fedc 	bl	8018794 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80179dc:	4a03      	ldr	r2, [pc, #12]	; (80179ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	601a      	str	r2, [r3, #0]
    }
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	4618      	mov	r0, r3
 80179e6:	3708      	adds	r7, #8
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	0802adb8 	.word	0x0802adb8

080179f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b082      	sub	sp, #8
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
    }
 80179f8:	4a05      	ldr	r2, [pc, #20]	; (8017a10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	601a      	str	r2, [r3, #0]
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	4618      	mov	r0, r3
 8017a02:	f000 fec5 	bl	8018790 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	4618      	mov	r0, r3
 8017a0a:	3708      	adds	r7, #8
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}
 8017a10:	0802adb8 	.word	0x0802adb8

08017a14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b082      	sub	sp, #8
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
    }
 8017a1c:	6878      	ldr	r0, [r7, #4]
 8017a1e:	f7ff ffe7 	bl	80179f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017a22:	f642 014c 	movw	r1, #10316	; 0x284c
 8017a26:	6878      	ldr	r0, [r7, #4]
 8017a28:	f010 fd8e 	bl	8028548 <_ZdlPvj>
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	4618      	mov	r0, r3
 8017a30:	3708      	adds	r7, #8
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}
	...

08017a38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b082      	sub	sp, #8
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	4618      	mov	r0, r3
 8017a44:	f000 fea6 	bl	8018794 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017a48:	4a03      	ldr	r2, [pc, #12]	; (8017a58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	601a      	str	r2, [r3, #0]
    }
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	4618      	mov	r0, r3
 8017a52:	3708      	adds	r7, #8
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}
 8017a58:	0802ad84 	.word	0x0802ad84

08017a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
    }
 8017a64:	4a05      	ldr	r2, [pc, #20]	; (8017a7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	601a      	str	r2, [r3, #0]
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f000 fe8f 	bl	8018790 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	4618      	mov	r0, r3
 8017a76:	3708      	adds	r7, #8
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	0802ad84 	.word	0x0802ad84

08017a80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b082      	sub	sp, #8
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
    }
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	f7ff ffe7 	bl	8017a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8017a8e:	215c      	movs	r1, #92	; 0x5c
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f010 fd59 	bl	8028548 <_ZdlPvj>
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3708      	adds	r7, #8
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}

08017aa0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	4a11      	ldr	r2, [pc, #68]	; (8017af0 <_ZN12FrontendHeapD1Ev+0x50>)
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	601a      	str	r2, [r3, #0]
 8017aae:	687a      	ldr	r2, [r7, #4]
 8017ab0:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8017ab4:	4413      	add	r3, r2
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f7fd fe4e 	bl	8015758 <_ZN19FrontendApplicationD1Ev>
 8017abc:	687a      	ldr	r2, [r7, #4]
 8017abe:	f642 0378 	movw	r3, #10360	; 0x2878
 8017ac2:	4413      	add	r3, r2
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7ff ffc9 	bl	8017a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	332c      	adds	r3, #44	; 0x2c
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7ff ff8e 	bl	80179f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	3314      	adds	r3, #20
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7ff ff55 	bl	8017988 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7ff fe1d 	bl	8017720 <_ZN16FrontendHeapBaseD1Ev>
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3708      	adds	r7, #8
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}
 8017af0:	0802ad70 	.word	0x0802ad70

08017af4 <_ZN12FrontendHeapD0Ev>:
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b082      	sub	sp, #8
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	f7ff ffcf 	bl	8017aa0 <_ZN12FrontendHeapD1Ev>
 8017b02:	f642 2128 	movw	r1, #10792	; 0x2a28
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f010 fd1e 	bl	8028548 <_ZdlPvj>
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	4618      	mov	r0, r3
 8017b10:	3708      	adds	r7, #8
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd80      	pop	{r7, pc}
	...

08017b18 <_Z41__static_initialization_and_destruction_0ii>:
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af02      	add	r7, sp, #8
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	6039      	str	r1, [r7, #0]
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d119      	bne.n	8017b5c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b2e:	4293      	cmp	r3, r2
 8017b30:	d114      	bne.n	8017b5c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8017b32:	4818      	ldr	r0, [pc, #96]	; (8017b94 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017b34:	f7ff fed0 	bl	80178d8 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8017b38:	4817      	ldr	r0, [pc, #92]	; (8017b98 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017b3a:	f7ff f94d 	bl	8016dd8 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8017b3e:	4817      	ldr	r0, [pc, #92]	; (8017b9c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017b40:	f009 f9f0 	bl	8020f24 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8017b44:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017b48:	9301      	str	r3, [sp, #4]
 8017b4a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8017b4e:	9300      	str	r3, [sp, #0]
 8017b50:	4b10      	ldr	r3, [pc, #64]	; (8017b94 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017b52:	4a12      	ldr	r2, [pc, #72]	; (8017b9c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017b54:	4910      	ldr	r1, [pc, #64]	; (8017b98 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017b56:	4812      	ldr	r0, [pc, #72]	; (8017ba0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017b58:	f7ff fe92 	bl	8017880 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d113      	bne.n	8017b8a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b68:	4293      	cmp	r3, r2
 8017b6a:	d10e      	bne.n	8017b8a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017b6c:	480c      	ldr	r0, [pc, #48]	; (8017ba0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017b6e:	f7fe ff0f 	bl	8016990 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8017b72:	480c      	ldr	r0, [pc, #48]	; (8017ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8017b74:	f7f8 fb62 	bl	801023c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8017b78:	4808      	ldr	r0, [pc, #32]	; (8017b9c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017b7a:	f7ff fe43 	bl	8017804 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8017b7e:	4806      	ldr	r0, [pc, #24]	; (8017b98 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017b80:	f7ff f954 	bl	8016e2c <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8017b84:	4803      	ldr	r0, [pc, #12]	; (8017b94 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017b86:	f7fe fc79 	bl	801647c <_ZN20STM32TouchControllerD1Ev>
}
 8017b8a:	bf00      	nop
 8017b8c:	3708      	adds	r7, #8
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	2000b1e0 	.word	0x2000b1e0
 8017b98:	2000b1e4 	.word	0x2000b1e4
 8017b9c:	2000be04 	.word	0x2000be04
 8017ba0:	2000be60 	.word	0x2000be60
 8017ba4:	20000054 	.word	0x20000054

08017ba8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8017ba8:	b480      	push	{r7}
 8017baa:	b083      	sub	sp, #12
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8017bb0:	2301      	movs	r3, #1
    }
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	370c      	adds	r7, #12
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbc:	4770      	bx	lr

08017bbe <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8017bbe:	b480      	push	{r7}
 8017bc0:	b083      	sub	sp, #12
 8017bc2:	af00      	add	r7, sp, #0
 8017bc4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8017bc6:	2354      	movs	r3, #84	; 0x54
    }
 8017bc8:	4618      	mov	r0, r3
 8017bca:	370c      	adds	r7, #12
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd2:	4770      	bx	lr

08017bd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8017bd4:	b480      	push	{r7}
 8017bd6:	b083      	sub	sp, #12
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
 8017bdc:	460b      	mov	r3, r1
 8017bde:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017be0:	887b      	ldrh	r3, [r7, #2]
 8017be2:	2254      	movs	r2, #84	; 0x54
 8017be4:	fb02 f303 	mul.w	r3, r2, r3
 8017be8:	3308      	adds	r3, #8
 8017bea:	687a      	ldr	r2, [r7, #4]
 8017bec:	4413      	add	r3, r2
    }
 8017bee:	4618      	mov	r0, r3
 8017bf0:	370c      	adds	r7, #12
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf8:	4770      	bx	lr

08017bfa <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8017bfa:	b480      	push	{r7}
 8017bfc:	b083      	sub	sp, #12
 8017bfe:	af00      	add	r7, sp, #0
 8017c00:	6078      	str	r0, [r7, #4]
 8017c02:	460b      	mov	r3, r1
 8017c04:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017c06:	887b      	ldrh	r3, [r7, #2]
 8017c08:	2254      	movs	r2, #84	; 0x54
 8017c0a:	fb02 f303 	mul.w	r3, r2, r3
 8017c0e:	3308      	adds	r3, #8
 8017c10:	687a      	ldr	r2, [r7, #4]
 8017c12:	4413      	add	r3, r2
    }
 8017c14:	4618      	mov	r0, r3
 8017c16:	370c      	adds	r7, #12
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1e:	4770      	bx	lr

08017c20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017c20:	b480      	push	{r7}
 8017c22:	b083      	sub	sp, #12
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017c28:	2301      	movs	r3, #1
    }
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	370c      	adds	r7, #12
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c34:	4770      	bx	lr

08017c36 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017c36:	b480      	push	{r7}
 8017c38:	b083      	sub	sp, #12
 8017c3a:	af00      	add	r7, sp, #0
 8017c3c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017c3e:	f642 0344 	movw	r3, #10308	; 0x2844
    }
 8017c42:	4618      	mov	r0, r3
 8017c44:	370c      	adds	r7, #12
 8017c46:	46bd      	mov	sp, r7
 8017c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4c:	4770      	bx	lr

08017c4e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017c4e:	b480      	push	{r7}
 8017c50:	b083      	sub	sp, #12
 8017c52:	af00      	add	r7, sp, #0
 8017c54:	6078      	str	r0, [r7, #4]
 8017c56:	460b      	mov	r3, r1
 8017c58:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017c5a:	887b      	ldrh	r3, [r7, #2]
 8017c5c:	f642 0244 	movw	r2, #10308	; 0x2844
 8017c60:	fb02 f303 	mul.w	r3, r2, r3
 8017c64:	3308      	adds	r3, #8
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	4413      	add	r3, r2
    }
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	370c      	adds	r7, #12
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c74:	4770      	bx	lr

08017c76 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017c76:	b480      	push	{r7}
 8017c78:	b083      	sub	sp, #12
 8017c7a:	af00      	add	r7, sp, #0
 8017c7c:	6078      	str	r0, [r7, #4]
 8017c7e:	460b      	mov	r3, r1
 8017c80:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017c82:	887b      	ldrh	r3, [r7, #2]
 8017c84:	f642 0244 	movw	r2, #10308	; 0x2844
 8017c88:	fb02 f303 	mul.w	r3, r2, r3
 8017c8c:	3308      	adds	r3, #8
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	4413      	add	r3, r2
    }
 8017c92:	4618      	mov	r0, r3
 8017c94:	370c      	adds	r7, #12
 8017c96:	46bd      	mov	sp, r7
 8017c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9c:	4770      	bx	lr

08017c9e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017c9e:	b480      	push	{r7}
 8017ca0:	b083      	sub	sp, #12
 8017ca2:	af00      	add	r7, sp, #0
 8017ca4:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017ca6:	2301      	movs	r3, #1
    }
 8017ca8:	4618      	mov	r0, r3
 8017caa:	370c      	adds	r7, #12
 8017cac:	46bd      	mov	sp, r7
 8017cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb2:	4770      	bx	lr

08017cb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017cb4:	b480      	push	{r7}
 8017cb6:	b083      	sub	sp, #12
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017cbc:	2310      	movs	r3, #16
    }
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	370c      	adds	r7, #12
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc8:	4770      	bx	lr

08017cca <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017cca:	b480      	push	{r7}
 8017ccc:	b083      	sub	sp, #12
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	6078      	str	r0, [r7, #4]
 8017cd2:	460b      	mov	r3, r1
 8017cd4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017cd6:	887b      	ldrh	r3, [r7, #2]
 8017cd8:	011b      	lsls	r3, r3, #4
 8017cda:	3308      	adds	r3, #8
 8017cdc:	687a      	ldr	r2, [r7, #4]
 8017cde:	4413      	add	r3, r2
    }
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	370c      	adds	r7, #12
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cea:	4770      	bx	lr

08017cec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017cec:	b480      	push	{r7}
 8017cee:	b083      	sub	sp, #12
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	460b      	mov	r3, r1
 8017cf6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017cf8:	887b      	ldrh	r3, [r7, #2]
 8017cfa:	011b      	lsls	r3, r3, #4
 8017cfc:	3308      	adds	r3, #8
 8017cfe:	687a      	ldr	r2, [r7, #4]
 8017d00:	4413      	add	r3, r2
    }
 8017d02:	4618      	mov	r0, r3
 8017d04:	370c      	adds	r7, #12
 8017d06:	46bd      	mov	sp, r7
 8017d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0c:	4770      	bx	lr

08017d0e <_GLOBAL__sub_I_touchgfx_init>:
 8017d0e:	b580      	push	{r7, lr}
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017d16:	2001      	movs	r0, #1
 8017d18:	f7ff fefe 	bl	8017b18 <_Z41__static_initialization_and_destruction_0ii>
 8017d1c:	bd80      	pop	{r7, pc}

08017d1e <_GLOBAL__sub_D_touchgfx_init>:
 8017d1e:	b580      	push	{r7, lr}
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017d26:	2000      	movs	r0, #0
 8017d28:	f7ff fef6 	bl	8017b18 <_Z41__static_initialization_and_destruction_0ii>
 8017d2c:	bd80      	pop	{r7, pc}

08017d2e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8017d2e:	b580      	push	{r7, lr}
 8017d30:	b082      	sub	sp, #8
 8017d32:	af00      	add	r7, sp, #0
 8017d34:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	3318      	adds	r3, #24
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	4798      	blx	r3
    }
 8017d42:	bf00      	nop
 8017d44:	3708      	adds	r7, #8
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}

08017d4a <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8017d4a:	b480      	push	{r7}
 8017d4c:	b083      	sub	sp, #12
 8017d4e:	af00      	add	r7, sp, #0
 8017d50:	6078      	str	r0, [r7, #4]
 8017d52:	460b      	mov	r3, r1
 8017d54:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	78fa      	ldrb	r2, [r7, #3]
 8017d5a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8017d5e:	bf00      	nop
 8017d60:	370c      	adds	r7, #12
 8017d62:	46bd      	mov	sp, r7
 8017d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d68:	4770      	bx	lr

08017d6a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8017d6a:	b480      	push	{r7}
 8017d6c:	b083      	sub	sp, #12
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017d78:	3301      	adds	r3, #1
 8017d7a:	b2da      	uxtb	r2, r3
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8017d82:	bf00      	nop
 8017d84:	370c      	adds	r7, #12
 8017d86:	46bd      	mov	sp, r7
 8017d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8c:	4770      	bx	lr
	...

08017d90 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b082      	sub	sp, #8
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
 8017d98:	460b      	mov	r3, r1
 8017d9a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8017d9c:	78fb      	ldrb	r3, [r7, #3]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d002      	beq.n	8017da8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8017da2:	78fb      	ldrb	r3, [r7, #3]
 8017da4:	2b02      	cmp	r3, #2
 8017da6:	d105      	bne.n	8017db4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	78fa      	ldrb	r2, [r7, #3]
 8017dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8017db0:	2301      	movs	r3, #1
 8017db2:	e027      	b.n	8017e04 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8017db4:	78fb      	ldrb	r3, [r7, #3]
 8017db6:	2b01      	cmp	r3, #1
 8017db8:	d123      	bne.n	8017e02 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d014      	beq.n	8017dec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	3380      	adds	r3, #128	; 0x80
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	4798      	blx	r3
 8017dce:	4603      	mov	r3, r0
 8017dd0:	461a      	mov	r2, r3
 8017dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	d008      	beq.n	8017dec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017dda:	4b0c      	ldr	r3, [pc, #48]	; (8017e0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	f083 0301 	eor.w	r3, r3, #1
 8017de2:	b2db      	uxtb	r3, r3
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d001      	beq.n	8017dec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017de8:	2301      	movs	r3, #1
 8017dea:	e000      	b.n	8017dee <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8017dec:	2300      	movs	r3, #0
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d005      	beq.n	8017dfe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	78fa      	ldrb	r2, [r7, #3]
 8017df6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	e002      	b.n	8017e04 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	e000      	b.n	8017e04 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8017e02:	2300      	movs	r3, #0
    }
 8017e04:	4618      	mov	r0, r3
 8017e06:	3708      	adds	r7, #8
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}
 8017e0c:	2000beec 	.word	0x2000beec

08017e10 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8017e10:	b480      	push	{r7}
 8017e12:	b083      	sub	sp, #12
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
 8017e18:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	683a      	ldr	r2, [r7, #0]
 8017e1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8017e20:	bf00      	nop
 8017e22:	370c      	adds	r7, #12
 8017e24:	46bd      	mov	sp, r7
 8017e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2a:	4770      	bx	lr

08017e2c <__NVIC_EnableIRQ>:
{
 8017e2c:	b480      	push	{r7}
 8017e2e:	b083      	sub	sp, #12
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	4603      	mov	r3, r0
 8017e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	db0b      	blt.n	8017e56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017e3e:	79fb      	ldrb	r3, [r7, #7]
 8017e40:	f003 021f 	and.w	r2, r3, #31
 8017e44:	4907      	ldr	r1, [pc, #28]	; (8017e64 <__NVIC_EnableIRQ+0x38>)
 8017e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e4a:	095b      	lsrs	r3, r3, #5
 8017e4c:	2001      	movs	r0, #1
 8017e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8017e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017e56:	bf00      	nop
 8017e58:	370c      	adds	r7, #12
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e60:	4770      	bx	lr
 8017e62:	bf00      	nop
 8017e64:	e000e100 	.word	0xe000e100

08017e68 <__NVIC_DisableIRQ>:
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	4603      	mov	r3, r0
 8017e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	db12      	blt.n	8017ea0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017e7a:	79fb      	ldrb	r3, [r7, #7]
 8017e7c:	f003 021f 	and.w	r2, r3, #31
 8017e80:	490a      	ldr	r1, [pc, #40]	; (8017eac <__NVIC_DisableIRQ+0x44>)
 8017e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e86:	095b      	lsrs	r3, r3, #5
 8017e88:	2001      	movs	r0, #1
 8017e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8017e8e:	3320      	adds	r3, #32
 8017e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017e94:	f3bf 8f4f 	dsb	sy
}
 8017e98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017e9a:	f3bf 8f6f 	isb	sy
}
 8017e9e:	bf00      	nop
}
 8017ea0:	bf00      	nop
 8017ea2:	370c      	adds	r7, #12
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eaa:	4770      	bx	lr
 8017eac:	e000e100 	.word	0xe000e100

08017eb0 <__NVIC_SetPriority>:
{
 8017eb0:	b480      	push	{r7}
 8017eb2:	b083      	sub	sp, #12
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	6039      	str	r1, [r7, #0]
 8017eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	db0a      	blt.n	8017eda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017ec4:	683b      	ldr	r3, [r7, #0]
 8017ec6:	b2da      	uxtb	r2, r3
 8017ec8:	490c      	ldr	r1, [pc, #48]	; (8017efc <__NVIC_SetPriority+0x4c>)
 8017eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ece:	0112      	lsls	r2, r2, #4
 8017ed0:	b2d2      	uxtb	r2, r2
 8017ed2:	440b      	add	r3, r1
 8017ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017ed8:	e00a      	b.n	8017ef0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	b2da      	uxtb	r2, r3
 8017ede:	4908      	ldr	r1, [pc, #32]	; (8017f00 <__NVIC_SetPriority+0x50>)
 8017ee0:	79fb      	ldrb	r3, [r7, #7]
 8017ee2:	f003 030f 	and.w	r3, r3, #15
 8017ee6:	3b04      	subs	r3, #4
 8017ee8:	0112      	lsls	r2, r2, #4
 8017eea:	b2d2      	uxtb	r2, r2
 8017eec:	440b      	add	r3, r1
 8017eee:	761a      	strb	r2, [r3, #24]
}
 8017ef0:	bf00      	nop
 8017ef2:	370c      	adds	r7, #12
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efa:	4770      	bx	lr
 8017efc:	e000e100 	.word	0xe000e100
 8017f00:	e000ed00 	.word	0xe000ed00

08017f04 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8017f04:	b5b0      	push	{r4, r5, r7, lr}
 8017f06:	b082      	sub	sp, #8
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	4618      	mov	r0, r3
 8017f10:	f001 fc88 	bl	8019824 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8017f14:	687d      	ldr	r5, [r7, #4]
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	334c      	adds	r3, #76	; 0x4c
 8017f1c:	681c      	ldr	r4, [r3, #0]
 8017f1e:	f004 fb13 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 8017f22:	4603      	mov	r3, r0
 8017f24:	4619      	mov	r1, r3
 8017f26:	4628      	mov	r0, r5
 8017f28:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	490d      	ldr	r1, [pc, #52]	; (8017f64 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f7ff ff6e 	bl	8017e10 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	2101      	movs	r1, #1
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7ff ff29 	bl	8017d90 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	3374      	adds	r3, #116	; 0x74
 8017f46:	681c      	ldr	r4, [r3, #0]
 8017f48:	2300      	movs	r3, #0
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8017f50:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2101      	movs	r1, #1
 8017f56:	4618      	mov	r0, r3
 8017f58:	f7ff fef7 	bl	8017d4a <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8017f5c:	bf00      	nop
 8017f5e:	3708      	adds	r7, #8
 8017f60:	46bd      	mov	sp, r7
 8017f62:	bdb0      	pop	{r4, r5, r7, pc}
 8017f64:	08016b29 	.word	0x08016b29

08017f68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b082      	sub	sp, #8
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017f70:	2109      	movs	r1, #9
 8017f72:	205a      	movs	r0, #90	; 0x5a
 8017f74:	f7ff ff9c 	bl	8017eb0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017f78:	2109      	movs	r1, #9
 8017f7a:	2058      	movs	r0, #88	; 0x58
 8017f7c:	f7ff ff98 	bl	8017eb0 <__NVIC_SetPriority>
}
 8017f80:	bf00      	nop
 8017f82:	3708      	adds	r7, #8
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}

08017f88 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b082      	sub	sp, #8
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017f90:	205a      	movs	r0, #90	; 0x5a
 8017f92:	f7ff ff4b 	bl	8017e2c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8017f96:	2058      	movs	r0, #88	; 0x58
 8017f98:	f7ff ff48 	bl	8017e2c <__NVIC_EnableIRQ>
}
 8017f9c:	bf00      	nop
 8017f9e:	3708      	adds	r7, #8
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b082      	sub	sp, #8
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017fac:	205a      	movs	r0, #90	; 0x5a
 8017fae:	f7ff ff5b 	bl	8017e68 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8017fb2:	2058      	movs	r0, #88	; 0x58
 8017fb4:	f7ff ff58 	bl	8017e68 <__NVIC_DisableIRQ>
}
 8017fb8:	bf00      	nop
 8017fba:	3708      	adds	r7, #8
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd80      	pop	{r7, pc}

08017fc0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017fc0:	b480      	push	{r7}
 8017fc2:	b083      	sub	sp, #12
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017fc8:	4b11      	ldr	r3, [pc, #68]	; (8018010 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017fca:	68db      	ldr	r3, [r3, #12]
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017fd2:	b29b      	uxth	r3, r3
 8017fd4:	3b01      	subs	r3, #1
 8017fd6:	b29a      	uxth	r2, r3
 8017fd8:	4b0e      	ldr	r3, [pc, #56]	; (8018014 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017fda:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8017fdc:	4b0c      	ldr	r3, [pc, #48]	; (8018010 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017fde:	691b      	ldr	r3, [r3, #16]
 8017fe0:	b29b      	uxth	r3, r3
 8017fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017fe6:	b29b      	uxth	r3, r3
 8017fe8:	3b01      	subs	r3, #1
 8017fea:	b29a      	uxth	r2, r3
 8017fec:	4b0a      	ldr	r3, [pc, #40]	; (8018018 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8017fee:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8017ff0:	4b08      	ldr	r3, [pc, #32]	; (8018014 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017ff2:	881a      	ldrh	r2, [r3, #0]
 8017ff4:	4b06      	ldr	r3, [pc, #24]	; (8018010 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017ff6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8017ff8:	4b05      	ldr	r3, [pc, #20]	; (8018010 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ffc:	4a04      	ldr	r2, [pc, #16]	; (8018010 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017ffe:	f043 0301 	orr.w	r3, r3, #1
 8018002:	6353      	str	r3, [r2, #52]	; 0x34
}
 8018004:	bf00      	nop
 8018006:	370c      	adds	r7, #12
 8018008:	46bd      	mov	sp, r7
 801800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801800e:	4770      	bx	lr
 8018010:	40016800 	.word	0x40016800
 8018014:	2000bed8 	.word	0x2000bed8
 8018018:	2000beda 	.word	0x2000beda

0801801c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8018024:	4b03      	ldr	r3, [pc, #12]	; (8018034 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8018026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8018028:	4618      	mov	r0, r3
 801802a:	370c      	adds	r7, #12
 801802c:	46bd      	mov	sp, r7
 801802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018032:	4770      	bx	lr
 8018034:	40016884 	.word	0x40016884

08018038 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8018038:	b480      	push	{r7}
 801803a:	b083      	sub	sp, #12
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
 8018040:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8018042:	4a06      	ldr	r2, [pc, #24]	; (801805c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8018044:	683b      	ldr	r3, [r7, #0]
 8018046:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8018048:	4b05      	ldr	r3, [pc, #20]	; (8018060 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801804a:	2201      	movs	r2, #1
 801804c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801804e:	bf00      	nop
 8018050:	370c      	adds	r7, #12
 8018052:	46bd      	mov	sp, r7
 8018054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018058:	4770      	bx	lr
 801805a:	bf00      	nop
 801805c:	40016884 	.word	0x40016884
 8018060:	40016800 	.word	0x40016800

08018064 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6839      	ldr	r1, [r7, #0]
 8018072:	4618      	mov	r0, r3
 8018074:	f001 f8e6 	bl	8019244 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8018078:	bf00      	nop
 801807a:	3708      	adds	r7, #8
 801807c:	46bd      	mov	sp, r7
 801807e:	bd80      	pop	{r7, pc}

08018080 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8018080:	b480      	push	{r7}
 8018082:	b085      	sub	sp, #20
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8018088:	4b0d      	ldr	r3, [pc, #52]	; (80180c0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801808a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801808c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801808e:	4b0c      	ldr	r3, [pc, #48]	; (80180c0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8018090:	68db      	ldr	r3, [r3, #12]
 8018092:	b29b      	uxth	r3, r3
 8018094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018098:	b29b      	uxth	r3, r3
 801809a:	3301      	adds	r3, #1
 801809c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801809e:	89fa      	ldrh	r2, [r7, #14]
 80180a0:	89bb      	ldrh	r3, [r7, #12]
 80180a2:	429a      	cmp	r2, r3
 80180a4:	d201      	bcs.n	80180aa <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80180a6:	2300      	movs	r3, #0
 80180a8:	e003      	b.n	80180b2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80180aa:	89fa      	ldrh	r2, [r7, #14]
 80180ac:	89bb      	ldrh	r3, [r7, #12]
 80180ae:	1ad3      	subs	r3, r2, r3
 80180b0:	b29b      	uxth	r3, r3
    }
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3714      	adds	r7, #20
 80180b6:	46bd      	mov	sp, r7
 80180b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180bc:	4770      	bx	lr
 80180be:	bf00      	nop
 80180c0:	40016800 	.word	0x40016800

080180c4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80180cc:	4b1a      	ldr	r3, [pc, #104]	; (8018138 <HAL_LTDC_LineEventCallback+0x74>)
 80180ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180d0:	4a1a      	ldr	r2, [pc, #104]	; (801813c <HAL_LTDC_LineEventCallback+0x78>)
 80180d2:	8812      	ldrh	r2, [r2, #0]
 80180d4:	4293      	cmp	r3, r2
 80180d6:	bf0c      	ite	eq
 80180d8:	2301      	moveq	r3, #1
 80180da:	2300      	movne	r3, #0
 80180dc:	b2db      	uxtb	r3, r3
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d017      	beq.n	8018112 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80180e2:	4b17      	ldr	r3, [pc, #92]	; (8018140 <HAL_LTDC_LineEventCallback+0x7c>)
 80180e4:	881b      	ldrh	r3, [r3, #0]
 80180e6:	4619      	mov	r1, r3
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f7ee fc03 	bl	80068f4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80180ee:	f7f8 fe33 	bl	8010d58 <_ZN8touchgfx3HAL11getInstanceEv>
 80180f2:	4603      	mov	r3, r0
 80180f4:	4618      	mov	r0, r3
 80180f6:	f7ff fe38 	bl	8017d6a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80180fa:	f7fe fcd7 	bl	8016aac <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80180fe:	f7f8 fe2b 	bl	8010d58 <_ZN8touchgfx3HAL11getInstanceEv>
 8018102:	4603      	mov	r3, r0
 8018104:	4618      	mov	r0, r3
 8018106:	f001 fe15 	bl	8019d34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801810a:	2000      	movs	r0, #0
 801810c:	f7fe f9d8 	bl	80164c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8018110:	e00e      	b.n	8018130 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8018112:	4b0a      	ldr	r3, [pc, #40]	; (801813c <HAL_LTDC_LineEventCallback+0x78>)
 8018114:	881b      	ldrh	r3, [r3, #0]
 8018116:	4619      	mov	r1, r3
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f7ee fbeb 	bl	80068f4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801811e:	2000      	movs	r0, #0
 8018120:	f7fe f9d9 	bl	80164d6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8018124:	f7f8 fe18 	bl	8010d58 <_ZN8touchgfx3HAL11getInstanceEv>
 8018128:	4603      	mov	r3, r0
 801812a:	4618      	mov	r0, r3
 801812c:	f7ff fdff 	bl	8017d2e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8018130:	bf00      	nop
 8018132:	3708      	adds	r7, #8
 8018134:	46bd      	mov	sp, r7
 8018136:	bd80      	pop	{r7, pc}
 8018138:	40016800 	.word	0x40016800
 801813c:	2000bed8 	.word	0x2000bed8
 8018140:	2000beda 	.word	0x2000beda

08018144 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8018144:	b580      	push	{r7, lr}
 8018146:	b082      	sub	sp, #8
 8018148:	af00      	add	r7, sp, #0
 801814a:	4603      	mov	r3, r0
 801814c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 801814e:	20c8      	movs	r0, #200	; 0xc8
 8018150:	f7f7 fd5a 	bl	800fc08 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8018154:	f000 fa7a 	bl	801864c <ft5336_I2C_InitializeIfRequired>
}
 8018158:	bf00      	nop
 801815a:	3708      	adds	r7, #8
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}

08018160 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8018160:	b480      	push	{r7}
 8018162:	b083      	sub	sp, #12
 8018164:	af00      	add	r7, sp, #0
 8018166:	4603      	mov	r3, r0
 8018168:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 801816a:	bf00      	nop
 801816c:	370c      	adds	r7, #12
 801816e:	46bd      	mov	sp, r7
 8018170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018174:	4770      	bx	lr

08018176 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8018176:	b580      	push	{r7, lr}
 8018178:	b084      	sub	sp, #16
 801817a:	af00      	add	r7, sp, #0
 801817c:	4603      	mov	r3, r0
 801817e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8018180:	2300      	movs	r3, #0
 8018182:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8018184:	2300      	movs	r3, #0
 8018186:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8018188:	2300      	movs	r3, #0
 801818a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801818c:	f000 fa5e 	bl	801864c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8018190:	2300      	movs	r3, #0
 8018192:	73fb      	strb	r3, [r7, #15]
 8018194:	e010      	b.n	80181b8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8018196:	88fb      	ldrh	r3, [r7, #6]
 8018198:	b2db      	uxtb	r3, r3
 801819a:	21a8      	movs	r1, #168	; 0xa8
 801819c:	4618      	mov	r0, r3
 801819e:	f7f7 fd15 	bl	800fbcc <TS_IO_Read>
 80181a2:	4603      	mov	r3, r0
 80181a4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80181a6:	7b7b      	ldrb	r3, [r7, #13]
 80181a8:	b2db      	uxtb	r3, r3
 80181aa:	2b51      	cmp	r3, #81	; 0x51
 80181ac:	d101      	bne.n	80181b2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80181ae:	2301      	movs	r3, #1
 80181b0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80181b2:	7bfb      	ldrb	r3, [r7, #15]
 80181b4:	3301      	adds	r3, #1
 80181b6:	73fb      	strb	r3, [r7, #15]
 80181b8:	7bfb      	ldrb	r3, [r7, #15]
 80181ba:	2b02      	cmp	r3, #2
 80181bc:	d802      	bhi.n	80181c4 <ft5336_ReadID+0x4e>
 80181be:	7bbb      	ldrb	r3, [r7, #14]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d0e8      	beq.n	8018196 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80181c4:	7b7b      	ldrb	r3, [r7, #13]
 80181c6:	b2db      	uxtb	r3, r3
 80181c8:	b29b      	uxth	r3, r3
}
 80181ca:	4618      	mov	r0, r3
 80181cc:	3710      	adds	r7, #16
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}

080181d2 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80181d2:	b580      	push	{r7, lr}
 80181d4:	b082      	sub	sp, #8
 80181d6:	af00      	add	r7, sp, #0
 80181d8:	4603      	mov	r3, r0
 80181da:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80181dc:	88fb      	ldrh	r3, [r7, #6]
 80181de:	4618      	mov	r0, r3
 80181e0:	f000 fa44 	bl	801866c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80181e4:	88fb      	ldrh	r3, [r7, #6]
 80181e6:	4618      	mov	r0, r3
 80181e8:	f000 f932 	bl	8018450 <ft5336_TS_DisableIT>
}
 80181ec:	bf00      	nop
 80181ee:	3708      	adds	r7, #8
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}

080181f4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b084      	sub	sp, #16
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	4603      	mov	r3, r0
 80181fc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80181fe:	2300      	movs	r3, #0
 8018200:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8018202:	88fb      	ldrh	r3, [r7, #6]
 8018204:	b2db      	uxtb	r3, r3
 8018206:	2102      	movs	r1, #2
 8018208:	4618      	mov	r0, r3
 801820a:	f7f7 fcdf 	bl	800fbcc <TS_IO_Read>
 801820e:	4603      	mov	r3, r0
 8018210:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8018212:	7bfb      	ldrb	r3, [r7, #15]
 8018214:	b2db      	uxtb	r3, r3
 8018216:	f003 030f 	and.w	r3, r3, #15
 801821a:	b2db      	uxtb	r3, r3
 801821c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 801821e:	7bfb      	ldrb	r3, [r7, #15]
 8018220:	b2db      	uxtb	r3, r3
 8018222:	2b05      	cmp	r3, #5
 8018224:	d901      	bls.n	801822a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8018226:	2300      	movs	r3, #0
 8018228:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 801822a:	7bfb      	ldrb	r3, [r7, #15]
 801822c:	b2da      	uxtb	r2, r3
 801822e:	4b05      	ldr	r3, [pc, #20]	; (8018244 <ft5336_TS_DetectTouch+0x50>)
 8018230:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8018232:	4b04      	ldr	r3, [pc, #16]	; (8018244 <ft5336_TS_DetectTouch+0x50>)
 8018234:	2200      	movs	r2, #0
 8018236:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8018238:	7bfb      	ldrb	r3, [r7, #15]
 801823a:	b2db      	uxtb	r3, r3
}
 801823c:	4618      	mov	r0, r3
 801823e:	3710      	adds	r7, #16
 8018240:	46bd      	mov	sp, r7
 8018242:	bd80      	pop	{r7, pc}
 8018244:	2000bedc 	.word	0x2000bedc

08018248 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b086      	sub	sp, #24
 801824c:	af00      	add	r7, sp, #0
 801824e:	4603      	mov	r3, r0
 8018250:	60b9      	str	r1, [r7, #8]
 8018252:	607a      	str	r2, [r7, #4]
 8018254:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8018256:	2300      	movs	r3, #0
 8018258:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 801825a:	2300      	movs	r3, #0
 801825c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 801825e:	2300      	movs	r3, #0
 8018260:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8018262:	2300      	movs	r3, #0
 8018264:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8018266:	2300      	movs	r3, #0
 8018268:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 801826a:	4b6d      	ldr	r3, [pc, #436]	; (8018420 <ft5336_TS_GetXY+0x1d8>)
 801826c:	789a      	ldrb	r2, [r3, #2]
 801826e:	4b6c      	ldr	r3, [pc, #432]	; (8018420 <ft5336_TS_GetXY+0x1d8>)
 8018270:	785b      	ldrb	r3, [r3, #1]
 8018272:	429a      	cmp	r2, r3
 8018274:	f080 80cf 	bcs.w	8018416 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8018278:	4b69      	ldr	r3, [pc, #420]	; (8018420 <ft5336_TS_GetXY+0x1d8>)
 801827a:	789b      	ldrb	r3, [r3, #2]
 801827c:	2b09      	cmp	r3, #9
 801827e:	d871      	bhi.n	8018364 <ft5336_TS_GetXY+0x11c>
 8018280:	a201      	add	r2, pc, #4	; (adr r2, 8018288 <ft5336_TS_GetXY+0x40>)
 8018282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018286:	bf00      	nop
 8018288:	080182b1 	.word	0x080182b1
 801828c:	080182c3 	.word	0x080182c3
 8018290:	080182d5 	.word	0x080182d5
 8018294:	080182e7 	.word	0x080182e7
 8018298:	080182f9 	.word	0x080182f9
 801829c:	0801830b 	.word	0x0801830b
 80182a0:	0801831d 	.word	0x0801831d
 80182a4:	0801832f 	.word	0x0801832f
 80182a8:	08018341 	.word	0x08018341
 80182ac:	08018353 	.word	0x08018353
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80182b0:	2304      	movs	r3, #4
 80182b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80182b4:	2303      	movs	r3, #3
 80182b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80182b8:	2306      	movs	r3, #6
 80182ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80182bc:	2305      	movs	r3, #5
 80182be:	753b      	strb	r3, [r7, #20]
      break;
 80182c0:	e051      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80182c2:	230a      	movs	r3, #10
 80182c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80182c6:	2309      	movs	r3, #9
 80182c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80182ca:	230c      	movs	r3, #12
 80182cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80182ce:	230b      	movs	r3, #11
 80182d0:	753b      	strb	r3, [r7, #20]
      break;
 80182d2:	e048      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80182d4:	2310      	movs	r3, #16
 80182d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80182d8:	230f      	movs	r3, #15
 80182da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80182dc:	2312      	movs	r3, #18
 80182de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80182e0:	2311      	movs	r3, #17
 80182e2:	753b      	strb	r3, [r7, #20]
      break;
 80182e4:	e03f      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80182e6:	2316      	movs	r3, #22
 80182e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80182ea:	2315      	movs	r3, #21
 80182ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80182ee:	2318      	movs	r3, #24
 80182f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80182f2:	2317      	movs	r3, #23
 80182f4:	753b      	strb	r3, [r7, #20]
      break;
 80182f6:	e036      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80182f8:	231c      	movs	r3, #28
 80182fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80182fc:	231b      	movs	r3, #27
 80182fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8018300:	231e      	movs	r3, #30
 8018302:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8018304:	231d      	movs	r3, #29
 8018306:	753b      	strb	r3, [r7, #20]
      break;
 8018308:	e02d      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 801830a:	2322      	movs	r3, #34	; 0x22
 801830c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 801830e:	2321      	movs	r3, #33	; 0x21
 8018310:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8018312:	2324      	movs	r3, #36	; 0x24
 8018314:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8018316:	2323      	movs	r3, #35	; 0x23
 8018318:	753b      	strb	r3, [r7, #20]
      break;
 801831a:	e024      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 801831c:	2328      	movs	r3, #40	; 0x28
 801831e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8018320:	2327      	movs	r3, #39	; 0x27
 8018322:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8018324:	232a      	movs	r3, #42	; 0x2a
 8018326:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8018328:	2329      	movs	r3, #41	; 0x29
 801832a:	753b      	strb	r3, [r7, #20]
      break;
 801832c:	e01b      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 801832e:	232e      	movs	r3, #46	; 0x2e
 8018330:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8018332:	232d      	movs	r3, #45	; 0x2d
 8018334:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8018336:	2330      	movs	r3, #48	; 0x30
 8018338:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 801833a:	232f      	movs	r3, #47	; 0x2f
 801833c:	753b      	strb	r3, [r7, #20]
      break;
 801833e:	e012      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8018340:	2334      	movs	r3, #52	; 0x34
 8018342:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8018344:	2333      	movs	r3, #51	; 0x33
 8018346:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8018348:	2336      	movs	r3, #54	; 0x36
 801834a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 801834c:	2335      	movs	r3, #53	; 0x35
 801834e:	753b      	strb	r3, [r7, #20]
      break;
 8018350:	e009      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8018352:	233a      	movs	r3, #58	; 0x3a
 8018354:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8018356:	2339      	movs	r3, #57	; 0x39
 8018358:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 801835a:	233c      	movs	r3, #60	; 0x3c
 801835c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 801835e:	233b      	movs	r3, #59	; 0x3b
 8018360:	753b      	strb	r3, [r7, #20]
      break;
 8018362:	e000      	b.n	8018366 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8018364:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8018366:	89fb      	ldrh	r3, [r7, #14]
 8018368:	b2db      	uxtb	r3, r3
 801836a:	7dfa      	ldrb	r2, [r7, #23]
 801836c:	4611      	mov	r1, r2
 801836e:	4618      	mov	r0, r3
 8018370:	f7f7 fc2c 	bl	800fbcc <TS_IO_Read>
 8018374:	4603      	mov	r3, r0
 8018376:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8018378:	7cfb      	ldrb	r3, [r7, #19]
 801837a:	b2db      	uxtb	r3, r3
 801837c:	b29a      	uxth	r2, r3
 801837e:	4b29      	ldr	r3, [pc, #164]	; (8018424 <ft5336_TS_GetXY+0x1dc>)
 8018380:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8018382:	89fb      	ldrh	r3, [r7, #14]
 8018384:	b2db      	uxtb	r3, r3
 8018386:	7dba      	ldrb	r2, [r7, #22]
 8018388:	4611      	mov	r1, r2
 801838a:	4618      	mov	r0, r3
 801838c:	f7f7 fc1e 	bl	800fbcc <TS_IO_Read>
 8018390:	4603      	mov	r3, r0
 8018392:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8018394:	7cfb      	ldrb	r3, [r7, #19]
 8018396:	b2db      	uxtb	r3, r3
 8018398:	021b      	lsls	r3, r3, #8
 801839a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801839e:	b21a      	sxth	r2, r3
 80183a0:	4b20      	ldr	r3, [pc, #128]	; (8018424 <ft5336_TS_GetXY+0x1dc>)
 80183a2:	881b      	ldrh	r3, [r3, #0]
 80183a4:	b21b      	sxth	r3, r3
 80183a6:	4313      	orrs	r3, r2
 80183a8:	b21b      	sxth	r3, r3
 80183aa:	b29a      	uxth	r2, r3
 80183ac:	4b1d      	ldr	r3, [pc, #116]	; (8018424 <ft5336_TS_GetXY+0x1dc>)
 80183ae:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80183b0:	4b1c      	ldr	r3, [pc, #112]	; (8018424 <ft5336_TS_GetXY+0x1dc>)
 80183b2:	881a      	ldrh	r2, [r3, #0]
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80183b8:	89fb      	ldrh	r3, [r7, #14]
 80183ba:	b2db      	uxtb	r3, r3
 80183bc:	7d7a      	ldrb	r2, [r7, #21]
 80183be:	4611      	mov	r1, r2
 80183c0:	4618      	mov	r0, r3
 80183c2:	f7f7 fc03 	bl	800fbcc <TS_IO_Read>
 80183c6:	4603      	mov	r3, r0
 80183c8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80183ca:	7cfb      	ldrb	r3, [r7, #19]
 80183cc:	b2db      	uxtb	r3, r3
 80183ce:	b29a      	uxth	r2, r3
 80183d0:	4b14      	ldr	r3, [pc, #80]	; (8018424 <ft5336_TS_GetXY+0x1dc>)
 80183d2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80183d4:	89fb      	ldrh	r3, [r7, #14]
 80183d6:	b2db      	uxtb	r3, r3
 80183d8:	7d3a      	ldrb	r2, [r7, #20]
 80183da:	4611      	mov	r1, r2
 80183dc:	4618      	mov	r0, r3
 80183de:	f7f7 fbf5 	bl	800fbcc <TS_IO_Read>
 80183e2:	4603      	mov	r3, r0
 80183e4:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80183e6:	7cfb      	ldrb	r3, [r7, #19]
 80183e8:	b2db      	uxtb	r3, r3
 80183ea:	021b      	lsls	r3, r3, #8
 80183ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80183f0:	b21a      	sxth	r2, r3
 80183f2:	4b0c      	ldr	r3, [pc, #48]	; (8018424 <ft5336_TS_GetXY+0x1dc>)
 80183f4:	881b      	ldrh	r3, [r3, #0]
 80183f6:	b21b      	sxth	r3, r3
 80183f8:	4313      	orrs	r3, r2
 80183fa:	b21b      	sxth	r3, r3
 80183fc:	b29a      	uxth	r2, r3
 80183fe:	4b09      	ldr	r3, [pc, #36]	; (8018424 <ft5336_TS_GetXY+0x1dc>)
 8018400:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8018402:	4b08      	ldr	r3, [pc, #32]	; (8018424 <ft5336_TS_GetXY+0x1dc>)
 8018404:	881a      	ldrh	r2, [r3, #0]
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 801840a:	4b05      	ldr	r3, [pc, #20]	; (8018420 <ft5336_TS_GetXY+0x1d8>)
 801840c:	789b      	ldrb	r3, [r3, #2]
 801840e:	3301      	adds	r3, #1
 8018410:	b2da      	uxtb	r2, r3
 8018412:	4b03      	ldr	r3, [pc, #12]	; (8018420 <ft5336_TS_GetXY+0x1d8>)
 8018414:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8018416:	bf00      	nop
 8018418:	3718      	adds	r7, #24
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	2000bedc 	.word	0x2000bedc
 8018424:	2000bee0 	.word	0x2000bee0

08018428 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b084      	sub	sp, #16
 801842c:	af00      	add	r7, sp, #0
 801842e:	4603      	mov	r3, r0
 8018430:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8018432:	2300      	movs	r3, #0
 8018434:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8018436:	2301      	movs	r3, #1
 8018438:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801843a:	88fb      	ldrh	r3, [r7, #6]
 801843c:	b2db      	uxtb	r3, r3
 801843e:	7bfa      	ldrb	r2, [r7, #15]
 8018440:	21a4      	movs	r1, #164	; 0xa4
 8018442:	4618      	mov	r0, r3
 8018444:	f7f7 fba8 	bl	800fb98 <TS_IO_Write>
}
 8018448:	bf00      	nop
 801844a:	3710      	adds	r7, #16
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}

08018450 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8018450:	b580      	push	{r7, lr}
 8018452:	b084      	sub	sp, #16
 8018454:	af00      	add	r7, sp, #0
 8018456:	4603      	mov	r3, r0
 8018458:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 801845a:	2300      	movs	r3, #0
 801845c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801845e:	2300      	movs	r3, #0
 8018460:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8018462:	88fb      	ldrh	r3, [r7, #6]
 8018464:	b2db      	uxtb	r3, r3
 8018466:	7bfa      	ldrb	r2, [r7, #15]
 8018468:	21a4      	movs	r1, #164	; 0xa4
 801846a:	4618      	mov	r0, r3
 801846c:	f7f7 fb94 	bl	800fb98 <TS_IO_Write>
}
 8018470:	bf00      	nop
 8018472:	3710      	adds	r7, #16
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}

08018478 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8018478:	b480      	push	{r7}
 801847a:	b083      	sub	sp, #12
 801847c:	af00      	add	r7, sp, #0
 801847e:	4603      	mov	r3, r0
 8018480:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8018482:	2300      	movs	r3, #0
}
 8018484:	4618      	mov	r0, r3
 8018486:	370c      	adds	r7, #12
 8018488:	46bd      	mov	sp, r7
 801848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848e:	4770      	bx	lr

08018490 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8018490:	b480      	push	{r7}
 8018492:	b083      	sub	sp, #12
 8018494:	af00      	add	r7, sp, #0
 8018496:	4603      	mov	r3, r0
 8018498:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 801849a:	bf00      	nop
 801849c:	370c      	adds	r7, #12
 801849e:	46bd      	mov	sp, r7
 80184a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a4:	4770      	bx	lr

080184a6 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80184a6:	b580      	push	{r7, lr}
 80184a8:	b084      	sub	sp, #16
 80184aa:	af00      	add	r7, sp, #0
 80184ac:	4603      	mov	r3, r0
 80184ae:	6039      	str	r1, [r7, #0]
 80184b0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80184b2:	2300      	movs	r3, #0
 80184b4:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80184b6:	88fb      	ldrh	r3, [r7, #6]
 80184b8:	b2db      	uxtb	r3, r3
 80184ba:	2101      	movs	r1, #1
 80184bc:	4618      	mov	r0, r3
 80184be:	f7f7 fb85 	bl	800fbcc <TS_IO_Read>
 80184c2:	4603      	mov	r3, r0
 80184c4:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80184c6:	7bfb      	ldrb	r3, [r7, #15]
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	461a      	mov	r2, r3
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	601a      	str	r2, [r3, #0]
}
 80184d0:	bf00      	nop
 80184d2:	3710      	adds	r7, #16
 80184d4:	46bd      	mov	sp, r7
 80184d6:	bd80      	pop	{r7, pc}

080184d8 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b086      	sub	sp, #24
 80184dc:	af00      	add	r7, sp, #0
 80184de:	60b9      	str	r1, [r7, #8]
 80184e0:	607a      	str	r2, [r7, #4]
 80184e2:	603b      	str	r3, [r7, #0]
 80184e4:	4603      	mov	r3, r0
 80184e6:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80184e8:	2300      	movs	r3, #0
 80184ea:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80184ec:	2300      	movs	r3, #0
 80184ee:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80184f0:	2300      	movs	r3, #0
 80184f2:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80184f4:	2300      	movs	r3, #0
 80184f6:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80184f8:	4b4d      	ldr	r3, [pc, #308]	; (8018630 <ft5336_TS_GetTouchInfo+0x158>)
 80184fa:	785b      	ldrb	r3, [r3, #1]
 80184fc:	461a      	mov	r2, r3
 80184fe:	68bb      	ldr	r3, [r7, #8]
 8018500:	4293      	cmp	r3, r2
 8018502:	f080 8090 	bcs.w	8018626 <ft5336_TS_GetTouchInfo+0x14e>
 8018506:	68bb      	ldr	r3, [r7, #8]
 8018508:	2b09      	cmp	r3, #9
 801850a:	d85d      	bhi.n	80185c8 <ft5336_TS_GetTouchInfo+0xf0>
 801850c:	a201      	add	r2, pc, #4	; (adr r2, 8018514 <ft5336_TS_GetTouchInfo+0x3c>)
 801850e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018512:	bf00      	nop
 8018514:	0801853d 	.word	0x0801853d
 8018518:	0801854b 	.word	0x0801854b
 801851c:	08018559 	.word	0x08018559
 8018520:	08018567 	.word	0x08018567
 8018524:	08018575 	.word	0x08018575
 8018528:	08018583 	.word	0x08018583
 801852c:	08018591 	.word	0x08018591
 8018530:	0801859f 	.word	0x0801859f
 8018534:	080185ad 	.word	0x080185ad
 8018538:	080185bb 	.word	0x080185bb
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 801853c:	2303      	movs	r3, #3
 801853e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8018540:	2307      	movs	r3, #7
 8018542:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8018544:	2308      	movs	r3, #8
 8018546:	757b      	strb	r3, [r7, #21]
      break;
 8018548:	e03f      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 801854a:	2309      	movs	r3, #9
 801854c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 801854e:	230d      	movs	r3, #13
 8018550:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8018552:	230e      	movs	r3, #14
 8018554:	757b      	strb	r3, [r7, #21]
      break;
 8018556:	e038      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8018558:	230f      	movs	r3, #15
 801855a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 801855c:	2313      	movs	r3, #19
 801855e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8018560:	2314      	movs	r3, #20
 8018562:	757b      	strb	r3, [r7, #21]
      break;
 8018564:	e031      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8018566:	2315      	movs	r3, #21
 8018568:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 801856a:	2319      	movs	r3, #25
 801856c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 801856e:	231a      	movs	r3, #26
 8018570:	757b      	strb	r3, [r7, #21]
      break;
 8018572:	e02a      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8018574:	231b      	movs	r3, #27
 8018576:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8018578:	231f      	movs	r3, #31
 801857a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 801857c:	2320      	movs	r3, #32
 801857e:	757b      	strb	r3, [r7, #21]
      break;
 8018580:	e023      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8018582:	2321      	movs	r3, #33	; 0x21
 8018584:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8018586:	2325      	movs	r3, #37	; 0x25
 8018588:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 801858a:	2326      	movs	r3, #38	; 0x26
 801858c:	757b      	strb	r3, [r7, #21]
      break;
 801858e:	e01c      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8018590:	2327      	movs	r3, #39	; 0x27
 8018592:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8018594:	232b      	movs	r3, #43	; 0x2b
 8018596:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8018598:	232c      	movs	r3, #44	; 0x2c
 801859a:	757b      	strb	r3, [r7, #21]
      break;
 801859c:	e015      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 801859e:	232d      	movs	r3, #45	; 0x2d
 80185a0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80185a2:	2331      	movs	r3, #49	; 0x31
 80185a4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80185a6:	2332      	movs	r3, #50	; 0x32
 80185a8:	757b      	strb	r3, [r7, #21]
      break;
 80185aa:	e00e      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80185ac:	2333      	movs	r3, #51	; 0x33
 80185ae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80185b0:	2337      	movs	r3, #55	; 0x37
 80185b2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80185b4:	2338      	movs	r3, #56	; 0x38
 80185b6:	757b      	strb	r3, [r7, #21]
      break;
 80185b8:	e007      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80185ba:	2339      	movs	r3, #57	; 0x39
 80185bc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80185be:	233d      	movs	r3, #61	; 0x3d
 80185c0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80185c2:	233e      	movs	r3, #62	; 0x3e
 80185c4:	757b      	strb	r3, [r7, #21]
      break;
 80185c6:	e000      	b.n	80185ca <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80185c8:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80185ca:	89fb      	ldrh	r3, [r7, #14]
 80185cc:	b2db      	uxtb	r3, r3
 80185ce:	7dfa      	ldrb	r2, [r7, #23]
 80185d0:	4611      	mov	r1, r2
 80185d2:	4618      	mov	r0, r3
 80185d4:	f7f7 fafa 	bl	800fbcc <TS_IO_Read>
 80185d8:	4603      	mov	r3, r0
 80185da:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80185dc:	7d3b      	ldrb	r3, [r7, #20]
 80185de:	b2db      	uxtb	r3, r3
 80185e0:	119b      	asrs	r3, r3, #6
 80185e2:	f003 0203 	and.w	r2, r3, #3
 80185e6:	6a3b      	ldr	r3, [r7, #32]
 80185e8:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80185ea:	89fb      	ldrh	r3, [r7, #14]
 80185ec:	b2db      	uxtb	r3, r3
 80185ee:	7dba      	ldrb	r2, [r7, #22]
 80185f0:	4611      	mov	r1, r2
 80185f2:	4618      	mov	r0, r3
 80185f4:	f7f7 faea 	bl	800fbcc <TS_IO_Read>
 80185f8:	4603      	mov	r3, r0
 80185fa:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80185fc:	7d3b      	ldrb	r3, [r7, #20]
 80185fe:	b2db      	uxtb	r3, r3
 8018600:	461a      	mov	r2, r3
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8018606:	89fb      	ldrh	r3, [r7, #14]
 8018608:	b2db      	uxtb	r3, r3
 801860a:	7d7a      	ldrb	r2, [r7, #21]
 801860c:	4611      	mov	r1, r2
 801860e:	4618      	mov	r0, r3
 8018610:	f7f7 fadc 	bl	800fbcc <TS_IO_Read>
 8018614:	4603      	mov	r3, r0
 8018616:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8018618:	7d3b      	ldrb	r3, [r7, #20]
 801861a:	b2db      	uxtb	r3, r3
 801861c:	111b      	asrs	r3, r3, #4
 801861e:	f003 0204 	and.w	r2, r3, #4
 8018622:	683b      	ldr	r3, [r7, #0]
 8018624:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8018626:	bf00      	nop
 8018628:	3718      	adds	r7, #24
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
 801862e:	bf00      	nop
 8018630:	2000bedc 	.word	0x2000bedc

08018634 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8018634:	b480      	push	{r7}
 8018636:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8018638:	4b03      	ldr	r3, [pc, #12]	; (8018648 <ft5336_Get_I2C_InitializedStatus+0x14>)
 801863a:	781b      	ldrb	r3, [r3, #0]
}
 801863c:	4618      	mov	r0, r3
 801863e:	46bd      	mov	sp, r7
 8018640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018644:	4770      	bx	lr
 8018646:	bf00      	nop
 8018648:	2000bedc 	.word	0x2000bedc

0801864c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8018650:	f7ff fff0 	bl	8018634 <ft5336_Get_I2C_InitializedStatus>
 8018654:	4603      	mov	r3, r0
 8018656:	2b00      	cmp	r3, #0
 8018658:	d104      	bne.n	8018664 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 801865a:	f7f7 fa93 	bl	800fb84 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 801865e:	4b02      	ldr	r3, [pc, #8]	; (8018668 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8018660:	2201      	movs	r2, #1
 8018662:	701a      	strb	r2, [r3, #0]
  }
}
 8018664:	bf00      	nop
 8018666:	bd80      	pop	{r7, pc}
 8018668:	2000bedc 	.word	0x2000bedc

0801866c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 801866c:	b480      	push	{r7}
 801866e:	b085      	sub	sp, #20
 8018670:	af00      	add	r7, sp, #0
 8018672:	4603      	mov	r3, r0
 8018674:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8018676:	2300      	movs	r3, #0
 8018678:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 801867a:	68fb      	ldr	r3, [r7, #12]
}
 801867c:	4618      	mov	r0, r3
 801867e:	3714      	adds	r7, #20
 8018680:	46bd      	mov	sp, r7
 8018682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018686:	4770      	bx	lr

08018688 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8018688:	8880      	ldrh	r0, [r0, #4]
 801868a:	4770      	bx	lr

0801868c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801868c:	2300      	movs	r3, #0
 801868e:	8083      	strh	r3, [r0, #4]
 8018690:	4770      	bx	lr
	...

08018694 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018696:	6803      	ldr	r3, [r0, #0]
 8018698:	460e      	mov	r6, r1
 801869a:	2100      	movs	r1, #0
 801869c:	4605      	mov	r5, r0
 801869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186a0:	4798      	blx	r3
 80186a2:	4604      	mov	r4, r0
 80186a4:	682b      	ldr	r3, [r5, #0]
 80186a6:	4628      	mov	r0, r5
 80186a8:	1b34      	subs	r4, r6, r4
 80186aa:	6a1b      	ldr	r3, [r3, #32]
 80186ac:	b2a4      	uxth	r4, r4
 80186ae:	4798      	blx	r3
 80186b0:	88ab      	ldrh	r3, [r5, #4]
 80186b2:	fbb4 f4f0 	udiv	r4, r4, r0
 80186b6:	42a3      	cmp	r3, r4
 80186b8:	d805      	bhi.n	80186c6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80186ba:	4b0e      	ldr	r3, [pc, #56]	; (80186f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80186bc:	211e      	movs	r1, #30
 80186be:	4a0e      	ldr	r2, [pc, #56]	; (80186f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80186c0:	480e      	ldr	r0, [pc, #56]	; (80186fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80186c2:	f00f ff6f 	bl	80285a4 <__assert_func>
 80186c6:	682b      	ldr	r3, [r5, #0]
 80186c8:	2100      	movs	r1, #0
 80186ca:	4628      	mov	r0, r5
 80186cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ce:	4798      	blx	r3
 80186d0:	682b      	ldr	r3, [r5, #0]
 80186d2:	4607      	mov	r7, r0
 80186d4:	4628      	mov	r0, r5
 80186d6:	6a1b      	ldr	r3, [r3, #32]
 80186d8:	4798      	blx	r3
 80186da:	1bf3      	subs	r3, r6, r7
 80186dc:	b29b      	uxth	r3, r3
 80186de:	fbb3 f2f0 	udiv	r2, r3, r0
 80186e2:	fb02 3010 	mls	r0, r2, r0, r3
 80186e6:	b118      	cbz	r0, 80186f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80186e8:	4b05      	ldr	r3, [pc, #20]	; (8018700 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80186ea:	211f      	movs	r1, #31
 80186ec:	4a02      	ldr	r2, [pc, #8]	; (80186f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80186ee:	e7e7      	b.n	80186c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80186f0:	4620      	mov	r0, r4
 80186f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186f4:	0802aef0 	.word	0x0802aef0
 80186f8:	0802b05e 	.word	0x0802b05e
 80186fc:	0802af05 	.word	0x0802af05
 8018700:	0802af33 	.word	0x0802af33

08018704 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018704:	b538      	push	{r3, r4, r5, lr}
 8018706:	6803      	ldr	r3, [r0, #0]
 8018708:	460d      	mov	r5, r1
 801870a:	4604      	mov	r4, r0
 801870c:	6a1b      	ldr	r3, [r3, #32]
 801870e:	4798      	blx	r3
 8018710:	4285      	cmp	r5, r0
 8018712:	d905      	bls.n	8018720 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8018714:	4b0c      	ldr	r3, [pc, #48]	; (8018748 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8018716:	212f      	movs	r1, #47	; 0x2f
 8018718:	4a0c      	ldr	r2, [pc, #48]	; (801874c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801871a:	480d      	ldr	r0, [pc, #52]	; (8018750 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801871c:	f00f ff42 	bl	80285a4 <__assert_func>
 8018720:	6823      	ldr	r3, [r4, #0]
 8018722:	4620      	mov	r0, r4
 8018724:	88a5      	ldrh	r5, [r4, #4]
 8018726:	69db      	ldr	r3, [r3, #28]
 8018728:	4798      	blx	r3
 801872a:	4285      	cmp	r5, r0
 801872c:	d303      	bcc.n	8018736 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801872e:	4b09      	ldr	r3, [pc, #36]	; (8018754 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8018730:	2130      	movs	r1, #48	; 0x30
 8018732:	4a06      	ldr	r2, [pc, #24]	; (801874c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018734:	e7f1      	b.n	801871a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8018736:	6823      	ldr	r3, [r4, #0]
 8018738:	4620      	mov	r0, r4
 801873a:	88a1      	ldrh	r1, [r4, #4]
 801873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801873e:	4798      	blx	r3
 8018740:	88a3      	ldrh	r3, [r4, #4]
 8018742:	3301      	adds	r3, #1
 8018744:	80a3      	strh	r3, [r4, #4]
 8018746:	bd38      	pop	{r3, r4, r5, pc}
 8018748:	0802afad 	.word	0x0802afad
 801874c:	0802b0a1 	.word	0x0802b0a1
 8018750:	0802af05 	.word	0x0802af05
 8018754:	0802afc4 	.word	0x0802afc4

08018758 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8018758:	b570      	push	{r4, r5, r6, lr}
 801875a:	6803      	ldr	r3, [r0, #0]
 801875c:	4616      	mov	r6, r2
 801875e:	4604      	mov	r4, r0
 8018760:	460d      	mov	r5, r1
 8018762:	6a1b      	ldr	r3, [r3, #32]
 8018764:	4798      	blx	r3
 8018766:	4286      	cmp	r6, r0
 8018768:	d905      	bls.n	8018776 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801876a:	4b06      	ldr	r3, [pc, #24]	; (8018784 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801876c:	2139      	movs	r1, #57	; 0x39
 801876e:	4a06      	ldr	r2, [pc, #24]	; (8018788 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8018770:	4806      	ldr	r0, [pc, #24]	; (801878c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8018772:	f00f ff17 	bl	80285a4 <__assert_func>
 8018776:	6823      	ldr	r3, [r4, #0]
 8018778:	4629      	mov	r1, r5
 801877a:	4620      	mov	r0, r4
 801877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801877e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018782:	4718      	bx	r3
 8018784:	0802afad 	.word	0x0802afad
 8018788:	0802b014 	.word	0x0802b014
 801878c:	0802af05 	.word	0x0802af05

08018790 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8018790:	4770      	bx	lr
	...

08018794 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018794:	4a02      	ldr	r2, [pc, #8]	; (80187a0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8018796:	6002      	str	r2, [r0, #0]
 8018798:	2200      	movs	r2, #0
 801879a:	8082      	strh	r2, [r0, #4]
 801879c:	4770      	bx	lr
 801879e:	bf00      	nop
 80187a0:	0802afe8 	.word	0x0802afe8

080187a4 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80187a4:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 80187a8:	4770      	bx	lr

080187aa <_ZNK8touchgfx11BoxProgress8getColorEv>:
 80187aa:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80187ae:	4770      	bx	lr

080187b0 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 80187b0:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 80187b4:	4770      	bx	lr

080187b6 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 80187b6:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 80187ba:	4770      	bx	lr

080187bc <_ZN8touchgfx11BoxProgressD1Ev>:
 80187bc:	4b03      	ldr	r3, [pc, #12]	; (80187cc <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 80187be:	b510      	push	{r4, lr}
 80187c0:	4604      	mov	r4, r0
 80187c2:	6003      	str	r3, [r0, #0]
 80187c4:	f000 f8b6 	bl	8018934 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80187c8:	4620      	mov	r0, r4
 80187ca:	bd10      	pop	{r4, pc}
 80187cc:	0802b0e8 	.word	0x0802b0e8

080187d0 <_ZN8touchgfx11BoxProgressD0Ev>:
 80187d0:	b510      	push	{r4, lr}
 80187d2:	4604      	mov	r4, r0
 80187d4:	f7ff fff2 	bl	80187bc <_ZN8touchgfx11BoxProgressD1Ev>
 80187d8:	21c0      	movs	r1, #192	; 0xc0
 80187da:	4620      	mov	r0, r4
 80187dc:	f00f feb4 	bl	8028548 <_ZdlPvj>
 80187e0:	4620      	mov	r0, r4
 80187e2:	bd10      	pop	{r4, pc}

080187e4 <_ZN8touchgfx11BoxProgressC1Ev>:
 80187e4:	b510      	push	{r4, lr}
 80187e6:	4604      	mov	r4, r0
 80187e8:	f000 f8b8 	bl	801895c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80187ec:	2201      	movs	r2, #1
 80187ee:	4b16      	ldr	r3, [pc, #88]	; (8018848 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 80187f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80187f4:	f104 0190 	add.w	r1, r4, #144	; 0x90
 80187f8:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 80187fc:	4a13      	ldr	r2, [pc, #76]	; (801884c <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 80187fe:	6023      	str	r3, [r4, #0]
 8018800:	2300      	movs	r3, #0
 8018802:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8018806:	22ff      	movs	r2, #255	; 0xff
 8018808:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 801880c:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8018810:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8018814:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8018818:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 801881c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8018820:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8018824:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8018828:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 801882c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8018830:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8018834:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8018838:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 801883c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8018840:	f000 fbb8 	bl	8018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018844:	4620      	mov	r0, r4
 8018846:	bd10      	pop	{r4, pc}
 8018848:	0802b0e8 	.word	0x0802b0e8
 801884c:	0802c410 	.word	0x0802c410

08018850 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8018850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018854:	4617      	mov	r7, r2
 8018856:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801885a:	2200      	movs	r2, #0
 801885c:	4604      	mov	r4, r0
 801885e:	460e      	mov	r6, r1
 8018860:	4698      	mov	r8, r3
 8018862:	4611      	mov	r1, r2
 8018864:	9500      	str	r5, [sp, #0]
 8018866:	3090      	adds	r0, #144	; 0x90
 8018868:	f7f8 fa2e 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801886c:	4643      	mov	r3, r8
 801886e:	463a      	mov	r2, r7
 8018870:	4631      	mov	r1, r6
 8018872:	4620      	mov	r0, r4
 8018874:	9508      	str	r5, [sp, #32]
 8018876:	b002      	add	sp, #8
 8018878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801887c:	f000 b9fa 	b.w	8018c74 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08018880 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8018880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018882:	4604      	mov	r4, r0
 8018884:	f000 fa40 	bl	8018d08 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8018888:	f104 0590 	add.w	r5, r4, #144	; 0x90
 801888c:	4628      	mov	r0, r5
 801888e:	f004 fa89 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018892:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018896:	2b03      	cmp	r3, #3
 8018898:	d814      	bhi.n	80188c4 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801889a:	e8df f003 	tbb	[pc, r3]
 801889e:	0202      	.short	0x0202
 80188a0:	1010      	.short	0x1010
 80188a2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80188a6:	4620      	mov	r0, r4
 80188a8:	f000 fa88 	bl	8018dbc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80188ac:	b200      	sxth	r0, r0
 80188ae:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80188b2:	2b03      	cmp	r3, #3
 80188b4:	d81a      	bhi.n	80188ec <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 80188b6:	e8df f003 	tbb	[pc, r3]
 80188ba:	0e07      	.short	0x0e07
 80188bc:	231f      	.short	0x231f
 80188be:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80188c2:	e7f0      	b.n	80188a6 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 80188c4:	2000      	movs	r0, #0
 80188c6:	e7f2      	b.n	80188ae <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 80188c8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80188cc:	9300      	str	r3, [sp, #0]
 80188ce:	4603      	mov	r3, r0
 80188d0:	2200      	movs	r2, #0
 80188d2:	2100      	movs	r1, #0
 80188d4:	e007      	b.n	80188e6 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 80188d6:	8921      	ldrh	r1, [r4, #8]
 80188d8:	2200      	movs	r2, #0
 80188da:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80188de:	1a09      	subs	r1, r1, r0
 80188e0:	9300      	str	r3, [sp, #0]
 80188e2:	4603      	mov	r3, r0
 80188e4:	b209      	sxth	r1, r1
 80188e6:	4628      	mov	r0, r5
 80188e8:	f7f8 f9ee 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80188ec:	4628      	mov	r0, r5
 80188ee:	b003      	add	sp, #12
 80188f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188f4:	f004 ba56 	b.w	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
 80188f8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80188fc:	9000      	str	r0, [sp, #0]
 80188fe:	e7e7      	b.n	80188d0 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8018900:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018904:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018908:	1a12      	subs	r2, r2, r0
 801890a:	9000      	str	r0, [sp, #0]
 801890c:	b212      	sxth	r2, r2
 801890e:	e7e0      	b.n	80188d2 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08018910 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8018910:	b570      	push	{r4, r5, r6, lr}
 8018912:	6803      	ldr	r3, [r0, #0]
 8018914:	4604      	mov	r4, r0
 8018916:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801891a:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801891e:	4798      	blx	r3
 8018920:	4601      	mov	r1, r0
 8018922:	462b      	mov	r3, r5
 8018924:	4620      	mov	r0, r4
 8018926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801892a:	4718      	bx	r3

0801892c <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 801892c:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8018930:	4770      	bx	lr
	...

08018934 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8018934:	4b03      	ldr	r3, [pc, #12]	; (8018944 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8018936:	b510      	push	{r4, lr}
 8018938:	4604      	mov	r4, r0
 801893a:	6003      	str	r3, [r0, #0]
 801893c:	f000 f999 	bl	8018c72 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8018940:	4620      	mov	r0, r4
 8018942:	bd10      	pop	{r4, pc}
 8018944:	0802b1c0 	.word	0x0802b1c0

08018948 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8018948:	b510      	push	{r4, lr}
 801894a:	4604      	mov	r4, r0
 801894c:	f7ff fff2 	bl	8018934 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8018950:	2190      	movs	r1, #144	; 0x90
 8018952:	4620      	mov	r0, r4
 8018954:	f00f fdf8 	bl	8028548 <_ZdlPvj>
 8018958:	4620      	mov	r0, r4
 801895a:	bd10      	pop	{r4, pc}

0801895c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 801895c:	b510      	push	{r4, lr}
 801895e:	4604      	mov	r4, r0
 8018960:	f000 fa4c 	bl	8018dfc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8018964:	4b03      	ldr	r3, [pc, #12]	; (8018974 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8018966:	2100      	movs	r1, #0
 8018968:	4620      	mov	r0, r4
 801896a:	6023      	str	r3, [r4, #0]
 801896c:	f7ff ffd0 	bl	8018910 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8018970:	4620      	mov	r0, r4
 8018972:	bd10      	pop	{r4, pc}
 8018974:	0802b1c0 	.word	0x0802b1c0

08018978 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8018978:	b570      	push	{r4, r5, r6, lr}
 801897a:	6803      	ldr	r3, [r0, #0]
 801897c:	4604      	mov	r4, r0
 801897e:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8018982:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8018986:	4798      	blx	r3
 8018988:	4601      	mov	r1, r0
 801898a:	462b      	mov	r3, r5
 801898c:	4620      	mov	r0, r4
 801898e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018992:	4718      	bx	r3

08018994 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8018994:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8018998:	4770      	bx	lr

0801899a <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 801899a:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 801899e:	4770      	bx	lr

080189a0 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 80189a0:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 80189a4:	4770      	bx	lr

080189a6 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 80189a6:	b507      	push	{r0, r1, r2, lr}
 80189a8:	ab02      	add	r3, sp, #8
 80189aa:	30bc      	adds	r0, #188	; 0xbc
 80189ac:	f823 1d04 	strh.w	r1, [r3, #-4]!
 80189b0:	4619      	mov	r1, r3
 80189b2:	f002 fa4b 	bl	801ae4c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 80189b6:	b003      	add	sp, #12
 80189b8:	f85d fb04 	ldr.w	pc, [sp], #4

080189bc <_ZN8touchgfx13ImageProgressD1Ev>:
 80189bc:	4b03      	ldr	r3, [pc, #12]	; (80189cc <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 80189be:	b510      	push	{r4, lr}
 80189c0:	4604      	mov	r4, r0
 80189c2:	6003      	str	r3, [r0, #0]
 80189c4:	f7ff ffb6 	bl	8018934 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80189c8:	4620      	mov	r0, r4
 80189ca:	bd10      	pop	{r4, pc}
 80189cc:	0802b2ec 	.word	0x0802b2ec

080189d0 <_ZN8touchgfx13ImageProgressD0Ev>:
 80189d0:	b510      	push	{r4, lr}
 80189d2:	4604      	mov	r4, r0
 80189d4:	f7ff fff2 	bl	80189bc <_ZN8touchgfx13ImageProgressD1Ev>
 80189d8:	21f0      	movs	r1, #240	; 0xf0
 80189da:	4620      	mov	r0, r4
 80189dc:	f00f fdb4 	bl	8028548 <_ZdlPvj>
 80189e0:	4620      	mov	r0, r4
 80189e2:	bd10      	pop	{r4, pc}

080189e4 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 80189e4:	b508      	push	{r3, lr}
 80189e6:	4b06      	ldr	r3, [pc, #24]	; (8018a00 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	b92b      	cbnz	r3, 80189f8 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 80189ec:	4b05      	ldr	r3, [pc, #20]	; (8018a04 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 80189ee:	21b8      	movs	r1, #184	; 0xb8
 80189f0:	4a05      	ldr	r2, [pc, #20]	; (8018a08 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 80189f2:	4806      	ldr	r0, [pc, #24]	; (8018a0c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 80189f4:	f00f fdd6 	bl	80285a4 <__assert_func>
 80189f8:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 80189fc:	bd08      	pop	{r3, pc}
 80189fe:	bf00      	nop
 8018a00:	2000bfb8 	.word	0x2000bfb8
 8018a04:	0802b280 	.word	0x0802b280
 8018a08:	0802b3c4 	.word	0x0802b3c4
 8018a0c:	0802b2bc 	.word	0x0802b2bc

08018a10 <_ZN8touchgfx13ImageProgressC1Ev>:
 8018a10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018a14:	4604      	mov	r4, r0
 8018a16:	f7ff ffa1 	bl	801895c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8018a1a:	4b31      	ldr	r3, [pc, #196]	; (8018ae0 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8018a1c:	a902      	add	r1, sp, #8
 8018a1e:	4626      	mov	r6, r4
 8018a20:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8018a24:	2500      	movs	r5, #0
 8018a26:	4a2f      	ldr	r2, [pc, #188]	; (8018ae4 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8018a28:	f846 3b90 	str.w	r3, [r6], #144
 8018a2c:	2701      	movs	r7, #1
 8018a2e:	4b2e      	ldr	r3, [pc, #184]	; (8018ae8 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8018a30:	4640      	mov	r0, r8
 8018a32:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8018a36:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8018a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a3e:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8018a42:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8018a46:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8018a4a:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8018a4e:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8018a52:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8018a56:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8018a5a:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8018a5e:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8018a62:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8018a66:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8018a6a:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8018a6e:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8018a72:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8018a76:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8018a7a:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8018a7e:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8018a82:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8018a86:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8018a8a:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8018a8e:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8018a92:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8018a96:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8018a9a:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8018a9e:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8018aa2:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8018aa6:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8018aaa:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8018aae:	f002 fc9d 	bl	801b3ec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018ab2:	4b0e      	ldr	r3, [pc, #56]	; (8018aec <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8018ab4:	4641      	mov	r1, r8
 8018ab6:	4630      	mov	r0, r6
 8018ab8:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8018abc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8018ac0:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8018ac4:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8018ac8:	f000 fa74 	bl	8018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018acc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018ad0:	4631      	mov	r1, r6
 8018ad2:	f000 fa6f 	bl	8018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	b002      	add	sp, #8
 8018ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ade:	bf00      	nop
 8018ae0:	0802b2ec 	.word	0x0802b2ec
 8018ae4:	0802c5e0 	.word	0x0802c5e0
 8018ae8:	0802b668 	.word	0x0802b668
 8018aec:	0802c478 	.word	0x0802c478

08018af0 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8018af0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018af4:	4617      	mov	r7, r2
 8018af6:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8018afa:	2200      	movs	r2, #0
 8018afc:	4604      	mov	r4, r0
 8018afe:	460e      	mov	r6, r1
 8018b00:	4698      	mov	r8, r3
 8018b02:	4611      	mov	r1, r2
 8018b04:	9500      	str	r5, [sp, #0]
 8018b06:	3090      	adds	r0, #144	; 0x90
 8018b08:	f7f8 f8de 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018b0c:	4643      	mov	r3, r8
 8018b0e:	463a      	mov	r2, r7
 8018b10:	4631      	mov	r1, r6
 8018b12:	4620      	mov	r0, r4
 8018b14:	9508      	str	r5, [sp, #32]
 8018b16:	b002      	add	sp, #8
 8018b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b1c:	f000 b8aa 	b.w	8018c74 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08018b20 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8018b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b22:	4604      	mov	r4, r0
 8018b24:	f000 f8f0 	bl	8018d08 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8018b28:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8018b2c:	4638      	mov	r0, r7
 8018b2e:	f004 f939 	bl	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018b32:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018b36:	4620      	mov	r0, r4
 8018b38:	2b01      	cmp	r3, #1
 8018b3a:	bf94      	ite	ls
 8018b3c:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8018b40:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8018b44:	f000 f93a 	bl	8018dbc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8018b48:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8018b4c:	4606      	mov	r6, r0
 8018b4e:	b205      	sxth	r5, r0
 8018b50:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018b54:	2a00      	cmp	r2, #0
 8018b56:	d056      	beq.n	8018c06 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8018b58:	2b03      	cmp	r3, #3
 8018b5a:	d82c      	bhi.n	8018bb6 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8018b5c:	e8df f003 	tbb	[pc, r3]
 8018b60:	3d311202 	.word	0x3d311202
 8018b64:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018b68:	2200      	movs	r2, #0
 8018b6a:	9300      	str	r3, [sp, #0]
 8018b6c:	4611      	mov	r1, r2
 8018b6e:	462b      	mov	r3, r5
 8018b70:	4638      	mov	r0, r7
 8018b72:	f7f8 f8a9 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018b76:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018b7a:	9300      	str	r3, [sp, #0]
 8018b7c:	462b      	mov	r3, r5
 8018b7e:	2200      	movs	r2, #0
 8018b80:	4611      	mov	r1, r2
 8018b82:	e014      	b.n	8018bae <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8018b84:	8921      	ldrh	r1, [r4, #8]
 8018b86:	2200      	movs	r2, #0
 8018b88:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018b8c:	1a09      	subs	r1, r1, r0
 8018b8e:	4638      	mov	r0, r7
 8018b90:	9300      	str	r3, [sp, #0]
 8018b92:	462b      	mov	r3, r5
 8018b94:	b209      	sxth	r1, r1
 8018b96:	f7f8 f897 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018b9a:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8018b9e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018ba2:	4249      	negs	r1, r1
 8018ba4:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8018ba8:	9200      	str	r2, [sp, #0]
 8018baa:	b209      	sxth	r1, r1
 8018bac:	2200      	movs	r2, #0
 8018bae:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8018bb2:	f7f8 f889 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018bb6:	4638      	mov	r0, r7
 8018bb8:	b003      	add	sp, #12
 8018bba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018bbe:	f004 b8f1 	b.w	801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018bc2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	9500      	str	r5, [sp, #0]
 8018bca:	2100      	movs	r1, #0
 8018bcc:	4638      	mov	r0, r7
 8018bce:	f7f8 f87b 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018bd2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018bd6:	9500      	str	r5, [sp, #0]
 8018bd8:	e7d1      	b.n	8018b7e <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8018bda:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018bde:	2100      	movs	r1, #0
 8018be0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018be4:	1a12      	subs	r2, r2, r0
 8018be6:	9500      	str	r5, [sp, #0]
 8018be8:	4638      	mov	r0, r7
 8018bea:	b212      	sxth	r2, r2
 8018bec:	f7f8 f86c 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018bf0:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8018bf4:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8018bf8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018bfc:	4252      	negs	r2, r2
 8018bfe:	9100      	str	r1, [sp, #0]
 8018c00:	b212      	sxth	r2, r2
 8018c02:	2100      	movs	r1, #0
 8018c04:	e7d3      	b.n	8018bae <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8018c06:	2b03      	cmp	r3, #3
 8018c08:	d8d5      	bhi.n	8018bb6 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8018c0a:	e8df f003 	tbb	[pc, r3]
 8018c0e:	1102      	.short	0x1102
 8018c10:	2a1b      	.short	0x2a1b
 8018c12:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018c16:	2200      	movs	r2, #0
 8018c18:	4638      	mov	r0, r7
 8018c1a:	4611      	mov	r1, r2
 8018c1c:	9300      	str	r3, [sp, #0]
 8018c1e:	462b      	mov	r3, r5
 8018c20:	f7f8 f852 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018c24:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c28:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018c2c:	1af1      	subs	r1, r6, r3
 8018c2e:	e7bb      	b.n	8018ba8 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8018c30:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8018c34:	2200      	movs	r2, #0
 8018c36:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018c3a:	1a09      	subs	r1, r1, r0
 8018c3c:	9300      	str	r3, [sp, #0]
 8018c3e:	462b      	mov	r3, r5
 8018c40:	b209      	sxth	r1, r1
 8018c42:	e795      	b.n	8018b70 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8018c44:	2200      	movs	r2, #0
 8018c46:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c4a:	4638      	mov	r0, r7
 8018c4c:	9500      	str	r5, [sp, #0]
 8018c4e:	4611      	mov	r1, r2
 8018c50:	f7f8 f83a 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018c54:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8018c58:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c5c:	1a32      	subs	r2, r6, r0
 8018c5e:	9000      	str	r0, [sp, #0]
 8018c60:	e7ce      	b.n	8018c00 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8018c62:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018c66:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018c6a:	1a12      	subs	r2, r2, r0
 8018c6c:	9500      	str	r5, [sp, #0]
 8018c6e:	b212      	sxth	r2, r2
 8018c70:	e7ab      	b.n	8018bca <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08018c72 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8018c72:	4770      	bx	lr

08018c74 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8018c74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018c78:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8018c7c:	4604      	mov	r4, r0
 8018c7e:	460e      	mov	r6, r1
 8018c80:	4698      	mov	r8, r3
 8018c82:	9700      	str	r7, [sp, #0]
 8018c84:	3058      	adds	r0, #88	; 0x58
 8018c86:	4615      	mov	r5, r2
 8018c88:	f7f8 f81e 	bl	8010cc8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018c8c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8018c90:	eb06 0308 	add.w	r3, r6, r8
 8018c94:	429a      	cmp	r2, r3
 8018c96:	eb05 0207 	add.w	r2, r5, r7
 8018c9a:	bfb8      	it	lt
 8018c9c:	8123      	strhlt	r3, [r4, #8]
 8018c9e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018ca2:	4293      	cmp	r3, r2
 8018ca4:	bfb8      	it	lt
 8018ca6:	8162      	strhlt	r2, [r4, #10]
 8018ca8:	b002      	add	sp, #8
 8018caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018cae <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8018cae:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8018cb2:	4770      	bx	lr

08018cb4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8018cb4:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8018cb8:	4770      	bx	lr

08018cba <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8018cba:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8018cbe:	4770      	bx	lr

08018cc0 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8018cc0:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8018cc4:	4770      	bx	lr

08018cc6 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8018cc6:	b510      	push	{r4, lr}
 8018cc8:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8018ccc:	800c      	strh	r4, [r1, #0]
 8018cce:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8018cd2:	8011      	strh	r1, [r2, #0]
 8018cd4:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8018cd8:	801a      	strh	r2, [r3, #0]
 8018cda:	9b02      	ldr	r3, [sp, #8]
 8018cdc:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8018ce0:	801a      	strh	r2, [r3, #0]
 8018ce2:	bd10      	pop	{r4, pc}

08018ce4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8018ce4:	b510      	push	{r4, lr}
 8018ce6:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8018cea:	800c      	strh	r4, [r1, #0]
 8018cec:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8018cf0:	8011      	strh	r1, [r2, #0]
 8018cf2:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8018cf6:	801a      	strh	r2, [r3, #0]
 8018cf8:	bd10      	pop	{r4, pc}

08018cfa <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8018cfa:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8018cfe:	800b      	strh	r3, [r1, #0]
 8018d00:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8018d04:	8013      	strh	r3, [r2, #0]
 8018d06:	4770      	bx	lr

08018d08 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8018d08:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8018d0c:	4299      	cmp	r1, r3
 8018d0e:	bfb8      	it	lt
 8018d10:	4619      	movlt	r1, r3
 8018d12:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8018d16:	4299      	cmp	r1, r3
 8018d18:	bfa8      	it	ge
 8018d1a:	4619      	movge	r1, r3
 8018d1c:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8018d20:	4770      	bx	lr

08018d22 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8018d22:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8018d26:	4770      	bx	lr

08018d28 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8018d28:	b510      	push	{r4, lr}
 8018d2a:	4604      	mov	r4, r0
 8018d2c:	2190      	movs	r1, #144	; 0x90
 8018d2e:	f00f fc0b 	bl	8028548 <_ZdlPvj>
 8018d32:	4620      	mov	r0, r4
 8018d34:	bd10      	pop	{r4, pc}

08018d36 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8018d36:	b510      	push	{r4, lr}
 8018d38:	4604      	mov	r4, r0
 8018d3a:	302c      	adds	r0, #44	; 0x2c
 8018d3c:	f002 fb56 	bl	801b3ec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018d40:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018d42:	8123      	strh	r3, [r4, #8]
 8018d44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018d46:	8163      	strh	r3, [r4, #10]
 8018d48:	bd10      	pop	{r4, pc}
	...

08018d4c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8018d4c:	4291      	cmp	r1, r2
 8018d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d52:	4604      	mov	r4, r0
 8018d54:	460e      	mov	r6, r1
 8018d56:	4615      	mov	r5, r2
 8018d58:	4698      	mov	r8, r3
 8018d5a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8018d5e:	db05      	blt.n	8018d6c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8018d60:	4b12      	ldr	r3, [pc, #72]	; (8018dac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8018d62:	214d      	movs	r1, #77	; 0x4d
 8018d64:	4a12      	ldr	r2, [pc, #72]	; (8018db0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8018d66:	4813      	ldr	r0, [pc, #76]	; (8018db4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8018d68:	f00f fc1c 	bl	80285a4 <__assert_func>
 8018d6c:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8018d70:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8018d74:	6803      	ldr	r3, [r0, #0]
 8018d76:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8018d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018d7e:	4798      	blx	r3
 8018d80:	f1b8 0f00 	cmp.w	r8, #0
 8018d84:	d10c      	bne.n	8018da0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8018d86:	1bad      	subs	r5, r5, r6
 8018d88:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8018d8c:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8018d90:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8018d94:	42bb      	cmp	r3, r7
 8018d96:	d806      	bhi.n	8018da6 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8018d98:	4b07      	ldr	r3, [pc, #28]	; (8018db8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8018d9a:	215a      	movs	r1, #90	; 0x5a
 8018d9c:	4a04      	ldr	r2, [pc, #16]	; (8018db0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8018d9e:	e7e2      	b.n	8018d66 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8018da0:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8018da4:	e7f2      	b.n	8018d8c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8018da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018daa:	bf00      	nop
 8018dac:	0802b3f7 	.word	0x0802b3f7
 8018db0:	0802b534 	.word	0x0802b534
 8018db4:	0802b401 	.word	0x0802b401
 8018db8:	0802b458 	.word	0x0802b458

08018dbc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8018dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018dbe:	4604      	mov	r4, r0
 8018dc0:	460d      	mov	r5, r1
 8018dc2:	b1b9      	cbz	r1, 8018df4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8018dc4:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8018dc8:	ab01      	add	r3, sp, #4
 8018dca:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8018dce:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8018dd2:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8018dd6:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8018dda:	1a12      	subs	r2, r2, r0
 8018ddc:	1b89      	subs	r1, r1, r6
 8018dde:	1a38      	subs	r0, r7, r0
 8018de0:	f004 f921 	bl	801d026 <_ZN8touchgfx6muldivElllRl>
 8018de4:	4629      	mov	r1, r5
 8018de6:	ab01      	add	r3, sp, #4
 8018de8:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8018dec:	4430      	add	r0, r6
 8018dee:	f004 f91a 	bl	801d026 <_ZN8touchgfx6muldivElllRl>
 8018df2:	b285      	uxth	r5, r0
 8018df4:	4628      	mov	r0, r5
 8018df6:	b003      	add	sp, #12
 8018df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018dfc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8018dfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018e00:	4604      	mov	r4, r0
 8018e02:	2600      	movs	r6, #0
 8018e04:	f7f9 f96a 	bl	80120dc <_ZN8touchgfx8DrawableC1Ev>
 8018e08:	4b1b      	ldr	r3, [pc, #108]	; (8018e78 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8018e0a:	4625      	mov	r5, r4
 8018e0c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018e10:	af02      	add	r7, sp, #8
 8018e12:	62a6      	str	r6, [r4, #40]	; 0x28
 8018e14:	f845 3b2c 	str.w	r3, [r5], #44
 8018e18:	4628      	mov	r0, r5
 8018e1a:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8018e1e:	f7f9 f95d 	bl	80120dc <_ZN8touchgfx8DrawableC1Ev>
 8018e22:	4b16      	ldr	r3, [pc, #88]	; (8018e7c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8018e24:	4639      	mov	r1, r7
 8018e26:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8018e2a:	4628      	mov	r0, r5
 8018e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e2e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8018e32:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8018e36:	f002 fad9 	bl	801b3ec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018e3a:	4638      	mov	r0, r7
 8018e3c:	f7f9 f94e 	bl	80120dc <_ZN8touchgfx8DrawableC1Ev>
 8018e40:	4b0f      	ldr	r3, [pc, #60]	; (8018e80 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8018e42:	4632      	mov	r2, r6
 8018e44:	4631      	mov	r1, r6
 8018e46:	65a3      	str	r3, [r4, #88]	; 0x58
 8018e48:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8018e4c:	4628      	mov	r0, r5
 8018e4e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8018e52:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8018e56:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8018e5a:	f7f9 f9ab 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
 8018e5e:	4629      	mov	r1, r5
 8018e60:	4620      	mov	r0, r4
 8018e62:	f000 f8a7 	bl	8018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018e66:	4620      	mov	r0, r4
 8018e68:	4639      	mov	r1, r7
 8018e6a:	f000 f8a3 	bl	8018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018e6e:	4620      	mov	r0, r4
 8018e70:	b002      	add	sp, #8
 8018e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e76:	bf00      	nop
 8018e78:	0802b47c 	.word	0x0802b47c
 8018e7c:	0802c5e0 	.word	0x0802c5e0
 8018e80:	0802b668 	.word	0x0802b668

08018e84 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018e84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018e86:	2000      	movs	r0, #0
 8018e88:	b12b      	cbz	r3, 8018e96 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018e8a:	b920      	cbnz	r0, 8018e96 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018e8c:	1a5a      	subs	r2, r3, r1
 8018e8e:	699b      	ldr	r3, [r3, #24]
 8018e90:	4250      	negs	r0, r2
 8018e92:	4150      	adcs	r0, r2
 8018e94:	e7f8      	b.n	8018e88 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8018e96:	4770      	bx	lr

08018e98 <_ZN8touchgfx9Container9removeAllEv>:
 8018e98:	2200      	movs	r2, #0
 8018e9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018e9c:	b123      	cbz	r3, 8018ea8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018e9e:	6999      	ldr	r1, [r3, #24]
 8018ea0:	6281      	str	r1, [r0, #40]	; 0x28
 8018ea2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018ea6:	e7f8      	b.n	8018e9a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8018ea8:	4770      	bx	lr

08018eaa <_ZN8touchgfx9Container6unlinkEv>:
 8018eaa:	2300      	movs	r3, #0
 8018eac:	6283      	str	r3, [r0, #40]	; 0x28
 8018eae:	4770      	bx	lr

08018eb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eb4:	461f      	mov	r7, r3
 8018eb6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8018eba:	460d      	mov	r5, r1
 8018ebc:	4616      	mov	r6, r2
 8018ebe:	b103      	cbz	r3, 8018ec2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018ec0:	6038      	str	r0, [r7, #0]
 8018ec2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018ec4:	b314      	cbz	r4, 8018f0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018ec6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018eca:	b1eb      	cbz	r3, 8018f08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018ecc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018ed0:	428d      	cmp	r5, r1
 8018ed2:	db19      	blt.n	8018f08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018ed4:	b289      	uxth	r1, r1
 8018ed6:	8923      	ldrh	r3, [r4, #8]
 8018ed8:	440b      	add	r3, r1
 8018eda:	b21b      	sxth	r3, r3
 8018edc:	429d      	cmp	r5, r3
 8018ede:	da13      	bge.n	8018f08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018ee0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018ee4:	4296      	cmp	r6, r2
 8018ee6:	db0f      	blt.n	8018f08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018ee8:	b292      	uxth	r2, r2
 8018eea:	8963      	ldrh	r3, [r4, #10]
 8018eec:	4413      	add	r3, r2
 8018eee:	b21b      	sxth	r3, r3
 8018ef0:	429e      	cmp	r6, r3
 8018ef2:	da09      	bge.n	8018f08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018ef4:	6823      	ldr	r3, [r4, #0]
 8018ef6:	1ab2      	subs	r2, r6, r2
 8018ef8:	1a69      	subs	r1, r5, r1
 8018efa:	4620      	mov	r0, r4
 8018efc:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8018f00:	b212      	sxth	r2, r2
 8018f02:	463b      	mov	r3, r7
 8018f04:	b209      	sxth	r1, r1
 8018f06:	47c0      	blx	r8
 8018f08:	69a4      	ldr	r4, [r4, #24]
 8018f0a:	e7db      	b.n	8018ec4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8018f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f10 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8018f10:	2200      	movs	r2, #0
 8018f12:	8002      	strh	r2, [r0, #0]
 8018f14:	8042      	strh	r2, [r0, #2]
 8018f16:	8082      	strh	r2, [r0, #4]
 8018f18:	80c2      	strh	r2, [r0, #6]
 8018f1a:	4770      	bx	lr

08018f1c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8018f1c:	b570      	push	{r4, r5, r6, lr}
 8018f1e:	460d      	mov	r5, r1
 8018f20:	4616      	mov	r6, r2
 8018f22:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018f24:	b13c      	cbz	r4, 8018f36 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018f26:	6823      	ldr	r3, [r4, #0]
 8018f28:	4620      	mov	r0, r4
 8018f2a:	4632      	mov	r2, r6
 8018f2c:	4629      	mov	r1, r5
 8018f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f30:	4798      	blx	r3
 8018f32:	69a4      	ldr	r4, [r4, #24]
 8018f34:	e7f6      	b.n	8018f24 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018f36:	bd70      	pop	{r4, r5, r6, pc}

08018f38 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8018f38:	b538      	push	{r3, r4, r5, lr}
 8018f3a:	460d      	mov	r5, r1
 8018f3c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018f3e:	b134      	cbz	r4, 8018f4e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018f40:	682b      	ldr	r3, [r5, #0]
 8018f42:	4621      	mov	r1, r4
 8018f44:	4628      	mov	r0, r5
 8018f46:	689b      	ldr	r3, [r3, #8]
 8018f48:	4798      	blx	r3
 8018f4a:	69a4      	ldr	r4, [r4, #24]
 8018f4c:	e7f7      	b.n	8018f3e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8018f4e:	bd38      	pop	{r3, r4, r5, pc}

08018f50 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8018f50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018f52:	b19b      	cbz	r3, 8018f7c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018f54:	428b      	cmp	r3, r1
 8018f56:	d109      	bne.n	8018f6c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8018f58:	699a      	ldr	r2, [r3, #24]
 8018f5a:	2100      	movs	r1, #0
 8018f5c:	6159      	str	r1, [r3, #20]
 8018f5e:	6282      	str	r2, [r0, #40]	; 0x28
 8018f60:	b902      	cbnz	r2, 8018f64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018f62:	4770      	bx	lr
 8018f64:	6199      	str	r1, [r3, #24]
 8018f66:	4770      	bx	lr
 8018f68:	4613      	mov	r3, r2
 8018f6a:	b13a      	cbz	r2, 8018f7c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018f6c:	699a      	ldr	r2, [r3, #24]
 8018f6e:	428a      	cmp	r2, r1
 8018f70:	d1fa      	bne.n	8018f68 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018f72:	698a      	ldr	r2, [r1, #24]
 8018f74:	619a      	str	r2, [r3, #24]
 8018f76:	2300      	movs	r3, #0
 8018f78:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8018f7c:	4770      	bx	lr

08018f7e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8018f7e:	b410      	push	{r4}
 8018f80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018f82:	4604      	mov	r4, r0
 8018f84:	b92b      	cbnz	r3, 8018f92 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8018f86:	6803      	ldr	r3, [r0, #0]
 8018f88:	4611      	mov	r1, r2
 8018f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018f90:	4718      	bx	r3
 8018f92:	b941      	cbnz	r1, 8018fa6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8018f94:	6193      	str	r3, [r2, #24]
 8018f96:	6282      	str	r2, [r0, #40]	; 0x28
 8018f98:	6154      	str	r4, [r2, #20]
 8018f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f9e:	4770      	bx	lr
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	2800      	cmp	r0, #0
 8018fa4:	d0f9      	beq.n	8018f9a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8018fa6:	4299      	cmp	r1, r3
 8018fa8:	6998      	ldr	r0, [r3, #24]
 8018faa:	d1f9      	bne.n	8018fa0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8018fac:	6190      	str	r0, [r2, #24]
 8018fae:	618a      	str	r2, [r1, #24]
 8018fb0:	e7f2      	b.n	8018f98 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08018fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018fb4:	4288      	cmp	r0, r1
 8018fb6:	b508      	push	{r3, lr}
 8018fb8:	d105      	bne.n	8018fc6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8018fba:	4b11      	ldr	r3, [pc, #68]	; (8019000 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8018fbc:	2123      	movs	r1, #35	; 0x23
 8018fbe:	4a11      	ldr	r2, [pc, #68]	; (8019004 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018fc0:	4811      	ldr	r0, [pc, #68]	; (8019008 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8018fc2:	f00f faef 	bl	80285a4 <__assert_func>
 8018fc6:	694b      	ldr	r3, [r1, #20]
 8018fc8:	b11b      	cbz	r3, 8018fd2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8018fca:	4b10      	ldr	r3, [pc, #64]	; (801900c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8018fcc:	2124      	movs	r1, #36	; 0x24
 8018fce:	4a0d      	ldr	r2, [pc, #52]	; (8019004 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018fd0:	e7f6      	b.n	8018fc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018fd2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8018fd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018fd8:	b913      	cbnz	r3, 8018fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8018fda:	6281      	str	r1, [r0, #40]	; 0x28
 8018fdc:	bd08      	pop	{r3, pc}
 8018fde:	4613      	mov	r3, r2
 8018fe0:	699a      	ldr	r2, [r3, #24]
 8018fe2:	b12a      	cbz	r2, 8018ff0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8018fe4:	428b      	cmp	r3, r1
 8018fe6:	d1fa      	bne.n	8018fde <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8018fe8:	4b09      	ldr	r3, [pc, #36]	; (8019010 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018fea:	2135      	movs	r1, #53	; 0x35
 8018fec:	4a05      	ldr	r2, [pc, #20]	; (8019004 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018fee:	e7e7      	b.n	8018fc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018ff0:	428b      	cmp	r3, r1
 8018ff2:	d103      	bne.n	8018ffc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8018ff4:	4b06      	ldr	r3, [pc, #24]	; (8019010 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018ff6:	2138      	movs	r1, #56	; 0x38
 8018ff8:	4a02      	ldr	r2, [pc, #8]	; (8019004 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018ffa:	e7e1      	b.n	8018fc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018ffc:	6199      	str	r1, [r3, #24]
 8018ffe:	e7ed      	b.n	8018fdc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8019000:	0802b595 	.word	0x0802b595
 8019004:	0802b6ec 	.word	0x0802b6ec
 8019008:	0802b5c1 	.word	0x0802b5c1
 801900c:	0802b5f4 	.word	0x0802b5f4
 8019010:	0802b62a 	.word	0x0802b62a

08019014 <_ZN8touchgfx4RectaNERKS0_>:
 8019014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019018:	888b      	ldrh	r3, [r1, #4]
 801901a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801901e:	f9b0 a000 	ldrsh.w	sl, [r0]
 8019022:	444b      	add	r3, r9
 8019024:	b29b      	uxth	r3, r3
 8019026:	fa0f f883 	sxth.w	r8, r3
 801902a:	45c2      	cmp	sl, r8
 801902c:	da30      	bge.n	8019090 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801902e:	8882      	ldrh	r2, [r0, #4]
 8019030:	4452      	add	r2, sl
 8019032:	b292      	uxth	r2, r2
 8019034:	fa0f fe82 	sxth.w	lr, r2
 8019038:	45f1      	cmp	r9, lr
 801903a:	da29      	bge.n	8019090 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801903c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019040:	88cc      	ldrh	r4, [r1, #6]
 8019042:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8019046:	442c      	add	r4, r5
 8019048:	b224      	sxth	r4, r4
 801904a:	42a6      	cmp	r6, r4
 801904c:	da20      	bge.n	8019090 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801904e:	88c7      	ldrh	r7, [r0, #6]
 8019050:	4437      	add	r7, r6
 8019052:	b2bf      	uxth	r7, r7
 8019054:	fa0f fc87 	sxth.w	ip, r7
 8019058:	4565      	cmp	r5, ip
 801905a:	da19      	bge.n	8019090 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801905c:	45ca      	cmp	sl, r9
 801905e:	4654      	mov	r4, sl
 8019060:	bfb8      	it	lt
 8019062:	464c      	movlt	r4, r9
 8019064:	42b5      	cmp	r5, r6
 8019066:	bfb8      	it	lt
 8019068:	4635      	movlt	r5, r6
 801906a:	45f0      	cmp	r8, lr
 801906c:	bfc8      	it	gt
 801906e:	4613      	movgt	r3, r2
 8019070:	1b1b      	subs	r3, r3, r4
 8019072:	8083      	strh	r3, [r0, #4]
 8019074:	88ca      	ldrh	r2, [r1, #6]
 8019076:	884b      	ldrh	r3, [r1, #2]
 8019078:	8004      	strh	r4, [r0, #0]
 801907a:	4413      	add	r3, r2
 801907c:	8045      	strh	r5, [r0, #2]
 801907e:	b29b      	uxth	r3, r3
 8019080:	b21a      	sxth	r2, r3
 8019082:	4594      	cmp	ip, r2
 8019084:	bfb8      	it	lt
 8019086:	463b      	movlt	r3, r7
 8019088:	1b5b      	subs	r3, r3, r5
 801908a:	80c3      	strh	r3, [r0, #6]
 801908c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019090:	2300      	movs	r3, #0
 8019092:	8003      	strh	r3, [r0, #0]
 8019094:	8043      	strh	r3, [r0, #2]
 8019096:	8083      	strh	r3, [r0, #4]
 8019098:	80c3      	strh	r3, [r0, #6]
 801909a:	e7f7      	b.n	801908c <_ZN8touchgfx4RectaNERKS0_+0x78>

0801909c <_ZNK8touchgfx4Rect7isEmptyEv>:
 801909c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80190a0:	b12b      	cbz	r3, 80190ae <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80190a2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80190a6:	fab0 f080 	clz	r0, r0
 80190aa:	0940      	lsrs	r0, r0, #5
 80190ac:	4770      	bx	lr
 80190ae:	2001      	movs	r0, #1
 80190b0:	4770      	bx	lr

080190b2 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80190b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190b6:	2300      	movs	r3, #0
 80190b8:	4604      	mov	r4, r0
 80190ba:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80190bc:	8003      	strh	r3, [r0, #0]
 80190be:	8043      	strh	r3, [r0, #2]
 80190c0:	8083      	strh	r3, [r0, #4]
 80190c2:	80c3      	strh	r3, [r0, #6]
 80190c4:	2d00      	cmp	r5, #0
 80190c6:	d040      	beq.n	801914a <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80190c8:	1d28      	adds	r0, r5, #4
 80190ca:	f7ff ffe7 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 80190ce:	b988      	cbnz	r0, 80190f4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80190d0:	4620      	mov	r0, r4
 80190d2:	f7ff ffe3 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 80190d6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80190da:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80190de:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80190e2:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80190e6:	b138      	cbz	r0, 80190f8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80190e8:	8022      	strh	r2, [r4, #0]
 80190ea:	8063      	strh	r3, [r4, #2]
 80190ec:	f8a4 e004 	strh.w	lr, [r4, #4]
 80190f0:	f8a4 c006 	strh.w	ip, [r4, #6]
 80190f4:	69ad      	ldr	r5, [r5, #24]
 80190f6:	e7e5      	b.n	80190c4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80190f8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80190fc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019100:	4290      	cmp	r0, r2
 8019102:	4607      	mov	r7, r0
 8019104:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8019108:	460e      	mov	r6, r1
 801910a:	bfa8      	it	ge
 801910c:	4617      	movge	r7, r2
 801910e:	4299      	cmp	r1, r3
 8019110:	4472      	add	r2, lr
 8019112:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8019116:	bfa8      	it	ge
 8019118:	461e      	movge	r6, r3
 801911a:	4440      	add	r0, r8
 801911c:	4471      	add	r1, lr
 801911e:	4463      	add	r3, ip
 8019120:	b200      	sxth	r0, r0
 8019122:	8027      	strh	r7, [r4, #0]
 8019124:	b212      	sxth	r2, r2
 8019126:	8066      	strh	r6, [r4, #2]
 8019128:	b209      	sxth	r1, r1
 801912a:	b21b      	sxth	r3, r3
 801912c:	4290      	cmp	r0, r2
 801912e:	bfac      	ite	ge
 8019130:	ebc7 0200 	rsbge	r2, r7, r0
 8019134:	ebc7 0202 	rsblt	r2, r7, r2
 8019138:	4299      	cmp	r1, r3
 801913a:	bfac      	ite	ge
 801913c:	ebc6 0301 	rsbge	r3, r6, r1
 8019140:	ebc6 0303 	rsblt	r3, r6, r3
 8019144:	80a2      	strh	r2, [r4, #4]
 8019146:	80e3      	strh	r3, [r4, #6]
 8019148:	e7d4      	b.n	80190f4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801914a:	4620      	mov	r0, r4
 801914c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019150 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8019150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019154:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019158:	b383      	cbz	r3, 80191bc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801915a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801915c:	b374      	cbz	r4, 80191bc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801915e:	f9b1 5000 	ldrsh.w	r5, [r1]
 8019162:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8019166:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801916a:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801916e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019172:	b303      	cbz	r3, 80191b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019174:	4668      	mov	r0, sp
 8019176:	1d21      	adds	r1, r4, #4
 8019178:	f8ad 5000 	strh.w	r5, [sp]
 801917c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8019180:	f8ad 7004 	strh.w	r7, [sp, #4]
 8019184:	f8ad 8006 	strh.w	r8, [sp, #6]
 8019188:	f7ff ff44 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801918c:	4668      	mov	r0, sp
 801918e:	f7ff ff85 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 8019192:	b980      	cbnz	r0, 80191b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019194:	f8bd 3000 	ldrh.w	r3, [sp]
 8019198:	4669      	mov	r1, sp
 801919a:	88a2      	ldrh	r2, [r4, #4]
 801919c:	4620      	mov	r0, r4
 801919e:	1a9b      	subs	r3, r3, r2
 80191a0:	88e2      	ldrh	r2, [r4, #6]
 80191a2:	f8ad 3000 	strh.w	r3, [sp]
 80191a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80191aa:	1a9b      	subs	r3, r3, r2
 80191ac:	f8ad 3002 	strh.w	r3, [sp, #2]
 80191b0:	6823      	ldr	r3, [r4, #0]
 80191b2:	689b      	ldr	r3, [r3, #8]
 80191b4:	4798      	blx	r3
 80191b6:	69a4      	ldr	r4, [r4, #24]
 80191b8:	2c00      	cmp	r4, #0
 80191ba:	d1d8      	bne.n	801916e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80191bc:	b002      	add	sp, #8
 80191be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080191c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80191c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80191c4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80191c8:	460d      	mov	r5, r1
 80191ca:	4616      	mov	r6, r2
 80191cc:	b323      	cbz	r3, 8019218 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80191ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80191d0:	b314      	cbz	r4, 8019218 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80191d2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80191d6:	b1eb      	cbz	r3, 8019214 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80191d8:	6828      	ldr	r0, [r5, #0]
 80191da:	466b      	mov	r3, sp
 80191dc:	6869      	ldr	r1, [r5, #4]
 80191de:	c303      	stmia	r3!, {r0, r1}
 80191e0:	4668      	mov	r0, sp
 80191e2:	1d21      	adds	r1, r4, #4
 80191e4:	f7ff ff16 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 80191e8:	4668      	mov	r0, sp
 80191ea:	f7ff ff57 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 80191ee:	b988      	cbnz	r0, 8019214 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80191f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80191f4:	4669      	mov	r1, sp
 80191f6:	88a2      	ldrh	r2, [r4, #4]
 80191f8:	4620      	mov	r0, r4
 80191fa:	1a9b      	subs	r3, r3, r2
 80191fc:	88e2      	ldrh	r2, [r4, #6]
 80191fe:	f8ad 3000 	strh.w	r3, [sp]
 8019202:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019206:	1a9b      	subs	r3, r3, r2
 8019208:	4632      	mov	r2, r6
 801920a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801920e:	6823      	ldr	r3, [r4, #0]
 8019210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019212:	4798      	blx	r3
 8019214:	69a4      	ldr	r4, [r4, #24]
 8019216:	e7db      	b.n	80191d0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8019218:	b002      	add	sp, #8
 801921a:	bd70      	pop	{r4, r5, r6, pc}

0801921c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801921c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019220:	4770      	bx	lr

08019222 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019222:	6803      	ldr	r3, [r0, #0]
 8019224:	b513      	push	{r0, r1, r4, lr}
 8019226:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801922a:	2300      	movs	r3, #0
 801922c:	e9cd 3300 	strd	r3, r3, [sp]
 8019230:	466b      	mov	r3, sp
 8019232:	47a0      	blx	r4
 8019234:	b002      	add	sp, #8
 8019236:	bd10      	pop	{r4, pc}

08019238 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8019238:	2301      	movs	r3, #1
 801923a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801923e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019242:	4770      	bx	lr

08019244 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8019244:	2301      	movs	r3, #1
 8019246:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801924a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801924e:	4770      	bx	lr

08019250 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8019250:	6843      	ldr	r3, [r0, #4]
 8019252:	2201      	movs	r2, #1
 8019254:	725a      	strb	r2, [r3, #9]
 8019256:	6840      	ldr	r0, [r0, #4]
 8019258:	6803      	ldr	r3, [r0, #0]
 801925a:	691b      	ldr	r3, [r3, #16]
 801925c:	4718      	bx	r3

0801925e <_ZN8touchgfx3HAL8flushDMAEv>:
 801925e:	6840      	ldr	r0, [r0, #4]
 8019260:	6803      	ldr	r3, [r0, #0]
 8019262:	689b      	ldr	r3, [r3, #8]
 8019264:	4718      	bx	r3
	...

08019268 <_ZN8touchgfx3HAL10beginFrameEv>:
 8019268:	4b04      	ldr	r3, [pc, #16]	; (801927c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801926a:	781b      	ldrb	r3, [r3, #0]
 801926c:	b123      	cbz	r3, 8019278 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801926e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8019272:	f080 0001 	eor.w	r0, r0, #1
 8019276:	4770      	bx	lr
 8019278:	2001      	movs	r0, #1
 801927a:	4770      	bx	lr
 801927c:	2000beec 	.word	0x2000beec

08019280 <_ZN8touchgfx3HAL8endFrameEv>:
 8019280:	b510      	push	{r4, lr}
 8019282:	4604      	mov	r4, r0
 8019284:	6840      	ldr	r0, [r0, #4]
 8019286:	6803      	ldr	r3, [r0, #0]
 8019288:	689b      	ldr	r3, [r3, #8]
 801928a:	4798      	blx	r3
 801928c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8019290:	b113      	cbz	r3, 8019298 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8019292:	2301      	movs	r3, #1
 8019294:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019298:	bd10      	pop	{r4, pc}

0801929a <_ZN8touchgfx3HAL9taskEntryEv>:
 801929a:	b508      	push	{r3, lr}
 801929c:	6803      	ldr	r3, [r0, #0]
 801929e:	4604      	mov	r4, r0
 80192a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80192a2:	4798      	blx	r3
 80192a4:	6823      	ldr	r3, [r4, #0]
 80192a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80192a8:	4620      	mov	r0, r4
 80192aa:	4798      	blx	r3
 80192ac:	f7fd fc24 	bl	8016af8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80192b0:	6823      	ldr	r3, [r4, #0]
 80192b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80192b4:	e7f8      	b.n	80192a8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080192b8 <_ZN8touchgfx3HAL4tickEv>:
 80192b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80192ba:	6803      	ldr	r3, [r0, #0]
 80192bc:	4604      	mov	r4, r0
 80192be:	4d5c      	ldr	r5, [pc, #368]	; (8019430 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80192c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80192c4:	4798      	blx	r3
 80192c6:	2800      	cmp	r0, #0
 80192c8:	f000 8097 	beq.w	80193fa <_ZN8touchgfx3HAL4tickEv+0x142>
 80192cc:	2001      	movs	r0, #1
 80192ce:	2600      	movs	r6, #0
 80192d0:	f7fd f8f6 	bl	80164c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80192d4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80192d8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80192dc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80192e0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80192e4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80192e8:	b133      	cbz	r3, 80192f8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80192ea:	6823      	ldr	r3, [r4, #0]
 80192ec:	4620      	mov	r0, r4
 80192ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80192f2:	4798      	blx	r3
 80192f4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80192f8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80192fc:	2601      	movs	r6, #1
 80192fe:	6862      	ldr	r2, [r4, #4]
 8019300:	f083 0301 	eor.w	r3, r3, #1
 8019304:	702e      	strb	r6, [r5, #0]
 8019306:	7253      	strb	r3, [r2, #9]
 8019308:	f003 f91e 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 801930c:	6803      	ldr	r3, [r0, #0]
 801930e:	4631      	mov	r1, r6
 8019310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019312:	4798      	blx	r3
 8019314:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019318:	b90b      	cbnz	r3, 801931e <_ZN8touchgfx3HAL4tickEv+0x66>
 801931a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801931e:	f003 f913 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 8019322:	6803      	ldr	r3, [r0, #0]
 8019324:	695b      	ldr	r3, [r3, #20]
 8019326:	4798      	blx	r3
 8019328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801932a:	6803      	ldr	r3, [r0, #0]
 801932c:	691b      	ldr	r3, [r3, #16]
 801932e:	4798      	blx	r3
 8019330:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019334:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8019338:	3b01      	subs	r3, #1
 801933a:	b2db      	uxtb	r3, r3
 801933c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019340:	b10a      	cbz	r2, 8019346 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8019342:	2b00      	cmp	r3, #0
 8019344:	d1eb      	bne.n	801931e <_ZN8touchgfx3HAL4tickEv+0x66>
 8019346:	4a3b      	ldr	r2, [pc, #236]	; (8019434 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8019348:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801934c:	7813      	ldrb	r3, [r2, #0]
 801934e:	3301      	adds	r3, #1
 8019350:	b25b      	sxtb	r3, r3
 8019352:	4299      	cmp	r1, r3
 8019354:	7013      	strb	r3, [r2, #0]
 8019356:	dc10      	bgt.n	801937a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8019358:	2300      	movs	r3, #0
 801935a:	68e0      	ldr	r0, [r4, #12]
 801935c:	a902      	add	r1, sp, #8
 801935e:	7013      	strb	r3, [r2, #0]
 8019360:	aa03      	add	r2, sp, #12
 8019362:	6803      	ldr	r3, [r0, #0]
 8019364:	68db      	ldr	r3, [r3, #12]
 8019366:	4798      	blx	r3
 8019368:	6823      	ldr	r3, [r4, #0]
 801936a:	2800      	cmp	r0, #0
 801936c:	d051      	beq.n	8019412 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801936e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019372:	4620      	mov	r0, r4
 8019374:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019378:	4798      	blx	r3
 801937a:	2300      	movs	r3, #0
 801937c:	6960      	ldr	r0, [r4, #20]
 801937e:	f88d 3007 	strb.w	r3, [sp, #7]
 8019382:	b158      	cbz	r0, 801939c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8019384:	6803      	ldr	r3, [r0, #0]
 8019386:	f10d 0107 	add.w	r1, sp, #7
 801938a:	68db      	ldr	r3, [r3, #12]
 801938c:	4798      	blx	r3
 801938e:	b128      	cbz	r0, 801939c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8019390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019392:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8019396:	6803      	ldr	r3, [r0, #0]
 8019398:	68db      	ldr	r3, [r3, #12]
 801939a:	4798      	blx	r3
 801939c:	f104 001c 	add.w	r0, r4, #28
 80193a0:	f00d fc34 	bl	8026c0c <_ZN8touchgfx8Gestures4tickEv>
 80193a4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80193a8:	b30b      	cbz	r3, 80193ee <_ZN8touchgfx3HAL4tickEv+0x136>
 80193aa:	6920      	ldr	r0, [r4, #16]
 80193ac:	6803      	ldr	r3, [r0, #0]
 80193ae:	691b      	ldr	r3, [r3, #16]
 80193b0:	4798      	blx	r3
 80193b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80193b4:	4606      	mov	r6, r0
 80193b6:	b903      	cbnz	r3, 80193ba <_ZN8touchgfx3HAL4tickEv+0x102>
 80193b8:	6720      	str	r0, [r4, #112]	; 0x70
 80193ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80193bc:	4a1e      	ldr	r2, [pc, #120]	; (8019438 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80193be:	1af3      	subs	r3, r6, r3
 80193c0:	4293      	cmp	r3, r2
 80193c2:	d914      	bls.n	80193ee <_ZN8touchgfx3HAL4tickEv+0x136>
 80193c4:	6920      	ldr	r0, [r4, #16]
 80193c6:	6803      	ldr	r3, [r0, #0]
 80193c8:	699b      	ldr	r3, [r3, #24]
 80193ca:	4798      	blx	r3
 80193cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80193ce:	2264      	movs	r2, #100	; 0x64
 80193d0:	1af3      	subs	r3, r6, r3
 80193d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80193d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80193da:	2800      	cmp	r0, #0
 80193dc:	dc1e      	bgt.n	801941c <_ZN8touchgfx3HAL4tickEv+0x164>
 80193de:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80193e2:	6920      	ldr	r0, [r4, #16]
 80193e4:	2100      	movs	r1, #0
 80193e6:	6803      	ldr	r3, [r0, #0]
 80193e8:	69db      	ldr	r3, [r3, #28]
 80193ea:	4798      	blx	r3
 80193ec:	6726      	str	r6, [r4, #112]	; 0x70
 80193ee:	f003 f8ab 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 80193f2:	6803      	ldr	r3, [r0, #0]
 80193f4:	2100      	movs	r1, #0
 80193f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193f8:	4798      	blx	r3
 80193fa:	6823      	ldr	r3, [r4, #0]
 80193fc:	4620      	mov	r0, r4
 80193fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019402:	4798      	blx	r3
 8019404:	2001      	movs	r0, #1
 8019406:	f7fd f866 	bl	80164d6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801940a:	2300      	movs	r3, #0
 801940c:	702b      	strb	r3, [r5, #0]
 801940e:	b004      	add	sp, #16
 8019410:	bd70      	pop	{r4, r5, r6, pc}
 8019412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019416:	4620      	mov	r0, r4
 8019418:	4798      	blx	r3
 801941a:	e7ae      	b.n	801937a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801941c:	2863      	cmp	r0, #99	; 0x63
 801941e:	bfcb      	itete	gt
 8019420:	2300      	movgt	r3, #0
 8019422:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8019426:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801942a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801942e:	e7d8      	b.n	80193e2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8019430:	2000bef4 	.word	0x2000bef4
 8019434:	2000bef5 	.word	0x2000bef5
 8019438:	05f5e100 	.word	0x05f5e100

0801943c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801943c:	f7fd bafc 	b.w	8016a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019440 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019440:	6581      	str	r1, [r0, #88]	; 0x58
 8019442:	301c      	adds	r0, #28
 8019444:	f00d bbe0 	b.w	8026c08 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08019448 <_ZN8touchgfx3HAL5touchEll>:
 8019448:	b530      	push	{r4, r5, lr}
 801944a:	b087      	sub	sp, #28
 801944c:	4604      	mov	r4, r0
 801944e:	a804      	add	r0, sp, #16
 8019450:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8019454:	f002 fe7c 	bl	801c150 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8019458:	9b04      	ldr	r3, [sp, #16]
 801945a:	a906      	add	r1, sp, #24
 801945c:	a803      	add	r0, sp, #12
 801945e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019462:	9b05      	ldr	r3, [sp, #20]
 8019464:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8019468:	f002 fec0 	bl	801c1ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801946c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019470:	f104 001c 	add.w	r0, r4, #28
 8019474:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8019478:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801947c:	b189      	cbz	r1, 80194a2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801947e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8019482:	9300      	str	r3, [sp, #0]
 8019484:	4613      	mov	r3, r2
 8019486:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801948a:	462a      	mov	r2, r5
 801948c:	f00d fbcc 	bl	8026c28 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8019490:	b128      	cbz	r0, 801949e <_ZN8touchgfx3HAL5touchEll+0x56>
 8019492:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019496:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019498:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801949c:	6623      	str	r3, [r4, #96]	; 0x60
 801949e:	b007      	add	sp, #28
 80194a0:	bd30      	pop	{r4, r5, pc}
 80194a2:	f00d fc05 	bl	8026cb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80194a6:	2301      	movs	r3, #1
 80194a8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80194ac:	e7f1      	b.n	8019492 <_ZN8touchgfx3HAL5touchEll+0x4a>

080194ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80194ae:	b570      	push	{r4, r5, r6, lr}
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d050      	beq.n	8019556 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80194b4:	ea81 0002 	eor.w	r0, r1, r2
 80194b8:	07c6      	lsls	r6, r0, #31
 80194ba:	d508      	bpl.n	80194ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80194bc:	3a01      	subs	r2, #1
 80194be:	18cc      	adds	r4, r1, r3
 80194c0:	42a1      	cmp	r1, r4
 80194c2:	d048      	beq.n	8019556 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80194c4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80194c8:	f801 0b01 	strb.w	r0, [r1], #1
 80194cc:	e7f8      	b.n	80194c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80194ce:	07d5      	lsls	r5, r2, #31
 80194d0:	bf42      	ittt	mi
 80194d2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80194d6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80194da:	f801 0b01 	strbmi.w	r0, [r1], #1
 80194de:	2b01      	cmp	r3, #1
 80194e0:	d915      	bls.n	801950e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80194e2:	ea82 0001 	eor.w	r0, r2, r1
 80194e6:	0784      	lsls	r4, r0, #30
 80194e8:	d02d      	beq.n	8019546 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80194ea:	1e94      	subs	r4, r2, #2
 80194ec:	4608      	mov	r0, r1
 80194ee:	18ce      	adds	r6, r1, r3
 80194f0:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80194f4:	f820 5b02 	strh.w	r5, [r0], #2
 80194f8:	1a35      	subs	r5, r6, r0
 80194fa:	2d01      	cmp	r5, #1
 80194fc:	d8f8      	bhi.n	80194f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80194fe:	1e98      	subs	r0, r3, #2
 8019500:	f003 0301 	and.w	r3, r3, #1
 8019504:	f020 0001 	bic.w	r0, r0, #1
 8019508:	3002      	adds	r0, #2
 801950a:	4401      	add	r1, r0
 801950c:	4402      	add	r2, r0
 801950e:	1f14      	subs	r4, r2, #4
 8019510:	4608      	mov	r0, r1
 8019512:	18ce      	adds	r6, r1, r3
 8019514:	1a35      	subs	r5, r6, r0
 8019516:	2d03      	cmp	r5, #3
 8019518:	d810      	bhi.n	801953c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801951a:	089c      	lsrs	r4, r3, #2
 801951c:	00a0      	lsls	r0, r4, #2
 801951e:	4401      	add	r1, r0
 8019520:	3801      	subs	r0, #1
 8019522:	4402      	add	r2, r0
 8019524:	f06f 0003 	mvn.w	r0, #3
 8019528:	fb00 3404 	mla	r4, r0, r4, r3
 801952c:	440c      	add	r4, r1
 801952e:	42a1      	cmp	r1, r4
 8019530:	d011      	beq.n	8019556 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8019532:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8019536:	f801 3b01 	strb.w	r3, [r1], #1
 801953a:	e7f8      	b.n	801952e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801953c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8019540:	f840 5b04 	str.w	r5, [r0], #4
 8019544:	e7e6      	b.n	8019514 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8019546:	0790      	lsls	r0, r2, #30
 8019548:	d0e1      	beq.n	801950e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801954a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801954e:	3b02      	subs	r3, #2
 8019550:	f821 0b02 	strh.w	r0, [r1], #2
 8019554:	e7db      	b.n	801950e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8019556:	2001      	movs	r0, #1
 8019558:	bd70      	pop	{r4, r5, r6, pc}

0801955a <_ZN8touchgfx3HAL7noTouchEv>:
 801955a:	b510      	push	{r4, lr}
 801955c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8019560:	4604      	mov	r4, r0
 8019562:	b153      	cbz	r3, 801957a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019564:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8019568:	2101      	movs	r1, #1
 801956a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801956e:	301c      	adds	r0, #28
 8019570:	f00d fb9e 	bl	8026cb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019574:	2300      	movs	r3, #0
 8019576:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801957a:	bd10      	pop	{r4, pc}

0801957c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801957c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019580:	4605      	mov	r5, r0
 8019582:	6980      	ldr	r0, [r0, #24]
 8019584:	b085      	sub	sp, #20
 8019586:	460f      	mov	r7, r1
 8019588:	4690      	mov	r8, r2
 801958a:	4699      	mov	r9, r3
 801958c:	b930      	cbnz	r0, 801959c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801958e:	4b1f      	ldr	r3, [pc, #124]	; (801960c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8019590:	f44f 7198 	mov.w	r1, #304	; 0x130
 8019594:	4a1e      	ldr	r2, [pc, #120]	; (8019610 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8019596:	481f      	ldr	r0, [pc, #124]	; (8019614 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8019598:	f00f f804 	bl	80285a4 <__assert_func>
 801959c:	ac04      	add	r4, sp, #16
 801959e:	2600      	movs	r6, #0
 80195a0:	f844 6d04 	str.w	r6, [r4, #-4]!
 80195a4:	6806      	ldr	r6, [r0, #0]
 80195a6:	9401      	str	r4, [sp, #4]
 80195a8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80195ac:	9400      	str	r4, [sp, #0]
 80195ae:	6834      	ldr	r4, [r6, #0]
 80195b0:	47a0      	blx	r4
 80195b2:	4c19      	ldr	r4, [pc, #100]	; (8019618 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80195b4:	4606      	mov	r6, r0
 80195b6:	f8a4 9000 	strh.w	r9, [r4]
 80195ba:	f7f7 fbd9 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 80195be:	6803      	ldr	r3, [r0, #0]
 80195c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195c2:	4798      	blx	r3
 80195c4:	280c      	cmp	r0, #12
 80195c6:	d80f      	bhi.n	80195e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80195c8:	e8df f000 	tbb	[pc, r0]
 80195cc:	1b1b1207 	.word	0x1b1b1207
 80195d0:	1b1b1b1b 	.word	0x1b1b1b1b
 80195d4:	1b1b1b1b 	.word	0x1b1b1b1b
 80195d8:	1b          	.byte	0x1b
 80195d9:	00          	.byte	0x00
 80195da:	8823      	ldrh	r3, [r4, #0]
 80195dc:	fb08 7203 	mla	r2, r8, r3, r7
 80195e0:	9b03      	ldr	r3, [sp, #12]
 80195e2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80195e6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80195e8:	4630      	mov	r0, r6
 80195ea:	b005      	add	sp, #20
 80195ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195f0:	8822      	ldrh	r2, [r4, #0]
 80195f2:	9b03      	ldr	r3, [sp, #12]
 80195f4:	fb08 7202 	mla	r2, r8, r2, r7
 80195f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80195fc:	1a9a      	subs	r2, r3, r2
 80195fe:	63ea      	str	r2, [r5, #60]	; 0x3c
 8019600:	e7f2      	b.n	80195e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8019602:	4b06      	ldr	r3, [pc, #24]	; (801961c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8019604:	f240 114d 	movw	r1, #333	; 0x14d
 8019608:	4a01      	ldr	r2, [pc, #4]	; (8019610 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801960a:	e7c4      	b.n	8019596 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801960c:	0802b795 	.word	0x0802b795
 8019610:	0802baa6 	.word	0x0802baa6
 8019614:	0802b7da 	.word	0x0802b7da
 8019618:	2000bee8 	.word	0x2000bee8
 801961c:	0802b800 	.word	0x0802b800

08019620 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8019620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019624:	4698      	mov	r8, r3
 8019626:	6803      	ldr	r3, [r0, #0]
 8019628:	b087      	sub	sp, #28
 801962a:	460e      	mov	r6, r1
 801962c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801962e:	4617      	mov	r7, r2
 8019630:	4b0d      	ldr	r3, [pc, #52]	; (8019668 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8019632:	4604      	mov	r4, r0
 8019634:	f8b3 9000 	ldrh.w	r9, [r3]
 8019638:	f7f7 fb9a 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801963c:	6803      	ldr	r3, [r0, #0]
 801963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019640:	4798      	blx	r3
 8019642:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019646:	463a      	mov	r2, r7
 8019648:	4631      	mov	r1, r6
 801964a:	9302      	str	r3, [sp, #8]
 801964c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019650:	9301      	str	r3, [sp, #4]
 8019652:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019656:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801965a:	9300      	str	r3, [sp, #0]
 801965c:	4620      	mov	r0, r4
 801965e:	4643      	mov	r3, r8
 8019660:	47a8      	blx	r5
 8019662:	b007      	add	sp, #28
 8019664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019668:	2000bee8 	.word	0x2000bee8

0801966c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801966c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019670:	4606      	mov	r6, r0
 8019672:	b089      	sub	sp, #36	; 0x24
 8019674:	4610      	mov	r0, r2
 8019676:	460c      	mov	r4, r1
 8019678:	4691      	mov	r9, r2
 801967a:	4698      	mov	r8, r3
 801967c:	f005 f980 	bl	801e980 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019680:	2800      	cmp	r0, #0
 8019682:	f000 8092 	beq.w	80197aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8019686:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80197c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801968a:	ad08      	add	r5, sp, #32
 801968c:	f8df b138 	ldr.w	fp, [pc, #312]	; 80197c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8019690:	f8da 0000 	ldr.w	r0, [sl]
 8019694:	4f4a      	ldr	r7, [pc, #296]	; (80197c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8019696:	6802      	ldr	r2, [r0, #0]
 8019698:	6a12      	ldr	r2, [r2, #32]
 801969a:	4790      	blx	r2
 801969c:	f8da 0000 	ldr.w	r0, [sl]
 80196a0:	6802      	ldr	r2, [r0, #0]
 80196a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80196a4:	4790      	blx	r2
 80196a6:	f8bb 3000 	ldrh.w	r3, [fp]
 80196aa:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80196ae:	4628      	mov	r0, r5
 80196b0:	9300      	str	r3, [sp, #0]
 80196b2:	883b      	ldrh	r3, [r7, #0]
 80196b4:	9301      	str	r3, [sp, #4]
 80196b6:	f005 fa23 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80196ba:	f8ab 0000 	strh.w	r0, [fp]
 80196be:	4628      	mov	r0, r5
 80196c0:	f005 fa58 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80196c4:	f8da b000 	ldr.w	fp, [sl]
 80196c8:	8038      	strh	r0, [r7, #0]
 80196ca:	4648      	mov	r0, r9
 80196cc:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80196d0:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80196d4:	9302      	str	r3, [sp, #8]
 80196d6:	f005 f953 	bl	801e980 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80196da:	f8da 2000 	ldr.w	r2, [sl]
 80196de:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80196e2:	63d0      	str	r0, [r2, #60]	; 0x3c
 80196e4:	4620      	mov	r0, r4
 80196e6:	6822      	ldr	r2, [r4, #0]
 80196e8:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80196ec:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80196ee:	2200      	movs	r2, #0
 80196f0:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80196f4:	4611      	mov	r1, r2
 80196f6:	4798      	blx	r3
 80196f8:	2201      	movs	r2, #1
 80196fa:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 80196fe:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8019702:	1d22      	adds	r2, r4, #4
 8019704:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8019708:	2900      	cmp	r1, #0
 801970a:	d051      	beq.n	80197b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801970c:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8019710:	2900      	cmp	r1, #0
 8019712:	d04d      	beq.n	80197b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8019714:	6810      	ldr	r0, [r2, #0]
 8019716:	f10d 0c18 	add.w	ip, sp, #24
 801971a:	6851      	ldr	r1, [r2, #4]
 801971c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019720:	4641      	mov	r1, r8
 8019722:	a806      	add	r0, sp, #24
 8019724:	f7ff fc76 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 8019728:	4628      	mov	r0, r5
 801972a:	f005 fb75 	bl	801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801972e:	4680      	mov	r8, r0
 8019730:	f7f7 fb1e 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8019734:	6802      	ldr	r2, [r0, #0]
 8019736:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019738:	4790      	blx	r2
 801973a:	4580      	cmp	r8, r0
 801973c:	d03d      	beq.n	80197ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801973e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8019740:	b150      	cbz	r0, 8019758 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8019742:	4628      	mov	r0, r5
 8019744:	f005 fb68 	bl	801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019748:	4605      	mov	r5, r0
 801974a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801974c:	6803      	ldr	r3, [r0, #0]
 801974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019750:	4798      	blx	r3
 8019752:	1a2b      	subs	r3, r5, r0
 8019754:	4258      	negs	r0, r3
 8019756:	4158      	adcs	r0, r3
 8019758:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801975c:	2500      	movs	r5, #0
 801975e:	6963      	ldr	r3, [r4, #20]
 8019760:	4620      	mov	r0, r4
 8019762:	6822      	ldr	r2, [r4, #0]
 8019764:	a906      	add	r1, sp, #24
 8019766:	6165      	str	r5, [r4, #20]
 8019768:	9303      	str	r3, [sp, #12]
 801976a:	6892      	ldr	r2, [r2, #8]
 801976c:	4790      	blx	r2
 801976e:	9b03      	ldr	r3, [sp, #12]
 8019770:	4620      	mov	r0, r4
 8019772:	4652      	mov	r2, sl
 8019774:	6163      	str	r3, [r4, #20]
 8019776:	4649      	mov	r1, r9
 8019778:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801977c:	6823      	ldr	r3, [r4, #0]
 801977e:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8019782:	4c10      	ldr	r4, [pc, #64]	; (80197c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8019784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019786:	4798      	blx	r3
 8019788:	6820      	ldr	r0, [r4, #0]
 801978a:	9b02      	ldr	r3, [sp, #8]
 801978c:	9a00      	ldr	r2, [sp, #0]
 801978e:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8019792:	4b0d      	ldr	r3, [pc, #52]	; (80197c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8019794:	801a      	strh	r2, [r3, #0]
 8019796:	4b0a      	ldr	r3, [pc, #40]	; (80197c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8019798:	9a01      	ldr	r2, [sp, #4]
 801979a:	801a      	strh	r2, [r3, #0]
 801979c:	6803      	ldr	r3, [r0, #0]
 801979e:	6a1b      	ldr	r3, [r3, #32]
 80197a0:	4798      	blx	r3
 80197a2:	6820      	ldr	r0, [r4, #0]
 80197a4:	6803      	ldr	r3, [r0, #0]
 80197a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197a8:	4798      	blx	r3
 80197aa:	b009      	add	sp, #36	; 0x24
 80197ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197b0:	ab06      	add	r3, sp, #24
 80197b2:	6810      	ldr	r0, [r2, #0]
 80197b4:	6851      	ldr	r1, [r2, #4]
 80197b6:	c303      	stmia	r3!, {r0, r1}
 80197b8:	e7b6      	b.n	8019728 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80197ba:	2000      	movs	r0, #0
 80197bc:	e7cc      	b.n	8019758 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80197be:	bf00      	nop
 80197c0:	2000beea 	.word	0x2000beea
 80197c4:	2000bef0 	.word	0x2000bef0
 80197c8:	2000bee8 	.word	0x2000bee8

080197cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80197cc:	4b07      	ldr	r3, [pc, #28]	; (80197ec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80197ce:	b510      	push	{r4, lr}
 80197d0:	781b      	ldrb	r3, [r3, #0]
 80197d2:	4604      	mov	r4, r0
 80197d4:	b13b      	cbz	r3, 80197e6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80197d6:	6803      	ldr	r3, [r0, #0]
 80197d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197da:	4798      	blx	r3
 80197dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80197de:	4283      	cmp	r3, r0
 80197e0:	d101      	bne.n	80197e6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80197e2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80197e4:	bd10      	pop	{r4, pc}
 80197e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80197e8:	e7fc      	b.n	80197e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80197ea:	bf00      	nop
 80197ec:	2000beec 	.word	0x2000beec

080197f0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80197f0:	4b0b      	ldr	r3, [pc, #44]	; (8019820 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80197f2:	b510      	push	{r4, lr}
 80197f4:	781b      	ldrb	r3, [r3, #0]
 80197f6:	4604      	mov	r4, r0
 80197f8:	b95b      	cbnz	r3, 8019812 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80197fa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80197fe:	2b02      	cmp	r3, #2
 8019800:	d007      	beq.n	8019812 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019802:	6840      	ldr	r0, [r0, #4]
 8019804:	f000 fbc8 	bl	8019f98 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019808:	b118      	cbz	r0, 8019812 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801980a:	6862      	ldr	r2, [r4, #4]
 801980c:	7a53      	ldrb	r3, [r2, #9]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d0fc      	beq.n	801980c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019812:	f7fd f903 	bl	8016a1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019816:	4620      	mov	r0, r4
 8019818:	f7ff ffd8 	bl	80197cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801981c:	bd10      	pop	{r4, pc}
 801981e:	bf00      	nop
 8019820:	2000beec 	.word	0x2000beec

08019824 <_ZN8touchgfx3HAL10initializeEv>:
 8019824:	b510      	push	{r4, lr}
 8019826:	4604      	mov	r4, r0
 8019828:	f7fd f8d4 	bl	80169d4 <_ZN8touchgfx10OSWrappers10initializeEv>
 801982c:	6860      	ldr	r0, [r4, #4]
 801982e:	6803      	ldr	r3, [r0, #0]
 8019830:	68db      	ldr	r3, [r3, #12]
 8019832:	4798      	blx	r3
 8019834:	68e0      	ldr	r0, [r4, #12]
 8019836:	6803      	ldr	r3, [r0, #0]
 8019838:	689b      	ldr	r3, [r3, #8]
 801983a:	4798      	blx	r3
 801983c:	6823      	ldr	r3, [r4, #0]
 801983e:	4620      	mov	r0, r4
 8019840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019846:	4718      	bx	r3

08019848 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8019848:	b508      	push	{r3, lr}
 801984a:	290c      	cmp	r1, #12
 801984c:	d817      	bhi.n	801987e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801984e:	e8df f001 	tbb	[pc, r1]
 8019852:	090b      	.short	0x090b
 8019854:	0d0d0d07 	.word	0x0d0d0d07
 8019858:	1414140d 	.word	0x1414140d
 801985c:	1414      	.short	0x1414
 801985e:	0d          	.byte	0x0d
 801985f:	00          	.byte	0x00
 8019860:	2020      	movs	r0, #32
 8019862:	bd08      	pop	{r3, pc}
 8019864:	2018      	movs	r0, #24
 8019866:	e7fc      	b.n	8019862 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019868:	2010      	movs	r0, #16
 801986a:	e7fa      	b.n	8019862 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801986c:	4b05      	ldr	r3, [pc, #20]	; (8019884 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801986e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8019872:	4a05      	ldr	r2, [pc, #20]	; (8019888 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8019874:	4805      	ldr	r0, [pc, #20]	; (801988c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8019876:	f00e fe95 	bl	80285a4 <__assert_func>
 801987a:	2008      	movs	r0, #8
 801987c:	e7f1      	b.n	8019862 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801987e:	2000      	movs	r0, #0
 8019880:	e7ef      	b.n	8019862 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019882:	bf00      	nop
 8019884:	0802b8d3 	.word	0x0802b8d3
 8019888:	0802bc68 	.word	0x0802bc68
 801988c:	0802b7da 	.word	0x0802b7da

08019890 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8019890:	b570      	push	{r4, r5, r6, lr}
 8019892:	460d      	mov	r5, r1
 8019894:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8019898:	4616      	mov	r6, r2
 801989a:	461c      	mov	r4, r3
 801989c:	f7ff ffd4 	bl	8019848 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80198a0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80198a4:	10c0      	asrs	r0, r0, #3
 80198a6:	fb06 5101 	mla	r1, r6, r1, r5
 80198aa:	fb00 4001 	mla	r0, r0, r1, r4
 80198ae:	bd70      	pop	{r4, r5, r6, pc}

080198b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80198b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198b4:	b08a      	sub	sp, #40	; 0x28
 80198b6:	f04f 0c00 	mov.w	ip, #0
 80198ba:	4604      	mov	r4, r0
 80198bc:	469a      	mov	sl, r3
 80198be:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80198c2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80198c6:	f1b8 0f02 	cmp.w	r8, #2
 80198ca:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80198ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80198d2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80198d6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80198da:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80198de:	f8cd c020 	str.w	ip, [sp, #32]
 80198e2:	d030      	beq.n	8019946 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80198e4:	2bff      	cmp	r3, #255	; 0xff
 80198e6:	d12c      	bne.n	8019942 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80198e8:	4560      	cmp	r0, ip
 80198ea:	bf14      	ite	ne
 80198ec:	2004      	movne	r0, #4
 80198ee:	2001      	moveq	r0, #1
 80198f0:	9204      	str	r2, [sp, #16]
 80198f2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80198f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80198fa:	f8ad 201c 	strh.w	r2, [sp, #28]
 80198fe:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019902:	f8ad 501a 	strh.w	r5, [sp, #26]
 8019906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801990a:	4620      	mov	r0, r4
 801990c:	f7ff ff5e 	bl	80197cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019910:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8019914:	4603      	mov	r3, r0
 8019916:	4651      	mov	r1, sl
 8019918:	4620      	mov	r0, r4
 801991a:	e9cd 9700 	strd	r9, r7, [sp]
 801991e:	f7ff ffb7 	bl	8019890 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019922:	f8ad 901e 	strh.w	r9, [sp, #30]
 8019926:	9005      	str	r0, [sp, #20]
 8019928:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801992c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8019930:	b106      	cbz	r6, 8019934 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8019932:	b98d      	cbnz	r5, 8019958 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8019934:	4b12      	ldr	r3, [pc, #72]	; (8019980 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8019936:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801993a:	4a12      	ldr	r2, [pc, #72]	; (8019984 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801993c:	4812      	ldr	r0, [pc, #72]	; (8019988 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801993e:	f00e fe31 	bl	80285a4 <__assert_func>
 8019942:	2004      	movs	r0, #4
 8019944:	e7d4      	b.n	80198f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019946:	2bff      	cmp	r3, #255	; 0xff
 8019948:	d104      	bne.n	8019954 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801994a:	2800      	cmp	r0, #0
 801994c:	bf14      	ite	ne
 801994e:	2040      	movne	r0, #64	; 0x40
 8019950:	2020      	moveq	r0, #32
 8019952:	e7cd      	b.n	80198f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019954:	2040      	movs	r0, #64	; 0x40
 8019956:	e7cb      	b.n	80198f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019958:	6823      	ldr	r3, [r4, #0]
 801995a:	4620      	mov	r0, r4
 801995c:	9d02      	ldr	r5, [sp, #8]
 801995e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019960:	4798      	blx	r3
 8019962:	4228      	tst	r0, r5
 8019964:	d104      	bne.n	8019970 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8019966:	4b09      	ldr	r3, [pc, #36]	; (801998c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8019968:	f240 11b1 	movw	r1, #433	; 0x1b1
 801996c:	4a05      	ldr	r2, [pc, #20]	; (8019984 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801996e:	e7e5      	b.n	801993c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8019970:	6860      	ldr	r0, [r4, #4]
 8019972:	a902      	add	r1, sp, #8
 8019974:	6803      	ldr	r3, [r0, #0]
 8019976:	685b      	ldr	r3, [r3, #4]
 8019978:	4798      	blx	r3
 801997a:	b00a      	add	sp, #40	; 0x28
 801997c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019980:	0802b856 	.word	0x0802b856
 8019984:	0802bb0a 	.word	0x0802bb0a
 8019988:	0802b7da 	.word	0x0802b7da
 801998c:	0802b88e 	.word	0x0802b88e

08019990 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8019990:	b510      	push	{r4, lr}
 8019992:	b08a      	sub	sp, #40	; 0x28
 8019994:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8019998:	9408      	str	r4, [sp, #32]
 801999a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801999e:	9407      	str	r4, [sp, #28]
 80199a0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80199a4:	9406      	str	r4, [sp, #24]
 80199a6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80199aa:	9405      	str	r4, [sp, #20]
 80199ac:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80199b0:	9404      	str	r4, [sp, #16]
 80199b2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80199b6:	9403      	str	r4, [sp, #12]
 80199b8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80199bc:	9402      	str	r4, [sp, #8]
 80199be:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80199c2:	e9cd 3400 	strd	r3, r4, [sp]
 80199c6:	4613      	mov	r3, r2
 80199c8:	2200      	movs	r2, #0
 80199ca:	f7ff ff71 	bl	80198b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80199ce:	b00a      	add	sp, #40	; 0x28
 80199d0:	bd10      	pop	{r4, pc}
	...

080199d4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80199d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199d6:	b08b      	sub	sp, #44	; 0x2c
 80199d8:	4616      	mov	r6, r2
 80199da:	460d      	mov	r5, r1
 80199dc:	461f      	mov	r7, r3
 80199de:	4604      	mov	r4, r0
 80199e0:	f7f7 f9c6 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 80199e4:	6803      	ldr	r3, [r0, #0]
 80199e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199e8:	4798      	blx	r3
 80199ea:	4b0e      	ldr	r3, [pc, #56]	; (8019a24 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80199ec:	2200      	movs	r2, #0
 80199ee:	4629      	mov	r1, r5
 80199f0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80199f4:	881b      	ldrh	r3, [r3, #0]
 80199f6:	4620      	mov	r0, r4
 80199f8:	9306      	str	r3, [sp, #24]
 80199fa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80199fe:	9305      	str	r3, [sp, #20]
 8019a00:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019a04:	9304      	str	r3, [sp, #16]
 8019a06:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019a0a:	9303      	str	r3, [sp, #12]
 8019a0c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019a10:	9302      	str	r3, [sp, #8]
 8019a12:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019a16:	e9cd 7300 	strd	r7, r3, [sp]
 8019a1a:	4633      	mov	r3, r6
 8019a1c:	f7ff ff48 	bl	80198b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019a20:	b00b      	add	sp, #44	; 0x2c
 8019a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a24:	2000bee8 	.word	0x2000bee8

08019a28 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8019a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a2c:	461f      	mov	r7, r3
 8019a2e:	4b14      	ldr	r3, [pc, #80]	; (8019a80 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8019a30:	b08a      	sub	sp, #40	; 0x28
 8019a32:	4616      	mov	r6, r2
 8019a34:	f8b3 8000 	ldrh.w	r8, [r3]
 8019a38:	460d      	mov	r5, r1
 8019a3a:	4604      	mov	r4, r0
 8019a3c:	f7f7 f998 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8019a40:	6803      	ldr	r3, [r0, #0]
 8019a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a44:	4798      	blx	r3
 8019a46:	2302      	movs	r3, #2
 8019a48:	9008      	str	r0, [sp, #32]
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	4629      	mov	r1, r5
 8019a4e:	4620      	mov	r0, r4
 8019a50:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8019a54:	2301      	movs	r3, #1
 8019a56:	9305      	str	r3, [sp, #20]
 8019a58:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019a5c:	9304      	str	r3, [sp, #16]
 8019a5e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019a62:	9303      	str	r3, [sp, #12]
 8019a64:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019a68:	9302      	str	r3, [sp, #8]
 8019a6a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019a6e:	e9cd 7300 	strd	r7, r3, [sp]
 8019a72:	4633      	mov	r3, r6
 8019a74:	f7ff ff1c 	bl	80198b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019a78:	b00a      	add	sp, #40	; 0x28
 8019a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a7e:	bf00      	nop
 8019a80:	2000bee8 	.word	0x2000bee8

08019a84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8019a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a88:	b08b      	sub	sp, #44	; 0x2c
 8019a8a:	469b      	mov	fp, r3
 8019a8c:	4604      	mov	r4, r0
 8019a8e:	4692      	mov	sl, r2
 8019a90:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8019a94:	2600      	movs	r6, #0
 8019a96:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8019a9a:	4689      	mov	r9, r1
 8019a9c:	2fff      	cmp	r7, #255	; 0xff
 8019a9e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8019aa2:	9608      	str	r6, [sp, #32]
 8019aa4:	bf14      	ite	ne
 8019aa6:	2308      	movne	r3, #8
 8019aa8:	2302      	moveq	r3, #2
 8019aaa:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8019aae:	f7ff fe8d 	bl	80197cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019ab2:	465a      	mov	r2, fp
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	4651      	mov	r1, sl
 8019ab8:	4620      	mov	r0, r4
 8019aba:	e9cd 8500 	strd	r8, r5, [sp]
 8019abe:	f7ff fee7 	bl	8019890 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019ac2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019ac6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8019aca:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019ace:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019ad2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8019ad6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019ada:	6823      	ldr	r3, [r4, #0]
 8019adc:	9d02      	ldr	r5, [sp, #8]
 8019ade:	9005      	str	r0, [sp, #20]
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	f8ad 601c 	strh.w	r6, [sp, #28]
 8019ae6:	f8ad 801e 	strh.w	r8, [sp, #30]
 8019aea:	f8cd 9020 	str.w	r9, [sp, #32]
 8019aee:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8019af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019af4:	4798      	blx	r3
 8019af6:	4228      	tst	r0, r5
 8019af8:	d106      	bne.n	8019b08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8019afa:	4b07      	ldr	r3, [pc, #28]	; (8019b18 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8019afc:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8019b00:	4a06      	ldr	r2, [pc, #24]	; (8019b1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8019b02:	4807      	ldr	r0, [pc, #28]	; (8019b20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8019b04:	f00e fd4e 	bl	80285a4 <__assert_func>
 8019b08:	6860      	ldr	r0, [r4, #4]
 8019b0a:	a902      	add	r1, sp, #8
 8019b0c:	6803      	ldr	r3, [r0, #0]
 8019b0e:	685b      	ldr	r3, [r3, #4]
 8019b10:	4798      	blx	r3
 8019b12:	b00b      	add	sp, #44	; 0x2c
 8019b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b18:	0802b88e 	.word	0x0802b88e
 8019b1c:	0802bbd3 	.word	0x0802bbd3
 8019b20:	0802b7da 	.word	0x0802b7da

08019b24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019b24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019b28:	461f      	mov	r7, r3
 8019b2a:	4b0b      	ldr	r3, [pc, #44]	; (8019b58 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019b2c:	460d      	mov	r5, r1
 8019b2e:	4616      	mov	r6, r2
 8019b30:	f8b3 8000 	ldrh.w	r8, [r3]
 8019b34:	4604      	mov	r4, r0
 8019b36:	f7f7 f91b 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8019b3a:	6803      	ldr	r3, [r0, #0]
 8019b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b3e:	4798      	blx	r3
 8019b40:	463b      	mov	r3, r7
 8019b42:	4632      	mov	r2, r6
 8019b44:	4629      	mov	r1, r5
 8019b46:	e9cd 8000 	strd	r8, r0, [sp]
 8019b4a:	4620      	mov	r0, r4
 8019b4c:	f7ff fea0 	bl	8019890 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019b50:	b002      	add	sp, #8
 8019b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b56:	bf00      	nop
 8019b58:	2000bee8 	.word	0x2000bee8

08019b5c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8019b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b60:	4698      	mov	r8, r3
 8019b62:	b088      	sub	sp, #32
 8019b64:	2300      	movs	r3, #0
 8019b66:	4617      	mov	r7, r2
 8019b68:	4604      	mov	r4, r0
 8019b6a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8019b6e:	9306      	str	r3, [sp, #24]
 8019b70:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019b74:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019b78:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019b7c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8019b80:	e9cd 3100 	strd	r3, r1, [sp]
 8019b84:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019b88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019b8c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019b90:	f88d 301c 	strb.w	r3, [sp, #28]
 8019b94:	f7ff fe1a 	bl	80197cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019b98:	4642      	mov	r2, r8
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	4639      	mov	r1, r7
 8019b9e:	4620      	mov	r0, r4
 8019ba0:	f7ff ffc0 	bl	8019b24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019ba4:	4b16      	ldr	r3, [pc, #88]	; (8019c00 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8019ba6:	9003      	str	r0, [sp, #12]
 8019ba8:	881b      	ldrh	r3, [r3, #0]
 8019baa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019bae:	f7f7 f8df 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8019bb2:	6803      	ldr	r3, [r0, #0]
 8019bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bb6:	4798      	blx	r3
 8019bb8:	f88d 001e 	strb.w	r0, [sp, #30]
 8019bbc:	f88d 001d 	strb.w	r0, [sp, #29]
 8019bc0:	b106      	cbz	r6, 8019bc4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8019bc2:	b935      	cbnz	r5, 8019bd2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8019bc4:	4b0f      	ldr	r3, [pc, #60]	; (8019c04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8019bc6:	f240 11cd 	movw	r1, #461	; 0x1cd
 8019bca:	4a0f      	ldr	r2, [pc, #60]	; (8019c08 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8019bcc:	480f      	ldr	r0, [pc, #60]	; (8019c0c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8019bce:	f00e fce9 	bl	80285a4 <__assert_func>
 8019bd2:	6823      	ldr	r3, [r4, #0]
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	9d00      	ldr	r5, [sp, #0]
 8019bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bda:	4798      	blx	r3
 8019bdc:	4228      	tst	r0, r5
 8019bde:	d104      	bne.n	8019bea <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8019be0:	4b0b      	ldr	r3, [pc, #44]	; (8019c10 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8019be2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8019be6:	4a08      	ldr	r2, [pc, #32]	; (8019c08 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8019be8:	e7f0      	b.n	8019bcc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8019bea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019bec:	4669      	mov	r1, sp
 8019bee:	6860      	ldr	r0, [r4, #4]
 8019bf0:	9306      	str	r3, [sp, #24]
 8019bf2:	6803      	ldr	r3, [r0, #0]
 8019bf4:	685b      	ldr	r3, [r3, #4]
 8019bf6:	4798      	blx	r3
 8019bf8:	b008      	add	sp, #32
 8019bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bfe:	bf00      	nop
 8019c00:	2000bee8 	.word	0x2000bee8
 8019c04:	0802b856 	.word	0x0802b856
 8019c08:	0802b9bc 	.word	0x0802b9bc
 8019c0c:	0802b7da 	.word	0x0802b7da
 8019c10:	0802b88e 	.word	0x0802b88e

08019c14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019c14:	b570      	push	{r4, r5, r6, lr}
 8019c16:	b08a      	sub	sp, #40	; 0x28
 8019c18:	4604      	mov	r4, r0
 8019c1a:	466b      	mov	r3, sp
 8019c1c:	e883 0006 	stmia.w	r3, {r1, r2}
 8019c20:	4b1f      	ldr	r3, [pc, #124]	; (8019ca0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8019c22:	781b      	ldrb	r3, [r3, #0]
 8019c24:	b933      	cbnz	r3, 8019c34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8019c26:	4b1f      	ldr	r3, [pc, #124]	; (8019ca4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8019c28:	f240 11f9 	movw	r1, #505	; 0x1f9
 8019c2c:	4a1e      	ldr	r2, [pc, #120]	; (8019ca8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8019c2e:	481f      	ldr	r0, [pc, #124]	; (8019cac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8019c30:	f00e fcb8 	bl	80285a4 <__assert_func>
 8019c34:	2300      	movs	r3, #0
 8019c36:	f8bd 5000 	ldrh.w	r5, [sp]
 8019c3a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8019c3e:	9308      	str	r3, [sp, #32]
 8019c40:	2301      	movs	r3, #1
 8019c42:	9302      	str	r3, [sp, #8]
 8019c44:	6803      	ldr	r3, [r0, #0]
 8019c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c48:	4798      	blx	r3
 8019c4a:	4632      	mov	r2, r6
 8019c4c:	4629      	mov	r1, r5
 8019c4e:	4603      	mov	r3, r0
 8019c50:	4620      	mov	r0, r4
 8019c52:	f7ff ff67 	bl	8019b24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019c56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019c58:	9003      	str	r0, [sp, #12]
 8019c5a:	9305      	str	r3, [sp, #20]
 8019c5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019c60:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019c64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019c68:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019c6c:	4b10      	ldr	r3, [pc, #64]	; (8019cb0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8019c6e:	881b      	ldrh	r3, [r3, #0]
 8019c70:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019c74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019c78:	f7f7 f87a 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8019c7c:	6803      	ldr	r3, [r0, #0]
 8019c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c80:	4798      	blx	r3
 8019c82:	23ff      	movs	r3, #255	; 0xff
 8019c84:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019c88:	a902      	add	r1, sp, #8
 8019c8a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019c8e:	6860      	ldr	r0, [r4, #4]
 8019c90:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019c94:	6803      	ldr	r3, [r0, #0]
 8019c96:	685b      	ldr	r3, [r3, #4]
 8019c98:	4798      	blx	r3
 8019c9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019c9c:	b00a      	add	sp, #40	; 0x28
 8019c9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ca0:	2000beed 	.word	0x2000beed
 8019ca4:	0802b727 	.word	0x0802b727
 8019ca8:	0802ba60 	.word	0x0802ba60
 8019cac:	0802b7da 	.word	0x0802b7da
 8019cb0:	2000bee8 	.word	0x2000bee8

08019cb4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cb6:	b08b      	sub	sp, #44	; 0x2c
 8019cb8:	4604      	mov	r4, r0
 8019cba:	466d      	mov	r5, sp
 8019cbc:	e885 0006 	stmia.w	r5, {r1, r2}
 8019cc0:	461d      	mov	r5, r3
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	f8bd 6000 	ldrh.w	r6, [sp]
 8019cc8:	9308      	str	r3, [sp, #32]
 8019cca:	2301      	movs	r3, #1
 8019ccc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019cd0:	9302      	str	r3, [sp, #8]
 8019cd2:	6803      	ldr	r3, [r0, #0]
 8019cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cd6:	4798      	blx	r3
 8019cd8:	463a      	mov	r2, r7
 8019cda:	4631      	mov	r1, r6
 8019cdc:	4603      	mov	r3, r0
 8019cde:	4620      	mov	r0, r4
 8019ce0:	f7ff ff20 	bl	8019b24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019ce4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019ce8:	9003      	str	r0, [sp, #12]
 8019cea:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019cee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019cf2:	9505      	str	r5, [sp, #20]
 8019cf4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019cf8:	4b0d      	ldr	r3, [pc, #52]	; (8019d30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8019cfa:	881b      	ldrh	r3, [r3, #0]
 8019cfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019d00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d02:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019d06:	f7f7 f833 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8019d0a:	6803      	ldr	r3, [r0, #0]
 8019d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d0e:	4798      	blx	r3
 8019d10:	23ff      	movs	r3, #255	; 0xff
 8019d12:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019d16:	a902      	add	r1, sp, #8
 8019d18:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019d1c:	6860      	ldr	r0, [r4, #4]
 8019d1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019d22:	6803      	ldr	r3, [r0, #0]
 8019d24:	685b      	ldr	r3, [r3, #4]
 8019d26:	4798      	blx	r3
 8019d28:	4628      	mov	r0, r5
 8019d2a:	b00b      	add	sp, #44	; 0x2c
 8019d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d2e:	bf00      	nop
 8019d30:	2000bee8 	.word	0x2000bee8

08019d34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019d34:	b570      	push	{r4, r5, r6, lr}
 8019d36:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019d3a:	4604      	mov	r4, r0
 8019d3c:	b19b      	cbz	r3, 8019d66 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019d3e:	2002      	movs	r0, #2
 8019d40:	f7fc fbd4 	bl	80164ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019d44:	2300      	movs	r3, #0
 8019d46:	4620      	mov	r0, r4
 8019d48:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019d4c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019d50:	6823      	ldr	r3, [r4, #0]
 8019d52:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8019d56:	f7ff fd39 	bl	80197cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019d5a:	4601      	mov	r1, r0
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	462b      	mov	r3, r5
 8019d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d64:	4718      	bx	r3
 8019d66:	bd70      	pop	{r4, r5, r6, pc}

08019d68 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019d68:	4770      	bx	lr

08019d6a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019d6a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8019d6e:	1a13      	subs	r3, r2, r0
 8019d70:	4258      	negs	r0, r3
 8019d72:	4158      	adcs	r0, r3
 8019d74:	4770      	bx	lr

08019d76 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019d76:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019d7a:	1a9b      	subs	r3, r3, r2
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	bfdc      	itt	le
 8019d80:	6882      	ldrle	r2, [r0, #8]
 8019d82:	189b      	addle	r3, r3, r2
 8019d84:	2b01      	cmp	r3, #1
 8019d86:	bfcc      	ite	gt
 8019d88:	2000      	movgt	r0, #0
 8019d8a:	2001      	movle	r0, #1
 8019d8c:	4770      	bx	lr

08019d8e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019d8e:	6902      	ldr	r2, [r0, #16]
 8019d90:	6840      	ldr	r0, [r0, #4]
 8019d92:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019d96:	4770      	bx	lr

08019d98 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019d98:	6803      	ldr	r3, [r0, #0]
 8019d9a:	691b      	ldr	r3, [r3, #16]
 8019d9c:	4718      	bx	r3

08019d9e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019d9e:	4770      	bx	lr

08019da0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019da0:	4770      	bx	lr
	...

08019da4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019da4:	2301      	movs	r3, #1
 8019da6:	b570      	push	{r4, r5, r6, lr}
 8019da8:	7203      	strb	r3, [r0, #8]
 8019daa:	4604      	mov	r4, r0
 8019dac:	6840      	ldr	r0, [r0, #4]
 8019dae:	6803      	ldr	r3, [r0, #0]
 8019db0:	699b      	ldr	r3, [r3, #24]
 8019db2:	4798      	blx	r3
 8019db4:	6803      	ldr	r3, [r0, #0]
 8019db6:	4605      	mov	r5, r0
 8019db8:	2b08      	cmp	r3, #8
 8019dba:	d01e      	beq.n	8019dfa <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8019dbc:	d80b      	bhi.n	8019dd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019dbe:	2b02      	cmp	r3, #2
 8019dc0:	d027      	beq.n	8019e12 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019dc2:	2b04      	cmp	r3, #4
 8019dc4:	d011      	beq.n	8019dea <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019dc6:	2b01      	cmp	r3, #1
 8019dc8:	d028      	beq.n	8019e1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019dca:	4b17      	ldr	r3, [pc, #92]	; (8019e28 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8019dcc:	218b      	movs	r1, #139	; 0x8b
 8019dce:	4a17      	ldr	r2, [pc, #92]	; (8019e2c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019dd0:	4817      	ldr	r0, [pc, #92]	; (8019e30 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8019dd2:	f00e fbe7 	bl	80285a4 <__assert_func>
 8019dd6:	2b40      	cmp	r3, #64	; 0x40
 8019dd8:	d020      	beq.n	8019e1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019dda:	d801      	bhi.n	8019de0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019ddc:	2b20      	cmp	r3, #32
 8019dde:	e7f3      	b.n	8019dc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019de0:	2b80      	cmp	r3, #128	; 0x80
 8019de2:	d01b      	beq.n	8019e1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019de8:	e7ee      	b.n	8019dc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019dea:	6823      	ldr	r3, [r4, #0]
 8019dec:	7f01      	ldrb	r1, [r0, #28]
 8019dee:	4620      	mov	r0, r4
 8019df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019df2:	4798      	blx	r3
 8019df4:	6823      	ldr	r3, [r4, #0]
 8019df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019df8:	e006      	b.n	8019e08 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019dfa:	6823      	ldr	r3, [r4, #0]
 8019dfc:	7f01      	ldrb	r1, [r0, #28]
 8019dfe:	4620      	mov	r0, r4
 8019e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e02:	4798      	blx	r3
 8019e04:	6823      	ldr	r3, [r4, #0]
 8019e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e08:	4629      	mov	r1, r5
 8019e0a:	4620      	mov	r0, r4
 8019e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e10:	4718      	bx	r3
 8019e12:	6823      	ldr	r3, [r4, #0]
 8019e14:	4620      	mov	r0, r4
 8019e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e18:	4798      	blx	r3
 8019e1a:	e7f3      	b.n	8019e04 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8019e1c:	6823      	ldr	r3, [r4, #0]
 8019e1e:	4620      	mov	r0, r4
 8019e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e22:	4798      	blx	r3
 8019e24:	e7e6      	b.n	8019df4 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8019e26:	bf00      	nop
 8019e28:	0802bcb1 	.word	0x0802bcb1
 8019e2c:	0802bdc0 	.word	0x0802bdc0
 8019e30:	0802bcd6 	.word	0x0802bcd6

08019e34 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019e34:	b570      	push	{r4, r5, r6, lr}
 8019e36:	4604      	mov	r4, r0
 8019e38:	460e      	mov	r6, r1
 8019e3a:	6860      	ldr	r0, [r4, #4]
 8019e3c:	6803      	ldr	r3, [r0, #0]
 8019e3e:	685b      	ldr	r3, [r3, #4]
 8019e40:	4798      	blx	r3
 8019e42:	2800      	cmp	r0, #0
 8019e44:	d1f9      	bne.n	8019e3a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019e46:	4d0b      	ldr	r5, [pc, #44]	; (8019e74 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8019e48:	6828      	ldr	r0, [r5, #0]
 8019e4a:	6803      	ldr	r3, [r0, #0]
 8019e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019e4e:	4798      	blx	r3
 8019e50:	f7fc fe00 	bl	8016a54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019e54:	6860      	ldr	r0, [r4, #4]
 8019e56:	4631      	mov	r1, r6
 8019e58:	6803      	ldr	r3, [r0, #0]
 8019e5a:	689b      	ldr	r3, [r3, #8]
 8019e5c:	4798      	blx	r3
 8019e5e:	6823      	ldr	r3, [r4, #0]
 8019e60:	4620      	mov	r0, r4
 8019e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e64:	4798      	blx	r3
 8019e66:	6828      	ldr	r0, [r5, #0]
 8019e68:	6803      	ldr	r3, [r0, #0]
 8019e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e70:	4718      	bx	r3
 8019e72:	bf00      	nop
 8019e74:	2000bef0 	.word	0x2000bef0

08019e78 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019e78:	b508      	push	{r3, lr}
 8019e7a:	f7fc fdcf 	bl	8016a1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019e82:	f7fc bdd9 	b.w	8016a38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019e86 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019e86:	b510      	push	{r4, lr}
 8019e88:	4604      	mov	r4, r0
 8019e8a:	6840      	ldr	r0, [r0, #4]
 8019e8c:	6803      	ldr	r3, [r0, #0]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	4798      	blx	r3
 8019e92:	b948      	cbnz	r0, 8019ea8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019e94:	7a63      	ldrb	r3, [r4, #9]
 8019e96:	b13b      	cbz	r3, 8019ea8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019e98:	7a23      	ldrb	r3, [r4, #8]
 8019e9a:	b92b      	cbnz	r3, 8019ea8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019e9c:	6823      	ldr	r3, [r4, #0]
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ea6:	4718      	bx	r3
 8019ea8:	bd10      	pop	{r4, pc}
	...

08019eac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019eac:	b510      	push	{r4, lr}
 8019eae:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8019eb2:	1b12      	subs	r2, r2, r4
 8019eb4:	2a00      	cmp	r2, #0
 8019eb6:	bfdc      	itt	le
 8019eb8:	6883      	ldrle	r3, [r0, #8]
 8019eba:	18d2      	addle	r2, r2, r3
 8019ebc:	2a01      	cmp	r2, #1
 8019ebe:	dd18      	ble.n	8019ef2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8019ec0:	6843      	ldr	r3, [r0, #4]
 8019ec2:	f101 021c 	add.w	r2, r1, #28
 8019ec6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8019eca:	f851 4b04 	ldr.w	r4, [r1], #4
 8019ece:	4291      	cmp	r1, r2
 8019ed0:	f843 4b04 	str.w	r4, [r3], #4
 8019ed4:	d1f9      	bne.n	8019eca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8019ed6:	880a      	ldrh	r2, [r1, #0]
 8019ed8:	801a      	strh	r2, [r3, #0]
 8019eda:	788a      	ldrb	r2, [r1, #2]
 8019edc:	709a      	strb	r2, [r3, #2]
 8019ede:	68c3      	ldr	r3, [r0, #12]
 8019ee0:	6882      	ldr	r2, [r0, #8]
 8019ee2:	f3bf 8f5b 	dmb	ish
 8019ee6:	3301      	adds	r3, #1
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	bfd8      	it	le
 8019eec:	1a9b      	suble	r3, r3, r2
 8019eee:	60c3      	str	r3, [r0, #12]
 8019ef0:	bd10      	pop	{r4, pc}
 8019ef2:	4b03      	ldr	r3, [pc, #12]	; (8019f00 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019ef4:	2139      	movs	r1, #57	; 0x39
 8019ef6:	4a03      	ldr	r2, [pc, #12]	; (8019f04 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8019ef8:	4803      	ldr	r0, [pc, #12]	; (8019f08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8019efa:	f00e fb53 	bl	80285a4 <__assert_func>
 8019efe:	bf00      	nop
 8019f00:	0802bcfc 	.word	0x0802bcfc
 8019f04:	0802bdf0 	.word	0x0802bdf0
 8019f08:	0802bcd6 	.word	0x0802bcd6

08019f0c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019f0c:	b510      	push	{r4, lr}
 8019f0e:	6803      	ldr	r3, [r0, #0]
 8019f10:	4604      	mov	r4, r0
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	4798      	blx	r3
 8019f16:	b128      	cbz	r0, 8019f24 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019f18:	4b07      	ldr	r3, [pc, #28]	; (8019f38 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8019f1a:	213f      	movs	r1, #63	; 0x3f
 8019f1c:	4a07      	ldr	r2, [pc, #28]	; (8019f3c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019f1e:	4808      	ldr	r0, [pc, #32]	; (8019f40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019f20:	f00e fb40 	bl	80285a4 <__assert_func>
 8019f24:	6923      	ldr	r3, [r4, #16]
 8019f26:	68a2      	ldr	r2, [r4, #8]
 8019f28:	f3bf 8f5b 	dmb	ish
 8019f2c:	3301      	adds	r3, #1
 8019f2e:	429a      	cmp	r2, r3
 8019f30:	bfd8      	it	le
 8019f32:	1a9b      	suble	r3, r3, r2
 8019f34:	6123      	str	r3, [r4, #16]
 8019f36:	bd10      	pop	{r4, pc}
 8019f38:	0802bd1f 	.word	0x0802bd1f
 8019f3c:	0802be3e 	.word	0x0802be3e
 8019f40:	0802bcd6 	.word	0x0802bcd6

08019f44 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019f44:	b570      	push	{r4, r5, r6, lr}
 8019f46:	4604      	mov	r4, r0
 8019f48:	6840      	ldr	r0, [r0, #4]
 8019f4a:	6803      	ldr	r3, [r0, #0]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	4798      	blx	r3
 8019f50:	4605      	mov	r5, r0
 8019f52:	b930      	cbnz	r0, 8019f62 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019f54:	7a23      	ldrb	r3, [r4, #8]
 8019f56:	b123      	cbz	r3, 8019f62 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019f58:	6860      	ldr	r0, [r4, #4]
 8019f5a:	6803      	ldr	r3, [r0, #0]
 8019f5c:	695b      	ldr	r3, [r3, #20]
 8019f5e:	4798      	blx	r3
 8019f60:	7225      	strb	r5, [r4, #8]
 8019f62:	6860      	ldr	r0, [r4, #4]
 8019f64:	6803      	ldr	r3, [r0, #0]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	4798      	blx	r3
 8019f6a:	b928      	cbnz	r0, 8019f78 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019f6c:	6823      	ldr	r3, [r4, #0]
 8019f6e:	4620      	mov	r0, r4
 8019f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f76:	4718      	bx	r3
 8019f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f7c:	f7fc bd76 	b.w	8016a6c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019f80 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019f80:	b510      	push	{r4, lr}
 8019f82:	6082      	str	r2, [r0, #8]
 8019f84:	2200      	movs	r2, #0
 8019f86:	4c03      	ldr	r4, [pc, #12]	; (8019f94 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019f88:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019f8c:	e9c0 4100 	strd	r4, r1, [r0]
 8019f90:	bd10      	pop	{r4, pc}
 8019f92:	bf00      	nop
 8019f94:	0802bda4 	.word	0x0802bda4

08019f98 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019f98:	6840      	ldr	r0, [r0, #4]
 8019f9a:	6803      	ldr	r3, [r0, #0]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	4718      	bx	r3

08019fa0 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8019fa0:	2001      	movs	r0, #1
 8019fa2:	4770      	bx	lr

08019fa4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8019fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fa8:	460d      	mov	r5, r1
 8019faa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019fae:	b085      	sub	sp, #20
 8019fb0:	4690      	mov	r8, r2
 8019fb2:	4411      	add	r1, r2
 8019fb4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019fb8:	4699      	mov	r9, r3
 8019fba:	6803      	ldr	r3, [r0, #0]
 8019fbc:	60c1      	str	r1, [r0, #12]
 8019fbe:	4604      	mov	r4, r0
 8019fc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019fc2:	440a      	add	r2, r1
 8019fc4:	6102      	str	r2, [r0, #16]
 8019fc6:	68db      	ldr	r3, [r3, #12]
 8019fc8:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8019fcc:	4798      	blx	r3
 8019fce:	2800      	cmp	r0, #0
 8019fd0:	d039      	beq.n	801a046 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8019fd2:	44c8      	add	r8, r9
 8019fd4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019fd8:	4445      	add	r5, r8
 8019fda:	6823      	ldr	r3, [r4, #0]
 8019fdc:	f10d 020f 	add.w	r2, sp, #15
 8019fe0:	a903      	add	r1, sp, #12
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	9200      	str	r2, [sp, #0]
 8019fe6:	f10d 020d 	add.w	r2, sp, #13
 8019fea:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8019fee:	f10d 030e 	add.w	r3, sp, #14
 8019ff2:	47c0      	blx	r8
 8019ff4:	b1f8      	cbz	r0, 801a036 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8019ff6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8019ffa:	7a20      	ldrb	r0, [r4, #8]
 8019ffc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801a000:	4358      	muls	r0, r3
 801a002:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801a006:	1c43      	adds	r3, r0, #1
 801a008:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a00c:	f817 0b01 	ldrb.w	r0, [r7], #1
 801a010:	121b      	asrs	r3, r3, #8
 801a012:	fb10 f003 	smulbb	r0, r0, r3
 801a016:	b283      	uxth	r3, r0
 801a018:	1c58      	adds	r0, r3, #1
 801a01a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a01e:	6823      	ldr	r3, [r4, #0]
 801a020:	1200      	asrs	r0, r0, #8
 801a022:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801a026:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801a02a:	28ff      	cmp	r0, #255	; 0xff
 801a02c:	d10e      	bne.n	801a04c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801a02e:	9100      	str	r1, [sp, #0]
 801a030:	4629      	mov	r1, r5
 801a032:	4620      	mov	r0, r4
 801a034:	47c0      	blx	r8
 801a036:	68e3      	ldr	r3, [r4, #12]
 801a038:	3e01      	subs	r6, #1
 801a03a:	f105 0503 	add.w	r5, r5, #3
 801a03e:	f103 0301 	add.w	r3, r3, #1
 801a042:	60e3      	str	r3, [r4, #12]
 801a044:	d1c9      	bne.n	8019fda <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801a046:	b005      	add	sp, #20
 801a048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a04c:	fa1f fc80 	uxth.w	ip, r0
 801a050:	43c0      	mvns	r0, r0
 801a052:	f895 e002 	ldrb.w	lr, [r5, #2]
 801a056:	fb12 f20c 	smulbb	r2, r2, ip
 801a05a:	b2c0      	uxtb	r0, r0
 801a05c:	fb13 f30c 	smulbb	r3, r3, ip
 801a060:	fb0e 2200 	mla	r2, lr, r0, r2
 801a064:	f895 e001 	ldrb.w	lr, [r5, #1]
 801a068:	fb11 f10c 	smulbb	r1, r1, ip
 801a06c:	fb0e 3300 	mla	r3, lr, r0, r3
 801a070:	f895 e000 	ldrb.w	lr, [r5]
 801a074:	b292      	uxth	r2, r2
 801a076:	b29b      	uxth	r3, r3
 801a078:	fb0e 1000 	mla	r0, lr, r0, r1
 801a07c:	1c59      	adds	r1, r3, #1
 801a07e:	b280      	uxth	r0, r0
 801a080:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a084:	1c51      	adds	r1, r2, #1
 801a086:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a08a:	1c41      	adds	r1, r0, #1
 801a08c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a090:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801a094:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a098:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a09c:	9000      	str	r0, [sp, #0]
 801a09e:	e7c7      	b.n	801a030 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

0801a0a0 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801a0a0:	f89d 0000 	ldrb.w	r0, [sp]
 801a0a4:	704b      	strb	r3, [r1, #1]
 801a0a6:	7008      	strb	r0, [r1, #0]
 801a0a8:	708a      	strb	r2, [r1, #2]
 801a0aa:	4770      	bx	lr

0801a0ac <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801a0ac:	4413      	add	r3, r2
 801a0ae:	7dc2      	ldrb	r2, [r0, #23]
 801a0b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a0b4:	4419      	add	r1, r3
 801a0b6:	7a03      	ldrb	r3, [r0, #8]
 801a0b8:	435a      	muls	r2, r3
 801a0ba:	1c53      	adds	r3, r2, #1
 801a0bc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a0c0:	121b      	asrs	r3, r3, #8
 801a0c2:	2bff      	cmp	r3, #255	; 0xff
 801a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0c6:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801a0ca:	d13e      	bne.n	801a14a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801a0cc:	4427      	add	r7, r4
 801a0ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a0d2:	3103      	adds	r1, #3
 801a0d4:	7d86      	ldrb	r6, [r0, #22]
 801a0d6:	2bff      	cmp	r3, #255	; 0xff
 801a0d8:	d10a      	bne.n	801a0f0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801a0da:	f801 6c03 	strb.w	r6, [r1, #-3]
 801a0de:	7d43      	ldrb	r3, [r0, #21]
 801a0e0:	f801 3c02 	strb.w	r3, [r1, #-2]
 801a0e4:	7d03      	ldrb	r3, [r0, #20]
 801a0e6:	f801 3c01 	strb.w	r3, [r1, #-1]
 801a0ea:	42a7      	cmp	r7, r4
 801a0ec:	d1ef      	bne.n	801a0ce <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801a0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0f0:	b29a      	uxth	r2, r3
 801a0f2:	43db      	mvns	r3, r3
 801a0f4:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801a0f8:	fb16 f602 	smulbb	r6, r6, r2
 801a0fc:	b2db      	uxtb	r3, r3
 801a0fe:	fb05 6503 	mla	r5, r5, r3, r6
 801a102:	b2ad      	uxth	r5, r5
 801a104:	1c6e      	adds	r6, r5, #1
 801a106:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801a10a:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801a10e:	fb16 f603 	smulbb	r6, r6, r3
 801a112:	122d      	asrs	r5, r5, #8
 801a114:	f801 5c03 	strb.w	r5, [r1, #-3]
 801a118:	7d45      	ldrb	r5, [r0, #21]
 801a11a:	fb05 6502 	mla	r5, r5, r2, r6
 801a11e:	b2ad      	uxth	r5, r5
 801a120:	1c6e      	adds	r6, r5, #1
 801a122:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801a126:	122d      	asrs	r5, r5, #8
 801a128:	f801 5c02 	strb.w	r5, [r1, #-2]
 801a12c:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801a130:	7d06      	ldrb	r6, [r0, #20]
 801a132:	fb15 f303 	smulbb	r3, r5, r3
 801a136:	fb06 3202 	mla	r2, r6, r2, r3
 801a13a:	b292      	uxth	r2, r2
 801a13c:	1c53      	adds	r3, r2, #1
 801a13e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a142:	1212      	asrs	r2, r2, #8
 801a144:	f801 2c01 	strb.w	r2, [r1, #-1]
 801a148:	e7cf      	b.n	801a0ea <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801a14a:	b2de      	uxtb	r6, r3
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d0ce      	beq.n	801a0ee <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801a150:	3103      	adds	r1, #3
 801a152:	4427      	add	r7, r4
 801a154:	f814 2b01 	ldrb.w	r2, [r4], #1
 801a158:	3103      	adds	r1, #3
 801a15a:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801a15e:	fb02 f306 	mul.w	r3, r2, r6
 801a162:	42bc      	cmp	r4, r7
 801a164:	f103 0201 	add.w	r2, r3, #1
 801a168:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a16c:	ea4f 2222 	mov.w	r2, r2, asr #8
 801a170:	b295      	uxth	r5, r2
 801a172:	ea6f 0202 	mvn.w	r2, r2
 801a176:	b2d3      	uxtb	r3, r2
 801a178:	7d82      	ldrb	r2, [r0, #22]
 801a17a:	fb1c fc03 	smulbb	ip, ip, r3
 801a17e:	fb02 c205 	mla	r2, r2, r5, ip
 801a182:	b292      	uxth	r2, r2
 801a184:	f102 0c01 	add.w	ip, r2, #1
 801a188:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a18c:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801a190:	fb1c fc03 	smulbb	ip, ip, r3
 801a194:	ea4f 2222 	mov.w	r2, r2, asr #8
 801a198:	f801 2c06 	strb.w	r2, [r1, #-6]
 801a19c:	7d42      	ldrb	r2, [r0, #21]
 801a19e:	fb02 c205 	mla	r2, r2, r5, ip
 801a1a2:	b292      	uxth	r2, r2
 801a1a4:	f102 0c01 	add.w	ip, r2, #1
 801a1a8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a1ac:	ea4f 2222 	mov.w	r2, r2, asr #8
 801a1b0:	f801 2c05 	strb.w	r2, [r1, #-5]
 801a1b4:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801a1b8:	f890 c014 	ldrb.w	ip, [r0, #20]
 801a1bc:	fb12 f303 	smulbb	r3, r2, r3
 801a1c0:	fb0c 3305 	mla	r3, ip, r5, r3
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	f103 0201 	add.w	r2, r3, #1
 801a1ca:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a1ce:	ea4f 2323 	mov.w	r3, r3, asr #8
 801a1d2:	f801 3c04 	strb.w	r3, [r1, #-4]
 801a1d6:	d1bd      	bne.n	801a154 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801a1d8:	e789      	b.n	801a0ee <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801a1da <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801a1da:	b510      	push	{r4, lr}
 801a1dc:	7d04      	ldrb	r4, [r0, #20]
 801a1de:	700c      	strb	r4, [r1, #0]
 801a1e0:	7d41      	ldrb	r1, [r0, #21]
 801a1e2:	7011      	strb	r1, [r2, #0]
 801a1e4:	7d82      	ldrb	r2, [r0, #22]
 801a1e6:	701a      	strb	r2, [r3, #0]
 801a1e8:	9b02      	ldr	r3, [sp, #8]
 801a1ea:	7dc2      	ldrb	r2, [r0, #23]
 801a1ec:	2001      	movs	r0, #1
 801a1ee:	701a      	strb	r2, [r3, #0]
 801a1f0:	bd10      	pop	{r4, pc}

0801a1f2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801a1f2:	b570      	push	{r4, r5, r6, lr}
 801a1f4:	4616      	mov	r6, r2
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	460d      	mov	r5, r1
 801a1fa:	f7f6 fdb9 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801a1fe:	6803      	ldr	r3, [r0, #0]
 801a200:	4629      	mov	r1, r5
 801a202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a204:	4798      	blx	r3
 801a206:	7520      	strb	r0, [r4, #20]
 801a208:	f7f6 fdb2 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801a20c:	6803      	ldr	r3, [r0, #0]
 801a20e:	4629      	mov	r1, r5
 801a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a212:	4798      	blx	r3
 801a214:	7560      	strb	r0, [r4, #21]
 801a216:	f7f6 fdab 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801a21a:	6803      	ldr	r3, [r0, #0]
 801a21c:	4629      	mov	r1, r5
 801a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a220:	4798      	blx	r3
 801a222:	75e6      	strb	r6, [r4, #23]
 801a224:	75a0      	strb	r0, [r4, #22]
 801a226:	bd70      	pop	{r4, r5, r6, pc}

0801a228 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a22a:	460e      	mov	r6, r1
 801a22c:	4617      	mov	r7, r2
 801a22e:	4604      	mov	r4, r0
 801a230:	f000 f832 	bl	801a298 <_ZN8touchgfx15AbstractPainterC1Ev>
 801a234:	4b12      	ldr	r3, [pc, #72]	; (801a280 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801a236:	6023      	str	r3, [r4, #0]
 801a238:	f7f6 fd9a 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801a23c:	6803      	ldr	r3, [r0, #0]
 801a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a240:	4798      	blx	r3
 801a242:	1e43      	subs	r3, r0, #1
 801a244:	425d      	negs	r5, r3
 801a246:	415d      	adcs	r5, r3
 801a248:	4b0e      	ldr	r3, [pc, #56]	; (801a284 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a24e:	b130      	cbz	r0, 801a25e <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801a250:	6803      	ldr	r3, [r0, #0]
 801a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a254:	4798      	blx	r3
 801a256:	2801      	cmp	r0, #1
 801a258:	bf08      	it	eq
 801a25a:	f045 0501 	orreq.w	r5, r5, #1
 801a25e:	b92d      	cbnz	r5, 801a26c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801a260:	4b09      	ldr	r3, [pc, #36]	; (801a288 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801a262:	2129      	movs	r1, #41	; 0x29
 801a264:	4a09      	ldr	r2, [pc, #36]	; (801a28c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801a266:	480a      	ldr	r0, [pc, #40]	; (801a290 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801a268:	f00e f99c 	bl	80285a4 <__assert_func>
 801a26c:	4b09      	ldr	r3, [pc, #36]	; (801a294 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801a26e:	4620      	mov	r0, r4
 801a270:	463a      	mov	r2, r7
 801a272:	4631      	mov	r1, r6
 801a274:	6023      	str	r3, [r4, #0]
 801a276:	f7ff ffbc 	bl	801a1f2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801a27a:	4620      	mov	r0, r4
 801a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a27e:	bf00      	nop
 801a280:	0802be78 	.word	0x0802be78
 801a284:	2000bef0 	.word	0x2000bef0
 801a288:	0802be90 	.word	0x0802be90
 801a28c:	0802bf54 	.word	0x0802bf54
 801a290:	0802beee 	.word	0x0802beee
 801a294:	0802bf3c 	.word	0x0802bf3c

0801a298 <_ZN8touchgfx15AbstractPainterC1Ev>:
 801a298:	4a03      	ldr	r2, [pc, #12]	; (801a2a8 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801a29a:	6002      	str	r2, [r0, #0]
 801a29c:	2200      	movs	r2, #0
 801a29e:	6042      	str	r2, [r0, #4]
 801a2a0:	22ff      	movs	r2, #255	; 0xff
 801a2a2:	7202      	strb	r2, [r0, #8]
 801a2a4:	4770      	bx	lr
 801a2a6:	bf00      	nop
 801a2a8:	0802bf98 	.word	0x0802bf98

0801a2ac <_ZN8touchgfx15AbstractPainterD1Ev>:
 801a2ac:	4770      	bx	lr

0801a2ae <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801a2ae:	8081      	strh	r1, [r0, #4]
 801a2b0:	80c2      	strh	r2, [r0, #6]
 801a2b2:	4770      	bx	lr

0801a2b4 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 801a2b4:	7201      	strb	r1, [r0, #8]
 801a2b6:	4770      	bx	lr

0801a2b8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801a2b8:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801a2bc:	4770      	bx	lr

0801a2be <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801a2be:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801a2c2:	4770      	bx	lr

0801a2c4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801a2c4:	6281      	str	r1, [r0, #40]	; 0x28
 801a2c6:	4770      	bx	lr

0801a2c8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a2c8:	b513      	push	{r0, r1, r4, lr}
 801a2ca:	6803      	ldr	r3, [r0, #0]
 801a2cc:	4604      	mov	r4, r0
 801a2ce:	4601      	mov	r1, r0
 801a2d0:	4668      	mov	r0, sp
 801a2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2d4:	4798      	blx	r3
 801a2d6:	6823      	ldr	r3, [r4, #0]
 801a2d8:	4669      	mov	r1, sp
 801a2da:	4620      	mov	r0, r4
 801a2dc:	691b      	ldr	r3, [r3, #16]
 801a2de:	4798      	blx	r3
 801a2e0:	b002      	add	sp, #8
 801a2e2:	bd10      	pop	{r4, pc}

0801a2e4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801a2e4:	b510      	push	{r4, lr}
 801a2e6:	2200      	movs	r2, #0
 801a2e8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a2ec:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801a2f0:	8002      	strh	r2, [r0, #0]
 801a2f2:	8042      	strh	r2, [r0, #2]
 801a2f4:	8084      	strh	r4, [r0, #4]
 801a2f6:	80c1      	strh	r1, [r0, #6]
 801a2f8:	bd10      	pop	{r4, pc}

0801a2fa <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	8002      	strh	r2, [r0, #0]
 801a2fe:	8042      	strh	r2, [r0, #2]
 801a300:	8082      	strh	r2, [r0, #4]
 801a302:	80c2      	strh	r2, [r0, #6]
 801a304:	4770      	bx	lr
	...

0801a308 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801a308:	b508      	push	{r3, lr}
 801a30a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a30c:	b928      	cbnz	r0, 801a31a <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801a30e:	4b03      	ldr	r3, [pc, #12]	; (801a31c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801a310:	2127      	movs	r1, #39	; 0x27
 801a312:	4a03      	ldr	r2, [pc, #12]	; (801a320 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801a314:	4803      	ldr	r0, [pc, #12]	; (801a324 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801a316:	f00e f945 	bl	80285a4 <__assert_func>
 801a31a:	bd08      	pop	{r3, pc}
 801a31c:	0802bfa4 	.word	0x0802bfa4
 801a320:	0802c088 	.word	0x0802c088
 801a324:	0802bfcb 	.word	0x0802bfcb

0801a328 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a32c:	b089      	sub	sp, #36	; 0x24
 801a32e:	4604      	mov	r4, r0
 801a330:	6808      	ldr	r0, [r1, #0]
 801a332:	f04f 0a00 	mov.w	sl, #0
 801a336:	6849      	ldr	r1, [r1, #4]
 801a338:	ab02      	add	r3, sp, #8
 801a33a:	f04f 0b01 	mov.w	fp, #1
 801a33e:	c303      	stmia	r3!, {r0, r1}
 801a340:	4b3f      	ldr	r3, [pc, #252]	; (801a440 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801a342:	4621      	mov	r1, r4
 801a344:	a804      	add	r0, sp, #16
 801a346:	781b      	ldrb	r3, [r3, #0]
 801a348:	2b01      	cmp	r3, #1
 801a34a:	6823      	ldr	r3, [r4, #0]
 801a34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a34e:	bf1f      	itttt	ne
 801a350:	f10d 0906 	addne.w	r9, sp, #6
 801a354:	ae03      	addne	r6, sp, #12
 801a356:	f10d 050e 	addne.w	r5, sp, #14
 801a35a:	f10d 080a 	addne.w	r8, sp, #10
 801a35e:	bf01      	itttt	eq
 801a360:	f10d 090e 	addeq.w	r9, sp, #14
 801a364:	f10d 0606 	addeq.w	r6, sp, #6
 801a368:	ad03      	addeq	r5, sp, #12
 801a36a:	f10d 0808 	addeq.w	r8, sp, #8
 801a36e:	4798      	blx	r3
 801a370:	f9b5 3000 	ldrsh.w	r3, [r5]
 801a374:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d056      	beq.n	801a42a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801a37c:	4293      	cmp	r3, r2
 801a37e:	bfa8      	it	ge
 801a380:	4613      	movge	r3, r2
 801a382:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a386:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801a38a:	2f00      	cmp	r7, #0
 801a38c:	dd34      	ble.n	801a3f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801a38e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801a392:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801a396:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801a39a:	4484      	add	ip, r0
 801a39c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a3a0:	f9b6 e000 	ldrsh.w	lr, [r6]
 801a3a4:	fa0f fc8c 	sxth.w	ip, ip
 801a3a8:	f9b9 1000 	ldrsh.w	r1, [r9]
 801a3ac:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a3b0:	4562      	cmp	r2, ip
 801a3b2:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a3b6:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a3ba:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a3be:	da29      	bge.n	801a414 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a3c0:	4472      	add	r2, lr
 801a3c2:	b212      	sxth	r2, r2
 801a3c4:	4290      	cmp	r0, r2
 801a3c6:	da25      	bge.n	801a414 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a3c8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a3cc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a3d0:	4402      	add	r2, r0
 801a3d2:	b212      	sxth	r2, r2
 801a3d4:	4293      	cmp	r3, r2
 801a3d6:	da1d      	bge.n	801a414 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a3d8:	440b      	add	r3, r1
 801a3da:	b21b      	sxth	r3, r3
 801a3dc:	4298      	cmp	r0, r3
 801a3de:	da19      	bge.n	801a414 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a3e0:	6823      	ldr	r3, [r4, #0]
 801a3e2:	a906      	add	r1, sp, #24
 801a3e4:	4620      	mov	r0, r4
 801a3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a3e8:	4798      	blx	r3
 801a3ea:	b998      	cbnz	r0, 801a414 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a3ec:	107f      	asrs	r7, r7, #1
 801a3ee:	f04f 0a01 	mov.w	sl, #1
 801a3f2:	f8ad 7006 	strh.w	r7, [sp, #6]
 801a3f6:	e7c6      	b.n	801a386 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a3f8:	d10c      	bne.n	801a414 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801a3fa:	f8ad b006 	strh.w	fp, [sp, #6]
 801a3fe:	f8b8 2000 	ldrh.w	r2, [r8]
 801a402:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801a406:	440a      	add	r2, r1
 801a408:	f8a8 2000 	strh.w	r2, [r8]
 801a40c:	882b      	ldrh	r3, [r5, #0]
 801a40e:	1a5b      	subs	r3, r3, r1
 801a410:	802b      	strh	r3, [r5, #0]
 801a412:	e7ad      	b.n	801a370 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a414:	f1ba 0f00 	cmp.w	sl, #0
 801a418:	d0f1      	beq.n	801a3fe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801a41a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801a41e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a422:	429a      	cmp	r2, r3
 801a424:	bf08      	it	eq
 801a426:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801a428:	e7e9      	b.n	801a3fe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801a42a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a42e:	429a      	cmp	r2, r3
 801a430:	bf04      	itt	eq
 801a432:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801a436:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801a438:	b009      	add	sp, #36	; 0x24
 801a43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a43e:	bf00      	nop
 801a440:	2000bee6 	.word	0x2000bee6

0801a444 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801a444:	2200      	movs	r2, #0
 801a446:	2101      	movs	r1, #1
 801a448:	8082      	strh	r2, [r0, #4]
 801a44a:	80c2      	strh	r2, [r0, #6]
 801a44c:	8102      	strh	r2, [r0, #8]
 801a44e:	8142      	strh	r2, [r0, #10]
 801a450:	8182      	strh	r2, [r0, #12]
 801a452:	81c2      	strh	r2, [r0, #14]
 801a454:	8202      	strh	r2, [r0, #16]
 801a456:	8242      	strh	r2, [r0, #18]
 801a458:	61c2      	str	r2, [r0, #28]
 801a45a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a45e:	6282      	str	r2, [r0, #40]	; 0x28
 801a460:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801a464:	4905      	ldr	r1, [pc, #20]	; (801a47c <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801a466:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a46a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a46e:	6001      	str	r1, [r0, #0]
 801a470:	8582      	strh	r2, [r0, #44]	; 0x2c
 801a472:	22ff      	movs	r2, #255	; 0xff
 801a474:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801a478:	4770      	bx	lr
 801a47a:	bf00      	nop
 801a47c:	0802c010 	.word	0x0802c010

0801a480 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801a480:	4770      	bx	lr

0801a482 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801a482:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801a486:	4602      	mov	r2, r0
 801a488:	cb03      	ldmia	r3!, {r0, r1}
 801a48a:	6010      	str	r0, [r2, #0]
 801a48c:	4610      	mov	r0, r2
 801a48e:	6051      	str	r1, [r2, #4]
 801a490:	4770      	bx	lr

0801a492 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a496:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801a49a:	b395      	cbz	r5, 801a502 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801a49c:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 801a4a0:	f1bc 0f00 	cmp.w	ip, #0
 801a4a4:	d02d      	beq.n	801a502 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801a4a6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a4aa:	f9b1 e000 	ldrsh.w	lr, [r1]
 801a4ae:	b354      	cbz	r4, 801a506 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801a4b0:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801a4b4:	b33f      	cbz	r7, 801a506 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801a4b6:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a4ba:	4475      	add	r5, lr
 801a4bc:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a4c0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a4c4:	45f0      	cmp	r8, lr
 801a4c6:	4646      	mov	r6, r8
 801a4c8:	4444      	add	r4, r8
 801a4ca:	bfa8      	it	ge
 801a4cc:	4676      	movge	r6, lr
 801a4ce:	4293      	cmp	r3, r2
 801a4d0:	4619      	mov	r1, r3
 801a4d2:	443b      	add	r3, r7
 801a4d4:	bfa8      	it	ge
 801a4d6:	4611      	movge	r1, r2
 801a4d8:	4462      	add	r2, ip
 801a4da:	b22d      	sxth	r5, r5
 801a4dc:	8006      	strh	r6, [r0, #0]
 801a4de:	b224      	sxth	r4, r4
 801a4e0:	8041      	strh	r1, [r0, #2]
 801a4e2:	b212      	sxth	r2, r2
 801a4e4:	b21b      	sxth	r3, r3
 801a4e6:	42a5      	cmp	r5, r4
 801a4e8:	bfac      	ite	ge
 801a4ea:	ebc6 0405 	rsbge	r4, r6, r5
 801a4ee:	ebc6 0404 	rsblt	r4, r6, r4
 801a4f2:	429a      	cmp	r2, r3
 801a4f4:	bfac      	ite	ge
 801a4f6:	ebc1 0302 	rsbge	r3, r1, r2
 801a4fa:	ebc1 0303 	rsblt	r3, r1, r3
 801a4fe:	8084      	strh	r4, [r0, #4]
 801a500:	80c3      	strh	r3, [r0, #6]
 801a502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a506:	f8a0 e000 	strh.w	lr, [r0]
 801a50a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a50e:	8043      	strh	r3, [r0, #2]
 801a510:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a514:	8083      	strh	r3, [r0, #4]
 801a516:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a51a:	e7f1      	b.n	801a500 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

0801a51c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801a51c:	b507      	push	{r0, r1, r2, lr}
 801a51e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a522:	ab01      	add	r3, sp, #4
 801a524:	6809      	ldr	r1, [r1, #0]
 801a526:	6800      	ldr	r0, [r0, #0]
 801a528:	f002 fd7d 	bl	801d026 <_ZN8touchgfx6muldivElllRl>
 801a52c:	b003      	add	sp, #12
 801a52e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801a534 <_ZN8touchgfx7CWRUtil4sineEi>:
 801a534:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801a538:	fb90 f3f2 	sdiv	r3, r0, r2
 801a53c:	fb03 0312 	mls	r3, r3, r2, r0
 801a540:	4413      	add	r3, r2
 801a542:	fb93 f0f2 	sdiv	r0, r3, r2
 801a546:	fb02 3010 	mls	r0, r2, r0, r3
 801a54a:	4b0a      	ldr	r3, [pc, #40]	; (801a574 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801a54c:	285a      	cmp	r0, #90	; 0x5a
 801a54e:	dc02      	bgt.n	801a556 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801a550:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a554:	4770      	bx	lr
 801a556:	28b4      	cmp	r0, #180	; 0xb4
 801a558:	dc02      	bgt.n	801a560 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801a55a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801a55e:	e7f7      	b.n	801a550 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801a560:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801a564:	bfd4      	ite	le
 801a566:	38b4      	suble	r0, #180	; 0xb4
 801a568:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801a56c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801a570:	4240      	negs	r0, r0
 801a572:	4770      	bx	lr
 801a574:	0802c132 	.word	0x0802c132

0801a578 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801a578:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801a57c:	f04f 0300 	mov.w	r3, #0
 801a580:	bf2c      	ite	cs
 801a582:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801a586:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801a58a:	1899      	adds	r1, r3, r2
 801a58c:	4288      	cmp	r0, r1
 801a58e:	bf24      	itt	cs
 801a590:	1853      	addcs	r3, r2, r1
 801a592:	1a40      	subcs	r0, r0, r1
 801a594:	0892      	lsrs	r2, r2, #2
 801a596:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a59a:	d1f6      	bne.n	801a58a <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801a59c:	4618      	mov	r0, r3
 801a59e:	4770      	bx	lr

0801a5a0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801a5a0:	2800      	cmp	r0, #0
 801a5a2:	b508      	push	{r3, lr}
 801a5a4:	da05      	bge.n	801a5b2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801a5a6:	4240      	negs	r0, r0
 801a5a8:	f7ff fffa 	bl	801a5a0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a5ac:	4240      	negs	r0, r0
 801a5ae:	b240      	sxtb	r0, r0
 801a5b0:	bd08      	pop	{r3, pc}
 801a5b2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a5b6:	dc11      	bgt.n	801a5dc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801a5b8:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801a5bc:	dd09      	ble.n	801a5d2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801a5be:	4340      	muls	r0, r0
 801a5c0:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801a5c4:	f7ff ffd8 	bl	801a578 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a5c8:	f7ff ffea 	bl	801a5a0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a5cc:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801a5d0:	e7ed      	b.n	801a5ae <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801a5d2:	3003      	adds	r0, #3
 801a5d4:	4b02      	ldr	r3, [pc, #8]	; (801a5e0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801a5d6:	10c0      	asrs	r0, r0, #3
 801a5d8:	5618      	ldrsb	r0, [r3, r0]
 801a5da:	e7e9      	b.n	801a5b0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801a5dc:	2000      	movs	r0, #0
 801a5de:	e7e7      	b.n	801a5b0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801a5e0:	0802c0d6 	.word	0x0802c0d6

0801a5e4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801a5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5e6:	460c      	mov	r4, r1
 801a5e8:	1e01      	subs	r1, r0, #0
 801a5ea:	4615      	mov	r5, r2
 801a5ec:	db01      	blt.n	801a5f2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801a5ee:	2c00      	cmp	r4, #0
 801a5f0:	da06      	bge.n	801a600 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801a5f2:	4b11      	ldr	r3, [pc, #68]	; (801a638 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801a5f4:	f240 3197 	movw	r1, #919	; 0x397
 801a5f8:	4a10      	ldr	r2, [pc, #64]	; (801a63c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801a5fa:	4811      	ldr	r0, [pc, #68]	; (801a640 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 801a5fc:	f00d ffd2 	bl	80285a4 <__assert_func>
 801a600:	428c      	cmp	r4, r1
 801a602:	dd06      	ble.n	801a612 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801a604:	4620      	mov	r0, r4
 801a606:	f7ff ffed 	bl	801a5e4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a60a:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801a60e:	b003      	add	sp, #12
 801a610:	bd30      	pop	{r4, r5, pc}
 801a612:	4349      	muls	r1, r1
 801a614:	fb04 1004 	mla	r0, r4, r4, r1
 801a618:	f7ff ffae 	bl	801a578 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a61c:	6028      	str	r0, [r5, #0]
 801a61e:	2800      	cmp	r0, #0
 801a620:	d0f5      	beq.n	801a60e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801a622:	4602      	mov	r2, r0
 801a624:	ab01      	add	r3, sp, #4
 801a626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a62a:	4620      	mov	r0, r4
 801a62c:	f002 fcfb 	bl	801d026 <_ZN8touchgfx6muldivElllRl>
 801a630:	f7ff ffb6 	bl	801a5a0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a634:	e7eb      	b.n	801a60e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801a636:	bf00      	nop
 801a638:	0802c1e8 	.word	0x0802c1e8
 801a63c:	0802c2b0 	.word	0x0802c2b0
 801a640:	0802c1f9 	.word	0x0802c1f9

0801a644 <_ZN8touchgfx4LineC1Ev>:
 801a644:	b510      	push	{r4, lr}
 801a646:	4604      	mov	r4, r0
 801a648:	f7ff fefc 	bl	801a444 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801a64c:	4b0c      	ldr	r3, [pc, #48]	; (801a680 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801a64e:	2220      	movs	r2, #32
 801a650:	4620      	mov	r0, r4
 801a652:	6023      	str	r3, [r4, #0]
 801a654:	2300      	movs	r3, #0
 801a656:	6422      	str	r2, [r4, #64]	; 0x40
 801a658:	2212      	movs	r2, #18
 801a65a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801a65e:	6722      	str	r2, [r4, #112]	; 0x70
 801a660:	60a3      	str	r3, [r4, #8]
 801a662:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801a666:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801a66a:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a66e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801a672:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801a676:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801a67a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801a67e:	bd10      	pop	{r4, pc}
 801a680:	0802c238 	.word	0x0802c238

0801a684 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a688:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801a68a:	b085      	sub	sp, #20
 801a68c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a68e:	4604      	mov	r4, r0
 801a690:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a692:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801a694:	1af6      	subs	r6, r6, r3
 801a696:	eba5 0502 	sub.w	r5, r5, r2
 801a69a:	f040 809b 	bne.w	801a7d4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801a69e:	b955      	cbnz	r5, 801a6b6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801a6a0:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801a6a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a6a8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a6ac:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a6b0:	b005      	add	sp, #20
 801a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6b6:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801a6ba:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801a6be:	f04f 0802 	mov.w	r8, #2
 801a6c2:	463a      	mov	r2, r7
 801a6c4:	4629      	mov	r1, r5
 801a6c6:	ab03      	add	r3, sp, #12
 801a6c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a6ca:	f002 fcac 	bl	801d026 <_ZN8touchgfx6muldivElllRl>
 801a6ce:	ab03      	add	r3, sp, #12
 801a6d0:	463a      	mov	r2, r7
 801a6d2:	4631      	mov	r1, r6
 801a6d4:	fb90 f5f8 	sdiv	r5, r0, r8
 801a6d8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a6da:	f002 fca4 	bl	801d026 <_ZN8touchgfx6muldivElllRl>
 801a6de:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801a6e2:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801a6e6:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801a6ea:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801a6ec:	fb90 f0f8 	sdiv	r0, r0, r8
 801a6f0:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801a6f4:	eba8 0305 	sub.w	r3, r8, r5
 801a6f8:	f1ba 0f00 	cmp.w	sl, #0
 801a6fc:	f040 80c3 	bne.w	801a886 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801a700:	64a3      	str	r3, [r4, #72]	; 0x48
 801a702:	19c3      	adds	r3, r0, r7
 801a704:	65a3      	str	r3, [r4, #88]	; 0x58
 801a706:	ebae 0305 	sub.w	r3, lr, r5
 801a70a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a70c:	eb00 030c 	add.w	r3, r0, ip
 801a710:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a712:	eb05 030e 	add.w	r3, r5, lr
 801a716:	6523      	str	r3, [r4, #80]	; 0x50
 801a718:	ebac 0300 	sub.w	r3, ip, r0
 801a71c:	6623      	str	r3, [r4, #96]	; 0x60
 801a71e:	eb05 0308 	add.w	r3, r5, r8
 801a722:	6563      	str	r3, [r4, #84]	; 0x54
 801a724:	1a3b      	subs	r3, r7, r0
 801a726:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801a728:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801a72c:	6663      	str	r3, [r4, #100]	; 0x64
 801a72e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801a732:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a734:	4632      	mov	r2, r6
 801a736:	9301      	str	r3, [sp, #4]
 801a738:	9100      	str	r1, [sp, #0]
 801a73a:	f859 bb04 	ldr.w	fp, [r9], #4
 801a73e:	9b00      	ldr	r3, [sp, #0]
 801a740:	455e      	cmp	r6, fp
 801a742:	bfa8      	it	ge
 801a744:	465e      	movge	r6, fp
 801a746:	455a      	cmp	r2, fp
 801a748:	bfb8      	it	lt
 801a74a:	465a      	movlt	r2, fp
 801a74c:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801a750:	4559      	cmp	r1, fp
 801a752:	bfa8      	it	ge
 801a754:	4659      	movge	r1, fp
 801a756:	455b      	cmp	r3, fp
 801a758:	bfb8      	it	lt
 801a75a:	465b      	movlt	r3, fp
 801a75c:	9300      	str	r3, [sp, #0]
 801a75e:	9b01      	ldr	r3, [sp, #4]
 801a760:	454b      	cmp	r3, r9
 801a762:	d1ea      	bne.n	801a73a <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801a764:	f04f 0b20 	mov.w	fp, #32
 801a768:	b209      	sxth	r1, r1
 801a76a:	b212      	sxth	r2, r2
 801a76c:	f1ba 0f01 	cmp.w	sl, #1
 801a770:	b236      	sxth	r6, r6
 801a772:	fb91 f9fb 	sdiv	r9, r1, fp
 801a776:	f9bd 1000 	ldrsh.w	r1, [sp]
 801a77a:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801a77e:	fb92 f2fb 	sdiv	r2, r2, fp
 801a782:	fb91 f1fb 	sdiv	r1, r1, fp
 801a786:	fb96 f6fb 	sdiv	r6, r6, fp
 801a78a:	f102 0201 	add.w	r2, r2, #1
 801a78e:	f101 0101 	add.w	r1, r1, #1
 801a792:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801a796:	eba1 0109 	sub.w	r1, r1, r9
 801a79a:	eba2 0606 	sub.w	r6, r2, r6
 801a79e:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801a7a2:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801a7a6:	d183      	bne.n	801a6b0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a7a8:	eba8 0305 	sub.w	r3, r8, r5
 801a7ac:	64a3      	str	r3, [r4, #72]	; 0x48
 801a7ae:	19c3      	adds	r3, r0, r7
 801a7b0:	65a3      	str	r3, [r4, #88]	; 0x58
 801a7b2:	ebae 0305 	sub.w	r3, lr, r5
 801a7b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a7b8:	eb00 030c 	add.w	r3, r0, ip
 801a7bc:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a7be:	eb05 030e 	add.w	r3, r5, lr
 801a7c2:	4445      	add	r5, r8
 801a7c4:	6523      	str	r3, [r4, #80]	; 0x50
 801a7c6:	ebac 0300 	sub.w	r3, ip, r0
 801a7ca:	1a38      	subs	r0, r7, r0
 801a7cc:	6565      	str	r5, [r4, #84]	; 0x54
 801a7ce:	6623      	str	r3, [r4, #96]	; 0x60
 801a7d0:	6660      	str	r0, [r4, #100]	; 0x64
 801a7d2:	e76d      	b.n	801a6b0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a7d4:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801a7d8:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801a7dc:	2d00      	cmp	r5, #0
 801a7de:	f43f af6e 	beq.w	801a6be <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a7e2:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801a7e6:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801a7ea:	fb93 f2f7 	sdiv	r2, r3, r7
 801a7ee:	fb07 3312 	mls	r3, r7, r2, r3
 801a7f2:	b34b      	cbz	r3, 801a848 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801a7f4:	fb97 f2f3 	sdiv	r2, r7, r3
 801a7f8:	fb03 7712 	mls	r7, r3, r2, r7
 801a7fc:	2f00      	cmp	r7, #0
 801a7fe:	d1f4      	bne.n	801a7ea <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801a800:	2b01      	cmp	r3, #1
 801a802:	f24b 5204 	movw	r2, #46340	; 0xb504
 801a806:	bf18      	it	ne
 801a808:	fb96 f6f3 	sdivne	r6, r6, r3
 801a80c:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801a810:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801a814:	bf18      	it	ne
 801a816:	fb95 f5f3 	sdivne	r5, r5, r3
 801a81a:	4291      	cmp	r1, r2
 801a81c:	dd16      	ble.n	801a84c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801a81e:	2d00      	cmp	r5, #0
 801a820:	da4d      	bge.n	801a8be <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801a822:	4b29      	ldr	r3, [pc, #164]	; (801a8c8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801a824:	429d      	cmp	r5, r3
 801a826:	da27      	bge.n	801a878 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801a828:	426a      	negs	r2, r5
 801a82a:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a82e:	fb91 f1f3 	sdiv	r1, r1, r3
 801a832:	fb92 f3f3 	sdiv	r3, r2, r3
 801a836:	4299      	cmp	r1, r3
 801a838:	bfcc      	ite	gt
 801a83a:	1c4b      	addgt	r3, r1, #1
 801a83c:	3301      	addle	r3, #1
 801a83e:	fb96 f6f3 	sdiv	r6, r6, r3
 801a842:	fb95 f5f3 	sdiv	r5, r5, r3
 801a846:	e00f      	b.n	801a868 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801a848:	463b      	mov	r3, r7
 801a84a:	e7d9      	b.n	801a800 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801a84c:	2d00      	cmp	r5, #0
 801a84e:	fb92 f2f1 	sdiv	r2, r2, r1
 801a852:	da13      	bge.n	801a87c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801a854:	4269      	negs	r1, r5
 801a856:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a85a:	fb93 f3f1 	sdiv	r3, r3, r1
 801a85e:	429a      	cmp	r2, r3
 801a860:	bfa8      	it	ge
 801a862:	461a      	movge	r2, r3
 801a864:	4356      	muls	r6, r2
 801a866:	4355      	muls	r5, r2
 801a868:	fb05 f005 	mul.w	r0, r5, r5
 801a86c:	fb06 0006 	mla	r0, r6, r6, r0
 801a870:	f7ff fe82 	bl	801a578 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a874:	4607      	mov	r7, r0
 801a876:	e722      	b.n	801a6be <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a878:	2200      	movs	r2, #0
 801a87a:	e7eb      	b.n	801a854 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801a87c:	4629      	mov	r1, r5
 801a87e:	e7ea      	b.n	801a856 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a880:	4629      	mov	r1, r5
 801a882:	2200      	movs	r2, #0
 801a884:	e7e7      	b.n	801a856 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a886:	1a1b      	subs	r3, r3, r0
 801a888:	64a3      	str	r3, [r4, #72]	; 0x48
 801a88a:	19c3      	adds	r3, r0, r7
 801a88c:	1b5b      	subs	r3, r3, r5
 801a88e:	65a3      	str	r3, [r4, #88]	; 0x58
 801a890:	ebae 0305 	sub.w	r3, lr, r5
 801a894:	4403      	add	r3, r0
 801a896:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a898:	eb00 030c 	add.w	r3, r0, ip
 801a89c:	442b      	add	r3, r5
 801a89e:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a8a0:	eb05 030e 	add.w	r3, r5, lr
 801a8a4:	4403      	add	r3, r0
 801a8a6:	6523      	str	r3, [r4, #80]	; 0x50
 801a8a8:	ebac 0300 	sub.w	r3, ip, r0
 801a8ac:	442b      	add	r3, r5
 801a8ae:	6623      	str	r3, [r4, #96]	; 0x60
 801a8b0:	eb05 0308 	add.w	r3, r5, r8
 801a8b4:	1a1b      	subs	r3, r3, r0
 801a8b6:	6563      	str	r3, [r4, #84]	; 0x54
 801a8b8:	1a3b      	subs	r3, r7, r0
 801a8ba:	1b5b      	subs	r3, r3, r5
 801a8bc:	e733      	b.n	801a726 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801a8be:	4295      	cmp	r5, r2
 801a8c0:	ddde      	ble.n	801a880 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801a8c2:	462a      	mov	r2, r5
 801a8c4:	e7b1      	b.n	801a82a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801a8c6:	bf00      	nop
 801a8c8:	ffff4afc 	.word	0xffff4afc

0801a8cc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801a8cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a8ce:	428b      	cmp	r3, r1
 801a8d0:	d102      	bne.n	801a8d8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801a8d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801a8d4:	4293      	cmp	r3, r2
 801a8d6:	d003      	beq.n	801a8e0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801a8d8:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801a8dc:	f7ff bed2 	b.w	801a684 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a8e0:	4770      	bx	lr

0801a8e2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801a8e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a8e4:	428b      	cmp	r3, r1
 801a8e6:	d102      	bne.n	801a8ee <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801a8e8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801a8ea:	4293      	cmp	r3, r2
 801a8ec:	d003      	beq.n	801a8f6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801a8ee:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801a8f2:	f7ff bec7 	b.w	801a684 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a8f6:	4770      	bx	lr

0801a8f8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801a8f8:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801a8fc:	f7ff bec2 	b.w	801a684 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801a900 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801a900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a904:	b0b3      	sub	sp, #204	; 0xcc
 801a906:	4604      	mov	r4, r0
 801a908:	460a      	mov	r2, r1
 801a90a:	4601      	mov	r1, r0
 801a90c:	a804      	add	r0, sp, #16
 801a90e:	ad32      	add	r5, sp, #200	; 0xc8
 801a910:	f00c fa7c 	bl	8026e0c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801a914:	2300      	movs	r3, #0
 801a916:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801a918:	f845 3dc4 	str.w	r3, [r5, #-196]!
 801a91c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a91e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a920:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a922:	1ac0      	subs	r0, r0, r3
 801a924:	eba1 0102 	sub.w	r1, r1, r2
 801a928:	d43c      	bmi.n	801a9a4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801a92a:	2900      	cmp	r1, #0
 801a92c:	462a      	mov	r2, r5
 801a92e:	db33      	blt.n	801a998 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801a930:	f7ff fe58 	bl	801a5e4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a934:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801a938:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801a93a:	a804      	add	r0, sp, #16
 801a93c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a93e:	f00c fc2e 	bl	802719e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801a942:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801a944:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801a946:	a804      	add	r0, sp, #16
 801a948:	f00c fbb8 	bl	80270bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a94c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a950:	2b01      	cmp	r3, #1
 801a952:	d137      	bne.n	801a9c4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a954:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a956:	2eb3      	cmp	r6, #179	; 0xb3
 801a958:	dc34      	bgt.n	801a9c4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a95a:	eba7 0906 	sub.w	r9, r7, r6
 801a95e:	4648      	mov	r0, r9
 801a960:	f7ff fde8 	bl	801a534 <_ZN8touchgfx7CWRUtil4sineEi>
 801a964:	a902      	add	r1, sp, #8
 801a966:	9002      	str	r0, [sp, #8]
 801a968:	4628      	mov	r0, r5
 801a96a:	f7ff fdd7 	bl	801a51c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a96e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a970:	eb00 0801 	add.w	r8, r0, r1
 801a974:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a978:	f7ff fddc 	bl	801a534 <_ZN8touchgfx7CWRUtil4sineEi>
 801a97c:	a903      	add	r1, sp, #12
 801a97e:	9003      	str	r0, [sp, #12]
 801a980:	4628      	mov	r0, r5
 801a982:	f7ff fdcb 	bl	801a51c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a986:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a988:	4641      	mov	r1, r8
 801a98a:	1a12      	subs	r2, r2, r0
 801a98c:	a804      	add	r0, sp, #16
 801a98e:	f00c fb95 	bl	80270bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a992:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a994:	441e      	add	r6, r3
 801a996:	e7de      	b.n	801a956 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801a998:	4249      	negs	r1, r1
 801a99a:	f7ff fe23 	bl	801a5e4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a99e:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801a9a2:	e7c9      	b.n	801a938 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a9a4:	2900      	cmp	r1, #0
 801a9a6:	f1c0 0000 	rsb	r0, r0, #0
 801a9aa:	462a      	mov	r2, r5
 801a9ac:	db04      	blt.n	801a9b8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801a9ae:	f7ff fe19 	bl	801a5e4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a9b2:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801a9b6:	e7bf      	b.n	801a938 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a9b8:	4249      	negs	r1, r1
 801a9ba:	f7ff fe13 	bl	801a5e4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a9be:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801a9c2:	e7b9      	b.n	801a938 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a9c4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801a9c6:	a804      	add	r0, sp, #16
 801a9c8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a9ca:	f00c fb77 	bl	80270bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a9ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a9d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801a9d2:	a804      	add	r0, sp, #16
 801a9d4:	f00c fb72 	bl	80270bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a9d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a9dc:	2b01      	cmp	r3, #1
 801a9de:	d123      	bne.n	801aa28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a9e0:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a9e2:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801a9e6:	2e00      	cmp	r6, #0
 801a9e8:	dd1e      	ble.n	801aa28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a9ea:	eb06 0907 	add.w	r9, r6, r7
 801a9ee:	4648      	mov	r0, r9
 801a9f0:	f7ff fda0 	bl	801a534 <_ZN8touchgfx7CWRUtil4sineEi>
 801a9f4:	a902      	add	r1, sp, #8
 801a9f6:	9002      	str	r0, [sp, #8]
 801a9f8:	4628      	mov	r0, r5
 801a9fa:	f7ff fd8f 	bl	801a51c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a9fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801aa00:	eb00 0801 	add.w	r8, r0, r1
 801aa04:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801aa08:	f7ff fd94 	bl	801a534 <_ZN8touchgfx7CWRUtil4sineEi>
 801aa0c:	a903      	add	r1, sp, #12
 801aa0e:	9003      	str	r0, [sp, #12]
 801aa10:	4628      	mov	r0, r5
 801aa12:	f7ff fd83 	bl	801a51c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801aa16:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801aa18:	4641      	mov	r1, r8
 801aa1a:	1a12      	subs	r2, r2, r0
 801aa1c:	a804      	add	r0, sp, #16
 801aa1e:	f00c fb4d 	bl	80270bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801aa22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801aa24:	1af6      	subs	r6, r6, r3
 801aa26:	e7de      	b.n	801a9e6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801aa28:	a804      	add	r0, sp, #16
 801aa2a:	f00c fcbc 	bl	80273a6 <_ZN8touchgfx6Canvas6renderEv>
 801aa2e:	4604      	mov	r4, r0
 801aa30:	a804      	add	r0, sp, #16
 801aa32:	f00c fcf9 	bl	8027428 <_ZN8touchgfx6CanvasD1Ev>
 801aa36:	4620      	mov	r0, r4
 801aa38:	b033      	add	sp, #204	; 0xcc
 801aa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801aa3e <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801aa3e:	4770      	bx	lr

0801aa40 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801aa40:	6803      	ldr	r3, [r0, #0]
 801aa42:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801aa46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801aa48:	4718      	bx	r3

0801aa4a <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801aa4a:	b510      	push	{r4, lr}
 801aa4c:	4604      	mov	r4, r0
 801aa4e:	212c      	movs	r1, #44	; 0x2c
 801aa50:	f00d fd7a 	bl	8028548 <_ZdlPvj>
 801aa54:	4620      	mov	r0, r4
 801aa56:	bd10      	pop	{r4, pc}

0801aa58 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801aa58:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801aa5c:	2bff      	cmp	r3, #255	; 0xff
 801aa5e:	b510      	push	{r4, lr}
 801aa60:	d104      	bne.n	801aa6c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801aa62:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801aa64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa68:	429a      	cmp	r2, r3
 801aa6a:	d105      	bne.n	801aa78 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	8003      	strh	r3, [r0, #0]
 801aa70:	8043      	strh	r3, [r0, #2]
 801aa72:	8083      	strh	r3, [r0, #4]
 801aa74:	80c3      	strh	r3, [r0, #6]
 801aa76:	bd10      	pop	{r4, pc}
 801aa78:	2300      	movs	r3, #0
 801aa7a:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801aa7e:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801aa82:	8003      	strh	r3, [r0, #0]
 801aa84:	8043      	strh	r3, [r0, #2]
 801aa86:	8084      	strh	r4, [r0, #4]
 801aa88:	80c2      	strh	r2, [r0, #6]
 801aa8a:	e7f4      	b.n	801aa76 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801aa8c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801aa8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa90:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801aa94:	b087      	sub	sp, #28
 801aa96:	4604      	mov	r4, r0
 801aa98:	4689      	mov	r9, r1
 801aa9a:	b363      	cbz	r3, 801aaf6 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801aa9c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801aa9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aaa2:	429a      	cmp	r2, r3
 801aaa4:	d027      	beq.n	801aaf6 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801aaa6:	ad06      	add	r5, sp, #24
 801aaa8:	2700      	movs	r7, #0
 801aaaa:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801aaae:	4628      	mov	r0, r5
 801aab0:	f004 f826 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aab4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801aab8:	a904      	add	r1, sp, #16
 801aaba:	f8ad 0014 	strh.w	r0, [sp, #20]
 801aabe:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aac2:	4620      	mov	r0, r4
 801aac4:	6823      	ldr	r3, [r4, #0]
 801aac6:	9704      	str	r7, [sp, #16]
 801aac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aaca:	4798      	blx	r3
 801aacc:	f7f6 f950 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801aad0:	6803      	ldr	r3, [r0, #0]
 801aad2:	4606      	mov	r6, r0
 801aad4:	4628      	mov	r0, r5
 801aad6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801aada:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801aadc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801aae0:	f004 f916 	bl	801ed10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801aae4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801aae8:	4601      	mov	r1, r0
 801aaea:	9701      	str	r7, [sp, #4]
 801aaec:	aa04      	add	r2, sp, #16
 801aaee:	9300      	str	r3, [sp, #0]
 801aaf0:	4630      	mov	r0, r6
 801aaf2:	464b      	mov	r3, r9
 801aaf4:	47c0      	blx	r8
 801aaf6:	b007      	add	sp, #28
 801aaf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801aafc <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801aafc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801aafe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ab02:	460d      	mov	r5, r1
 801ab04:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801ab08:	2100      	movs	r1, #0
 801ab0a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ab0e:	4604      	mov	r4, r0
 801ab10:	6803      	ldr	r3, [r0, #0]
 801ab12:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ab16:	6a1b      	ldr	r3, [r3, #32]
 801ab18:	9100      	str	r1, [sp, #0]
 801ab1a:	4669      	mov	r1, sp
 801ab1c:	4798      	blx	r3
 801ab1e:	4621      	mov	r1, r4
 801ab20:	a802      	add	r0, sp, #8
 801ab22:	f002 f9e6 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ab26:	f7f6 f923 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801ab2a:	6803      	ldr	r3, [r0, #0]
 801ab2c:	aa02      	add	r2, sp, #8
 801ab2e:	4669      	mov	r1, sp
 801ab30:	699e      	ldr	r6, [r3, #24]
 801ab32:	462b      	mov	r3, r5
 801ab34:	47b0      	blx	r6
 801ab36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab3a:	2800      	cmp	r0, #0
 801ab3c:	bf08      	it	eq
 801ab3e:	461d      	moveq	r5, r3
 801ab40:	84e5      	strh	r5, [r4, #38]	; 0x26
 801ab42:	b004      	add	sp, #16
 801ab44:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ab48 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801ab48:	2200      	movs	r2, #0
 801ab4a:	8082      	strh	r2, [r0, #4]
 801ab4c:	80c2      	strh	r2, [r0, #6]
 801ab4e:	8102      	strh	r2, [r0, #8]
 801ab50:	8142      	strh	r2, [r0, #10]
 801ab52:	8182      	strh	r2, [r0, #12]
 801ab54:	81c2      	strh	r2, [r0, #14]
 801ab56:	8202      	strh	r2, [r0, #16]
 801ab58:	8242      	strh	r2, [r0, #18]
 801ab5a:	61c2      	str	r2, [r0, #28]
 801ab5c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801ab60:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ab64:	2201      	movs	r2, #1
 801ab66:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801ab6a:	4a04      	ldr	r2, [pc, #16]	; (801ab7c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801ab6c:	6002      	str	r2, [r0, #0]
 801ab6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ab72:	84c2      	strh	r2, [r0, #38]	; 0x26
 801ab74:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801ab78:	4770      	bx	lr
 801ab7a:	bf00      	nop
 801ab7c:	0802c324 	.word	0x0802c324

0801ab80 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801ab80:	b570      	push	{r4, r5, r6, lr}
 801ab82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab86:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ab88:	4604      	mov	r4, r0
 801ab8a:	429a      	cmp	r2, r3
 801ab8c:	d00c      	beq.n	801aba8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801ab8e:	f850 3b26 	ldr.w	r3, [r0], #38
 801ab92:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801ab94:	f7f7 fd5e 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 801ab98:	2300      	movs	r3, #0
 801ab9a:	4601      	mov	r1, r0
 801ab9c:	46ac      	mov	ip, r5
 801ab9e:	4620      	mov	r0, r4
 801aba0:	461a      	mov	r2, r3
 801aba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aba6:	4760      	bx	ip
 801aba8:	2000      	movs	r0, #0
 801abaa:	bd70      	pop	{r4, r5, r6, pc}

0801abac <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801abac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801abae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801abb2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801abb4:	429a      	cmp	r2, r3
 801abb6:	d016      	beq.n	801abe6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801abb8:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801abbc:	4620      	mov	r0, r4
 801abbe:	f7f5 fc31 	bl	8010424 <_ZNK8touchgfx9TypedText7getFontEv>
 801abc2:	6803      	ldr	r3, [r0, #0]
 801abc4:	4605      	mov	r5, r0
 801abc6:	4620      	mov	r0, r4
 801abc8:	69de      	ldr	r6, [r3, #28]
 801abca:	f7f5 fc47 	bl	801045c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801abce:	4607      	mov	r7, r0
 801abd0:	4620      	mov	r0, r4
 801abd2:	f7f7 fd3f 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 801abd6:	2300      	movs	r3, #0
 801abd8:	4602      	mov	r2, r0
 801abda:	4639      	mov	r1, r7
 801abdc:	9300      	str	r3, [sp, #0]
 801abde:	4628      	mov	r0, r5
 801abe0:	47b0      	blx	r6
 801abe2:	b003      	add	sp, #12
 801abe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abe6:	2000      	movs	r0, #0
 801abe8:	e7fb      	b.n	801abe2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801abea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801abea:	b40e      	push	{r1, r2, r3}
 801abec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801abf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abf4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801abf6:	b09b      	sub	sp, #108	; 0x6c
 801abf8:	4604      	mov	r4, r0
 801abfa:	429a      	cmp	r2, r3
 801abfc:	d03f      	beq.n	801ac7e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801abfe:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801ac02:	ab22      	add	r3, sp, #136	; 0x88
 801ac04:	4638      	mov	r0, r7
 801ac06:	9303      	str	r3, [sp, #12]
 801ac08:	f7f5 fc0c 	bl	8010424 <_ZNK8touchgfx9TypedText7getFontEv>
 801ac0c:	6803      	ldr	r3, [r0, #0]
 801ac0e:	4680      	mov	r8, r0
 801ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac12:	4798      	blx	r3
 801ac14:	4606      	mov	r6, r0
 801ac16:	b205      	sxth	r5, r0
 801ac18:	a804      	add	r0, sp, #16
 801ac1a:	f003 f845 	bl	801dca8 <_ZN8touchgfx12TextProviderC1Ev>
 801ac1e:	f8d8 3000 	ldr.w	r3, [r8]
 801ac22:	4640      	mov	r0, r8
 801ac24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac26:	4798      	blx	r3
 801ac28:	9a03      	ldr	r2, [sp, #12]
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ac2e:	a804      	add	r0, sp, #16
 801ac30:	f003 f857 	bl	801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ac34:	4638      	mov	r0, r7
 801ac36:	f7f5 fc11 	bl	801045c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801ac3a:	4680      	mov	r8, r0
 801ac3c:	4638      	mov	r0, r7
 801ac3e:	f7f5 fbf1 	bl	8010424 <_ZNK8touchgfx9TypedText7getFontEv>
 801ac42:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801ac46:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801ac4a:	4642      	mov	r2, r8
 801ac4c:	9300      	str	r3, [sp, #0]
 801ac4e:	4603      	mov	r3, r0
 801ac50:	a804      	add	r0, sp, #16
 801ac52:	f001 f8a2 	bl	801bd9a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801ac56:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801ac5a:	b203      	sxth	r3, r0
 801ac5c:	18a9      	adds	r1, r5, r2
 801ac5e:	2900      	cmp	r1, #0
 801ac60:	dd0b      	ble.n	801ac7a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801ac62:	3b01      	subs	r3, #1
 801ac64:	fb13 f302 	smulbb	r3, r3, r2
 801ac68:	fb16 3300 	smlabb	r3, r6, r0, r3
 801ac6c:	b21d      	sxth	r5, r3
 801ac6e:	4628      	mov	r0, r5
 801ac70:	b01b      	add	sp, #108	; 0x6c
 801ac72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac76:	b003      	add	sp, #12
 801ac78:	4770      	bx	lr
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	dcf7      	bgt.n	801ac6e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801ac7e:	2500      	movs	r5, #0
 801ac80:	e7f5      	b.n	801ac6e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801ac84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac8c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801ac8e:	b08d      	sub	sp, #52	; 0x34
 801ac90:	4604      	mov	r4, r0
 801ac92:	429e      	cmp	r6, r3
 801ac94:	4688      	mov	r8, r1
 801ac96:	d04b      	beq.n	801ad30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801ac98:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801ac9c:	4628      	mov	r0, r5
 801ac9e:	f7f5 fbc1 	bl	8010424 <_ZNK8touchgfx9TypedText7getFontEv>
 801aca2:	4607      	mov	r7, r0
 801aca4:	2800      	cmp	r0, #0
 801aca6:	d043      	beq.n	801ad30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801aca8:	4628      	mov	r0, r5
 801acaa:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801acae:	f7f5 fbed 	bl	801048c <_ZNK8touchgfx9TypedText11assertValidEv>
 801acb2:	4b21      	ldr	r3, [pc, #132]	; (801ad38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801acb4:	4628      	mov	r0, r5
 801acb6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801acc0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801acc4:	785e      	ldrb	r6, [r3, #1]
 801acc6:	f7f5 fbc9 	bl	801045c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801acca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801accc:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801acd0:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801acd4:	9309      	str	r3, [sp, #36]	; 0x24
 801acd6:	4b19      	ldr	r3, [pc, #100]	; (801ad3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801acd8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801ace2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ace6:	9707      	str	r7, [sp, #28]
 801ace8:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801acec:	f88d 6020 	strb.w	r6, [sp, #32]
 801acf0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801acf4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801acf8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801acfc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801ad00:	b10a      	cbz	r2, 801ad06 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801ad02:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801ad04:	b906      	cbnz	r6, 801ad08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801ad06:	689e      	ldr	r6, [r3, #8]
 801ad08:	af05      	add	r7, sp, #20
 801ad0a:	4621      	mov	r1, r4
 801ad0c:	4638      	mov	r0, r7
 801ad0e:	f002 f8f0 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ad12:	4628      	mov	r0, r5
 801ad14:	f7f7 fc9e 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 801ad18:	2300      	movs	r3, #0
 801ad1a:	9001      	str	r0, [sp, #4]
 801ad1c:	4630      	mov	r0, r6
 801ad1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ad22:	ab07      	add	r3, sp, #28
 801ad24:	9300      	str	r3, [sp, #0]
 801ad26:	4643      	mov	r3, r8
 801ad28:	e897 0006 	ldmia.w	r7, {r1, r2}
 801ad2c:	f000 fe02 	bl	801b934 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801ad30:	b00d      	add	sp, #52	; 0x34
 801ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad36:	bf00      	nop
 801ad38:	2000bf80 	.word	0x2000bf80
 801ad3c:	2000bef0 	.word	0x2000bef0

0801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801ad40:	b570      	push	{r4, r5, r6, lr}
 801ad42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad46:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ad48:	4604      	mov	r4, r0
 801ad4a:	429a      	cmp	r2, r3
 801ad4c:	d021      	beq.n	801ad92 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801ad4e:	6803      	ldr	r3, [r0, #0]
 801ad50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ad52:	4798      	blx	r3
 801ad54:	6823      	ldr	r3, [r4, #0]
 801ad56:	4605      	mov	r5, r0
 801ad58:	4620      	mov	r0, r4
 801ad5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ad5c:	4798      	blx	r3
 801ad5e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801ad62:	4606      	mov	r6, r0
 801ad64:	b22d      	sxth	r5, r5
 801ad66:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801ad6a:	6823      	ldr	r3, [r4, #0]
 801ad6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad6e:	d109      	bne.n	801ad84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801ad70:	4629      	mov	r1, r5
 801ad72:	4620      	mov	r0, r4
 801ad74:	4798      	blx	r3
 801ad76:	6823      	ldr	r3, [r4, #0]
 801ad78:	4631      	mov	r1, r6
 801ad7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad7c:	4620      	mov	r0, r4
 801ad7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad82:	4718      	bx	r3
 801ad84:	4601      	mov	r1, r0
 801ad86:	4620      	mov	r0, r4
 801ad88:	4798      	blx	r3
 801ad8a:	6823      	ldr	r3, [r4, #0]
 801ad8c:	4629      	mov	r1, r5
 801ad8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad90:	e7f4      	b.n	801ad7c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801ad92:	bd70      	pop	{r4, r5, r6, pc}

0801ad94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801ad94:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801ad98:	84c1      	strh	r1, [r0, #38]	; 0x26
 801ad9a:	b922      	cbnz	r2, 801ada6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801ad9c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ada0:	b90b      	cbnz	r3, 801ada6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801ada2:	f7ff bfcd 	b.w	801ad40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801ada6:	4770      	bx	lr

0801ada8 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801ada8:	2300      	movs	r3, #0
 801adaa:	8003      	strh	r3, [r0, #0]
 801adac:	8043      	strh	r3, [r0, #2]
 801adae:	8083      	strh	r3, [r0, #4]
 801adb0:	80c3      	strh	r3, [r0, #6]
 801adb2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801adb6:	b91b      	cbnz	r3, 801adc0 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801adb8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801adbc:	2bff      	cmp	r3, #255	; 0xff
 801adbe:	d103      	bne.n	801adc8 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801adc0:	890b      	ldrh	r3, [r1, #8]
 801adc2:	8083      	strh	r3, [r0, #4]
 801adc4:	894b      	ldrh	r3, [r1, #10]
 801adc6:	80c3      	strh	r3, [r0, #6]
 801adc8:	4770      	bx	lr
	...

0801adcc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801adcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801adce:	4604      	mov	r4, r0
 801add0:	466b      	mov	r3, sp
 801add2:	6808      	ldr	r0, [r1, #0]
 801add4:	6849      	ldr	r1, [r1, #4]
 801add6:	c303      	stmia	r3!, {r0, r1}
 801add8:	6823      	ldr	r3, [r4, #0]
 801adda:	4669      	mov	r1, sp
 801addc:	4620      	mov	r0, r4
 801adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ade0:	4798      	blx	r3
 801ade2:	4b08      	ldr	r3, [pc, #32]	; (801ae04 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801adea:	b10a      	cbz	r2, 801adf0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801adec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801adee:	b900      	cbnz	r0, 801adf2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801adf0:	6898      	ldr	r0, [r3, #8]
 801adf2:	6803      	ldr	r3, [r0, #0]
 801adf4:	4669      	mov	r1, sp
 801adf6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801adf8:	69dd      	ldr	r5, [r3, #28]
 801adfa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801adfe:	47a8      	blx	r5
 801ae00:	b003      	add	sp, #12
 801ae02:	bd30      	pop	{r4, r5, pc}
 801ae04:	2000bef0 	.word	0x2000bef0

0801ae08 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801ae08:	b570      	push	{r4, r5, r6, lr}
 801ae0a:	6803      	ldr	r3, [r0, #0]
 801ae0c:	4604      	mov	r4, r0
 801ae0e:	4615      	mov	r5, r2
 801ae10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ae12:	4798      	blx	r3
 801ae14:	6823      	ldr	r3, [r4, #0]
 801ae16:	4629      	mov	r1, r5
 801ae18:	4620      	mov	r0, r4
 801ae1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae20:	4718      	bx	r3

0801ae22 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801ae22:	b570      	push	{r4, r5, r6, lr}
 801ae24:	6803      	ldr	r3, [r0, #0]
 801ae26:	4604      	mov	r4, r0
 801ae28:	460e      	mov	r6, r1
 801ae2a:	4615      	mov	r5, r2
 801ae2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae2e:	4798      	blx	r3
 801ae30:	8030      	strh	r0, [r6, #0]
 801ae32:	6823      	ldr	r3, [r4, #0]
 801ae34:	4620      	mov	r0, r4
 801ae36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ae38:	4798      	blx	r3
 801ae3a:	8028      	strh	r0, [r5, #0]
 801ae3c:	bd70      	pop	{r4, r5, r6, pc}

0801ae3e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801ae3e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801ae42:	4770      	bx	lr

0801ae44 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801ae44:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801ae48:	4770      	bx	lr

0801ae4a <_ZN8touchgfx10TiledImageD1Ev>:
 801ae4a:	4770      	bx	lr

0801ae4c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801ae4c:	b510      	push	{r4, lr}
 801ae4e:	4604      	mov	r4, r0
 801ae50:	f000 facc 	bl	801b3ec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801ae54:	6823      	ldr	r3, [r4, #0]
 801ae56:	4620      	mov	r0, r4
 801ae58:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801ae5c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801ae60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ae62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae66:	4718      	bx	r3

0801ae68 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801ae68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae6a:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801ae6e:	4605      	mov	r5, r0
 801ae70:	8541      	strh	r1, [r0, #42]	; 0x2a
 801ae72:	4630      	mov	r0, r6
 801ae74:	f003 fe44 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ae78:	b1a0      	cbz	r0, 801aea4 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801ae7a:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801ae7e:	4630      	mov	r0, r6
 801ae80:	f003 fe3e 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ae84:	fb97 f4f0 	sdiv	r4, r7, r0
 801ae88:	fb04 7410 	mls	r4, r4, r0, r7
 801ae8c:	4630      	mov	r0, r6
 801ae8e:	f003 fe37 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ae92:	4404      	add	r4, r0
 801ae94:	4630      	mov	r0, r6
 801ae96:	f003 fe33 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ae9a:	fb94 f3f0 	sdiv	r3, r4, r0
 801ae9e:	fb03 4010 	mls	r0, r3, r0, r4
 801aea2:	8568      	strh	r0, [r5, #42]	; 0x2a
 801aea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aea6 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801aea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aea8:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801aeac:	4605      	mov	r5, r0
 801aeae:	8581      	strh	r1, [r0, #44]	; 0x2c
 801aeb0:	4630      	mov	r0, r6
 801aeb2:	f003 fe5f 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aeb6:	b1a0      	cbz	r0, 801aee2 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801aeb8:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801aebc:	4630      	mov	r0, r6
 801aebe:	f003 fe59 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aec2:	fb97 f4f0 	sdiv	r4, r7, r0
 801aec6:	fb04 7410 	mls	r4, r4, r0, r7
 801aeca:	4630      	mov	r0, r6
 801aecc:	f003 fe52 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aed0:	4404      	add	r4, r0
 801aed2:	4630      	mov	r0, r6
 801aed4:	f003 fe4e 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aed8:	fb94 f3f0 	sdiv	r3, r4, r0
 801aedc:	fb03 4010 	mls	r0, r3, r0, r4
 801aee0:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801aee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aee4 <_ZN8touchgfx10TiledImageD0Ev>:
 801aee4:	b510      	push	{r4, lr}
 801aee6:	4604      	mov	r4, r0
 801aee8:	2130      	movs	r1, #48	; 0x30
 801aeea:	f00d fb2d 	bl	8028548 <_ZdlPvj>
 801aeee:	4620      	mov	r0, r4
 801aef0:	bd10      	pop	{r4, pc}
	...

0801aef4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801aef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef8:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801aefc:	b093      	sub	sp, #76	; 0x4c
 801aefe:	4607      	mov	r7, r0
 801af00:	460e      	mov	r6, r1
 801af02:	4658      	mov	r0, fp
 801af04:	f003 fdfc 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801af08:	4605      	mov	r5, r0
 801af0a:	4658      	mov	r0, fp
 801af0c:	f003 fe32 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af10:	4680      	mov	r8, r0
 801af12:	2d00      	cmp	r5, #0
 801af14:	f000 80c5 	beq.w	801b0a2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801af18:	2800      	cmp	r0, #0
 801af1a:	f000 80c2 	beq.w	801b0a2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801af1e:	2300      	movs	r3, #0
 801af20:	a90e      	add	r1, sp, #56	; 0x38
 801af22:	4638      	mov	r0, r7
 801af24:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801af28:	683b      	ldr	r3, [r7, #0]
 801af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af2c:	4798      	blx	r3
 801af2e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801af32:	f9b6 3000 	ldrsh.w	r3, [r6]
 801af36:	88b1      	ldrh	r1, [r6, #4]
 801af38:	189c      	adds	r4, r3, r2
 801af3a:	440b      	add	r3, r1
 801af3c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801af40:	fa02 f383 	sxtah	r3, r2, r3
 801af44:	3b01      	subs	r3, #1
 801af46:	fb93 f3f5 	sdiv	r3, r3, r5
 801af4a:	fb94 f4f5 	sdiv	r4, r4, r5
 801af4e:	fb13 f305 	smulbb	r3, r3, r5
 801af52:	fb14 f405 	smulbb	r4, r4, r5
 801af56:	b21b      	sxth	r3, r3
 801af58:	1aa4      	subs	r4, r4, r2
 801af5a:	930b      	str	r3, [sp, #44]	; 0x2c
 801af5c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801af60:	b2a4      	uxth	r4, r4
 801af62:	185a      	adds	r2, r3, r1
 801af64:	fb92 f2f8 	sdiv	r2, r2, r8
 801af68:	fb12 f208 	smulbb	r2, r2, r8
 801af6c:	1a52      	subs	r2, r2, r1
 801af6e:	b212      	sxth	r2, r2
 801af70:	920c      	str	r2, [sp, #48]	; 0x30
 801af72:	88f2      	ldrh	r2, [r6, #6]
 801af74:	4413      	add	r3, r2
 801af76:	fa01 f383 	sxtah	r3, r1, r3
 801af7a:	3b01      	subs	r3, #1
 801af7c:	fb93 f3f8 	sdiv	r3, r3, r8
 801af80:	fb13 f308 	smulbb	r3, r3, r8
 801af84:	b21b      	sxth	r3, r3
 801af86:	930d      	str	r3, [sp, #52]	; 0x34
 801af88:	1963      	adds	r3, r4, r5
 801af8a:	fa1f fa83 	uxth.w	sl, r3
 801af8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af90:	b223      	sxth	r3, r4
 801af92:	4293      	cmp	r3, r2
 801af94:	9305      	str	r3, [sp, #20]
 801af96:	f300 8084 	bgt.w	801b0a2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801af9a:	fa0f f38a 	sxth.w	r3, sl
 801af9e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801afa2:	9309      	str	r3, [sp, #36]	; 0x24
 801afa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afa6:	4599      	cmp	r9, r3
 801afa8:	dd04      	ble.n	801afb4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801afaa:	442c      	add	r4, r5
 801afac:	eb05 030a 	add.w	r3, r5, sl
 801afb0:	b2a4      	uxth	r4, r4
 801afb2:	e7ea      	b.n	801af8a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801afb4:	f9b6 c000 	ldrsh.w	ip, [r6]
 801afb8:	88b2      	ldrh	r2, [r6, #4]
 801afba:	4462      	add	r2, ip
 801afbc:	b292      	uxth	r2, r2
 801afbe:	b213      	sxth	r3, r2
 801afc0:	9308      	str	r3, [sp, #32]
 801afc2:	fa1f f389 	uxth.w	r3, r9
 801afc6:	eb08 0103 	add.w	r1, r8, r3
 801afca:	9307      	str	r3, [sp, #28]
 801afcc:	b289      	uxth	r1, r1
 801afce:	b208      	sxth	r0, r1
 801afd0:	9006      	str	r0, [sp, #24]
 801afd2:	9805      	ldr	r0, [sp, #20]
 801afd4:	4603      	mov	r3, r0
 801afd6:	9808      	ldr	r0, [sp, #32]
 801afd8:	4283      	cmp	r3, r0
 801afda:	da5e      	bge.n	801b09a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801afdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801afde:	4584      	cmp	ip, r0
 801afe0:	da5b      	bge.n	801b09a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801afe2:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801afe6:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801afea:	4486      	add	lr, r0
 801afec:	fa1f fe8e 	uxth.w	lr, lr
 801aff0:	fa0f f38e 	sxth.w	r3, lr
 801aff4:	4599      	cmp	r9, r3
 801aff6:	930a      	str	r3, [sp, #40]	; 0x28
 801aff8:	da4f      	bge.n	801b09a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801affa:	9b06      	ldr	r3, [sp, #24]
 801affc:	4298      	cmp	r0, r3
 801affe:	da4c      	bge.n	801b09a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801b000:	9b05      	ldr	r3, [sp, #20]
 801b002:	459c      	cmp	ip, r3
 801b004:	bfb8      	it	lt
 801b006:	469c      	movlt	ip, r3
 801b008:	4548      	cmp	r0, r9
 801b00a:	9b08      	ldr	r3, [sp, #32]
 801b00c:	bfb8      	it	lt
 801b00e:	4648      	movlt	r0, r9
 801b010:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801b014:	4699      	mov	r9, r3
 801b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b018:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801b01c:	4599      	cmp	r9, r3
 801b01e:	bfc8      	it	gt
 801b020:	4652      	movgt	r2, sl
 801b022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b024:	eba2 020c 	sub.w	r2, r2, ip
 801b028:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801b02c:	9a06      	ldr	r2, [sp, #24]
 801b02e:	4293      	cmp	r3, r2
 801b030:	bfd8      	it	le
 801b032:	4671      	movle	r1, lr
 801b034:	1a09      	subs	r1, r1, r0
 801b036:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801b03a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b03e:	9b07      	ldr	r3, [sp, #28]
 801b040:	1b12      	subs	r2, r2, r4
 801b042:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b046:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b04a:	1ad2      	subs	r2, r2, r3
 801b04c:	4b16      	ldr	r3, [pc, #88]	; (801b0a8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801b04e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801b052:	681a      	ldr	r2, [r3, #0]
 801b054:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801b058:	b109      	cbz	r1, 801b05e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801b05a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801b05c:	b900      	cbnz	r0, 801b060 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801b05e:	6890      	ldr	r0, [r2, #8]
 801b060:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b064:	f04f 0c01 	mov.w	ip, #1
 801b068:	9b07      	ldr	r3, [sp, #28]
 801b06a:	6801      	ldr	r1, [r0, #0]
 801b06c:	4413      	add	r3, r2
 801b06e:	f8cd c008 	str.w	ip, [sp, #8]
 801b072:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b076:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801b07a:	b21b      	sxth	r3, r3
 801b07c:	4422      	add	r2, r4
 801b07e:	f8cd c004 	str.w	ip, [sp, #4]
 801b082:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801b086:	b212      	sxth	r2, r2
 801b088:	f8cd c000 	str.w	ip, [sp]
 801b08c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801b090:	4659      	mov	r1, fp
 801b092:	47c8      	blx	r9
 801b094:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b098:	e784      	b.n	801afa4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801b09a:	2300      	movs	r3, #0
 801b09c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801b0a0:	e7cb      	b.n	801b03a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801b0a2:	b013      	add	sp, #76	; 0x4c
 801b0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0a8:	2000bef0 	.word	0x2000bef0

0801b0ac <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801b0ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b0b4:	4606      	mov	r6, r0
 801b0b6:	4689      	mov	r9, r1
 801b0b8:	2bff      	cmp	r3, #255	; 0xff
 801b0ba:	d008      	beq.n	801b0ce <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801b0bc:	2300      	movs	r3, #0
 801b0be:	8003      	strh	r3, [r0, #0]
 801b0c0:	8043      	strh	r3, [r0, #2]
 801b0c2:	8083      	strh	r3, [r0, #4]
 801b0c4:	4630      	mov	r0, r6
 801b0c6:	80f3      	strh	r3, [r6, #6]
 801b0c8:	b003      	add	sp, #12
 801b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ce:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801b0d2:	4668      	mov	r0, sp
 801b0d4:	4659      	mov	r1, fp
 801b0d6:	f003 fd87 	bl	801ebe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b0da:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801b0de:	4658      	mov	r0, fp
 801b0e0:	f9bd 7000 	ldrsh.w	r7, [sp]
 801b0e4:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801b0e8:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801b0ec:	f003 fd08 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b0f0:	4284      	cmp	r4, r0
 801b0f2:	d10d      	bne.n	801b110 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801b0f4:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801b0f8:	4658      	mov	r0, fp
 801b0fa:	f003 fd3b 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b0fe:	4580      	cmp	r8, r0
 801b100:	d12a      	bne.n	801b158 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801b102:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801b106:	8037      	strh	r7, [r6, #0]
 801b108:	f8a6 a002 	strh.w	sl, [r6, #2]
 801b10c:	80b5      	strh	r5, [r6, #4]
 801b10e:	e7d9      	b.n	801b0c4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801b110:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801b114:	4658      	mov	r0, fp
 801b116:	f003 fcf3 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b11a:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801b11e:	1b7f      	subs	r7, r7, r5
 801b120:	b2a3      	uxth	r3, r4
 801b122:	b2bd      	uxth	r5, r7
 801b124:	b22f      	sxth	r7, r5
 801b126:	4428      	add	r0, r5
 801b128:	2f00      	cmp	r7, #0
 801b12a:	b280      	uxth	r0, r0
 801b12c:	bfb8      	it	lt
 801b12e:	18ed      	addlt	r5, r5, r3
 801b130:	4403      	add	r3, r0
 801b132:	bfac      	ite	ge
 801b134:	4625      	movge	r5, r4
 801b136:	2700      	movlt	r7, #0
 801b138:	b29b      	uxth	r3, r3
 801b13a:	bfb8      	it	lt
 801b13c:	b22d      	sxthlt	r5, r5
 801b13e:	b219      	sxth	r1, r3
 801b140:	bfb8      	it	lt
 801b142:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801b146:	4291      	cmp	r1, r2
 801b148:	bfc4      	itt	gt
 801b14a:	1a9c      	subgt	r4, r3, r2
 801b14c:	b224      	sxthgt	r4, r4
 801b14e:	42ac      	cmp	r4, r5
 801b150:	bfc4      	itt	gt
 801b152:	b207      	sxthgt	r7, r0
 801b154:	4625      	movgt	r5, r4
 801b156:	e7cf      	b.n	801b0f8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801b158:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801b15c:	4658      	mov	r0, fp
 801b15e:	f003 fd09 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b162:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801b166:	ebaa 0404 	sub.w	r4, sl, r4
 801b16a:	fa1f f288 	uxth.w	r2, r8
 801b16e:	b2a4      	uxth	r4, r4
 801b170:	fa0f fa84 	sxth.w	sl, r4
 801b174:	4420      	add	r0, r4
 801b176:	f1ba 0f00 	cmp.w	sl, #0
 801b17a:	b280      	uxth	r0, r0
 801b17c:	bfb8      	it	lt
 801b17e:	18a3      	addlt	r3, r4, r2
 801b180:	4402      	add	r2, r0
 801b182:	bfac      	ite	ge
 801b184:	4643      	movge	r3, r8
 801b186:	f04f 0a00 	movlt.w	sl, #0
 801b18a:	b292      	uxth	r2, r2
 801b18c:	bfb8      	it	lt
 801b18e:	b21b      	sxthlt	r3, r3
 801b190:	b214      	sxth	r4, r2
 801b192:	bfb8      	it	lt
 801b194:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b198:	428c      	cmp	r4, r1
 801b19a:	bfc4      	itt	gt
 801b19c:	eba2 0801 	subgt.w	r8, r2, r1
 801b1a0:	fa0f f888 	sxthgt.w	r8, r8
 801b1a4:	4543      	cmp	r3, r8
 801b1a6:	bfbc      	itt	lt
 801b1a8:	fa0f fa80 	sxthlt.w	sl, r0
 801b1ac:	4643      	movlt	r3, r8
 801b1ae:	e7aa      	b.n	801b106 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801b1b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801b1b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b1b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b1b8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801b1ba:	4604      	mov	r4, r0
 801b1bc:	429a      	cmp	r2, r3
 801b1be:	d018      	beq.n	801b1f2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 801b1c0:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801b1c4:	4628      	mov	r0, r5
 801b1c6:	f7f5 f92d 	bl	8010424 <_ZNK8touchgfx9TypedText7getFontEv>
 801b1ca:	6803      	ldr	r3, [r0, #0]
 801b1cc:	4606      	mov	r6, r0
 801b1ce:	4628      	mov	r0, r5
 801b1d0:	69df      	ldr	r7, [r3, #28]
 801b1d2:	f7f5 f943 	bl	801045c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801b1d6:	4680      	mov	r8, r0
 801b1d8:	4628      	mov	r0, r5
 801b1da:	f7f7 fa3b 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 801b1de:	2300      	movs	r3, #0
 801b1e0:	4602      	mov	r2, r0
 801b1e2:	4641      	mov	r1, r8
 801b1e4:	9300      	str	r3, [sp, #0]
 801b1e6:	4630      	mov	r0, r6
 801b1e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b1ea:	47b8      	blx	r7
 801b1ec:	b002      	add	sp, #8
 801b1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1f2:	2000      	movs	r0, #0
 801b1f4:	e7fa      	b.n	801b1ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801b1f6 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801b1f6:	b570      	push	{r4, r5, r6, lr}
 801b1f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b1fc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801b1fe:	4604      	mov	r4, r0
 801b200:	429a      	cmp	r2, r3
 801b202:	d00c      	beq.n	801b21e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801b204:	f850 3b26 	ldr.w	r3, [r0], #38
 801b208:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801b20a:	f7f7 fa23 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 801b20e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801b210:	4601      	mov	r1, r0
 801b212:	46ac      	mov	ip, r5
 801b214:	4620      	mov	r0, r4
 801b216:	2300      	movs	r3, #0
 801b218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b21c:	4760      	bx	ip
 801b21e:	2000      	movs	r0, #0
 801b220:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b224 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b22c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801b22e:	b08d      	sub	sp, #52	; 0x34
 801b230:	4604      	mov	r4, r0
 801b232:	429e      	cmp	r6, r3
 801b234:	460f      	mov	r7, r1
 801b236:	d048      	beq.n	801b2ca <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801b238:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801b23c:	4628      	mov	r0, r5
 801b23e:	f7f5 f8f1 	bl	8010424 <_ZNK8touchgfx9TypedText7getFontEv>
 801b242:	4680      	mov	r8, r0
 801b244:	2800      	cmp	r0, #0
 801b246:	d040      	beq.n	801b2ca <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801b248:	4628      	mov	r0, r5
 801b24a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801b24e:	f7f5 f91d 	bl	801048c <_ZNK8touchgfx9TypedText11assertValidEv>
 801b252:	4b1f      	ldr	r3, [pc, #124]	; (801b2d0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801b254:	4628      	mov	r0, r5
 801b256:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801b260:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801b264:	785e      	ldrb	r6, [r3, #1]
 801b266:	f7f5 f8f9 	bl	801045c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801b26a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801b26e:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801b272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b274:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801b278:	f88d 6020 	strb.w	r6, [sp, #32]
 801b27c:	ae05      	add	r6, sp, #20
 801b27e:	9309      	str	r3, [sp, #36]	; 0x24
 801b280:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801b284:	f8cd 801c 	str.w	r8, [sp, #28]
 801b288:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801b28c:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801b290:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801b294:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801b298:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801b29c:	f7f5 fd68 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801b2a0:	4621      	mov	r1, r4
 801b2a2:	4680      	mov	r8, r0
 801b2a4:	4630      	mov	r0, r6
 801b2a6:	f001 fe24 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2aa:	4628      	mov	r0, r5
 801b2ac:	f7f7 f9d2 	bl	8012654 <_ZNK8touchgfx9TypedText7getTextEv>
 801b2b0:	2300      	movs	r3, #0
 801b2b2:	9303      	str	r3, [sp, #12]
 801b2b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b2b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801b2ba:	ab07      	add	r3, sp, #28
 801b2bc:	4640      	mov	r0, r8
 801b2be:	9300      	str	r3, [sp, #0]
 801b2c0:	463b      	mov	r3, r7
 801b2c2:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b2c6:	f000 fb35 	bl	801b934 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b2ca:	b00d      	add	sp, #52	; 0x34
 801b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2d0:	2000bf80 	.word	0x2000bf80

0801b2d4 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	8083      	strh	r3, [r0, #4]
 801b2d8:	80c3      	strh	r3, [r0, #6]
 801b2da:	8003      	strh	r3, [r0, #0]
 801b2dc:	8043      	strh	r3, [r0, #2]
 801b2de:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b2e2:	2bff      	cmp	r3, #255	; 0xff
 801b2e4:	bf01      	itttt	eq
 801b2e6:	890b      	ldrheq	r3, [r1, #8]
 801b2e8:	8083      	strheq	r3, [r0, #4]
 801b2ea:	894b      	ldrheq	r3, [r1, #10]
 801b2ec:	80c3      	strheq	r3, [r0, #6]
 801b2ee:	4770      	bx	lr

0801b2f0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801b2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2f4:	4604      	mov	r4, r0
 801b2f6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801b2fa:	460e      	mov	r6, r1
 801b2fc:	b08c      	sub	sp, #48	; 0x30
 801b2fe:	8962      	ldrh	r2, [r4, #10]
 801b300:	b218      	sxth	r0, r3
 801b302:	8921      	ldrh	r1, [r4, #8]
 801b304:	005b      	lsls	r3, r3, #1
 801b306:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b30a:	1ac9      	subs	r1, r1, r3
 801b30c:	1ad3      	subs	r3, r2, r3
 801b30e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b312:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b316:	6830      	ldr	r0, [r6, #0]
 801b318:	6871      	ldr	r1, [r6, #4]
 801b31a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b31e:	466b      	mov	r3, sp
 801b320:	c303      	stmia	r3!, {r0, r1}
 801b322:	a904      	add	r1, sp, #16
 801b324:	4668      	mov	r0, sp
 801b326:	f7fd fe75 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801b32a:	6823      	ldr	r3, [r4, #0]
 801b32c:	4669      	mov	r1, sp
 801b32e:	4620      	mov	r0, r4
 801b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b332:	4798      	blx	r3
 801b334:	f7f5 fd1c 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801b338:	6803      	ldr	r3, [r0, #0]
 801b33a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b33c:	4669      	mov	r1, sp
 801b33e:	69dd      	ldr	r5, [r3, #28]
 801b340:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b344:	47a8      	blx	r5
 801b346:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801b34a:	2a00      	cmp	r2, #0
 801b34c:	d04b      	beq.n	801b3e6 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 801b34e:	b211      	sxth	r1, r2
 801b350:	8963      	ldrh	r3, [r4, #10]
 801b352:	b292      	uxth	r2, r2
 801b354:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801b358:	2500      	movs	r5, #0
 801b35a:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b35e:	1a9f      	subs	r7, r3, r2
 801b360:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801b364:	1a82      	subs	r2, r0, r2
 801b366:	9504      	str	r5, [sp, #16]
 801b368:	b21b      	sxth	r3, r3
 801b36a:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b36e:	af02      	add	r7, sp, #8
 801b370:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b374:	f8ad 5018 	strh.w	r5, [sp, #24]
 801b378:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b37c:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b380:	f8ad 5020 	strh.w	r5, [sp, #32]
 801b384:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801b388:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801b38c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b390:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b394:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801b398:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801b39c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b3a0:	ab04      	add	r3, sp, #16
 801b3a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b3a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3aa:	e887 0003 	stmia.w	r7, {r0, r1}
 801b3ae:	4631      	mov	r1, r6
 801b3b0:	4638      	mov	r0, r7
 801b3b2:	f7fd fe2f 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801b3b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b3ba:	b18b      	cbz	r3, 801b3e0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801b3bc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b3c0:	b173      	cbz	r3, 801b3e0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801b3c2:	6823      	ldr	r3, [r4, #0]
 801b3c4:	4639      	mov	r1, r7
 801b3c6:	4620      	mov	r0, r4
 801b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3ca:	4798      	blx	r3
 801b3cc:	f7f5 fcd0 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 801b3d0:	6803      	ldr	r3, [r0, #0]
 801b3d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b3d4:	4639      	mov	r1, r7
 801b3d6:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801b3da:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b3de:	47c0      	blx	r8
 801b3e0:	3501      	adds	r5, #1
 801b3e2:	2d04      	cmp	r5, #4
 801b3e4:	d1dc      	bne.n	801b3a0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 801b3e6:	b00c      	add	sp, #48	; 0x30
 801b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b3ec <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801b3ec:	b570      	push	{r4, r5, r6, lr}
 801b3ee:	4605      	mov	r5, r0
 801b3f0:	880b      	ldrh	r3, [r1, #0]
 801b3f2:	4604      	mov	r4, r0
 801b3f4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b3f6:	f855 3b26 	ldr.w	r3, [r5], #38
 801b3fa:	4628      	mov	r0, r5
 801b3fc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801b3fe:	f003 fb7f 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b402:	b201      	sxth	r1, r0
 801b404:	4620      	mov	r0, r4
 801b406:	47b0      	blx	r6
 801b408:	6823      	ldr	r3, [r4, #0]
 801b40a:	4628      	mov	r0, r5
 801b40c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801b40e:	f003 fbb1 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b412:	b201      	sxth	r1, r0
 801b414:	4620      	mov	r0, r4
 801b416:	47b0      	blx	r6
 801b418:	4628      	mov	r0, r5
 801b41a:	f003 fc3f 	bl	801ec9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b41e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801b422:	bd70      	pop	{r4, r5, r6, pc}

0801b424 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801b424:	b510      	push	{r4, lr}
 801b426:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801b42a:	4604      	mov	r4, r0
 801b42c:	2bff      	cmp	r3, #255	; 0xff
 801b42e:	d006      	beq.n	801b43e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801b430:	2300      	movs	r3, #0
 801b432:	8003      	strh	r3, [r0, #0]
 801b434:	8043      	strh	r3, [r0, #2]
 801b436:	8083      	strh	r3, [r0, #4]
 801b438:	80c3      	strh	r3, [r0, #6]
 801b43a:	4620      	mov	r0, r4
 801b43c:	bd10      	pop	{r4, pc}
 801b43e:	3126      	adds	r1, #38	; 0x26
 801b440:	f003 fbd2 	bl	801ebe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b444:	e7f9      	b.n	801b43a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801b448 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801b448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b44c:	4604      	mov	r4, r0
 801b44e:	b088      	sub	sp, #32
 801b450:	2500      	movs	r5, #0
 801b452:	460f      	mov	r7, r1
 801b454:	f854 3b26 	ldr.w	r3, [r4], #38
 801b458:	a904      	add	r1, sp, #16
 801b45a:	4606      	mov	r6, r0
 801b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b45e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b462:	4798      	blx	r3
 801b464:	4620      	mov	r0, r4
 801b466:	f003 fb4b 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b46a:	4680      	mov	r8, r0
 801b46c:	4620      	mov	r0, r4
 801b46e:	f003 fb81 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b472:	9506      	str	r5, [sp, #24]
 801b474:	ad06      	add	r5, sp, #24
 801b476:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b47a:	4639      	mov	r1, r7
 801b47c:	f8ad 801c 	strh.w	r8, [sp, #28]
 801b480:	4628      	mov	r0, r5
 801b482:	f7fd fdc7 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801b486:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b48a:	b1c3      	cbz	r3, 801b4be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801b48c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b490:	b1ab      	cbz	r3, 801b4be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801b492:	4b0c      	ldr	r3, [pc, #48]	; (801b4c4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b49a:	b10a      	cbz	r2, 801b4a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801b49c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b49e:	b900      	cbnz	r0, 801b4a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801b4a0:	6898      	ldr	r0, [r3, #8]
 801b4a2:	2701      	movs	r7, #1
 801b4a4:	6801      	ldr	r1, [r0, #0]
 801b4a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b4aa:	9702      	str	r7, [sp, #8]
 801b4ac:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801b4b0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b4b4:	e9cd 5600 	strd	r5, r6, [sp]
 801b4b8:	68cd      	ldr	r5, [r1, #12]
 801b4ba:	4621      	mov	r1, r4
 801b4bc:	47a8      	blx	r5
 801b4be:	b008      	add	sp, #32
 801b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4c4:	2000bef0 	.word	0x2000bef0

0801b4c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801b4c8:	4b02      	ldr	r3, [pc, #8]	; (801b4d4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801b4ca:	6018      	str	r0, [r3, #0]
 801b4cc:	4b02      	ldr	r3, [pc, #8]	; (801b4d8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801b4ce:	6019      	str	r1, [r3, #0]
 801b4d0:	4770      	bx	lr
 801b4d2:	bf00      	nop
 801b4d4:	2000bef8 	.word	0x2000bef8
 801b4d8:	2000bf0c 	.word	0x2000bf0c

0801b4dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801b4dc:	b538      	push	{r3, r4, r5, lr}
 801b4de:	4c2b      	ldr	r4, [pc, #172]	; (801b58c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801b4e0:	4b2b      	ldr	r3, [pc, #172]	; (801b590 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801b4e2:	6821      	ldr	r1, [r4, #0]
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	4281      	cmp	r1, r0
 801b4e8:	4d2a      	ldr	r5, [pc, #168]	; (801b594 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801b4ea:	492b      	ldr	r1, [pc, #172]	; (801b598 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801b4ec:	d108      	bne.n	801b500 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801b4ee:	682b      	ldr	r3, [r5, #0]
 801b4f0:	4293      	cmp	r3, r2
 801b4f2:	d105      	bne.n	801b500 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801b4f4:	6808      	ldr	r0, [r1, #0]
 801b4f6:	280f      	cmp	r0, #15
 801b4f8:	bf94      	ite	ls
 801b4fa:	2000      	movls	r0, #0
 801b4fc:	2001      	movhi	r0, #1
 801b4fe:	bd38      	pop	{r3, r4, r5, pc}
 801b500:	4b26      	ldr	r3, [pc, #152]	; (801b59c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801b502:	6020      	str	r0, [r4, #0]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	602a      	str	r2, [r5, #0]
 801b508:	4298      	cmp	r0, r3
 801b50a:	d905      	bls.n	801b518 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801b50c:	4b24      	ldr	r3, [pc, #144]	; (801b5a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b50e:	2137      	movs	r1, #55	; 0x37
 801b510:	4a24      	ldr	r2, [pc, #144]	; (801b5a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b512:	4825      	ldr	r0, [pc, #148]	; (801b5a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801b514:	f00d f846 	bl	80285a4 <__assert_func>
 801b518:	f010 0403 	ands.w	r4, r0, #3
 801b51c:	bf1f      	itttt	ne
 801b51e:	f1c4 0504 	rsbne	r5, r4, #4
 801b522:	3b04      	subne	r3, #4
 801b524:	1952      	addne	r2, r2, r5
 801b526:	191b      	addne	r3, r3, r4
 801b528:	4d20      	ldr	r5, [pc, #128]	; (801b5ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801b52a:	4402      	add	r2, r0
 801b52c:	1a1b      	subs	r3, r3, r0
 801b52e:	3001      	adds	r0, #1
 801b530:	602a      	str	r2, [r5, #0]
 801b532:	f020 0401 	bic.w	r4, r0, #1
 801b536:	42a3      	cmp	r3, r4
 801b538:	d203      	bcs.n	801b542 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801b53a:	4b19      	ldr	r3, [pc, #100]	; (801b5a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b53c:	214a      	movs	r1, #74	; 0x4a
 801b53e:	4a19      	ldr	r2, [pc, #100]	; (801b5a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b540:	e7e7      	b.n	801b512 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b542:	f010 0002 	ands.w	r0, r0, #2
 801b546:	bf1f      	itttt	ne
 801b548:	f1c0 0504 	rsbne	r5, r0, #4
 801b54c:	1952      	addne	r2, r2, r5
 801b54e:	1f05      	subne	r5, r0, #4
 801b550:	195b      	addne	r3, r3, r5
 801b552:	4422      	add	r2, r4
 801b554:	4d16      	ldr	r5, [pc, #88]	; (801b5b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801b556:	1b1b      	subs	r3, r3, r4
 801b558:	602a      	str	r2, [r5, #0]
 801b55a:	429c      	cmp	r4, r3
 801b55c:	d903      	bls.n	801b566 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801b55e:	4b10      	ldr	r3, [pc, #64]	; (801b5a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b560:	215d      	movs	r1, #93	; 0x5d
 801b562:	4a10      	ldr	r2, [pc, #64]	; (801b5a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b564:	e7d5      	b.n	801b512 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b566:	b120      	cbz	r0, 801b572 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801b568:	f1c0 0504 	rsb	r5, r0, #4
 801b56c:	3804      	subs	r0, #4
 801b56e:	442a      	add	r2, r5
 801b570:	4403      	add	r3, r0
 801b572:	1b1b      	subs	r3, r3, r4
 801b574:	4422      	add	r2, r4
 801b576:	480f      	ldr	r0, [pc, #60]	; (801b5b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801b578:	2b0f      	cmp	r3, #15
 801b57a:	600b      	str	r3, [r1, #0]
 801b57c:	6002      	str	r2, [r0, #0]
 801b57e:	d803      	bhi.n	801b588 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801b580:	4b0d      	ldr	r3, [pc, #52]	; (801b5b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801b582:	2170      	movs	r1, #112	; 0x70
 801b584:	4a07      	ldr	r2, [pc, #28]	; (801b5a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b586:	e7c4      	b.n	801b512 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b588:	2001      	movs	r0, #1
 801b58a:	e7b8      	b.n	801b4fe <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801b58c:	2000bf00 	.word	0x2000bf00
 801b590:	2000bef8 	.word	0x2000bef8
 801b594:	2000bf08 	.word	0x2000bf08
 801b598:	2000bf10 	.word	0x2000bf10
 801b59c:	2000bf0c 	.word	0x2000bf0c
 801b5a0:	0802c644 	.word	0x0802c644
 801b5a4:	0802c70c 	.word	0x0802c70c
 801b5a8:	0802c67d 	.word	0x0802c67d
 801b5ac:	2000bf14 	.word	0x2000bf14
 801b5b0:	2000bf04 	.word	0x2000bf04
 801b5b4:	2000befc 	.word	0x2000befc
 801b5b8:	0802c6c7 	.word	0x0802c6c7

0801b5bc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801b5bc:	4b04      	ldr	r3, [pc, #16]	; (801b5d0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801b5be:	6818      	ldr	r0, [r3, #0]
 801b5c0:	b120      	cbz	r0, 801b5cc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801b5c2:	4b04      	ldr	r3, [pc, #16]	; (801b5d4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801b5c4:	6818      	ldr	r0, [r3, #0]
 801b5c6:	3000      	adds	r0, #0
 801b5c8:	bf18      	it	ne
 801b5ca:	2001      	movne	r0, #1
 801b5cc:	4770      	bx	lr
 801b5ce:	bf00      	nop
 801b5d0:	2000bef8 	.word	0x2000bef8
 801b5d4:	2000bf0c 	.word	0x2000bf0c

0801b5d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801b5d8:	4b01      	ldr	r3, [pc, #4]	; (801b5e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801b5da:	6818      	ldr	r0, [r3, #0]
 801b5dc:	4770      	bx	lr
 801b5de:	bf00      	nop
 801b5e0:	2000bf00 	.word	0x2000bf00

0801b5e4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801b5e4:	4b01      	ldr	r3, [pc, #4]	; (801b5ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801b5e6:	6818      	ldr	r0, [r3, #0]
 801b5e8:	4770      	bx	lr
 801b5ea:	bf00      	nop
 801b5ec:	2000bf08 	.word	0x2000bf08

0801b5f0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801b5f0:	4b01      	ldr	r3, [pc, #4]	; (801b5f8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801b5f2:	6818      	ldr	r0, [r3, #0]
 801b5f4:	4770      	bx	lr
 801b5f6:	bf00      	nop
 801b5f8:	2000bf14 	.word	0x2000bf14

0801b5fc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801b5fc:	4b01      	ldr	r3, [pc, #4]	; (801b604 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801b5fe:	6818      	ldr	r0, [r3, #0]
 801b600:	4770      	bx	lr
 801b602:	bf00      	nop
 801b604:	2000bf04 	.word	0x2000bf04

0801b608 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801b608:	4b01      	ldr	r3, [pc, #4]	; (801b610 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801b60a:	6818      	ldr	r0, [r3, #0]
 801b60c:	4770      	bx	lr
 801b60e:	bf00      	nop
 801b610:	2000befc 	.word	0x2000befc

0801b614 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801b614:	4b01      	ldr	r3, [pc, #4]	; (801b61c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801b616:	6818      	ldr	r0, [r3, #0]
 801b618:	4770      	bx	lr
 801b61a:	bf00      	nop
 801b61c:	2000bf10 	.word	0x2000bf10

0801b620 <_ZN8touchgfx3LCD4initEv>:
 801b620:	4770      	bx	lr

0801b622 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b622:	2000      	movs	r0, #0
 801b624:	4770      	bx	lr

0801b626 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b62a:	b091      	sub	sp, #68	; 0x44
 801b62c:	4699      	mov	r9, r3
 801b62e:	4617      	mov	r7, r2
 801b630:	2500      	movs	r5, #0
 801b632:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801b636:	4680      	mov	r8, r0
 801b638:	a80e      	add	r0, sp, #56	; 0x38
 801b63a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801b63c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801b640:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801b644:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801b648:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b64c:	910d      	str	r1, [sp, #52]	; 0x34
 801b64e:	950e      	str	r5, [sp, #56]	; 0x38
 801b650:	f000 fe3a 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b654:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b656:	f8d9 6000 	ldr.w	r6, [r9]
 801b65a:	6818      	ldr	r0, [r3, #0]
 801b65c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b65e:	f9b4 b000 	ldrsh.w	fp, [r4]
 801b662:	1b80      	subs	r0, r0, r6
 801b664:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b668:	eb02 0c06 	add.w	ip, r2, r6
 801b66c:	ebab 0e0c 	sub.w	lr, fp, ip
 801b670:	4570      	cmp	r0, lr
 801b672:	f340 80bc 	ble.w	801b7ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b676:	88a1      	ldrh	r1, [r4, #4]
 801b678:	4459      	add	r1, fp
 801b67a:	b209      	sxth	r1, r1
 801b67c:	458c      	cmp	ip, r1
 801b67e:	f300 80b6 	bgt.w	801b7ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b682:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801b686:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801b68a:	4283      	cmp	r3, r0
 801b68c:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801b690:	edd9 6a07 	vldr	s13, [r9, #28]
 801b694:	bfa8      	it	ge
 801b696:	4603      	movge	r3, r0
 801b698:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801b69c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801b6a0:	45e3      	cmp	fp, ip
 801b6a2:	ee07 3a90 	vmov	s15, r3
 801b6a6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b6aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b6ae:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b6b2:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b6b6:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b6ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b6be:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b6c2:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b6c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b6ca:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b6ce:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b6d2:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b6d6:	f340 808d 	ble.w	801b7f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801b6da:	fb9e f5f3 	sdiv	r5, lr, r3
 801b6de:	ee07 5a10 	vmov	s14, r5
 801b6e2:	2d00      	cmp	r5, #0
 801b6e4:	fb03 e415 	mls	r4, r3, r5, lr
 801b6e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b6ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b6f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b6f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b6f8:	dd12      	ble.n	801b720 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801b6fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b6fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b702:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b706:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b70e:	bf14      	ite	ne
 801b710:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b714:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b718:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b71c:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b720:	fb05 f703 	mul.w	r7, r5, r3
 801b724:	1bc0      	subs	r0, r0, r7
 801b726:	443e      	add	r6, r7
 801b728:	1997      	adds	r7, r2, r6
 801b72a:	4407      	add	r7, r0
 801b72c:	42b9      	cmp	r1, r7
 801b72e:	bfbc      	itt	lt
 801b730:	1a88      	sublt	r0, r1, r2
 801b732:	1b80      	sublt	r0, r0, r6
 801b734:	2800      	cmp	r0, #0
 801b736:	dd5a      	ble.n	801b7ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b738:	fb90 f1f3 	sdiv	r1, r0, r3
 801b73c:	fb03 0211 	mls	r2, r3, r1, r0
 801b740:	b90a      	cbnz	r2, 801b746 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801b742:	3901      	subs	r1, #1
 801b744:	461a      	mov	r2, r3
 801b746:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b74a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801b74e:	44a4      	add	ip, r4
 801b750:	2900      	cmp	r1, #0
 801b752:	bfcc      	ite	gt
 801b754:	469e      	movgt	lr, r3
 801b756:	4696      	movle	lr, r2
 801b758:	fb03 c505 	mla	r5, r3, r5, ip
 801b75c:	eef0 6a42 	vmov.f32	s13, s4
 801b760:	eeb0 7a61 	vmov.f32	s14, s3
 801b764:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b768:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b76c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b770:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b774:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b778:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b77c:	ee17 0a90 	vmov	r0, s15
 801b780:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b784:	fb90 f6f3 	sdiv	r6, r0, r3
 801b788:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b78c:	ee17 0a90 	vmov	r0, s15
 801b790:	fb90 f7f3 	sdiv	r7, r0, r3
 801b794:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b798:	f8d0 8000 	ldr.w	r8, [r0]
 801b79c:	900c      	str	r0, [sp, #48]	; 0x30
 801b79e:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b7a0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b7a4:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801b7a8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801b7ac:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801b7b0:	f8cd a020 	str.w	sl, [sp, #32]
 801b7b4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801b7b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b7ba:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801b7be:	9603      	str	r6, [sp, #12]
 801b7c0:	44ca      	add	sl, r9
 801b7c2:	9506      	str	r5, [sp, #24]
 801b7c4:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801b7c8:	ee16 0a90 	vmov	r0, s13
 801b7cc:	f8cd a01c 	str.w	sl, [sp, #28]
 801b7d0:	fb07 0704 	mla	r7, r7, r4, r0
 801b7d4:	ee17 0a10 	vmov	r0, s14
 801b7d8:	fb06 0604 	mla	r6, r6, r4, r0
 801b7dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b7de:	9702      	str	r7, [sp, #8]
 801b7e0:	e9cd 3600 	strd	r3, r6, [sp]
 801b7e4:	ebae 0304 	sub.w	r3, lr, r4
 801b7e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b7ec:	47a8      	blx	r5
 801b7ee:	b011      	add	sp, #68	; 0x44
 801b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7f4:	462c      	mov	r4, r5
 801b7f6:	e797      	b.n	801b728 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801b7f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b7f8:	b570      	push	{r4, r5, r6, lr}
 801b7fa:	4604      	mov	r4, r0
 801b7fc:	2500      	movs	r5, #0
 801b7fe:	9804      	ldr	r0, [sp, #16]
 801b800:	7223      	strb	r3, [r4, #8]
 801b802:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b806:	8025      	strh	r5, [r4, #0]
 801b808:	6061      	str	r1, [r4, #4]
 801b80a:	7263      	strb	r3, [r4, #9]
 801b80c:	60e0      	str	r0, [r4, #12]
 801b80e:	8222      	strh	r2, [r4, #16]
 801b810:	8265      	strh	r5, [r4, #18]
 801b812:	82a5      	strh	r5, [r4, #20]
 801b814:	82e5      	strh	r5, [r4, #22]
 801b816:	8325      	strh	r5, [r4, #24]
 801b818:	8365      	strh	r5, [r4, #26]
 801b81a:	83a5      	strh	r5, [r4, #28]
 801b81c:	77a5      	strb	r5, [r4, #30]
 801b81e:	6803      	ldr	r3, [r0, #0]
 801b820:	695b      	ldr	r3, [r3, #20]
 801b822:	4798      	blx	r3
 801b824:	4606      	mov	r6, r0
 801b826:	b1f8      	cbz	r0, 801b868 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b828:	68e0      	ldr	r0, [r4, #12]
 801b82a:	4631      	mov	r1, r6
 801b82c:	6803      	ldr	r3, [r0, #0]
 801b82e:	68db      	ldr	r3, [r3, #12]
 801b830:	4798      	blx	r3
 801b832:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801b836:	4605      	mov	r5, r0
 801b838:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b83c:	7a83      	ldrb	r3, [r0, #10]
 801b83e:	4313      	orrs	r3, r2
 801b840:	83a3      	strh	r3, [r4, #28]
 801b842:	7a63      	ldrb	r3, [r4, #9]
 801b844:	2b04      	cmp	r3, #4
 801b846:	d10f      	bne.n	801b868 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b848:	68e0      	ldr	r0, [r4, #12]
 801b84a:	462a      	mov	r2, r5
 801b84c:	4631      	mov	r1, r6
 801b84e:	6803      	ldr	r3, [r0, #0]
 801b850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b852:	4798      	blx	r3
 801b854:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801b858:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b85c:	7aab      	ldrb	r3, [r5, #10]
 801b85e:	4313      	orrs	r3, r2
 801b860:	4418      	add	r0, r3
 801b862:	8ba3      	ldrh	r3, [r4, #28]
 801b864:	4418      	add	r0, r3
 801b866:	83a0      	strh	r0, [r4, #28]
 801b868:	4620      	mov	r0, r4
 801b86a:	bd70      	pop	{r4, r5, r6, pc}

0801b86c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b870:	2400      	movs	r4, #0
 801b872:	b085      	sub	sp, #20
 801b874:	4681      	mov	r9, r0
 801b876:	460f      	mov	r7, r1
 801b878:	4692      	mov	sl, r2
 801b87a:	469b      	mov	fp, r3
 801b87c:	46a0      	mov	r8, r4
 801b87e:	4626      	mov	r6, r4
 801b880:	4554      	cmp	r4, sl
 801b882:	da21      	bge.n	801b8c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b884:	2300      	movs	r3, #0
 801b886:	463a      	mov	r2, r7
 801b888:	4659      	mov	r1, fp
 801b88a:	4648      	mov	r0, r9
 801b88c:	9303      	str	r3, [sp, #12]
 801b88e:	ab03      	add	r3, sp, #12
 801b890:	f002 fb8c 	bl	801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b894:	4605      	mov	r5, r0
 801b896:	b1b8      	cbz	r0, 801b8c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b898:	280a      	cmp	r0, #10
 801b89a:	d015      	beq.n	801b8c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b89c:	9a03      	ldr	r2, [sp, #12]
 801b89e:	b182      	cbz	r2, 801b8c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801b8a0:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801b8a4:	4641      	mov	r1, r8
 801b8a6:	7a93      	ldrb	r3, [r2, #10]
 801b8a8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b8ac:	8895      	ldrh	r5, [r2, #4]
 801b8ae:	4303      	orrs	r3, r0
 801b8b0:	4638      	mov	r0, r7
 801b8b2:	9301      	str	r3, [sp, #4]
 801b8b4:	683b      	ldr	r3, [r7, #0]
 801b8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8b8:	4798      	blx	r3
 801b8ba:	9b01      	ldr	r3, [sp, #4]
 801b8bc:	4418      	add	r0, r3
 801b8be:	4406      	add	r6, r0
 801b8c0:	b2b6      	uxth	r6, r6
 801b8c2:	3401      	adds	r4, #1
 801b8c4:	46a8      	mov	r8, r5
 801b8c6:	e7db      	b.n	801b880 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801b8c8:	4630      	mov	r0, r6
 801b8ca:	b005      	add	sp, #20
 801b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b8d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b8d0:	2a02      	cmp	r2, #2
 801b8d2:	b530      	push	{r4, r5, lr}
 801b8d4:	d011      	beq.n	801b8fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b8d6:	2a03      	cmp	r2, #3
 801b8d8:	d01c      	beq.n	801b914 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b8da:	2a01      	cmp	r2, #1
 801b8dc:	d10c      	bne.n	801b8f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b8de:	888b      	ldrh	r3, [r1, #4]
 801b8e0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b8e4:	8801      	ldrh	r1, [r0, #0]
 801b8e6:	1a9b      	subs	r3, r3, r2
 801b8e8:	8844      	ldrh	r4, [r0, #2]
 801b8ea:	1a5b      	subs	r3, r3, r1
 801b8ec:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b8f0:	8004      	strh	r4, [r0, #0]
 801b8f2:	8043      	strh	r3, [r0, #2]
 801b8f4:	8081      	strh	r1, [r0, #4]
 801b8f6:	80c2      	strh	r2, [r0, #6]
 801b8f8:	bd30      	pop	{r4, r5, pc}
 801b8fa:	88cb      	ldrh	r3, [r1, #6]
 801b8fc:	88c2      	ldrh	r2, [r0, #6]
 801b8fe:	1a9b      	subs	r3, r3, r2
 801b900:	8842      	ldrh	r2, [r0, #2]
 801b902:	1a9b      	subs	r3, r3, r2
 801b904:	888a      	ldrh	r2, [r1, #4]
 801b906:	8881      	ldrh	r1, [r0, #4]
 801b908:	8043      	strh	r3, [r0, #2]
 801b90a:	1a52      	subs	r2, r2, r1
 801b90c:	8801      	ldrh	r1, [r0, #0]
 801b90e:	1a52      	subs	r2, r2, r1
 801b910:	8002      	strh	r2, [r0, #0]
 801b912:	e7f1      	b.n	801b8f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b914:	88cb      	ldrh	r3, [r1, #6]
 801b916:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b91a:	8841      	ldrh	r1, [r0, #2]
 801b91c:	1a9b      	subs	r3, r3, r2
 801b91e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b922:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b926:	1a5b      	subs	r3, r3, r1
 801b928:	8045      	strh	r5, [r0, #2]
 801b92a:	8082      	strh	r2, [r0, #4]
 801b92c:	8003      	strh	r3, [r0, #0]
 801b92e:	80c4      	strh	r4, [r0, #6]
 801b930:	e7e2      	b.n	801b8f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801b934 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801b934:	b570      	push	{r4, r5, r6, lr}
 801b936:	b086      	sub	sp, #24
 801b938:	ac02      	add	r4, sp, #8
 801b93a:	e884 0006 	stmia.w	r4, {r1, r2}
 801b93e:	461a      	mov	r2, r3
 801b940:	ab0c      	add	r3, sp, #48	; 0x30
 801b942:	9305      	str	r3, [sp, #20]
 801b944:	4b0a      	ldr	r3, [pc, #40]	; (801b970 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801b946:	685d      	ldr	r5, [r3, #4]
 801b948:	1069      	asrs	r1, r5, #1
 801b94a:	07ed      	lsls	r5, r5, #31
 801b94c:	eb00 0601 	add.w	r6, r0, r1
 801b950:	bf46      	itte	mi
 801b952:	681b      	ldrmi	r3, [r3, #0]
 801b954:	5841      	ldrmi	r1, [r0, r1]
 801b956:	681d      	ldrpl	r5, [r3, #0]
 801b958:	4630      	mov	r0, r6
 801b95a:	bf48      	it	mi
 801b95c:	58cd      	ldrmi	r5, [r1, r3]
 801b95e:	4621      	mov	r1, r4
 801b960:	9b05      	ldr	r3, [sp, #20]
 801b962:	9301      	str	r3, [sp, #4]
 801b964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b966:	9300      	str	r3, [sp, #0]
 801b968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b96a:	47a8      	blx	r5
 801b96c:	b006      	add	sp, #24
 801b96e:	bd70      	pop	{r4, r5, r6, pc}
 801b970:	20000030 	.word	0x20000030

0801b974 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b978:	b09d      	sub	sp, #116	; 0x74
 801b97a:	9114      	str	r1, [sp, #80]	; 0x50
 801b97c:	9315      	str	r3, [sp, #84]	; 0x54
 801b97e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b980:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b982:	8809      	ldrh	r1, [r1, #0]
 801b984:	889b      	ldrh	r3, [r3, #4]
 801b986:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801b988:	440b      	add	r3, r1
 801b98a:	9210      	str	r2, [sp, #64]	; 0x40
 801b98c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801b990:	b21b      	sxth	r3, r3
 801b992:	900f      	str	r0, [sp, #60]	; 0x3c
 801b994:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801b998:	930e      	str	r3, [sp, #56]	; 0x38
 801b99a:	6833      	ldr	r3, [r6, #0]
 801b99c:	7a59      	ldrb	r1, [r3, #9]
 801b99e:	7a1b      	ldrb	r3, [r3, #8]
 801b9a0:	9113      	str	r1, [sp, #76]	; 0x4c
 801b9a2:	9312      	str	r3, [sp, #72]	; 0x48
 801b9a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b9a6:	f9b3 4000 	ldrsh.w	r4, [r3]
 801b9aa:	2a00      	cmp	r2, #0
 801b9ac:	d059      	beq.n	801ba62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801b9ae:	7c33      	ldrb	r3, [r6, #16]
 801b9b0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b9b2:	2b04      	cmp	r3, #4
 801b9b4:	bf14      	ite	ne
 801b9b6:	2301      	movne	r3, #1
 801b9b8:	2302      	moveq	r3, #2
 801b9ba:	4413      	add	r3, r2
 801b9bc:	f04f 0800 	mov.w	r8, #0
 801b9c0:	930d      	str	r3, [sp, #52]	; 0x34
 801b9c2:	4645      	mov	r5, r8
 801b9c4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801b9c8:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801b9cc:	4293      	cmp	r3, r2
 801b9ce:	da75      	bge.n	801babc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	992b      	ldr	r1, [sp, #172]	; 0xac
 801b9d4:	6832      	ldr	r2, [r6, #0]
 801b9d6:	931a      	str	r3, [sp, #104]	; 0x68
 801b9d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9da:	428b      	cmp	r3, r1
 801b9dc:	db43      	blt.n	801ba66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801b9de:	6813      	ldr	r3, [r2, #0]
 801b9e0:	4610      	mov	r0, r2
 801b9e2:	695b      	ldr	r3, [r3, #20]
 801b9e4:	4798      	blx	r3
 801b9e6:	4681      	mov	r9, r0
 801b9e8:	6830      	ldr	r0, [r6, #0]
 801b9ea:	aa1b      	add	r2, sp, #108	; 0x6c
 801b9ec:	4649      	mov	r1, r9
 801b9ee:	6803      	ldr	r3, [r0, #0]
 801b9f0:	689f      	ldr	r7, [r3, #8]
 801b9f2:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801b9f6:	47b8      	blx	r7
 801b9f8:	901a      	str	r0, [sp, #104]	; 0x68
 801b9fa:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801b9fe:	45d1      	cmp	r9, sl
 801ba00:	d045      	beq.n	801ba8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801ba02:	f242 070b 	movw	r7, #8203	; 0x200b
 801ba06:	45b9      	cmp	r9, r7
 801ba08:	d041      	beq.n	801ba8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801ba0a:	f1b9 0f00 	cmp.w	r9, #0
 801ba0e:	f000 80ee 	beq.w	801bbee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801ba12:	f1b9 0f0a 	cmp.w	r9, #10
 801ba16:	d057      	beq.n	801bac8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801ba18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ba1a:	b383      	cbz	r3, 801ba7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801ba1c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801ba20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ba22:	2a00      	cmp	r2, #0
 801ba24:	f000 80d2 	beq.w	801bbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801ba28:	f1bb 0f00 	cmp.w	fp, #0
 801ba2c:	d100      	bne.n	801ba30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801ba2e:	4444      	add	r4, r8
 801ba30:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801ba34:	f1bb 0f01 	cmp.w	fp, #1
 801ba38:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801ba3c:	f892 800a 	ldrb.w	r8, [r2, #10]
 801ba40:	ea48 0803 	orr.w	r8, r8, r3
 801ba44:	d128      	bne.n	801ba98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801ba46:	eba4 0408 	sub.w	r4, r4, r8
 801ba4a:	2d00      	cmp	r5, #0
 801ba4c:	d143      	bne.n	801bad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801ba4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba50:	eb08 0304 	add.w	r3, r8, r4
 801ba54:	4413      	add	r3, r2
 801ba56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ba58:	f9b2 2000 	ldrsh.w	r2, [r2]
 801ba5c:	4293      	cmp	r3, r2
 801ba5e:	da44      	bge.n	801baea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801ba60:	e02b      	b.n	801baba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801ba62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ba64:	e7aa      	b.n	801b9bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801ba66:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801ba6a:	4659      	mov	r1, fp
 801ba6c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801ba6e:	9301      	str	r3, [sp, #4]
 801ba70:	ab1b      	add	r3, sp, #108	; 0x6c
 801ba72:	9300      	str	r3, [sp, #0]
 801ba74:	ab1a      	add	r3, sp, #104	; 0x68
 801ba76:	f002 facd 	bl	801e014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801ba7a:	4681      	mov	r9, r0
 801ba7c:	e7bd      	b.n	801b9fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801ba7e:	6830      	ldr	r0, [r6, #0]
 801ba80:	6803      	ldr	r3, [r0, #0]
 801ba82:	691b      	ldr	r3, [r3, #16]
 801ba84:	4798      	blx	r3
 801ba86:	4550      	cmp	r0, sl
 801ba88:	d001      	beq.n	801ba8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801ba8a:	42b8      	cmp	r0, r7
 801ba8c:	d1c8      	bne.n	801ba20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801ba8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba90:	464d      	mov	r5, r9
 801ba92:	3301      	adds	r3, #1
 801ba94:	930c      	str	r3, [sp, #48]	; 0x30
 801ba96:	e797      	b.n	801b9c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801ba98:	2d00      	cmp	r5, #0
 801ba9a:	f000 80aa 	beq.w	801bbf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801ba9e:	f1bb 0f00 	cmp.w	fp, #0
 801baa2:	d118      	bne.n	801bad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801baa4:	6830      	ldr	r0, [r6, #0]
 801baa6:	4629      	mov	r1, r5
 801baa8:	6803      	ldr	r3, [r0, #0]
 801baaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801baac:	4798      	blx	r3
 801baae:	4404      	add	r4, r0
 801bab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bab4:	1ae3      	subs	r3, r4, r3
 801bab6:	4293      	cmp	r3, r2
 801bab8:	dd17      	ble.n	801baea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801baba:	464d      	mov	r5, r9
 801babc:	2d00      	cmp	r5, #0
 801babe:	f000 8096 	beq.w	801bbee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801bac2:	2d0a      	cmp	r5, #10
 801bac4:	f040 8084 	bne.w	801bbd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801bac8:	250a      	movs	r5, #10
 801baca:	fab5 f085 	clz	r0, r5
 801bace:	0940      	lsrs	r0, r0, #5
 801bad0:	b01d      	add	sp, #116	; 0x74
 801bad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad6:	6830      	ldr	r0, [r6, #0]
 801bad8:	4629      	mov	r1, r5
 801bada:	6803      	ldr	r3, [r0, #0]
 801badc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bade:	4798      	blx	r3
 801bae0:	f1bb 0f01 	cmp.w	fp, #1
 801bae4:	eba4 0400 	sub.w	r4, r4, r0
 801bae8:	d0b1      	beq.n	801ba4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801baea:	981a      	ldr	r0, [sp, #104]	; 0x68
 801baec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801baee:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801baf2:	f9b3 5000 	ldrsh.w	r5, [r3]
 801baf6:	7b43      	ldrb	r3, [r0, #13]
 801baf8:	4421      	add	r1, r4
 801bafa:	015b      	lsls	r3, r3, #5
 801bafc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb00:	7983      	ldrb	r3, [r0, #6]
 801bb02:	4313      	orrs	r3, r2
 801bb04:	440b      	add	r3, r1
 801bb06:	42ab      	cmp	r3, r5
 801bb08:	dbc1      	blt.n	801ba8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bb0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb0c:	4299      	cmp	r1, r3
 801bb0e:	dabe      	bge.n	801ba8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bb10:	6830      	ldr	r0, [r6, #0]
 801bb12:	42a5      	cmp	r5, r4
 801bb14:	6803      	ldr	r3, [r0, #0]
 801bb16:	bfcc      	ite	gt
 801bb18:	1b2d      	subgt	r5, r5, r4
 801bb1a:	2500      	movle	r5, #0
 801bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb1e:	bfc8      	it	gt
 801bb20:	b2ad      	uxthgt	r5, r5
 801bb22:	4798      	blx	r3
 801bb24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801bb26:	4935      	ldr	r1, [pc, #212]	; (801bbfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801bb28:	7b5a      	ldrb	r2, [r3, #13]
 801bb2a:	f893 e008 	ldrb.w	lr, [r3, #8]
 801bb2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 801bb32:	bf18      	it	ne
 801bb34:	468c      	movne	ip, r1
 801bb36:	9915      	ldr	r1, [sp, #84]	; 0x54
 801bb38:	bf08      	it	eq
 801bb3a:	f04f 0c00 	moveq.w	ip, #0
 801bb3e:	4408      	add	r0, r1
 801bb40:	00d1      	lsls	r1, r2, #3
 801bb42:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bb46:	ea41 070e 	orr.w	r7, r1, lr
 801bb4a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801bb4c:	ea4c 0707 	orr.w	r7, ip, r7
 801bb50:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801bb54:	1bc7      	subs	r7, r0, r7
 801bb56:	b2bf      	uxth	r7, r7
 801bb58:	fa0f fa87 	sxth.w	sl, r7
 801bb5c:	4551      	cmp	r1, sl
 801bb5e:	dd33      	ble.n	801bbc8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801bb60:	0112      	lsls	r2, r2, #4
 801bb62:	79d8      	ldrb	r0, [r3, #7]
 801bb64:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bb68:	4302      	orrs	r2, r0
 801bb6a:	4492      	add	sl, r2
 801bb6c:	4551      	cmp	r1, sl
 801bb6e:	dc8e      	bgt.n	801ba8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bb70:	1bcf      	subs	r7, r1, r7
 801bb72:	468a      	mov	sl, r1
 801bb74:	b2bf      	uxth	r7, r7
 801bb76:	9317      	str	r3, [sp, #92]	; 0x5c
 801bb78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb7a:	6830      	ldr	r0, [r6, #0]
 801bb7c:	681a      	ldr	r2, [r3, #0]
 801bb7e:	6801      	ldr	r1, [r0, #0]
 801bb80:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801bb82:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801bb84:	9311      	str	r3, [sp, #68]	; 0x44
 801bb86:	9216      	str	r2, [sp, #88]	; 0x58
 801bb88:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801bb8a:	4788      	blx	r1
 801bb8c:	79b1      	ldrb	r1, [r6, #6]
 801bb8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bb90:	910b      	str	r1, [sp, #44]	; 0x2c
 801bb92:	7bb1      	ldrb	r1, [r6, #14]
 801bb94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bb96:	910a      	str	r1, [sp, #40]	; 0x28
 801bb98:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801bb9c:	9109      	str	r1, [sp, #36]	; 0x24
 801bb9e:	68b1      	ldr	r1, [r6, #8]
 801bba0:	9305      	str	r3, [sp, #20]
 801bba2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bba4:	9206      	str	r2, [sp, #24]
 801bba6:	e9cd a501 	strd	sl, r5, [sp, #4]
 801bbaa:	4425      	add	r5, r4
 801bbac:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801bbb0:	b22d      	sxth	r5, r5
 801bbb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbb4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801bbb8:	9500      	str	r5, [sp, #0]
 801bbba:	9914      	ldr	r1, [sp, #80]	; 0x50
 801bbbc:	681a      	ldr	r2, [r3, #0]
 801bbbe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bbc0:	685b      	ldr	r3, [r3, #4]
 801bbc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bbc4:	47a8      	blx	r5
 801bbc6:	e762      	b.n	801ba8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bbc8:	2700      	movs	r7, #0
 801bbca:	e7d4      	b.n	801bb76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801bbcc:	4690      	mov	r8, r2
 801bbce:	e75e      	b.n	801ba8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801bbd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bbd2:	3401      	adds	r4, #1
 801bbd4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bbd6:	429c      	cmp	r4, r3
 801bbd8:	f6bf af77 	bge.w	801baca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801bbdc:	4659      	mov	r1, fp
 801bbde:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801bbe0:	f002 f9a4 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bbe4:	4605      	mov	r5, r0
 801bbe6:	b110      	cbz	r0, 801bbee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801bbe8:	280a      	cmp	r0, #10
 801bbea:	d1f2      	bne.n	801bbd2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801bbec:	e76c      	b.n	801bac8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801bbee:	2500      	movs	r5, #0
 801bbf0:	e76b      	b.n	801baca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801bbf2:	f1bb 0f00 	cmp.w	fp, #0
 801bbf6:	f43f af5b 	beq.w	801bab0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801bbfa:	e776      	b.n	801baea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801bbfc:	fffffe00 	.word	0xfffffe00

0801bc00 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801bc00:	b530      	push	{r4, r5, lr}
 801bc02:	8a44      	ldrh	r4, [r0, #18]
 801bc04:	8ac5      	ldrh	r5, [r0, #22]
 801bc06:	82c3      	strh	r3, [r0, #22]
 801bc08:	442c      	add	r4, r5
 801bc0a:	1ae4      	subs	r4, r4, r3
 801bc0c:	8b03      	ldrh	r3, [r0, #24]
 801bc0e:	8244      	strh	r4, [r0, #18]
 801bc10:	8a84      	ldrh	r4, [r0, #20]
 801bc12:	4422      	add	r2, r4
 801bc14:	440c      	add	r4, r1
 801bc16:	1a59      	subs	r1, r3, r1
 801bc18:	8342      	strh	r2, [r0, #26]
 801bc1a:	8284      	strh	r4, [r0, #20]
 801bc1c:	8301      	strh	r1, [r0, #24]
 801bc1e:	bd30      	pop	{r4, r5, pc}

0801bc20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc24:	7a45      	ldrb	r5, [r0, #9]
 801bc26:	b085      	sub	sp, #20
 801bc28:	4604      	mov	r4, r0
 801bc2a:	4689      	mov	r9, r1
 801bc2c:	1eeb      	subs	r3, r5, #3
 801bc2e:	b2db      	uxtb	r3, r3
 801bc30:	b329      	cbz	r1, 801bc7e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801bc32:	2b01      	cmp	r3, #1
 801bc34:	d921      	bls.n	801bc7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801bc36:	1e69      	subs	r1, r5, #1
 801bc38:	f1d1 0b00 	rsbs	fp, r1, #0
 801bc3c:	eb4b 0b01 	adc.w	fp, fp, r1
 801bc40:	1eaa      	subs	r2, r5, #2
 801bc42:	2500      	movs	r5, #0
 801bc44:	4253      	negs	r3, r2
 801bc46:	9500      	str	r5, [sp, #0]
 801bc48:	4153      	adcs	r3, r2
 801bc4a:	9301      	str	r3, [sp, #4]
 801bc4c:	2600      	movs	r6, #0
 801bc4e:	f242 080b 	movw	r8, #8203	; 0x200b
 801bc52:	8266      	strh	r6, [r4, #18]
 801bc54:	82a6      	strh	r6, [r4, #20]
 801bc56:	2300      	movs	r3, #0
 801bc58:	68e2      	ldr	r2, [r4, #12]
 801bc5a:	7a21      	ldrb	r1, [r4, #8]
 801bc5c:	9303      	str	r3, [sp, #12]
 801bc5e:	ab03      	add	r3, sp, #12
 801bc60:	6860      	ldr	r0, [r4, #4]
 801bc62:	8827      	ldrh	r7, [r4, #0]
 801bc64:	f002 f9a2 	bl	801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bc68:	8020      	strh	r0, [r4, #0]
 801bc6a:	b9b0      	cbnz	r0, 801bc9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801bc6c:	8b22      	ldrh	r2, [r4, #24]
 801bc6e:	2300      	movs	r3, #0
 801bc70:	4611      	mov	r1, r2
 801bc72:	4620      	mov	r0, r4
 801bc74:	f7ff ffc4 	bl	801bc00 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801bc78:	e062      	b.n	801bd40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801bc7a:	468b      	mov	fp, r1
 801bc7c:	e7e0      	b.n	801bc40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801bc7e:	2b01      	cmp	r3, #1
 801bc80:	f105 35ff 	add.w	r5, r5, #4294967295
 801bc84:	9101      	str	r1, [sp, #4]
 801bc86:	468b      	mov	fp, r1
 801bc88:	bf8c      	ite	hi
 801bc8a:	2300      	movhi	r3, #0
 801bc8c:	2301      	movls	r3, #1
 801bc8e:	2d01      	cmp	r5, #1
 801bc90:	9300      	str	r3, [sp, #0]
 801bc92:	bf8c      	ite	hi
 801bc94:	2500      	movhi	r5, #0
 801bc96:	2501      	movls	r5, #1
 801bc98:	e7d8      	b.n	801bc4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801bc9a:	8ae3      	ldrh	r3, [r4, #22]
 801bc9c:	280a      	cmp	r0, #10
 801bc9e:	f103 0301 	add.w	r3, r3, #1
 801bca2:	82e3      	strh	r3, [r4, #22]
 801bca4:	d0e2      	beq.n	801bc6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801bca6:	9a03      	ldr	r2, [sp, #12]
 801bca8:	b972      	cbnz	r2, 801bcc8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801bcaa:	4540      	cmp	r0, r8
 801bcac:	d1d3      	bne.n	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bcae:	8823      	ldrh	r3, [r4, #0]
 801bcb0:	8b21      	ldrh	r1, [r4, #24]
 801bcb2:	2b20      	cmp	r3, #32
 801bcb4:	d001      	beq.n	801bcba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801bcb6:	4543      	cmp	r3, r8
 801bcb8:	d11d      	bne.n	801bcf6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801bcba:	2f20      	cmp	r7, #32
 801bcbc:	d002      	beq.n	801bcc4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801bcbe:	4547      	cmp	r7, r8
 801bcc0:	bf18      	it	ne
 801bcc2:	460e      	movne	r6, r1
 801bcc4:	2001      	movs	r0, #1
 801bcc6:	e017      	b.n	801bcf8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801bcc8:	4540      	cmp	r0, r8
 801bcca:	d012      	beq.n	801bcf2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801bccc:	8893      	ldrh	r3, [r2, #4]
 801bcce:	4639      	mov	r1, r7
 801bcd0:	8023      	strh	r3, [r4, #0]
 801bcd2:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801bcd6:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801bcda:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801bcde:	ea4a 0a00 	orr.w	sl, sl, r0
 801bce2:	68e0      	ldr	r0, [r4, #12]
 801bce4:	6803      	ldr	r3, [r0, #0]
 801bce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bce8:	4798      	blx	r3
 801bcea:	eb0a 0200 	add.w	r2, sl, r0
 801bcee:	b292      	uxth	r2, r2
 801bcf0:	e7dd      	b.n	801bcae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	e7db      	b.n	801bcae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801bcf6:	2000      	movs	r0, #0
 801bcf8:	440a      	add	r2, r1
 801bcfa:	8aa3      	ldrh	r3, [r4, #20]
 801bcfc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801bd00:	b292      	uxth	r2, r2
 801bd02:	8322      	strh	r2, [r4, #24]
 801bd04:	4413      	add	r3, r2
 801bd06:	f1b9 0f00 	cmp.w	r9, #0
 801bd0a:	d022      	beq.n	801bd52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801bd0c:	f1bb 0f00 	cmp.w	fp, #0
 801bd10:	d102      	bne.n	801bd18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801bd12:	9901      	ldr	r1, [sp, #4]
 801bd14:	b149      	cbz	r1, 801bd2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801bd16:	b140      	cbz	r0, 801bd2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801bd18:	8ba1      	ldrh	r1, [r4, #28]
 801bd1a:	4419      	add	r1, r3
 801bd1c:	458c      	cmp	ip, r1
 801bd1e:	da12      	bge.n	801bd46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801bd20:	8a61      	ldrh	r1, [r4, #18]
 801bd22:	b181      	cbz	r1, 801bd46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801bd24:	4563      	cmp	r3, ip
 801bd26:	dd96      	ble.n	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd28:	e004      	b.n	801bd34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801bd2a:	4563      	cmp	r3, ip
 801bd2c:	dd93      	ble.n	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd2e:	8a63      	ldrh	r3, [r4, #18]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d090      	beq.n	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd34:	2301      	movs	r3, #1
 801bd36:	8ba2      	ldrh	r2, [r4, #28]
 801bd38:	77a3      	strb	r3, [r4, #30]
 801bd3a:	8b63      	ldrh	r3, [r4, #26]
 801bd3c:	4413      	add	r3, r2
 801bd3e:	8363      	strh	r3, [r4, #26]
 801bd40:	b005      	add	sp, #20
 801bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd46:	2300      	movs	r3, #0
 801bd48:	4611      	mov	r1, r2
 801bd4a:	4620      	mov	r0, r4
 801bd4c:	f7ff ff58 	bl	801bc00 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801bd50:	e781      	b.n	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd52:	4563      	cmp	r3, ip
 801bd54:	dd16      	ble.n	801bd84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801bd56:	9b00      	ldr	r3, [sp, #0]
 801bd58:	b113      	cbz	r3, 801bd60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801bd5a:	2301      	movs	r3, #1
 801bd5c:	460a      	mov	r2, r1
 801bd5e:	e787      	b.n	801bc70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801bd60:	2d00      	cmp	r5, #0
 801bd62:	f43f af78 	beq.w	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd66:	2800      	cmp	r0, #0
 801bd68:	f47f af75 	bne.w	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd6c:	2f20      	cmp	r7, #32
 801bd6e:	d001      	beq.n	801bd74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801bd70:	4547      	cmp	r7, r8
 801bd72:	d102      	bne.n	801bd7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801bd74:	2301      	movs	r3, #1
 801bd76:	4632      	mov	r2, r6
 801bd78:	e77b      	b.n	801bc72 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801bd7a:	8a63      	ldrh	r3, [r4, #18]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	f43f af6a 	beq.w	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd82:	e7dd      	b.n	801bd40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801bd84:	2800      	cmp	r0, #0
 801bd86:	f47f af66 	bne.w	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd8a:	2f20      	cmp	r7, #32
 801bd8c:	d002      	beq.n	801bd94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801bd8e:	4547      	cmp	r7, r8
 801bd90:	f47f af61 	bne.w	801bc56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801bd94:	2301      	movs	r3, #1
 801bd96:	4632      	mov	r2, r6
 801bd98:	e7d7      	b.n	801bd4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801bd9a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801bd9a:	b570      	push	{r4, r5, r6, lr}
 801bd9c:	4606      	mov	r6, r0
 801bd9e:	b08a      	sub	sp, #40	; 0x28
 801bda0:	4615      	mov	r5, r2
 801bda2:	b191      	cbz	r1, 801bdca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801bda4:	2401      	movs	r4, #1
 801bda6:	e9cd 3100 	strd	r3, r1, [sp]
 801bdaa:	4613      	mov	r3, r2
 801bdac:	4601      	mov	r1, r0
 801bdae:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801bdb2:	a802      	add	r0, sp, #8
 801bdb4:	f7ff fd20 	bl	801b7f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801bdb8:	2100      	movs	r1, #0
 801bdba:	a802      	add	r0, sp, #8
 801bdbc:	f7ff ff30 	bl	801bc20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bdc0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bdc4:	b173      	cbz	r3, 801bde4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801bdc6:	3401      	adds	r4, #1
 801bdc8:	e7f6      	b.n	801bdb8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801bdca:	2401      	movs	r4, #1
 801bdcc:	4611      	mov	r1, r2
 801bdce:	f002 f8ad 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bdd2:	280a      	cmp	r0, #10
 801bdd4:	4629      	mov	r1, r5
 801bdd6:	4630      	mov	r0, r6
 801bdd8:	bf08      	it	eq
 801bdda:	3401      	addeq	r4, #1
 801bddc:	f002 f8a6 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bde0:	2800      	cmp	r0, #0
 801bde2:	d1f6      	bne.n	801bdd2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801bde4:	b2a0      	uxth	r0, r4
 801bde6:	b00a      	add	sp, #40	; 0x28
 801bde8:	bd70      	pop	{r4, r5, r6, pc}

0801bdea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801bdea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdee:	b0db      	sub	sp, #364	; 0x16c
 801bdf0:	468a      	mov	sl, r1
 801bdf2:	461c      	mov	r4, r3
 801bdf4:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801bdf8:	9009      	str	r0, [sp, #36]	; 0x24
 801bdfa:	f1bb 0f00 	cmp.w	fp, #0
 801bdfe:	f000 80c7 	beq.w	801bf90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	2b00      	cmp	r3, #0
 801be06:	f000 80c3 	beq.w	801bf90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be0a:	7ba3      	ldrb	r3, [r4, #14]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	f000 80bf 	beq.w	801bf90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801be12:	af0c      	add	r7, sp, #48	; 0x30
 801be14:	6810      	ldr	r0, [r2, #0]
 801be16:	6851      	ldr	r1, [r2, #4]
 801be18:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801be1c:	463b      	mov	r3, r7
 801be1e:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801be22:	c303      	stmia	r3!, {r0, r1}
 801be24:	2100      	movs	r1, #0
 801be26:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801be2a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801be2e:	4638      	mov	r0, r7
 801be30:	910e      	str	r1, [sp, #56]	; 0x38
 801be32:	a90e      	add	r1, sp, #56	; 0x38
 801be34:	79a2      	ldrb	r2, [r4, #6]
 801be36:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801be3a:	f7ff fd49 	bl	801b8d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801be3e:	a90e      	add	r1, sp, #56	; 0x38
 801be40:	79a2      	ldrb	r2, [r4, #6]
 801be42:	4608      	mov	r0, r1
 801be44:	f7ff fd44 	bl	801b8d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801be48:	4648      	mov	r0, r9
 801be4a:	f001 ff2d 	bl	801dca8 <_ZN8touchgfx12TextProviderC1Ev>
 801be4e:	6820      	ldr	r0, [r4, #0]
 801be50:	6803      	ldr	r3, [r0, #0]
 801be52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be54:	4798      	blx	r3
 801be56:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801be58:	4603      	mov	r3, r0
 801be5a:	4659      	mov	r1, fp
 801be5c:	4648      	mov	r0, r9
 801be5e:	f001 ff40 	bl	801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801be62:	a82e      	add	r0, sp, #184	; 0xb8
 801be64:	f001 ff20 	bl	801dca8 <_ZN8touchgfx12TextProviderC1Ev>
 801be68:	f894 8004 	ldrb.w	r8, [r4, #4]
 801be6c:	f1b8 0f00 	cmp.w	r8, #0
 801be70:	d009      	beq.n	801be86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801be72:	6820      	ldr	r0, [r4, #0]
 801be74:	6803      	ldr	r3, [r0, #0]
 801be76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be78:	4798      	blx	r3
 801be7a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801be7c:	4603      	mov	r3, r0
 801be7e:	4659      	mov	r1, fp
 801be80:	a82e      	add	r0, sp, #184	; 0xb8
 801be82:	f001 ff2e 	bl	801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801be86:	6820      	ldr	r0, [r4, #0]
 801be88:	6803      	ldr	r3, [r0, #0]
 801be8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be8c:	4798      	blx	r3
 801be8e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801be92:	182e      	adds	r6, r5, r0
 801be94:	2e00      	cmp	r6, #0
 801be96:	dd45      	ble.n	801bf24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801be98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801be9c:	4283      	cmp	r3, r0
 801be9e:	db41      	blt.n	801bf24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801bea0:	441d      	add	r5, r3
 801bea2:	fb95 f5f6 	sdiv	r5, r5, r6
 801bea6:	a844      	add	r0, sp, #272	; 0x110
 801bea8:	f001 fefe 	bl	801dca8 <_ZN8touchgfx12TextProviderC1Ev>
 801beac:	7c23      	ldrb	r3, [r4, #16]
 801beae:	b14b      	cbz	r3, 801bec4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801beb0:	6820      	ldr	r0, [r4, #0]
 801beb2:	6803      	ldr	r3, [r0, #0]
 801beb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801beb6:	4798      	blx	r3
 801beb8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801beba:	4603      	mov	r3, r0
 801bebc:	4659      	mov	r1, fp
 801bebe:	a844      	add	r0, sp, #272	; 0x110
 801bec0:	f001 ff0f 	bl	801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bec4:	7c21      	ldrb	r1, [r4, #16]
 801bec6:	a810      	add	r0, sp, #64	; 0x40
 801bec8:	7963      	ldrb	r3, [r4, #5]
 801beca:	9101      	str	r1, [sp, #4]
 801becc:	6821      	ldr	r1, [r4, #0]
 801bece:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801bed2:	9100      	str	r1, [sp, #0]
 801bed4:	a944      	add	r1, sp, #272	; 0x110
 801bed6:	f7ff fc8f 	bl	801b7f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801beda:	7c23      	ldrb	r3, [r4, #16]
 801bedc:	bb23      	cbnz	r3, 801bf28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801bede:	fa1f fb86 	uxth.w	fp, r6
 801bee2:	2d00      	cmp	r5, #0
 801bee4:	dd57      	ble.n	801bf96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801bee6:	7961      	ldrb	r1, [r4, #5]
 801bee8:	4648      	mov	r0, r9
 801beea:	f002 f81f 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801beee:	4603      	mov	r3, r0
 801bef0:	f1b8 0f00 	cmp.w	r8, #0
 801bef4:	d005      	beq.n	801bf02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801bef6:	9008      	str	r0, [sp, #32]
 801bef8:	a82e      	add	r0, sp, #184	; 0xb8
 801befa:	7961      	ldrb	r1, [r4, #5]
 801befc:	f002 f816 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bf00:	9b08      	ldr	r3, [sp, #32]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d044      	beq.n	801bf90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801bf06:	2b0a      	cmp	r3, #10
 801bf08:	d1eb      	bne.n	801bee2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801bf0a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801bf0e:	3d01      	subs	r5, #1
 801bf10:	445b      	add	r3, fp
 801bf12:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bf16:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bf1a:	eba3 030b 	sub.w	r3, r3, fp
 801bf1e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bf22:	e7de      	b.n	801bee2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801bf24:	2500      	movs	r5, #0
 801bf26:	e7be      	b.n	801bea6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801bf28:	0073      	lsls	r3, r6, #1
 801bf2a:	9308      	str	r3, [sp, #32]
 801bf2c:	2d00      	cmp	r5, #0
 801bf2e:	dd32      	ble.n	801bf96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801bf30:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801bf34:	a810      	add	r0, sp, #64	; 0x40
 801bf36:	9b08      	ldr	r3, [sp, #32]
 801bf38:	428b      	cmp	r3, r1
 801bf3a:	bfd4      	ite	le
 801bf3c:	2100      	movle	r1, #0
 801bf3e:	2101      	movgt	r1, #1
 801bf40:	f7ff fe6e 	bl	801bc20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bf44:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801bf48:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bf4c:	fa1f fb83 	uxth.w	fp, r3
 801bf50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bf54:	459b      	cmp	fp, r3
 801bf56:	d00b      	beq.n	801bf70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801bf58:	7961      	ldrb	r1, [r4, #5]
 801bf5a:	4648      	mov	r0, r9
 801bf5c:	f001 ffe6 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bf60:	f1b8 0f00 	cmp.w	r8, #0
 801bf64:	d0f0      	beq.n	801bf48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801bf66:	7961      	ldrb	r1, [r4, #5]
 801bf68:	a82e      	add	r0, sp, #184	; 0xb8
 801bf6a:	f001 ffdf 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bf6e:	e7eb      	b.n	801bf48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801bf70:	b2b3      	uxth	r3, r6
 801bf72:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801bf76:	3d01      	subs	r5, #1
 801bf78:	441a      	add	r2, r3
 801bf7a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801bf7e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801bf82:	1ad3      	subs	r3, r2, r3
 801bf84:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bf88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d1cd      	bne.n	801bf2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801bf90:	b05b      	add	sp, #364	; 0x16c
 801bf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf96:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801bf9a:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801bf9e:	7c23      	ldrb	r3, [r4, #16]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d05f      	beq.n	801c064 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801bfa4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801bfa8:	a810      	add	r0, sp, #64	; 0x40
 801bfaa:	458b      	cmp	fp, r1
 801bfac:	bfd4      	ite	le
 801bfae:	2100      	movle	r1, #0
 801bfb0:	2101      	movgt	r1, #1
 801bfb2:	f7ff fe35 	bl	801bc20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bfb6:	f1b8 0f00 	cmp.w	r8, #0
 801bfba:	d04c      	beq.n	801c056 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801bfbc:	7c23      	ldrb	r3, [r4, #16]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d053      	beq.n	801c06a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801bfc2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801bfc6:	7922      	ldrb	r2, [r4, #4]
 801bfc8:	2a01      	cmp	r2, #1
 801bfca:	d13c      	bne.n	801c046 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801bfcc:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801bfd0:	1ac0      	subs	r0, r0, r3
 801bfd2:	2302      	movs	r3, #2
 801bfd4:	fb90 f0f3 	sdiv	r0, r0, r3
 801bfd8:	b200      	sxth	r0, r0
 801bfda:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bfde:	4418      	add	r0, r3
 801bfe0:	7c23      	ldrb	r3, [r4, #16]
 801bfe2:	8028      	strh	r0, [r5, #0]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d03a      	beq.n	801c05e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801bfe8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801bfec:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801bff0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801bff4:	f8cd 9010 	str.w	r9, [sp, #16]
 801bff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bffa:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801bffe:	2200      	movs	r2, #0
 801c000:	2100      	movs	r1, #0
 801c002:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801c006:	e9cd 5700 	strd	r5, r7, [sp]
 801c00a:	4652      	mov	r2, sl
 801c00c:	f7ff fcb2 	bl	801b974 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801c010:	2800      	cmp	r0, #0
 801c012:	d1bd      	bne.n	801bf90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801c014:	b2b2      	uxth	r2, r6
 801c016:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801c01a:	4611      	mov	r1, r2
 801c01c:	4413      	add	r3, r2
 801c01e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801c022:	b21b      	sxth	r3, r3
 801c024:	1a52      	subs	r2, r2, r1
 801c026:	7c21      	ldrb	r1, [r4, #16]
 801c028:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c02c:	b212      	sxth	r2, r2
 801c02e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c032:	b109      	cbz	r1, 801c038 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801c034:	42b2      	cmp	r2, r6
 801c036:	dbab      	blt.n	801bf90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801c038:	887a      	ldrh	r2, [r7, #2]
 801c03a:	88f9      	ldrh	r1, [r7, #6]
 801c03c:	440a      	add	r2, r1
 801c03e:	b212      	sxth	r2, r2
 801c040:	4293      	cmp	r3, r2
 801c042:	ddac      	ble.n	801bf9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801c044:	e7a4      	b.n	801bf90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801c046:	2a02      	cmp	r2, #2
 801c048:	d107      	bne.n	801c05a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801c04a:	7be2      	ldrb	r2, [r4, #15]
 801c04c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801c050:	1a80      	subs	r0, r0, r2
 801c052:	1ac0      	subs	r0, r0, r3
 801c054:	e7c0      	b.n	801bfd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801c056:	7be0      	ldrb	r0, [r4, #15]
 801c058:	e7bf      	b.n	801bfda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801c05a:	2000      	movs	r0, #0
 801c05c:	e7bd      	b.n	801bfda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801c05e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c062:	e7c3      	b.n	801bfec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801c064:	f1b8 0f00 	cmp.w	r8, #0
 801c068:	d0f5      	beq.n	801c056 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801c06a:	2300      	movs	r3, #0
 801c06c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c070:	6821      	ldr	r1, [r4, #0]
 801c072:	a82e      	add	r0, sp, #184	; 0xb8
 801c074:	f7ff fbfa 	bl	801b86c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801c078:	b203      	sxth	r3, r0
 801c07a:	e7a4      	b.n	801bfc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801c07c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801c07c:	2b02      	cmp	r3, #2
 801c07e:	b510      	push	{r4, lr}
 801c080:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c084:	d00b      	beq.n	801c09e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801c086:	2b03      	cmp	r3, #3
 801c088:	d00e      	beq.n	801c0a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801c08a:	2b01      	cmp	r3, #1
 801c08c:	d001      	beq.n	801c092 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801c08e:	1860      	adds	r0, r4, r1
 801c090:	bd10      	pop	{r4, pc}
 801c092:	8880      	ldrh	r0, [r0, #4]
 801c094:	4420      	add	r0, r4
 801c096:	b200      	sxth	r0, r0
 801c098:	1a80      	subs	r0, r0, r2
 801c09a:	3801      	subs	r0, #1
 801c09c:	e7f8      	b.n	801c090 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801c09e:	8880      	ldrh	r0, [r0, #4]
 801c0a0:	4420      	add	r0, r4
 801c0a2:	b200      	sxth	r0, r0
 801c0a4:	1a40      	subs	r0, r0, r1
 801c0a6:	e7f8      	b.n	801c09a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801c0a8:	18a0      	adds	r0, r4, r2
 801c0aa:	e7f1      	b.n	801c090 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801c0ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801c0ac:	2b02      	cmp	r3, #2
 801c0ae:	b510      	push	{r4, lr}
 801c0b0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801c0b4:	d006      	beq.n	801c0c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801c0b6:	2b03      	cmp	r3, #3
 801c0b8:	d00a      	beq.n	801c0d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801c0ba:	2b01      	cmp	r3, #1
 801c0bc:	bf14      	ite	ne
 801c0be:	18a0      	addne	r0, r4, r2
 801c0c0:	1860      	addeq	r0, r4, r1
 801c0c2:	bd10      	pop	{r4, pc}
 801c0c4:	88c0      	ldrh	r0, [r0, #6]
 801c0c6:	4420      	add	r0, r4
 801c0c8:	b200      	sxth	r0, r0
 801c0ca:	1a80      	subs	r0, r0, r2
 801c0cc:	3801      	subs	r0, #1
 801c0ce:	e7f8      	b.n	801c0c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801c0d0:	88c0      	ldrh	r0, [r0, #6]
 801c0d2:	4420      	add	r0, r4
 801c0d4:	b200      	sxth	r0, r0
 801c0d6:	1a40      	subs	r0, r0, r1
 801c0d8:	e7f8      	b.n	801c0cc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801c0dc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801c0dc:	4b01      	ldr	r3, [pc, #4]	; (801c0e4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801c0de:	2200      	movs	r2, #0
 801c0e0:	601a      	str	r2, [r3, #0]
 801c0e2:	4770      	bx	lr
 801c0e4:	2000bf18 	.word	0x2000bf18

0801c0e8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801c0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0ea:	1e05      	subs	r5, r0, #0
 801c0ec:	f04f 0601 	mov.w	r6, #1
 801c0f0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c0f4:	bfba      	itte	lt
 801c0f6:	f04f 37ff 	movlt.w	r7, #4294967295
 801c0fa:	426d      	neglt	r5, r5
 801c0fc:	2701      	movge	r7, #1
 801c0fe:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801c102:	f1be 0f00 	cmp.w	lr, #0
 801c106:	bfbc      	itt	lt
 801c108:	f1ce 0e00 	rsblt	lr, lr, #0
 801c10c:	427f      	neglt	r7, r7
 801c10e:	2c00      	cmp	r4, #0
 801c110:	fa4e f001 	asr.w	r0, lr, r1
 801c114:	fa06 f101 	lsl.w	r1, r6, r1
 801c118:	bfbc      	itt	lt
 801c11a:	4264      	neglt	r4, r4
 801c11c:	427f      	neglt	r7, r7
 801c11e:	3901      	subs	r1, #1
 801c120:	ea01 010e 	and.w	r1, r1, lr
 801c124:	434d      	muls	r5, r1
 801c126:	f8dc 1000 	ldr.w	r1, [ip]
 801c12a:	fb03 1300 	mla	r3, r3, r0, r1
 801c12e:	fb95 f1f4 	sdiv	r1, r5, r4
 801c132:	fb04 5511 	mls	r5, r4, r1, r5
 801c136:	441d      	add	r5, r3
 801c138:	fb95 f3f4 	sdiv	r3, r5, r4
 801c13c:	4419      	add	r1, r3
 801c13e:	fb04 5413 	mls	r4, r4, r3, r5
 801c142:	fb02 1000 	mla	r0, r2, r0, r1
 801c146:	f8cc 4000 	str.w	r4, [ip]
 801c14a:	4378      	muls	r0, r7
 801c14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801c150 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c154:	4c24      	ldr	r4, [pc, #144]	; (801c1e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801c156:	b086      	sub	sp, #24
 801c158:	4605      	mov	r5, r0
 801c15a:	6807      	ldr	r7, [r0, #0]
 801c15c:	69a3      	ldr	r3, [r4, #24]
 801c15e:	b92b      	cbnz	r3, 801c16c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801c160:	6840      	ldr	r0, [r0, #4]
 801c162:	e9c5 7000 	strd	r7, r0, [r5]
 801c166:	b006      	add	sp, #24
 801c168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c16c:	f04f 0802 	mov.w	r8, #2
 801c170:	68a2      	ldr	r2, [r4, #8]
 801c172:	ae06      	add	r6, sp, #24
 801c174:	6820      	ldr	r0, [r4, #0]
 801c176:	fb93 f1f8 	sdiv	r1, r3, r8
 801c17a:	440a      	add	r2, r1
 801c17c:	69e1      	ldr	r1, [r4, #28]
 801c17e:	f846 2d04 	str.w	r2, [r6, #-4]!
 801c182:	9700      	str	r7, [sp, #0]
 801c184:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c186:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801c18a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c18c:	f7ff ffac 	bl	801c0e8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c190:	69a3      	ldr	r3, [r4, #24]
 801c192:	4607      	mov	r7, r0
 801c194:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c196:	9301      	str	r3, [sp, #4]
 801c198:	686b      	ldr	r3, [r5, #4]
 801c19a:	6a21      	ldr	r1, [r4, #32]
 801c19c:	9300      	str	r3, [sp, #0]
 801c19e:	9602      	str	r6, [sp, #8]
 801c1a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c1a2:	6860      	ldr	r0, [r4, #4]
 801c1a4:	f7ff ffa0 	bl	801c0e8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c1a8:	69a2      	ldr	r2, [r4, #24]
 801c1aa:	6963      	ldr	r3, [r4, #20]
 801c1ac:	4407      	add	r7, r0
 801c1ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c1b0:	68e0      	ldr	r0, [r4, #12]
 801c1b2:	fb92 f8f8 	sdiv	r8, r2, r8
 801c1b6:	4443      	add	r3, r8
 801c1b8:	9305      	str	r3, [sp, #20]
 801c1ba:	682b      	ldr	r3, [r5, #0]
 801c1bc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801c1c0:	9300      	str	r3, [sp, #0]
 801c1c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801c1c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801c1c6:	f7ff ff8f 	bl	801c0e8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c1ca:	69a3      	ldr	r3, [r4, #24]
 801c1cc:	4680      	mov	r8, r0
 801c1ce:	9602      	str	r6, [sp, #8]
 801c1d0:	9301      	str	r3, [sp, #4]
 801c1d2:	686b      	ldr	r3, [r5, #4]
 801c1d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801c1d6:	9300      	str	r3, [sp, #0]
 801c1d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801c1da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801c1dc:	6920      	ldr	r0, [r4, #16]
 801c1de:	f7ff ff83 	bl	801c0e8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801c1e2:	4440      	add	r0, r8
 801c1e4:	e7bd      	b.n	801c162 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801c1e6:	bf00      	nop
 801c1e8:	2000bf1c 	.word	0x2000bf1c

0801c1ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c1ec:	4b07      	ldr	r3, [pc, #28]	; (801c20c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c1ee:	b510      	push	{r4, lr}
 801c1f0:	781b      	ldrb	r3, [r3, #0]
 801c1f2:	2b01      	cmp	r3, #1
 801c1f4:	d108      	bne.n	801c208 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c1f6:	4b06      	ldr	r3, [pc, #24]	; (801c210 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c1f8:	880c      	ldrh	r4, [r1, #0]
 801c1fa:	881b      	ldrh	r3, [r3, #0]
 801c1fc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c200:	3b01      	subs	r3, #1
 801c202:	1b1b      	subs	r3, r3, r4
 801c204:	8003      	strh	r3, [r0, #0]
 801c206:	800a      	strh	r2, [r1, #0]
 801c208:	bd10      	pop	{r4, pc}
 801c20a:	bf00      	nop
 801c20c:	2000bee6 	.word	0x2000bee6
 801c210:	2000beea 	.word	0x2000beea

0801c214 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c214:	4b0a      	ldr	r3, [pc, #40]	; (801c240 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c216:	b510      	push	{r4, lr}
 801c218:	781b      	ldrb	r3, [r3, #0]
 801c21a:	2b01      	cmp	r3, #1
 801c21c:	d10e      	bne.n	801c23c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c21e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c222:	8843      	ldrh	r3, [r0, #2]
 801c224:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c228:	18ca      	adds	r2, r1, r3
 801c22a:	4b06      	ldr	r3, [pc, #24]	; (801c244 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c22c:	8044      	strh	r4, [r0, #2]
 801c22e:	881b      	ldrh	r3, [r3, #0]
 801c230:	1a9b      	subs	r3, r3, r2
 801c232:	8003      	strh	r3, [r0, #0]
 801c234:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c238:	8081      	strh	r1, [r0, #4]
 801c23a:	80c3      	strh	r3, [r0, #6]
 801c23c:	bd10      	pop	{r4, pc}
 801c23e:	bf00      	nop
 801c240:	2000bee6 	.word	0x2000bee6
 801c244:	2000bee2 	.word	0x2000bee2

0801c248 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c248:	4b07      	ldr	r3, [pc, #28]	; (801c268 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c24a:	b510      	push	{r4, lr}
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	2b01      	cmp	r3, #1
 801c250:	d108      	bne.n	801c264 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c252:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c256:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c25a:	8003      	strh	r3, [r0, #0]
 801c25c:	8893      	ldrh	r3, [r2, #4]
 801c25e:	3b01      	subs	r3, #1
 801c260:	1b1b      	subs	r3, r3, r4
 801c262:	800b      	strh	r3, [r1, #0]
 801c264:	bd10      	pop	{r4, pc}
 801c266:	bf00      	nop
 801c268:	2000bee6 	.word	0x2000bee6

0801c26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801c26c:	4b08      	ldr	r3, [pc, #32]	; (801c290 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801c26e:	b513      	push	{r0, r1, r4, lr}
 801c270:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c274:	2400      	movs	r4, #0
 801c276:	4b07      	ldr	r3, [pc, #28]	; (801c294 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801c278:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c27c:	466a      	mov	r2, sp
 801c27e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c282:	9400      	str	r4, [sp, #0]
 801c284:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c288:	f7ff ffde 	bl	801c248 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c28c:	b002      	add	sp, #8
 801c28e:	bd10      	pop	{r4, pc}
 801c290:	2000bee2 	.word	0x2000bee2
 801c294:	2000bee4 	.word	0x2000bee4

0801c298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c298:	4b0a      	ldr	r3, [pc, #40]	; (801c2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c29a:	460a      	mov	r2, r1
 801c29c:	b510      	push	{r4, lr}
 801c29e:	781b      	ldrb	r3, [r3, #0]
 801c2a0:	2b01      	cmp	r3, #1
 801c2a2:	d10d      	bne.n	801c2c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c2a4:	8881      	ldrh	r1, [r0, #4]
 801c2a6:	8803      	ldrh	r3, [r0, #0]
 801c2a8:	440b      	add	r3, r1
 801c2aa:	4601      	mov	r1, r0
 801c2ac:	3b01      	subs	r3, #1
 801c2ae:	f821 3b02 	strh.w	r3, [r1], #2
 801c2b2:	f7ff ffc9 	bl	801c248 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c2b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c2ba:	88c2      	ldrh	r2, [r0, #6]
 801c2bc:	80c3      	strh	r3, [r0, #6]
 801c2be:	8082      	strh	r2, [r0, #4]
 801c2c0:	bd10      	pop	{r4, pc}
 801c2c2:	bf00      	nop
 801c2c4:	2000bee6 	.word	0x2000bee6

0801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c2c8:	4b09      	ldr	r3, [pc, #36]	; (801c2f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c2ca:	b507      	push	{r0, r1, r2, lr}
 801c2cc:	2100      	movs	r1, #0
 801c2ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c2d2:	4b08      	ldr	r3, [pc, #32]	; (801c2f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801c2d4:	9100      	str	r1, [sp, #0]
 801c2d6:	4669      	mov	r1, sp
 801c2d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c2dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c2e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c2e4:	f7ff ffd8 	bl	801c298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c2e8:	b003      	add	sp, #12
 801c2ea:	f85d fb04 	ldr.w	pc, [sp], #4
 801c2ee:	bf00      	nop
 801c2f0:	2000bee2 	.word	0x2000bee2
 801c2f4:	2000bee4 	.word	0x2000bee4

0801c2f8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c2f8:	4b03      	ldr	r3, [pc, #12]	; (801c308 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c2fa:	6818      	ldr	r0, [r3, #0]
 801c2fc:	b110      	cbz	r0, 801c304 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c2fe:	6803      	ldr	r3, [r0, #0]
 801c300:	699b      	ldr	r3, [r3, #24]
 801c302:	4718      	bx	r3
 801c304:	4770      	bx	lr
 801c306:	bf00      	nop
 801c308:	2000bf6c 	.word	0x2000bf6c

0801c30c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c30c:	4770      	bx	lr
	...

0801c310 <_ZN8touchgfx11Application4drawEv>:
 801c310:	4b09      	ldr	r3, [pc, #36]	; (801c338 <_ZN8touchgfx11Application4drawEv+0x28>)
 801c312:	b507      	push	{r0, r1, r2, lr}
 801c314:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c318:	2100      	movs	r1, #0
 801c31a:	4b08      	ldr	r3, [pc, #32]	; (801c33c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c31c:	9100      	str	r1, [sp, #0]
 801c31e:	4669      	mov	r1, sp
 801c320:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c324:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c328:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c32c:	6803      	ldr	r3, [r0, #0]
 801c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c330:	4798      	blx	r3
 801c332:	b003      	add	sp, #12
 801c334:	f85d fb04 	ldr.w	pc, [sp], #4
 801c338:	2000bee2 	.word	0x2000bee2
 801c33c:	2000bee4 	.word	0x2000bee4

0801c340 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c340:	4b03      	ldr	r3, [pc, #12]	; (801c350 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c342:	6818      	ldr	r0, [r3, #0]
 801c344:	b110      	cbz	r0, 801c34c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c346:	6803      	ldr	r3, [r0, #0]
 801c348:	69db      	ldr	r3, [r3, #28]
 801c34a:	4718      	bx	r3
 801c34c:	4770      	bx	lr
 801c34e:	bf00      	nop
 801c350:	2000bf6c 	.word	0x2000bf6c

0801c354 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c354:	4b03      	ldr	r3, [pc, #12]	; (801c364 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c356:	6818      	ldr	r0, [r3, #0]
 801c358:	b110      	cbz	r0, 801c360 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c35a:	6803      	ldr	r3, [r0, #0]
 801c35c:	6a1b      	ldr	r3, [r3, #32]
 801c35e:	4718      	bx	r3
 801c360:	4770      	bx	lr
 801c362:	bf00      	nop
 801c364:	2000bf6c 	.word	0x2000bf6c

0801c368 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c368:	4b03      	ldr	r3, [pc, #12]	; (801c378 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c36a:	6818      	ldr	r0, [r3, #0]
 801c36c:	b110      	cbz	r0, 801c374 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c36e:	6803      	ldr	r3, [r0, #0]
 801c370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c372:	4718      	bx	r3
 801c374:	4770      	bx	lr
 801c376:	bf00      	nop
 801c378:	2000bf6c 	.word	0x2000bf6c

0801c37c <_ZN8touchgfx11Application15handleTickEventEv>:
 801c37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c380:	4d3a      	ldr	r5, [pc, #232]	; (801c46c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801c382:	4604      	mov	r4, r0
 801c384:	6828      	ldr	r0, [r5, #0]
 801c386:	b140      	cbz	r0, 801c39a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801c388:	7a03      	ldrb	r3, [r0, #8]
 801c38a:	b933      	cbnz	r3, 801c39a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801c38c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801c390:	6803      	ldr	r3, [r0, #0]
 801c392:	689b      	ldr	r3, [r3, #8]
 801c394:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c398:	4718      	bx	r3
 801c39a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801c39e:	b97b      	cbnz	r3, 801c3c0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c3a0:	b170      	cbz	r0, 801c3c0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c3a2:	7a03      	ldrb	r3, [r0, #8]
 801c3a4:	b163      	cbz	r3, 801c3c0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c3a6:	4b32      	ldr	r3, [pc, #200]	; (801c470 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801c3a8:	6818      	ldr	r0, [r3, #0]
 801c3aa:	b110      	cbz	r0, 801c3b2 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801c3ac:	6803      	ldr	r3, [r0, #0]
 801c3ae:	691b      	ldr	r3, [r3, #16]
 801c3b0:	4798      	blx	r3
 801c3b2:	6828      	ldr	r0, [r5, #0]
 801c3b4:	6803      	ldr	r3, [r0, #0]
 801c3b6:	68db      	ldr	r3, [r3, #12]
 801c3b8:	4798      	blx	r3
 801c3ba:	2301      	movs	r3, #1
 801c3bc:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801c3c0:	2500      	movs	r5, #0
 801c3c2:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801c3c6:	42a8      	cmp	r0, r5
 801c3c8:	dd0c      	ble.n	801c3e4 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801c3ca:	1963      	adds	r3, r4, r5
 801c3cc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c3d0:	b132      	cbz	r2, 801c3e0 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801c3d2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801c3d6:	4413      	add	r3, r2
 801c3d8:	6858      	ldr	r0, [r3, #4]
 801c3da:	6803      	ldr	r3, [r0, #0]
 801c3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c3de:	4798      	blx	r3
 801c3e0:	3501      	adds	r5, #1
 801c3e2:	e7ee      	b.n	801c3c2 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801c3e4:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801c3e8:	3801      	subs	r0, #1
 801c3ea:	f04f 0c00 	mov.w	ip, #0
 801c3ee:	3678      	adds	r6, #120	; 0x78
 801c3f0:	1c43      	adds	r3, r0, #1
 801c3f2:	d033      	beq.n	801c45c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801c3f4:	1823      	adds	r3, r4, r0
 801c3f6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c3fa:	bb6a      	cbnz	r2, 801c458 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801c3fc:	b281      	uxth	r1, r0
 801c3fe:	1d25      	adds	r5, r4, #4
 801c400:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801c404:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801c408:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801c40c:	4293      	cmp	r3, r2
 801c40e:	dc0a      	bgt.n	801c426 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801c410:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801c414:	4422      	add	r2, r4
 801c416:	18b1      	adds	r1, r6, r2
 801c418:	b289      	uxth	r1, r1
 801c41a:	428b      	cmp	r3, r1
 801c41c:	d919      	bls.n	801c452 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801c41e:	7851      	ldrb	r1, [r2, #1]
 801c420:	f802 1b01 	strb.w	r1, [r2], #1
 801c424:	e7f7      	b.n	801c416 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801c426:	682f      	ldr	r7, [r5, #0]
 801c428:	f105 0804 	add.w	r8, r5, #4
 801c42c:	45b9      	cmp	r9, r7
 801c42e:	d10d      	bne.n	801c44c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801c430:	4696      	mov	lr, r2
 801c432:	f1be 0f1e 	cmp.w	lr, #30
 801c436:	dc06      	bgt.n	801c446 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801c438:	f10e 0e01 	add.w	lr, lr, #1
 801c43c:	686f      	ldr	r7, [r5, #4]
 801c43e:	4573      	cmp	r3, lr
 801c440:	f845 7b04 	str.w	r7, [r5], #4
 801c444:	dcf5      	bgt.n	801c432 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801c446:	3b01      	subs	r3, #1
 801c448:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801c44c:	3201      	adds	r2, #1
 801c44e:	4645      	mov	r5, r8
 801c450:	e7da      	b.n	801c408 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801c452:	4423      	add	r3, r4
 801c454:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801c458:	3801      	subs	r0, #1
 801c45a:	e7c9      	b.n	801c3f0 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801c45c:	4b04      	ldr	r3, [pc, #16]	; (801c470 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801c45e:	6818      	ldr	r0, [r3, #0]
 801c460:	b110      	cbz	r0, 801c468 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801c462:	6803      	ldr	r3, [r0, #0]
 801c464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c466:	e795      	b.n	801c394 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801c468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c46c:	2000bf70 	.word	0x2000bf70
 801c470:	2000bf6c 	.word	0x2000bf6c

0801c474 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801c474:	b570      	push	{r4, r5, r6, lr}
 801c476:	4606      	mov	r6, r0
 801c478:	460c      	mov	r4, r1
 801c47a:	b929      	cbnz	r1, 801c488 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801c47c:	4b0c      	ldr	r3, [pc, #48]	; (801c4b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801c47e:	2164      	movs	r1, #100	; 0x64
 801c480:	4a0c      	ldr	r2, [pc, #48]	; (801c4b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801c482:	480d      	ldr	r0, [pc, #52]	; (801c4b8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801c484:	f00c f88e 	bl	80285a4 <__assert_func>
 801c488:	2300      	movs	r3, #0
 801c48a:	4d0c      	ldr	r5, [pc, #48]	; (801c4bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801c48c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c490:	6828      	ldr	r0, [r5, #0]
 801c492:	b110      	cbz	r0, 801c49a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801c494:	6803      	ldr	r3, [r0, #0]
 801c496:	695b      	ldr	r3, [r3, #20]
 801c498:	4798      	blx	r3
 801c49a:	602c      	str	r4, [r5, #0]
 801c49c:	4620      	mov	r0, r4
 801c49e:	6823      	ldr	r3, [r4, #0]
 801c4a0:	68db      	ldr	r3, [r3, #12]
 801c4a2:	4798      	blx	r3
 801c4a4:	6833      	ldr	r3, [r6, #0]
 801c4a6:	4630      	mov	r0, r6
 801c4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4ae:	4718      	bx	r3
 801c4b0:	0802c7a8 	.word	0x0802c7a8
 801c4b4:	0802c870 	.word	0x0802c870
 801c4b8:	0802c7b2 	.word	0x0802c7b2
 801c4bc:	2000bf6c 	.word	0x2000bf6c

0801c4c0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801c4c0:	b510      	push	{r4, lr}
 801c4c2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c4c6:	888a      	ldrh	r2, [r1, #4]
 801c4c8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c4cc:	4422      	add	r2, r4
 801c4ce:	b212      	sxth	r2, r2
 801c4d0:	4293      	cmp	r3, r2
 801c4d2:	da15      	bge.n	801c500 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c4d4:	8882      	ldrh	r2, [r0, #4]
 801c4d6:	4413      	add	r3, r2
 801c4d8:	b21b      	sxth	r3, r3
 801c4da:	429c      	cmp	r4, r3
 801c4dc:	da10      	bge.n	801c500 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c4de:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c4e2:	88c9      	ldrh	r1, [r1, #6]
 801c4e4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c4e8:	4419      	add	r1, r3
 801c4ea:	b209      	sxth	r1, r1
 801c4ec:	428a      	cmp	r2, r1
 801c4ee:	da07      	bge.n	801c500 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c4f0:	88c0      	ldrh	r0, [r0, #6]
 801c4f2:	4410      	add	r0, r2
 801c4f4:	b200      	sxth	r0, r0
 801c4f6:	4283      	cmp	r3, r0
 801c4f8:	bfac      	ite	ge
 801c4fa:	2000      	movge	r0, #0
 801c4fc:	2001      	movlt	r0, #1
 801c4fe:	bd10      	pop	{r4, pc}
 801c500:	2000      	movs	r0, #0
 801c502:	e7fc      	b.n	801c4fe <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801c504 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c504:	b570      	push	{r4, r5, r6, lr}
 801c506:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c50a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c50e:	42ac      	cmp	r4, r5
 801c510:	db18      	blt.n	801c544 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c512:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c516:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c51a:	429a      	cmp	r2, r3
 801c51c:	db12      	blt.n	801c544 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c51e:	8886      	ldrh	r6, [r0, #4]
 801c520:	4435      	add	r5, r6
 801c522:	888e      	ldrh	r6, [r1, #4]
 801c524:	4434      	add	r4, r6
 801c526:	b22d      	sxth	r5, r5
 801c528:	b224      	sxth	r4, r4
 801c52a:	42a5      	cmp	r5, r4
 801c52c:	db0a      	blt.n	801c544 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c52e:	88c0      	ldrh	r0, [r0, #6]
 801c530:	4418      	add	r0, r3
 801c532:	88cb      	ldrh	r3, [r1, #6]
 801c534:	441a      	add	r2, r3
 801c536:	b200      	sxth	r0, r0
 801c538:	b212      	sxth	r2, r2
 801c53a:	4290      	cmp	r0, r2
 801c53c:	bfb4      	ite	lt
 801c53e:	2000      	movlt	r0, #0
 801c540:	2001      	movge	r0, #1
 801c542:	bd70      	pop	{r4, r5, r6, pc}
 801c544:	2000      	movs	r0, #0
 801c546:	e7fc      	b.n	801c542 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801c548 <_ZN8touchgfx11Application11getInstanceEv>:
 801c548:	4b01      	ldr	r3, [pc, #4]	; (801c550 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c54a:	6818      	ldr	r0, [r3, #0]
 801c54c:	4770      	bx	lr
 801c54e:	bf00      	nop
 801c550:	2000bf7c 	.word	0x2000bf7c

0801c554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c554:	2300      	movs	r3, #0
 801c556:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c55a:	30a8      	adds	r0, #168	; 0xa8
 801c55c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801c560:	f802 3b01 	strb.w	r3, [r2], #1
 801c564:	4282      	cmp	r2, r0
 801c566:	d1fb      	bne.n	801c560 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c568:	4770      	bx	lr

0801c56a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c56a:	4603      	mov	r3, r0
 801c56c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c570:	2200      	movs	r2, #0
 801c572:	801a      	strh	r2, [r3, #0]
 801c574:	3308      	adds	r3, #8
 801c576:	f823 2c06 	strh.w	r2, [r3, #-6]
 801c57a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801c57e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801c582:	428b      	cmp	r3, r1
 801c584:	d1f5      	bne.n	801c572 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c586:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c58a:	4770      	bx	lr

0801c58c <_ZN8touchgfx11ApplicationC1Ev>:
 801c58c:	b570      	push	{r4, r5, r6, lr}
 801c58e:	4b16      	ldr	r3, [pc, #88]	; (801c5e8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801c590:	2500      	movs	r5, #0
 801c592:	4604      	mov	r4, r0
 801c594:	30a8      	adds	r0, #168	; 0xa8
 801c596:	f840 3ca8 	str.w	r3, [r0, #-168]
 801c59a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801c59e:	f7ff ffe4 	bl	801c56a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c5a2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c5a6:	f7ff ffe0 	bl	801c56a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c5aa:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801c5ae:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801c5b2:	490e      	ldr	r1, [pc, #56]	; (801c5ec <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801c5b4:	480e      	ldr	r0, [pc, #56]	; (801c5f0 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801c5b6:	f00a fadb 	bl	8026b70 <CRC_Lock>
 801c5ba:	4e0e      	ldr	r6, [pc, #56]	; (801c5f4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801c5bc:	4b0e      	ldr	r3, [pc, #56]	; (801c5f8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c5be:	b158      	cbz	r0, 801c5d8 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801c5c0:	801d      	strh	r5, [r3, #0]
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	4a0d      	ldr	r2, [pc, #52]	; (801c5fc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c5c6:	4620      	mov	r0, r4
 801c5c8:	6013      	str	r3, [r2, #0]
 801c5ca:	4a0d      	ldr	r2, [pc, #52]	; (801c600 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c5cc:	6033      	str	r3, [r6, #0]
 801c5ce:	6013      	str	r3, [r2, #0]
 801c5d0:	f7ff ffc0 	bl	801c554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c5d4:	4620      	mov	r0, r4
 801c5d6:	bd70      	pop	{r4, r5, r6, pc}
 801c5d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c5dc:	2002      	movs	r0, #2
 801c5de:	801a      	strh	r2, [r3, #0]
 801c5e0:	6030      	str	r0, [r6, #0]
 801c5e2:	f000 ff81 	bl	801d4e8 <_ZN8touchgfx6Screen4drawEv>
 801c5e6:	e7ec      	b.n	801c5c2 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801c5e8:	0802c83c 	.word	0x0802c83c
 801c5ec:	b5e8b5cd 	.word	0xb5e8b5cd
 801c5f0:	f407a5c2 	.word	0xf407a5c2
 801c5f4:	2000bf6c 	.word	0x2000bf6c
 801c5f8:	20000080 	.word	0x20000080
 801c5fc:	2000bf7c 	.word	0x2000bf7c
 801c600:	2000bf70 	.word	0x2000bf70

0801c604 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c604:	2300      	movs	r3, #0
 801c606:	8003      	strh	r3, [r0, #0]
 801c608:	8043      	strh	r3, [r0, #2]
 801c60a:	8083      	strh	r3, [r0, #4]
 801c60c:	80c3      	strh	r3, [r0, #6]
 801c60e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801c612:	4293      	cmp	r3, r2
 801c614:	b530      	push	{r4, r5, lr}
 801c616:	d912      	bls.n	801c63e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c618:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801c61c:	3b01      	subs	r3, #1
 801c61e:	6825      	ldr	r5, [r4, #0]
 801c620:	b29b      	uxth	r3, r3
 801c622:	6005      	str	r5, [r0, #0]
 801c624:	4293      	cmp	r3, r2
 801c626:	6865      	ldr	r5, [r4, #4]
 801c628:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801c62c:	6045      	str	r5, [r0, #4]
 801c62e:	d906      	bls.n	801c63e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c630:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801c634:	681d      	ldr	r5, [r3, #0]
 801c636:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801c63a:	685d      	ldr	r5, [r3, #4]
 801c63c:	6065      	str	r5, [r4, #4]
 801c63e:	bd30      	pop	{r4, r5, pc}

0801c640 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c642:	466b      	mov	r3, sp
 801c644:	4604      	mov	r4, r0
 801c646:	e883 0006 	stmia.w	r3, {r1, r2}
 801c64a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c64e:	2a07      	cmp	r2, #7
 801c650:	d906      	bls.n	801c660 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c652:	4b09      	ldr	r3, [pc, #36]	; (801c678 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c654:	f44f 7102 	mov.w	r1, #520	; 0x208
 801c658:	4a08      	ldr	r2, [pc, #32]	; (801c67c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c65a:	4809      	ldr	r0, [pc, #36]	; (801c680 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c65c:	f00b ffa2 	bl	80285a4 <__assert_func>
 801c660:	1c51      	adds	r1, r2, #1
 801c662:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c666:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c66a:	cb03      	ldmia	r3!, {r0, r1}
 801c66c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c670:	6069      	str	r1, [r5, #4]
 801c672:	b003      	add	sp, #12
 801c674:	bd30      	pop	{r4, r5, pc}
 801c676:	bf00      	nop
 801c678:	0802c7dc 	.word	0x0802c7dc
 801c67c:	0802c8b4 	.word	0x0802c8b4
 801c680:	0802c80b 	.word	0x0802c80b

0801c684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c688:	b089      	sub	sp, #36	; 0x24
 801c68a:	4606      	mov	r6, r0
 801c68c:	466c      	mov	r4, sp
 801c68e:	4620      	mov	r0, r4
 801c690:	e884 0006 	stmia.w	r4, {r1, r2}
 801c694:	f7fc fd02 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 801c698:	bbb0      	cbnz	r0, 801c708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c69a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801c69e:	b1fd      	cbz	r5, 801c6e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801c6a0:	3d01      	subs	r5, #1
 801c6a2:	af04      	add	r7, sp, #16
 801c6a4:	f04f 090a 	mov.w	r9, #10
 801c6a8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801c6ac:	ab02      	add	r3, sp, #8
 801c6ae:	fa1f f885 	uxth.w	r8, r5
 801c6b2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c6b6:	6851      	ldr	r1, [r2, #4]
 801c6b8:	c303      	stmia	r3!, {r0, r1}
 801c6ba:	4621      	mov	r1, r4
 801c6bc:	a802      	add	r0, sp, #8
 801c6be:	f7ff ff21 	bl	801c504 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c6c2:	bb08      	cbnz	r0, 801c708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c6c4:	a902      	add	r1, sp, #8
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	f7ff ff1c 	bl	801c504 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c6cc:	b1f8      	cbz	r0, 801c70e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801c6ce:	4642      	mov	r2, r8
 801c6d0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c6d4:	a806      	add	r0, sp, #24
 801c6d6:	f7ff ff95 	bl	801c604 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c6da:	f115 35ff 	adds.w	r5, r5, #4294967295
 801c6de:	d2e3      	bcs.n	801c6a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801c6e0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801c6e4:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801c6e8:	2b08      	cmp	r3, #8
 801c6ea:	d108      	bne.n	801c6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c6ec:	4629      	mov	r1, r5
 801c6ee:	a806      	add	r0, sp, #24
 801c6f0:	2207      	movs	r2, #7
 801c6f2:	f7ff ff87 	bl	801c604 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c6f6:	a906      	add	r1, sp, #24
 801c6f8:	4620      	mov	r0, r4
 801c6fa:	f7fd feca 	bl	801a492 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c6fe:	4628      	mov	r0, r5
 801c700:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c704:	f7ff ff9c 	bl	801c640 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c708:	b009      	add	sp, #36	; 0x24
 801c70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c70e:	4621      	mov	r1, r4
 801c710:	a802      	add	r0, sp, #8
 801c712:	f7ff fed5 	bl	801c4c0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c716:	b150      	cbz	r0, 801c72e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801c718:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c71c:	a806      	add	r0, sp, #24
 801c71e:	4642      	mov	r2, r8
 801c720:	f7ff ff70 	bl	801c604 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c724:	a902      	add	r1, sp, #8
 801c726:	4620      	mov	r0, r4
 801c728:	f7fd feb3 	bl	801a492 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c72c:	e7d5      	b.n	801c6da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c72e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c732:	e887 0003 	stmia.w	r7, {r0, r1}
 801c736:	a902      	add	r1, sp, #8
 801c738:	4638      	mov	r0, r7
 801c73a:	f7fd feaa 	bl	801a492 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c73e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c742:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801c746:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c74a:	fb13 f302 	smulbb	r3, r3, r2
 801c74e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c752:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c756:	fb11 f102 	smulbb	r1, r1, r2
 801c75a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c75e:	fb09 f303 	mul.w	r3, r9, r3
 801c762:	fb12 1100 	smlabb	r1, r2, r0, r1
 801c766:	220b      	movs	r2, #11
 801c768:	434a      	muls	r2, r1
 801c76a:	4293      	cmp	r3, r2
 801c76c:	dab5      	bge.n	801c6da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c76e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c772:	a806      	add	r0, sp, #24
 801c774:	4642      	mov	r2, r8
 801c776:	f7ff ff45 	bl	801c604 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c77a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c77e:	e884 0003 	stmia.w	r4, {r0, r1}
 801c782:	e7aa      	b.n	801c6da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801c784 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c784:	4b1d      	ldr	r3, [pc, #116]	; (801c7fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c786:	b530      	push	{r4, r5, lr}
 801c788:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c78c:	b085      	sub	sp, #20
 801c78e:	4b1c      	ldr	r3, [pc, #112]	; (801c800 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c790:	460c      	mov	r4, r1
 801c792:	2100      	movs	r1, #0
 801c794:	4605      	mov	r5, r0
 801c796:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c79a:	6820      	ldr	r0, [r4, #0]
 801c79c:	9100      	str	r1, [sp, #0]
 801c79e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c7a2:	ab02      	add	r3, sp, #8
 801c7a4:	6861      	ldr	r1, [r4, #4]
 801c7a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c7aa:	c303      	stmia	r3!, {r0, r1}
 801c7ac:	4669      	mov	r1, sp
 801c7ae:	a802      	add	r0, sp, #8
 801c7b0:	f7fc fc30 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801c7b4:	ab02      	add	r3, sp, #8
 801c7b6:	cb03      	ldmia	r3!, {r0, r1}
 801c7b8:	4b12      	ldr	r3, [pc, #72]	; (801c804 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c7ba:	6020      	str	r0, [r4, #0]
 801c7bc:	6818      	ldr	r0, [r3, #0]
 801c7be:	6061      	str	r1, [r4, #4]
 801c7c0:	b138      	cbz	r0, 801c7d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c7c2:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801c7c6:	b133      	cbz	r3, 801c7d6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c7c8:	6821      	ldr	r1, [r4, #0]
 801c7ca:	4628      	mov	r0, r5
 801c7cc:	6862      	ldr	r2, [r4, #4]
 801c7ce:	f7ff ff59 	bl	801c684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c7d2:	b005      	add	sp, #20
 801c7d4:	bd30      	pop	{r4, r5, pc}
 801c7d6:	6803      	ldr	r3, [r0, #0]
 801c7d8:	4621      	mov	r1, r4
 801c7da:	689b      	ldr	r3, [r3, #8]
 801c7dc:	4798      	blx	r3
 801c7de:	4b0a      	ldr	r3, [pc, #40]	; (801c808 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c7e0:	6818      	ldr	r0, [r3, #0]
 801c7e2:	b118      	cbz	r0, 801c7ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c7e4:	6803      	ldr	r3, [r0, #0]
 801c7e6:	4621      	mov	r1, r4
 801c7e8:	689b      	ldr	r3, [r3, #8]
 801c7ea:	4798      	blx	r3
 801c7ec:	4b07      	ldr	r3, [pc, #28]	; (801c80c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c7ee:	4621      	mov	r1, r4
 801c7f0:	6818      	ldr	r0, [r3, #0]
 801c7f2:	6803      	ldr	r3, [r0, #0]
 801c7f4:	695b      	ldr	r3, [r3, #20]
 801c7f6:	4798      	blx	r3
 801c7f8:	e7eb      	b.n	801c7d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c7fa:	bf00      	nop
 801c7fc:	2000bee2 	.word	0x2000bee2
 801c800:	2000bee4 	.word	0x2000bee4
 801c804:	2000bf6c 	.word	0x2000bf6c
 801c808:	2000bf68 	.word	0x2000bf68
 801c80c:	2000bef0 	.word	0x2000bef0

0801c810 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c814:	4604      	mov	r4, r0
 801c816:	b09b      	sub	sp, #108	; 0x6c
 801c818:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801c81c:	b129      	cbz	r1, 801c82a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c81e:	2300      	movs	r3, #0
 801c820:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c824:	b01b      	add	sp, #108	; 0x6c
 801c826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c82a:	4baf      	ldr	r3, [pc, #700]	; (801cae8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	b33b      	cbz	r3, 801c880 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c830:	4dae      	ldr	r5, [pc, #696]	; (801caec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c832:	4628      	mov	r0, r5
 801c834:	f7fc fc32 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 801c838:	4606      	mov	r6, r0
 801c83a:	bb08      	cbnz	r0, 801c880 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c83c:	4628      	mov	r0, r5
 801c83e:	f7ff fce9 	bl	801c214 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c842:	6829      	ldr	r1, [r5, #0]
 801c844:	686a      	ldr	r2, [r5, #4]
 801c846:	4620      	mov	r0, r4
 801c848:	f7ff ff1c 	bl	801c684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c84c:	802e      	strh	r6, [r5, #0]
 801c84e:	806e      	strh	r6, [r5, #2]
 801c850:	80ae      	strh	r6, [r5, #4]
 801c852:	80ee      	strh	r6, [r5, #6]
 801c854:	4fa6      	ldr	r7, [pc, #664]	; (801caf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c856:	a809      	add	r0, sp, #36	; 0x24
 801c858:	f7ff fe87 	bl	801c56a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c85c:	883d      	ldrh	r5, [r7, #0]
 801c85e:	462e      	mov	r6, r5
 801c860:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c864:	42b3      	cmp	r3, r6
 801c866:	d910      	bls.n	801c88a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801c868:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c86c:	3601      	adds	r6, #1
 801c86e:	a809      	add	r0, sp, #36	; 0x24
 801c870:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c874:	b2b6      	uxth	r6, r6
 801c876:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c87a:	f7ff fee1 	bl	801c640 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c87e:	e7ef      	b.n	801c860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801c880:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c884:	2b00      	cmp	r3, #0
 801c886:	d1e5      	bne.n	801c854 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801c888:	e7cc      	b.n	801c824 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c88a:	462e      	mov	r6, r5
 801c88c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c890:	42b3      	cmp	r3, r6
 801c892:	d90b      	bls.n	801c8ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c894:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c898:	3601      	adds	r6, #1
 801c89a:	4620      	mov	r0, r4
 801c89c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c8a0:	b2b6      	uxth	r6, r6
 801c8a2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c8a6:	f7ff feed 	bl	801c684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c8aa:	e7ef      	b.n	801c88c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801c8ac:	4e91      	ldr	r6, [pc, #580]	; (801caf4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c8ae:	6833      	ldr	r3, [r6, #0]
 801c8b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c8b4:	2b01      	cmp	r3, #1
 801c8b6:	f040 8092 	bne.w	801c9de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801c8ba:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c8be:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801c8c2:	f04f 0900 	mov.w	r9, #0
 801c8c6:	33aa      	adds	r3, #170	; 0xaa
 801c8c8:	42a8      	cmp	r0, r5
 801c8ca:	f103 0308 	add.w	r3, r3, #8
 801c8ce:	dd0a      	ble.n	801c8e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801c8d0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c8d4:	3501      	adds	r5, #1
 801c8d6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c8da:	440a      	add	r2, r1
 801c8dc:	b212      	sxth	r2, r2
 801c8de:	4591      	cmp	r9, r2
 801c8e0:	bfb8      	it	lt
 801c8e2:	4691      	movlt	r9, r2
 801c8e4:	e7f0      	b.n	801c8c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801c8e6:	4b84      	ldr	r3, [pc, #528]	; (801caf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801c8e8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801cb00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801c8ec:	881d      	ldrh	r5, [r3, #0]
 801c8ee:	2300      	movs	r3, #0
 801c8f0:	2d0f      	cmp	r5, #15
 801c8f2:	bf8c      	ite	hi
 801c8f4:	08ed      	lsrhi	r5, r5, #3
 801c8f6:	2501      	movls	r5, #1
 801c8f8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c8fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c900:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c904:	6830      	ldr	r0, [r6, #0]
 801c906:	440b      	add	r3, r1
 801c908:	6802      	ldr	r2, [r0, #0]
 801c90a:	b21b      	sxth	r3, r3
 801c90c:	4599      	cmp	r9, r3
 801c90e:	dd49      	ble.n	801c9a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801c910:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801c914:	4798      	blx	r3
 801c916:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c91a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c91e:	4413      	add	r3, r2
 801c920:	b21b      	sxth	r3, r3
 801c922:	195a      	adds	r2, r3, r5
 801c924:	4290      	cmp	r0, r2
 801c926:	da07      	bge.n	801c938 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801c928:	4581      	cmp	r9, r0
 801c92a:	dd05      	ble.n	801c938 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801c92c:	4298      	cmp	r0, r3
 801c92e:	da33      	bge.n	801c998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801c930:	2b00      	cmp	r3, #0
 801c932:	dd31      	ble.n	801c998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801c934:	4648      	mov	r0, r9
 801c936:	e004      	b.n	801c942 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801c938:	4298      	cmp	r0, r3
 801c93a:	dbfb      	blt.n	801c934 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801c93c:	4548      	cmp	r0, r9
 801c93e:	bfa8      	it	ge
 801c940:	4648      	movge	r0, r9
 801c942:	f9b8 2000 	ldrsh.w	r2, [r8]
 801c946:	2100      	movs	r1, #0
 801c948:	1ac0      	subs	r0, r0, r3
 801c94a:	f8b7 a000 	ldrh.w	sl, [r7]
 801c94e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c952:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c956:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c95a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c95e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c962:	4553      	cmp	r3, sl
 801c964:	d9ca      	bls.n	801c8fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801c966:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c96a:	ab07      	add	r3, sp, #28
 801c96c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c970:	6851      	ldr	r1, [r2, #4]
 801c972:	c303      	stmia	r3!, {r0, r1}
 801c974:	a807      	add	r0, sp, #28
 801c976:	a905      	add	r1, sp, #20
 801c978:	f7fc fb4c 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801c97c:	a807      	add	r0, sp, #28
 801c97e:	f7fc fb8d 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 801c982:	b920      	cbnz	r0, 801c98e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801c984:	6823      	ldr	r3, [r4, #0]
 801c986:	a907      	add	r1, sp, #28
 801c988:	4620      	mov	r0, r4
 801c98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c98c:	4798      	blx	r3
 801c98e:	f10a 0a01 	add.w	sl, sl, #1
 801c992:	fa1f fa8a 	uxth.w	sl, sl
 801c996:	e7e2      	b.n	801c95e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801c998:	6830      	ldr	r0, [r6, #0]
 801c99a:	2101      	movs	r1, #1
 801c99c:	6803      	ldr	r3, [r0, #0]
 801c99e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c9a0:	4798      	blx	r3
 801c9a2:	e7ab      	b.n	801c8fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801c9a4:	69d3      	ldr	r3, [r2, #28]
 801c9a6:	4798      	blx	r3
 801c9a8:	4b54      	ldr	r3, [pc, #336]	; (801cafc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c9aa:	781b      	ldrb	r3, [r3, #0]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	f43f af39 	beq.w	801c824 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c9b2:	2300      	movs	r3, #0
 801c9b4:	883d      	ldrh	r5, [r7, #0]
 801c9b6:	34ea      	adds	r4, #234	; 0xea
 801c9b8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c9bc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c9c0:	42ab      	cmp	r3, r5
 801c9c2:	f67f af2f 	bls.w	801c824 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c9c6:	ab1a      	add	r3, sp, #104	; 0x68
 801c9c8:	4620      	mov	r0, r4
 801c9ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c9ce:	3501      	adds	r5, #1
 801c9d0:	3b44      	subs	r3, #68	; 0x44
 801c9d2:	b2ad      	uxth	r5, r5
 801c9d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c9d8:	f7ff fe32 	bl	801c640 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c9dc:	e7ee      	b.n	801c9bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801c9de:	2b02      	cmp	r3, #2
 801c9e0:	d16a      	bne.n	801cab8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801c9e2:	f8df a120 	ldr.w	sl, [pc, #288]	; 801cb04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801c9e6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c9ea:	42ab      	cmp	r3, r5
 801c9ec:	d9dc      	bls.n	801c9a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801c9ee:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c9f2:	ab03      	add	r3, sp, #12
 801c9f4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c9f8:	6851      	ldr	r1, [r2, #4]
 801c9fa:	c303      	stmia	r3!, {r0, r1}
 801c9fc:	f89a 3000 	ldrb.w	r3, [sl]
 801ca00:	2b01      	cmp	r3, #1
 801ca02:	d102      	bne.n	801ca0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801ca04:	a803      	add	r0, sp, #12
 801ca06:	f7ff fc5f 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca0a:	a803      	add	r0, sp, #12
 801ca0c:	f7fc fb46 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca10:	2800      	cmp	r0, #0
 801ca12:	d14a      	bne.n	801caaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801ca14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ca18:	f10d 0914 	add.w	r9, sp, #20
 801ca1c:	f10d 081c 	add.w	r8, sp, #28
 801ca20:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ca24:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ca28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801ca2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca30:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ca34:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ca38:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801ca3c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801ca40:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ca44:	44dc      	add	ip, fp
 801ca46:	6830      	ldr	r0, [r6, #0]
 801ca48:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ca4c:	ebac 0c02 	sub.w	ip, ip, r2
 801ca50:	f8d0 e000 	ldr.w	lr, [r0]
 801ca54:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ca58:	fa1f fc8c 	uxth.w	ip, ip
 801ca5c:	f8cd c000 	str.w	ip, [sp]
 801ca60:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801ca64:	47d8      	blx	fp
 801ca66:	f89a 3000 	ldrb.w	r3, [sl]
 801ca6a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ca6e:	2b01      	cmp	r3, #1
 801ca70:	d11e      	bne.n	801cab0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801ca72:	e899 0003 	ldmia.w	r9, {r0, r1}
 801ca76:	e888 0003 	stmia.w	r8, {r0, r1}
 801ca7a:	4640      	mov	r0, r8
 801ca7c:	f7ff fbca 	bl	801c214 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ca80:	6823      	ldr	r3, [r4, #0]
 801ca82:	4641      	mov	r1, r8
 801ca84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca86:	4620      	mov	r0, r4
 801ca88:	4798      	blx	r3
 801ca8a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ca8e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ca92:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801ca96:	4413      	add	r3, r2
 801ca98:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ca9c:	440a      	add	r2, r1
 801ca9e:	b21b      	sxth	r3, r3
 801caa0:	b212      	sxth	r2, r2
 801caa2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801caa6:	4293      	cmp	r3, r2
 801caa8:	dbc6      	blt.n	801ca38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801caaa:	3501      	adds	r5, #1
 801caac:	b2ad      	uxth	r5, r5
 801caae:	e79a      	b.n	801c9e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801cab0:	6823      	ldr	r3, [r4, #0]
 801cab2:	4649      	mov	r1, r9
 801cab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cab6:	e7e6      	b.n	801ca86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801cab8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cabc:	42ab      	cmp	r3, r5
 801cabe:	f67f af73 	bls.w	801c9a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801cac2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801cac6:	ab07      	add	r3, sp, #28
 801cac8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801cacc:	6851      	ldr	r1, [r2, #4]
 801cace:	c303      	stmia	r3!, {r0, r1}
 801cad0:	a807      	add	r0, sp, #28
 801cad2:	f7fc fae3 	bl	801909c <_ZNK8touchgfx4Rect7isEmptyEv>
 801cad6:	b920      	cbnz	r0, 801cae2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801cad8:	6823      	ldr	r3, [r4, #0]
 801cada:	a907      	add	r1, sp, #28
 801cadc:	4620      	mov	r0, r4
 801cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cae0:	4798      	blx	r3
 801cae2:	3501      	adds	r5, #1
 801cae4:	b2ad      	uxth	r5, r5
 801cae6:	e7e7      	b.n	801cab8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801cae8:	2000bf68 	.word	0x2000bf68
 801caec:	2000bf74 	.word	0x2000bf74
 801caf0:	20000080 	.word	0x20000080
 801caf4:	2000bef0 	.word	0x2000bef0
 801caf8:	2000bee4 	.word	0x2000bee4
 801cafc:	2000beec 	.word	0x2000beec
 801cb00:	2000bee2 	.word	0x2000bee2
 801cb04:	2000bee6 	.word	0x2000bee6

0801cb08 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801cb08:	4b03      	ldr	r3, [pc, #12]	; (801cb18 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801cb0a:	2200      	movs	r2, #0
 801cb0c:	801a      	strh	r2, [r3, #0]
 801cb0e:	805a      	strh	r2, [r3, #2]
 801cb10:	809a      	strh	r2, [r3, #4]
 801cb12:	80da      	strh	r2, [r3, #6]
 801cb14:	4770      	bx	lr
 801cb16:	bf00      	nop
 801cb18:	2000bf74 	.word	0x2000bf74

0801cb1c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801cb1c:	2000      	movs	r0, #0
 801cb1e:	4770      	bx	lr

0801cb20 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801cb20:	2000      	movs	r0, #0
 801cb22:	4770      	bx	lr

0801cb24 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801cb24:	b508      	push	{r3, lr}
 801cb26:	6803      	ldr	r3, [r0, #0]
 801cb28:	68db      	ldr	r3, [r3, #12]
 801cb2a:	4798      	blx	r3
 801cb2c:	b128      	cbz	r0, 801cb3a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801cb2e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801cb32:	7a80      	ldrb	r0, [r0, #10]
 801cb34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cb38:	4318      	orrs	r0, r3
 801cb3a:	bd08      	pop	{r3, pc}

0801cb3c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801cb3c:	b40e      	push	{r1, r2, r3}
 801cb3e:	b533      	push	{r0, r1, r4, r5, lr}
 801cb40:	ab05      	add	r3, sp, #20
 801cb42:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb46:	9301      	str	r3, [sp, #4]
 801cb48:	4b0a      	ldr	r3, [pc, #40]	; (801cb74 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801cb4a:	685c      	ldr	r4, [r3, #4]
 801cb4c:	1061      	asrs	r1, r4, #1
 801cb4e:	07e4      	lsls	r4, r4, #31
 801cb50:	eb00 0501 	add.w	r5, r0, r1
 801cb54:	bf46      	itte	mi
 801cb56:	681b      	ldrmi	r3, [r3, #0]
 801cb58:	5841      	ldrmi	r1, [r0, r1]
 801cb5a:	681c      	ldrpl	r4, [r3, #0]
 801cb5c:	4628      	mov	r0, r5
 801cb5e:	bf48      	it	mi
 801cb60:	58cc      	ldrmi	r4, [r1, r3]
 801cb62:	2100      	movs	r1, #0
 801cb64:	9b01      	ldr	r3, [sp, #4]
 801cb66:	47a0      	blx	r4
 801cb68:	b002      	add	sp, #8
 801cb6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cb6e:	b003      	add	sp, #12
 801cb70:	4770      	bx	lr
 801cb72:	bf00      	nop
 801cb74:	20000028 	.word	0x20000028

0801cb78 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801cb78:	b40c      	push	{r2, r3}
 801cb7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cb7c:	ab06      	add	r3, sp, #24
 801cb7e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb82:	9301      	str	r3, [sp, #4]
 801cb84:	4b09      	ldr	r3, [pc, #36]	; (801cbac <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801cb86:	685d      	ldr	r5, [r3, #4]
 801cb88:	106c      	asrs	r4, r5, #1
 801cb8a:	07ed      	lsls	r5, r5, #31
 801cb8c:	eb00 0604 	add.w	r6, r0, r4
 801cb90:	bf45      	ittet	mi
 801cb92:	681b      	ldrmi	r3, [r3, #0]
 801cb94:	5900      	ldrmi	r0, [r0, r4]
 801cb96:	681c      	ldrpl	r4, [r3, #0]
 801cb98:	58c4      	ldrmi	r4, [r0, r3]
 801cb9a:	4630      	mov	r0, r6
 801cb9c:	9b01      	ldr	r3, [sp, #4]
 801cb9e:	47a0      	blx	r4
 801cba0:	b002      	add	sp, #8
 801cba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cba6:	b002      	add	sp, #8
 801cba8:	4770      	bx	lr
 801cbaa:	bf00      	nop
 801cbac:	20000028 	.word	0x20000028

0801cbb0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cbb0:	b40e      	push	{r1, r2, r3}
 801cbb2:	b530      	push	{r4, r5, lr}
 801cbb4:	b098      	sub	sp, #96	; 0x60
 801cbb6:	4604      	mov	r4, r0
 801cbb8:	ab1b      	add	r3, sp, #108	; 0x6c
 801cbba:	a802      	add	r0, sp, #8
 801cbbc:	f853 5b04 	ldr.w	r5, [r3], #4
 801cbc0:	9301      	str	r3, [sp, #4]
 801cbc2:	f001 f871 	bl	801dca8 <_ZN8touchgfx12TextProviderC1Ev>
 801cbc6:	6823      	ldr	r3, [r4, #0]
 801cbc8:	4620      	mov	r0, r4
 801cbca:	2401      	movs	r4, #1
 801cbcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbce:	4798      	blx	r3
 801cbd0:	9a01      	ldr	r2, [sp, #4]
 801cbd2:	4603      	mov	r3, r0
 801cbd4:	4629      	mov	r1, r5
 801cbd6:	a802      	add	r0, sp, #8
 801cbd8:	f001 f883 	bl	801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801cbdc:	a802      	add	r0, sp, #8
 801cbde:	f001 f8b9 	bl	801dd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cbe2:	b2a3      	uxth	r3, r4
 801cbe4:	b138      	cbz	r0, 801cbf6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801cbe6:	280a      	cmp	r0, #10
 801cbe8:	a802      	add	r0, sp, #8
 801cbea:	bf04      	itt	eq
 801cbec:	3301      	addeq	r3, #1
 801cbee:	b21c      	sxtheq	r4, r3
 801cbf0:	f001 f8b0 	bl	801dd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cbf4:	e7f5      	b.n	801cbe2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	b018      	add	sp, #96	; 0x60
 801cbfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cbfe:	b003      	add	sp, #12
 801cc00:	4770      	bx	lr
	...

0801cc04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801cc04:	b40e      	push	{r1, r2, r3}
 801cc06:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc08:	b098      	sub	sp, #96	; 0x60
 801cc0a:	4605      	mov	r5, r0
 801cc0c:	4f25      	ldr	r7, [pc, #148]	; (801cca4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801cc0e:	ab1d      	add	r3, sp, #116	; 0x74
 801cc10:	a802      	add	r0, sp, #8
 801cc12:	ae18      	add	r6, sp, #96	; 0x60
 801cc14:	f853 4b04 	ldr.w	r4, [r3], #4
 801cc18:	9300      	str	r3, [sp, #0]
 801cc1a:	f001 f845 	bl	801dca8 <_ZN8touchgfx12TextProviderC1Ev>
 801cc1e:	682b      	ldr	r3, [r5, #0]
 801cc20:	4628      	mov	r0, r5
 801cc22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc24:	4798      	blx	r3
 801cc26:	4621      	mov	r1, r4
 801cc28:	2400      	movs	r4, #0
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	9a00      	ldr	r2, [sp, #0]
 801cc2e:	a802      	add	r0, sp, #8
 801cc30:	f001 f857 	bl	801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801cc34:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801cc38:	462a      	mov	r2, r5
 801cc3a:	4633      	mov	r3, r6
 801cc3c:	4621      	mov	r1, r4
 801cc3e:	a802      	add	r0, sp, #8
 801cc40:	f001 f9b4 	bl	801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cc44:	b340      	cbz	r0, 801cc98 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801cc46:	280a      	cmp	r0, #10
 801cc48:	d01f      	beq.n	801cc8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cc4a:	9901      	ldr	r1, [sp, #4]
 801cc4c:	b1e9      	cbz	r1, 801cc8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cc4e:	7b4b      	ldrb	r3, [r1, #13]
 801cc50:	f891 c008 	ldrb.w	ip, [r1, #8]
 801cc54:	f013 0f40 	tst.w	r3, #64	; 0x40
 801cc58:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801cc5c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801cc60:	79c9      	ldrb	r1, [r1, #7]
 801cc62:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801cc66:	bf18      	it	ne
 801cc68:	4638      	movne	r0, r7
 801cc6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cc6e:	bf08      	it	eq
 801cc70:	2000      	moveq	r0, #0
 801cc72:	88aa      	ldrh	r2, [r5, #4]
 801cc74:	ea41 010e 	orr.w	r1, r1, lr
 801cc78:	ea43 030c 	orr.w	r3, r3, ip
 801cc7c:	440a      	add	r2, r1
 801cc7e:	4303      	orrs	r3, r0
 801cc80:	1ad3      	subs	r3, r2, r3
 801cc82:	b29b      	uxth	r3, r3
 801cc84:	42a3      	cmp	r3, r4
 801cc86:	bfc8      	it	gt
 801cc88:	b21c      	sxthgt	r4, r3
 801cc8a:	4633      	mov	r3, r6
 801cc8c:	462a      	mov	r2, r5
 801cc8e:	2100      	movs	r1, #0
 801cc90:	a802      	add	r0, sp, #8
 801cc92:	f001 f98b 	bl	801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cc96:	e7d5      	b.n	801cc44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801cc98:	b2a0      	uxth	r0, r4
 801cc9a:	b018      	add	sp, #96	; 0x60
 801cc9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cca0:	b003      	add	sp, #12
 801cca2:	4770      	bx	lr
 801cca4:	fffffe00 	.word	0xfffffe00

0801cca8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cca8:	b40e      	push	{r1, r2, r3}
 801ccaa:	b570      	push	{r4, r5, r6, lr}
 801ccac:	b099      	sub	sp, #100	; 0x64
 801ccae:	4604      	mov	r4, r0
 801ccb0:	26ff      	movs	r6, #255	; 0xff
 801ccb2:	ab1d      	add	r3, sp, #116	; 0x74
 801ccb4:	a802      	add	r0, sp, #8
 801ccb6:	f853 5b04 	ldr.w	r5, [r3], #4
 801ccba:	9300      	str	r3, [sp, #0]
 801ccbc:	f000 fff4 	bl	801dca8 <_ZN8touchgfx12TextProviderC1Ev>
 801ccc0:	6823      	ldr	r3, [r4, #0]
 801ccc2:	4620      	mov	r0, r4
 801ccc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ccc6:	4798      	blx	r3
 801ccc8:	4629      	mov	r1, r5
 801ccca:	4603      	mov	r3, r0
 801cccc:	9a00      	ldr	r2, [sp, #0]
 801ccce:	a802      	add	r0, sp, #8
 801ccd0:	ad18      	add	r5, sp, #96	; 0x60
 801ccd2:	f001 f806 	bl	801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ccd6:	2100      	movs	r1, #0
 801ccd8:	4622      	mov	r2, r4
 801ccda:	a802      	add	r0, sp, #8
 801ccdc:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801cce0:	462b      	mov	r3, r5
 801cce2:	f001 f963 	bl	801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cce6:	b190      	cbz	r0, 801cd0e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801cce8:	280a      	cmp	r0, #10
 801ccea:	d009      	beq.n	801cd00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801ccec:	9a01      	ldr	r2, [sp, #4]
 801ccee:	b13a      	cbz	r2, 801cd00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801ccf0:	7923      	ldrb	r3, [r4, #4]
 801ccf2:	7a12      	ldrb	r2, [r2, #8]
 801ccf4:	1a9b      	subs	r3, r3, r2
 801ccf6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801ccfa:	429e      	cmp	r6, r3
 801ccfc:	bf28      	it	cs
 801ccfe:	461e      	movcs	r6, r3
 801cd00:	462b      	mov	r3, r5
 801cd02:	4622      	mov	r2, r4
 801cd04:	2100      	movs	r1, #0
 801cd06:	a802      	add	r0, sp, #8
 801cd08:	f001 f950 	bl	801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cd0c:	e7eb      	b.n	801cce6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801cd0e:	4630      	mov	r0, r6
 801cd10:	b019      	add	sp, #100	; 0x64
 801cd12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd16:	b003      	add	sp, #12
 801cd18:	4770      	bx	lr

0801cd1a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cd1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd1e:	b099      	sub	sp, #100	; 0x64
 801cd20:	4606      	mov	r6, r0
 801cd22:	4614      	mov	r4, r2
 801cd24:	4688      	mov	r8, r1
 801cd26:	a802      	add	r0, sp, #8
 801cd28:	461d      	mov	r5, r3
 801cd2a:	f04f 0b00 	mov.w	fp, #0
 801cd2e:	f000 ffbb 	bl	801dca8 <_ZN8touchgfx12TextProviderC1Ev>
 801cd32:	6833      	ldr	r3, [r6, #0]
 801cd34:	4630      	mov	r0, r6
 801cd36:	465f      	mov	r7, fp
 801cd38:	46da      	mov	sl, fp
 801cd3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd3c:	46d9      	mov	r9, fp
 801cd3e:	4798      	blx	r3
 801cd40:	462a      	mov	r2, r5
 801cd42:	4603      	mov	r3, r0
 801cd44:	4621      	mov	r1, r4
 801cd46:	a802      	add	r0, sp, #8
 801cd48:	f000 ffcb 	bl	801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801cd4c:	ab01      	add	r3, sp, #4
 801cd4e:	4632      	mov	r2, r6
 801cd50:	4641      	mov	r1, r8
 801cd52:	a802      	add	r0, sp, #8
 801cd54:	f8cd 9004 	str.w	r9, [sp, #4]
 801cd58:	f001 f928 	bl	801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cd5c:	4605      	mov	r5, r0
 801cd5e:	b108      	cbz	r0, 801cd64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801cd60:	280a      	cmp	r0, #10
 801cd62:	d10b      	bne.n	801cd7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801cd64:	4557      	cmp	r7, sl
 801cd66:	bf38      	it	cc
 801cd68:	4657      	movcc	r7, sl
 801cd6a:	f04f 0a00 	mov.w	sl, #0
 801cd6e:	b91d      	cbnz	r5, 801cd78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801cd70:	4638      	mov	r0, r7
 801cd72:	b019      	add	sp, #100	; 0x64
 801cd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd78:	46ab      	mov	fp, r5
 801cd7a:	e7e7      	b.n	801cd4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801cd7c:	9a01      	ldr	r2, [sp, #4]
 801cd7e:	2a00      	cmp	r2, #0
 801cd80:	d0fa      	beq.n	801cd78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801cd82:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801cd86:	4659      	mov	r1, fp
 801cd88:	6833      	ldr	r3, [r6, #0]
 801cd8a:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801cd8e:	7a94      	ldrb	r4, [r2, #10]
 801cd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd92:	4304      	orrs	r4, r0
 801cd94:	4630      	mov	r0, r6
 801cd96:	8895      	ldrh	r5, [r2, #4]
 801cd98:	4798      	blx	r3
 801cd9a:	4420      	add	r0, r4
 801cd9c:	4450      	add	r0, sl
 801cd9e:	fa1f fa80 	uxth.w	sl, r0
 801cda2:	e7e4      	b.n	801cd6e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801cda4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cda4:	b513      	push	{r0, r1, r4, lr}
 801cda6:	1d01      	adds	r1, r0, #4
 801cda8:	4603      	mov	r3, r0
 801cdaa:	466a      	mov	r2, sp
 801cdac:	c903      	ldmia	r1, {r0, r1}
 801cdae:	e882 0003 	stmia.w	r2, {r0, r1}
 801cdb2:	2100      	movs	r1, #0
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	9100      	str	r1, [sp, #0]
 801cdb8:	6819      	ldr	r1, [r3, #0]
 801cdba:	690c      	ldr	r4, [r1, #16]
 801cdbc:	4611      	mov	r1, r2
 801cdbe:	47a0      	blx	r4
 801cdc0:	b002      	add	sp, #8
 801cdc2:	bd10      	pop	{r4, pc}

0801cdc4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cdc4:	b538      	push	{r3, r4, r5, lr}
 801cdc6:	680b      	ldr	r3, [r1, #0]
 801cdc8:	460c      	mov	r4, r1
 801cdca:	4605      	mov	r5, r0
 801cdcc:	68db      	ldr	r3, [r3, #12]
 801cdce:	4798      	blx	r3
 801cdd0:	6823      	ldr	r3, [r4, #0]
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	4629      	mov	r1, r5
 801cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdd8:	4798      	blx	r3
 801cdda:	4628      	mov	r0, r5
 801cddc:	bd38      	pop	{r3, r4, r5, pc}

0801cdde <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801cdde:	b410      	push	{r4}
 801cde0:	880a      	ldrh	r2, [r1, #0]
 801cde2:	8884      	ldrh	r4, [r0, #4]
 801cde4:	4422      	add	r2, r4
 801cde6:	800a      	strh	r2, [r1, #0]
 801cde8:	884a      	ldrh	r2, [r1, #2]
 801cdea:	88c4      	ldrh	r4, [r0, #6]
 801cdec:	4422      	add	r2, r4
 801cdee:	804a      	strh	r2, [r1, #2]
 801cdf0:	6940      	ldr	r0, [r0, #20]
 801cdf2:	b120      	cbz	r0, 801cdfe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801cdf4:	6803      	ldr	r3, [r0, #0]
 801cdf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdfc:	4718      	bx	r3
 801cdfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce02:	4770      	bx	lr

0801ce04 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ce04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce06:	460b      	mov	r3, r1
 801ce08:	b085      	sub	sp, #20
 801ce0a:	4604      	mov	r4, r0
 801ce0c:	b901      	cbnz	r1, 801ce10 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ce0e:	b1fa      	cbz	r2, 801ce50 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801ce10:	1d27      	adds	r7, r4, #4
 801ce12:	466e      	mov	r6, sp
 801ce14:	ad02      	add	r5, sp, #8
 801ce16:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ce1a:	e886 0003 	stmia.w	r6, {r0, r1}
 801ce1e:	88e1      	ldrh	r1, [r4, #6]
 801ce20:	4620      	mov	r0, r4
 801ce22:	440a      	add	r2, r1
 801ce24:	88a1      	ldrh	r1, [r4, #4]
 801ce26:	4419      	add	r1, r3
 801ce28:	6823      	ldr	r3, [r4, #0]
 801ce2a:	b212      	sxth	r2, r2
 801ce2c:	b209      	sxth	r1, r1
 801ce2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce30:	4798      	blx	r3
 801ce32:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ce36:	e885 0003 	stmia.w	r5, {r0, r1}
 801ce3a:	6960      	ldr	r0, [r4, #20]
 801ce3c:	b150      	cbz	r0, 801ce54 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801ce3e:	6803      	ldr	r3, [r0, #0]
 801ce40:	4631      	mov	r1, r6
 801ce42:	691b      	ldr	r3, [r3, #16]
 801ce44:	4798      	blx	r3
 801ce46:	6960      	ldr	r0, [r4, #20]
 801ce48:	6803      	ldr	r3, [r0, #0]
 801ce4a:	691b      	ldr	r3, [r3, #16]
 801ce4c:	4629      	mov	r1, r5
 801ce4e:	4798      	blx	r3
 801ce50:	b005      	add	sp, #20
 801ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce54:	f7ff fb78 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 801ce58:	6803      	ldr	r3, [r0, #0]
 801ce5a:	4631      	mov	r1, r6
 801ce5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce5e:	4798      	blx	r3
 801ce60:	f7ff fb72 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 801ce64:	6803      	ldr	r3, [r0, #0]
 801ce66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce68:	e7f0      	b.n	801ce4c <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801ce6a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ce6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce6c:	8882      	ldrh	r2, [r0, #4]
 801ce6e:	4605      	mov	r5, r0
 801ce70:	880b      	ldrh	r3, [r1, #0]
 801ce72:	460c      	mov	r4, r1
 801ce74:	4413      	add	r3, r2
 801ce76:	800b      	strh	r3, [r1, #0]
 801ce78:	884b      	ldrh	r3, [r1, #2]
 801ce7a:	88c2      	ldrh	r2, [r0, #6]
 801ce7c:	4413      	add	r3, r2
 801ce7e:	4602      	mov	r2, r0
 801ce80:	804b      	strh	r3, [r1, #2]
 801ce82:	466b      	mov	r3, sp
 801ce84:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801ce88:	6851      	ldr	r1, [r2, #4]
 801ce8a:	c303      	stmia	r3!, {r0, r1}
 801ce8c:	4621      	mov	r1, r4
 801ce8e:	4668      	mov	r0, sp
 801ce90:	f7fc f8c0 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801ce94:	466b      	mov	r3, sp
 801ce96:	cb03      	ldmia	r3!, {r0, r1}
 801ce98:	6020      	str	r0, [r4, #0]
 801ce9a:	6061      	str	r1, [r4, #4]
 801ce9c:	6968      	ldr	r0, [r5, #20]
 801ce9e:	b128      	cbz	r0, 801ceac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801cea0:	6803      	ldr	r3, [r0, #0]
 801cea2:	691b      	ldr	r3, [r3, #16]
 801cea4:	4621      	mov	r1, r4
 801cea6:	4798      	blx	r3
 801cea8:	b003      	add	sp, #12
 801ceaa:	bd30      	pop	{r4, r5, pc}
 801ceac:	f7ff fb4c 	bl	801c548 <_ZN8touchgfx11Application11getInstanceEv>
 801ceb0:	6803      	ldr	r3, [r0, #0]
 801ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ceb4:	e7f6      	b.n	801cea4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801ceb6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ceb6:	b570      	push	{r4, r5, r6, lr}
 801ceb8:	8882      	ldrh	r2, [r0, #4]
 801ceba:	460c      	mov	r4, r1
 801cebc:	880b      	ldrh	r3, [r1, #0]
 801cebe:	4605      	mov	r5, r0
 801cec0:	4413      	add	r3, r2
 801cec2:	800b      	strh	r3, [r1, #0]
 801cec4:	884b      	ldrh	r3, [r1, #2]
 801cec6:	88c2      	ldrh	r2, [r0, #6]
 801cec8:	4413      	add	r3, r2
 801ceca:	804b      	strh	r3, [r1, #2]
 801cecc:	1d01      	adds	r1, r0, #4
 801cece:	4620      	mov	r0, r4
 801ced0:	f7fc f8a0 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801ced4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ced8:	b153      	cbz	r3, 801cef0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801ceda:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cede:	b13b      	cbz	r3, 801cef0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801cee0:	6968      	ldr	r0, [r5, #20]
 801cee2:	b128      	cbz	r0, 801cef0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801cee4:	6803      	ldr	r3, [r0, #0]
 801cee6:	4621      	mov	r1, r4
 801cee8:	6a1b      	ldr	r3, [r3, #32]
 801ceea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ceee:	4718      	bx	r3
 801cef0:	bd70      	pop	{r4, r5, r6, pc}

0801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cef2:	b510      	push	{r4, lr}
 801cef4:	2300      	movs	r3, #0
 801cef6:	4604      	mov	r4, r0
 801cef8:	4608      	mov	r0, r1
 801cefa:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801cefe:	8023      	strh	r3, [r4, #0]
 801cf00:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cf04:	8063      	strh	r3, [r4, #2]
 801cf06:	6803      	ldr	r3, [r0, #0]
 801cf08:	80a1      	strh	r1, [r4, #4]
 801cf0a:	4621      	mov	r1, r4
 801cf0c:	80e2      	strh	r2, [r4, #6]
 801cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf10:	4798      	blx	r3
 801cf12:	4620      	mov	r0, r4
 801cf14:	bd10      	pop	{r4, pc}
	...

0801cf18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801cf18:	b530      	push	{r4, r5, lr}
 801cf1a:	8083      	strh	r3, [r0, #4]
 801cf1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801cf20:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801cf24:	7183      	strb	r3, [r0, #6]
 801cf26:	79c3      	ldrb	r3, [r0, #7]
 801cf28:	6101      	str	r1, [r0, #16]
 801cf2a:	f365 0306 	bfi	r3, r5, #0, #7
 801cf2e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801cf32:	8282      	strh	r2, [r0, #20]
 801cf34:	f365 13c7 	bfi	r3, r5, #7, #1
 801cf38:	71c3      	strb	r3, [r0, #7]
 801cf3a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801cf3e:	7203      	strb	r3, [r0, #8]
 801cf40:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801cf44:	7243      	strb	r3, [r0, #9]
 801cf46:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cf4a:	8143      	strh	r3, [r0, #10]
 801cf4c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cf50:	8183      	strh	r3, [r0, #12]
 801cf52:	4b01      	ldr	r3, [pc, #4]	; (801cf58 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801cf54:	6003      	str	r3, [r0, #0]
 801cf56:	bd30      	pop	{r4, r5, pc}
 801cf58:	0802c9dc 	.word	0x0802c9dc

0801cf5c <_ZNK8touchgfx9ConstFont4findEt>:
 801cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf5e:	8a84      	ldrh	r4, [r0, #20]
 801cf60:	2500      	movs	r5, #0
 801cf62:	260e      	movs	r6, #14
 801cf64:	3c01      	subs	r4, #1
 801cf66:	42a5      	cmp	r5, r4
 801cf68:	dc0c      	bgt.n	801cf84 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801cf6a:	192a      	adds	r2, r5, r4
 801cf6c:	6903      	ldr	r3, [r0, #16]
 801cf6e:	1052      	asrs	r2, r2, #1
 801cf70:	fb06 3302 	mla	r3, r6, r2, r3
 801cf74:	889f      	ldrh	r7, [r3, #4]
 801cf76:	428f      	cmp	r7, r1
 801cf78:	d901      	bls.n	801cf7e <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801cf7a:	1e54      	subs	r4, r2, #1
 801cf7c:	e7f3      	b.n	801cf66 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801cf7e:	d202      	bcs.n	801cf86 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801cf80:	1c55      	adds	r5, r2, #1
 801cf82:	e7f0      	b.n	801cf66 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801cf84:	2300      	movs	r3, #0
 801cf86:	4618      	mov	r0, r3
 801cf88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cf8a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801cf8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf8c:	4605      	mov	r5, r0
 801cf8e:	4617      	mov	r7, r2
 801cf90:	461e      	mov	r6, r3
 801cf92:	f7ff ffe3 	bl	801cf5c <_ZNK8touchgfx9ConstFont4findEt>
 801cf96:	b9e0      	cbnz	r0, 801cfd2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801cf98:	b911      	cbnz	r1, 801cfa0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801cf9a:	2400      	movs	r4, #0
 801cf9c:	4620      	mov	r0, r4
 801cf9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfa0:	290a      	cmp	r1, #10
 801cfa2:	d0fa      	beq.n	801cf9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801cfa4:	682b      	ldr	r3, [r5, #0]
 801cfa6:	4628      	mov	r0, r5
 801cfa8:	691b      	ldr	r3, [r3, #16]
 801cfaa:	4798      	blx	r3
 801cfac:	4601      	mov	r1, r0
 801cfae:	4628      	mov	r0, r5
 801cfb0:	f7ff ffd4 	bl	801cf5c <_ZNK8touchgfx9ConstFont4findEt>
 801cfb4:	4604      	mov	r4, r0
 801cfb6:	2800      	cmp	r0, #0
 801cfb8:	d0ef      	beq.n	801cf9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801cfba:	682b      	ldr	r3, [r5, #0]
 801cfbc:	4621      	mov	r1, r4
 801cfbe:	4628      	mov	r0, r5
 801cfc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cfc2:	4798      	blx	r3
 801cfc4:	6038      	str	r0, [r7, #0]
 801cfc6:	682b      	ldr	r3, [r5, #0]
 801cfc8:	4628      	mov	r0, r5
 801cfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cfcc:	4798      	blx	r3
 801cfce:	7030      	strb	r0, [r6, #0]
 801cfd0:	e7e4      	b.n	801cf9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801cfd2:	4604      	mov	r4, r0
 801cfd4:	e7f1      	b.n	801cfba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801cfd6 <_ZN8touchgfx6memsetEPvhm>:
 801cfd6:	4402      	add	r2, r0
 801cfd8:	4290      	cmp	r0, r2
 801cfda:	d002      	beq.n	801cfe2 <_ZN8touchgfx6memsetEPvhm+0xc>
 801cfdc:	f800 1b01 	strb.w	r1, [r0], #1
 801cfe0:	e7fa      	b.n	801cfd8 <_ZN8touchgfx6memsetEPvhm+0x2>
 801cfe2:	4770      	bx	lr

0801cfe4 <_ZN8touchgfx3clzEl>:
 801cfe4:	b1e8      	cbz	r0, 801d022 <_ZN8touchgfx3clzEl+0x3e>
 801cfe6:	2800      	cmp	r0, #0
 801cfe8:	bfb8      	it	lt
 801cfea:	4240      	neglt	r0, r0
 801cfec:	0c03      	lsrs	r3, r0, #16
 801cfee:	041b      	lsls	r3, r3, #16
 801cff0:	b9ab      	cbnz	r3, 801d01e <_ZN8touchgfx3clzEl+0x3a>
 801cff2:	0400      	lsls	r0, r0, #16
 801cff4:	2310      	movs	r3, #16
 801cff6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cffa:	bf04      	itt	eq
 801cffc:	0200      	lsleq	r0, r0, #8
 801cffe:	3308      	addeq	r3, #8
 801d000:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d004:	bf04      	itt	eq
 801d006:	0100      	lsleq	r0, r0, #4
 801d008:	3304      	addeq	r3, #4
 801d00a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d00e:	bf04      	itt	eq
 801d010:	0080      	lsleq	r0, r0, #2
 801d012:	3302      	addeq	r3, #2
 801d014:	2800      	cmp	r0, #0
 801d016:	bfa8      	it	ge
 801d018:	3301      	addge	r3, #1
 801d01a:	1e58      	subs	r0, r3, #1
 801d01c:	4770      	bx	lr
 801d01e:	2300      	movs	r3, #0
 801d020:	e7e9      	b.n	801cff6 <_ZN8touchgfx3clzEl+0x12>
 801d022:	201f      	movs	r0, #31
 801d024:	4770      	bx	lr

0801d026 <_ZN8touchgfx6muldivElllRl>:
 801d026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d02a:	4604      	mov	r4, r0
 801d02c:	4698      	mov	r8, r3
 801d02e:	2601      	movs	r6, #1
 801d030:	f7ff ffd8 	bl	801cfe4 <_ZN8touchgfx3clzEl>
 801d034:	2c00      	cmp	r4, #0
 801d036:	fa04 f500 	lsl.w	r5, r4, r0
 801d03a:	fa06 f600 	lsl.w	r6, r6, r0
 801d03e:	bfba      	itte	lt
 801d040:	f04f 37ff 	movlt.w	r7, #4294967295
 801d044:	4264      	neglt	r4, r4
 801d046:	2701      	movge	r7, #1
 801d048:	2900      	cmp	r1, #0
 801d04a:	f106 36ff 	add.w	r6, r6, #4294967295
 801d04e:	bfbc      	itt	lt
 801d050:	4249      	neglt	r1, r1
 801d052:	427f      	neglt	r7, r7
 801d054:	2a00      	cmp	r2, #0
 801d056:	fa41 fc00 	asr.w	ip, r1, r0
 801d05a:	ea01 0106 	and.w	r1, r1, r6
 801d05e:	bfb8      	it	lt
 801d060:	427f      	neglt	r7, r7
 801d062:	fb04 f401 	mul.w	r4, r4, r1
 801d066:	fb95 f3f2 	sdiv	r3, r5, r2
 801d06a:	fb02 5513 	mls	r5, r2, r3, r5
 801d06e:	bfb8      	it	lt
 801d070:	4252      	neglt	r2, r2
 801d072:	fb94 f0f2 	sdiv	r0, r4, r2
 801d076:	fb02 4410 	mls	r4, r2, r0, r4
 801d07a:	fb0c 4405 	mla	r4, ip, r5, r4
 801d07e:	fb94 f1f2 	sdiv	r1, r4, r2
 801d082:	4408      	add	r0, r1
 801d084:	fb02 4211 	mls	r2, r2, r1, r4
 801d088:	fb0c 0003 	mla	r0, ip, r3, r0
 801d08c:	f8c8 2000 	str.w	r2, [r8]
 801d090:	4378      	muls	r0, r7
 801d092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d096 <_ZN8touchgfx10ClickEventD1Ev>:
 801d096:	4770      	bx	lr

0801d098 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801d098:	2000      	movs	r0, #0
 801d09a:	4770      	bx	lr

0801d09c <_ZN8touchgfx9DragEventD1Ev>:
 801d09c:	4770      	bx	lr

0801d09e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801d09e:	2001      	movs	r0, #1
 801d0a0:	4770      	bx	lr

0801d0a2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801d0a2:	2002      	movs	r0, #2
 801d0a4:	4770      	bx	lr

0801d0a6 <_ZN8touchgfx12GestureEventD1Ev>:
 801d0a6:	4770      	bx	lr

0801d0a8 <_ZN8touchgfx10ClickEventD0Ev>:
 801d0a8:	b510      	push	{r4, lr}
 801d0aa:	4604      	mov	r4, r0
 801d0ac:	210c      	movs	r1, #12
 801d0ae:	f00b fa4b 	bl	8028548 <_ZdlPvj>
 801d0b2:	4620      	mov	r0, r4
 801d0b4:	bd10      	pop	{r4, pc}

0801d0b6 <_ZN8touchgfx9DragEventD0Ev>:
 801d0b6:	b510      	push	{r4, lr}
 801d0b8:	4604      	mov	r4, r0
 801d0ba:	2110      	movs	r1, #16
 801d0bc:	f00b fa44 	bl	8028548 <_ZdlPvj>
 801d0c0:	4620      	mov	r0, r4
 801d0c2:	bd10      	pop	{r4, pc}

0801d0c4 <_ZN8touchgfx12GestureEventD0Ev>:
 801d0c4:	b510      	push	{r4, lr}
 801d0c6:	4604      	mov	r4, r0
 801d0c8:	210c      	movs	r1, #12
 801d0ca:	f00b fa3d 	bl	8028548 <_ZdlPvj>
 801d0ce:	4620      	mov	r0, r4
 801d0d0:	bd10      	pop	{r4, pc}
	...

0801d0d4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d0d4:	b530      	push	{r4, r5, lr}
 801d0d6:	460d      	mov	r5, r1
 801d0d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d0da:	b087      	sub	sp, #28
 801d0dc:	4604      	mov	r4, r0
 801d0de:	b301      	cbz	r1, 801d122 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d0e0:	a801      	add	r0, sp, #4
 801d0e2:	f7ff ff06 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d0e6:	892a      	ldrh	r2, [r5, #8]
 801d0e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d0ec:	7928      	ldrb	r0, [r5, #4]
 801d0ee:	1ad2      	subs	r2, r2, r3
 801d0f0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d0f2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d0f6:	441a      	add	r2, r3
 801d0f8:	896b      	ldrh	r3, [r5, #10]
 801d0fa:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d0fe:	f88d 0010 	strb.w	r0, [sp, #16]
 801d102:	1b5b      	subs	r3, r3, r5
 801d104:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d106:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d108:	442b      	add	r3, r5
 801d10a:	4d07      	ldr	r5, [pc, #28]	; (801d128 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d10c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d110:	a903      	add	r1, sp, #12
 801d112:	9503      	str	r5, [sp, #12]
 801d114:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d118:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d11c:	6803      	ldr	r3, [r0, #0]
 801d11e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d120:	4798      	blx	r3
 801d122:	b007      	add	sp, #28
 801d124:	bd30      	pop	{r4, r5, pc}
 801d126:	bf00      	nop
 801d128:	0802ca58 	.word	0x0802ca58

0801d12c <_ZNK8touchgfx4Rect9intersectEss>:
 801d12c:	b510      	push	{r4, lr}
 801d12e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d132:	428b      	cmp	r3, r1
 801d134:	dc10      	bgt.n	801d158 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801d136:	8884      	ldrh	r4, [r0, #4]
 801d138:	4423      	add	r3, r4
 801d13a:	b21b      	sxth	r3, r3
 801d13c:	4299      	cmp	r1, r3
 801d13e:	da0b      	bge.n	801d158 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801d140:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d144:	4293      	cmp	r3, r2
 801d146:	dc07      	bgt.n	801d158 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801d148:	88c0      	ldrh	r0, [r0, #6]
 801d14a:	4418      	add	r0, r3
 801d14c:	b200      	sxth	r0, r0
 801d14e:	4282      	cmp	r2, r0
 801d150:	bfac      	ite	ge
 801d152:	2000      	movge	r0, #0
 801d154:	2001      	movlt	r0, #1
 801d156:	bd10      	pop	{r4, pc}
 801d158:	2000      	movs	r0, #0
 801d15a:	e7fc      	b.n	801d156 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801d15c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d15e:	460c      	mov	r4, r1
 801d160:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d162:	b089      	sub	sp, #36	; 0x24
 801d164:	4605      	mov	r5, r0
 801d166:	2900      	cmp	r1, #0
 801d168:	d054      	beq.n	801d214 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801d16a:	4668      	mov	r0, sp
 801d16c:	f7ff fec1 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d170:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801d172:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801d174:	4668      	mov	r0, sp
 801d176:	8922      	ldrh	r2, [r4, #8]
 801d178:	88e1      	ldrh	r1, [r4, #6]
 801d17a:	443a      	add	r2, r7
 801d17c:	4431      	add	r1, r6
 801d17e:	b212      	sxth	r2, r2
 801d180:	b209      	sxth	r1, r1
 801d182:	f7ff ffd3 	bl	801d12c <_ZNK8touchgfx4Rect9intersectEss>
 801d186:	b1d0      	cbz	r0, 801d1be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801d188:	89a2      	ldrh	r2, [r4, #12]
 801d18a:	4668      	mov	r0, sp
 801d18c:	8961      	ldrh	r1, [r4, #10]
 801d18e:	443a      	add	r2, r7
 801d190:	4431      	add	r1, r6
 801d192:	b212      	sxth	r2, r2
 801d194:	b209      	sxth	r1, r1
 801d196:	f7ff ffc9 	bl	801d12c <_ZNK8touchgfx4Rect9intersectEss>
 801d19a:	4603      	mov	r3, r0
 801d19c:	b978      	cbnz	r0, 801d1be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801d19e:	4a1e      	ldr	r2, [pc, #120]	; (801d218 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801d1a0:	a904      	add	r1, sp, #16
 801d1a2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d1a4:	9204      	str	r2, [sp, #16]
 801d1a6:	2202      	movs	r2, #2
 801d1a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d1ac:	f88d 2014 	strb.w	r2, [sp, #20]
 801d1b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d1b4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d1b8:	6803      	ldr	r3, [r0, #0]
 801d1ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d1bc:	4798      	blx	r3
 801d1be:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801d1c0:	a802      	add	r0, sp, #8
 801d1c2:	f7ff fe96 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d1c6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d1ca:	88e0      	ldrh	r0, [r4, #6]
 801d1cc:	8961      	ldrh	r1, [r4, #10]
 801d1ce:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d1d2:	1a80      	subs	r0, r0, r2
 801d1d4:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801d1d8:	1a89      	subs	r1, r1, r2
 801d1da:	8923      	ldrh	r3, [r4, #8]
 801d1dc:	4460      	add	r0, ip
 801d1de:	89a2      	ldrh	r2, [r4, #12]
 801d1e0:	4461      	add	r1, ip
 801d1e2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d1e4:	eba3 030e 	sub.w	r3, r3, lr
 801d1e8:	eba2 020e 	sub.w	r2, r2, lr
 801d1ec:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d1f0:	7927      	ldrb	r7, [r4, #4]
 801d1f2:	4433      	add	r3, r6
 801d1f4:	4432      	add	r2, r6
 801d1f6:	4c09      	ldr	r4, [pc, #36]	; (801d21c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801d1f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d1fa:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d1fe:	a904      	add	r1, sp, #16
 801d200:	9404      	str	r4, [sp, #16]
 801d202:	f88d 7014 	strb.w	r7, [sp, #20]
 801d206:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d20a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d20e:	6803      	ldr	r3, [r0, #0]
 801d210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d212:	4798      	blx	r3
 801d214:	b009      	add	sp, #36	; 0x24
 801d216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d218:	0802ca30 	.word	0x0802ca30
 801d21c:	0802ca44 	.word	0x0802ca44

0801d220 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d224:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801d228:	b0a1      	sub	sp, #132	; 0x84
 801d22a:	4604      	mov	r4, r0
 801d22c:	460d      	mov	r5, r1
 801d22e:	790b      	ldrb	r3, [r1, #4]
 801d230:	f1b9 0f00 	cmp.w	r9, #0
 801d234:	d00f      	beq.n	801d256 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801d236:	2b00      	cmp	r3, #0
 801d238:	f040 80a2 	bne.w	801d380 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801d23c:	b021      	add	sp, #132	; 0x84
 801d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d242:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d246:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801d24a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d24e:	1d20      	adds	r0, r4, #4
 801d250:	f7fb fe2e 	bl	8018eb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801d254:	e094      	b.n	801d380 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801d256:	2b00      	cmp	r3, #0
 801d258:	d1f0      	bne.n	801d23c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d25a:	4b5f      	ldr	r3, [pc, #380]	; (801d3d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801d262:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801d266:	f1ba 0f03 	cmp.w	sl, #3
 801d26a:	ddea      	ble.n	801d242 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801d26c:	f1ba 0f0c 	cmp.w	sl, #12
 801d270:	f04f 0303 	mov.w	r3, #3
 801d274:	f04f 0600 	mov.w	r6, #0
 801d278:	4958      	ldr	r1, [pc, #352]	; (801d3dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801d27a:	bfd8      	it	le
 801d27c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801d280:	960a      	str	r6, [sp, #40]	; 0x28
 801d282:	bfd8      	it	le
 801d284:	fb92 f3f3 	sdivle	r3, r2, r3
 801d288:	9301      	str	r3, [sp, #4]
 801d28a:	4b55      	ldr	r3, [pc, #340]	; (801d3e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801d28c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d290:	4b54      	ldr	r3, [pc, #336]	; (801d3e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801d292:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801d296:	2248      	movs	r2, #72	; 0x48
 801d298:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d29c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d2a0:	ab0e      	add	r3, sp, #56	; 0x38
 801d2a2:	4618      	mov	r0, r3
 801d2a4:	f00b f9fc 	bl	80286a0 <memcpy>
 801d2a8:	f04f 32ff 	mov.w	r2, #4294967295
 801d2ac:	f8cd a008 	str.w	sl, [sp, #8]
 801d2b0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801d2b4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d2b8:	46b3      	mov	fp, r6
 801d2ba:	fb93 f3f2 	sdiv	r3, r3, r2
 801d2be:	b29b      	uxth	r3, r3
 801d2c0:	9303      	str	r3, [sp, #12]
 801d2c2:	2300      	movs	r3, #0
 801d2c4:	9a03      	ldr	r2, [sp, #12]
 801d2c6:	88ef      	ldrh	r7, [r5, #6]
 801d2c8:	a80a      	add	r0, sp, #40	; 0x28
 801d2ca:	9309      	str	r3, [sp, #36]	; 0x24
 801d2cc:	9b07      	ldr	r3, [sp, #28]
 801d2ce:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801d2d2:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801d2d6:	fb13 f302 	smulbb	r3, r3, r2
 801d2da:	b29b      	uxth	r3, r3
 801d2dc:	9304      	str	r3, [sp, #16]
 801d2de:	9b07      	ldr	r3, [sp, #28]
 801d2e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d2e4:	685b      	ldr	r3, [r3, #4]
 801d2e6:	fb13 f302 	smulbb	r3, r3, r2
 801d2ea:	b29b      	uxth	r3, r3
 801d2ec:	9305      	str	r3, [sp, #20]
 801d2ee:	9b04      	ldr	r3, [sp, #16]
 801d2f0:	441f      	add	r7, r3
 801d2f2:	9b05      	ldr	r3, [sp, #20]
 801d2f4:	4498      	add	r8, r3
 801d2f6:	b23f      	sxth	r7, r7
 801d2f8:	fa0f f888 	sxth.w	r8, r8
 801d2fc:	4639      	mov	r1, r7
 801d2fe:	4642      	mov	r2, r8
 801d300:	f7ff ff14 	bl	801d12c <_ZNK8touchgfx4Rect9intersectEss>
 801d304:	b380      	cbz	r0, 801d368 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d306:	4639      	mov	r1, r7
 801d308:	ab09      	add	r3, sp, #36	; 0x24
 801d30a:	4642      	mov	r2, r8
 801d30c:	1d20      	adds	r0, r4, #4
 801d30e:	f7fb fdcf 	bl	8018eb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801d312:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d314:	b341      	cbz	r1, 801d368 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d316:	4549      	cmp	r1, r9
 801d318:	d026      	beq.n	801d368 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d31a:	a80c      	add	r0, sp, #48	; 0x30
 801d31c:	f7ff fde9 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d320:	2002      	movs	r0, #2
 801d322:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d326:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d32a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801d32e:	fb92 f2f0 	sdiv	r2, r2, r0
 801d332:	440a      	add	r2, r1
 801d334:	1a99      	subs	r1, r3, r2
 801d336:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d33a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801d33e:	fb93 f3f0 	sdiv	r3, r3, r0
 801d342:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801d346:	4403      	add	r3, r0
 801d348:	1ad3      	subs	r3, r2, r3
 801d34a:	9a06      	ldr	r2, [sp, #24]
 801d34c:	435b      	muls	r3, r3
 801d34e:	fb01 3301 	mla	r3, r1, r1, r3
 801d352:	4293      	cmp	r3, r2
 801d354:	d208      	bcs.n	801d368 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801d356:	9a04      	ldr	r2, [sp, #16]
 801d358:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d35c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801d35e:	9a05      	ldr	r2, [sp, #20]
 801d360:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801d364:	86e2      	strh	r2, [r4, #54]	; 0x36
 801d366:	9306      	str	r3, [sp, #24]
 801d368:	f10b 0b02 	add.w	fp, fp, #2
 801d36c:	f1bb 0f08 	cmp.w	fp, #8
 801d370:	dda7      	ble.n	801d2c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801d372:	9b02      	ldr	r3, [sp, #8]
 801d374:	3601      	adds	r6, #1
 801d376:	4453      	add	r3, sl
 801d378:	9302      	str	r3, [sp, #8]
 801d37a:	9b01      	ldr	r3, [sp, #4]
 801d37c:	42b3      	cmp	r3, r6
 801d37e:	d199      	bne.n	801d2b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801d380:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d382:	2900      	cmp	r1, #0
 801d384:	f43f af5a 	beq.w	801d23c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d388:	a80c      	add	r0, sp, #48	; 0x30
 801d38a:	2600      	movs	r6, #0
 801d38c:	f7ff fdb1 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d390:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801d394:	88ea      	ldrh	r2, [r5, #6]
 801d396:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801d39a:	1ad2      	subs	r2, r2, r3
 801d39c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d39e:	7929      	ldrb	r1, [r5, #4]
 801d3a0:	441a      	add	r2, r3
 801d3a2:	892b      	ldrh	r3, [r5, #8]
 801d3a4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801d3a8:	a90e      	add	r1, sp, #56	; 0x38
 801d3aa:	1a1b      	subs	r3, r3, r0
 801d3ac:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801d3ae:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801d3b2:	4403      	add	r3, r0
 801d3b4:	480c      	ldr	r0, [pc, #48]	; (801d3e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801d3b6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801d3ba:	900e      	str	r0, [sp, #56]	; 0x38
 801d3bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d3be:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801d3c2:	6803      	ldr	r3, [r0, #0]
 801d3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d3c6:	4798      	blx	r3
 801d3c8:	792b      	ldrb	r3, [r5, #4]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	f43f af36 	beq.w	801d23c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d3d0:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d3d4:	e732      	b.n	801d23c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d3d6:	bf00      	nop
 801d3d8:	2000bef0 	.word	0x2000bef0
 801d3dc:	0802a340 	.word	0x0802a340
 801d3e0:	2000bee2 	.word	0x2000bee2
 801d3e4:	2000bee4 	.word	0x2000bee4
 801d3e8:	0802ca30 	.word	0x0802ca30

0801d3ec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d3ee:	4604      	mov	r4, r0
 801d3f0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d3f4:	3201      	adds	r2, #1
 801d3f6:	d112      	bne.n	801d41e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d3f8:	2500      	movs	r5, #0
 801d3fa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d3fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d402:	6803      	ldr	r3, [r0, #0]
 801d404:	9500      	str	r5, [sp, #0]
 801d406:	466d      	mov	r5, sp
 801d408:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d40c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d410:	4629      	mov	r1, r5
 801d412:	6a1b      	ldr	r3, [r3, #32]
 801d414:	4798      	blx	r3
 801d416:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d41a:	e884 0003 	stmia.w	r4, {r0, r1}
 801d41e:	4620      	mov	r0, r4
 801d420:	b003      	add	sp, #12
 801d422:	bd30      	pop	{r4, r5, pc}

0801d424 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d424:	b513      	push	{r0, r1, r4, lr}
 801d426:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d42a:	4604      	mov	r4, r0
 801d42c:	3301      	adds	r3, #1
 801d42e:	d109      	bne.n	801d444 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d430:	4601      	mov	r1, r0
 801d432:	4668      	mov	r0, sp
 801d434:	f7ff fd5d 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d438:	f8bd 3000 	ldrh.w	r3, [sp]
 801d43c:	8423      	strh	r3, [r4, #32]
 801d43e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d442:	8463      	strh	r3, [r4, #34]	; 0x22
 801d444:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d448:	b002      	add	sp, #8
 801d44a:	bd10      	pop	{r4, pc}

0801d44c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d44c:	b513      	push	{r0, r1, r4, lr}
 801d44e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d452:	4604      	mov	r4, r0
 801d454:	3301      	adds	r3, #1
 801d456:	d109      	bne.n	801d46c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d458:	4601      	mov	r1, r0
 801d45a:	4668      	mov	r0, sp
 801d45c:	f7ff fd49 	bl	801cef2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d460:	f8bd 3000 	ldrh.w	r3, [sp]
 801d464:	8423      	strh	r3, [r4, #32]
 801d466:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d46a:	8463      	strh	r3, [r4, #34]	; 0x22
 801d46c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d470:	b002      	add	sp, #8
 801d472:	bd10      	pop	{r4, pc}

0801d474 <_ZN8touchgfx6ScreenC1Ev>:
 801d474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d476:	4605      	mov	r5, r0
 801d478:	4b17      	ldr	r3, [pc, #92]	; (801d4d8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d47a:	2200      	movs	r2, #0
 801d47c:	4917      	ldr	r1, [pc, #92]	; (801d4dc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d47e:	f845 3b04 	str.w	r3, [r5], #4
 801d482:	2301      	movs	r3, #1
 801d484:	8102      	strh	r2, [r0, #8]
 801d486:	4604      	mov	r4, r0
 801d488:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801d48c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801d490:	4b13      	ldr	r3, [pc, #76]	; (801d4e0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d492:	8142      	strh	r2, [r0, #10]
 801d494:	f9b3 7000 	ldrsh.w	r7, [r3]
 801d498:	4b12      	ldr	r3, [pc, #72]	; (801d4e4 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801d49a:	8182      	strh	r2, [r0, #12]
 801d49c:	81c2      	strh	r2, [r0, #14]
 801d49e:	8202      	strh	r2, [r0, #16]
 801d4a0:	8242      	strh	r2, [r0, #18]
 801d4a2:	8282      	strh	r2, [r0, #20]
 801d4a4:	82c2      	strh	r2, [r0, #22]
 801d4a6:	6202      	str	r2, [r0, #32]
 801d4a8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d4ac:	6342      	str	r2, [r0, #52]	; 0x34
 801d4ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d4b2:	6041      	str	r1, [r0, #4]
 801d4b4:	4611      	mov	r1, r2
 801d4b6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d4ba:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801d4be:	4628      	mov	r0, r5
 801d4c0:	f7f4 fe78 	bl	80121b4 <_ZN8touchgfx8Drawable5setXYEss>
 801d4c4:	4639      	mov	r1, r7
 801d4c6:	4628      	mov	r0, r5
 801d4c8:	f7f4 fe92 	bl	80121f0 <_ZN8touchgfx8Drawable8setWidthEs>
 801d4cc:	4628      	mov	r0, r5
 801d4ce:	4631      	mov	r1, r6
 801d4d0:	f7f4 fe9d 	bl	801220e <_ZN8touchgfx8Drawable9setHeightEs>
 801d4d4:	4620      	mov	r0, r4
 801d4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4d8:	0802ca6c 	.word	0x0802ca6c
 801d4dc:	0802b668 	.word	0x0802b668
 801d4e0:	2000bee2 	.word	0x2000bee2
 801d4e4:	2000bee4 	.word	0x2000bee4

0801d4e8 <_ZN8touchgfx6Screen4drawEv>:
 801d4e8:	4b09      	ldr	r3, [pc, #36]	; (801d510 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d4ea:	b507      	push	{r0, r1, r2, lr}
 801d4ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d4f0:	2100      	movs	r1, #0
 801d4f2:	4b08      	ldr	r3, [pc, #32]	; (801d514 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d4f4:	9100      	str	r1, [sp, #0]
 801d4f6:	4669      	mov	r1, sp
 801d4f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d4fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d500:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d504:	6803      	ldr	r3, [r0, #0]
 801d506:	689b      	ldr	r3, [r3, #8]
 801d508:	4798      	blx	r3
 801d50a:	b003      	add	sp, #12
 801d50c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d510:	2000bee2 	.word	0x2000bee2
 801d514:	2000bee4 	.word	0x2000bee4

0801d518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d51c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d520:	b089      	sub	sp, #36	; 0x24
 801d522:	4680      	mov	r8, r0
 801d524:	460c      	mov	r4, r1
 801d526:	4615      	mov	r5, r2
 801d528:	b16b      	cbz	r3, 801d546 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d52a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d52e:	b153      	cbz	r3, 801d546 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d530:	4628      	mov	r0, r5
 801d532:	f7ff ff5b 	bl	801d3ec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d536:	4621      	mov	r1, r4
 801d538:	f7fe ffc2 	bl	801c4c0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d53c:	69eb      	ldr	r3, [r5, #28]
 801d53e:	b928      	cbnz	r0, 801d54c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801d540:	461d      	mov	r5, r3
 801d542:	2b00      	cmp	r3, #0
 801d544:	d1f4      	bne.n	801d530 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801d546:	b009      	add	sp, #36	; 0x24
 801d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d54c:	ae04      	add	r6, sp, #16
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d051      	beq.n	801d5f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d552:	682b      	ldr	r3, [r5, #0]
 801d554:	4629      	mov	r1, r5
 801d556:	a802      	add	r0, sp, #8
 801d558:	68db      	ldr	r3, [r3, #12]
 801d55a:	4798      	blx	r3
 801d55c:	4628      	mov	r0, r5
 801d55e:	f7ff ff61 	bl	801d424 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d562:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d566:	4407      	add	r7, r0
 801d568:	4628      	mov	r0, r5
 801d56a:	f7ff ff6f 	bl	801d44c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d56e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d572:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d576:	b23f      	sxth	r7, r7
 801d578:	4418      	add	r0, r3
 801d57a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d57e:	4621      	mov	r1, r4
 801d580:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d584:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d588:	4630      	mov	r0, r6
 801d58a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d58e:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d592:	f7fb fd3f 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801d596:	4628      	mov	r0, r5
 801d598:	f7ff ff28 	bl	801d3ec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d59c:	ab06      	add	r3, sp, #24
 801d59e:	4602      	mov	r2, r0
 801d5a0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d5a4:	e883 0003 	stmia.w	r3, {r0, r1}
 801d5a8:	4611      	mov	r1, r2
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f7fb fd32 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801d5b0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d5b4:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d5b8:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d5bc:	4299      	cmp	r1, r3
 801d5be:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d5c2:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d5c6:	d10b      	bne.n	801d5e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d5c8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d5cc:	4552      	cmp	r2, sl
 801d5ce:	d107      	bne.n	801d5e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d5d0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d5d4:	455a      	cmp	r2, fp
 801d5d6:	d103      	bne.n	801d5e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801d5d8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d5dc:	454a      	cmp	r2, r9
 801d5de:	d00a      	beq.n	801d5f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d5e0:	f1bb 0f00 	cmp.w	fp, #0
 801d5e4:	d002      	beq.n	801d5ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801d5e6:	f1b9 0f00 	cmp.w	r9, #0
 801d5ea:	d12e      	bne.n	801d64a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801d5ec:	69ea      	ldr	r2, [r5, #28]
 801d5ee:	4621      	mov	r1, r4
 801d5f0:	4640      	mov	r0, r8
 801d5f2:	f7ff ff91 	bl	801d518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d5f6:	4628      	mov	r0, r5
 801d5f8:	f7ff fef8 	bl	801d3ec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d5fc:	6861      	ldr	r1, [r4, #4]
 801d5fe:	4602      	mov	r2, r0
 801d600:	4633      	mov	r3, r6
 801d602:	6820      	ldr	r0, [r4, #0]
 801d604:	c303      	stmia	r3!, {r0, r1}
 801d606:	4611      	mov	r1, r2
 801d608:	4630      	mov	r0, r6
 801d60a:	f7fb fd03 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801d60e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d612:	2b00      	cmp	r3, #0
 801d614:	d097      	beq.n	801d546 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d616:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d093      	beq.n	801d546 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d61e:	4628      	mov	r0, r5
 801d620:	f7ff ff00 	bl	801d424 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d624:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d628:	1a18      	subs	r0, r3, r0
 801d62a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d62e:	4628      	mov	r0, r5
 801d630:	f7ff ff0c 	bl	801d44c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d634:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d638:	4631      	mov	r1, r6
 801d63a:	1a18      	subs	r0, r3, r0
 801d63c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d640:	4628      	mov	r0, r5
 801d642:	682b      	ldr	r3, [r5, #0]
 801d644:	689b      	ldr	r3, [r3, #8]
 801d646:	4798      	blx	r3
 801d648:	e77d      	b.n	801d546 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801d64a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d64e:	fa1f f08a 	uxth.w	r0, sl
 801d652:	4552      	cmp	r2, sl
 801d654:	9000      	str	r0, [sp, #0]
 801d656:	da12      	bge.n	801d67e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801d658:	9301      	str	r3, [sp, #4]
 801d65a:	9b00      	ldr	r3, [sp, #0]
 801d65c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d660:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d664:	1a9a      	subs	r2, r3, r2
 801d666:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d66a:	4631      	mov	r1, r6
 801d66c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d670:	4640      	mov	r0, r8
 801d672:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d676:	69ea      	ldr	r2, [r5, #28]
 801d678:	f7ff ff4e 	bl	801d518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d67c:	9b01      	ldr	r3, [sp, #4]
 801d67e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d682:	b29f      	uxth	r7, r3
 801d684:	429a      	cmp	r2, r3
 801d686:	da0d      	bge.n	801d6a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801d688:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d68c:	1aba      	subs	r2, r7, r2
 801d68e:	f8ad a012 	strh.w	sl, [sp, #18]
 801d692:	4631      	mov	r1, r6
 801d694:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d698:	4640      	mov	r0, r8
 801d69a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d69e:	69ea      	ldr	r2, [r5, #28]
 801d6a0:	f7ff ff3a 	bl	801d518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d6a4:	8822      	ldrh	r2, [r4, #0]
 801d6a6:	445f      	add	r7, fp
 801d6a8:	88a3      	ldrh	r3, [r4, #4]
 801d6aa:	b2bf      	uxth	r7, r7
 801d6ac:	4413      	add	r3, r2
 801d6ae:	b23a      	sxth	r2, r7
 801d6b0:	b29b      	uxth	r3, r3
 801d6b2:	b219      	sxth	r1, r3
 801d6b4:	4291      	cmp	r1, r2
 801d6b6:	dd0d      	ble.n	801d6d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801d6b8:	1bdb      	subs	r3, r3, r7
 801d6ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d6be:	f8ad a012 	strh.w	sl, [sp, #18]
 801d6c2:	4631      	mov	r1, r6
 801d6c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d6c8:	4640      	mov	r0, r8
 801d6ca:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d6ce:	69ea      	ldr	r2, [r5, #28]
 801d6d0:	f7ff ff22 	bl	801d518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d6d4:	88e2      	ldrh	r2, [r4, #6]
 801d6d6:	8863      	ldrh	r3, [r4, #2]
 801d6d8:	4413      	add	r3, r2
 801d6da:	9a00      	ldr	r2, [sp, #0]
 801d6dc:	444a      	add	r2, r9
 801d6de:	b29b      	uxth	r3, r3
 801d6e0:	fa1f f982 	uxth.w	r9, r2
 801d6e4:	b219      	sxth	r1, r3
 801d6e6:	fa0f f289 	sxth.w	r2, r9
 801d6ea:	428a      	cmp	r2, r1
 801d6ec:	da83      	bge.n	801d5f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d6ee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d6f2:	eba3 0309 	sub.w	r3, r3, r9
 801d6f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d6fa:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d6fe:	4631      	mov	r1, r6
 801d700:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d704:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d708:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d70c:	69ea      	ldr	r2, [r5, #28]
 801d70e:	e76f      	b.n	801d5f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801d710 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d712:	2300      	movs	r3, #0
 801d714:	aa02      	add	r2, sp, #8
 801d716:	4604      	mov	r4, r0
 801d718:	3004      	adds	r0, #4
 801d71a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801d71e:	460d      	mov	r5, r1
 801d720:	f7fb fd4f 	bl	80191c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d724:	9a01      	ldr	r2, [sp, #4]
 801d726:	b11a      	cbz	r2, 801d730 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801d728:	4629      	mov	r1, r5
 801d72a:	4620      	mov	r0, r4
 801d72c:	f7ff fef4 	bl	801d518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d730:	b003      	add	sp, #12
 801d732:	bd30      	pop	{r4, r5, pc}

0801d734 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d736:	4602      	mov	r2, r0
 801d738:	4604      	mov	r4, r0
 801d73a:	460d      	mov	r5, r1
 801d73c:	466b      	mov	r3, sp
 801d73e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d742:	6851      	ldr	r1, [r2, #4]
 801d744:	c303      	stmia	r3!, {r0, r1}
 801d746:	4629      	mov	r1, r5
 801d748:	4668      	mov	r0, sp
 801d74a:	f7fb fc63 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 801d74e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d752:	4669      	mov	r1, sp
 801d754:	b123      	cbz	r3, 801d760 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801d756:	4620      	mov	r0, r4
 801d758:	f7ff ffda 	bl	801d710 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d75c:	b003      	add	sp, #12
 801d75e:	bd30      	pop	{r4, r5, pc}
 801d760:	1d20      	adds	r0, r4, #4
 801d762:	f7fb fcf5 	bl	8019150 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d766:	e7f9      	b.n	801d75c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801d768 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d768:	460b      	mov	r3, r1
 801d76a:	680a      	ldr	r2, [r1, #0]
 801d76c:	1d01      	adds	r1, r0, #4
 801d76e:	6952      	ldr	r2, [r2, #20]
 801d770:	4618      	mov	r0, r3
 801d772:	4710      	bx	r2

0801d774 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801d774:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d778:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d780:	bfcc      	ite	gt
 801d782:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801d786:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801d78a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d78e:	ee10 3a10 	vmov	r3, s0
 801d792:	b218      	sxth	r0, r3
 801d794:	4770      	bx	lr

0801d796 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d796:	b510      	push	{r4, lr}
 801d798:	4298      	cmp	r0, r3
 801d79a:	eb01 0402 	add.w	r4, r1, r2
 801d79e:	b224      	sxth	r4, r4
 801d7a0:	d21f      	bcs.n	801d7e2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d7a2:	b1f3      	cbz	r3, 801d7e2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d7a4:	ee07 0a90 	vmov	s15, r0
 801d7a8:	ee06 1a10 	vmov	s12, r1
 801d7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d7b0:	ee07 3a90 	vmov	s15, r3
 801d7b4:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801d7b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d7bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d7c0:	ee06 2a90 	vmov	s13, r2
 801d7c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d7c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d7cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d7d0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d7d4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d7d8:	eea6 0a87 	vfma.f32	s0, s13, s14
 801d7dc:	f7ff ffca 	bl	801d774 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801d7e0:	4604      	mov	r4, r0
 801d7e2:	4620      	mov	r0, r4
 801d7e4:	bd10      	pop	{r4, pc}
	...

0801d7e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801d7e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 801d7ec:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d7f0:	4b03      	ldr	r3, [pc, #12]	; (801d800 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801d7f2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d7f6:	bf08      	it	eq
 801d7f8:	2300      	moveq	r3, #0
 801d7fa:	4308      	orrs	r0, r1
 801d7fc:	4318      	orrs	r0, r3
 801d7fe:	4770      	bx	lr
 801d800:	fffffe00 	.word	0xfffffe00

0801d804 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801d804:	7b43      	ldrb	r3, [r0, #13]
 801d806:	7201      	strb	r1, [r0, #8]
 801d808:	b289      	uxth	r1, r1
 801d80a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801d80e:	05ca      	lsls	r2, r1, #23
 801d810:	bf48      	it	mi
 801d812:	f043 0320 	orrmi.w	r3, r3, #32
 801d816:	7343      	strb	r3, [r0, #13]
 801d818:	058b      	lsls	r3, r1, #22
 801d81a:	bf42      	ittt	mi
 801d81c:	7b43      	ldrbmi	r3, [r0, #13]
 801d81e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801d822:	7343      	strbmi	r3, [r0, #13]
 801d824:	4770      	bx	lr

0801d826 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d826:	b530      	push	{r4, r5, lr}
 801d828:	2500      	movs	r5, #0
 801d82a:	2401      	movs	r4, #1
 801d82c:	6843      	ldr	r3, [r0, #4]
 801d82e:	b913      	cbnz	r3, 801d836 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d830:	6803      	ldr	r3, [r0, #0]
 801d832:	b1f3      	cbz	r3, 801d872 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d834:	6043      	str	r3, [r0, #4]
 801d836:	7c03      	ldrb	r3, [r0, #16]
 801d838:	b143      	cbz	r3, 801d84c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d83a:	68c3      	ldr	r3, [r0, #12]
 801d83c:	b12b      	cbz	r3, 801d84a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d83e:	881a      	ldrh	r2, [r3, #0]
 801d840:	b11a      	cbz	r2, 801d84a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d842:	1c9a      	adds	r2, r3, #2
 801d844:	60c2      	str	r2, [r0, #12]
 801d846:	8818      	ldrh	r0, [r3, #0]
 801d848:	bd30      	pop	{r4, r5, pc}
 801d84a:	7405      	strb	r5, [r0, #16]
 801d84c:	6843      	ldr	r3, [r0, #4]
 801d84e:	8819      	ldrh	r1, [r3, #0]
 801d850:	b179      	cbz	r1, 801d872 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d852:	1c9a      	adds	r2, r3, #2
 801d854:	2902      	cmp	r1, #2
 801d856:	6042      	str	r2, [r0, #4]
 801d858:	d1f5      	bne.n	801d846 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d85a:	6883      	ldr	r3, [r0, #8]
 801d85c:	1d1a      	adds	r2, r3, #4
 801d85e:	6082      	str	r2, [r0, #8]
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	60c3      	str	r3, [r0, #12]
 801d864:	2b00      	cmp	r3, #0
 801d866:	d0e1      	beq.n	801d82c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d868:	881b      	ldrh	r3, [r3, #0]
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d0de      	beq.n	801d82c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d86e:	7404      	strb	r4, [r0, #16]
 801d870:	e7dc      	b.n	801d82c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d872:	2000      	movs	r0, #0
 801d874:	e7e8      	b.n	801d848 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d876 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d876:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d878:	4605      	mov	r5, r0
 801d87a:	4608      	mov	r0, r1
 801d87c:	b1f1      	cbz	r1, 801d8bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d87e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801d882:	460b      	mov	r3, r1
 801d884:	f101 0708 	add.w	r7, r1, #8
 801d888:	4622      	mov	r2, r4
 801d88a:	6818      	ldr	r0, [r3, #0]
 801d88c:	3308      	adds	r3, #8
 801d88e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d892:	4626      	mov	r6, r4
 801d894:	42bb      	cmp	r3, r7
 801d896:	c603      	stmia	r6!, {r0, r1}
 801d898:	4634      	mov	r4, r6
 801d89a:	d1f6      	bne.n	801d88a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d89c:	6818      	ldr	r0, [r3, #0]
 801d89e:	6030      	str	r0, [r6, #0]
 801d8a0:	4610      	mov	r0, r2
 801d8a2:	889b      	ldrh	r3, [r3, #4]
 801d8a4:	80b3      	strh	r3, [r6, #4]
 801d8a6:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801d8aa:	015b      	lsls	r3, r3, #5
 801d8ac:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d8b0:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801d8b4:	430b      	orrs	r3, r1
 801d8b6:	425b      	negs	r3, r3
 801d8b8:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801d8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d8be <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d8be:	b538      	push	{r3, r4, r5, lr}
 801d8c0:	460c      	mov	r4, r1
 801d8c2:	6811      	ldr	r1, [r2, #0]
 801d8c4:	4610      	mov	r0, r2
 801d8c6:	68cd      	ldr	r5, [r1, #12]
 801d8c8:	4619      	mov	r1, r3
 801d8ca:	47a8      	blx	r5
 801d8cc:	2800      	cmp	r0, #0
 801d8ce:	bf08      	it	eq
 801d8d0:	4620      	moveq	r0, r4
 801d8d2:	bd38      	pop	{r3, r4, r5, pc}

0801d8d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d8d4:	b570      	push	{r4, r5, r6, lr}
 801d8d6:	8810      	ldrh	r0, [r2, #0]
 801d8d8:	4298      	cmp	r0, r3
 801d8da:	d817      	bhi.n	801d90c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d8dc:	1e48      	subs	r0, r1, #1
 801d8de:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d8e2:	4298      	cmp	r0, r3
 801d8e4:	d312      	bcc.n	801d90c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d8e6:	2400      	movs	r4, #0
 801d8e8:	428c      	cmp	r4, r1
 801d8ea:	d20f      	bcs.n	801d90c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d8ec:	1860      	adds	r0, r4, r1
 801d8ee:	1040      	asrs	r0, r0, #1
 801d8f0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d8f4:	0085      	lsls	r5, r0, #2
 801d8f6:	42b3      	cmp	r3, r6
 801d8f8:	d902      	bls.n	801d900 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d8fa:	3001      	adds	r0, #1
 801d8fc:	b284      	uxth	r4, r0
 801d8fe:	e7f3      	b.n	801d8e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d900:	d102      	bne.n	801d908 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801d902:	442a      	add	r2, r5
 801d904:	8850      	ldrh	r0, [r2, #2]
 801d906:	bd70      	pop	{r4, r5, r6, pc}
 801d908:	b281      	uxth	r1, r0
 801d90a:	e7ed      	b.n	801d8e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d90c:	2000      	movs	r0, #0
 801d90e:	e7fa      	b.n	801d906 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801d910 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801d910:	b510      	push	{r4, lr}
 801d912:	8ac3      	ldrh	r3, [r0, #22]
 801d914:	428b      	cmp	r3, r1
 801d916:	d805      	bhi.n	801d924 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801d918:	4b07      	ldr	r3, [pc, #28]	; (801d938 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801d91a:	21fd      	movs	r1, #253	; 0xfd
 801d91c:	4a07      	ldr	r2, [pc, #28]	; (801d93c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801d91e:	4808      	ldr	r0, [pc, #32]	; (801d940 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801d920:	f00a fe40 	bl	80285a4 <__assert_func>
 801d924:	8a83      	ldrh	r3, [r0, #20]
 801d926:	240a      	movs	r4, #10
 801d928:	4419      	add	r1, r3
 801d92a:	fbb1 f3f4 	udiv	r3, r1, r4
 801d92e:	fb04 1113 	mls	r1, r4, r3, r1
 801d932:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801d936:	bd10      	pop	{r4, pc}
 801d938:	0802cab9 	.word	0x0802cab9
 801d93c:	0802cee8 	.word	0x0802cee8
 801d940:	0802cac7 	.word	0x0802cac7

0801d944 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801d944:	b508      	push	{r3, lr}
 801d946:	8ac3      	ldrh	r3, [r0, #22]
 801d948:	428b      	cmp	r3, r1
 801d94a:	d805      	bhi.n	801d958 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801d94c:	4b07      	ldr	r3, [pc, #28]	; (801d96c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801d94e:	21d3      	movs	r1, #211	; 0xd3
 801d950:	4a07      	ldr	r2, [pc, #28]	; (801d970 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801d952:	4808      	ldr	r0, [pc, #32]	; (801d974 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801d954:	f00a fe26 	bl	80285a4 <__assert_func>
 801d958:	8a83      	ldrh	r3, [r0, #20]
 801d95a:	220a      	movs	r2, #10
 801d95c:	4419      	add	r1, r3
 801d95e:	fbb1 f3f2 	udiv	r3, r1, r2
 801d962:	fb02 1113 	mls	r1, r2, r3, r1
 801d966:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801d96a:	bd08      	pop	{r3, pc}
 801d96c:	0802cab9 	.word	0x0802cab9
 801d970:	0802cc38 	.word	0x0802cc38
 801d974:	0802cac7 	.word	0x0802cac7

0801d978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d97c:	4604      	mov	r4, r0
 801d97e:	4688      	mov	r8, r1
 801d980:	4615      	mov	r5, r2
 801d982:	b94a      	cbnz	r2, 801d998 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801d984:	4691      	mov	r9, r2
 801d986:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801d98a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801d98e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801d992:	4648      	mov	r0, r9
 801d994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d998:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801d99c:	8892      	ldrh	r2, [r2, #4]
 801d99e:	462b      	mov	r3, r5
 801d9a0:	f105 0c08 	add.w	ip, r5, #8
 801d9a4:	46b3      	mov	fp, r6
 801d9a6:	6818      	ldr	r0, [r3, #0]
 801d9a8:	3308      	adds	r3, #8
 801d9aa:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d9ae:	4637      	mov	r7, r6
 801d9b0:	4563      	cmp	r3, ip
 801d9b2:	c703      	stmia	r7!, {r0, r1}
 801d9b4:	463e      	mov	r6, r7
 801d9b6:	d1f6      	bne.n	801d9a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801d9b8:	6818      	ldr	r0, [r3, #0]
 801d9ba:	46d9      	mov	r9, fp
 801d9bc:	6038      	str	r0, [r7, #0]
 801d9be:	889b      	ldrh	r3, [r3, #4]
 801d9c0:	80bb      	strh	r3, [r7, #4]
 801d9c2:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801d9c6:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801d9ca:	18d3      	adds	r3, r2, r3
 801d9cc:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801d9d0:	b298      	uxth	r0, r3
 801d9d2:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801d9d6:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801d9da:	281d      	cmp	r0, #29
 801d9dc:	ea4a 0a01 	orr.w	sl, sl, r1
 801d9e0:	fa1f f68a 	uxth.w	r6, sl
 801d9e4:	d842      	bhi.n	801da6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801d9e6:	2301      	movs	r3, #1
 801d9e8:	4950      	ldr	r1, [pc, #320]	; (801db2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801d9ea:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801d9ee:	4083      	lsls	r3, r0
 801d9f0:	420b      	tst	r3, r1
 801d9f2:	d114      	bne.n	801da1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d9f4:	f413 7f60 	tst.w	r3, #896	; 0x380
 801d9f8:	d03c      	beq.n	801da74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801d9fa:	fa1f fa8a 	uxth.w	sl, sl
 801d9fe:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801da02:	4658      	mov	r0, fp
 801da04:	eba1 010a 	sub.w	r1, r1, sl
 801da08:	b209      	sxth	r1, r1
 801da0a:	f7ff fefb 	bl	801d804 <_ZN8touchgfx9GlyphNode6setTopEs>
 801da0e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801da12:	1b86      	subs	r6, r0, r6
 801da14:	eba6 0a0a 	sub.w	sl, r6, sl
 801da18:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801da1c:	e7b9      	b.n	801d992 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801da1e:	2100      	movs	r1, #0
 801da20:	f104 001a 	add.w	r0, r4, #26
 801da24:	f7ff ff8e 	bl	801d944 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801da28:	f640 6333 	movw	r3, #3635	; 0xe33
 801da2c:	4601      	mov	r1, r0
 801da2e:	4298      	cmp	r0, r3
 801da30:	d10a      	bne.n	801da48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801da32:	f8d8 3000 	ldr.w	r3, [r8]
 801da36:	4640      	mov	r0, r8
 801da38:	68db      	ldr	r3, [r3, #12]
 801da3a:	4798      	blx	r3
 801da3c:	7b41      	ldrb	r1, [r0, #13]
 801da3e:	7a00      	ldrb	r0, [r0, #8]
 801da40:	f7ff fed2 	bl	801d7e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801da44:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801da48:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801da4c:	4658      	mov	r0, fp
 801da4e:	4431      	add	r1, r6
 801da50:	4451      	add	r1, sl
 801da52:	b209      	sxth	r1, r1
 801da54:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801da58:	f7ff fed4 	bl	801d804 <_ZN8touchgfx9GlyphNode6setTopEs>
 801da5c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801da60:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801da64:	1a9b      	subs	r3, r3, r2
 801da66:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801da6a:	e792      	b.n	801d992 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801da6c:	f640 631b 	movw	r3, #3611	; 0xe1b
 801da70:	429a      	cmp	r2, r3
 801da72:	d005      	beq.n	801da80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801da74:	f022 0302 	bic.w	r3, r2, #2
 801da78:	f640 611d 	movw	r1, #3613	; 0xe1d
 801da7c:	428b      	cmp	r3, r1
 801da7e:	d119      	bne.n	801dab4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801da80:	1e53      	subs	r3, r2, #1
 801da82:	4629      	mov	r1, r5
 801da84:	4642      	mov	r2, r8
 801da86:	4620      	mov	r0, r4
 801da88:	b29b      	uxth	r3, r3
 801da8a:	f7ff ff18 	bl	801d8be <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801da8e:	7b41      	ldrb	r1, [r0, #13]
 801da90:	7a00      	ldrb	r0, [r0, #8]
 801da92:	f7ff fea9 	bl	801d7e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801da96:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801da9a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801da9e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801daa2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801daa6:	4313      	orrs	r3, r2
 801daa8:	115a      	asrs	r2, r3, #5
 801daaa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801daae:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801dab2:	e02e      	b.n	801db12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801dab4:	4639      	mov	r1, r7
 801dab6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801daba:	f7ff fe95 	bl	801d7e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801dabe:	f640 6109 	movw	r1, #3593	; 0xe09
 801dac2:	f022 0310 	bic.w	r3, r2, #16
 801dac6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801daca:	428b      	cmp	r3, r1
 801dacc:	d003      	beq.n	801dad6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801dace:	f640 6313 	movw	r3, #3603	; 0xe13
 801dad2:	429a      	cmp	r2, r3
 801dad4:	d127      	bne.n	801db26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801dad6:	b27f      	sxtb	r7, r7
 801dad8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801dadc:	4629      	mov	r1, r5
 801dade:	4620      	mov	r0, r4
 801dae0:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801dae4:	431f      	orrs	r7, r3
 801dae6:	f640 6313 	movw	r3, #3603	; 0xe13
 801daea:	429a      	cmp	r2, r3
 801daec:	bf14      	ite	ne
 801daee:	f102 33ff 	addne.w	r3, r2, #4294967295
 801daf2:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801daf6:	4642      	mov	r2, r8
 801daf8:	bf18      	it	ne
 801dafa:	b29b      	uxthne	r3, r3
 801dafc:	f7ff fedf 	bl	801d8be <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801db00:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801db04:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801db08:	7a83      	ldrb	r3, [r0, #10]
 801db0a:	4313      	orrs	r3, r2
 801db0c:	1aff      	subs	r7, r7, r3
 801db0e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801db12:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801db16:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801db1a:	f7ff fe65 	bl	801d7e8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801db1e:	1b80      	subs	r0, r0, r6
 801db20:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801db24:	e735      	b.n	801d992 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801db26:	2300      	movs	r3, #0
 801db28:	e7c1      	b.n	801daae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801db2a:	bf00      	nop
 801db2c:	3fc00079 	.word	0x3fc00079

0801db30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801db30:	3a01      	subs	r2, #1
 801db32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db36:	b292      	uxth	r2, r2
 801db38:	460c      	mov	r4, r1
 801db3a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801db3e:	42b2      	cmp	r2, r6
 801db40:	d018      	beq.n	801db74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801db42:	8b01      	ldrh	r1, [r0, #24]
 801db44:	f834 5b02 	ldrh.w	r5, [r4], #2
 801db48:	4291      	cmp	r1, r2
 801db4a:	d805      	bhi.n	801db58 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801db4c:	4b13      	ldr	r3, [pc, #76]	; (801db9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801db4e:	21d3      	movs	r1, #211	; 0xd3
 801db50:	4a13      	ldr	r2, [pc, #76]	; (801dba0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801db52:	4814      	ldr	r0, [pc, #80]	; (801dba4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801db54:	f00a fd26 	bl	80285a4 <__assert_func>
 801db58:	8ac1      	ldrh	r1, [r0, #22]
 801db5a:	4411      	add	r1, r2
 801db5c:	3a01      	subs	r2, #1
 801db5e:	f001 0101 	and.w	r1, r1, #1
 801db62:	b292      	uxth	r2, r2
 801db64:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801db68:	8a49      	ldrh	r1, [r1, #18]
 801db6a:	428d      	cmp	r5, r1
 801db6c:	d0e7      	beq.n	801db3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801db6e:	2000      	movs	r0, #0
 801db70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db74:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801db78:	2600      	movs	r6, #0
 801db7a:	f100 051a 	add.w	r5, r0, #26
 801db7e:	441f      	add	r7, r3
 801db80:	b2b1      	uxth	r1, r6
 801db82:	42b9      	cmp	r1, r7
 801db84:	da08      	bge.n	801db98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801db86:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801db8a:	4628      	mov	r0, r5
 801db8c:	f7ff feda 	bl	801d944 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801db90:	3601      	adds	r6, #1
 801db92:	4540      	cmp	r0, r8
 801db94:	d0f4      	beq.n	801db80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801db96:	e7ea      	b.n	801db6e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801db98:	2001      	movs	r0, #1
 801db9a:	e7e9      	b.n	801db70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801db9c:	0802cab9 	.word	0x0802cab9
 801dba0:	0802d048 	.word	0x0802d048
 801dba4:	0802cac7 	.word	0x0802cac7

0801dba8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801dba8:	b538      	push	{r3, r4, r5, lr}
 801dbaa:	8ac3      	ldrh	r3, [r0, #22]
 801dbac:	428b      	cmp	r3, r1
 801dbae:	d205      	bcs.n	801dbbc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801dbb0:	4b08      	ldr	r3, [pc, #32]	; (801dbd4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801dbb2:	21d8      	movs	r1, #216	; 0xd8
 801dbb4:	4a08      	ldr	r2, [pc, #32]	; (801dbd8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801dbb6:	4809      	ldr	r0, [pc, #36]	; (801dbdc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801dbb8:	f00a fcf4 	bl	80285a4 <__assert_func>
 801dbbc:	8a82      	ldrh	r2, [r0, #20]
 801dbbe:	250a      	movs	r5, #10
 801dbc0:	1a5b      	subs	r3, r3, r1
 801dbc2:	440a      	add	r2, r1
 801dbc4:	82c3      	strh	r3, [r0, #22]
 801dbc6:	fbb2 f4f5 	udiv	r4, r2, r5
 801dbca:	fb05 2214 	mls	r2, r5, r4, r2
 801dbce:	8282      	strh	r2, [r0, #20]
 801dbd0:	bd38      	pop	{r3, r4, r5, pc}
 801dbd2:	bf00      	nop
 801dbd4:	0802caad 	.word	0x0802caad
 801dbd8:	0802ce64 	.word	0x0802ce64
 801dbdc:	0802cac7 	.word	0x0802cac7

0801dbe0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801dbe0:	b538      	push	{r3, r4, r5, lr}
 801dbe2:	8ac3      	ldrh	r3, [r0, #22]
 801dbe4:	2b09      	cmp	r3, #9
 801dbe6:	d905      	bls.n	801dbf4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801dbe8:	4b08      	ldr	r3, [pc, #32]	; (801dc0c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801dbea:	21f7      	movs	r1, #247	; 0xf7
 801dbec:	4a08      	ldr	r2, [pc, #32]	; (801dc10 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801dbee:	4809      	ldr	r0, [pc, #36]	; (801dc14 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801dbf0:	f00a fcd8 	bl	80285a4 <__assert_func>
 801dbf4:	8a82      	ldrh	r2, [r0, #20]
 801dbf6:	250a      	movs	r5, #10
 801dbf8:	441a      	add	r2, r3
 801dbfa:	3301      	adds	r3, #1
 801dbfc:	fbb2 f4f5 	udiv	r4, r2, r5
 801dc00:	fb05 2214 	mls	r2, r5, r4, r2
 801dc04:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801dc08:	82c3      	strh	r3, [r0, #22]
 801dc0a:	bd38      	pop	{r3, r4, r5, pc}
 801dc0c:	0802caa1 	.word	0x0802caa1
 801dc10:	0802cdb5 	.word	0x0802cdb5
 801dc14:	0802cac7 	.word	0x0802cac7

0801dc18 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801dc18:	b538      	push	{r3, r4, r5, lr}
 801dc1a:	4604      	mov	r4, r0
 801dc1c:	f100 051a 	add.w	r5, r0, #26
 801dc20:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dc22:	2b0a      	cmp	r3, #10
 801dc24:	d01c      	beq.n	801dc60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801dc26:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801dc28:	b962      	cbnz	r2, 801dc44 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801dc2a:	f104 051a 	add.w	r5, r4, #26
 801dc2e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dc30:	2b0a      	cmp	r3, #10
 801dc32:	d015      	beq.n	801dc60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801dc34:	4620      	mov	r0, r4
 801dc36:	f7ff fdf6 	bl	801d826 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dc3a:	4601      	mov	r1, r0
 801dc3c:	4628      	mov	r0, r5
 801dc3e:	f7ff ffcf 	bl	801dbe0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801dc42:	e7f4      	b.n	801dc2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801dc44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dc46:	3a01      	subs	r2, #1
 801dc48:	4628      	mov	r0, r5
 801dc4a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801dc4e:	3301      	adds	r3, #1
 801dc50:	f003 0301 	and.w	r3, r3, #1
 801dc54:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801dc56:	8722      	strh	r2, [r4, #56]	; 0x38
 801dc58:	86e3      	strh	r3, [r4, #54]	; 0x36
 801dc5a:	f7ff ffc1 	bl	801dbe0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801dc5e:	e7df      	b.n	801dc20 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801dc60:	bd38      	pop	{r3, r4, r5, pc}
	...

0801dc64 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801dc64:	2300      	movs	r3, #0
 801dc66:	b510      	push	{r4, lr}
 801dc68:	6043      	str	r3, [r0, #4]
 801dc6a:	4604      	mov	r4, r0
 801dc6c:	60c3      	str	r3, [r0, #12]
 801dc6e:	7403      	strb	r3, [r0, #16]
 801dc70:	8603      	strh	r3, [r0, #48]	; 0x30
 801dc72:	8303      	strh	r3, [r0, #24]
 801dc74:	8703      	strh	r3, [r0, #56]	; 0x38
 801dc76:	f7ff ffcf 	bl	801dc18 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dc7a:	4a0a      	ldr	r2, [pc, #40]	; (801dca4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801dc7c:	6813      	ldr	r3, [r2, #0]
 801dc7e:	4611      	mov	r1, r2
 801dc80:	b913      	cbnz	r3, 801dc88 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801dc82:	6852      	ldr	r2, [r2, #4]
 801dc84:	07d0      	lsls	r0, r2, #31
 801dc86:	d50b      	bpl.n	801dca0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801dc88:	6849      	ldr	r1, [r1, #4]
 801dc8a:	104a      	asrs	r2, r1, #1
 801dc8c:	07c9      	lsls	r1, r1, #31
 801dc8e:	eb04 0002 	add.w	r0, r4, r2
 801dc92:	bf48      	it	mi
 801dc94:	58a2      	ldrmi	r2, [r4, r2]
 801dc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc9a:	bf48      	it	mi
 801dc9c:	58d3      	ldrmi	r3, [r2, r3]
 801dc9e:	4718      	bx	r3
 801dca0:	bd10      	pop	{r4, pc}
 801dca2:	bf00      	nop
 801dca4:	200086e4 	.word	0x200086e4

0801dca8 <_ZN8touchgfx12TextProviderC1Ev>:
 801dca8:	2300      	movs	r3, #0
 801dcaa:	2201      	movs	r2, #1
 801dcac:	b510      	push	{r4, lr}
 801dcae:	4604      	mov	r4, r0
 801dcb0:	60c3      	str	r3, [r0, #12]
 801dcb2:	7403      	strb	r3, [r0, #16]
 801dcb4:	82c3      	strh	r3, [r0, #22]
 801dcb6:	8303      	strh	r3, [r0, #24]
 801dcb8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801dcba:	8603      	strh	r3, [r0, #48]	; 0x30
 801dcbc:	86c3      	strh	r3, [r0, #54]	; 0x36
 801dcbe:	8703      	strh	r3, [r0, #56]	; 0x38
 801dcc0:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dcc2:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801dcc6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801dcca:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801dcce:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801dcd2:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801dcd6:	e9c0 3300 	strd	r3, r3, [r0]
 801dcda:	f7ff ffc3 	bl	801dc64 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801dcde:	4620      	mov	r0, r4
 801dce0:	bd10      	pop	{r4, pc}

0801dce2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801dce2:	b410      	push	{r4}
 801dce4:	6082      	str	r2, [r0, #8]
 801dce6:	6001      	str	r1, [r0, #0]
 801dce8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dcea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dcee:	f7ff bfb9 	b.w	801dc64 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801dcf4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801dcf4:	b508      	push	{r3, lr}
 801dcf6:	88c2      	ldrh	r2, [r0, #6]
 801dcf8:	440a      	add	r2, r1
 801dcfa:	2a02      	cmp	r2, #2
 801dcfc:	dd05      	ble.n	801dd0a <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801dcfe:	4b06      	ldr	r3, [pc, #24]	; (801dd18 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801dd00:	21ec      	movs	r1, #236	; 0xec
 801dd02:	4a06      	ldr	r2, [pc, #24]	; (801dd1c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801dd04:	4806      	ldr	r0, [pc, #24]	; (801dd20 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801dd06:	f00a fc4d 	bl	80285a4 <__assert_func>
 801dd0a:	8883      	ldrh	r3, [r0, #4]
 801dd0c:	80c2      	strh	r2, [r0, #6]
 801dd0e:	1a59      	subs	r1, r3, r1
 801dd10:	f001 0101 	and.w	r1, r1, #1
 801dd14:	8081      	strh	r1, [r0, #4]
 801dd16:	bd08      	pop	{r3, pc}
 801dd18:	0802caf3 	.word	0x0802caf3
 801dd1c:	0802cfc1 	.word	0x0802cfc1
 801dd20:	0802cac7 	.word	0x0802cac7

0801dd24 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801dd24:	b508      	push	{r3, lr}
 801dd26:	88c3      	ldrh	r3, [r0, #6]
 801dd28:	428b      	cmp	r3, r1
 801dd2a:	d805      	bhi.n	801dd38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801dd2c:	4b06      	ldr	r3, [pc, #24]	; (801dd48 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801dd2e:	21fd      	movs	r1, #253	; 0xfd
 801dd30:	4a06      	ldr	r2, [pc, #24]	; (801dd4c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801dd32:	4807      	ldr	r0, [pc, #28]	; (801dd50 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801dd34:	f00a fc36 	bl	80285a4 <__assert_func>
 801dd38:	8883      	ldrh	r3, [r0, #4]
 801dd3a:	4419      	add	r1, r3
 801dd3c:	f001 0101 	and.w	r1, r1, #1
 801dd40:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801dd44:	bd08      	pop	{r3, pc}
 801dd46:	bf00      	nop
 801dd48:	0802cab9 	.word	0x0802cab9
 801dd4c:	0802d119 	.word	0x0802d119
 801dd50:	0802cac7 	.word	0x0802cac7

0801dd54 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801dd54:	b570      	push	{r4, r5, r6, lr}
 801dd56:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801dd58:	4604      	mov	r4, r0
 801dd5a:	b92a      	cbnz	r2, 801dd68 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801dd5c:	4b12      	ldr	r3, [pc, #72]	; (801dda8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801dd5e:	21de      	movs	r1, #222	; 0xde
 801dd60:	4a12      	ldr	r2, [pc, #72]	; (801ddac <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801dd62:	4813      	ldr	r0, [pc, #76]	; (801ddb0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801dd64:	f00a fc1e 	bl	80285a4 <__assert_func>
 801dd68:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801dd6a:	260a      	movs	r6, #10
 801dd6c:	3a01      	subs	r2, #1
 801dd6e:	3412      	adds	r4, #18
 801dd70:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801dd74:	3301      	adds	r3, #1
 801dd76:	8b4d      	ldrh	r5, [r1, #26]
 801dd78:	8602      	strh	r2, [r0, #48]	; 0x30
 801dd7a:	fbb3 f1f6 	udiv	r1, r3, r6
 801dd7e:	fb06 3311 	mls	r3, r6, r1, r3
 801dd82:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801dd84:	f7ff ff48 	bl	801dc18 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dd88:	88e3      	ldrh	r3, [r4, #6]
 801dd8a:	2101      	movs	r1, #1
 801dd8c:	2b02      	cmp	r3, #2
 801dd8e:	bf04      	itt	eq
 801dd90:	2301      	moveq	r3, #1
 801dd92:	80e3      	strheq	r3, [r4, #6]
 801dd94:	4620      	mov	r0, r4
 801dd96:	f7ff ffad 	bl	801dcf4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801dd9a:	4620      	mov	r0, r4
 801dd9c:	462a      	mov	r2, r5
 801dd9e:	2100      	movs	r1, #0
 801dda0:	f7ff ffc0 	bl	801dd24 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801dda4:	4628      	mov	r0, r5
 801dda6:	bd70      	pop	{r4, r5, r6, pc}
 801dda8:	0802ca98 	.word	0x0802ca98
 801ddac:	0802cd0a 	.word	0x0802cd0a
 801ddb0:	0802cac7 	.word	0x0802cac7

0801ddb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ddb4:	428a      	cmp	r2, r1
 801ddb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddba:	4604      	mov	r4, r0
 801ddbc:	460e      	mov	r6, r1
 801ddbe:	4615      	mov	r5, r2
 801ddc0:	469a      	mov	sl, r3
 801ddc2:	d92b      	bls.n	801de1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801ddc4:	1a57      	subs	r7, r2, r1
 801ddc6:	f04f 0800 	mov.w	r8, #0
 801ddca:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801ddce:	f04f 0b0a 	mov.w	fp, #10
 801ddd2:	b2bf      	uxth	r7, r7
 801ddd4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ddd6:	b92b      	cbnz	r3, 801dde4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801ddd8:	4b24      	ldr	r3, [pc, #144]	; (801de6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801ddda:	21e6      	movs	r1, #230	; 0xe6
 801dddc:	4a24      	ldr	r2, [pc, #144]	; (801de70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801ddde:	4825      	ldr	r0, [pc, #148]	; (801de74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801dde0:	f00a fbe0 	bl	80285a4 <__assert_func>
 801dde4:	3b01      	subs	r3, #1
 801dde6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801dde8:	2101      	movs	r1, #1
 801ddea:	4648      	mov	r0, r9
 801ddec:	b29b      	uxth	r3, r3
 801ddee:	f108 0801 	add.w	r8, r8, #1
 801ddf2:	441a      	add	r2, r3
 801ddf4:	8623      	strh	r3, [r4, #48]	; 0x30
 801ddf6:	fbb2 f3fb 	udiv	r3, r2, fp
 801ddfa:	fb0b 2313 	mls	r3, fp, r3, r2
 801ddfe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801de02:	8b5a      	ldrh	r2, [r3, #26]
 801de04:	9201      	str	r2, [sp, #4]
 801de06:	f7ff ff75 	bl	801dcf4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801de0a:	9a01      	ldr	r2, [sp, #4]
 801de0c:	2100      	movs	r1, #0
 801de0e:	4648      	mov	r0, r9
 801de10:	f7ff ff88 	bl	801dd24 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801de14:	fa1f f388 	uxth.w	r3, r8
 801de18:	429f      	cmp	r7, r3
 801de1a:	d8db      	bhi.n	801ddd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801de1c:	f104 071a 	add.w	r7, r4, #26
 801de20:	4631      	mov	r1, r6
 801de22:	260a      	movs	r6, #10
 801de24:	4638      	mov	r0, r7
 801de26:	f7ff febf 	bl	801dba8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801de2a:	b1c5      	cbz	r5, 801de5e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801de2c:	3d01      	subs	r5, #1
 801de2e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801de30:	b2ad      	uxth	r5, r5
 801de32:	2b09      	cmp	r3, #9
 801de34:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801de38:	d903      	bls.n	801de42 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801de3a:	4b0f      	ldr	r3, [pc, #60]	; (801de78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801de3c:	21ec      	movs	r1, #236	; 0xec
 801de3e:	4a0f      	ldr	r2, [pc, #60]	; (801de7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801de40:	e7cd      	b.n	801ddde <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801de42:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801de44:	3301      	adds	r3, #1
 801de46:	3109      	adds	r1, #9
 801de48:	8623      	strh	r3, [r4, #48]	; 0x30
 801de4a:	fbb1 f0f6 	udiv	r0, r1, r6
 801de4e:	fb06 1110 	mls	r1, r6, r0, r1
 801de52:	4638      	mov	r0, r7
 801de54:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801de56:	2100      	movs	r1, #0
 801de58:	f7ff fd5a 	bl	801d910 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801de5c:	e7e5      	b.n	801de2a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801de5e:	4620      	mov	r0, r4
 801de60:	b003      	add	sp, #12
 801de62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de66:	f7ff bed7 	b.w	801dc18 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801de6a:	bf00      	nop
 801de6c:	0802ca98 	.word	0x0802ca98
 801de70:	0802cb8e 	.word	0x0802cb8e
 801de74:	0802cac7 	.word	0x0802cac7
 801de78:	0802caf3 	.word	0x0802caf3
 801de7c:	0802cb06 	.word	0x0802cb06

0801de80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801de80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de84:	4605      	mov	r5, r0
 801de86:	4616      	mov	r6, r2
 801de88:	1c8c      	adds	r4, r1, #2
 801de8a:	8809      	ldrh	r1, [r1, #0]
 801de8c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801de90:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801de94:	42b3      	cmp	r3, r6
 801de96:	d124      	bne.n	801dee2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801de98:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801de9c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801dea0:	f001 070f 	and.w	r7, r1, #15
 801dea4:	4652      	mov	r2, sl
 801dea6:	f8cd 8000 	str.w	r8, [sp]
 801deaa:	464b      	mov	r3, r9
 801deac:	4621      	mov	r1, r4
 801deae:	4628      	mov	r0, r5
 801deb0:	f7ff fe3e 	bl	801db30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801deb4:	4683      	mov	fp, r0
 801deb6:	b168      	cbz	r0, 801ded4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801deb8:	eb0a 0109 	add.w	r1, sl, r9
 801debc:	463a      	mov	r2, r7
 801debe:	4628      	mov	r0, r5
 801dec0:	4441      	add	r1, r8
 801dec2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801dec6:	4649      	mov	r1, r9
 801dec8:	f7ff ff74 	bl	801ddb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801decc:	4658      	mov	r0, fp
 801dece:	b003      	add	sp, #12
 801ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ded4:	eb07 010a 	add.w	r1, r7, sl
 801ded8:	4449      	add	r1, r9
 801deda:	4441      	add	r1, r8
 801dedc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801dee0:	e7d2      	b.n	801de88 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801dee2:	f04f 0b00 	mov.w	fp, #0
 801dee6:	e7f1      	b.n	801decc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801dee8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801deec:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801deee:	4604      	mov	r4, r0
 801def0:	260b      	movs	r6, #11
 801def2:	f100 091a 	add.w	r9, r0, #26
 801def6:	886f      	ldrh	r7, [r5, #2]
 801def8:	087f      	lsrs	r7, r7, #1
 801defa:	3e01      	subs	r6, #1
 801defc:	d013      	beq.n	801df26 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801defe:	2100      	movs	r1, #0
 801df00:	4648      	mov	r0, r9
 801df02:	f7ff fd1f 	bl	801d944 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801df06:	462a      	mov	r2, r5
 801df08:	4680      	mov	r8, r0
 801df0a:	4603      	mov	r3, r0
 801df0c:	4639      	mov	r1, r7
 801df0e:	4620      	mov	r0, r4
 801df10:	f7ff fce0 	bl	801d8d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801df14:	b138      	cbz	r0, 801df26 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801df16:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801df1a:	4642      	mov	r2, r8
 801df1c:	4620      	mov	r0, r4
 801df1e:	f7ff ffaf 	bl	801de80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801df22:	2800      	cmp	r0, #0
 801df24:	d1e9      	bne.n	801defa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801df26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801df2c:	4b1e      	ldr	r3, [pc, #120]	; (801dfa8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801df2e:	b570      	push	{r4, r5, r6, lr}
 801df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df34:	4604      	mov	r4, r0
 801df36:	f003 0501 	and.w	r5, r3, #1
 801df3a:	b902      	cbnz	r2, 801df3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801df3c:	b165      	cbz	r5, 801df58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801df3e:	105b      	asrs	r3, r3, #1
 801df40:	f104 061a 	add.w	r6, r4, #26
 801df44:	18e0      	adds	r0, r4, r3
 801df46:	b10d      	cbz	r5, 801df4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801df48:	58e3      	ldr	r3, [r4, r3]
 801df4a:	589a      	ldr	r2, [r3, r2]
 801df4c:	4790      	blx	r2
 801df4e:	2100      	movs	r1, #0
 801df50:	4602      	mov	r2, r0
 801df52:	4630      	mov	r0, r6
 801df54:	f7ff fcdc 	bl	801d910 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801df58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801df5a:	b303      	cbz	r3, 801df9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801df5c:	f104 051a 	add.w	r5, r4, #26
 801df60:	2100      	movs	r1, #0
 801df62:	4628      	mov	r0, r5
 801df64:	f7ff fcee 	bl	801d944 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801df68:	b1c8      	cbz	r0, 801df9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801df6a:	4620      	mov	r0, r4
 801df6c:	f7ff ffbc 	bl	801dee8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801df70:	2101      	movs	r1, #1
 801df72:	4628      	mov	r0, r5
 801df74:	f7ff fce6 	bl	801d944 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801df78:	f640 133f 	movw	r3, #2367	; 0x93f
 801df7c:	4606      	mov	r6, r0
 801df7e:	4298      	cmp	r0, r3
 801df80:	d10d      	bne.n	801df9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801df82:	2100      	movs	r1, #0
 801df84:	4628      	mov	r0, r5
 801df86:	f7ff fcdd 	bl	801d944 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801df8a:	2101      	movs	r1, #1
 801df8c:	4602      	mov	r2, r0
 801df8e:	4628      	mov	r0, r5
 801df90:	f7ff fcbe 	bl	801d910 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801df94:	4632      	mov	r2, r6
 801df96:	2100      	movs	r1, #0
 801df98:	4628      	mov	r0, r5
 801df9a:	f7ff fcb9 	bl	801d910 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801df9e:	4620      	mov	r0, r4
 801dfa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfa4:	f7ff bed6 	b.w	801dd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dfa8:	200086ec 	.word	0x200086ec

0801dfac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfae:	4617      	mov	r7, r2
 801dfb0:	461e      	mov	r6, r3
 801dfb2:	4605      	mov	r5, r0
 801dfb4:	f7ff ffba 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dfb8:	683b      	ldr	r3, [r7, #0]
 801dfba:	4604      	mov	r4, r0
 801dfbc:	4601      	mov	r1, r0
 801dfbe:	4638      	mov	r0, r7
 801dfc0:	68db      	ldr	r3, [r3, #12]
 801dfc2:	4798      	blx	r3
 801dfc4:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801dfc8:	4602      	mov	r2, r0
 801dfca:	6030      	str	r0, [r6, #0]
 801dfcc:	b29b      	uxth	r3, r3
 801dfce:	2b7f      	cmp	r3, #127	; 0x7f
 801dfd0:	d813      	bhi.n	801dffa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801dfd2:	4639      	mov	r1, r7
 801dfd4:	4628      	mov	r0, r5
 801dfd6:	f7ff fccf 	bl	801d978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801dfda:	6030      	str	r0, [r6, #0]
 801dfdc:	6833      	ldr	r3, [r6, #0]
 801dfde:	b143      	cbz	r3, 801dff2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801dfe0:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801dfe4:	7a9b      	ldrb	r3, [r3, #10]
 801dfe6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dfea:	4313      	orrs	r3, r2
 801dfec:	bf0c      	ite	eq
 801dfee:	2301      	moveq	r3, #1
 801dff0:	2300      	movne	r3, #0
 801dff2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801dff6:	4620      	mov	r0, r4
 801dff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dffa:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d0ec      	beq.n	801dfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801e002:	f640 1302 	movw	r3, #2306	; 0x902
 801e006:	429c      	cmp	r4, r3
 801e008:	d1e8      	bne.n	801dfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801e00a:	4601      	mov	r1, r0
 801e00c:	4628      	mov	r0, r5
 801e00e:	f7ff fc32 	bl	801d876 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e012:	e7e2      	b.n	801dfda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801e014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e018:	4617      	mov	r7, r2
 801e01a:	461e      	mov	r6, r3
 801e01c:	4605      	mov	r5, r0
 801e01e:	f7ff ff85 	bl	801df2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e022:	683b      	ldr	r3, [r7, #0]
 801e024:	4604      	mov	r4, r0
 801e026:	4601      	mov	r1, r0
 801e028:	4638      	mov	r0, r7
 801e02a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801e02e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e032:	47c0      	blx	r8
 801e034:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801e038:	4602      	mov	r2, r0
 801e03a:	6030      	str	r0, [r6, #0]
 801e03c:	b29b      	uxth	r3, r3
 801e03e:	2b7f      	cmp	r3, #127	; 0x7f
 801e040:	d814      	bhi.n	801e06c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801e042:	4639      	mov	r1, r7
 801e044:	4628      	mov	r0, r5
 801e046:	f7ff fc97 	bl	801d978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e04a:	6030      	str	r0, [r6, #0]
 801e04c:	6833      	ldr	r3, [r6, #0]
 801e04e:	b143      	cbz	r3, 801e062 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801e050:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801e054:	7a9b      	ldrb	r3, [r3, #10]
 801e056:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e05a:	4313      	orrs	r3, r2
 801e05c:	bf0c      	ite	eq
 801e05e:	2301      	moveq	r3, #1
 801e060:	2300      	movne	r3, #0
 801e062:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801e066:	4620      	mov	r0, r4
 801e068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e06c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801e070:	2b00      	cmp	r3, #0
 801e072:	d0eb      	beq.n	801e04c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801e074:	f640 1302 	movw	r3, #2306	; 0x902
 801e078:	429c      	cmp	r4, r3
 801e07a:	d1e7      	bne.n	801e04c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801e07c:	4601      	mov	r1, r0
 801e07e:	4628      	mov	r0, r5
 801e080:	f7ff fbf9 	bl	801d876 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e084:	e7e1      	b.n	801e04a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801e086 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e086:	4602      	mov	r2, r0
 801e088:	b148      	cbz	r0, 801e09e <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e08a:	2300      	movs	r3, #0
 801e08c:	b298      	uxth	r0, r3
 801e08e:	3301      	adds	r3, #1
 801e090:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e094:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e098:	2900      	cmp	r1, #0
 801e09a:	d1f7      	bne.n	801e08c <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e09c:	4770      	bx	lr
 801e09e:	4770      	bx	lr

0801e0a0 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801e0a0:	b140      	cbz	r0, 801e0b4 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801e0a2:	4602      	mov	r2, r0
 801e0a4:	1a13      	subs	r3, r2, r0
 801e0a6:	f812 1b01 	ldrb.w	r1, [r2], #1
 801e0aa:	b29b      	uxth	r3, r3
 801e0ac:	2900      	cmp	r1, #0
 801e0ae:	d1f9      	bne.n	801e0a4 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	4770      	bx	lr
 801e0b4:	4603      	mov	r3, r0
 801e0b6:	e7fb      	b.n	801e0b0 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801e0b8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e0b8:	b530      	push	{r4, r5, lr}
 801e0ba:	4604      	mov	r4, r0
 801e0bc:	b159      	cbz	r1, 801e0d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e0be:	b148      	cbz	r0, 801e0d4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e0c0:	2300      	movs	r3, #0
 801e0c2:	b298      	uxth	r0, r3
 801e0c4:	4282      	cmp	r2, r0
 801e0c6:	d905      	bls.n	801e0d4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e0c8:	5ccd      	ldrb	r5, [r1, r3]
 801e0ca:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e0ce:	3301      	adds	r3, #1
 801e0d0:	2d00      	cmp	r5, #0
 801e0d2:	d1f6      	bne.n	801e0c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e0d4:	bd30      	pop	{r4, r5, pc}
 801e0d6:	4608      	mov	r0, r1
 801e0d8:	e7fc      	b.n	801e0d4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e0da <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801e0da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0dc:	468c      	mov	ip, r1
 801e0de:	b08b      	sub	sp, #44	; 0x2c
 801e0e0:	2100      	movs	r1, #0
 801e0e2:	ae01      	add	r6, sp, #4
 801e0e4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e0e8:	211f      	movs	r1, #31
 801e0ea:	fbb0 f7f3 	udiv	r7, r0, r3
 801e0ee:	fb03 0517 	mls	r5, r3, r7, r0
 801e0f2:	4638      	mov	r0, r7
 801e0f4:	b2ec      	uxtb	r4, r5
 801e0f6:	2d09      	cmp	r5, #9
 801e0f8:	bfd4      	ite	le
 801e0fa:	3430      	addle	r4, #48	; 0x30
 801e0fc:	3457      	addgt	r4, #87	; 0x57
 801e0fe:	b2e4      	uxtb	r4, r4
 801e100:	558c      	strb	r4, [r1, r6]
 801e102:	1e4c      	subs	r4, r1, #1
 801e104:	b92f      	cbnz	r7, 801e112 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801e106:	4431      	add	r1, r6
 801e108:	4660      	mov	r0, ip
 801e10a:	f7ff ffd5 	bl	801e0b8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e10e:	b00b      	add	sp, #44	; 0x2c
 801e110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e112:	4621      	mov	r1, r4
 801e114:	e7e9      	b.n	801e0ea <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801e116 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e116:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e118:	4607      	mov	r7, r0
 801e11a:	b08b      	sub	sp, #44	; 0x2c
 801e11c:	4608      	mov	r0, r1
 801e11e:	b341      	cbz	r1, 801e172 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e120:	1e99      	subs	r1, r3, #2
 801e122:	290e      	cmp	r1, #14
 801e124:	d825      	bhi.n	801e172 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e126:	2100      	movs	r1, #0
 801e128:	463c      	mov	r4, r7
 801e12a:	261f      	movs	r6, #31
 801e12c:	f10d 0c04 	add.w	ip, sp, #4
 801e130:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e134:	1e71      	subs	r1, r6, #1
 801e136:	fb94 fef3 	sdiv	lr, r4, r3
 801e13a:	fb03 441e 	mls	r4, r3, lr, r4
 801e13e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e142:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e146:	b2ec      	uxtb	r4, r5
 801e148:	2d09      	cmp	r5, #9
 801e14a:	bfd4      	ite	le
 801e14c:	3430      	addle	r4, #48	; 0x30
 801e14e:	3457      	addgt	r4, #87	; 0x57
 801e150:	b2e4      	uxtb	r4, r4
 801e152:	f80c 4006 	strb.w	r4, [ip, r6]
 801e156:	4674      	mov	r4, lr
 801e158:	b96c      	cbnz	r4, 801e176 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e15a:	2f00      	cmp	r7, #0
 801e15c:	da05      	bge.n	801e16a <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e15e:	ab0a      	add	r3, sp, #40	; 0x28
 801e160:	4419      	add	r1, r3
 801e162:	232d      	movs	r3, #45	; 0x2d
 801e164:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e168:	1eb1      	subs	r1, r6, #2
 801e16a:	3101      	adds	r1, #1
 801e16c:	4461      	add	r1, ip
 801e16e:	f7ff ffa3 	bl	801e0b8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e172:	b00b      	add	sp, #44	; 0x2c
 801e174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e176:	460e      	mov	r6, r1
 801e178:	e7dc      	b.n	801e134 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e17a <_ZN8touchgfx7Unicode4atoiEPKt>:
 801e17a:	b510      	push	{r4, lr}
 801e17c:	b158      	cbz	r0, 801e196 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801e17e:	1e82      	subs	r2, r0, #2
 801e180:	210a      	movs	r1, #10
 801e182:	2000      	movs	r0, #0
 801e184:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e188:	3b30      	subs	r3, #48	; 0x30
 801e18a:	b29c      	uxth	r4, r3
 801e18c:	2c09      	cmp	r4, #9
 801e18e:	d802      	bhi.n	801e196 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801e190:	fb01 3000 	mla	r0, r1, r0, r3
 801e194:	e7f6      	b.n	801e184 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801e196:	bd10      	pop	{r4, pc}

0801e198 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e19c:	b085      	sub	sp, #20
 801e19e:	f8d0 8000 	ldr.w	r8, [r0]
 801e1a2:	468a      	mov	sl, r1
 801e1a4:	461c      	mov	r4, r3
 801e1a6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e1aa:	4681      	mov	r9, r0
 801e1ac:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e1b0:	4640      	mov	r0, r8
 801e1b2:	9203      	str	r2, [sp, #12]
 801e1b4:	9102      	str	r1, [sp, #8]
 801e1b6:	9301      	str	r3, [sp, #4]
 801e1b8:	f7ff ff65 	bl	801e086 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e1bc:	9a03      	ldr	r2, [sp, #12]
 801e1be:	f1ba 0f00 	cmp.w	sl, #0
 801e1c2:	bf0c      	ite	eq
 801e1c4:	4684      	moveq	ip, r0
 801e1c6:	f100 0c01 	addne.w	ip, r0, #1
 801e1ca:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801e1ce:	8812      	ldrh	r2, [r2, #0]
 801e1d0:	fa1f fc8c 	uxth.w	ip, ip
 801e1d4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e1d6:	2a69      	cmp	r2, #105	; 0x69
 801e1d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e1da:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801e1dc:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801e1e0:	d004      	beq.n	801e1ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801e1e2:	d844      	bhi.n	801e26e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801e1e4:	2a58      	cmp	r2, #88	; 0x58
 801e1e6:	d001      	beq.n	801e1ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801e1e8:	2a64      	cmp	r2, #100	; 0x64
 801e1ea:	d14b      	bne.n	801e284 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801e1ec:	b1a4      	cbz	r4, 801e218 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e1ee:	b956      	cbnz	r6, 801e206 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801e1f0:	2801      	cmp	r0, #1
 801e1f2:	d108      	bne.n	801e206 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801e1f4:	f8b8 2000 	ldrh.w	r2, [r8]
 801e1f8:	2a30      	cmp	r2, #48	; 0x30
 801e1fa:	bf02      	ittt	eq
 801e1fc:	f108 0202 	addeq.w	r2, r8, #2
 801e200:	4630      	moveq	r0, r6
 801e202:	f8c9 2000 	streq.w	r2, [r9]
 801e206:	45b4      	cmp	ip, r6
 801e208:	da3e      	bge.n	801e288 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801e20a:	b2b6      	uxth	r6, r6
 801e20c:	eba6 040c 	sub.w	r4, r6, ip
 801e210:	46b4      	mov	ip, r6
 801e212:	b2a4      	uxth	r4, r4
 801e214:	f04f 0b00 	mov.w	fp, #0
 801e218:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e21c:	3a01      	subs	r2, #1
 801e21e:	b169      	cbz	r1, 801e23c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e220:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e222:	458c      	cmp	ip, r1
 801e224:	da09      	bge.n	801e23a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801e226:	eba1 010c 	sub.w	r1, r1, ip
 801e22a:	b289      	uxth	r1, r1
 801e22c:	b933      	cbnz	r3, 801e23c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e22e:	f1bb 0f00 	cmp.w	fp, #0
 801e232:	d02b      	beq.n	801e28c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801e234:	b350      	cbz	r0, 801e28c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801e236:	440c      	add	r4, r1
 801e238:	b2a4      	uxth	r4, r4
 801e23a:	2100      	movs	r1, #0
 801e23c:	682b      	ldr	r3, [r5, #0]
 801e23e:	4293      	cmp	r3, r2
 801e240:	da07      	bge.n	801e252 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801e242:	f1ba 0f00 	cmp.w	sl, #0
 801e246:	d004      	beq.n	801e252 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801e248:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801e24c:	682b      	ldr	r3, [r5, #0]
 801e24e:	3301      	adds	r3, #1
 801e250:	602b      	str	r3, [r5, #0]
 801e252:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801e256:	b354      	cbz	r4, 801e2ae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e258:	682e      	ldr	r6, [r5, #0]
 801e25a:	3c01      	subs	r4, #1
 801e25c:	42b2      	cmp	r2, r6
 801e25e:	b2a4      	uxth	r4, r4
 801e260:	dd25      	ble.n	801e2ae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e262:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801e266:	682b      	ldr	r3, [r5, #0]
 801e268:	3301      	adds	r3, #1
 801e26a:	602b      	str	r3, [r5, #0]
 801e26c:	e7f3      	b.n	801e256 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801e26e:	2a73      	cmp	r2, #115	; 0x73
 801e270:	d003      	beq.n	801e27a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801e272:	2a78      	cmp	r2, #120	; 0x78
 801e274:	d0ba      	beq.n	801e1ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801e276:	2a6f      	cmp	r2, #111	; 0x6f
 801e278:	e7b7      	b.n	801e1ea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801e27a:	2c00      	cmp	r4, #0
 801e27c:	d0cc      	beq.n	801e218 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e27e:	42b0      	cmp	r0, r6
 801e280:	dd00      	ble.n	801e284 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801e282:	b2b0      	uxth	r0, r6
 801e284:	2400      	movs	r4, #0
 801e286:	e7c7      	b.n	801e218 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801e288:	2400      	movs	r4, #0
 801e28a:	e7c3      	b.n	801e214 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801e28c:	2900      	cmp	r1, #0
 801e28e:	d0d5      	beq.n	801e23c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e290:	f04f 0c20 	mov.w	ip, #32
 801e294:	682e      	ldr	r6, [r5, #0]
 801e296:	2900      	cmp	r1, #0
 801e298:	d0d0      	beq.n	801e23c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801e29a:	3901      	subs	r1, #1
 801e29c:	4296      	cmp	r6, r2
 801e29e:	b289      	uxth	r1, r1
 801e2a0:	dacb      	bge.n	801e23a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801e2a2:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801e2a6:	682b      	ldr	r3, [r5, #0]
 801e2a8:	3301      	adds	r3, #1
 801e2aa:	602b      	str	r3, [r5, #0]
 801e2ac:	e7f2      	b.n	801e294 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801e2ae:	b198      	cbz	r0, 801e2d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e2b0:	f8d9 3000 	ldr.w	r3, [r9]
 801e2b4:	881c      	ldrh	r4, [r3, #0]
 801e2b6:	b17c      	cbz	r4, 801e2d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e2b8:	682c      	ldr	r4, [r5, #0]
 801e2ba:	3801      	subs	r0, #1
 801e2bc:	42a2      	cmp	r2, r4
 801e2be:	b280      	uxth	r0, r0
 801e2c0:	dd0a      	ble.n	801e2d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801e2c2:	1c9c      	adds	r4, r3, #2
 801e2c4:	f8c9 4000 	str.w	r4, [r9]
 801e2c8:	881c      	ldrh	r4, [r3, #0]
 801e2ca:	682b      	ldr	r3, [r5, #0]
 801e2cc:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801e2d0:	682b      	ldr	r3, [r5, #0]
 801e2d2:	3301      	adds	r3, #1
 801e2d4:	602b      	str	r3, [r5, #0]
 801e2d6:	e7ea      	b.n	801e2ae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801e2d8:	2620      	movs	r6, #32
 801e2da:	b151      	cbz	r1, 801e2f2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801e2dc:	6828      	ldr	r0, [r5, #0]
 801e2de:	3901      	subs	r1, #1
 801e2e0:	4282      	cmp	r2, r0
 801e2e2:	b289      	uxth	r1, r1
 801e2e4:	dd05      	ble.n	801e2f2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801e2e6:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801e2ea:	682b      	ldr	r3, [r5, #0]
 801e2ec:	3301      	adds	r3, #1
 801e2ee:	602b      	str	r3, [r5, #0]
 801e2f0:	e7f3      	b.n	801e2da <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801e2f2:	b005      	add	sp, #20
 801e2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801e2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e2fe:	4604      	mov	r4, r0
 801e300:	f04f 0801 	mov.w	r8, #1
 801e304:	2000      	movs	r0, #0
 801e306:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801e30a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801e30e:	8008      	strh	r0, [r1, #0]
 801e310:	7010      	strb	r0, [r2, #0]
 801e312:	7018      	strb	r0, [r3, #0]
 801e314:	f88c 0000 	strb.w	r0, [ip]
 801e318:	f88e 0000 	strb.w	r0, [lr]
 801e31c:	7030      	strb	r0, [r6, #0]
 801e31e:	6820      	ldr	r0, [r4, #0]
 801e320:	8800      	ldrh	r0, [r0, #0]
 801e322:	b190      	cbz	r0, 801e34a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801e324:	282b      	cmp	r0, #43	; 0x2b
 801e326:	d001      	beq.n	801e32c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801e328:	2820      	cmp	r0, #32
 801e32a:	d104      	bne.n	801e336 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801e32c:	8008      	strh	r0, [r1, #0]
 801e32e:	6820      	ldr	r0, [r4, #0]
 801e330:	3002      	adds	r0, #2
 801e332:	6020      	str	r0, [r4, #0]
 801e334:	e7f3      	b.n	801e31e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801e336:	282d      	cmp	r0, #45	; 0x2d
 801e338:	d102      	bne.n	801e340 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801e33a:	f882 8000 	strb.w	r8, [r2]
 801e33e:	e7f6      	b.n	801e32e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801e340:	2823      	cmp	r0, #35	; 0x23
 801e342:	d102      	bne.n	801e34a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801e344:	f883 8000 	strb.w	r8, [r3]
 801e348:	e7f1      	b.n	801e32e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801e34a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e34e:	2b09      	cmp	r3, #9
 801e350:	d901      	bls.n	801e356 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801e352:	282a      	cmp	r0, #42	; 0x2a
 801e354:	d114      	bne.n	801e380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801e356:	2201      	movs	r2, #1
 801e358:	f88e 2000 	strb.w	r2, [lr]
 801e35c:	6823      	ldr	r3, [r4, #0]
 801e35e:	8819      	ldrh	r1, [r3, #0]
 801e360:	2930      	cmp	r1, #48	; 0x30
 801e362:	bf02      	ittt	eq
 801e364:	3302      	addeq	r3, #2
 801e366:	6023      	streq	r3, [r4, #0]
 801e368:	f88c 2000 	strbeq.w	r2, [ip]
 801e36c:	6820      	ldr	r0, [r4, #0]
 801e36e:	8803      	ldrh	r3, [r0, #0]
 801e370:	2b2a      	cmp	r3, #42	; 0x2a
 801e372:	d11e      	bne.n	801e3b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801e374:	f04f 33ff 	mov.w	r3, #4294967295
 801e378:	603b      	str	r3, [r7, #0]
 801e37a:	6823      	ldr	r3, [r4, #0]
 801e37c:	3302      	adds	r3, #2
 801e37e:	6023      	str	r3, [r4, #0]
 801e380:	6823      	ldr	r3, [r4, #0]
 801e382:	881b      	ldrh	r3, [r3, #0]
 801e384:	2b2e      	cmp	r3, #46	; 0x2e
 801e386:	d112      	bne.n	801e3ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801e388:	2301      	movs	r3, #1
 801e38a:	7033      	strb	r3, [r6, #0]
 801e38c:	6823      	ldr	r3, [r4, #0]
 801e38e:	1c98      	adds	r0, r3, #2
 801e390:	6020      	str	r0, [r4, #0]
 801e392:	885b      	ldrh	r3, [r3, #2]
 801e394:	2b2a      	cmp	r3, #42	; 0x2a
 801e396:	d117      	bne.n	801e3c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801e398:	f04f 33ff 	mov.w	r3, #4294967295
 801e39c:	602b      	str	r3, [r5, #0]
 801e39e:	6823      	ldr	r3, [r4, #0]
 801e3a0:	3302      	adds	r3, #2
 801e3a2:	6023      	str	r3, [r4, #0]
 801e3a4:	682b      	ldr	r3, [r5, #0]
 801e3a6:	2b06      	cmp	r3, #6
 801e3a8:	bfa8      	it	ge
 801e3aa:	2306      	movge	r3, #6
 801e3ac:	602b      	str	r3, [r5, #0]
 801e3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3b2:	f7ff fee2 	bl	801e17a <_ZN8touchgfx7Unicode4atoiEPKt>
 801e3b6:	6038      	str	r0, [r7, #0]
 801e3b8:	6823      	ldr	r3, [r4, #0]
 801e3ba:	881a      	ldrh	r2, [r3, #0]
 801e3bc:	3a30      	subs	r2, #48	; 0x30
 801e3be:	2a09      	cmp	r2, #9
 801e3c0:	d8de      	bhi.n	801e380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801e3c2:	3302      	adds	r3, #2
 801e3c4:	6023      	str	r3, [r4, #0]
 801e3c6:	e7f7      	b.n	801e3b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801e3c8:	f7ff fed7 	bl	801e17a <_ZN8touchgfx7Unicode4atoiEPKt>
 801e3cc:	6028      	str	r0, [r5, #0]
 801e3ce:	6823      	ldr	r3, [r4, #0]
 801e3d0:	881a      	ldrh	r2, [r3, #0]
 801e3d2:	3a30      	subs	r2, #48	; 0x30
 801e3d4:	2a09      	cmp	r2, #9
 801e3d6:	d8e5      	bhi.n	801e3a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801e3d8:	3302      	adds	r3, #2
 801e3da:	6023      	str	r3, [r4, #0]
 801e3dc:	e7f7      	b.n	801e3ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801e3de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801e3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3e2:	b0a2      	sub	sp, #136	; 0x88
 801e3e4:	2500      	movs	r5, #0
 801e3e6:	4606      	mov	r6, r0
 801e3e8:	460f      	mov	r7, r1
 801e3ea:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801e3ee:	9209      	str	r2, [sp, #36]	; 0x24
 801e3f0:	4629      	mov	r1, r5
 801e3f2:	2242      	movs	r2, #66	; 0x42
 801e3f4:	4640      	mov	r0, r8
 801e3f6:	461c      	mov	r4, r3
 801e3f8:	950d      	str	r5, [sp, #52]	; 0x34
 801e3fa:	f7fe fdec 	bl	801cfd6 <_ZN8touchgfx6memsetEPvhm>
 801e3fe:	b30e      	cbz	r6, 801e444 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801e400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e402:	b1f3      	cbz	r3, 801e442 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801e404:	f107 3aff 	add.w	sl, r7, #4294967295
 801e408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e40c:	8812      	ldrh	r2, [r2, #0]
 801e40e:	2a00      	cmp	r2, #0
 801e410:	f000 80b3 	beq.w	801e57a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801e414:	459a      	cmp	sl, r3
 801e416:	f340 80b0 	ble.w	801e57a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801e41a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e420:	f8b9 2000 	ldrh.w	r2, [r9]
 801e424:	2a00      	cmp	r2, #0
 801e426:	d0ef      	beq.n	801e408 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e428:	2a25      	cmp	r2, #37	; 0x25
 801e42a:	f000 80aa 	beq.w	801e582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801e42e:	459a      	cmp	sl, r3
 801e430:	ddea      	ble.n	801e408 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e432:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e436:	f109 0202 	add.w	r2, r9, #2
 801e43a:	3301      	adds	r3, #1
 801e43c:	9209      	str	r2, [sp, #36]	; 0x24
 801e43e:	930d      	str	r3, [sp, #52]	; 0x34
 801e440:	e7eb      	b.n	801e41a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801e442:	8033      	strh	r3, [r6, #0]
 801e444:	4630      	mov	r0, r6
 801e446:	b022      	add	sp, #136	; 0x88
 801e448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e44c:	3b63      	subs	r3, #99	; 0x63
 801e44e:	2b01      	cmp	r3, #1
 801e450:	f200 80df 	bhi.w	801e612 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801e454:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801e458:	8813      	ldrh	r3, [r2, #0]
 801e45a:	2b69      	cmp	r3, #105	; 0x69
 801e45c:	d058      	beq.n	801e510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801e45e:	d81b      	bhi.n	801e498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801e460:	2b63      	cmp	r3, #99	; 0x63
 801e462:	d02e      	beq.n	801e4c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801e464:	2b64      	cmp	r3, #100	; 0x64
 801e466:	d053      	beq.n	801e510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801e468:	2b58      	cmp	r3, #88	; 0x58
 801e46a:	d06f      	beq.n	801e54c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801e46c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801e470:	46a1      	mov	r9, r4
 801e472:	e02d      	b.n	801e4d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e474:	2b73      	cmp	r3, #115	; 0x73
 801e476:	d0ed      	beq.n	801e454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e478:	d803      	bhi.n	801e482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801e47a:	2b6f      	cmp	r3, #111	; 0x6f
 801e47c:	f040 80c9 	bne.w	801e612 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801e480:	e7e8      	b.n	801e454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e482:	2b75      	cmp	r3, #117	; 0x75
 801e484:	d0e6      	beq.n	801e454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e486:	2b78      	cmp	r3, #120	; 0x78
 801e488:	e7f8      	b.n	801e47c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801e48a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e48c:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e492:	3302      	adds	r3, #2
 801e494:	9309      	str	r3, [sp, #36]	; 0x24
 801e496:	e7b7      	b.n	801e408 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e498:	2b73      	cmp	r3, #115	; 0x73
 801e49a:	d034      	beq.n	801e506 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801e49c:	d807      	bhi.n	801e4ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801e49e:	2b6f      	cmp	r3, #111	; 0x6f
 801e4a0:	d1e4      	bne.n	801e46c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801e4a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e4a4:	f104 0904 	add.w	r9, r4, #4
 801e4a8:	2308      	movs	r3, #8
 801e4aa:	1aba      	subs	r2, r7, r2
 801e4ac:	e048      	b.n	801e540 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801e4ae:	2b75      	cmp	r3, #117	; 0x75
 801e4b0:	d041      	beq.n	801e536 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801e4b2:	2b78      	cmp	r3, #120	; 0x78
 801e4b4:	d1da      	bne.n	801e46c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801e4b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e4b8:	f104 0904 	add.w	r9, r4, #4
 801e4bc:	2310      	movs	r3, #16
 801e4be:	1aba      	subs	r2, r7, r2
 801e4c0:	e03e      	b.n	801e540 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801e4c2:	7823      	ldrb	r3, [r4, #0]
 801e4c4:	f104 0904 	add.w	r9, r4, #4
 801e4c8:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801e4cc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801e4d0:	aa0d      	add	r2, sp, #52	; 0x34
 801e4d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801e4d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e4da:	a810      	add	r0, sp, #64	; 0x40
 801e4dc:	9205      	str	r2, [sp, #20]
 801e4de:	464c      	mov	r4, r9
 801e4e0:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801e4e4:	9204      	str	r2, [sp, #16]
 801e4e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e4e8:	9203      	str	r2, [sp, #12]
 801e4ea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801e4ee:	9202      	str	r2, [sp, #8]
 801e4f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e4f2:	9201      	str	r2, [sp, #4]
 801e4f4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801e4f8:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801e4fc:	9200      	str	r2, [sp, #0]
 801e4fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e500:	f7ff fe4a 	bl	801e198 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801e504:	e7c4      	b.n	801e490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801e506:	f104 0904 	add.w	r9, r4, #4
 801e50a:	6823      	ldr	r3, [r4, #0]
 801e50c:	9310      	str	r3, [sp, #64]	; 0x40
 801e50e:	e7df      	b.n	801e4d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e512:	230a      	movs	r3, #10
 801e514:	4641      	mov	r1, r8
 801e516:	6820      	ldr	r0, [r4, #0]
 801e518:	1aba      	subs	r2, r7, r2
 801e51a:	f104 0904 	add.w	r9, r4, #4
 801e51e:	b292      	uxth	r2, r2
 801e520:	f7ff fdf9 	bl	801e116 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e524:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e528:	2b2d      	cmp	r3, #45	; 0x2d
 801e52a:	d1d1      	bne.n	801e4d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e52c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e530:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e532:	3302      	adds	r3, #2
 801e534:	e7ea      	b.n	801e50c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801e536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e538:	f104 0904 	add.w	r9, r4, #4
 801e53c:	230a      	movs	r3, #10
 801e53e:	1aba      	subs	r2, r7, r2
 801e540:	b292      	uxth	r2, r2
 801e542:	4641      	mov	r1, r8
 801e544:	6820      	ldr	r0, [r4, #0]
 801e546:	f7ff fdc8 	bl	801e0da <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e54a:	e7c1      	b.n	801e4d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e54c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e54e:	2310      	movs	r3, #16
 801e550:	4641      	mov	r1, r8
 801e552:	6820      	ldr	r0, [r4, #0]
 801e554:	1aba      	subs	r2, r7, r2
 801e556:	f104 0904 	add.w	r9, r4, #4
 801e55a:	b292      	uxth	r2, r2
 801e55c:	f7ff fdbd 	bl	801e0da <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e560:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801e564:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d0b1      	beq.n	801e4d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801e56c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801e570:	2919      	cmp	r1, #25
 801e572:	d8f7      	bhi.n	801e564 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801e574:	3b20      	subs	r3, #32
 801e576:	8013      	strh	r3, [r2, #0]
 801e578:	e7f4      	b.n	801e564 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801e57a:	2200      	movs	r2, #0
 801e57c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e580:	e760      	b.n	801e444 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801e582:	459a      	cmp	sl, r3
 801e584:	f77f af40 	ble.w	801e408 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801e588:	f109 0302 	add.w	r3, r9, #2
 801e58c:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801e590:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801e594:	a809      	add	r0, sp, #36	; 0x24
 801e596:	9309      	str	r3, [sp, #36]	; 0x24
 801e598:	ab0f      	add	r3, sp, #60	; 0x3c
 801e59a:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801e59e:	9304      	str	r3, [sp, #16]
 801e5a0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801e5a4:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801e5a8:	9303      	str	r3, [sp, #12]
 801e5aa:	ab0e      	add	r3, sp, #56	; 0x38
 801e5ac:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801e5b0:	9302      	str	r3, [sp, #8]
 801e5b2:	ab0c      	add	r3, sp, #48	; 0x30
 801e5b4:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801e5b8:	9301      	str	r3, [sp, #4]
 801e5ba:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801e5be:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801e5c2:	9300      	str	r3, [sp, #0]
 801e5c4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801e5c8:	950e      	str	r5, [sp, #56]	; 0x38
 801e5ca:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801e5ce:	950f      	str	r5, [sp, #60]	; 0x3c
 801e5d0:	f7ff fe92 	bl	801e2f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801e5d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	bfbf      	itttt	lt
 801e5dc:	6823      	ldrlt	r3, [r4, #0]
 801e5de:	3404      	addlt	r4, #4
 801e5e0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e5e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801e5e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	bfbf      	itttt	lt
 801e5ec:	6823      	ldrlt	r3, [r4, #0]
 801e5ee:	3404      	addlt	r4, #4
 801e5f0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e5f4:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801e5f6:	8813      	ldrh	r3, [r2, #0]
 801e5f8:	2b69      	cmp	r3, #105	; 0x69
 801e5fa:	f43f af2b 	beq.w	801e454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e5fe:	f63f af39 	bhi.w	801e474 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801e602:	2b58      	cmp	r3, #88	; 0x58
 801e604:	f43f af26 	beq.w	801e454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801e608:	f63f af20 	bhi.w	801e44c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801e60c:	2b25      	cmp	r3, #37	; 0x25
 801e60e:	f43f af3c 	beq.w	801e48a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801e612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e614:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e618:	f8b9 2000 	ldrh.w	r2, [r9]
 801e61c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e620:	3301      	adds	r3, #1
 801e622:	930d      	str	r3, [sp, #52]	; 0x34
 801e624:	e734      	b.n	801e490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801e628 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e62a:	4605      	mov	r5, r0
 801e62c:	b0a1      	sub	sp, #132	; 0x84
 801e62e:	4610      	mov	r0, r2
 801e630:	460e      	mov	r6, r1
 801e632:	4614      	mov	r4, r2
 801e634:	461f      	mov	r7, r3
 801e636:	f7ff fd33 	bl	801e0a0 <_ZN8touchgfx7Unicode6strlenEPKc>
 801e63a:	283f      	cmp	r0, #63	; 0x3f
 801e63c:	d906      	bls.n	801e64c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801e63e:	4b0a      	ldr	r3, [pc, #40]	; (801e668 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801e640:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801e644:	4a09      	ldr	r2, [pc, #36]	; (801e66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801e646:	480a      	ldr	r0, [pc, #40]	; (801e670 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801e648:	f009 ffac 	bl	80285a4 <__assert_func>
 801e64c:	4621      	mov	r1, r4
 801e64e:	2240      	movs	r2, #64	; 0x40
 801e650:	4668      	mov	r0, sp
 801e652:	f7ff fd31 	bl	801e0b8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e656:	463b      	mov	r3, r7
 801e658:	466a      	mov	r2, sp
 801e65a:	4631      	mov	r1, r6
 801e65c:	4628      	mov	r0, r5
 801e65e:	f7ff febe 	bl	801e3de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801e662:	b021      	add	sp, #132	; 0x84
 801e664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e666:	bf00      	nop
 801e668:	0802d1f1 	.word	0x0802d1f1
 801e66c:	0802d2c3 	.word	0x0802d2c3
 801e670:	0802d20e 	.word	0x0802d20e

0801e674 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e674:	b40c      	push	{r2, r3}
 801e676:	b507      	push	{r0, r1, r2, lr}
 801e678:	ab04      	add	r3, sp, #16
 801e67a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e67e:	9301      	str	r3, [sp, #4]
 801e680:	f7ff ffd2 	bl	801e628 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e684:	b003      	add	sp, #12
 801e686:	f85d eb04 	ldr.w	lr, [sp], #4
 801e68a:	b002      	add	sp, #8
 801e68c:	4770      	bx	lr
	...

0801e690 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e694:	b0c3      	sub	sp, #268	; 0x10c
 801e696:	2400      	movs	r4, #0
 801e698:	4606      	mov	r6, r0
 801e69a:	4689      	mov	r9, r1
 801e69c:	af10      	add	r7, sp, #64	; 0x40
 801e69e:	9209      	str	r2, [sp, #36]	; 0x24
 801e6a0:	4621      	mov	r1, r4
 801e6a2:	22c8      	movs	r2, #200	; 0xc8
 801e6a4:	4638      	mov	r0, r7
 801e6a6:	469a      	mov	sl, r3
 801e6a8:	940c      	str	r4, [sp, #48]	; 0x30
 801e6aa:	f7fe fc94 	bl	801cfd6 <_ZN8touchgfx6memsetEPvhm>
 801e6ae:	b116      	cbz	r6, 801e6b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801e6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6b2:	b923      	cbnz	r3, 801e6be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801e6b4:	8033      	strh	r3, [r6, #0]
 801e6b6:	4630      	mov	r0, r6
 801e6b8:	b043      	add	sp, #268	; 0x10c
 801e6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6be:	f109 3bff 	add.w	fp, r9, #4294967295
 801e6c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e6c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6c6:	8812      	ldrh	r2, [r2, #0]
 801e6c8:	2a00      	cmp	r2, #0
 801e6ca:	f000 80d1 	beq.w	801e870 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801e6ce:	459b      	cmp	fp, r3
 801e6d0:	f340 80ce 	ble.w	801e870 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801e6d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6d8:	882a      	ldrh	r2, [r5, #0]
 801e6da:	2a00      	cmp	r2, #0
 801e6dc:	d0f1      	beq.n	801e6c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e6de:	2a25      	cmp	r2, #37	; 0x25
 801e6e0:	f000 80ca 	beq.w	801e878 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801e6e4:	459b      	cmp	fp, r3
 801e6e6:	ddec      	ble.n	801e6c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e6e8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e6ec:	3502      	adds	r5, #2
 801e6ee:	3301      	adds	r3, #1
 801e6f0:	9509      	str	r5, [sp, #36]	; 0x24
 801e6f2:	930c      	str	r3, [sp, #48]	; 0x30
 801e6f4:	e7ee      	b.n	801e6d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801e6f6:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e6fa:	3202      	adds	r2, #2
 801e6fc:	920c      	str	r2, [sp, #48]	; 0x30
 801e6fe:	e0ac      	b.n	801e85a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801e700:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e704:	970f      	str	r7, [sp, #60]	; 0x3c
 801e706:	3401      	adds	r4, #1
 801e708:	edd3 7a00 	vldr	s15, [r3]
 801e70c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e710:	b923      	cbnz	r3, 801e71c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801e712:	2301      	movs	r3, #1
 801e714:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e718:	2303      	movs	r3, #3
 801e71a:	930e      	str	r3, [sp, #56]	; 0x38
 801e71c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e720:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e722:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801e726:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801e924 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801e72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e72e:	bf42      	ittt	mi
 801e730:	232d      	movmi	r3, #45	; 0x2d
 801e732:	eef1 7a67 	vnegmi.f32	s15, s15
 801e736:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801e73a:	2300      	movs	r3, #0
 801e73c:	4298      	cmp	r0, r3
 801e73e:	dd03      	ble.n	801e748 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801e740:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e744:	3301      	adds	r3, #1
 801e746:	e7f9      	b.n	801e73c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801e748:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e74c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e750:	eeb0 7a67 	vmov.f32	s14, s15
 801e754:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e75c:	da26      	bge.n	801e7ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801e75e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801e762:	eba9 0202 	sub.w	r2, r9, r2
 801e766:	2100      	movs	r1, #0
 801e768:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e76c:	b28d      	uxth	r5, r1
 801e76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e772:	db21      	blt.n	801e7b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801e774:	1a53      	subs	r3, r2, r1
 801e776:	2b00      	cmp	r3, #0
 801e778:	dd1e      	ble.n	801e7b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801e77a:	2963      	cmp	r1, #99	; 0x63
 801e77c:	d01b      	beq.n	801e7b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801e77e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e782:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801e786:	ee17 3a10 	vmov	r3, s14
 801e78a:	2b09      	cmp	r3, #9
 801e78c:	bfa8      	it	ge
 801e78e:	2309      	movge	r3, #9
 801e790:	ee07 3a10 	vmov	s14, r3
 801e794:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801e798:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e79c:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801e7a0:	3101      	adds	r1, #1
 801e7a2:	eee7 7a66 	vfms.f32	s15, s14, s13
 801e7a6:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801e7aa:	e7dd      	b.n	801e768 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801e7ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e7b0:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e7b4:	e7ce      	b.n	801e754 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801e7b6:	460d      	mov	r5, r1
 801e7b8:	2a63      	cmp	r2, #99	; 0x63
 801e7ba:	bfd4      	ite	le
 801e7bc:	ebc5 0202 	rsble	r2, r5, r2
 801e7c0:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801e7c4:	2a00      	cmp	r2, #0
 801e7c6:	dd4e      	ble.n	801e866 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801e7c8:	4603      	mov	r3, r0
 801e7ca:	f04f 0801 	mov.w	r8, #1
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	dd0e      	ble.n	801e7f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801e7d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801e7d6:	210a      	movs	r1, #10
 801e7d8:	3b01      	subs	r3, #1
 801e7da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e7de:	ee17 ca10 	vmov	ip, s14
 801e7e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e7e6:	fb01 c808 	mla	r8, r1, r8, ip
 801e7ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e7ee:	e7ee      	b.n	801e7ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801e7f0:	2800      	cmp	r0, #0
 801e7f2:	f100 33ff 	add.w	r3, r0, #4294967295
 801e7f6:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801e7fa:	bfac      	ite	ge
 801e7fc:	1a18      	subge	r0, r3, r0
 801e7fe:	4618      	movlt	r0, r3
 801e800:	b292      	uxth	r2, r2
 801e802:	230a      	movs	r3, #10
 801e804:	900e      	str	r0, [sp, #56]	; 0x38
 801e806:	1979      	adds	r1, r7, r5
 801e808:	4640      	mov	r0, r8
 801e80a:	f7ff fc84 	bl	801e116 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e80e:	f1b8 0f01 	cmp.w	r8, #1
 801e812:	dc26      	bgt.n	801e862 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801e814:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801e818:	2b00      	cmp	r3, #0
 801e81a:	bf0c      	ite	eq
 801e81c:	2300      	moveq	r3, #0
 801e81e:	232e      	movne	r3, #46	; 0x2e
 801e820:	aa42      	add	r2, sp, #264	; 0x108
 801e822:	4415      	add	r5, r2
 801e824:	aa0c      	add	r2, sp, #48	; 0x30
 801e826:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801e82a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e82e:	a80f      	add	r0, sp, #60	; 0x3c
 801e830:	9205      	str	r2, [sp, #20]
 801e832:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801e836:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e83a:	9204      	str	r2, [sp, #16]
 801e83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e83e:	9203      	str	r2, [sp, #12]
 801e840:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801e844:	9202      	str	r2, [sp, #8]
 801e846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e848:	9201      	str	r2, [sp, #4]
 801e84a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801e84e:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801e852:	9200      	str	r2, [sp, #0]
 801e854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e856:	f7ff fc9f 	bl	801e198 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801e85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e85c:	3302      	adds	r3, #2
 801e85e:	9309      	str	r3, [sp, #36]	; 0x24
 801e860:	e72f      	b.n	801e6c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e862:	232e      	movs	r3, #46	; 0x2e
 801e864:	e7dc      	b.n	801e820 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801e866:	ab42      	add	r3, sp, #264	; 0x108
 801e868:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e86c:	2300      	movs	r3, #0
 801e86e:	e7d9      	b.n	801e824 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801e870:	2200      	movs	r2, #0
 801e872:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e876:	e71e      	b.n	801e6b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801e878:	459b      	cmp	fp, r3
 801e87a:	f77f af22 	ble.w	801e6c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e87e:	2300      	movs	r3, #0
 801e880:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801e884:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801e888:	a809      	add	r0, sp, #36	; 0x24
 801e88a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e88e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e896:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801e89a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801e89e:	930d      	str	r3, [sp, #52]	; 0x34
 801e8a0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e8a4:	930e      	str	r3, [sp, #56]	; 0x38
 801e8a6:	1cab      	adds	r3, r5, #2
 801e8a8:	9309      	str	r3, [sp, #36]	; 0x24
 801e8aa:	ab0e      	add	r3, sp, #56	; 0x38
 801e8ac:	9304      	str	r3, [sp, #16]
 801e8ae:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801e8b2:	9303      	str	r3, [sp, #12]
 801e8b4:	ab0d      	add	r3, sp, #52	; 0x34
 801e8b6:	9302      	str	r3, [sp, #8]
 801e8b8:	ab0b      	add	r3, sp, #44	; 0x2c
 801e8ba:	9301      	str	r3, [sp, #4]
 801e8bc:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801e8c0:	9300      	str	r3, [sp, #0]
 801e8c2:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801e8c6:	f7ff fd17 	bl	801e2f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801e8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e8cc:	2b00      	cmp	r3, #0
 801e8ce:	da0b      	bge.n	801e8e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801e8d0:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e8d4:	3401      	adds	r4, #1
 801e8d6:	edd3 7a00 	vldr	s15, [r3]
 801e8da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e8de:	ee17 3a90 	vmov	r3, s15
 801e8e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8e6:	930d      	str	r3, [sp, #52]	; 0x34
 801e8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	da0b      	bge.n	801e906 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801e8ee:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e8f2:	3401      	adds	r4, #1
 801e8f4:	edd3 7a00 	vldr	s15, [r3]
 801e8f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e8fc:	ee17 3a90 	vmov	r3, s15
 801e900:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e904:	930e      	str	r3, [sp, #56]	; 0x38
 801e906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e90a:	881b      	ldrh	r3, [r3, #0]
 801e90c:	2b25      	cmp	r3, #37	; 0x25
 801e90e:	f43f aef2 	beq.w	801e6f6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801e912:	2b66      	cmp	r3, #102	; 0x66
 801e914:	f43f aef4 	beq.w	801e700 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801e918:	9509      	str	r5, [sp, #36]	; 0x24
 801e91a:	882b      	ldrh	r3, [r5, #0]
 801e91c:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e920:	3201      	adds	r2, #1
 801e922:	e6eb      	b.n	801e6fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801e924:	3f000002 	.word	0x3f000002

0801e928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801e928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e92a:	4605      	mov	r5, r0
 801e92c:	b0a1      	sub	sp, #132	; 0x84
 801e92e:	4610      	mov	r0, r2
 801e930:	460e      	mov	r6, r1
 801e932:	4614      	mov	r4, r2
 801e934:	461f      	mov	r7, r3
 801e936:	f7ff fbb3 	bl	801e0a0 <_ZN8touchgfx7Unicode6strlenEPKc>
 801e93a:	283f      	cmp	r0, #63	; 0x3f
 801e93c:	d906      	bls.n	801e94c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801e93e:	4b0a      	ldr	r3, [pc, #40]	; (801e968 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801e940:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801e944:	4a09      	ldr	r2, [pc, #36]	; (801e96c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801e946:	480a      	ldr	r0, [pc, #40]	; (801e970 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801e948:	f009 fe2c 	bl	80285a4 <__assert_func>
 801e94c:	4621      	mov	r1, r4
 801e94e:	2240      	movs	r2, #64	; 0x40
 801e950:	4668      	mov	r0, sp
 801e952:	f7ff fbb1 	bl	801e0b8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e956:	463b      	mov	r3, r7
 801e958:	466a      	mov	r2, sp
 801e95a:	4631      	mov	r1, r6
 801e95c:	4628      	mov	r0, r5
 801e95e:	f7ff fe97 	bl	801e690 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801e962:	b021      	add	sp, #132	; 0x84
 801e964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e966:	bf00      	nop
 801e968:	0802d1f1 	.word	0x0802d1f1
 801e96c:	0802d234 	.word	0x0802d234
 801e970:	0802d20e 	.word	0x0802d20e

0801e974 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e974:	4b01      	ldr	r3, [pc, #4]	; (801e97c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e976:	6018      	str	r0, [r3, #0]
 801e978:	4770      	bx	lr
 801e97a:	bf00      	nop
 801e97c:	2000bf90 	.word	0x2000bf90

0801e980 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e980:	4b07      	ldr	r3, [pc, #28]	; (801e9a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801e982:	881a      	ldrh	r2, [r3, #0]
 801e984:	4282      	cmp	r2, r0
 801e986:	d809      	bhi.n	801e99c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e988:	4b06      	ldr	r3, [pc, #24]	; (801e9a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801e98a:	881b      	ldrh	r3, [r3, #0]
 801e98c:	4413      	add	r3, r2
 801e98e:	4298      	cmp	r0, r3
 801e990:	da04      	bge.n	801e99c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e992:	4b05      	ldr	r3, [pc, #20]	; (801e9a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801e994:	681b      	ldr	r3, [r3, #0]
 801e996:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e99a:	4770      	bx	lr
 801e99c:	2000      	movs	r0, #0
 801e99e:	4770      	bx	lr
 801e9a0:	2000bfb0 	.word	0x2000bfb0
 801e9a4:	2000bfb4 	.word	0x2000bfb4
 801e9a8:	2000bf94 	.word	0x2000bf94

0801e9ac <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9b0:	4d26      	ldr	r5, [pc, #152]	; (801ea4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e9b2:	682b      	ldr	r3, [r5, #0]
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d046      	beq.n	801ea46 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801e9b8:	4a25      	ldr	r2, [pc, #148]	; (801ea50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e9ba:	4f26      	ldr	r7, [pc, #152]	; (801ea54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e9bc:	8810      	ldrh	r0, [r2, #0]
 801e9be:	883c      	ldrh	r4, [r7, #0]
 801e9c0:	4e25      	ldr	r6, [pc, #148]	; (801ea58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e9c2:	4420      	add	r0, r4
 801e9c4:	1c42      	adds	r2, r0, #1
 801e9c6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801e9ca:	f022 0201 	bic.w	r2, r2, #1
 801e9ce:	0412      	lsls	r2, r2, #16
 801e9d0:	0c12      	lsrs	r2, r2, #16
 801e9d2:	0051      	lsls	r1, r2, #1
 801e9d4:	220e      	movs	r2, #14
 801e9d6:	eb08 0e01 	add.w	lr, r8, r1
 801e9da:	fb02 fc04 	mul.w	ip, r2, r4
 801e9de:	eb03 0208 	add.w	r2, r3, r8
 801e9e2:	4c1e      	ldr	r4, [pc, #120]	; (801ea5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e9e4:	6022      	str	r2, [r4, #0]
 801e9e6:	eb03 020e 	add.w	r2, r3, lr
 801e9ea:	44e6      	add	lr, ip
 801e9ec:	6032      	str	r2, [r6, #0]
 801e9ee:	4473      	add	r3, lr
 801e9f0:	4a1b      	ldr	r2, [pc, #108]	; (801ea60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e9f2:	6013      	str	r3, [r2, #0]
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	4a1b      	ldr	r2, [pc, #108]	; (801ea64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e9f8:	8013      	strh	r3, [r2, #0]
 801e9fa:	4a1b      	ldr	r2, [pc, #108]	; (801ea68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801e9fc:	6812      	ldr	r2, [r2, #0]
 801e9fe:	eba2 0208 	sub.w	r2, r2, r8
 801ea02:	1a52      	subs	r2, r2, r1
 801ea04:	4919      	ldr	r1, [pc, #100]	; (801ea6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ea06:	eba2 020c 	sub.w	r2, r2, ip
 801ea0a:	469c      	mov	ip, r3
 801ea0c:	600a      	str	r2, [r1, #0]
 801ea0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ea12:	4a17      	ldr	r2, [pc, #92]	; (801ea70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ea14:	8013      	strh	r3, [r2, #0]
 801ea16:	4283      	cmp	r3, r0
 801ea18:	d10d      	bne.n	801ea36 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801ea1a:	883d      	ldrh	r5, [r7, #0]
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	6830      	ldr	r0, [r6, #0]
 801ea20:	240e      	movs	r4, #14
 801ea22:	429d      	cmp	r5, r3
 801ea24:	d90f      	bls.n	801ea46 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801ea26:	fb04 0203 	mla	r2, r4, r3, r0
 801ea2a:	3301      	adds	r3, #1
 801ea2c:	7b11      	ldrb	r1, [r2, #12]
 801ea2e:	f36f 1145 	bfc	r1, #5, #1
 801ea32:	7311      	strb	r1, [r2, #12]
 801ea34:	e7f5      	b.n	801ea22 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801ea36:	682a      	ldr	r2, [r5, #0]
 801ea38:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ea3c:	6822      	ldr	r2, [r4, #0]
 801ea3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801ea42:	3301      	adds	r3, #1
 801ea44:	e7e7      	b.n	801ea16 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801ea46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea4a:	bf00      	nop
 801ea4c:	2000bf94 	.word	0x2000bf94
 801ea50:	2000bfb0 	.word	0x2000bfb0
 801ea54:	2000bfb4 	.word	0x2000bfb4
 801ea58:	2000bf98 	.word	0x2000bf98
 801ea5c:	2000bfa8 	.word	0x2000bfa8
 801ea60:	2000bfa0 	.word	0x2000bfa0
 801ea64:	2000bfb2 	.word	0x2000bfb2
 801ea68:	2000bf9c 	.word	0x2000bf9c
 801ea6c:	2000bfac 	.word	0x2000bfac
 801ea70:	2000bfa4 	.word	0x2000bfa4

0801ea74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ea74:	4b10      	ldr	r3, [pc, #64]	; (801eab8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801ea76:	b510      	push	{r4, lr}
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	b9db      	cbnz	r3, 801eab4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ea7c:	b1d1      	cbz	r1, 801eab4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ea7e:	4b0f      	ldr	r3, [pc, #60]	; (801eabc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801ea80:	240e      	movs	r4, #14
 801ea82:	801a      	strh	r2, [r3, #0]
 801ea84:	b292      	uxth	r2, r2
 801ea86:	4b0e      	ldr	r3, [pc, #56]	; (801eac0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801ea88:	881b      	ldrh	r3, [r3, #0]
 801ea8a:	4413      	add	r3, r2
 801ea8c:	4362      	muls	r2, r4
 801ea8e:	2406      	movs	r4, #6
 801ea90:	fb04 2203 	mla	r2, r4, r3, r2
 801ea94:	428a      	cmp	r2, r1
 801ea96:	d305      	bcc.n	801eaa4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801ea98:	4b0a      	ldr	r3, [pc, #40]	; (801eac4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801ea9a:	2137      	movs	r1, #55	; 0x37
 801ea9c:	4a0a      	ldr	r2, [pc, #40]	; (801eac8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801ea9e:	480b      	ldr	r0, [pc, #44]	; (801eacc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801eaa0:	f009 fd80 	bl	80285a4 <__assert_func>
 801eaa4:	4b0a      	ldr	r3, [pc, #40]	; (801ead0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801eaa6:	6019      	str	r1, [r3, #0]
 801eaa8:	4b0a      	ldr	r3, [pc, #40]	; (801ead4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801eaaa:	6018      	str	r0, [r3, #0]
 801eaac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eab0:	f7ff bf7c 	b.w	801e9ac <_ZN8touchgfx6Bitmap10clearCacheEv>
 801eab4:	bd10      	pop	{r4, pc}
 801eab6:	bf00      	nop
 801eab8:	2000bfa0 	.word	0x2000bfa0
 801eabc:	2000bfb4 	.word	0x2000bfb4
 801eac0:	2000bfb0 	.word	0x2000bfb0
 801eac4:	0802d3a5 	.word	0x0802d3a5
 801eac8:	0802d3fe 	.word	0x0802d3fe
 801eacc:	0802d380 	.word	0x0802d380
 801ead0:	2000bf9c 	.word	0x2000bf9c
 801ead4:	2000bf94 	.word	0x2000bf94

0801ead8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ead8:	b470      	push	{r4, r5, r6}
 801eada:	4c07      	ldr	r4, [pc, #28]	; (801eaf8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801eadc:	4605      	mov	r5, r0
 801eade:	4610      	mov	r0, r2
 801eae0:	9a03      	ldr	r2, [sp, #12]
 801eae2:	6826      	ldr	r6, [r4, #0]
 801eae4:	b936      	cbnz	r6, 801eaf4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801eae6:	6025      	str	r5, [r4, #0]
 801eae8:	4c04      	ldr	r4, [pc, #16]	; (801eafc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801eaea:	8021      	strh	r1, [r4, #0]
 801eaec:	4619      	mov	r1, r3
 801eaee:	bc70      	pop	{r4, r5, r6}
 801eaf0:	f7ff bfc0 	b.w	801ea74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801eaf4:	bc70      	pop	{r4, r5, r6}
 801eaf6:	4770      	bx	lr
 801eaf8:	2000bfb8 	.word	0x2000bfb8
 801eafc:	2000bfb0 	.word	0x2000bfb0

0801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801eb00:	b508      	push	{r3, lr}
 801eb02:	4b14      	ldr	r3, [pc, #80]	; (801eb54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801eb04:	6819      	ldr	r1, [r3, #0]
 801eb06:	b931      	cbnz	r1, 801eb16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801eb08:	4b13      	ldr	r3, [pc, #76]	; (801eb58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801eb0a:	f240 21e6 	movw	r1, #742	; 0x2e6
 801eb0e:	4a13      	ldr	r2, [pc, #76]	; (801eb5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801eb10:	4813      	ldr	r0, [pc, #76]	; (801eb60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801eb12:	f009 fd47 	bl	80285a4 <__assert_func>
 801eb16:	4a13      	ldr	r2, [pc, #76]	; (801eb64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801eb18:	8803      	ldrh	r3, [r0, #0]
 801eb1a:	8812      	ldrh	r2, [r2, #0]
 801eb1c:	4293      	cmp	r3, r2
 801eb1e:	d204      	bcs.n	801eb2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801eb20:	2214      	movs	r2, #20
 801eb22:	fb02 1303 	mla	r3, r2, r3, r1
 801eb26:	8918      	ldrh	r0, [r3, #8]
 801eb28:	bd08      	pop	{r3, pc}
 801eb2a:	490f      	ldr	r1, [pc, #60]	; (801eb68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801eb2c:	8809      	ldrh	r1, [r1, #0]
 801eb2e:	4411      	add	r1, r2
 801eb30:	428b      	cmp	r3, r1
 801eb32:	da06      	bge.n	801eb42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801eb34:	1a9b      	subs	r3, r3, r2
 801eb36:	4a0d      	ldr	r2, [pc, #52]	; (801eb6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801eb38:	210e      	movs	r1, #14
 801eb3a:	6812      	ldr	r2, [r2, #0]
 801eb3c:	fb01 2303 	mla	r3, r1, r3, r2
 801eb40:	e7f1      	b.n	801eb26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801eb42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eb46:	4293      	cmp	r3, r2
 801eb48:	bf0a      	itet	eq
 801eb4a:	4b09      	ldreq	r3, [pc, #36]	; (801eb70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801eb4c:	2000      	movne	r0, #0
 801eb4e:	8818      	ldrheq	r0, [r3, #0]
 801eb50:	e7ea      	b.n	801eb28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801eb52:	bf00      	nop
 801eb54:	2000bfb8 	.word	0x2000bfb8
 801eb58:	0802b280 	.word	0x0802b280
 801eb5c:	0802d4ab 	.word	0x0802d4ab
 801eb60:	0802d380 	.word	0x0802d380
 801eb64:	2000bfb0 	.word	0x2000bfb0
 801eb68:	2000bfb4 	.word	0x2000bfb4
 801eb6c:	2000bf98 	.word	0x2000bf98
 801eb70:	2000bee2 	.word	0x2000bee2

0801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801eb74:	b508      	push	{r3, lr}
 801eb76:	4b14      	ldr	r3, [pc, #80]	; (801ebc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801eb78:	6819      	ldr	r1, [r3, #0]
 801eb7a:	b931      	cbnz	r1, 801eb8a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801eb7c:	4b13      	ldr	r3, [pc, #76]	; (801ebcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801eb7e:	f240 21fa 	movw	r1, #762	; 0x2fa
 801eb82:	4a13      	ldr	r2, [pc, #76]	; (801ebd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801eb84:	4813      	ldr	r0, [pc, #76]	; (801ebd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801eb86:	f009 fd0d 	bl	80285a4 <__assert_func>
 801eb8a:	4a13      	ldr	r2, [pc, #76]	; (801ebd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801eb8c:	8803      	ldrh	r3, [r0, #0]
 801eb8e:	8812      	ldrh	r2, [r2, #0]
 801eb90:	4293      	cmp	r3, r2
 801eb92:	d204      	bcs.n	801eb9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801eb94:	2214      	movs	r2, #20
 801eb96:	fb02 1303 	mla	r3, r2, r3, r1
 801eb9a:	8958      	ldrh	r0, [r3, #10]
 801eb9c:	bd08      	pop	{r3, pc}
 801eb9e:	490f      	ldr	r1, [pc, #60]	; (801ebdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801eba0:	8809      	ldrh	r1, [r1, #0]
 801eba2:	4411      	add	r1, r2
 801eba4:	428b      	cmp	r3, r1
 801eba6:	da06      	bge.n	801ebb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801eba8:	1a9b      	subs	r3, r3, r2
 801ebaa:	4a0d      	ldr	r2, [pc, #52]	; (801ebe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ebac:	210e      	movs	r1, #14
 801ebae:	6812      	ldr	r2, [r2, #0]
 801ebb0:	fb01 2303 	mla	r3, r1, r3, r2
 801ebb4:	e7f1      	b.n	801eb9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ebb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ebba:	4293      	cmp	r3, r2
 801ebbc:	bf0a      	itet	eq
 801ebbe:	4b09      	ldreq	r3, [pc, #36]	; (801ebe4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ebc0:	2000      	movne	r0, #0
 801ebc2:	8818      	ldrheq	r0, [r3, #0]
 801ebc4:	e7ea      	b.n	801eb9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ebc6:	bf00      	nop
 801ebc8:	2000bfb8 	.word	0x2000bfb8
 801ebcc:	0802b280 	.word	0x0802b280
 801ebd0:	0802d4d7 	.word	0x0802d4d7
 801ebd4:	0802d380 	.word	0x0802d380
 801ebd8:	2000bfb0 	.word	0x2000bfb0
 801ebdc:	2000bfb4 	.word	0x2000bfb4
 801ebe0:	2000bf98 	.word	0x2000bf98
 801ebe4:	2000bee4 	.word	0x2000bee4

0801ebe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ebe8:	4b23      	ldr	r3, [pc, #140]	; (801ec78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ebea:	b510      	push	{r4, lr}
 801ebec:	681c      	ldr	r4, [r3, #0]
 801ebee:	b934      	cbnz	r4, 801ebfe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ebf0:	4b22      	ldr	r3, [pc, #136]	; (801ec7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ebf2:	f240 310e 	movw	r1, #782	; 0x30e
 801ebf6:	4a22      	ldr	r2, [pc, #136]	; (801ec80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ebf8:	4822      	ldr	r0, [pc, #136]	; (801ec84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ebfa:	f009 fcd3 	bl	80285a4 <__assert_func>
 801ebfe:	4a22      	ldr	r2, [pc, #136]	; (801ec88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ec00:	880b      	ldrh	r3, [r1, #0]
 801ec02:	8812      	ldrh	r2, [r2, #0]
 801ec04:	4293      	cmp	r3, r2
 801ec06:	d211      	bcs.n	801ec2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ec08:	2214      	movs	r2, #20
 801ec0a:	fb02 4303 	mla	r3, r2, r3, r4
 801ec0e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ec12:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ec16:	8a1a      	ldrh	r2, [r3, #16]
 801ec18:	8a5b      	ldrh	r3, [r3, #18]
 801ec1a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ec1e:	8004      	strh	r4, [r0, #0]
 801ec20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ec24:	8041      	strh	r1, [r0, #2]
 801ec26:	8082      	strh	r2, [r0, #4]
 801ec28:	80c3      	strh	r3, [r0, #6]
 801ec2a:	e00e      	b.n	801ec4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ec2c:	4917      	ldr	r1, [pc, #92]	; (801ec8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ec2e:	8809      	ldrh	r1, [r1, #0]
 801ec30:	4411      	add	r1, r2
 801ec32:	428b      	cmp	r3, r1
 801ec34:	da0a      	bge.n	801ec4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ec36:	1a9b      	subs	r3, r3, r2
 801ec38:	4a15      	ldr	r2, [pc, #84]	; (801ec90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ec3a:	210e      	movs	r1, #14
 801ec3c:	6812      	ldr	r2, [r2, #0]
 801ec3e:	fb01 2303 	mla	r3, r1, r3, r2
 801ec42:	681a      	ldr	r2, [r3, #0]
 801ec44:	6002      	str	r2, [r0, #0]
 801ec46:	685a      	ldr	r2, [r3, #4]
 801ec48:	6042      	str	r2, [r0, #4]
 801ec4a:	bd10      	pop	{r4, pc}
 801ec4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ec50:	4293      	cmp	r3, r2
 801ec52:	d10b      	bne.n	801ec6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801ec54:	4b0f      	ldr	r3, [pc, #60]	; (801ec94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ec56:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ec5a:	4b0f      	ldr	r3, [pc, #60]	; (801ec98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801ec5c:	8081      	strh	r1, [r0, #4]
 801ec5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ec62:	2300      	movs	r3, #0
 801ec64:	80c2      	strh	r2, [r0, #6]
 801ec66:	8003      	strh	r3, [r0, #0]
 801ec68:	8043      	strh	r3, [r0, #2]
 801ec6a:	e7ee      	b.n	801ec4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ec6c:	2300      	movs	r3, #0
 801ec6e:	8003      	strh	r3, [r0, #0]
 801ec70:	8043      	strh	r3, [r0, #2]
 801ec72:	8083      	strh	r3, [r0, #4]
 801ec74:	e7d8      	b.n	801ec28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801ec76:	bf00      	nop
 801ec78:	2000bfb8 	.word	0x2000bfb8
 801ec7c:	0802b280 	.word	0x0802b280
 801ec80:	0802d444 	.word	0x0802d444
 801ec84:	0802d380 	.word	0x0802d380
 801ec88:	2000bfb0 	.word	0x2000bfb0
 801ec8c:	2000bfb4 	.word	0x2000bfb4
 801ec90:	2000bf98 	.word	0x2000bf98
 801ec94:	2000bee2 	.word	0x2000bee2
 801ec98:	2000bee4 	.word	0x2000bee4

0801ec9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ec9c:	4b18      	ldr	r3, [pc, #96]	; (801ed00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	b34b      	cbz	r3, 801ecf6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801eca2:	4a18      	ldr	r2, [pc, #96]	; (801ed04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801eca4:	8800      	ldrh	r0, [r0, #0]
 801eca6:	8812      	ldrh	r2, [r2, #0]
 801eca8:	4290      	cmp	r0, r2
 801ecaa:	d211      	bcs.n	801ecd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801ecac:	2214      	movs	r2, #20
 801ecae:	fb02 3300 	mla	r3, r2, r0, r3
 801ecb2:	8a1a      	ldrh	r2, [r3, #16]
 801ecb4:	8919      	ldrh	r1, [r3, #8]
 801ecb6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ecba:	428a      	cmp	r2, r1
 801ecbc:	db1d      	blt.n	801ecfa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ecbe:	8a58      	ldrh	r0, [r3, #18]
 801ecc0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ecc4:	895b      	ldrh	r3, [r3, #10]
 801ecc6:	4298      	cmp	r0, r3
 801ecc8:	bfac      	ite	ge
 801ecca:	2000      	movge	r0, #0
 801eccc:	2001      	movlt	r0, #1
 801ecce:	4770      	bx	lr
 801ecd0:	4b0d      	ldr	r3, [pc, #52]	; (801ed08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ecd2:	881b      	ldrh	r3, [r3, #0]
 801ecd4:	4413      	add	r3, r2
 801ecd6:	4298      	cmp	r0, r3
 801ecd8:	da0d      	bge.n	801ecf6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801ecda:	4b0c      	ldr	r3, [pc, #48]	; (801ed0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801ecdc:	1a80      	subs	r0, r0, r2
 801ecde:	220e      	movs	r2, #14
 801ece0:	681b      	ldr	r3, [r3, #0]
 801ece2:	fb02 3300 	mla	r3, r2, r0, r3
 801ece6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ecea:	891a      	ldrh	r2, [r3, #8]
 801ecec:	4291      	cmp	r1, r2
 801ecee:	db04      	blt.n	801ecfa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801ecf0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ecf4:	e7e6      	b.n	801ecc4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801ecf6:	2000      	movs	r0, #0
 801ecf8:	4770      	bx	lr
 801ecfa:	2001      	movs	r0, #1
 801ecfc:	4770      	bx	lr
 801ecfe:	bf00      	nop
 801ed00:	2000bfb8 	.word	0x2000bfb8
 801ed04:	2000bfb0 	.word	0x2000bfb0
 801ed08:	2000bfb4 	.word	0x2000bfb4
 801ed0c:	2000bf98 	.word	0x2000bf98

0801ed10 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ed10:	b508      	push	{r3, lr}
 801ed12:	4b12      	ldr	r3, [pc, #72]	; (801ed5c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ed14:	6819      	ldr	r1, [r3, #0]
 801ed16:	b931      	cbnz	r1, 801ed26 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ed18:	4b11      	ldr	r3, [pc, #68]	; (801ed60 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ed1a:	f240 3132 	movw	r1, #818	; 0x332
 801ed1e:	4a11      	ldr	r2, [pc, #68]	; (801ed64 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ed20:	4811      	ldr	r0, [pc, #68]	; (801ed68 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ed22:	f009 fc3f 	bl	80285a4 <__assert_func>
 801ed26:	8803      	ldrh	r3, [r0, #0]
 801ed28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ed2c:	4293      	cmp	r3, r2
 801ed2e:	d012      	beq.n	801ed56 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ed30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ed34:	4293      	cmp	r3, r2
 801ed36:	d103      	bne.n	801ed40 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ed38:	4b0c      	ldr	r3, [pc, #48]	; (801ed6c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ed3e:	bd08      	pop	{r3, pc}
 801ed40:	4a0b      	ldr	r2, [pc, #44]	; (801ed70 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801ed42:	6812      	ldr	r2, [r2, #0]
 801ed44:	b11a      	cbz	r2, 801ed4e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801ed46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ed4a:	2800      	cmp	r0, #0
 801ed4c:	d1f7      	bne.n	801ed3e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ed4e:	2214      	movs	r2, #20
 801ed50:	4353      	muls	r3, r2
 801ed52:	58c8      	ldr	r0, [r1, r3]
 801ed54:	e7f3      	b.n	801ed3e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ed56:	2000      	movs	r0, #0
 801ed58:	e7f1      	b.n	801ed3e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ed5a:	bf00      	nop
 801ed5c:	2000bfb8 	.word	0x2000bfb8
 801ed60:	0802b280 	.word	0x0802b280
 801ed64:	0802d47a 	.word	0x0802d47a
 801ed68:	0802d380 	.word	0x0802d380
 801ed6c:	2000bef0 	.word	0x2000bef0
 801ed70:	2000bf94 	.word	0x2000bf94

0801ed74 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ed74:	8802      	ldrh	r2, [r0, #0]
 801ed76:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ed7a:	429a      	cmp	r2, r3
 801ed7c:	d840      	bhi.n	801ee00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ed7e:	4b21      	ldr	r3, [pc, #132]	; (801ee04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801ed80:	881b      	ldrh	r3, [r3, #0]
 801ed82:	429a      	cmp	r2, r3
 801ed84:	d220      	bcs.n	801edc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801ed86:	4b20      	ldr	r3, [pc, #128]	; (801ee08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ed88:	6819      	ldr	r1, [r3, #0]
 801ed8a:	2314      	movs	r3, #20
 801ed8c:	fb03 1302 	mla	r3, r3, r2, r1
 801ed90:	6858      	ldr	r0, [r3, #4]
 801ed92:	2800      	cmp	r0, #0
 801ed94:	d035      	beq.n	801ee02 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ed96:	491d      	ldr	r1, [pc, #116]	; (801ee0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ed98:	6809      	ldr	r1, [r1, #0]
 801ed9a:	2900      	cmp	r1, #0
 801ed9c:	d031      	beq.n	801ee02 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ed9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801eda2:	b371      	cbz	r1, 801ee02 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801eda4:	895a      	ldrh	r2, [r3, #10]
 801eda6:	8918      	ldrh	r0, [r3, #8]
 801eda8:	4350      	muls	r0, r2
 801edaa:	7c5a      	ldrb	r2, [r3, #17]
 801edac:	7cdb      	ldrb	r3, [r3, #19]
 801edae:	0952      	lsrs	r2, r2, #5
 801edb0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801edb4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801edb8:	2b0b      	cmp	r3, #11
 801edba:	bf18      	it	ne
 801edbc:	0040      	lslne	r0, r0, #1
 801edbe:	3003      	adds	r0, #3
 801edc0:	f020 0003 	bic.w	r0, r0, #3
 801edc4:	4408      	add	r0, r1
 801edc6:	4770      	bx	lr
 801edc8:	4911      	ldr	r1, [pc, #68]	; (801ee10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801edca:	8809      	ldrh	r1, [r1, #0]
 801edcc:	4419      	add	r1, r3
 801edce:	428a      	cmp	r2, r1
 801edd0:	da16      	bge.n	801ee00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801edd2:	4910      	ldr	r1, [pc, #64]	; (801ee14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801edd4:	1ad3      	subs	r3, r2, r3
 801edd6:	200e      	movs	r0, #14
 801edd8:	6809      	ldr	r1, [r1, #0]
 801edda:	fb00 1303 	mla	r3, r0, r3, r1
 801edde:	7b19      	ldrb	r1, [r3, #12]
 801ede0:	f001 011f 	and.w	r1, r1, #31
 801ede4:	290b      	cmp	r1, #11
 801ede6:	d10b      	bne.n	801ee00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ede8:	8919      	ldrh	r1, [r3, #8]
 801edea:	8958      	ldrh	r0, [r3, #10]
 801edec:	4b07      	ldr	r3, [pc, #28]	; (801ee0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801edee:	4348      	muls	r0, r1
 801edf0:	6819      	ldr	r1, [r3, #0]
 801edf2:	3003      	adds	r0, #3
 801edf4:	f020 0303 	bic.w	r3, r0, #3
 801edf8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801edfc:	4418      	add	r0, r3
 801edfe:	4770      	bx	lr
 801ee00:	2000      	movs	r0, #0
 801ee02:	4770      	bx	lr
 801ee04:	2000bfb0 	.word	0x2000bfb0
 801ee08:	2000bfb8 	.word	0x2000bfb8
 801ee0c:	2000bf94 	.word	0x2000bf94
 801ee10:	2000bfb4 	.word	0x2000bfb4
 801ee14:	2000bf98 	.word	0x2000bf98

0801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ee18:	4b19      	ldr	r3, [pc, #100]	; (801ee80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ee1a:	6819      	ldr	r1, [r3, #0]
 801ee1c:	8803      	ldrh	r3, [r0, #0]
 801ee1e:	b1e9      	cbz	r1, 801ee5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ee20:	4a18      	ldr	r2, [pc, #96]	; (801ee84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ee22:	8812      	ldrh	r2, [r2, #0]
 801ee24:	429a      	cmp	r2, r3
 801ee26:	d90a      	bls.n	801ee3e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ee28:	2214      	movs	r2, #20
 801ee2a:	fb02 1303 	mla	r3, r2, r3, r1
 801ee2e:	7c58      	ldrb	r0, [r3, #17]
 801ee30:	0942      	lsrs	r2, r0, #5
 801ee32:	7cd8      	ldrb	r0, [r3, #19]
 801ee34:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801ee38:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801ee3c:	4770      	bx	lr
 801ee3e:	4912      	ldr	r1, [pc, #72]	; (801ee88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801ee40:	8809      	ldrh	r1, [r1, #0]
 801ee42:	4411      	add	r1, r2
 801ee44:	428b      	cmp	r3, r1
 801ee46:	da09      	bge.n	801ee5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ee48:	1a9b      	subs	r3, r3, r2
 801ee4a:	4a10      	ldr	r2, [pc, #64]	; (801ee8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801ee4c:	210e      	movs	r1, #14
 801ee4e:	6812      	ldr	r2, [r2, #0]
 801ee50:	fb01 2303 	mla	r3, r1, r3, r2
 801ee54:	7b18      	ldrb	r0, [r3, #12]
 801ee56:	f000 001f 	and.w	r0, r0, #31
 801ee5a:	4770      	bx	lr
 801ee5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ee60:	4293      	cmp	r3, r2
 801ee62:	d10a      	bne.n	801ee7a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801ee64:	4b0a      	ldr	r3, [pc, #40]	; (801ee90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ee6c:	b10a      	cbz	r2, 801ee72 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801ee6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ee70:	b900      	cbnz	r0, 801ee74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801ee72:	6898      	ldr	r0, [r3, #8]
 801ee74:	6803      	ldr	r3, [r0, #0]
 801ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee78:	4718      	bx	r3
 801ee7a:	2000      	movs	r0, #0
 801ee7c:	4770      	bx	lr
 801ee7e:	bf00      	nop
 801ee80:	2000bfb8 	.word	0x2000bfb8
 801ee84:	2000bfb0 	.word	0x2000bfb0
 801ee88:	2000bfb4 	.word	0x2000bfb4
 801ee8c:	2000bf98 	.word	0x2000bf98
 801ee90:	2000bef0 	.word	0x2000bef0

0801ee94 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801ee94:	2018      	movs	r0, #24
 801ee96:	4770      	bx	lr

0801ee98 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801ee98:	2001      	movs	r0, #1
 801ee9a:	4770      	bx	lr

0801ee9c <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801ee9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801eea0:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801eea4:	4770      	bx	lr

0801eea6 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801eea6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801eeaa:	4770      	bx	lr

0801eeac <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801eeac:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801eeb0:	4770      	bx	lr

0801eeb2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801eeb2:	b2c8      	uxtb	r0, r1
 801eeb4:	4770      	bx	lr

0801eeb6 <_ZN8touchgfx8LCD24bpp4initEv>:
 801eeb6:	4770      	bx	lr

0801eeb8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eebc:	b085      	sub	sp, #20
 801eebe:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801eec0:	9203      	str	r2, [sp, #12]
 801eec2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801eec6:	6878      	ldr	r0, [r7, #4]
 801eec8:	9201      	str	r2, [sp, #4]
 801eeca:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801eecc:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801eed0:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801eed4:	fa1f fc84 	uxth.w	ip, r4
 801eed8:	43e4      	mvns	r4, r4
 801eeda:	9100      	str	r1, [sp, #0]
 801eedc:	b2e4      	uxtb	r4, r4
 801eede:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801eee2:	fb00 2505 	mla	r5, r0, r5, r2
 801eee6:	683a      	ldr	r2, [r7, #0]
 801eee8:	6877      	ldr	r7, [r6, #4]
 801eeea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eeee:	3704      	adds	r7, #4
 801eef0:	4415      	add	r5, r2
 801eef2:	6832      	ldr	r2, [r6, #0]
 801eef4:	9202      	str	r2, [sp, #8]
 801eef6:	9a00      	ldr	r2, [sp, #0]
 801eef8:	2a00      	cmp	r2, #0
 801eefa:	dc03      	bgt.n	801ef04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801eefc:	9a03      	ldr	r2, [sp, #12]
 801eefe:	2a00      	cmp	r2, #0
 801ef00:	f340 8116 	ble.w	801f130 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ef04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef06:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef0c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	dd0f      	ble.n	801ef34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801ef14:	1406      	asrs	r6, r0, #16
 801ef16:	d406      	bmi.n	801ef26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef18:	4546      	cmp	r6, r8
 801ef1a:	da04      	bge.n	801ef26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef1c:	1416      	asrs	r6, r2, #16
 801ef1e:	d402      	bmi.n	801ef26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ef20:	9901      	ldr	r1, [sp, #4]
 801ef22:	428e      	cmp	r6, r1
 801ef24:	db07      	blt.n	801ef36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801ef26:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ef28:	3b01      	subs	r3, #1
 801ef2a:	3503      	adds	r5, #3
 801ef2c:	4408      	add	r0, r1
 801ef2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ef30:	440a      	add	r2, r1
 801ef32:	e7ed      	b.n	801ef10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801ef34:	d011      	beq.n	801ef5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801ef36:	1e5e      	subs	r6, r3, #1
 801ef38:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ef3a:	fb01 0e06 	mla	lr, r1, r6, r0
 801ef3e:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ef42:	d548      	bpl.n	801efd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801ef44:	4699      	mov	r9, r3
 801ef46:	462e      	mov	r6, r5
 801ef48:	f1b9 0f00 	cmp.w	r9, #0
 801ef4c:	f300 809e 	bgt.w	801f08c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801ef50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ef54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef58:	441d      	add	r5, r3
 801ef5a:	9b00      	ldr	r3, [sp, #0]
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	f340 80e7 	ble.w	801f130 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ef62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ef66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef70:	eef0 6a62 	vmov.f32	s13, s5
 801ef74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ef78:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef80:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ef84:	eef0 6a43 	vmov.f32	s13, s6
 801ef88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef8c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801ef90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef94:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef98:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801efa0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801efa4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801efa8:	ee12 2a90 	vmov	r2, s5
 801efac:	eef0 2a47 	vmov.f32	s5, s14
 801efb0:	fb92 f3f3 	sdiv	r3, r2, r3
 801efb4:	ee13 2a10 	vmov	r2, s6
 801efb8:	9311      	str	r3, [sp, #68]	; 0x44
 801efba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efbc:	eeb0 3a67 	vmov.f32	s6, s15
 801efc0:	fb92 f3f3 	sdiv	r3, r2, r3
 801efc4:	9312      	str	r3, [sp, #72]	; 0x48
 801efc6:	9b00      	ldr	r3, [sp, #0]
 801efc8:	9a03      	ldr	r2, [sp, #12]
 801efca:	3b01      	subs	r3, #1
 801efcc:	9300      	str	r3, [sp, #0]
 801efce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efd0:	bf08      	it	eq
 801efd2:	4613      	moveq	r3, r2
 801efd4:	e78f      	b.n	801eef6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801efd6:	45c6      	cmp	lr, r8
 801efd8:	dab4      	bge.n	801ef44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801efda:	9912      	ldr	r1, [sp, #72]	; 0x48
 801efdc:	fb01 2606 	mla	r6, r1, r6, r2
 801efe0:	1436      	asrs	r6, r6, #16
 801efe2:	d4af      	bmi.n	801ef44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801efe4:	9901      	ldr	r1, [sp, #4]
 801efe6:	428e      	cmp	r6, r1
 801efe8:	daac      	bge.n	801ef44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801efea:	1cee      	adds	r6, r5, #3
 801efec:	4699      	mov	r9, r3
 801efee:	f1b9 0f00 	cmp.w	r9, #0
 801eff2:	f106 0603 	add.w	r6, r6, #3
 801eff6:	ddab      	ble.n	801ef50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801eff8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801effc:	9902      	ldr	r1, [sp, #8]
 801effe:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f002:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f006:	fb08 1e0e 	mla	lr, r8, lr, r1
 801f00a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f00c:	fb1b fb04 	smulbb	fp, fp, r4
 801f010:	f109 39ff 	add.w	r9, r9, #4294967295
 801f014:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801f018:	4408      	add	r0, r1
 801f01a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f01c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f020:	440a      	add	r2, r1
 801f022:	eb07 0a0e 	add.w	sl, r7, lr
 801f026:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f02a:	fb0e be0c 	mla	lr, lr, ip, fp
 801f02e:	fa1f fe8e 	uxth.w	lr, lr
 801f032:	f10e 0b01 	add.w	fp, lr, #1
 801f036:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f03a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f03e:	fb1b fb04 	smulbb	fp, fp, r4
 801f042:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f046:	f806 ec06 	strb.w	lr, [r6, #-6]
 801f04a:	f89a e001 	ldrb.w	lr, [sl, #1]
 801f04e:	fb0e be0c 	mla	lr, lr, ip, fp
 801f052:	fa1f fe8e 	uxth.w	lr, lr
 801f056:	f10e 0b01 	add.w	fp, lr, #1
 801f05a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f05e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f062:	f806 ec05 	strb.w	lr, [r6, #-5]
 801f066:	f89a e002 	ldrb.w	lr, [sl, #2]
 801f06a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f06e:	fb1a fa04 	smulbb	sl, sl, r4
 801f072:	fb0e ae0c 	mla	lr, lr, ip, sl
 801f076:	fa1f fe8e 	uxth.w	lr, lr
 801f07a:	f10e 0a01 	add.w	sl, lr, #1
 801f07e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801f082:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f086:	f806 ec04 	strb.w	lr, [r6, #-4]
 801f08a:	e7b0      	b.n	801efee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801f08c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f090:	d446      	bmi.n	801f120 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801f092:	45c2      	cmp	sl, r8
 801f094:	da44      	bge.n	801f120 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801f096:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801f09a:	d441      	bmi.n	801f120 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801f09c:	9901      	ldr	r1, [sp, #4]
 801f09e:	458e      	cmp	lr, r1
 801f0a0:	da3e      	bge.n	801f120 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801f0a2:	9902      	ldr	r1, [sp, #8]
 801f0a4:	f896 b000 	ldrb.w	fp, [r6]
 801f0a8:	fb08 1e0e 	mla	lr, r8, lr, r1
 801f0ac:	fb1b fb04 	smulbb	fp, fp, r4
 801f0b0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801f0b4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f0b8:	eb07 0a0e 	add.w	sl, r7, lr
 801f0bc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f0c0:	fb0e be0c 	mla	lr, lr, ip, fp
 801f0c4:	fa1f fe8e 	uxth.w	lr, lr
 801f0c8:	f10e 0b01 	add.w	fp, lr, #1
 801f0cc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f0d0:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f0d4:	fb1b fb04 	smulbb	fp, fp, r4
 801f0d8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0dc:	f886 e000 	strb.w	lr, [r6]
 801f0e0:	f89a e001 	ldrb.w	lr, [sl, #1]
 801f0e4:	fb0e be0c 	mla	lr, lr, ip, fp
 801f0e8:	fa1f fe8e 	uxth.w	lr, lr
 801f0ec:	f10e 0b01 	add.w	fp, lr, #1
 801f0f0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f0f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0f8:	f886 e001 	strb.w	lr, [r6, #1]
 801f0fc:	f89a e002 	ldrb.w	lr, [sl, #2]
 801f100:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f104:	fb1a fa04 	smulbb	sl, sl, r4
 801f108:	fb0e ae0c 	mla	lr, lr, ip, sl
 801f10c:	fa1f fe8e 	uxth.w	lr, lr
 801f110:	f10e 0a01 	add.w	sl, lr, #1
 801f114:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801f118:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f11c:	f886 e002 	strb.w	lr, [r6, #2]
 801f120:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f122:	3603      	adds	r6, #3
 801f124:	f109 39ff 	add.w	r9, r9, #4294967295
 801f128:	4408      	add	r0, r1
 801f12a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f12c:	440a      	add	r2, r1
 801f12e:	e70b      	b.n	801ef48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801f130:	b005      	add	sp, #20
 801f132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f136 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f13a:	b085      	sub	sp, #20
 801f13c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f140:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f142:	9203      	str	r2, [sp, #12]
 801f144:	6870      	ldr	r0, [r6, #4]
 801f146:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f148:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f14c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801f150:	9101      	str	r1, [sp, #4]
 801f152:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f156:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801f15a:	fb00 2404 	mla	r4, r0, r4, r2
 801f15e:	6832      	ldr	r2, [r6, #0]
 801f160:	686e      	ldr	r6, [r5, #4]
 801f162:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f166:	3604      	adds	r6, #4
 801f168:	4414      	add	r4, r2
 801f16a:	682a      	ldr	r2, [r5, #0]
 801f16c:	9202      	str	r2, [sp, #8]
 801f16e:	9a01      	ldr	r2, [sp, #4]
 801f170:	2a00      	cmp	r2, #0
 801f172:	dc03      	bgt.n	801f17c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801f174:	9a03      	ldr	r2, [sp, #12]
 801f176:	2a00      	cmp	r2, #0
 801f178:	f340 80b2 	ble.w	801f2e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f17c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f17e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f182:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f184:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f188:	2b00      	cmp	r3, #0
 801f18a:	dd0c      	ble.n	801f1a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f18c:	1405      	asrs	r5, r0, #16
 801f18e:	d405      	bmi.n	801f19c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f190:	4575      	cmp	r5, lr
 801f192:	da03      	bge.n	801f19c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f194:	1415      	asrs	r5, r2, #16
 801f196:	d401      	bmi.n	801f19c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f198:	4545      	cmp	r5, r8
 801f19a:	db05      	blt.n	801f1a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f19c:	4460      	add	r0, ip
 801f19e:	443a      	add	r2, r7
 801f1a0:	3b01      	subs	r3, #1
 801f1a2:	3403      	adds	r4, #3
 801f1a4:	e7f0      	b.n	801f188 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801f1a6:	d03d      	beq.n	801f224 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801f1a8:	1e5d      	subs	r5, r3, #1
 801f1aa:	fb0c 0905 	mla	r9, ip, r5, r0
 801f1ae:	ea5f 4929 	movs.w	r9, r9, asr #16
 801f1b2:	d42c      	bmi.n	801f20e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f1b4:	45f1      	cmp	r9, lr
 801f1b6:	da2a      	bge.n	801f20e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f1b8:	fb07 2505 	mla	r5, r7, r5, r2
 801f1bc:	142d      	asrs	r5, r5, #16
 801f1be:	d426      	bmi.n	801f20e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f1c0:	4545      	cmp	r5, r8
 801f1c2:	da24      	bge.n	801f20e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f1c4:	1ce5      	adds	r5, r4, #3
 801f1c6:	469a      	mov	sl, r3
 801f1c8:	f1ba 0f00 	cmp.w	sl, #0
 801f1cc:	f105 0503 	add.w	r5, r5, #3
 801f1d0:	dd23      	ble.n	801f21a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f1d2:	ea4f 4922 	mov.w	r9, r2, asr #16
 801f1d6:	9902      	ldr	r1, [sp, #8]
 801f1d8:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801f1dc:	443a      	add	r2, r7
 801f1de:	fb0e 1909 	mla	r9, lr, r9, r1
 801f1e2:	4460      	add	r0, ip
 801f1e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f1e8:	f819 900b 	ldrb.w	r9, [r9, fp]
 801f1ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f1f0:	eb06 0b09 	add.w	fp, r6, r9
 801f1f4:	f816 9009 	ldrb.w	r9, [r6, r9]
 801f1f8:	f805 9c06 	strb.w	r9, [r5, #-6]
 801f1fc:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801f200:	f805 9c05 	strb.w	r9, [r5, #-5]
 801f204:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f208:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f20c:	e7dc      	b.n	801f1c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f20e:	2500      	movs	r5, #0
 801f210:	eba3 0905 	sub.w	r9, r3, r5
 801f214:	f1b9 0f00 	cmp.w	r9, #0
 801f218:	dc3c      	bgt.n	801f294 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801f21a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f21e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f222:	441c      	add	r4, r3
 801f224:	9b01      	ldr	r3, [sp, #4]
 801f226:	2b00      	cmp	r3, #0
 801f228:	dd5a      	ble.n	801f2e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f22a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f230:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f234:	eeb0 6a62 	vmov.f32	s12, s5
 801f238:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f23c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f240:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f244:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f248:	eeb0 6a43 	vmov.f32	s12, s6
 801f24c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f250:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f254:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f258:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f25c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f260:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f264:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f268:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f26c:	ee12 2a90 	vmov	r2, s5
 801f270:	eef0 2a47 	vmov.f32	s5, s14
 801f274:	fb92 fcf3 	sdiv	ip, r2, r3
 801f278:	ee13 2a10 	vmov	r2, s6
 801f27c:	eeb0 3a67 	vmov.f32	s6, s15
 801f280:	fb92 f7f3 	sdiv	r7, r2, r3
 801f284:	9b01      	ldr	r3, [sp, #4]
 801f286:	9a03      	ldr	r2, [sp, #12]
 801f288:	3b01      	subs	r3, #1
 801f28a:	9301      	str	r3, [sp, #4]
 801f28c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f28e:	bf08      	it	eq
 801f290:	4613      	moveq	r3, r2
 801f292:	e76c      	b.n	801f16e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801f294:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f298:	d41e      	bmi.n	801f2d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f29a:	45f2      	cmp	sl, lr
 801f29c:	da1c      	bge.n	801f2d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f29e:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f2a2:	d419      	bmi.n	801f2d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f2a4:	45c1      	cmp	r9, r8
 801f2a6:	da17      	bge.n	801f2d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801f2a8:	9902      	ldr	r1, [sp, #8]
 801f2aa:	fb0e 1909 	mla	r9, lr, r9, r1
 801f2ae:	f819 900a 	ldrb.w	r9, [r9, sl]
 801f2b2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f2b6:	f816 b009 	ldrb.w	fp, [r6, r9]
 801f2ba:	eb06 0a09 	add.w	sl, r6, r9
 801f2be:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801f2c2:	f804 b009 	strb.w	fp, [r4, r9]
 801f2c6:	44a1      	add	r9, r4
 801f2c8:	f89a b001 	ldrb.w	fp, [sl, #1]
 801f2cc:	f889 b001 	strb.w	fp, [r9, #1]
 801f2d0:	f89a a002 	ldrb.w	sl, [sl, #2]
 801f2d4:	f889 a002 	strb.w	sl, [r9, #2]
 801f2d8:	4460      	add	r0, ip
 801f2da:	443a      	add	r2, r7
 801f2dc:	3501      	adds	r5, #1
 801f2de:	e797      	b.n	801f210 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801f2e0:	b005      	add	sp, #20
 801f2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f2e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2ea:	b087      	sub	sp, #28
 801f2ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f2f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801f2f2:	9204      	str	r2, [sp, #16]
 801f2f4:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801f2f8:	6870      	ldr	r0, [r6, #4]
 801f2fa:	9205      	str	r2, [sp, #20]
 801f2fc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f2fe:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801f302:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801f306:	9101      	str	r1, [sp, #4]
 801f308:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f30c:	fb00 2505 	mla	r5, r0, r5, r2
 801f310:	6832      	ldr	r2, [r6, #0]
 801f312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f316:	4415      	add	r5, r2
 801f318:	6822      	ldr	r2, [r4, #0]
 801f31a:	9202      	str	r2, [sp, #8]
 801f31c:	6862      	ldr	r2, [r4, #4]
 801f31e:	3204      	adds	r2, #4
 801f320:	9203      	str	r2, [sp, #12]
 801f322:	9a01      	ldr	r2, [sp, #4]
 801f324:	2a00      	cmp	r2, #0
 801f326:	dc03      	bgt.n	801f330 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801f328:	9a04      	ldr	r2, [sp, #16]
 801f32a:	2a00      	cmp	r2, #0
 801f32c:	f340 8124 	ble.w	801f578 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f330:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f332:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f338:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	dd0e      	ble.n	801f35e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801f340:	1422      	asrs	r2, r4, #16
 801f342:	d405      	bmi.n	801f350 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f344:	4572      	cmp	r2, lr
 801f346:	da03      	bge.n	801f350 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f348:	1402      	asrs	r2, r0, #16
 801f34a:	d401      	bmi.n	801f350 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f34c:	4542      	cmp	r2, r8
 801f34e:	db07      	blt.n	801f360 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f352:	3b01      	subs	r3, #1
 801f354:	3503      	adds	r5, #3
 801f356:	4414      	add	r4, r2
 801f358:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f35a:	4410      	add	r0, r2
 801f35c:	e7ee      	b.n	801f33c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801f35e:	d010      	beq.n	801f382 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801f360:	1e5a      	subs	r2, r3, #1
 801f362:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f364:	fb06 4602 	mla	r6, r6, r2, r4
 801f368:	1436      	asrs	r6, r6, #16
 801f36a:	d546      	bpl.n	801f3fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801f36c:	4699      	mov	r9, r3
 801f36e:	462f      	mov	r7, r5
 801f370:	f1b9 0f00 	cmp.w	r9, #0
 801f374:	f300 80a5 	bgt.w	801f4c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801f378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f37c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f380:	441d      	add	r5, r3
 801f382:	9b01      	ldr	r3, [sp, #4]
 801f384:	2b00      	cmp	r3, #0
 801f386:	f340 80f7 	ble.w	801f578 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801f38a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f38e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f390:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f394:	eeb0 6a62 	vmov.f32	s12, s5
 801f398:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f39c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3a4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f3a8:	eeb0 6a43 	vmov.f32	s12, s6
 801f3ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3b0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f3b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3cc:	ee12 2a90 	vmov	r2, s5
 801f3d0:	eef0 2a47 	vmov.f32	s5, s14
 801f3d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3d8:	ee13 2a10 	vmov	r2, s6
 801f3dc:	9313      	str	r3, [sp, #76]	; 0x4c
 801f3de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3e0:	eeb0 3a67 	vmov.f32	s6, s15
 801f3e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3e8:	9314      	str	r3, [sp, #80]	; 0x50
 801f3ea:	9b01      	ldr	r3, [sp, #4]
 801f3ec:	9a04      	ldr	r2, [sp, #16]
 801f3ee:	3b01      	subs	r3, #1
 801f3f0:	9301      	str	r3, [sp, #4]
 801f3f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3f4:	bf08      	it	eq
 801f3f6:	4613      	moveq	r3, r2
 801f3f8:	e793      	b.n	801f322 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f3fa:	4576      	cmp	r6, lr
 801f3fc:	dab6      	bge.n	801f36c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f3fe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f400:	fb06 0202 	mla	r2, r6, r2, r0
 801f404:	1412      	asrs	r2, r2, #16
 801f406:	d4b1      	bmi.n	801f36c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f408:	4542      	cmp	r2, r8
 801f40a:	daaf      	bge.n	801f36c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f40c:	1cef      	adds	r7, r5, #3
 801f40e:	4699      	mov	r9, r3
 801f410:	f1b9 0f00 	cmp.w	r9, #0
 801f414:	ddb0      	ble.n	801f378 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f416:	9902      	ldr	r1, [sp, #8]
 801f418:	1402      	asrs	r2, r0, #16
 801f41a:	1426      	asrs	r6, r4, #16
 801f41c:	fb0e 1202 	mla	r2, lr, r2, r1
 801f420:	9903      	ldr	r1, [sp, #12]
 801f422:	5d92      	ldrb	r2, [r2, r6]
 801f424:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801f428:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f42c:	d041      	beq.n	801f4b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f42e:	9a05      	ldr	r2, [sp, #20]
 801f430:	fa5f fb86 	uxtb.w	fp, r6
 801f434:	fb02 fc0c 	mul.w	ip, r2, ip
 801f438:	f10c 0201 	add.w	r2, ip, #1
 801f43c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f440:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801f444:	1212      	asrs	r2, r2, #8
 801f446:	fa1f fa82 	uxth.w	sl, r2
 801f44a:	43d2      	mvns	r2, r2
 801f44c:	fb1b fb0a 	smulbb	fp, fp, sl
 801f450:	b2d2      	uxtb	r2, r2
 801f452:	fb0c bc02 	mla	ip, ip, r2, fp
 801f456:	fa1f fc8c 	uxth.w	ip, ip
 801f45a:	f10c 0b01 	add.w	fp, ip, #1
 801f45e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f462:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f466:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f46a:	fb1b fb0a 	smulbb	fp, fp, sl
 801f46e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f472:	fb16 fa0a 	smulbb	sl, r6, sl
 801f476:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f47a:	f807 cc03 	strb.w	ip, [r7, #-3]
 801f47e:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801f482:	fb06 aa02 	mla	sl, r6, r2, sl
 801f486:	fb0c bc02 	mla	ip, ip, r2, fp
 801f48a:	fa1f fa8a 	uxth.w	sl, sl
 801f48e:	fa1f fc8c 	uxth.w	ip, ip
 801f492:	f10a 0601 	add.w	r6, sl, #1
 801f496:	f10c 0b01 	add.w	fp, ip, #1
 801f49a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f49e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f4a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f4a6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f4aa:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f4ae:	f807 cc02 	strb.w	ip, [r7, #-2]
 801f4b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f4b4:	3703      	adds	r7, #3
 801f4b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f4ba:	4414      	add	r4, r2
 801f4bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f4be:	4410      	add	r0, r2
 801f4c0:	e7a6      	b.n	801f410 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f4c2:	1426      	asrs	r6, r4, #16
 801f4c4:	d450      	bmi.n	801f568 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f4c6:	4576      	cmp	r6, lr
 801f4c8:	da4e      	bge.n	801f568 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f4ca:	1402      	asrs	r2, r0, #16
 801f4cc:	d44c      	bmi.n	801f568 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f4ce:	4542      	cmp	r2, r8
 801f4d0:	da4a      	bge.n	801f568 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f4d2:	9902      	ldr	r1, [sp, #8]
 801f4d4:	fb0e 1202 	mla	r2, lr, r2, r1
 801f4d8:	9903      	ldr	r1, [sp, #12]
 801f4da:	5d92      	ldrb	r2, [r2, r6]
 801f4dc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801f4e0:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f4e4:	d040      	beq.n	801f568 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f4e6:	9a05      	ldr	r2, [sp, #20]
 801f4e8:	fa5f fb86 	uxtb.w	fp, r6
 801f4ec:	fb02 fc0c 	mul.w	ip, r2, ip
 801f4f0:	f10c 0201 	add.w	r2, ip, #1
 801f4f4:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f4f8:	f897 c000 	ldrb.w	ip, [r7]
 801f4fc:	1212      	asrs	r2, r2, #8
 801f4fe:	fa1f fa82 	uxth.w	sl, r2
 801f502:	43d2      	mvns	r2, r2
 801f504:	fb1b fb0a 	smulbb	fp, fp, sl
 801f508:	b2d2      	uxtb	r2, r2
 801f50a:	fb0c bc02 	mla	ip, ip, r2, fp
 801f50e:	fa1f fc8c 	uxth.w	ip, ip
 801f512:	f10c 0b01 	add.w	fp, ip, #1
 801f516:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f51a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f51e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f522:	fb1b fb0a 	smulbb	fp, fp, sl
 801f526:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f52a:	fb16 fa0a 	smulbb	sl, r6, sl
 801f52e:	78be      	ldrb	r6, [r7, #2]
 801f530:	f887 c000 	strb.w	ip, [r7]
 801f534:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f538:	fb06 aa02 	mla	sl, r6, r2, sl
 801f53c:	fb0c bc02 	mla	ip, ip, r2, fp
 801f540:	fa1f fa8a 	uxth.w	sl, sl
 801f544:	fa1f fc8c 	uxth.w	ip, ip
 801f548:	f10a 0601 	add.w	r6, sl, #1
 801f54c:	f10c 0b01 	add.w	fp, ip, #1
 801f550:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f554:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f558:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f55c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f560:	f887 a002 	strb.w	sl, [r7, #2]
 801f564:	f887 c001 	strb.w	ip, [r7, #1]
 801f568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f56a:	3703      	adds	r7, #3
 801f56c:	f109 39ff 	add.w	r9, r9, #4294967295
 801f570:	4414      	add	r4, r2
 801f572:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f574:	4410      	add	r0, r2
 801f576:	e6fb      	b.n	801f370 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f578:	b007      	add	sp, #28
 801f57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f57e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f57e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f582:	b085      	sub	sp, #20
 801f584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f588:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f58a:	9203      	str	r2, [sp, #12]
 801f58c:	6870      	ldr	r0, [r6, #4]
 801f58e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f590:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f594:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801f598:	9100      	str	r1, [sp, #0]
 801f59a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f59e:	fb00 2404 	mla	r4, r0, r4, r2
 801f5a2:	6832      	ldr	r2, [r6, #0]
 801f5a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f5a8:	4414      	add	r4, r2
 801f5aa:	682a      	ldr	r2, [r5, #0]
 801f5ac:	9201      	str	r2, [sp, #4]
 801f5ae:	686a      	ldr	r2, [r5, #4]
 801f5b0:	3204      	adds	r2, #4
 801f5b2:	9202      	str	r2, [sp, #8]
 801f5b4:	9a00      	ldr	r2, [sp, #0]
 801f5b6:	2a00      	cmp	r2, #0
 801f5b8:	dc03      	bgt.n	801f5c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801f5ba:	9a03      	ldr	r2, [sp, #12]
 801f5bc:	2a00      	cmp	r2, #0
 801f5be:	f340 8131 	ble.w	801f824 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f5c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f5c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f5c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	dd0e      	ble.n	801f5f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f5d2:	1405      	asrs	r5, r0, #16
 801f5d4:	d405      	bmi.n	801f5e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f5d6:	4575      	cmp	r5, lr
 801f5d8:	da03      	bge.n	801f5e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f5da:	1415      	asrs	r5, r2, #16
 801f5dc:	d401      	bmi.n	801f5e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f5de:	4545      	cmp	r5, r8
 801f5e0:	db07      	blt.n	801f5f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f5e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f5e4:	3b01      	subs	r3, #1
 801f5e6:	3403      	adds	r4, #3
 801f5e8:	4428      	add	r0, r5
 801f5ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f5ec:	442a      	add	r2, r5
 801f5ee:	e7ee      	b.n	801f5ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801f5f0:	d06f      	beq.n	801f6d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801f5f2:	1e5d      	subs	r5, r3, #1
 801f5f4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f5f6:	fb06 0605 	mla	r6, r6, r5, r0
 801f5fa:	1436      	asrs	r6, r6, #16
 801f5fc:	d460      	bmi.n	801f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f5fe:	4576      	cmp	r6, lr
 801f600:	da5e      	bge.n	801f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f602:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f604:	fb06 2505 	mla	r5, r6, r5, r2
 801f608:	142d      	asrs	r5, r5, #16
 801f60a:	d459      	bmi.n	801f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f60c:	4545      	cmp	r5, r8
 801f60e:	da57      	bge.n	801f6c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f610:	1ce5      	adds	r5, r4, #3
 801f612:	469a      	mov	sl, r3
 801f614:	f1ba 0f00 	cmp.w	sl, #0
 801f618:	dd56      	ble.n	801f6c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801f61a:	9901      	ldr	r1, [sp, #4]
 801f61c:	1416      	asrs	r6, r2, #16
 801f61e:	1407      	asrs	r7, r0, #16
 801f620:	fb0e 1606 	mla	r6, lr, r6, r1
 801f624:	9902      	ldr	r1, [sp, #8]
 801f626:	5df6      	ldrb	r6, [r6, r7]
 801f628:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801f62c:	0e37      	lsrs	r7, r6, #24
 801f62e:	2fff      	cmp	r7, #255	; 0xff
 801f630:	f000 80ef 	beq.w	801f812 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801f634:	fa5f fc87 	uxtb.w	ip, r7
 801f638:	b3d7      	cbz	r7, 801f6b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f63a:	fa1f f78c 	uxth.w	r7, ip
 801f63e:	ea6f 0c0c 	mvn.w	ip, ip
 801f642:	fa5f fb86 	uxtb.w	fp, r6
 801f646:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801f64a:	fa5f fc8c 	uxtb.w	ip, ip
 801f64e:	fb1b fb07 	smulbb	fp, fp, r7
 801f652:	fb09 b90c 	mla	r9, r9, ip, fp
 801f656:	fa1f f989 	uxth.w	r9, r9
 801f65a:	f109 0b01 	add.w	fp, r9, #1
 801f65e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f662:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f666:	fb1b fb0c 	smulbb	fp, fp, ip
 801f66a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f66e:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f672:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801f676:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f67a:	fb09 b907 	mla	r9, r9, r7, fp
 801f67e:	fa1f f989 	uxth.w	r9, r9
 801f682:	f109 0b01 	add.w	fp, r9, #1
 801f686:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f68a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f68e:	f805 9c02 	strb.w	r9, [r5, #-2]
 801f692:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801f696:	fb19 fc0c 	smulbb	ip, r9, ip
 801f69a:	fb06 c607 	mla	r6, r6, r7, ip
 801f69e:	b2b6      	uxth	r6, r6
 801f6a0:	f106 0c01 	add.w	ip, r6, #1
 801f6a4:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801f6a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f6ac:	f805 cc01 	strb.w	ip, [r5, #-1]
 801f6b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f6b2:	3503      	adds	r5, #3
 801f6b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f6b8:	4408      	add	r0, r1
 801f6ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f6bc:	440a      	add	r2, r1
 801f6be:	e7a9      	b.n	801f614 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801f6c0:	2600      	movs	r6, #0
 801f6c2:	1b9d      	subs	r5, r3, r6
 801f6c4:	2d00      	cmp	r5, #0
 801f6c6:	dc40      	bgt.n	801f74a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f6c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6d0:	441c      	add	r4, r3
 801f6d2:	9b00      	ldr	r3, [sp, #0]
 801f6d4:	2b00      	cmp	r3, #0
 801f6d6:	f340 80a5 	ble.w	801f824 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f6da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6e4:	eeb0 6a62 	vmov.f32	s12, s5
 801f6e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f6ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6f4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f6f8:	eeb0 6a43 	vmov.f32	s12, s6
 801f6fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f700:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f704:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f708:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f70c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f710:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f714:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f718:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f71c:	ee12 2a90 	vmov	r2, s5
 801f720:	eef0 2a47 	vmov.f32	s5, s14
 801f724:	fb92 f3f3 	sdiv	r3, r2, r3
 801f728:	ee13 2a10 	vmov	r2, s6
 801f72c:	9311      	str	r3, [sp, #68]	; 0x44
 801f72e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f730:	eeb0 3a67 	vmov.f32	s6, s15
 801f734:	fb92 f3f3 	sdiv	r3, r2, r3
 801f738:	9312      	str	r3, [sp, #72]	; 0x48
 801f73a:	9b00      	ldr	r3, [sp, #0]
 801f73c:	9a03      	ldr	r2, [sp, #12]
 801f73e:	3b01      	subs	r3, #1
 801f740:	9300      	str	r3, [sp, #0]
 801f742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f744:	bf08      	it	eq
 801f746:	4613      	moveq	r3, r2
 801f748:	e734      	b.n	801f5b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f74a:	1407      	asrs	r7, r0, #16
 801f74c:	d450      	bmi.n	801f7f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f74e:	4577      	cmp	r7, lr
 801f750:	da4e      	bge.n	801f7f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f752:	1415      	asrs	r5, r2, #16
 801f754:	d44c      	bmi.n	801f7f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f756:	4545      	cmp	r5, r8
 801f758:	da4a      	bge.n	801f7f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f75a:	9901      	ldr	r1, [sp, #4]
 801f75c:	fb0e 1505 	mla	r5, lr, r5, r1
 801f760:	9902      	ldr	r1, [sp, #8]
 801f762:	5ded      	ldrb	r5, [r5, r7]
 801f764:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801f768:	0e2f      	lsrs	r7, r5, #24
 801f76a:	2fff      	cmp	r7, #255	; 0xff
 801f76c:	d046      	beq.n	801f7fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801f76e:	fa5f f987 	uxtb.w	r9, r7
 801f772:	b3ef      	cbz	r7, 801f7f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f774:	fa1f fc89 	uxth.w	ip, r9
 801f778:	ea6f 0909 	mvn.w	r9, r9
 801f77c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f780:	fa5f fb85 	uxtb.w	fp, r5
 801f784:	f814 a007 	ldrb.w	sl, [r4, r7]
 801f788:	fa5f f989 	uxtb.w	r9, r9
 801f78c:	fb1b fb0c 	smulbb	fp, fp, ip
 801f790:	fb0a ba09 	mla	sl, sl, r9, fp
 801f794:	fa1f fa8a 	uxth.w	sl, sl
 801f798:	f10a 0b01 	add.w	fp, sl, #1
 801f79c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f7a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f7a4:	f804 a007 	strb.w	sl, [r4, r7]
 801f7a8:	4427      	add	r7, r4
 801f7aa:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f7ae:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801f7b2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f7b6:	fb1b fb09 	smulbb	fp, fp, r9
 801f7ba:	fb0a ba0c 	mla	sl, sl, ip, fp
 801f7be:	fa1f fa8a 	uxth.w	sl, sl
 801f7c2:	f10a 0b01 	add.w	fp, sl, #1
 801f7c6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f7ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f7ce:	f887 a001 	strb.w	sl, [r7, #1]
 801f7d2:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f7d6:	fb1a f909 	smulbb	r9, sl, r9
 801f7da:	fb05 950c 	mla	r5, r5, ip, r9
 801f7de:	b2ad      	uxth	r5, r5
 801f7e0:	f105 0901 	add.w	r9, r5, #1
 801f7e4:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801f7e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f7ec:	f887 9002 	strb.w	r9, [r7, #2]
 801f7f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f7f2:	3601      	adds	r6, #1
 801f7f4:	4408      	add	r0, r1
 801f7f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f7f8:	440a      	add	r2, r1
 801f7fa:	e762      	b.n	801f6c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801f7fc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f800:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801f804:	55e5      	strb	r5, [r4, r7]
 801f806:	4427      	add	r7, r4
 801f808:	0c2d      	lsrs	r5, r5, #16
 801f80a:	f887 c001 	strb.w	ip, [r7, #1]
 801f80e:	70bd      	strb	r5, [r7, #2]
 801f810:	e7ee      	b.n	801f7f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f812:	0a37      	lsrs	r7, r6, #8
 801f814:	f805 6c03 	strb.w	r6, [r5, #-3]
 801f818:	0c36      	lsrs	r6, r6, #16
 801f81a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f81e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f822:	e745      	b.n	801f6b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f824:	b005      	add	sp, #20
 801f826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f82a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f82a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f82e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f830:	9201      	str	r2, [sp, #4]
 801f832:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801f836:	6870      	ldr	r0, [r6, #4]
 801f838:	9200      	str	r2, [sp, #0]
 801f83a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801f83e:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801f842:	fa1f fc85 	uxth.w	ip, r5
 801f846:	43ed      	mvns	r5, r5
 801f848:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f84c:	b2ed      	uxtb	r5, r5
 801f84e:	fb00 2404 	mla	r4, r0, r4, r2
 801f852:	6832      	ldr	r2, [r6, #0]
 801f854:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f858:	4414      	add	r4, r2
 801f85a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f85c:	f8d2 8000 	ldr.w	r8, [r2]
 801f860:	2900      	cmp	r1, #0
 801f862:	dc03      	bgt.n	801f86c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801f864:	9a01      	ldr	r2, [sp, #4]
 801f866:	2a00      	cmp	r2, #0
 801f868:	f340 8104 	ble.w	801fa74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f86c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f86e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f874:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f878:	2b00      	cmp	r3, #0
 801f87a:	dd0f      	ble.n	801f89c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f87c:	1406      	asrs	r6, r0, #16
 801f87e:	d406      	bmi.n	801f88e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f880:	4576      	cmp	r6, lr
 801f882:	da04      	bge.n	801f88e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f884:	1416      	asrs	r6, r2, #16
 801f886:	d402      	bmi.n	801f88e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f888:	9f00      	ldr	r7, [sp, #0]
 801f88a:	42be      	cmp	r6, r7
 801f88c:	db07      	blt.n	801f89e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f88e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f890:	3b01      	subs	r3, #1
 801f892:	3403      	adds	r4, #3
 801f894:	4430      	add	r0, r6
 801f896:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f898:	4432      	add	r2, r6
 801f89a:	e7ed      	b.n	801f878 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801f89c:	d05f      	beq.n	801f95e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801f89e:	1e5e      	subs	r6, r3, #1
 801f8a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f8a2:	fb07 0706 	mla	r7, r7, r6, r0
 801f8a6:	143f      	asrs	r7, r7, #16
 801f8a8:	d450      	bmi.n	801f94c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f8aa:	4577      	cmp	r7, lr
 801f8ac:	da4e      	bge.n	801f94c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f8ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f8b0:	fb07 2606 	mla	r6, r7, r6, r2
 801f8b4:	1436      	asrs	r6, r6, #16
 801f8b6:	d449      	bmi.n	801f94c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f8b8:	9f00      	ldr	r7, [sp, #0]
 801f8ba:	42be      	cmp	r6, r7
 801f8bc:	da46      	bge.n	801f94c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f8be:	1ce6      	adds	r6, r4, #3
 801f8c0:	4699      	mov	r9, r3
 801f8c2:	f1b9 0f00 	cmp.w	r9, #0
 801f8c6:	f106 0603 	add.w	r6, r6, #3
 801f8ca:	dd43      	ble.n	801f954 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f8cc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f8d0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f8d4:	1417      	asrs	r7, r2, #16
 801f8d6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f8da:	fb1b fb05 	smulbb	fp, fp, r5
 801f8de:	fb0e a707 	mla	r7, lr, r7, sl
 801f8e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f8e6:	eb08 0a07 	add.w	sl, r8, r7
 801f8ea:	f818 7007 	ldrb.w	r7, [r8, r7]
 801f8ee:	fb07 b70c 	mla	r7, r7, ip, fp
 801f8f2:	b2bf      	uxth	r7, r7
 801f8f4:	f107 0b01 	add.w	fp, r7, #1
 801f8f8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f8fc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f900:	fb1b fb05 	smulbb	fp, fp, r5
 801f904:	123f      	asrs	r7, r7, #8
 801f906:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f90a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f90e:	fb07 b70c 	mla	r7, r7, ip, fp
 801f912:	b2bf      	uxth	r7, r7
 801f914:	f107 0b01 	add.w	fp, r7, #1
 801f918:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f91c:	123f      	asrs	r7, r7, #8
 801f91e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f922:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f926:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f92a:	fb1a fa05 	smulbb	sl, sl, r5
 801f92e:	fb07 a70c 	mla	r7, r7, ip, sl
 801f932:	b2bf      	uxth	r7, r7
 801f934:	f107 0a01 	add.w	sl, r7, #1
 801f938:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f93c:	123f      	asrs	r7, r7, #8
 801f93e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f942:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f944:	4438      	add	r0, r7
 801f946:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f948:	443a      	add	r2, r7
 801f94a:	e7ba      	b.n	801f8c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f94c:	2700      	movs	r7, #0
 801f94e:	1bde      	subs	r6, r3, r7
 801f950:	2e00      	cmp	r6, #0
 801f952:	dc3f      	bgt.n	801f9d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f958:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f95c:	441c      	add	r4, r3
 801f95e:	2900      	cmp	r1, #0
 801f960:	f340 8088 	ble.w	801fa74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f96a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f96e:	3901      	subs	r1, #1
 801f970:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f974:	eef0 6a62 	vmov.f32	s13, s5
 801f978:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f97c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f980:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f984:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801f988:	eef0 6a43 	vmov.f32	s13, s6
 801f98c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f990:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801f994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f998:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f99c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9ac:	ee12 2a90 	vmov	r2, s5
 801f9b0:	eef0 2a47 	vmov.f32	s5, s14
 801f9b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9b8:	ee13 2a10 	vmov	r2, s6
 801f9bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801f9be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f9c0:	eeb0 3a67 	vmov.f32	s6, s15
 801f9c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9c8:	9a01      	ldr	r2, [sp, #4]
 801f9ca:	9310      	str	r3, [sp, #64]	; 0x40
 801f9cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f9ce:	bf08      	it	eq
 801f9d0:	4613      	moveq	r3, r2
 801f9d2:	e745      	b.n	801f860 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f9d4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f9d8:	d446      	bmi.n	801fa68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f9da:	45f2      	cmp	sl, lr
 801f9dc:	da44      	bge.n	801fa68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f9de:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f9e2:	d441      	bmi.n	801fa68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f9e4:	9e00      	ldr	r6, [sp, #0]
 801f9e6:	45b1      	cmp	r9, r6
 801f9e8:	da3e      	bge.n	801fa68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f9ea:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f9ee:	fb0e a909 	mla	r9, lr, r9, sl
 801f9f2:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f9f6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f9fa:	fb1b fb05 	smulbb	fp, fp, r5
 801f9fe:	eb08 0a09 	add.w	sl, r8, r9
 801fa02:	f818 9009 	ldrb.w	r9, [r8, r9]
 801fa06:	fb09 b90c 	mla	r9, r9, ip, fp
 801fa0a:	fa1f f989 	uxth.w	r9, r9
 801fa0e:	f109 0b01 	add.w	fp, r9, #1
 801fa12:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa16:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa1a:	f804 9006 	strb.w	r9, [r4, r6]
 801fa1e:	4426      	add	r6, r4
 801fa20:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801fa24:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fa28:	fb1b fb05 	smulbb	fp, fp, r5
 801fa2c:	fb09 b90c 	mla	r9, r9, ip, fp
 801fa30:	fa1f f989 	uxth.w	r9, r9
 801fa34:	f109 0b01 	add.w	fp, r9, #1
 801fa38:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa40:	f886 9001 	strb.w	r9, [r6, #1]
 801fa44:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fa48:	f896 a002 	ldrb.w	sl, [r6, #2]
 801fa4c:	fb1a fa05 	smulbb	sl, sl, r5
 801fa50:	fb09 a90c 	mla	r9, r9, ip, sl
 801fa54:	fa1f f989 	uxth.w	r9, r9
 801fa58:	f109 0a01 	add.w	sl, r9, #1
 801fa5c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801fa60:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa64:	f886 9002 	strb.w	r9, [r6, #2]
 801fa68:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801fa6a:	3701      	adds	r7, #1
 801fa6c:	4430      	add	r0, r6
 801fa6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fa70:	4432      	add	r2, r6
 801fa72:	e76c      	b.n	801f94e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801fa74:	b003      	add	sp, #12
 801fa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa7a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fa7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fa80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fa84:	9201      	str	r2, [sp, #4]
 801fa86:	6868      	ldr	r0, [r5, #4]
 801fa88:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801fa8c:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801fa90:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801fa94:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801fa98:	fb00 2404 	mla	r4, r0, r4, r2
 801fa9c:	682a      	ldr	r2, [r5, #0]
 801fa9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801faa2:	4414      	add	r4, r2
 801faa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801faa6:	f8d2 9000 	ldr.w	r9, [r2]
 801faaa:	2900      	cmp	r1, #0
 801faac:	dc03      	bgt.n	801fab6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801faae:	9a01      	ldr	r2, [sp, #4]
 801fab0:	2a00      	cmp	r2, #0
 801fab2:	f340 80a8 	ble.w	801fc06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801fab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fab8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fabc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fabe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	dd0c      	ble.n	801fae0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801fac6:	1405      	asrs	r5, r0, #16
 801fac8:	d405      	bmi.n	801fad6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801faca:	4565      	cmp	r5, ip
 801facc:	da03      	bge.n	801fad6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801face:	1415      	asrs	r5, r2, #16
 801fad0:	d401      	bmi.n	801fad6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801fad2:	4575      	cmp	r5, lr
 801fad4:	db05      	blt.n	801fae2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801fad6:	4438      	add	r0, r7
 801fad8:	4432      	add	r2, r6
 801fada:	3b01      	subs	r3, #1
 801fadc:	3403      	adds	r4, #3
 801fade:	e7f0      	b.n	801fac2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801fae0:	d03a      	beq.n	801fb58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801fae2:	1e5d      	subs	r5, r3, #1
 801fae4:	fb07 0805 	mla	r8, r7, r5, r0
 801fae8:	ea5f 4828 	movs.w	r8, r8, asr #16
 801faec:	d429      	bmi.n	801fb42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801faee:	45e0      	cmp	r8, ip
 801faf0:	da27      	bge.n	801fb42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801faf2:	fb06 2505 	mla	r5, r6, r5, r2
 801faf6:	142d      	asrs	r5, r5, #16
 801faf8:	d423      	bmi.n	801fb42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fafa:	4575      	cmp	r5, lr
 801fafc:	da21      	bge.n	801fb42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fafe:	f104 0803 	add.w	r8, r4, #3
 801fb02:	469a      	mov	sl, r3
 801fb04:	f1ba 0f00 	cmp.w	sl, #0
 801fb08:	f108 0803 	add.w	r8, r8, #3
 801fb0c:	dd1f      	ble.n	801fb4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801fb0e:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801fb12:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fb16:	1415      	asrs	r5, r2, #16
 801fb18:	4438      	add	r0, r7
 801fb1a:	4432      	add	r2, r6
 801fb1c:	fb0c b505 	mla	r5, ip, r5, fp
 801fb20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb24:	eb09 0b05 	add.w	fp, r9, r5
 801fb28:	f819 5005 	ldrb.w	r5, [r9, r5]
 801fb2c:	f808 5c06 	strb.w	r5, [r8, #-6]
 801fb30:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801fb34:	f808 5c05 	strb.w	r5, [r8, #-5]
 801fb38:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801fb3c:	f808 5c04 	strb.w	r5, [r8, #-4]
 801fb40:	e7e0      	b.n	801fb04 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801fb42:	2500      	movs	r5, #0
 801fb44:	eba3 0805 	sub.w	r8, r3, r5
 801fb48:	f1b8 0f00 	cmp.w	r8, #0
 801fb4c:	dc38      	bgt.n	801fbc0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801fb4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb56:	441c      	add	r4, r3
 801fb58:	2900      	cmp	r1, #0
 801fb5a:	dd54      	ble.n	801fc06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801fb5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb66:	3901      	subs	r1, #1
 801fb68:	eeb0 6a62 	vmov.f32	s12, s5
 801fb6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fb70:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb78:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801fb7c:	eeb0 6a43 	vmov.f32	s12, s6
 801fb80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb84:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801fb88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fb8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fb90:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fb94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fb98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fb9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fba0:	ee12 2a90 	vmov	r2, s5
 801fba4:	eef0 2a47 	vmov.f32	s5, s14
 801fba8:	fb92 f7f3 	sdiv	r7, r2, r3
 801fbac:	ee13 2a10 	vmov	r2, s6
 801fbb0:	eeb0 3a67 	vmov.f32	s6, s15
 801fbb4:	fb92 f6f3 	sdiv	r6, r2, r3
 801fbb8:	9a01      	ldr	r2, [sp, #4]
 801fbba:	bf08      	it	eq
 801fbbc:	4613      	moveq	r3, r2
 801fbbe:	e774      	b.n	801faaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801fbc0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801fbc4:	d41b      	bmi.n	801fbfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801fbc6:	45e2      	cmp	sl, ip
 801fbc8:	da19      	bge.n	801fbfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801fbca:	ea5f 4822 	movs.w	r8, r2, asr #16
 801fbce:	d416      	bmi.n	801fbfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801fbd0:	45f0      	cmp	r8, lr
 801fbd2:	da14      	bge.n	801fbfe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801fbd4:	fb0c a808 	mla	r8, ip, r8, sl
 801fbd8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fbdc:	f819 b008 	ldrb.w	fp, [r9, r8]
 801fbe0:	eb09 0a08 	add.w	sl, r9, r8
 801fbe4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801fbe8:	f804 b008 	strb.w	fp, [r4, r8]
 801fbec:	44a0      	add	r8, r4
 801fbee:	f89a b001 	ldrb.w	fp, [sl, #1]
 801fbf2:	f888 b001 	strb.w	fp, [r8, #1]
 801fbf6:	f89a a002 	ldrb.w	sl, [sl, #2]
 801fbfa:	f888 a002 	strb.w	sl, [r8, #2]
 801fbfe:	4438      	add	r0, r7
 801fc00:	4432      	add	r2, r6
 801fc02:	3501      	adds	r5, #1
 801fc04:	e79e      	b.n	801fb44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801fc06:	b003      	add	sp, #12
 801fc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc10:	b085      	sub	sp, #20
 801fc12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fc16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc18:	9202      	str	r2, [sp, #8]
 801fc1a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fc1e:	6860      	ldr	r0, [r4, #4]
 801fc20:	9203      	str	r2, [sp, #12]
 801fc22:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801fc26:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801fc2a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801fc2e:	fb00 2505 	mla	r5, r0, r5, r2
 801fc32:	6822      	ldr	r2, [r4, #0]
 801fc34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc38:	4415      	add	r5, r2
 801fc3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fc3c:	6812      	ldr	r2, [r2, #0]
 801fc3e:	9201      	str	r2, [sp, #4]
 801fc40:	2900      	cmp	r1, #0
 801fc42:	dc03      	bgt.n	801fc4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801fc44:	9a02      	ldr	r2, [sp, #8]
 801fc46:	2a00      	cmp	r2, #0
 801fc48:	f340 811c 	ble.w	801fe84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fc4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fc4e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fc52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fc54:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	dd0e      	ble.n	801fc7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fc5c:	1422      	asrs	r2, r4, #16
 801fc5e:	d405      	bmi.n	801fc6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fc60:	4572      	cmp	r2, lr
 801fc62:	da03      	bge.n	801fc6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fc64:	1402      	asrs	r2, r0, #16
 801fc66:	d401      	bmi.n	801fc6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fc68:	4542      	cmp	r2, r8
 801fc6a:	db07      	blt.n	801fc7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fc6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fc6e:	3b01      	subs	r3, #1
 801fc70:	3503      	adds	r5, #3
 801fc72:	4414      	add	r4, r2
 801fc74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fc76:	4410      	add	r0, r2
 801fc78:	e7ee      	b.n	801fc58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801fc7a:	d072      	beq.n	801fd62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801fc7c:	1e5a      	subs	r2, r3, #1
 801fc7e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fc80:	fb06 4602 	mla	r6, r6, r2, r4
 801fc84:	1436      	asrs	r6, r6, #16
 801fc86:	d461      	bmi.n	801fd4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fc88:	4576      	cmp	r6, lr
 801fc8a:	da5f      	bge.n	801fd4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fc8c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fc8e:	fb06 0202 	mla	r2, r6, r2, r0
 801fc92:	1412      	asrs	r2, r2, #16
 801fc94:	d45a      	bmi.n	801fd4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fc96:	4542      	cmp	r2, r8
 801fc98:	da58      	bge.n	801fd4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801fc9a:	1cef      	adds	r7, r5, #3
 801fc9c:	4699      	mov	r9, r3
 801fc9e:	f1b9 0f00 	cmp.w	r9, #0
 801fca2:	dd59      	ble.n	801fd58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801fca4:	1426      	asrs	r6, r4, #16
 801fca6:	1402      	asrs	r2, r0, #16
 801fca8:	fb0e 6202 	mla	r2, lr, r2, r6
 801fcac:	9e01      	ldr	r6, [sp, #4]
 801fcae:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801fcb2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801fcb6:	d041      	beq.n	801fd3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801fcb8:	9a03      	ldr	r2, [sp, #12]
 801fcba:	fa5f fb86 	uxtb.w	fp, r6
 801fcbe:	fb02 fc0c 	mul.w	ip, r2, ip
 801fcc2:	f10c 0201 	add.w	r2, ip, #1
 801fcc6:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801fcca:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801fcce:	1212      	asrs	r2, r2, #8
 801fcd0:	fa1f fa82 	uxth.w	sl, r2
 801fcd4:	43d2      	mvns	r2, r2
 801fcd6:	fb1b fb0a 	smulbb	fp, fp, sl
 801fcda:	b2d2      	uxtb	r2, r2
 801fcdc:	fb0c bc02 	mla	ip, ip, r2, fp
 801fce0:	fa1f fc8c 	uxth.w	ip, ip
 801fce4:	f10c 0b01 	add.w	fp, ip, #1
 801fce8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fcec:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801fcf0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801fcf4:	fb1b fb0a 	smulbb	fp, fp, sl
 801fcf8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fcfc:	fb16 fa0a 	smulbb	sl, r6, sl
 801fd00:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801fd04:	f807 cc03 	strb.w	ip, [r7, #-3]
 801fd08:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801fd0c:	fb06 aa02 	mla	sl, r6, r2, sl
 801fd10:	fb0c bc02 	mla	ip, ip, r2, fp
 801fd14:	fa1f fa8a 	uxth.w	sl, sl
 801fd18:	fa1f fc8c 	uxth.w	ip, ip
 801fd1c:	f10a 0601 	add.w	r6, sl, #1
 801fd20:	f10c 0b01 	add.w	fp, ip, #1
 801fd24:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801fd28:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fd2c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fd30:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fd34:	f807 ac01 	strb.w	sl, [r7, #-1]
 801fd38:	f807 cc02 	strb.w	ip, [r7, #-2]
 801fd3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd3e:	3703      	adds	r7, #3
 801fd40:	f109 39ff 	add.w	r9, r9, #4294967295
 801fd44:	4414      	add	r4, r2
 801fd46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd48:	4410      	add	r0, r2
 801fd4a:	e7a8      	b.n	801fc9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801fd4c:	f04f 0c00 	mov.w	ip, #0
 801fd50:	eba3 020c 	sub.w	r2, r3, ip
 801fd54:	2a00      	cmp	r2, #0
 801fd56:	dc3d      	bgt.n	801fdd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801fd58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd60:	441d      	add	r5, r3
 801fd62:	2900      	cmp	r1, #0
 801fd64:	f340 808e 	ble.w	801fe84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fd68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd72:	3901      	subs	r1, #1
 801fd74:	eeb0 6a62 	vmov.f32	s12, s5
 801fd78:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd84:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fd88:	eeb0 6a43 	vmov.f32	s12, s6
 801fd8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd90:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fd94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd98:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fda0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fda4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fda8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fdac:	ee12 2a90 	vmov	r2, s5
 801fdb0:	eef0 2a47 	vmov.f32	s5, s14
 801fdb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdb8:	ee13 2a10 	vmov	r2, s6
 801fdbc:	9311      	str	r3, [sp, #68]	; 0x44
 801fdbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdc0:	eeb0 3a67 	vmov.f32	s6, s15
 801fdc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdc8:	9a02      	ldr	r2, [sp, #8]
 801fdca:	9312      	str	r3, [sp, #72]	; 0x48
 801fdcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdce:	bf08      	it	eq
 801fdd0:	4613      	moveq	r3, r2
 801fdd2:	e735      	b.n	801fc40 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801fdd4:	1426      	asrs	r6, r4, #16
 801fdd6:	d44e      	bmi.n	801fe76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fdd8:	4576      	cmp	r6, lr
 801fdda:	da4c      	bge.n	801fe76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fddc:	1402      	asrs	r2, r0, #16
 801fdde:	d44a      	bmi.n	801fe76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fde0:	4542      	cmp	r2, r8
 801fde2:	da48      	bge.n	801fe76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fde4:	fb0e 6202 	mla	r2, lr, r2, r6
 801fde8:	9e01      	ldr	r6, [sp, #4]
 801fdea:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801fdee:	0e3a      	lsrs	r2, r7, #24
 801fdf0:	d041      	beq.n	801fe76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fdf2:	9e03      	ldr	r6, [sp, #12]
 801fdf4:	fa5f fb87 	uxtb.w	fp, r7
 801fdf8:	4372      	muls	r2, r6
 801fdfa:	1c56      	adds	r6, r2, #1
 801fdfc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fe00:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801fe04:	1212      	asrs	r2, r2, #8
 801fe06:	f815 9006 	ldrb.w	r9, [r5, r6]
 801fe0a:	fa1f fa82 	uxth.w	sl, r2
 801fe0e:	43d2      	mvns	r2, r2
 801fe10:	fb1b fb0a 	smulbb	fp, fp, sl
 801fe14:	b2d2      	uxtb	r2, r2
 801fe16:	fb09 b902 	mla	r9, r9, r2, fp
 801fe1a:	fa1f f989 	uxth.w	r9, r9
 801fe1e:	f109 0b01 	add.w	fp, r9, #1
 801fe22:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fe26:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fe2a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801fe2e:	fb1b fb0a 	smulbb	fp, fp, sl
 801fe32:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe36:	fb17 fa0a 	smulbb	sl, r7, sl
 801fe3a:	f805 9006 	strb.w	r9, [r5, r6]
 801fe3e:	442e      	add	r6, r5
 801fe40:	78b7      	ldrb	r7, [r6, #2]
 801fe42:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fe46:	fb07 aa02 	mla	sl, r7, r2, sl
 801fe4a:	fb09 b902 	mla	r9, r9, r2, fp
 801fe4e:	fa1f fa8a 	uxth.w	sl, sl
 801fe52:	fa1f f989 	uxth.w	r9, r9
 801fe56:	f10a 0701 	add.w	r7, sl, #1
 801fe5a:	f109 0b01 	add.w	fp, r9, #1
 801fe5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fe62:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fe66:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fe6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe6e:	f886 a002 	strb.w	sl, [r6, #2]
 801fe72:	f886 9001 	strb.w	r9, [r6, #1]
 801fe76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fe78:	f10c 0c01 	add.w	ip, ip, #1
 801fe7c:	4414      	add	r4, r2
 801fe7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fe80:	4410      	add	r0, r2
 801fe82:	e765      	b.n	801fd50 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801fe84:	b005      	add	sp, #20
 801fe86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fe8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe8e:	b085      	sub	sp, #20
 801fe90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fe94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fe96:	9203      	str	r2, [sp, #12]
 801fe98:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801fe9c:	6860      	ldr	r0, [r4, #4]
 801fe9e:	9201      	str	r2, [sp, #4]
 801fea0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801fea4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801fea8:	fb00 2505 	mla	r5, r0, r5, r2
 801feac:	6822      	ldr	r2, [r4, #0]
 801feae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801feb2:	4415      	add	r5, r2
 801feb4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801feb6:	6812      	ldr	r2, [r2, #0]
 801feb8:	9202      	str	r2, [sp, #8]
 801feba:	2900      	cmp	r1, #0
 801febc:	dc03      	bgt.n	801fec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801febe:	9a03      	ldr	r2, [sp, #12]
 801fec0:	2a00      	cmp	r2, #0
 801fec2:	f340 8122 	ble.w	802010a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801fec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fec8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fece:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	dd0f      	ble.n	801fef6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801fed6:	1422      	asrs	r2, r4, #16
 801fed8:	d406      	bmi.n	801fee8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801feda:	4572      	cmp	r2, lr
 801fedc:	da04      	bge.n	801fee8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801fede:	1402      	asrs	r2, r0, #16
 801fee0:	d402      	bmi.n	801fee8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801fee2:	9e01      	ldr	r6, [sp, #4]
 801fee4:	42b2      	cmp	r2, r6
 801fee6:	db07      	blt.n	801fef8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801feea:	3b01      	subs	r3, #1
 801feec:	3503      	adds	r5, #3
 801feee:	4414      	add	r4, r2
 801fef0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fef2:	4410      	add	r0, r2
 801fef4:	e7ed      	b.n	801fed2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801fef6:	d06e      	beq.n	801ffd6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801fef8:	1e5a      	subs	r2, r3, #1
 801fefa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fefc:	fb06 4602 	mla	r6, r6, r2, r4
 801ff00:	1436      	asrs	r6, r6, #16
 801ff02:	d45d      	bmi.n	801ffc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ff04:	4576      	cmp	r6, lr
 801ff06:	da5b      	bge.n	801ffc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ff08:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ff0a:	fb06 0202 	mla	r2, r6, r2, r0
 801ff0e:	1412      	asrs	r2, r2, #16
 801ff10:	d456      	bmi.n	801ffc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ff12:	9e01      	ldr	r6, [sp, #4]
 801ff14:	42b2      	cmp	r2, r6
 801ff16:	da53      	bge.n	801ffc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ff18:	1cee      	adds	r6, r5, #3
 801ff1a:	469a      	mov	sl, r3
 801ff1c:	f1ba 0f00 	cmp.w	sl, #0
 801ff20:	dd54      	ble.n	801ffcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ff22:	1427      	asrs	r7, r4, #16
 801ff24:	1402      	asrs	r2, r0, #16
 801ff26:	fb0e 7202 	mla	r2, lr, r2, r7
 801ff2a:	9f02      	ldr	r7, [sp, #8]
 801ff2c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ff30:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801ff34:	d03c      	beq.n	801ffb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ff36:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ff3a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ff3e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ff42:	fa5f f28c 	uxtb.w	r2, ip
 801ff46:	b2ff      	uxtb	r7, r7
 801ff48:	f000 80d8 	beq.w	80200fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ff4c:	fa1f f882 	uxth.w	r8, r2
 801ff50:	43d2      	mvns	r2, r2
 801ff52:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801ff56:	fb17 f708 	smulbb	r7, r7, r8
 801ff5a:	b2d2      	uxtb	r2, r2
 801ff5c:	fb19 f908 	smulbb	r9, r9, r8
 801ff60:	fb0c 7702 	mla	r7, ip, r2, r7
 801ff64:	fb1b f808 	smulbb	r8, fp, r8
 801ff68:	b2bf      	uxth	r7, r7
 801ff6a:	f107 0c01 	add.w	ip, r7, #1
 801ff6e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ff72:	123f      	asrs	r7, r7, #8
 801ff74:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ff78:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ff7c:	fb07 9902 	mla	r9, r7, r2, r9
 801ff80:	fa1f f989 	uxth.w	r9, r9
 801ff84:	f109 0701 	add.w	r7, r9, #1
 801ff88:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ff8c:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ff90:	fb07 8802 	mla	r8, r7, r2, r8
 801ff94:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff98:	fa1f f888 	uxth.w	r8, r8
 801ff9c:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ffa0:	f108 0201 	add.w	r2, r8, #1
 801ffa4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ffa8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ffac:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ffb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ffb2:	3603      	adds	r6, #3
 801ffb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ffb8:	4414      	add	r4, r2
 801ffba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ffbc:	4410      	add	r0, r2
 801ffbe:	e7ad      	b.n	801ff1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ffc0:	f04f 0c00 	mov.w	ip, #0
 801ffc4:	eba3 020c 	sub.w	r2, r3, ip
 801ffc8:	2a00      	cmp	r2, #0
 801ffca:	dc3d      	bgt.n	8020048 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801ffcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffd4:	441d      	add	r5, r3
 801ffd6:	2900      	cmp	r1, #0
 801ffd8:	f340 8097 	ble.w	802010a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ffdc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ffe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffe2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ffe6:	3901      	subs	r1, #1
 801ffe8:	eeb0 6a62 	vmov.f32	s12, s5
 801ffec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fff0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fff4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fff8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fffc:	eeb0 6a43 	vmov.f32	s12, s6
 8020000:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020004:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020008:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802000c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020010:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020014:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020018:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802001c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020020:	ee12 2a90 	vmov	r2, s5
 8020024:	eef0 2a47 	vmov.f32	s5, s14
 8020028:	fb92 f3f3 	sdiv	r3, r2, r3
 802002c:	ee13 2a10 	vmov	r2, s6
 8020030:	9311      	str	r3, [sp, #68]	; 0x44
 8020032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020034:	eeb0 3a67 	vmov.f32	s6, s15
 8020038:	fb92 f3f3 	sdiv	r3, r2, r3
 802003c:	9a03      	ldr	r2, [sp, #12]
 802003e:	9312      	str	r3, [sp, #72]	; 0x48
 8020040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020042:	bf08      	it	eq
 8020044:	4613      	moveq	r3, r2
 8020046:	e738      	b.n	801feba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8020048:	1426      	asrs	r6, r4, #16
 802004a:	d448      	bmi.n	80200de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802004c:	4576      	cmp	r6, lr
 802004e:	da46      	bge.n	80200de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8020050:	1402      	asrs	r2, r0, #16
 8020052:	d444      	bmi.n	80200de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8020054:	9f01      	ldr	r7, [sp, #4]
 8020056:	42ba      	cmp	r2, r7
 8020058:	da41      	bge.n	80200de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802005a:	fb0e 6202 	mla	r2, lr, r2, r6
 802005e:	9e02      	ldr	r6, [sp, #8]
 8020060:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8020064:	0e3a      	lsrs	r2, r7, #24
 8020066:	d03a      	beq.n	80200de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8020068:	2aff      	cmp	r2, #255	; 0xff
 802006a:	b2d6      	uxtb	r6, r2
 802006c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020070:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020074:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8020078:	b2ff      	uxtb	r7, r7
 802007a:	d037      	beq.n	80200ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 802007c:	fa1f f986 	uxth.w	r9, r6
 8020080:	4462      	add	r2, ip
 8020082:	43f6      	mvns	r6, r6
 8020084:	f815 8002 	ldrb.w	r8, [r5, r2]
 8020088:	fb17 f709 	smulbb	r7, r7, r9
 802008c:	fb1a fa09 	smulbb	sl, sl, r9
 8020090:	b2f6      	uxtb	r6, r6
 8020092:	fb1b f909 	smulbb	r9, fp, r9
 8020096:	fb08 7706 	mla	r7, r8, r6, r7
 802009a:	b2bf      	uxth	r7, r7
 802009c:	f107 0801 	add.w	r8, r7, #1
 80200a0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80200a4:	123f      	asrs	r7, r7, #8
 80200a6:	54af      	strb	r7, [r5, r2]
 80200a8:	442a      	add	r2, r5
 80200aa:	7857      	ldrb	r7, [r2, #1]
 80200ac:	fb07 aa06 	mla	sl, r7, r6, sl
 80200b0:	fa1f fa8a 	uxth.w	sl, sl
 80200b4:	f10a 0701 	add.w	r7, sl, #1
 80200b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80200bc:	7897      	ldrb	r7, [r2, #2]
 80200be:	fb07 9906 	mla	r9, r7, r6, r9
 80200c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80200c6:	fa1f f989 	uxth.w	r9, r9
 80200ca:	f882 a001 	strb.w	sl, [r2, #1]
 80200ce:	f109 0601 	add.w	r6, r9, #1
 80200d2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80200d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80200da:	f882 9002 	strb.w	r9, [r2, #2]
 80200de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80200e0:	f10c 0c01 	add.w	ip, ip, #1
 80200e4:	4414      	add	r4, r2
 80200e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80200e8:	4410      	add	r0, r2
 80200ea:	e76b      	b.n	801ffc4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 80200ec:	4462      	add	r2, ip
 80200ee:	54af      	strb	r7, [r5, r2]
 80200f0:	442a      	add	r2, r5
 80200f2:	f882 a001 	strb.w	sl, [r2, #1]
 80200f6:	f882 b002 	strb.w	fp, [r2, #2]
 80200fa:	e7f0      	b.n	80200de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80200fc:	f806 7c03 	strb.w	r7, [r6, #-3]
 8020100:	f806 9c02 	strb.w	r9, [r6, #-2]
 8020104:	f806 bc01 	strb.w	fp, [r6, #-1]
 8020108:	e752      	b.n	801ffb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 802010a:	b005      	add	sp, #20
 802010c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020110 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020114:	b087      	sub	sp, #28
 8020116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802011a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802011c:	9204      	str	r2, [sp, #16]
 802011e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8020122:	6860      	ldr	r0, [r4, #4]
 8020124:	9205      	str	r2, [sp, #20]
 8020126:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 802012a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 802012e:	9101      	str	r1, [sp, #4]
 8020130:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020134:	fb00 2505 	mla	r5, r0, r5, r2
 8020138:	6822      	ldr	r2, [r4, #0]
 802013a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802013e:	4415      	add	r5, r2
 8020140:	f10e 0201 	add.w	r2, lr, #1
 8020144:	f022 0201 	bic.w	r2, r2, #1
 8020148:	9202      	str	r2, [sp, #8]
 802014a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802014c:	6812      	ldr	r2, [r2, #0]
 802014e:	9203      	str	r2, [sp, #12]
 8020150:	9a01      	ldr	r2, [sp, #4]
 8020152:	2a00      	cmp	r2, #0
 8020154:	dc03      	bgt.n	802015e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8020156:	9a04      	ldr	r2, [sp, #16]
 8020158:	2a00      	cmp	r2, #0
 802015a:	f340 8132 	ble.w	80203c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 802015e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020160:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020166:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802016a:	2b00      	cmp	r3, #0
 802016c:	dd0e      	ble.n	802018c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 802016e:	1422      	asrs	r2, r4, #16
 8020170:	d405      	bmi.n	802017e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020172:	4596      	cmp	lr, r2
 8020174:	dd03      	ble.n	802017e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020176:	1402      	asrs	r2, r0, #16
 8020178:	d401      	bmi.n	802017e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802017a:	4542      	cmp	r2, r8
 802017c:	db07      	blt.n	802018e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802017e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020180:	3b01      	subs	r3, #1
 8020182:	3503      	adds	r5, #3
 8020184:	4414      	add	r4, r2
 8020186:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020188:	4410      	add	r0, r2
 802018a:	e7ee      	b.n	802016a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 802018c:	d010      	beq.n	80201b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 802018e:	1e5a      	subs	r2, r3, #1
 8020190:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020192:	fb06 4602 	mla	r6, r6, r2, r4
 8020196:	1436      	asrs	r6, r6, #16
 8020198:	d546      	bpl.n	8020228 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802019a:	4699      	mov	r9, r3
 802019c:	462e      	mov	r6, r5
 802019e:	f1b9 0f00 	cmp.w	r9, #0
 80201a2:	f300 80ac 	bgt.w	80202fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 80201a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80201aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201ae:	441d      	add	r5, r3
 80201b0:	9b01      	ldr	r3, [sp, #4]
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	f340 8105 	ble.w	80203c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 80201b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80201be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201c2:	eeb0 6a62 	vmov.f32	s12, s5
 80201c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80201ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201d2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80201d6:	eeb0 6a43 	vmov.f32	s12, s6
 80201da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201de:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80201e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201fa:	ee12 2a90 	vmov	r2, s5
 80201fe:	eef0 2a47 	vmov.f32	s5, s14
 8020202:	fb92 f3f3 	sdiv	r3, r2, r3
 8020206:	ee13 2a10 	vmov	r2, s6
 802020a:	9313      	str	r3, [sp, #76]	; 0x4c
 802020c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802020e:	eeb0 3a67 	vmov.f32	s6, s15
 8020212:	fb92 f3f3 	sdiv	r3, r2, r3
 8020216:	9314      	str	r3, [sp, #80]	; 0x50
 8020218:	9b01      	ldr	r3, [sp, #4]
 802021a:	9a04      	ldr	r2, [sp, #16]
 802021c:	3b01      	subs	r3, #1
 802021e:	9301      	str	r3, [sp, #4]
 8020220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020222:	bf08      	it	eq
 8020224:	4613      	moveq	r3, r2
 8020226:	e793      	b.n	8020150 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8020228:	45b6      	cmp	lr, r6
 802022a:	ddb6      	ble.n	802019a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802022c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802022e:	fb06 0202 	mla	r2, r6, r2, r0
 8020232:	1412      	asrs	r2, r2, #16
 8020234:	d4b1      	bmi.n	802019a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8020236:	4542      	cmp	r2, r8
 8020238:	daaf      	bge.n	802019a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802023a:	1cee      	adds	r6, r5, #3
 802023c:	4699      	mov	r9, r3
 802023e:	f1b9 0f00 	cmp.w	r9, #0
 8020242:	ddb0      	ble.n	80201a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8020244:	1422      	asrs	r2, r4, #16
 8020246:	9902      	ldr	r1, [sp, #8]
 8020248:	1407      	asrs	r7, r0, #16
 802024a:	fb01 2707 	mla	r7, r1, r7, r2
 802024e:	9903      	ldr	r1, [sp, #12]
 8020250:	087a      	lsrs	r2, r7, #1
 8020252:	5c8a      	ldrb	r2, [r1, r2]
 8020254:	07f9      	lsls	r1, r7, #31
 8020256:	bf54      	ite	pl
 8020258:	f002 020f 	andpl.w	r2, r2, #15
 802025c:	1112      	asrmi	r2, r2, #4
 802025e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020262:	b2d2      	uxtb	r2, r2
 8020264:	2a00      	cmp	r2, #0
 8020266:	d042      	beq.n	80202ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 8020268:	4957      	ldr	r1, [pc, #348]	; (80203c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 802026a:	680f      	ldr	r7, [r1, #0]
 802026c:	9905      	ldr	r1, [sp, #20]
 802026e:	fa5f fb87 	uxtb.w	fp, r7
 8020272:	434a      	muls	r2, r1
 8020274:	f102 0c01 	add.w	ip, r2, #1
 8020278:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 802027c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8020280:	1212      	asrs	r2, r2, #8
 8020282:	fa1f fa82 	uxth.w	sl, r2
 8020286:	43d2      	mvns	r2, r2
 8020288:	fb1b fb0a 	smulbb	fp, fp, sl
 802028c:	b2d2      	uxtb	r2, r2
 802028e:	fb0c bc02 	mla	ip, ip, r2, fp
 8020292:	fa1f fc8c 	uxth.w	ip, ip
 8020296:	f10c 0b01 	add.w	fp, ip, #1
 802029a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802029e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80202a2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80202a6:	fb1b fb0a 	smulbb	fp, fp, sl
 80202aa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80202ae:	fb17 fa0a 	smulbb	sl, r7, sl
 80202b2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80202b6:	f806 cc03 	strb.w	ip, [r6, #-3]
 80202ba:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 80202be:	fb07 aa02 	mla	sl, r7, r2, sl
 80202c2:	fb0c bc02 	mla	ip, ip, r2, fp
 80202c6:	fa1f fa8a 	uxth.w	sl, sl
 80202ca:	fa1f fc8c 	uxth.w	ip, ip
 80202ce:	f10a 0701 	add.w	r7, sl, #1
 80202d2:	f10c 0b01 	add.w	fp, ip, #1
 80202d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80202da:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80202de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80202e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80202e6:	f806 ac01 	strb.w	sl, [r6, #-1]
 80202ea:	f806 cc02 	strb.w	ip, [r6, #-2]
 80202ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202f0:	3603      	adds	r6, #3
 80202f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80202f6:	4414      	add	r4, r2
 80202f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80202fa:	4410      	add	r0, r2
 80202fc:	e79f      	b.n	802023e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 80202fe:	1422      	asrs	r2, r4, #16
 8020300:	d457      	bmi.n	80203b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8020302:	4596      	cmp	lr, r2
 8020304:	dd55      	ble.n	80203b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8020306:	1407      	asrs	r7, r0, #16
 8020308:	d453      	bmi.n	80203b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802030a:	4547      	cmp	r7, r8
 802030c:	da51      	bge.n	80203b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802030e:	9902      	ldr	r1, [sp, #8]
 8020310:	fb07 2701 	mla	r7, r7, r1, r2
 8020314:	9903      	ldr	r1, [sp, #12]
 8020316:	087a      	lsrs	r2, r7, #1
 8020318:	07ff      	lsls	r7, r7, #31
 802031a:	5c8a      	ldrb	r2, [r1, r2]
 802031c:	bf54      	ite	pl
 802031e:	f002 020f 	andpl.w	r2, r2, #15
 8020322:	1112      	asrmi	r2, r2, #4
 8020324:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020328:	b2d2      	uxtb	r2, r2
 802032a:	2a00      	cmp	r2, #0
 802032c:	d041      	beq.n	80203b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802032e:	4926      	ldr	r1, [pc, #152]	; (80203c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8020330:	680f      	ldr	r7, [r1, #0]
 8020332:	9905      	ldr	r1, [sp, #20]
 8020334:	fa5f fb87 	uxtb.w	fp, r7
 8020338:	434a      	muls	r2, r1
 802033a:	f102 0c01 	add.w	ip, r2, #1
 802033e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8020342:	f896 c000 	ldrb.w	ip, [r6]
 8020346:	1212      	asrs	r2, r2, #8
 8020348:	fa1f fa82 	uxth.w	sl, r2
 802034c:	43d2      	mvns	r2, r2
 802034e:	fb1b fb0a 	smulbb	fp, fp, sl
 8020352:	b2d2      	uxtb	r2, r2
 8020354:	fb0c bc02 	mla	ip, ip, r2, fp
 8020358:	fa1f fc8c 	uxth.w	ip, ip
 802035c:	f10c 0b01 	add.w	fp, ip, #1
 8020360:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020364:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8020368:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802036c:	fb1b fb0a 	smulbb	fp, fp, sl
 8020370:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020374:	fb17 fa0a 	smulbb	sl, r7, sl
 8020378:	78b7      	ldrb	r7, [r6, #2]
 802037a:	f886 c000 	strb.w	ip, [r6]
 802037e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8020382:	fb07 aa02 	mla	sl, r7, r2, sl
 8020386:	fb0c bc02 	mla	ip, ip, r2, fp
 802038a:	fa1f fa8a 	uxth.w	sl, sl
 802038e:	fa1f fc8c 	uxth.w	ip, ip
 8020392:	f10a 0701 	add.w	r7, sl, #1
 8020396:	f10c 0b01 	add.w	fp, ip, #1
 802039a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802039e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80203a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80203a6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80203aa:	f886 a002 	strb.w	sl, [r6, #2]
 80203ae:	f886 c001 	strb.w	ip, [r6, #1]
 80203b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80203b4:	3603      	adds	r6, #3
 80203b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80203ba:	4414      	add	r4, r2
 80203bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80203be:	4410      	add	r0, r2
 80203c0:	e6ed      	b.n	802019e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80203c2:	b007      	add	sp, #28
 80203c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203c8:	2000bf18 	.word	0x2000bf18

080203cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80203cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203d0:	b087      	sub	sp, #28
 80203d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80203d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80203d8:	9205      	str	r2, [sp, #20]
 80203da:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80203de:	6860      	ldr	r0, [r4, #4]
 80203e0:	9202      	str	r2, [sp, #8]
 80203e2:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80203e6:	9101      	str	r1, [sp, #4]
 80203e8:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 80203ec:	fb00 2606 	mla	r6, r0, r6, r2
 80203f0:	6822      	ldr	r2, [r4, #0]
 80203f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80203f6:	4416      	add	r6, r2
 80203f8:	f108 0201 	add.w	r2, r8, #1
 80203fc:	f022 0201 	bic.w	r2, r2, #1
 8020400:	9203      	str	r2, [sp, #12]
 8020402:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020404:	6812      	ldr	r2, [r2, #0]
 8020406:	9204      	str	r2, [sp, #16]
 8020408:	9a01      	ldr	r2, [sp, #4]
 802040a:	2a00      	cmp	r2, #0
 802040c:	dc03      	bgt.n	8020416 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 802040e:	9a05      	ldr	r2, [sp, #20]
 8020410:	2a00      	cmp	r2, #0
 8020412:	f340 813a 	ble.w	802068a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8020416:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020418:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 802041c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802041e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020422:	2b00      	cmp	r3, #0
 8020424:	dd0f      	ble.n	8020446 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020426:	142a      	asrs	r2, r5, #16
 8020428:	d406      	bmi.n	8020438 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802042a:	4590      	cmp	r8, r2
 802042c:	dd04      	ble.n	8020438 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802042e:	1422      	asrs	r2, r4, #16
 8020430:	d402      	bmi.n	8020438 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8020432:	9802      	ldr	r0, [sp, #8]
 8020434:	4282      	cmp	r2, r0
 8020436:	db07      	blt.n	8020448 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8020438:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802043a:	3b01      	subs	r3, #1
 802043c:	3603      	adds	r6, #3
 802043e:	4415      	add	r5, r2
 8020440:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020442:	4414      	add	r4, r2
 8020444:	e7ed      	b.n	8020422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8020446:	d073      	beq.n	8020530 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8020448:	1e5a      	subs	r2, r3, #1
 802044a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802044c:	fb00 5002 	mla	r0, r0, r2, r5
 8020450:	1400      	asrs	r0, r0, #16
 8020452:	d464      	bmi.n	802051e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8020454:	4580      	cmp	r8, r0
 8020456:	dd62      	ble.n	802051e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8020458:	9814      	ldr	r0, [sp, #80]	; 0x50
 802045a:	fb00 4202 	mla	r2, r0, r2, r4
 802045e:	1412      	asrs	r2, r2, #16
 8020460:	d45d      	bmi.n	802051e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8020462:	9802      	ldr	r0, [sp, #8]
 8020464:	4282      	cmp	r2, r0
 8020466:	da5a      	bge.n	802051e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8020468:	1cf0      	adds	r0, r6, #3
 802046a:	469a      	mov	sl, r3
 802046c:	f1ba 0f00 	cmp.w	sl, #0
 8020470:	dd59      	ble.n	8020526 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8020472:	142a      	asrs	r2, r5, #16
 8020474:	9903      	ldr	r1, [sp, #12]
 8020476:	1427      	asrs	r7, r4, #16
 8020478:	fb01 2707 	mla	r7, r1, r7, r2
 802047c:	9904      	ldr	r1, [sp, #16]
 802047e:	087a      	lsrs	r2, r7, #1
 8020480:	5c8a      	ldrb	r2, [r1, r2]
 8020482:	07f9      	lsls	r1, r7, #31
 8020484:	bf54      	ite	pl
 8020486:	f002 020f 	andpl.w	r2, r2, #15
 802048a:	1112      	asrmi	r2, r2, #4
 802048c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020490:	b2d2      	uxtb	r2, r2
 8020492:	2a00      	cmp	r2, #0
 8020494:	d03b      	beq.n	802050e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8020496:	497e      	ldr	r1, [pc, #504]	; (8020690 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8020498:	2aff      	cmp	r2, #255	; 0xff
 802049a:	680f      	ldr	r7, [r1, #0]
 802049c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80204a0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80204a4:	b2ff      	uxtb	r7, r7
 80204a6:	f000 80e9 	beq.w	802067c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80204aa:	fa1f fe82 	uxth.w	lr, r2
 80204ae:	43d2      	mvns	r2, r2
 80204b0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80204b4:	fb17 f70e 	smulbb	r7, r7, lr
 80204b8:	b2d2      	uxtb	r2, r2
 80204ba:	fb19 f90e 	smulbb	r9, r9, lr
 80204be:	fb0c 7702 	mla	r7, ip, r2, r7
 80204c2:	fb1b fe0e 	smulbb	lr, fp, lr
 80204c6:	b2bf      	uxth	r7, r7
 80204c8:	f107 0c01 	add.w	ip, r7, #1
 80204cc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80204d0:	123f      	asrs	r7, r7, #8
 80204d2:	f800 7c03 	strb.w	r7, [r0, #-3]
 80204d6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80204da:	fb07 9902 	mla	r9, r7, r2, r9
 80204de:	fa1f f989 	uxth.w	r9, r9
 80204e2:	f109 0701 	add.w	r7, r9, #1
 80204e6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80204ea:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80204ee:	fb07 ee02 	mla	lr, r7, r2, lr
 80204f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80204f6:	fa1f fe8e 	uxth.w	lr, lr
 80204fa:	f800 9c02 	strb.w	r9, [r0, #-2]
 80204fe:	f10e 0201 	add.w	r2, lr, #1
 8020502:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020506:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802050a:	f800 ec01 	strb.w	lr, [r0, #-1]
 802050e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020510:	3003      	adds	r0, #3
 8020512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020516:	4415      	add	r5, r2
 8020518:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802051a:	4414      	add	r4, r2
 802051c:	e7a6      	b.n	802046c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 802051e:	2700      	movs	r7, #0
 8020520:	1bda      	subs	r2, r3, r7
 8020522:	2a00      	cmp	r2, #0
 8020524:	dc40      	bgt.n	80205a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8020526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802052a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802052e:	441e      	add	r6, r3
 8020530:	9b01      	ldr	r3, [sp, #4]
 8020532:	2b00      	cmp	r3, #0
 8020534:	f340 80a9 	ble.w	802068a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8020538:	ee30 0a04 	vadd.f32	s0, s0, s8
 802053c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802053e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020542:	eeb0 6a62 	vmov.f32	s12, s5
 8020546:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802054a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802054e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020552:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020556:	eeb0 6a43 	vmov.f32	s12, s6
 802055a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802055e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020562:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020566:	ee61 7a27 	vmul.f32	s15, s2, s15
 802056a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802056e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020572:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020576:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802057a:	ee12 2a90 	vmov	r2, s5
 802057e:	eef0 2a47 	vmov.f32	s5, s14
 8020582:	fb92 f3f3 	sdiv	r3, r2, r3
 8020586:	ee13 2a10 	vmov	r2, s6
 802058a:	9313      	str	r3, [sp, #76]	; 0x4c
 802058c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802058e:	eeb0 3a67 	vmov.f32	s6, s15
 8020592:	fb92 f3f3 	sdiv	r3, r2, r3
 8020596:	9314      	str	r3, [sp, #80]	; 0x50
 8020598:	9b01      	ldr	r3, [sp, #4]
 802059a:	9a05      	ldr	r2, [sp, #20]
 802059c:	3b01      	subs	r3, #1
 802059e:	9301      	str	r3, [sp, #4]
 80205a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205a2:	bf08      	it	eq
 80205a4:	4613      	moveq	r3, r2
 80205a6:	e72f      	b.n	8020408 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80205a8:	142a      	asrs	r2, r5, #16
 80205aa:	d458      	bmi.n	802065e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80205ac:	4590      	cmp	r8, r2
 80205ae:	dd56      	ble.n	802065e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80205b0:	1420      	asrs	r0, r4, #16
 80205b2:	d454      	bmi.n	802065e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80205b4:	9902      	ldr	r1, [sp, #8]
 80205b6:	4288      	cmp	r0, r1
 80205b8:	da51      	bge.n	802065e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80205ba:	9903      	ldr	r1, [sp, #12]
 80205bc:	fb00 2001 	mla	r0, r0, r1, r2
 80205c0:	9904      	ldr	r1, [sp, #16]
 80205c2:	0842      	lsrs	r2, r0, #1
 80205c4:	07c0      	lsls	r0, r0, #31
 80205c6:	5c8a      	ldrb	r2, [r1, r2]
 80205c8:	bf54      	ite	pl
 80205ca:	f002 020f 	andpl.w	r2, r2, #15
 80205ce:	1112      	asrmi	r2, r2, #4
 80205d0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80205d4:	b2d2      	uxtb	r2, r2
 80205d6:	2a00      	cmp	r2, #0
 80205d8:	d041      	beq.n	802065e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80205da:	492d      	ldr	r1, [pc, #180]	; (8020690 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80205dc:	2aff      	cmp	r2, #255	; 0xff
 80205de:	6808      	ldr	r0, [r1, #0]
 80205e0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80205e4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80205e8:	fa5f fc80 	uxtb.w	ip, r0
 80205ec:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80205f0:	d03b      	beq.n	802066a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 80205f2:	fa1f f982 	uxth.w	r9, r2
 80205f6:	4438      	add	r0, r7
 80205f8:	43d2      	mvns	r2, r2
 80205fa:	f816 e000 	ldrb.w	lr, [r6, r0]
 80205fe:	fb1c fc09 	smulbb	ip, ip, r9
 8020602:	fb1a fa09 	smulbb	sl, sl, r9
 8020606:	b2d2      	uxtb	r2, r2
 8020608:	fb1b f909 	smulbb	r9, fp, r9
 802060c:	fb0e cc02 	mla	ip, lr, r2, ip
 8020610:	fa1f fc8c 	uxth.w	ip, ip
 8020614:	f10c 0e01 	add.w	lr, ip, #1
 8020618:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 802061c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020620:	f806 c000 	strb.w	ip, [r6, r0]
 8020624:	4430      	add	r0, r6
 8020626:	f890 c001 	ldrb.w	ip, [r0, #1]
 802062a:	fb0c aa02 	mla	sl, ip, r2, sl
 802062e:	fa1f fa8a 	uxth.w	sl, sl
 8020632:	f10a 0c01 	add.w	ip, sl, #1
 8020636:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802063a:	f890 c002 	ldrb.w	ip, [r0, #2]
 802063e:	fb0c 9902 	mla	r9, ip, r2, r9
 8020642:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020646:	fa1f f989 	uxth.w	r9, r9
 802064a:	f880 a001 	strb.w	sl, [r0, #1]
 802064e:	f109 0201 	add.w	r2, r9, #1
 8020652:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8020656:	ea4f 2929 	mov.w	r9, r9, asr #8
 802065a:	f880 9002 	strb.w	r9, [r0, #2]
 802065e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020660:	3701      	adds	r7, #1
 8020662:	4415      	add	r5, r2
 8020664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020666:	4414      	add	r4, r2
 8020668:	e75a      	b.n	8020520 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 802066a:	4438      	add	r0, r7
 802066c:	f806 c000 	strb.w	ip, [r6, r0]
 8020670:	4430      	add	r0, r6
 8020672:	f880 a001 	strb.w	sl, [r0, #1]
 8020676:	f880 b002 	strb.w	fp, [r0, #2]
 802067a:	e7f0      	b.n	802065e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802067c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020680:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020684:	f800 bc01 	strb.w	fp, [r0, #-1]
 8020688:	e741      	b.n	802050e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802068a:	b007      	add	sp, #28
 802068c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020690:	2000bf18 	.word	0x2000bf18

08020694 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020694:	4770      	bx	lr

08020696 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020696:	4770      	bx	lr

08020698 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020698:	4770      	bx	lr

0802069a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802069a:	4770      	bx	lr

0802069c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802069c:	4770      	bx	lr

0802069e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802069e:	4770      	bx	lr

080206a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80206a0:	4770      	bx	lr

080206a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80206a2:	4770      	bx	lr

080206a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80206a4:	4770      	bx	lr

080206a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80206a6:	4770      	bx	lr

080206a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80206a8:	4770      	bx	lr

080206aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80206aa:	4770      	bx	lr

080206ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80206ac:	4770      	bx	lr

080206ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80206ae:	4770      	bx	lr

080206b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80206b0:	4770      	bx	lr

080206b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80206b2:	4770      	bx	lr

080206b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80206b4:	4770      	bx	lr

080206b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80206b6:	4770      	bx	lr

080206b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80206b8:	4770      	bx	lr

080206ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80206ba:	4770      	bx	lr

080206bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80206bc:	2bff      	cmp	r3, #255	; 0xff
 80206be:	b508      	push	{r3, lr}
 80206c0:	d04f      	beq.n	8020762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80206c2:	2a2c      	cmp	r2, #44	; 0x2c
 80206c4:	d032      	beq.n	802072c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80206c6:	d80f      	bhi.n	80206e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80206c8:	2a08      	cmp	r2, #8
 80206ca:	d046      	beq.n	802075a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80206cc:	d805      	bhi.n	80206da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80206ce:	2a04      	cmp	r2, #4
 80206d0:	d041      	beq.n	8020756 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80206d2:	2a05      	cmp	r2, #5
 80206d4:	d03d      	beq.n	8020752 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80206d6:	2000      	movs	r0, #0
 80206d8:	e027      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80206da:	2a0a      	cmp	r2, #10
 80206dc:	d03d      	beq.n	802075a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80206de:	d301      	bcc.n	80206e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80206e0:	2a0b      	cmp	r2, #11
 80206e2:	d1f8      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80206e4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80206e6:	e020      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80206e8:	2a30      	cmp	r2, #48	; 0x30
 80206ea:	d038      	beq.n	802075e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80206ec:	d808      	bhi.n	8020700 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 80206ee:	2a2e      	cmp	r2, #46	; 0x2e
 80206f0:	684b      	ldr	r3, [r1, #4]
 80206f2:	d029      	beq.n	8020748 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 80206f4:	d90b      	bls.n	802070e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80206f6:	781b      	ldrb	r3, [r3, #0]
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	d1ec      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80206fc:	6a00      	ldr	r0, [r0, #32]
 80206fe:	e014      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020700:	2a32      	cmp	r2, #50	; 0x32
 8020702:	d02c      	beq.n	802075e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8020704:	d301      	bcc.n	802070a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8020706:	2a33      	cmp	r2, #51	; 0x33
 8020708:	d1e5      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802070a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 802070c:	e00d      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802070e:	781b      	ldrb	r3, [r3, #0]
 8020710:	2b01      	cmp	r3, #1
 8020712:	d009      	beq.n	8020728 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8020714:	d3f2      	bcc.n	80206fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8020716:	2b02      	cmp	r3, #2
 8020718:	d1dd      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802071a:	4b39      	ldr	r3, [pc, #228]	; (8020800 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802071c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8020720:	4a38      	ldr	r2, [pc, #224]	; (8020804 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020722:	4839      	ldr	r0, [pc, #228]	; (8020808 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8020724:	f007 ff3e 	bl	80285a4 <__assert_func>
 8020728:	6900      	ldr	r0, [r0, #16]
 802072a:	bd08      	pop	{r3, pc}
 802072c:	684b      	ldr	r3, [r1, #4]
 802072e:	781b      	ldrb	r3, [r3, #0]
 8020730:	2b01      	cmp	r3, #1
 8020732:	d007      	beq.n	8020744 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8020734:	d30b      	bcc.n	802074e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8020736:	2b02      	cmp	r3, #2
 8020738:	d1cd      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802073a:	4b31      	ldr	r3, [pc, #196]	; (8020800 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802073c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8020740:	4a30      	ldr	r2, [pc, #192]	; (8020804 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020742:	e7ee      	b.n	8020722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8020744:	6880      	ldr	r0, [r0, #8]
 8020746:	e7f0      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020748:	781b      	ldrb	r3, [r3, #0]
 802074a:	2b00      	cmp	r3, #0
 802074c:	d1c3      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802074e:	6980      	ldr	r0, [r0, #24]
 8020750:	e7eb      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020752:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8020754:	e7e9      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020756:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8020758:	e7e7      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802075a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 802075c:	e7e5      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802075e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8020760:	e7e3      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020762:	2a2c      	cmp	r2, #44	; 0x2c
 8020764:	d030      	beq.n	80207c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8020766:	d80f      	bhi.n	8020788 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8020768:	2a08      	cmp	r2, #8
 802076a:	d044      	beq.n	80207f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 802076c:	d805      	bhi.n	802077a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 802076e:	2a04      	cmp	r2, #4
 8020770:	d03f      	beq.n	80207f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8020772:	2a05      	cmp	r2, #5
 8020774:	d1af      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020776:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8020778:	e7d7      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802077a:	2a0a      	cmp	r2, #10
 802077c:	d03b      	beq.n	80207f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 802077e:	d301      	bcc.n	8020784 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8020780:	2a0b      	cmp	r2, #11
 8020782:	d1a8      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020784:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8020786:	e7d0      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020788:	2a30      	cmp	r2, #48	; 0x30
 802078a:	d036      	beq.n	80207fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 802078c:	d808      	bhi.n	80207a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 802078e:	2a2e      	cmp	r2, #46	; 0x2e
 8020790:	684b      	ldr	r3, [r1, #4]
 8020792:	d028      	beq.n	80207e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8020794:	d90b      	bls.n	80207ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8020796:	781b      	ldrb	r3, [r3, #0]
 8020798:	2b00      	cmp	r3, #0
 802079a:	d19c      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802079c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802079e:	e7c4      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207a0:	2a32      	cmp	r2, #50	; 0x32
 80207a2:	d02a      	beq.n	80207fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80207a4:	d301      	bcc.n	80207aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80207a6:	2a33      	cmp	r2, #51	; 0x33
 80207a8:	d195      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80207aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80207ac:	e7bd      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207ae:	781b      	ldrb	r3, [r3, #0]
 80207b0:	2b01      	cmp	r3, #1
 80207b2:	d007      	beq.n	80207c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 80207b4:	d3f2      	bcc.n	802079c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80207b6:	2b02      	cmp	r3, #2
 80207b8:	d18d      	bne.n	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80207ba:	4b11      	ldr	r3, [pc, #68]	; (8020800 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80207bc:	f240 31e1 	movw	r1, #993	; 0x3e1
 80207c0:	4a10      	ldr	r2, [pc, #64]	; (8020804 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80207c2:	e7ae      	b.n	8020722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80207c4:	6940      	ldr	r0, [r0, #20]
 80207c6:	e7b0      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207c8:	684b      	ldr	r3, [r1, #4]
 80207ca:	781b      	ldrb	r3, [r3, #0]
 80207cc:	2b01      	cmp	r3, #1
 80207ce:	d008      	beq.n	80207e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80207d0:	d30d      	bcc.n	80207ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80207d2:	2b02      	cmp	r3, #2
 80207d4:	f47f af7f 	bne.w	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80207d8:	4b09      	ldr	r3, [pc, #36]	; (8020800 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80207da:	f240 31ed 	movw	r1, #1005	; 0x3ed
 80207de:	4a09      	ldr	r2, [pc, #36]	; (8020804 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80207e0:	e79f      	b.n	8020722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80207e2:	68c0      	ldr	r0, [r0, #12]
 80207e4:	e7a1      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207e6:	781b      	ldrb	r3, [r3, #0]
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	f47f af74 	bne.w	80206d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80207ee:	69c0      	ldr	r0, [r0, #28]
 80207f0:	e79b      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207f2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80207f4:	e799      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80207f8:	e797      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80207fc:	e795      	b.n	802072a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80207fe:	bf00      	nop
 8020800:	0802d693 	.word	0x0802d693
 8020804:	0802de47 	.word	0x0802de47
 8020808:	0802d6df 	.word	0x0802d6df

0802080c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 802080c:	b508      	push	{r3, lr}
 802080e:	4b06      	ldr	r3, [pc, #24]	; (8020828 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8020810:	8818      	ldrh	r0, [r3, #0]
 8020812:	b928      	cbnz	r0, 8020820 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8020814:	4b05      	ldr	r3, [pc, #20]	; (802082c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8020816:	21d7      	movs	r1, #215	; 0xd7
 8020818:	4a05      	ldr	r2, [pc, #20]	; (8020830 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 802081a:	4806      	ldr	r0, [pc, #24]	; (8020834 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 802081c:	f007 fec2 	bl	80285a4 <__assert_func>
 8020820:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020824:	b280      	uxth	r0, r0
 8020826:	bd08      	pop	{r3, pc}
 8020828:	2000bee8 	.word	0x2000bee8
 802082c:	0802d92e 	.word	0x0802d92e
 8020830:	0802de0c 	.word	0x0802de0c
 8020834:	0802d970 	.word	0x0802d970

08020838 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083c:	4616      	mov	r6, r2
 802083e:	b087      	sub	sp, #28
 8020840:	461f      	mov	r7, r3
 8020842:	b33b      	cbz	r3, 8020894 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020844:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020848:	b323      	cbz	r3, 8020894 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802084a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 802084e:	b30b      	cbz	r3, 8020894 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020850:	6808      	ldr	r0, [r1, #0]
 8020852:	ab04      	add	r3, sp, #16
 8020854:	6849      	ldr	r1, [r1, #4]
 8020856:	4c5a      	ldr	r4, [pc, #360]	; (80209c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8020858:	c303      	stmia	r3!, {r0, r1}
 802085a:	a804      	add	r0, sp, #16
 802085c:	f7fb fd34 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020860:	6820      	ldr	r0, [r4, #0]
 8020862:	6803      	ldr	r3, [r0, #0]
 8020864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020866:	4798      	blx	r3
 8020868:	2fff      	cmp	r7, #255	; 0xff
 802086a:	4623      	mov	r3, r4
 802086c:	d015      	beq.n	802089a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802086e:	f010 0f08 	tst.w	r0, #8
 8020872:	d015      	beq.n	80208a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8020874:	6818      	ldr	r0, [r3, #0]
 8020876:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802087a:	6801      	ldr	r1, [r0, #0]
 802087c:	9401      	str	r4, [sp, #4]
 802087e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020882:	9702      	str	r7, [sp, #8]
 8020884:	9400      	str	r4, [sp, #0]
 8020886:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802088a:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 802088c:	4631      	mov	r1, r6
 802088e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020892:	47a0      	blx	r4
 8020894:	b007      	add	sp, #28
 8020896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802089a:	f010 0f02 	tst.w	r0, #2
 802089e:	e7e8      	b.n	8020872 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 80208a0:	6818      	ldr	r0, [r3, #0]
 80208a2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80208a6:	6803      	ldr	r3, [r0, #0]
 80208a8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80208ac:	6a1b      	ldr	r3, [r3, #32]
 80208ae:	4798      	blx	r3
 80208b0:	4944      	ldr	r1, [pc, #272]	; (80209c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 80208b2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80208b6:	2fff      	cmp	r7, #255	; 0xff
 80208b8:	f8b1 c000 	ldrh.w	ip, [r1]
 80208bc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80208c0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80208c4:	4688      	mov	r8, r1
 80208c6:	fb0c 2303 	mla	r3, ip, r3, r2
 80208ca:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80208ce:	b2f2      	uxtb	r2, r6
 80208d0:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 80208d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208d8:	4418      	add	r0, r3
 80208da:	d112      	bne.n	8020902 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 80208dc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80208e0:	2100      	movs	r1, #0
 80208e2:	42a9      	cmp	r1, r5
 80208e4:	da66      	bge.n	80209b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 80208e6:	4603      	mov	r3, r0
 80208e8:	2700      	movs	r7, #0
 80208ea:	42a7      	cmp	r7, r4
 80208ec:	f103 0303 	add.w	r3, r3, #3
 80208f0:	da57      	bge.n	80209a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 80208f2:	f803 2c03 	strb.w	r2, [r3, #-3]
 80208f6:	3701      	adds	r7, #1
 80208f8:	f803 ec02 	strb.w	lr, [r3, #-2]
 80208fc:	f803 cc01 	strb.w	ip, [r3, #-1]
 8020900:	e7f3      	b.n	80208ea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8020902:	b2bb      	uxth	r3, r7
 8020904:	f04f 0800 	mov.w	r8, #0
 8020908:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802090c:	fb0c fc03 	mul.w	ip, ip, r3
 8020910:	fb0e fe03 	mul.w	lr, lr, r3
 8020914:	435a      	muls	r2, r3
 8020916:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 802091a:	460f      	mov	r7, r1
 802091c:	b29b      	uxth	r3, r3
 802091e:	45a8      	cmp	r8, r5
 8020920:	da48      	bge.n	80209b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8020922:	4601      	mov	r1, r0
 8020924:	f04f 0a00 	mov.w	sl, #0
 8020928:	45a2      	cmp	sl, r4
 802092a:	f101 0103 	add.w	r1, r1, #3
 802092e:	da2f      	bge.n	8020990 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 8020930:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8020934:	f10a 0a01 	add.w	sl, sl, #1
 8020938:	fb19 f903 	smulbb	r9, r9, r3
 802093c:	4491      	add	r9, r2
 802093e:	fa1f f989 	uxth.w	r9, r9
 8020942:	f109 0b01 	add.w	fp, r9, #1
 8020946:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802094a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802094e:	f801 9c03 	strb.w	r9, [r1, #-3]
 8020952:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8020956:	fb19 f903 	smulbb	r9, r9, r3
 802095a:	44f1      	add	r9, lr
 802095c:	fa1f f989 	uxth.w	r9, r9
 8020960:	f109 0b01 	add.w	fp, r9, #1
 8020964:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020968:	ea4f 2929 	mov.w	r9, r9, asr #8
 802096c:	f801 9c02 	strb.w	r9, [r1, #-2]
 8020970:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8020974:	fb19 f903 	smulbb	r9, r9, r3
 8020978:	44e1      	add	r9, ip
 802097a:	fa1f f989 	uxth.w	r9, r9
 802097e:	f109 0b01 	add.w	fp, r9, #1
 8020982:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020986:	ea4f 2929 	mov.w	r9, r9, asr #8
 802098a:	f801 9c01 	strb.w	r9, [r1, #-1]
 802098e:	e7cb      	b.n	8020928 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 8020990:	8839      	ldrh	r1, [r7, #0]
 8020992:	f108 0801 	add.w	r8, r8, #1
 8020996:	1b09      	subs	r1, r1, r4
 8020998:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802099c:	4431      	add	r1, r6
 802099e:	4408      	add	r0, r1
 80209a0:	e7bd      	b.n	802091e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 80209a2:	f8b8 3000 	ldrh.w	r3, [r8]
 80209a6:	3101      	adds	r1, #1
 80209a8:	1b1b      	subs	r3, r3, r4
 80209aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209ae:	4433      	add	r3, r6
 80209b0:	4418      	add	r0, r3
 80209b2:	e796      	b.n	80208e2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 80209b4:	4b02      	ldr	r3, [pc, #8]	; (80209c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 80209b6:	6818      	ldr	r0, [r3, #0]
 80209b8:	6803      	ldr	r3, [r0, #0]
 80209ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209bc:	4798      	blx	r3
 80209be:	e769      	b.n	8020894 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80209c0:	2000bef0 	.word	0x2000bef0
 80209c4:	2000bee8 	.word	0x2000bee8

080209c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80209c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209cc:	b08d      	sub	sp, #52	; 0x34
 80209ce:	460c      	mov	r4, r1
 80209d0:	4617      	mov	r7, r2
 80209d2:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 80209d6:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 80209da:	2e00      	cmp	r6, #0
 80209dc:	d04a      	beq.n	8020a74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80209de:	6810      	ldr	r0, [r2, #0]
 80209e0:	ad08      	add	r5, sp, #32
 80209e2:	6851      	ldr	r1, [r2, #4]
 80209e4:	c503      	stmia	r5!, {r0, r1}
 80209e6:	6818      	ldr	r0, [r3, #0]
 80209e8:	ad0a      	add	r5, sp, #40	; 0x28
 80209ea:	6859      	ldr	r1, [r3, #4]
 80209ec:	c503      	stmia	r5!, {r0, r1}
 80209ee:	a808      	add	r0, sp, #32
 80209f0:	f7fb fc6a 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80209f4:	4639      	mov	r1, r7
 80209f6:	a80a      	add	r0, sp, #40	; 0x28
 80209f8:	4f59      	ldr	r7, [pc, #356]	; (8020b60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 80209fa:	f7fb fc4d 	bl	801c298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80209fe:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020a02:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020a06:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020a0a:	6838      	ldr	r0, [r7, #0]
 8020a0c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020a10:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8020a14:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8020a18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020a1c:	440c      	add	r4, r1
 8020a1e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020a22:	440a      	add	r2, r1
 8020a24:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020a28:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020a2c:	4413      	add	r3, r2
 8020a2e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020a32:	6803      	ldr	r3, [r0, #0]
 8020a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a36:	4798      	blx	r3
 8020a38:	2eff      	cmp	r6, #255	; 0xff
 8020a3a:	f000 8089 	beq.w	8020b50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 8020a3e:	0743      	lsls	r3, r0, #29
 8020a40:	d405      	bmi.n	8020a4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8020a42:	f1b9 0f00 	cmp.w	r9, #0
 8020a46:	d018      	beq.n	8020a7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8020a48:	f010 0f10 	tst.w	r0, #16
 8020a4c:	d015      	beq.n	8020a7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8020a4e:	6838      	ldr	r0, [r7, #0]
 8020a50:	b2ad      	uxth	r5, r5
 8020a52:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020a56:	6801      	ldr	r1, [r0, #0]
 8020a58:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020a5c:	9500      	str	r5, [sp, #0]
 8020a5e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 8020a62:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8020a66:	9602      	str	r6, [sp, #8]
 8020a68:	fa1f f688 	uxth.w	r6, r8
 8020a6c:	9601      	str	r6, [sp, #4]
 8020a6e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8020a70:	4621      	mov	r1, r4
 8020a72:	47a8      	blx	r5
 8020a74:	b00d      	add	sp, #52	; 0x34
 8020a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a7a:	6838      	ldr	r0, [r7, #0]
 8020a7c:	6803      	ldr	r3, [r0, #0]
 8020a7e:	6a1b      	ldr	r3, [r3, #32]
 8020a80:	4798      	blx	r3
 8020a82:	4a38      	ldr	r2, [pc, #224]	; (8020b64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8020a84:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020a88:	2eff      	cmp	r6, #255	; 0xff
 8020a8a:	8813      	ldrh	r3, [r2, #0]
 8020a8c:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 8020a90:	fb0c 1303 	mla	r3, ip, r3, r1
 8020a94:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8020a98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a9c:	4418      	add	r0, r3
 8020a9e:	d032      	beq.n	8020b06 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8020aa0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 8020aa4:	f04f 0c00 	mov.w	ip, #0
 8020aa8:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 8020aac:	9306      	str	r3, [sp, #24]
 8020aae:	45c4      	cmp	ip, r8
 8020ab0:	da49      	bge.n	8020b46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8020ab2:	4686      	mov	lr, r0
 8020ab4:	46a1      	mov	r9, r4
 8020ab6:	eba9 0304 	sub.w	r3, r9, r4
 8020aba:	428b      	cmp	r3, r1
 8020abc:	da13      	bge.n	8020ae6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8020abe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8020ac2:	f89e b000 	ldrb.w	fp, [lr]
 8020ac6:	9307      	str	r3, [sp, #28]
 8020ac8:	9b06      	ldr	r3, [sp, #24]
 8020aca:	fb1b fb03 	smulbb	fp, fp, r3
 8020ace:	9b07      	ldr	r3, [sp, #28]
 8020ad0:	fb03 b306 	mla	r3, r3, r6, fp
 8020ad4:	b29b      	uxth	r3, r3
 8020ad6:	f103 0b01 	add.w	fp, r3, #1
 8020ada:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8020ade:	121b      	asrs	r3, r3, #8
 8020ae0:	f80e 3b01 	strb.w	r3, [lr], #1
 8020ae4:	e7e7      	b.n	8020ab6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 8020ae6:	8813      	ldrh	r3, [r2, #0]
 8020ae8:	f10c 0c01 	add.w	ip, ip, #1
 8020aec:	1b5b      	subs	r3, r3, r5
 8020aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020af2:	4453      	add	r3, sl
 8020af4:	4418      	add	r0, r3
 8020af6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020afa:	1b5b      	subs	r3, r3, r5
 8020afc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b00:	4453      	add	r3, sl
 8020b02:	441c      	add	r4, r3
 8020b04:	e7d3      	b.n	8020aae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 8020b06:	2600      	movs	r6, #0
 8020b08:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8020b0c:	4546      	cmp	r6, r8
 8020b0e:	da1a      	bge.n	8020b46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8020b10:	f100 3eff 	add.w	lr, r0, #4294967295
 8020b14:	4623      	mov	r3, r4
 8020b16:	eba3 0904 	sub.w	r9, r3, r4
 8020b1a:	4589      	cmp	r9, r1
 8020b1c:	da04      	bge.n	8020b28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8020b1e:	f813 9b01 	ldrb.w	r9, [r3], #1
 8020b22:	f80e 9f01 	strb.w	r9, [lr, #1]!
 8020b26:	e7f6      	b.n	8020b16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 8020b28:	8813      	ldrh	r3, [r2, #0]
 8020b2a:	3601      	adds	r6, #1
 8020b2c:	1b5b      	subs	r3, r3, r5
 8020b2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b32:	4463      	add	r3, ip
 8020b34:	4418      	add	r0, r3
 8020b36:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020b3a:	1b5b      	subs	r3, r3, r5
 8020b3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b40:	4463      	add	r3, ip
 8020b42:	441c      	add	r4, r3
 8020b44:	e7e2      	b.n	8020b0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8020b46:	6838      	ldr	r0, [r7, #0]
 8020b48:	6803      	ldr	r3, [r0, #0]
 8020b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b4c:	4798      	blx	r3
 8020b4e:	e791      	b.n	8020a74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020b50:	f1b9 0f00 	cmp.w	r9, #0
 8020b54:	f47f af78 	bne.w	8020a48 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 8020b58:	f010 0f01 	tst.w	r0, #1
 8020b5c:	e776      	b.n	8020a4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 8020b5e:	bf00      	nop
 8020b60:	2000bef0 	.word	0x2000bef0
 8020b64:	2000bee8 	.word	0x2000bee8

08020b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020b68:	b510      	push	{r4, lr}
 8020b6a:	4604      	mov	r4, r0
 8020b6c:	2104      	movs	r1, #4
 8020b6e:	f007 fceb 	bl	8028548 <_ZdlPvj>
 8020b72:	4620      	mov	r0, r4
 8020b74:	bd10      	pop	{r4, pc}

08020b76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020b76:	b510      	push	{r4, lr}
 8020b78:	4604      	mov	r4, r0
 8020b7a:	2104      	movs	r1, #4
 8020b7c:	f007 fce4 	bl	8028548 <_ZdlPvj>
 8020b80:	4620      	mov	r0, r4
 8020b82:	bd10      	pop	{r4, pc}

08020b84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020b84:	b510      	push	{r4, lr}
 8020b86:	4604      	mov	r4, r0
 8020b88:	2104      	movs	r1, #4
 8020b8a:	f007 fcdd 	bl	8028548 <_ZdlPvj>
 8020b8e:	4620      	mov	r0, r4
 8020b90:	bd10      	pop	{r4, pc}

08020b92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020b92:	b510      	push	{r4, lr}
 8020b94:	4604      	mov	r4, r0
 8020b96:	2104      	movs	r1, #4
 8020b98:	f007 fcd6 	bl	8028548 <_ZdlPvj>
 8020b9c:	4620      	mov	r0, r4
 8020b9e:	bd10      	pop	{r4, pc}

08020ba0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020ba0:	b510      	push	{r4, lr}
 8020ba2:	4604      	mov	r4, r0
 8020ba4:	2104      	movs	r1, #4
 8020ba6:	f007 fccf 	bl	8028548 <_ZdlPvj>
 8020baa:	4620      	mov	r0, r4
 8020bac:	bd10      	pop	{r4, pc}

08020bae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020bae:	b510      	push	{r4, lr}
 8020bb0:	4604      	mov	r4, r0
 8020bb2:	2104      	movs	r1, #4
 8020bb4:	f007 fcc8 	bl	8028548 <_ZdlPvj>
 8020bb8:	4620      	mov	r0, r4
 8020bba:	bd10      	pop	{r4, pc}

08020bbc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020bbc:	b510      	push	{r4, lr}
 8020bbe:	4604      	mov	r4, r0
 8020bc0:	2104      	movs	r1, #4
 8020bc2:	f007 fcc1 	bl	8028548 <_ZdlPvj>
 8020bc6:	4620      	mov	r0, r4
 8020bc8:	bd10      	pop	{r4, pc}

08020bca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020bca:	b510      	push	{r4, lr}
 8020bcc:	4604      	mov	r4, r0
 8020bce:	2104      	movs	r1, #4
 8020bd0:	f007 fcba 	bl	8028548 <_ZdlPvj>
 8020bd4:	4620      	mov	r0, r4
 8020bd6:	bd10      	pop	{r4, pc}

08020bd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020bd8:	b510      	push	{r4, lr}
 8020bda:	4604      	mov	r4, r0
 8020bdc:	2104      	movs	r1, #4
 8020bde:	f007 fcb3 	bl	8028548 <_ZdlPvj>
 8020be2:	4620      	mov	r0, r4
 8020be4:	bd10      	pop	{r4, pc}

08020be6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020be6:	b510      	push	{r4, lr}
 8020be8:	4604      	mov	r4, r0
 8020bea:	2104      	movs	r1, #4
 8020bec:	f007 fcac 	bl	8028548 <_ZdlPvj>
 8020bf0:	4620      	mov	r0, r4
 8020bf2:	bd10      	pop	{r4, pc}

08020bf4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020bf4:	b510      	push	{r4, lr}
 8020bf6:	4604      	mov	r4, r0
 8020bf8:	2104      	movs	r1, #4
 8020bfa:	f007 fca5 	bl	8028548 <_ZdlPvj>
 8020bfe:	4620      	mov	r0, r4
 8020c00:	bd10      	pop	{r4, pc}

08020c02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020c02:	b510      	push	{r4, lr}
 8020c04:	4604      	mov	r4, r0
 8020c06:	2104      	movs	r1, #4
 8020c08:	f007 fc9e 	bl	8028548 <_ZdlPvj>
 8020c0c:	4620      	mov	r0, r4
 8020c0e:	bd10      	pop	{r4, pc}

08020c10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020c10:	b510      	push	{r4, lr}
 8020c12:	4604      	mov	r4, r0
 8020c14:	2104      	movs	r1, #4
 8020c16:	f007 fc97 	bl	8028548 <_ZdlPvj>
 8020c1a:	4620      	mov	r0, r4
 8020c1c:	bd10      	pop	{r4, pc}

08020c1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020c1e:	b510      	push	{r4, lr}
 8020c20:	4604      	mov	r4, r0
 8020c22:	2104      	movs	r1, #4
 8020c24:	f007 fc90 	bl	8028548 <_ZdlPvj>
 8020c28:	4620      	mov	r0, r4
 8020c2a:	bd10      	pop	{r4, pc}

08020c2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020c2c:	b510      	push	{r4, lr}
 8020c2e:	4604      	mov	r4, r0
 8020c30:	2104      	movs	r1, #4
 8020c32:	f007 fc89 	bl	8028548 <_ZdlPvj>
 8020c36:	4620      	mov	r0, r4
 8020c38:	bd10      	pop	{r4, pc}

08020c3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020c3a:	b510      	push	{r4, lr}
 8020c3c:	4604      	mov	r4, r0
 8020c3e:	2104      	movs	r1, #4
 8020c40:	f007 fc82 	bl	8028548 <_ZdlPvj>
 8020c44:	4620      	mov	r0, r4
 8020c46:	bd10      	pop	{r4, pc}

08020c48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020c48:	b510      	push	{r4, lr}
 8020c4a:	4604      	mov	r4, r0
 8020c4c:	2104      	movs	r1, #4
 8020c4e:	f007 fc7b 	bl	8028548 <_ZdlPvj>
 8020c52:	4620      	mov	r0, r4
 8020c54:	bd10      	pop	{r4, pc}

08020c56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020c56:	b510      	push	{r4, lr}
 8020c58:	4604      	mov	r4, r0
 8020c5a:	2104      	movs	r1, #4
 8020c5c:	f007 fc74 	bl	8028548 <_ZdlPvj>
 8020c60:	4620      	mov	r0, r4
 8020c62:	bd10      	pop	{r4, pc}

08020c64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020c64:	b510      	push	{r4, lr}
 8020c66:	4604      	mov	r4, r0
 8020c68:	2104      	movs	r1, #4
 8020c6a:	f007 fc6d 	bl	8028548 <_ZdlPvj>
 8020c6e:	4620      	mov	r0, r4
 8020c70:	bd10      	pop	{r4, pc}

08020c72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020c72:	b510      	push	{r4, lr}
 8020c74:	4604      	mov	r4, r0
 8020c76:	2104      	movs	r1, #4
 8020c78:	f007 fc66 	bl	8028548 <_ZdlPvj>
 8020c7c:	4620      	mov	r0, r4
 8020c7e:	bd10      	pop	{r4, pc}

08020c80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c84:	4d9e      	ldr	r5, [pc, #632]	; (8020f00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020c86:	4690      	mov	r8, r2
 8020c88:	b08f      	sub	sp, #60	; 0x3c
 8020c8a:	4604      	mov	r4, r0
 8020c8c:	682a      	ldr	r2, [r5, #0]
 8020c8e:	4689      	mov	r9, r1
 8020c90:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020c94:	2a02      	cmp	r2, #2
 8020c96:	d106      	bne.n	8020ca6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020c98:	4b9a      	ldr	r3, [pc, #616]	; (8020f04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020c9a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8020c9e:	4a9a      	ldr	r2, [pc, #616]	; (8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020ca0:	489a      	ldr	r0, [pc, #616]	; (8020f0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8020ca2:	f007 fc7f 	bl	80285a4 <__assert_func>
 8020ca6:	ae0e      	add	r6, sp, #56	; 0x38
 8020ca8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8020cac:	4630      	mov	r0, r6
 8020cae:	f7fe f8b3 	bl	801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020cb2:	6823      	ldr	r3, [r4, #0]
 8020cb4:	4607      	mov	r7, r0
 8020cb6:	4620      	mov	r0, r4
 8020cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020cba:	4798      	blx	r3
 8020cbc:	4287      	cmp	r7, r0
 8020cbe:	d004      	beq.n	8020cca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020cc0:	4b93      	ldr	r3, [pc, #588]	; (8020f10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8020cc2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8020cc6:	4a90      	ldr	r2, [pc, #576]	; (8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020cc8:	e7ea      	b.n	8020ca0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020cca:	4630      	mov	r0, r6
 8020ccc:	f7fe f820 	bl	801ed10 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020cd0:	4607      	mov	r7, r0
 8020cd2:	b920      	cbnz	r0, 8020cde <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020cd4:	4b8f      	ldr	r3, [pc, #572]	; (8020f14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8020cd6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8020cda:	4a8b      	ldr	r2, [pc, #556]	; (8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020cdc:	e7e0      	b.n	8020ca0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020cde:	f8d8 0000 	ldr.w	r0, [r8]
 8020ce2:	ab06      	add	r3, sp, #24
 8020ce4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020ce8:	f9b8 a000 	ldrsh.w	sl, [r8]
 8020cec:	c303      	stmia	r3!, {r0, r1}
 8020cee:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020cf2:	ab08      	add	r3, sp, #32
 8020cf4:	f8d9 0000 	ldr.w	r0, [r9]
 8020cf8:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8020cfc:	c303      	stmia	r3!, {r0, r1}
 8020cfe:	4630      	mov	r0, r6
 8020d00:	f7fd fefe 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020d04:	4680      	mov	r8, r0
 8020d06:	4630      	mov	r0, r6
 8020d08:	4e83      	ldr	r6, [pc, #524]	; (8020f18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8020d0a:	f7fd ff33 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020d0e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8020d12:	f10d 0920 	add.w	r9, sp, #32
 8020d16:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8020d1a:	a806      	add	r0, sp, #24
 8020d1c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8020d20:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8020d24:	f7fb fad0 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d28:	4648      	mov	r0, r9
 8020d2a:	f7fb facd 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d2e:	a80a      	add	r0, sp, #40	; 0x28
 8020d30:	f7fb faca 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d34:	4b79      	ldr	r3, [pc, #484]	; (8020f1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8020d36:	2100      	movs	r1, #0
 8020d38:	f9b6 2000 	ldrsh.w	r2, [r6]
 8020d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d40:	4648      	mov	r0, r9
 8020d42:	910c      	str	r1, [sp, #48]	; 0x30
 8020d44:	a90c      	add	r1, sp, #48	; 0x30
 8020d46:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8020d4a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020d4e:	f7f8 f961 	bl	8019014 <_ZN8touchgfx4RectaNERKS0_>
 8020d52:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8020d56:	9602      	str	r6, [sp, #8]
 8020d58:	f1bc 0f00 	cmp.w	ip, #0
 8020d5c:	f000 80a4 	beq.w	8020ea8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020d60:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8020d64:	2e00      	cmp	r6, #0
 8020d66:	f000 809f 	beq.w	8020ea8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020d6a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8020d6e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020d72:	4288      	cmp	r0, r1
 8020d74:	db36      	blt.n	8020de4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020d76:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8020d7a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020d7e:	429a      	cmp	r2, r3
 8020d80:	db30      	blt.n	8020de4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020d82:	4460      	add	r0, ip
 8020d84:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8020d88:	4461      	add	r1, ip
 8020d8a:	b200      	sxth	r0, r0
 8020d8c:	b209      	sxth	r1, r1
 8020d8e:	4288      	cmp	r0, r1
 8020d90:	dc28      	bgt.n	8020de4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020d92:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8020d96:	4432      	add	r2, r6
 8020d98:	440b      	add	r3, r1
 8020d9a:	b212      	sxth	r2, r2
 8020d9c:	b21b      	sxth	r3, r3
 8020d9e:	429a      	cmp	r2, r3
 8020da0:	dc20      	bgt.n	8020de4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020da2:	6823      	ldr	r3, [r4, #0]
 8020da4:	4620      	mov	r0, r4
 8020da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020da8:	4798      	blx	r3
 8020daa:	4682      	mov	sl, r0
 8020dac:	6828      	ldr	r0, [r5, #0]
 8020dae:	6803      	ldr	r3, [r0, #0]
 8020db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020db2:	4798      	blx	r3
 8020db4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8020db8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020dbc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020dc0:	9303      	str	r3, [sp, #12]
 8020dc2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020dc6:	1a9b      	subs	r3, r3, r2
 8020dc8:	b29b      	uxth	r3, r3
 8020dca:	b21c      	sxth	r4, r3
 8020dcc:	2c00      	cmp	r4, #0
 8020dce:	dc0e      	bgt.n	8020dee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8020dd0:	b134      	cbz	r4, 8020de0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8020dd2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020dd6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8020dda:	4413      	add	r3, r2
 8020ddc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8020de0:	463c      	mov	r4, r7
 8020de2:	e00b      	b.n	8020dfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8020de4:	4b4e      	ldr	r3, [pc, #312]	; (8020f20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8020de6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020dea:	4a47      	ldr	r2, [pc, #284]	; (8020f08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020dec:	e758      	b.n	8020ca0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020dee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020df2:	ebab 0303 	sub.w	r3, fp, r3
 8020df6:	443c      	add	r4, r7
 8020df8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020dfc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020e00:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020e04:	1a9b      	subs	r3, r3, r2
 8020e06:	b29b      	uxth	r3, r3
 8020e08:	b219      	sxth	r1, r3
 8020e0a:	2900      	cmp	r1, #0
 8020e0c:	dd50      	ble.n	8020eb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 8020e0e:	9a03      	ldr	r2, [sp, #12]
 8020e10:	fb02 4401 	mla	r4, r2, r1, r4
 8020e14:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8020e18:	1ad3      	subs	r3, r2, r3
 8020e1a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020e1e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020e22:	f1bc 0f00 	cmp.w	ip, #0
 8020e26:	dd3f      	ble.n	8020ea8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020e28:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020e2c:	2e00      	cmp	r6, #0
 8020e2e:	dd3b      	ble.n	8020ea8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020e30:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8020e34:	2203      	movs	r2, #3
 8020e36:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8020e3a:	fb0a f801 	mul.w	r8, sl, r1
 8020e3e:	fb13 8802 	smlabb	r8, r3, r2, r8
 8020e42:	9a02      	ldr	r2, [sp, #8]
 8020e44:	4480      	add	r8, r0
 8020e46:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8020e4a:	8812      	ldrh	r2, [r2, #0]
 8020e4c:	4584      	cmp	ip, r0
 8020e4e:	eba2 0303 	sub.w	r3, r2, r3
 8020e52:	bfa8      	it	ge
 8020e54:	4684      	movge	ip, r0
 8020e56:	459c      	cmp	ip, r3
 8020e58:	bfa8      	it	ge
 8020e5a:	469c      	movge	ip, r3
 8020e5c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8020e60:	429e      	cmp	r6, r3
 8020e62:	bfa8      	it	ge
 8020e64:	461e      	movge	r6, r3
 8020e66:	4b2d      	ldr	r3, [pc, #180]	; (8020f1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8020e68:	881b      	ldrh	r3, [r3, #0]
 8020e6a:	1a59      	subs	r1, r3, r1
 8020e6c:	4633      	mov	r3, r6
 8020e6e:	428e      	cmp	r6, r1
 8020e70:	bfa8      	it	ge
 8020e72:	460b      	movge	r3, r1
 8020e74:	4562      	cmp	r2, ip
 8020e76:	9302      	str	r3, [sp, #8]
 8020e78:	d12d      	bne.n	8020ed6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020e7a:	455a      	cmp	r2, fp
 8020e7c:	d12b      	bne.n	8020ed6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020e7e:	6828      	ldr	r0, [r5, #0]
 8020e80:	6803      	ldr	r3, [r0, #0]
 8020e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e84:	4798      	blx	r3
 8020e86:	07c3      	lsls	r3, r0, #31
 8020e88:	d51b      	bpl.n	8020ec2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 8020e8a:	6828      	ldr	r0, [r5, #0]
 8020e8c:	9b02      	ldr	r3, [sp, #8]
 8020e8e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8020e92:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8020e96:	6803      	ldr	r3, [r0, #0]
 8020e98:	f8cd b000 	str.w	fp, [sp]
 8020e9c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8020e9e:	4623      	mov	r3, r4
 8020ea0:	e899 0006 	ldmia.w	r9, {r1, r2}
 8020ea4:	47a8      	blx	r5
 8020ea6:	4607      	mov	r7, r0
 8020ea8:	4638      	mov	r0, r7
 8020eaa:	b00f      	add	sp, #60	; 0x3c
 8020eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eb0:	bf1f      	itttt	ne
 8020eb2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8020eb6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8020eba:	189b      	addne	r3, r3, r2
 8020ebc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020ec0:	e7ad      	b.n	8020e1e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8020ec2:	6828      	ldr	r0, [r5, #0]
 8020ec4:	4642      	mov	r2, r8
 8020ec6:	4621      	mov	r1, r4
 8020ec8:	6803      	ldr	r3, [r0, #0]
 8020eca:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8020ecc:	9b02      	ldr	r3, [sp, #8]
 8020ece:	fb03 f30a 	mul.w	r3, r3, sl
 8020ed2:	47a8      	blx	r5
 8020ed4:	e7e8      	b.n	8020ea8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020ed6:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 8020eda:	f04f 0900 	mov.w	r9, #0
 8020ede:	9b02      	ldr	r3, [sp, #8]
 8020ee0:	454b      	cmp	r3, r9
 8020ee2:	dde1      	ble.n	8020ea8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020ee4:	6828      	ldr	r0, [r5, #0]
 8020ee6:	4642      	mov	r2, r8
 8020ee8:	4621      	mov	r1, r4
 8020eea:	44d0      	add	r8, sl
 8020eec:	6803      	ldr	r3, [r0, #0]
 8020eee:	f109 0901 	add.w	r9, r9, #1
 8020ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020ef4:	461e      	mov	r6, r3
 8020ef6:	465b      	mov	r3, fp
 8020ef8:	47b0      	blx	r6
 8020efa:	9b03      	ldr	r3, [sp, #12]
 8020efc:	441c      	add	r4, r3
 8020efe:	e7ee      	b.n	8020ede <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8020f00:	2000bef0 	.word	0x2000bef0
 8020f04:	0802d711 	.word	0x0802d711
 8020f08:	0802def1 	.word	0x0802def1
 8020f0c:	0802d6df 	.word	0x0802d6df
 8020f10:	0802d7c5 	.word	0x0802d7c5
 8020f14:	0802d81a 	.word	0x0802d81a
 8020f18:	2000bee8 	.word	0x2000bee8
 8020f1c:	2000beea 	.word	0x2000beea
 8020f20:	0802d858 	.word	0x0802d858

08020f24 <_ZN8touchgfx8LCD24bppC1Ev>:
 8020f24:	4a0b      	ldr	r2, [pc, #44]	; (8020f54 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 8020f26:	6002      	str	r2, [r0, #0]
 8020f28:	2200      	movs	r2, #0
 8020f2a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020f2e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020f32:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020f36:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020f3a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020f3e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020f42:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020f46:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020f4a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020f4e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020f52:	4770      	bx	lr
 8020f54:	0802db3c 	.word	0x0802db3c

08020f58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f5c:	b093      	sub	sp, #76	; 0x4c
 8020f5e:	880c      	ldrh	r4, [r1, #0]
 8020f60:	4605      	mov	r5, r0
 8020f62:	460f      	mov	r7, r1
 8020f64:	4691      	mov	r9, r2
 8020f66:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8020f6a:	b12c      	cbz	r4, 8020f78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8020f6c:	4b71      	ldr	r3, [pc, #452]	; (8021134 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020f6e:	2167      	movs	r1, #103	; 0x67
 8020f70:	4a71      	ldr	r2, [pc, #452]	; (8021138 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8020f72:	4872      	ldr	r0, [pc, #456]	; (802113c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8020f74:	f007 fb16 	bl	80285a4 <__assert_func>
 8020f78:	6810      	ldr	r0, [r2, #0]
 8020f7a:	ae0e      	add	r6, sp, #56	; 0x38
 8020f7c:	6851      	ldr	r1, [r2, #4]
 8020f7e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8021144 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 8020f82:	c603      	stmia	r6!, {r0, r1}
 8020f84:	6818      	ldr	r0, [r3, #0]
 8020f86:	ae10      	add	r6, sp, #64	; 0x40
 8020f88:	6859      	ldr	r1, [r3, #4]
 8020f8a:	c603      	stmia	r6!, {r0, r1}
 8020f8c:	a80e      	add	r0, sp, #56	; 0x38
 8020f8e:	f7fb f99b 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f92:	4649      	mov	r1, r9
 8020f94:	a810      	add	r0, sp, #64	; 0x40
 8020f96:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8021140 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8020f9a:	f7fb f97d 	bl	801c298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f9e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020fa2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020fa6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020faa:	f8d9 0000 	ldr.w	r0, [r9]
 8020fae:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020fb2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8020fb6:	440d      	add	r5, r1
 8020fb8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020fbc:	440a      	add	r2, r1
 8020fbe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020fc2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020fc6:	4413      	add	r3, r2
 8020fc8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020fcc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8020fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8020fd2:	6803      	ldr	r3, [r0, #0]
 8020fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020fd8:	4798      	blx	r3
 8020fda:	2801      	cmp	r0, #1
 8020fdc:	d11e      	bne.n	802101c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8020fde:	220b      	movs	r2, #11
 8020fe0:	9008      	str	r0, [sp, #32]
 8020fe2:	b2b6      	uxth	r6, r6
 8020fe4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020fe8:	9207      	str	r2, [sp, #28]
 8020fea:	4629      	mov	r1, r5
 8020fec:	f8ba 2000 	ldrh.w	r2, [sl]
 8020ff0:	f8cd 8010 	str.w	r8, [sp, #16]
 8020ff4:	9601      	str	r6, [sp, #4]
 8020ff6:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020ffa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020ffe:	9203      	str	r2, [sp, #12]
 8021000:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8021004:	9202      	str	r2, [sp, #8]
 8021006:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 802100a:	9200      	str	r2, [sp, #0]
 802100c:	463a      	mov	r2, r7
 802100e:	f8d9 0000 	ldr.w	r0, [r9]
 8021012:	f7f8 fc4d 	bl	80198b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021016:	b013      	add	sp, #76	; 0x4c
 8021018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802101c:	f8d9 0000 	ldr.w	r0, [r9]
 8021020:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8021024:	6803      	ldr	r3, [r0, #0]
 8021026:	6a1b      	ldr	r3, [r3, #32]
 8021028:	4798      	blx	r3
 802102a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 802102e:	f8ba 3000 	ldrh.w	r3, [sl]
 8021032:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021036:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802103a:	fb01 2303 	mla	r3, r1, r3, r2
 802103e:	4621      	mov	r1, r4
 8021040:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021044:	4418      	add	r0, r3
 8021046:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 802104a:	930c      	str	r3, [sp, #48]	; 0x30
 802104c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802104e:	4299      	cmp	r1, r3
 8021050:	da6a      	bge.n	8021128 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8021052:	1cc2      	adds	r2, r0, #3
 8021054:	46aa      	mov	sl, r5
 8021056:	ebaa 0305 	sub.w	r3, sl, r5
 802105a:	429e      	cmp	r6, r3
 802105c:	dd55      	ble.n	802110a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 802105e:	2404      	movs	r4, #4
 8021060:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8021064:	fb14 4303 	smlabb	r3, r4, r3, r4
 8021068:	eb07 0e03 	add.w	lr, r7, r3
 802106c:	f89e 4003 	ldrb.w	r4, [lr, #3]
 8021070:	b184      	cbz	r4, 8021094 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8021072:	2cff      	cmp	r4, #255	; 0xff
 8021074:	f817 b003 	ldrb.w	fp, [r7, r3]
 8021078:	d10e      	bne.n	8021098 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 802107a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802107e:	d10b      	bne.n	8021098 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8021080:	f802 bc03 	strb.w	fp, [r2, #-3]
 8021084:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8021088:	f802 3c02 	strb.w	r3, [r2, #-2]
 802108c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8021090:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021094:	3203      	adds	r2, #3
 8021096:	e7de      	b.n	8021056 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8021098:	fb08 f404 	mul.w	r4, r8, r4
 802109c:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 80210a0:	1c63      	adds	r3, r4, #1
 80210a2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80210a6:	121b      	asrs	r3, r3, #8
 80210a8:	b29c      	uxth	r4, r3
 80210aa:	43db      	mvns	r3, r3
 80210ac:	fb1b fb04 	smulbb	fp, fp, r4
 80210b0:	b2db      	uxtb	r3, r3
 80210b2:	fb0c bc03 	mla	ip, ip, r3, fp
 80210b6:	fa1f fc8c 	uxth.w	ip, ip
 80210ba:	f10c 0b01 	add.w	fp, ip, #1
 80210be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80210c2:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 80210c6:	fb1b fb03 	smulbb	fp, fp, r3
 80210ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80210ce:	f802 cc03 	strb.w	ip, [r2, #-3]
 80210d2:	f89e c001 	ldrb.w	ip, [lr, #1]
 80210d6:	fb0c bc04 	mla	ip, ip, r4, fp
 80210da:	fa1f fc8c 	uxth.w	ip, ip
 80210de:	f10c 0b01 	add.w	fp, ip, #1
 80210e2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80210e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80210ea:	f802 cc02 	strb.w	ip, [r2, #-2]
 80210ee:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 80210f2:	f89e e002 	ldrb.w	lr, [lr, #2]
 80210f6:	fb1c f303 	smulbb	r3, ip, r3
 80210fa:	fb0e 3304 	mla	r3, lr, r4, r3
 80210fe:	b29b      	uxth	r3, r3
 8021100:	1c5c      	adds	r4, r3, #1
 8021102:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021106:	121b      	asrs	r3, r3, #8
 8021108:	e7c2      	b.n	8021090 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 802110a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802110c:	3101      	adds	r1, #1
 802110e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021110:	881b      	ldrh	r3, [r3, #0]
 8021112:	1b9b      	subs	r3, r3, r6
 8021114:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021118:	4413      	add	r3, r2
 802111a:	4418      	add	r0, r3
 802111c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8021120:	1b9b      	subs	r3, r3, r6
 8021122:	444b      	add	r3, r9
 8021124:	441d      	add	r5, r3
 8021126:	e791      	b.n	802104c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8021128:	4b05      	ldr	r3, [pc, #20]	; (8021140 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 802112a:	6818      	ldr	r0, [r3, #0]
 802112c:	6803      	ldr	r3, [r0, #0]
 802112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021130:	4798      	blx	r3
 8021132:	e770      	b.n	8021016 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8021134:	0802d643 	.word	0x0802d643
 8021138:	0802dd13 	.word	0x0802dd13
 802113c:	0802d6df 	.word	0x0802d6df
 8021140:	2000bef0 	.word	0x2000bef0
 8021144:	2000bee8 	.word	0x2000bee8

08021148 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802114c:	4614      	mov	r4, r2
 802114e:	880a      	ldrh	r2, [r1, #0]
 8021150:	b091      	sub	sp, #68	; 0x44
 8021152:	4680      	mov	r8, r0
 8021154:	2a01      	cmp	r2, #1
 8021156:	460e      	mov	r6, r1
 8021158:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 802115c:	d005      	beq.n	802116a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 802115e:	4b6d      	ldr	r3, [pc, #436]	; (8021314 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8021160:	21b5      	movs	r1, #181	; 0xb5
 8021162:	4a6d      	ldr	r2, [pc, #436]	; (8021318 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8021164:	486d      	ldr	r0, [pc, #436]	; (802131c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8021166:	f007 fa1d 	bl	80285a4 <__assert_func>
 802116a:	6820      	ldr	r0, [r4, #0]
 802116c:	ad0c      	add	r5, sp, #48	; 0x30
 802116e:	6861      	ldr	r1, [r4, #4]
 8021170:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8021320 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8021174:	c503      	stmia	r5!, {r0, r1}
 8021176:	6818      	ldr	r0, [r3, #0]
 8021178:	ad0e      	add	r5, sp, #56	; 0x38
 802117a:	6859      	ldr	r1, [r3, #4]
 802117c:	c503      	stmia	r5!, {r0, r1}
 802117e:	a80c      	add	r0, sp, #48	; 0x30
 8021180:	f7fb f8a2 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021184:	4621      	mov	r1, r4
 8021186:	a80e      	add	r0, sp, #56	; 0x38
 8021188:	f7fb f886 	bl	801c298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802118c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021190:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021194:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021198:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 802119c:	fb11 2103 	smlabb	r1, r1, r3, r2
 80211a0:	eb08 0401 	add.w	r4, r8, r1
 80211a4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80211a8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8021324 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 80211ac:	440a      	add	r2, r1
 80211ae:	f8d8 0000 	ldr.w	r0, [r8]
 80211b2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80211b6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80211ba:	4413      	add	r3, r2
 80211bc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80211c0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80211c4:	930a      	str	r3, [sp, #40]	; 0x28
 80211c6:	6803      	ldr	r3, [r0, #0]
 80211c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80211cc:	4798      	blx	r3
 80211ce:	2801      	cmp	r0, #1
 80211d0:	d11e      	bne.n	8021210 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 80211d2:	220b      	movs	r2, #11
 80211d4:	9008      	str	r0, [sp, #32]
 80211d6:	b2ad      	uxth	r5, r5
 80211d8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80211dc:	9207      	str	r2, [sp, #28]
 80211de:	4621      	mov	r1, r4
 80211e0:	f8b9 2000 	ldrh.w	r2, [r9]
 80211e4:	9501      	str	r5, [sp, #4]
 80211e6:	9206      	str	r2, [sp, #24]
 80211e8:	2200      	movs	r2, #0
 80211ea:	e9cd 7204 	strd	r7, r2, [sp, #16]
 80211ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80211f2:	9203      	str	r2, [sp, #12]
 80211f4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80211f8:	9202      	str	r2, [sp, #8]
 80211fa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80211fe:	9200      	str	r2, [sp, #0]
 8021200:	4632      	mov	r2, r6
 8021202:	f8d8 0000 	ldr.w	r0, [r8]
 8021206:	f7f8 fb53 	bl	80198b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802120a:	b011      	add	sp, #68	; 0x44
 802120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021210:	f8d8 0000 	ldr.w	r0, [r8]
 8021214:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8021218:	6803      	ldr	r3, [r0, #0]
 802121a:	6a1b      	ldr	r3, [r3, #32]
 802121c:	4798      	blx	r3
 802121e:	f8b9 3000 	ldrh.w	r3, [r9]
 8021222:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8021226:	f04f 0e00 	mov.w	lr, #0
 802122a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802122e:	fa1f f987 	uxth.w	r9, r7
 8021232:	fb01 2303 	mla	r3, r1, r3, r2
 8021236:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 802123a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802123e:	b289      	uxth	r1, r1
 8021240:	4418      	add	r0, r3
 8021242:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8021246:	930b      	str	r3, [sp, #44]	; 0x2c
 8021248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802124a:	459e      	cmp	lr, r3
 802124c:	da5c      	bge.n	8021308 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 802124e:	1cc3      	adds	r3, r0, #3
 8021250:	46a2      	mov	sl, r4
 8021252:	ebaa 0204 	sub.w	r2, sl, r4
 8021256:	4295      	cmp	r5, r2
 8021258:	dd46      	ble.n	80212e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 802125a:	f04f 0c03 	mov.w	ip, #3
 802125e:	f04f 0b04 	mov.w	fp, #4
 8021262:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8021266:	2fff      	cmp	r7, #255	; 0xff
 8021268:	fb1c b202 	smlabb	r2, ip, r2, fp
 802126c:	eb06 0c02 	add.w	ip, r6, r2
 8021270:	f816 b002 	ldrb.w	fp, [r6, r2]
 8021274:	d02f      	beq.n	80212d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 8021276:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 802127a:	fb12 f201 	smulbb	r2, r2, r1
 802127e:	fb0b 2209 	mla	r2, fp, r9, r2
 8021282:	b292      	uxth	r2, r2
 8021284:	f102 0b01 	add.w	fp, r2, #1
 8021288:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802128c:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 8021290:	fb1b fb01 	smulbb	fp, fp, r1
 8021294:	1212      	asrs	r2, r2, #8
 8021296:	f803 2c03 	strb.w	r2, [r3, #-3]
 802129a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802129e:	fb02 b209 	mla	r2, r2, r9, fp
 80212a2:	b292      	uxth	r2, r2
 80212a4:	f102 0b01 	add.w	fp, r2, #1
 80212a8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80212ac:	1212      	asrs	r2, r2, #8
 80212ae:	f803 2c02 	strb.w	r2, [r3, #-2]
 80212b2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80212b6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 80212ba:	fb1c fc01 	smulbb	ip, ip, r1
 80212be:	fb02 c209 	mla	r2, r2, r9, ip
 80212c2:	b292      	uxth	r2, r2
 80212c4:	f102 0c01 	add.w	ip, r2, #1
 80212c8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80212cc:	1212      	asrs	r2, r2, #8
 80212ce:	f803 2c01 	strb.w	r2, [r3, #-1]
 80212d2:	3303      	adds	r3, #3
 80212d4:	e7bd      	b.n	8021252 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 80212d6:	f803 bc03 	strb.w	fp, [r3, #-3]
 80212da:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80212de:	f803 2c02 	strb.w	r2, [r3, #-2]
 80212e2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80212e6:	e7f2      	b.n	80212ce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 80212e8:	4b0d      	ldr	r3, [pc, #52]	; (8021320 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80212ea:	f10e 0e01 	add.w	lr, lr, #1
 80212ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80212f0:	881b      	ldrh	r3, [r3, #0]
 80212f2:	1b5b      	subs	r3, r3, r5
 80212f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212f8:	4413      	add	r3, r2
 80212fa:	4418      	add	r0, r3
 80212fc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021300:	1b5b      	subs	r3, r3, r5
 8021302:	4443      	add	r3, r8
 8021304:	441c      	add	r4, r3
 8021306:	e79f      	b.n	8021248 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8021308:	4b06      	ldr	r3, [pc, #24]	; (8021324 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 802130a:	6818      	ldr	r0, [r3, #0]
 802130c:	6803      	ldr	r3, [r0, #0]
 802130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021310:	4798      	blx	r3
 8021312:	e77a      	b.n	802120a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8021314:	0802d54f 	.word	0x0802d54f
 8021318:	0802dc06 	.word	0x0802dc06
 802131c:	0802d6df 	.word	0x0802d6df
 8021320:	2000bee8 	.word	0x2000bee8
 8021324:	2000bef0 	.word	0x2000bef0

08021328 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021328:	b570      	push	{r4, r5, r6, lr}
 802132a:	780d      	ldrb	r5, [r1, #0]
 802132c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8021330:	2d01      	cmp	r5, #1
 8021332:	d00d      	beq.n	8021350 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8021334:	d307      	bcc.n	8021346 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8021336:	2d02      	cmp	r5, #2
 8021338:	d10f      	bne.n	802135a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 802133a:	4b08      	ldr	r3, [pc, #32]	; (802135c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 802133c:	215a      	movs	r1, #90	; 0x5a
 802133e:	4a08      	ldr	r2, [pc, #32]	; (8021360 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8021340:	4808      	ldr	r0, [pc, #32]	; (8021364 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8021342:	f007 f92f 	bl	80285a4 <__assert_func>
 8021346:	9404      	str	r4, [sp, #16]
 8021348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802134c:	f7ff be04 	b.w	8020f58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021350:	9404      	str	r4, [sp, #16]
 8021352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021356:	f7ff bef7 	b.w	8021148 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802135a:	bd70      	pop	{r4, r5, r6, pc}
 802135c:	0802d504 	.word	0x0802d504
 8021360:	0802db84 	.word	0x0802db84
 8021364:	0802d6df 	.word	0x0802d6df

08021368 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802136c:	b08b      	sub	sp, #44	; 0x2c
 802136e:	460c      	mov	r4, r1
 8021370:	4680      	mov	r8, r0
 8021372:	469a      	mov	sl, r3
 8021374:	6808      	ldr	r0, [r1, #0]
 8021376:	ab06      	add	r3, sp, #24
 8021378:	6849      	ldr	r1, [r1, #4]
 802137a:	c303      	stmia	r3!, {r0, r1}
 802137c:	6810      	ldr	r0, [r2, #0]
 802137e:	ab08      	add	r3, sp, #32
 8021380:	6851      	ldr	r1, [r2, #4]
 8021382:	c303      	stmia	r3!, {r0, r1}
 8021384:	a806      	add	r0, sp, #24
 8021386:	f7fa ff9f 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802138a:	4621      	mov	r1, r4
 802138c:	a808      	add	r0, sp, #32
 802138e:	4c61      	ldr	r4, [pc, #388]	; (8021514 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8021390:	f7fa ff82 	bl	801c298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021394:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021398:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802139c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80213a0:	6820      	ldr	r0, [r4, #0]
 80213a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80213a6:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80213aa:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80213ae:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80213b2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80213b6:	440a      	add	r2, r1
 80213b8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80213bc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80213c0:	4413      	add	r3, r2
 80213c2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80213c6:	6803      	ldr	r3, [r0, #0]
 80213c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213ca:	4798      	blx	r3
 80213cc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80213d0:	d118      	bne.n	8021404 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80213d2:	f010 0f20 	tst.w	r0, #32
 80213d6:	6820      	ldr	r0, [r4, #0]
 80213d8:	d017      	beq.n	802140a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80213da:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80213de:	b2bf      	uxth	r7, r7
 80213e0:	6801      	ldr	r1, [r0, #0]
 80213e2:	9402      	str	r4, [sp, #8]
 80213e4:	fa1f f489 	uxth.w	r4, r9
 80213e8:	f8cd a00c 	str.w	sl, [sp, #12]
 80213ec:	9401      	str	r4, [sp, #4]
 80213ee:	9700      	str	r7, [sp, #0]
 80213f0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80213f4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80213f6:	4641      	mov	r1, r8
 80213f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80213fc:	47a0      	blx	r4
 80213fe:	b00b      	add	sp, #44	; 0x2c
 8021400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021404:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021408:	e7e5      	b.n	80213d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802140a:	6803      	ldr	r3, [r0, #0]
 802140c:	6a1b      	ldr	r3, [r3, #32]
 802140e:	4798      	blx	r3
 8021410:	4b41      	ldr	r3, [pc, #260]	; (8021518 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8021412:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021416:	f04f 0c00 	mov.w	ip, #0
 802141a:	881a      	ldrh	r2, [r3, #0]
 802141c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8021420:	fb04 1202 	mla	r2, r4, r2, r1
 8021424:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021428:	4410      	add	r0, r2
 802142a:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 802142e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8021432:	0092      	lsls	r2, r2, #2
 8021434:	9105      	str	r1, [sp, #20]
 8021436:	9204      	str	r2, [sp, #16]
 8021438:	45cc      	cmp	ip, r9
 802143a:	da65      	bge.n	8021508 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 802143c:	1cc4      	adds	r4, r0, #3
 802143e:	f108 0504 	add.w	r5, r8, #4
 8021442:	f04f 0e00 	mov.w	lr, #0
 8021446:	45be      	cmp	lr, r7
 8021448:	da4d      	bge.n	80214e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 802144a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802144e:	b181      	cbz	r1, 8021472 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8021450:	29ff      	cmp	r1, #255	; 0xff
 8021452:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8021456:	d111      	bne.n	802147c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8021458:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802145c:	d10e      	bne.n	802147c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 802145e:	f804 bc03 	strb.w	fp, [r4, #-3]
 8021462:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8021466:	f804 2c02 	strb.w	r2, [r4, #-2]
 802146a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 802146e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8021472:	f10e 0e01 	add.w	lr, lr, #1
 8021476:	3403      	adds	r4, #3
 8021478:	3504      	adds	r5, #4
 802147a:	e7e4      	b.n	8021446 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 802147c:	fb0a f101 	mul.w	r1, sl, r1
 8021480:	1c4a      	adds	r2, r1, #1
 8021482:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021486:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802148a:	1212      	asrs	r2, r2, #8
 802148c:	b296      	uxth	r6, r2
 802148e:	43d2      	mvns	r2, r2
 8021490:	fb1b fb06 	smulbb	fp, fp, r6
 8021494:	b2d2      	uxtb	r2, r2
 8021496:	fb01 b102 	mla	r1, r1, r2, fp
 802149a:	b289      	uxth	r1, r1
 802149c:	f101 0b01 	add.w	fp, r1, #1
 80214a0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80214a4:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 80214a8:	fb1b fb02 	smulbb	fp, fp, r2
 80214ac:	1209      	asrs	r1, r1, #8
 80214ae:	f804 1c03 	strb.w	r1, [r4, #-3]
 80214b2:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 80214b6:	fb01 b106 	mla	r1, r1, r6, fp
 80214ba:	b289      	uxth	r1, r1
 80214bc:	f101 0b01 	add.w	fp, r1, #1
 80214c0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80214c4:	1209      	asrs	r1, r1, #8
 80214c6:	f804 1c02 	strb.w	r1, [r4, #-2]
 80214ca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80214ce:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80214d2:	fb11 f202 	smulbb	r2, r1, r2
 80214d6:	fb0b 2206 	mla	r2, fp, r6, r2
 80214da:	b292      	uxth	r2, r2
 80214dc:	1c56      	adds	r6, r2, #1
 80214de:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80214e2:	1212      	asrs	r2, r2, #8
 80214e4:	e7c3      	b.n	802146e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 80214e6:	881a      	ldrh	r2, [r3, #0]
 80214e8:	f10c 0c01 	add.w	ip, ip, #1
 80214ec:	9905      	ldr	r1, [sp, #20]
 80214ee:	1bd2      	subs	r2, r2, r7
 80214f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80214f4:	440a      	add	r2, r1
 80214f6:	9904      	ldr	r1, [sp, #16]
 80214f8:	4410      	add	r0, r2
 80214fa:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80214fe:	1bd2      	subs	r2, r2, r7
 8021500:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8021504:	4490      	add	r8, r2
 8021506:	e797      	b.n	8021438 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8021508:	4b02      	ldr	r3, [pc, #8]	; (8021514 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 802150a:	6818      	ldr	r0, [r3, #0]
 802150c:	6803      	ldr	r3, [r0, #0]
 802150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021510:	4798      	blx	r3
 8021512:	e774      	b.n	80213fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8021514:	2000bef0 	.word	0x2000bef0
 8021518:	2000bee8 	.word	0x2000bee8

0802151c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802151c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021520:	b085      	sub	sp, #20
 8021522:	4606      	mov	r6, r0
 8021524:	460c      	mov	r4, r1
 8021526:	4691      	mov	r9, r2
 8021528:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 802152c:	4698      	mov	r8, r3
 802152e:	b385      	cbz	r5, 8021592 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8021530:	4608      	mov	r0, r1
 8021532:	f7fd fae5 	bl	801eb00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021536:	4607      	mov	r7, r0
 8021538:	4620      	mov	r0, r4
 802153a:	f7fd fb1b 	bl	801eb74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802153e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021542:	4620      	mov	r0, r4
 8021544:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021548:	f8ad 800a 	strh.w	r8, [sp, #10]
 802154c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8021550:	f7fd fc62 	bl	801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021554:	2801      	cmp	r0, #1
 8021556:	d00f      	beq.n	8021578 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8021558:	4620      	mov	r0, r4
 802155a:	f7fd fc5d 	bl	801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802155e:	2802      	cmp	r0, #2
 8021560:	d00a      	beq.n	8021578 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8021562:	4620      	mov	r0, r4
 8021564:	f7fd fc58 	bl	801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021568:	280b      	cmp	r0, #11
 802156a:	d005      	beq.n	8021578 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802156c:	4b1b      	ldr	r3, [pc, #108]	; (80215dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 802156e:	2142      	movs	r1, #66	; 0x42
 8021570:	4a1b      	ldr	r2, [pc, #108]	; (80215e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8021572:	481c      	ldr	r0, [pc, #112]	; (80215e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 8021574:	f007 f816 	bl	80285a4 <__assert_func>
 8021578:	4620      	mov	r0, r4
 802157a:	f7fd fc4d 	bl	801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802157e:	2802      	cmp	r0, #2
 8021580:	4620      	mov	r0, r4
 8021582:	d109      	bne.n	8021598 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 8021584:	f7fd fbc4 	bl	801ed10 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021588:	462b      	mov	r3, r5
 802158a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802158c:	a902      	add	r1, sp, #8
 802158e:	f7ff feeb 	bl	8021368 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021592:	b005      	add	sp, #20
 8021594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021598:	f7fd fc3e 	bl	801ee18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802159c:	280b      	cmp	r0, #11
 802159e:	d10e      	bne.n	80215be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80215a0:	4620      	mov	r0, r4
 80215a2:	f7fd fbb5 	bl	801ed10 <_ZNK8touchgfx6Bitmap7getDataEv>
 80215a6:	4606      	mov	r6, r0
 80215a8:	4620      	mov	r0, r4
 80215aa:	f7fd fbe3 	bl	801ed74 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80215ae:	9500      	str	r5, [sp, #0]
 80215b0:	4601      	mov	r1, r0
 80215b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80215b4:	aa02      	add	r2, sp, #8
 80215b6:	4630      	mov	r0, r6
 80215b8:	f7ff feb6 	bl	8021328 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80215bc:	e7e9      	b.n	8021592 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80215be:	6833      	ldr	r3, [r6, #0]
 80215c0:	4620      	mov	r0, r4
 80215c2:	691f      	ldr	r7, [r3, #16]
 80215c4:	f7fd fba4 	bl	801ed10 <_ZNK8touchgfx6Bitmap7getDataEv>
 80215c8:	2300      	movs	r3, #0
 80215ca:	4601      	mov	r1, r0
 80215cc:	aa02      	add	r2, sp, #8
 80215ce:	4630      	mov	r0, r6
 80215d0:	e9cd 5300 	strd	r5, r3, [sp]
 80215d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80215d6:	47b8      	blx	r7
 80215d8:	e7db      	b.n	8021592 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80215da:	bf00      	nop
 80215dc:	0802d59d 	.word	0x0802d59d
 80215e0:	0802dc8f 	.word	0x0802dc8f
 80215e4:	0802d6df 	.word	0x0802d6df

080215e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80215e8:	b570      	push	{r4, r5, r6, lr}
 80215ea:	9d04      	ldr	r5, [sp, #16]
 80215ec:	460c      	mov	r4, r1
 80215ee:	4619      	mov	r1, r3
 80215f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80215f4:	2a0c      	cmp	r2, #12
 80215f6:	d826      	bhi.n	8021646 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 80215f8:	e8df f002 	tbb	[pc, r2]
 80215fc:	200e1407 	.word	0x200e1407
 8021600:	20202020 	.word	0x20202020
 8021604:	20202020 	.word	0x20202020
 8021608:	20          	.byte	0x20
 8021609:	00          	.byte	0x00
 802160a:	4b0f      	ldr	r3, [pc, #60]	; (8021648 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 802160c:	f240 117f 	movw	r1, #383	; 0x17f
 8021610:	4a0e      	ldr	r2, [pc, #56]	; (802164c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021612:	480f      	ldr	r0, [pc, #60]	; (8021650 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8021614:	f006 ffc6 	bl	80285a4 <__assert_func>
 8021618:	462a      	mov	r2, r5
 802161a:	4620      	mov	r0, r4
 802161c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021620:	f7ff bea2 	b.w	8021368 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021624:	6802      	ldr	r2, [r0, #0]
 8021626:	2600      	movs	r6, #0
 8021628:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802162c:	6916      	ldr	r6, [r2, #16]
 802162e:	462b      	mov	r3, r5
 8021630:	460a      	mov	r2, r1
 8021632:	4621      	mov	r1, r4
 8021634:	46b4      	mov	ip, r6
 8021636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802163a:	4760      	bx	ip
 802163c:	4b05      	ldr	r3, [pc, #20]	; (8021654 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 802163e:	f240 1191 	movw	r1, #401	; 0x191
 8021642:	4a02      	ldr	r2, [pc, #8]	; (802164c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021644:	e7e5      	b.n	8021612 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8021646:	bd70      	pop	{r4, r5, r6, pc}
 8021648:	0802d8b8 	.word	0x0802d8b8
 802164c:	0802df77 	.word	0x0802df77
 8021650:	0802d6df 	.word	0x0802d6df
 8021654:	0802d8f9 	.word	0x0802d8f9

08021658 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8021658:	b158      	cbz	r0, 8021672 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802165a:	2902      	cmp	r1, #2
 802165c:	d00f      	beq.n	802167e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 802165e:	2903      	cmp	r1, #3
 8021660:	d010      	beq.n	8021684 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8021662:	2901      	cmp	r1, #1
 8021664:	d101      	bne.n	802166a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021666:	2001      	movs	r0, #1
 8021668:	4770      	bx	lr
 802166a:	4b08      	ldr	r3, [pc, #32]	; (802168c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 802166c:	8819      	ldrh	r1, [r3, #0]
 802166e:	4248      	negs	r0, r1
 8021670:	4770      	bx	lr
 8021672:	2902      	cmp	r1, #2
 8021674:	d006      	beq.n	8021684 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8021676:	2903      	cmp	r1, #3
 8021678:	d0f7      	beq.n	802166a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802167a:	2901      	cmp	r1, #1
 802167c:	d1f3      	bne.n	8021666 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 802167e:	4b03      	ldr	r3, [pc, #12]	; (802168c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021680:	8818      	ldrh	r0, [r3, #0]
 8021682:	4770      	bx	lr
 8021684:	f04f 30ff 	mov.w	r0, #4294967295
 8021688:	4770      	bx	lr
 802168a:	bf00      	nop
 802168c:	2000bee8 	.word	0x2000bee8

08021690 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8021690:	b170      	cbz	r0, 80216b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8021692:	2902      	cmp	r1, #2
 8021694:	d012      	beq.n	80216bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8021696:	2903      	cmp	r1, #3
 8021698:	d006      	beq.n	80216a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 802169a:	2901      	cmp	r1, #1
 802169c:	d001      	beq.n	80216a2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 802169e:	2001      	movs	r0, #1
 80216a0:	4770      	bx	lr
 80216a2:	4b08      	ldr	r3, [pc, #32]	; (80216c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80216a4:	8818      	ldrh	r0, [r3, #0]
 80216a6:	4770      	bx	lr
 80216a8:	4b06      	ldr	r3, [pc, #24]	; (80216c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80216aa:	8818      	ldrh	r0, [r3, #0]
 80216ac:	4240      	negs	r0, r0
 80216ae:	4770      	bx	lr
 80216b0:	2902      	cmp	r1, #2
 80216b2:	d0f9      	beq.n	80216a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80216b4:	2903      	cmp	r1, #3
 80216b6:	d0f2      	beq.n	802169e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 80216b8:	2901      	cmp	r1, #1
 80216ba:	d1f2      	bne.n	80216a2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80216bc:	f04f 30ff 	mov.w	r0, #4294967295
 80216c0:	4770      	bx	lr
 80216c2:	bf00      	nop
 80216c4:	2000bee8 	.word	0x2000bee8

080216c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80216c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216cc:	b095      	sub	sp, #84	; 0x54
 80216ce:	9109      	str	r1, [sp, #36]	; 0x24
 80216d0:	a910      	add	r1, sp, #64	; 0x40
 80216d2:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 80216d6:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 80216da:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 80216de:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 80216e2:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 80216e6:	e881 000c 	stmia.w	r1, {r2, r3}
 80216ea:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 80216ee:	9306      	str	r3, [sp, #24]
 80216f0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80216f4:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 80216f8:	930e      	str	r3, [sp, #56]	; 0x38
 80216fa:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 80216fe:	798f      	ldrb	r7, [r1, #6]
 8021700:	930a      	str	r3, [sp, #40]	; 0x28
 8021702:	7b4b      	ldrb	r3, [r1, #13]
 8021704:	0158      	lsls	r0, r3, #5
 8021706:	f400 7080 	and.w	r0, r0, #256	; 0x100
 802170a:	4338      	orrs	r0, r7
 802170c:	9008      	str	r0, [sp, #32]
 802170e:	f000 8174 	beq.w	80219fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021712:	011b      	lsls	r3, r3, #4
 8021714:	79c8      	ldrb	r0, [r1, #7]
 8021716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802171a:	4303      	orrs	r3, r0
 802171c:	9307      	str	r3, [sp, #28]
 802171e:	f000 816c 	beq.w	80219fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021722:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021726:	b29b      	uxth	r3, r3
 8021728:	2e00      	cmp	r6, #0
 802172a:	f000 8112 	beq.w	8021952 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 802172e:	1af6      	subs	r6, r6, r3
 8021730:	b2b6      	uxth	r6, r6
 8021732:	0433      	lsls	r3, r6, #16
 8021734:	d502      	bpl.n	802173c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021736:	1bad      	subs	r5, r5, r6
 8021738:	2600      	movs	r6, #0
 802173a:	b22d      	sxth	r5, r5
 802173c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021740:	a810      	add	r0, sp, #64	; 0x40
 8021742:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8021746:	428d      	cmp	r5, r1
 8021748:	b28b      	uxth	r3, r1
 802174a:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 802174e:	bfbf      	itttt	lt
 8021750:	18f6      	addlt	r6, r6, r3
 8021752:	1b75      	sublt	r5, r6, r5
 8021754:	b2ae      	uxthlt	r6, r5
 8021756:	460d      	movlt	r5, r1
 8021758:	8891      	ldrh	r1, [r2, #4]
 802175a:	440b      	add	r3, r1
 802175c:	4629      	mov	r1, r5
 802175e:	b21b      	sxth	r3, r3
 8021760:	930d      	str	r3, [sp, #52]	; 0x34
 8021762:	88d3      	ldrh	r3, [r2, #6]
 8021764:	9a06      	ldr	r2, [sp, #24]
 8021766:	449a      	add	sl, r3
 8021768:	fa0f f38a 	sxth.w	r3, sl
 802176c:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8021770:	930c      	str	r3, [sp, #48]	; 0x30
 8021772:	4bb8      	ldr	r3, [pc, #736]	; (8021a54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8021774:	f893 b000 	ldrb.w	fp, [r3]
 8021778:	f10b 3cff 	add.w	ip, fp, #4294967295
 802177c:	f1dc 0300 	rsbs	r3, ip, #0
 8021780:	eb43 030c 	adc.w	r3, r3, ip
 8021784:	930b      	str	r3, [sp, #44]	; 0x2c
 8021786:	464b      	mov	r3, r9
 8021788:	f7fa fc78 	bl	801c07c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802178c:	4629      	mov	r1, r5
 802178e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 8021792:	464b      	mov	r3, r9
 8021794:	9a06      	ldr	r2, [sp, #24]
 8021796:	a810      	add	r0, sp, #64	; 0x40
 8021798:	f7fa fc88 	bl	801c0ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802179c:	a914      	add	r1, sp, #80	; 0x50
 802179e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80217a2:	a813      	add	r0, sp, #76	; 0x4c
 80217a4:	f7fa fd62 	bl	801c26c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80217a8:	f1b9 0f00 	cmp.w	r9, #0
 80217ac:	f040 80d4 	bne.w	8021958 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 80217b0:	f1bb 0f01 	cmp.w	fp, #1
 80217b4:	f040 80d8 	bne.w	8021968 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80217b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	f040 8122 	bne.w	8021a04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 80217c0:	4ba5      	ldr	r3, [pc, #660]	; (8021a58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 80217c2:	6818      	ldr	r0, [r3, #0]
 80217c4:	6803      	ldr	r3, [r0, #0]
 80217c6:	6a1b      	ldr	r3, [r3, #32]
 80217c8:	4798      	blx	r3
 80217ca:	4aa4      	ldr	r2, [pc, #656]	; (8021a5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 80217cc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80217d0:	8811      	ldrh	r1, [r2, #0]
 80217d2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80217d6:	fb01 2303 	mla	r3, r1, r3, r2
 80217da:	2201      	movs	r2, #1
 80217dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217e0:	4590      	cmp	r8, r2
 80217e2:	4403      	add	r3, r0
 80217e4:	9307      	str	r3, [sp, #28]
 80217e6:	fa02 f308 	lsl.w	r3, r2, r8
 80217ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80217ee:	b2db      	uxtb	r3, r3
 80217f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80217f2:	f000 8109 	beq.w	8021a08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 80217f6:	f1b8 0f02 	cmp.w	r8, #2
 80217fa:	f000 813e 	beq.w	8021a7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 80217fe:	f1b8 0f04 	cmp.w	r8, #4
 8021802:	f000 8132 	beq.w	8021a6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8021806:	b906      	cbnz	r6, 802180a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 8021808:	b174      	cbz	r4, 8021828 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 802180a:	fb17 6304 	smlabb	r3, r7, r4, r6
 802180e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021810:	ebaa 0a04 	sub.w	sl, sl, r4
 8021814:	fb13 f308 	smulbb	r3, r3, r8
 8021818:	fa1f fa8a 	uxth.w	sl, sl
 802181c:	b29b      	uxth	r3, r3
 802181e:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 8021822:	f003 0407 	and.w	r4, r3, #7
 8021826:	9124      	str	r1, [sp, #144]	; 0x90
 8021828:	4649      	mov	r1, r9
 802182a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802182c:	f7ff ff14 	bl	8021658 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8021830:	4649      	mov	r1, r9
 8021832:	4683      	mov	fp, r0
 8021834:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021836:	f7ff ff2b 	bl	8021690 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 802183a:	9906      	ldr	r1, [sp, #24]
 802183c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802183e:	1bad      	subs	r5, r5, r6
 8021840:	1a5b      	subs	r3, r3, r1
 8021842:	459a      	cmp	sl, r3
 8021844:	bfa8      	it	ge
 8021846:	469a      	movge	sl, r3
 8021848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802184a:	1b5d      	subs	r5, r3, r5
 802184c:	9b08      	ldr	r3, [sp, #32]
 802184e:	429d      	cmp	r5, r3
 8021850:	bfd4      	ite	le
 8021852:	ebc6 0605 	rsble	r6, r6, r5
 8021856:	ebc6 0603 	rsbgt	r6, r6, r3
 802185a:	1bbf      	subs	r7, r7, r6
 802185c:	fb0b 0016 	mls	r0, fp, r6, r0
 8021860:	fb08 f307 	mul.w	r3, r8, r7
 8021864:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021868:	9308      	str	r3, [sp, #32]
 802186a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802186c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021870:	930b      	str	r3, [sp, #44]	; 0x2c
 8021872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021874:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021878:	930c      	str	r3, [sp, #48]	; 0x30
 802187a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802187c:	b2db      	uxtb	r3, r3
 802187e:	930d      	str	r3, [sp, #52]	; 0x34
 8021880:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021882:	7819      	ldrb	r1, [r3, #0]
 8021884:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8021888:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 802188c:	4121      	asrs	r1, r4
 802188e:	9306      	str	r3, [sp, #24]
 8021890:	fb03 0b0b 	mla	fp, r3, fp, r0
 8021894:	b2c9      	uxtb	r1, r1
 8021896:	f1ba 0f00 	cmp.w	sl, #0
 802189a:	f340 80d1 	ble.w	8021a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 802189e:	46b6      	mov	lr, r6
 80218a0:	9807      	ldr	r0, [sp, #28]
 80218a2:	f1be 0f00 	cmp.w	lr, #0
 80218a6:	f340 80b8 	ble.w	8021a1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80218aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80218ac:	400b      	ands	r3, r1
 80218ae:	d03e      	beq.n	802192e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80218b0:	fb13 f302 	smulbb	r3, r3, r2
 80218b4:	2bfe      	cmp	r3, #254	; 0xfe
 80218b6:	dd03      	ble.n	80218c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 80218b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80218ba:	2dff      	cmp	r5, #255	; 0xff
 80218bc:	f000 80a6 	beq.w	8021a0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80218c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80218c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80218c4:	fb15 f303 	smulbb	r3, r5, r3
 80218c8:	b29b      	uxth	r3, r3
 80218ca:	1c5d      	adds	r5, r3, #1
 80218cc:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80218d0:	7805      	ldrb	r5, [r0, #0]
 80218d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80218d6:	fa1f fc83 	uxth.w	ip, r3
 80218da:	43db      	mvns	r3, r3
 80218dc:	fb17 f90c 	smulbb	r9, r7, ip
 80218e0:	b2db      	uxtb	r3, r3
 80218e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80218e4:	fb05 9503 	mla	r5, r5, r3, r9
 80218e8:	b2ad      	uxth	r5, r5
 80218ea:	f105 0901 	add.w	r9, r5, #1
 80218ee:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80218f2:	fb17 f90c 	smulbb	r9, r7, ip
 80218f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80218f8:	122d      	asrs	r5, r5, #8
 80218fa:	fb17 fc0c 	smulbb	ip, r7, ip
 80218fe:	7005      	strb	r5, [r0, #0]
 8021900:	7845      	ldrb	r5, [r0, #1]
 8021902:	fb05 9503 	mla	r5, r5, r3, r9
 8021906:	b2ad      	uxth	r5, r5
 8021908:	f105 0901 	add.w	r9, r5, #1
 802190c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021910:	122d      	asrs	r5, r5, #8
 8021912:	7045      	strb	r5, [r0, #1]
 8021914:	7885      	ldrb	r5, [r0, #2]
 8021916:	fb05 cc03 	mla	ip, r5, r3, ip
 802191a:	fa1f fc8c 	uxth.w	ip, ip
 802191e:	f10c 0301 	add.w	r3, ip, #1
 8021922:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021926:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802192a:	f880 c002 	strb.w	ip, [r0, #2]
 802192e:	4444      	add	r4, r8
 8021930:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021934:	b2a4      	uxth	r4, r4
 8021936:	2c07      	cmp	r4, #7
 8021938:	bf89      	itett	hi
 802193a:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 802193c:	fa41 f108 	asrls.w	r1, r1, r8
 8021940:	2400      	movhi	r4, #0
 8021942:	7859      	ldrbhi	r1, [r3, #1]
 8021944:	bf8a      	itet	hi
 8021946:	3301      	addhi	r3, #1
 8021948:	b2c9      	uxtbls	r1, r1
 802194a:	9324      	strhi	r3, [sp, #144]	; 0x90
 802194c:	9b06      	ldr	r3, [sp, #24]
 802194e:	4418      	add	r0, r3
 8021950:	e7a7      	b.n	80218a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 8021952:	441d      	add	r5, r3
 8021954:	b22d      	sxth	r5, r5
 8021956:	e6f1      	b.n	802173c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021958:	f1b9 0f01 	cmp.w	r9, #1
 802195c:	f47f af2c 	bne.w	80217b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021960:	f1bb 0f01 	cmp.w	fp, #1
 8021964:	f47f af28 	bne.w	80217b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021968:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8021a58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802196c:	f8db 0000 	ldr.w	r0, [fp]
 8021970:	6803      	ldr	r3, [r0, #0]
 8021972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021974:	4798      	blx	r3
 8021976:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802197a:	465a      	mov	r2, fp
 802197c:	d006      	beq.n	802198c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 802197e:	f1b8 0f04 	cmp.w	r8, #4
 8021982:	d13d      	bne.n	8021a00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 8021984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021986:	3300      	adds	r3, #0
 8021988:	bf18      	it	ne
 802198a:	2301      	movne	r3, #1
 802198c:	05c0      	lsls	r0, r0, #23
 802198e:	d567      	bpl.n	8021a60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8021990:	f1b8 0f08 	cmp.w	r8, #8
 8021994:	d164      	bne.n	8021a60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8021996:	2b00      	cmp	r3, #0
 8021998:	bf0c      	ite	eq
 802199a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 802199e:	2180      	movne	r1, #128	; 0x80
 80219a0:	2e00      	cmp	r6, #0
 80219a2:	f47f af09 	bne.w	80217b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80219a6:	2c00      	cmp	r4, #0
 80219a8:	f47f af06 	bne.w	80217b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80219ac:	9b08      	ldr	r3, [sp, #32]
 80219ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80219b0:	442b      	add	r3, r5
 80219b2:	4283      	cmp	r3, r0
 80219b4:	f73f af00 	bgt.w	80217b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80219b8:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 80219bc:	4403      	add	r3, r0
 80219be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80219c0:	4283      	cmp	r3, r0
 80219c2:	f73f aef9 	bgt.w	80217b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80219c6:	f1b8 0f08 	cmp.w	r8, #8
 80219ca:	6810      	ldr	r0, [r2, #0]
 80219cc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80219d0:	bf18      	it	ne
 80219d2:	3701      	addne	r7, #1
 80219d4:	6804      	ldr	r4, [r0, #0]
 80219d6:	9105      	str	r1, [sp, #20]
 80219d8:	bf18      	it	ne
 80219da:	f027 0701 	bicne.w	r7, r7, #1
 80219de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80219e0:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 80219e4:	bf18      	it	ne
 80219e6:	b2bf      	uxthne	r7, r7
 80219e8:	9104      	str	r1, [sp, #16]
 80219ea:	9926      	ldr	r1, [sp, #152]	; 0x98
 80219ec:	e9cd 7a00 	strd	r7, sl, [sp]
 80219f0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80219f4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80219f6:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80219f8:	47a0      	blx	r4
 80219fa:	b015      	add	sp, #84	; 0x54
 80219fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a00:	2300      	movs	r3, #0
 8021a02:	e7c3      	b.n	802198c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8021a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a06:	e6e0      	b.n	80217ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8021a08:	22ff      	movs	r2, #255	; 0xff
 8021a0a:	e6fc      	b.n	8021806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a0e:	7003      	strb	r3, [r0, #0]
 8021a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a12:	7043      	strb	r3, [r0, #1]
 8021a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a16:	7083      	strb	r3, [r0, #2]
 8021a18:	e789      	b.n	802192e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8021a1a:	9b08      	ldr	r3, [sp, #32]
 8021a1c:	b153      	cbz	r3, 8021a34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 8021a1e:	441c      	add	r4, r3
 8021a20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a22:	b2a4      	uxth	r4, r4
 8021a24:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8021a28:	f004 0407 	and.w	r4, r4, #7
 8021a2c:	7819      	ldrb	r1, [r3, #0]
 8021a2e:	9324      	str	r3, [sp, #144]	; 0x90
 8021a30:	4121      	asrs	r1, r4
 8021a32:	b2c9      	uxtb	r1, r1
 8021a34:	9b07      	ldr	r3, [sp, #28]
 8021a36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021a3a:	445b      	add	r3, fp
 8021a3c:	9307      	str	r3, [sp, #28]
 8021a3e:	e72a      	b.n	8021896 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 8021a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d1d9      	bne.n	80219fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021a46:	4b04      	ldr	r3, [pc, #16]	; (8021a58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8021a48:	6818      	ldr	r0, [r3, #0]
 8021a4a:	6803      	ldr	r3, [r0, #0]
 8021a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a4e:	4798      	blx	r3
 8021a50:	e7d3      	b.n	80219fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8021a52:	bf00      	nop
 8021a54:	2000bee6 	.word	0x2000bee6
 8021a58:	2000bef0 	.word	0x2000bef0
 8021a5c:	2000bee8 	.word	0x2000bee8
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	f43f aea9 	beq.w	80217b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021a66:	2180      	movs	r1, #128	; 0x80
 8021a68:	e79a      	b.n	80219a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8021a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a6c:	b11b      	cbz	r3, 8021a76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8021a6e:	07fb      	lsls	r3, r7, #31
 8021a70:	d501      	bpl.n	8021a76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8021a72:	3701      	adds	r7, #1
 8021a74:	b2bf      	uxth	r7, r7
 8021a76:	2211      	movs	r2, #17
 8021a78:	e6c5      	b.n	8021806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021a7a:	2255      	movs	r2, #85	; 0x55
 8021a7c:	e6c3      	b.n	8021806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021a7e:	bf00      	nop

08021a80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021a80:	b538      	push	{r3, r4, r5, lr}
 8021a82:	4c15      	ldr	r4, [pc, #84]	; (8021ad8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021a84:	4605      	mov	r5, r0
 8021a86:	7823      	ldrb	r3, [r4, #0]
 8021a88:	f3bf 8f5b 	dmb	ish
 8021a8c:	07da      	lsls	r2, r3, #31
 8021a8e:	d40b      	bmi.n	8021aa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021a90:	4620      	mov	r0, r4
 8021a92:	f006 fd5b 	bl	802854c <__cxa_guard_acquire>
 8021a96:	b138      	cbz	r0, 8021aa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021a98:	4620      	mov	r0, r4
 8021a9a:	f006 fd63 	bl	8028564 <__cxa_guard_release>
 8021a9e:	4a0f      	ldr	r2, [pc, #60]	; (8021adc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021aa0:	490f      	ldr	r1, [pc, #60]	; (8021ae0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021aa2:	4810      	ldr	r0, [pc, #64]	; (8021ae4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021aa4:	f006 fd4b 	bl	802853e <__aeabi_atexit>
 8021aa8:	4c0f      	ldr	r4, [pc, #60]	; (8021ae8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021aaa:	7823      	ldrb	r3, [r4, #0]
 8021aac:	f3bf 8f5b 	dmb	ish
 8021ab0:	07db      	lsls	r3, r3, #31
 8021ab2:	d40b      	bmi.n	8021acc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021ab4:	4620      	mov	r0, r4
 8021ab6:	f006 fd49 	bl	802854c <__cxa_guard_acquire>
 8021aba:	b138      	cbz	r0, 8021acc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021abc:	4620      	mov	r0, r4
 8021abe:	f006 fd51 	bl	8028564 <__cxa_guard_release>
 8021ac2:	4a06      	ldr	r2, [pc, #24]	; (8021adc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021ac4:	4909      	ldr	r1, [pc, #36]	; (8021aec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021ac6:	480a      	ldr	r0, [pc, #40]	; (8021af0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021ac8:	f006 fd39 	bl	802853e <__aeabi_atexit>
 8021acc:	4b05      	ldr	r3, [pc, #20]	; (8021ae4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021ace:	612b      	str	r3, [r5, #16]
 8021ad0:	4b07      	ldr	r3, [pc, #28]	; (8021af0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021ad2:	616b      	str	r3, [r5, #20]
 8021ad4:	bd38      	pop	{r3, r4, r5, pc}
 8021ad6:	bf00      	nop
 8021ad8:	2000bffc 	.word	0x2000bffc
 8021adc:	20000000 	.word	0x20000000
 8021ae0:	080206b7 	.word	0x080206b7
 8021ae4:	200000c4 	.word	0x200000c4
 8021ae8:	2000c000 	.word	0x2000c000
 8021aec:	080206b5 	.word	0x080206b5
 8021af0:	200000c8 	.word	0x200000c8

08021af4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021af4:	b538      	push	{r3, r4, r5, lr}
 8021af6:	4c15      	ldr	r4, [pc, #84]	; (8021b4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021af8:	4605      	mov	r5, r0
 8021afa:	7823      	ldrb	r3, [r4, #0]
 8021afc:	f3bf 8f5b 	dmb	ish
 8021b00:	07da      	lsls	r2, r3, #31
 8021b02:	d40b      	bmi.n	8021b1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021b04:	4620      	mov	r0, r4
 8021b06:	f006 fd21 	bl	802854c <__cxa_guard_acquire>
 8021b0a:	b138      	cbz	r0, 8021b1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021b0c:	4620      	mov	r0, r4
 8021b0e:	f006 fd29 	bl	8028564 <__cxa_guard_release>
 8021b12:	4a0f      	ldr	r2, [pc, #60]	; (8021b50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021b14:	490f      	ldr	r1, [pc, #60]	; (8021b54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021b16:	4810      	ldr	r0, [pc, #64]	; (8021b58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021b18:	f006 fd11 	bl	802853e <__aeabi_atexit>
 8021b1c:	4c0f      	ldr	r4, [pc, #60]	; (8021b5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021b1e:	7823      	ldrb	r3, [r4, #0]
 8021b20:	f3bf 8f5b 	dmb	ish
 8021b24:	07db      	lsls	r3, r3, #31
 8021b26:	d40b      	bmi.n	8021b40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021b28:	4620      	mov	r0, r4
 8021b2a:	f006 fd0f 	bl	802854c <__cxa_guard_acquire>
 8021b2e:	b138      	cbz	r0, 8021b40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021b30:	4620      	mov	r0, r4
 8021b32:	f006 fd17 	bl	8028564 <__cxa_guard_release>
 8021b36:	4a06      	ldr	r2, [pc, #24]	; (8021b50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021b38:	4909      	ldr	r1, [pc, #36]	; (8021b60 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021b3a:	480a      	ldr	r0, [pc, #40]	; (8021b64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021b3c:	f006 fcff 	bl	802853e <__aeabi_atexit>
 8021b40:	4b05      	ldr	r3, [pc, #20]	; (8021b58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021b42:	60ab      	str	r3, [r5, #8]
 8021b44:	4b07      	ldr	r3, [pc, #28]	; (8021b64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021b46:	60eb      	str	r3, [r5, #12]
 8021b48:	bd38      	pop	{r3, r4, r5, pc}
 8021b4a:	bf00      	nop
 8021b4c:	2000bfdc 	.word	0x2000bfdc
 8021b50:	20000000 	.word	0x20000000
 8021b54:	080206bb 	.word	0x080206bb
 8021b58:	200000a4 	.word	0x200000a4
 8021b5c:	2000bfe0 	.word	0x2000bfe0
 8021b60:	080206b9 	.word	0x080206b9
 8021b64:	200000a8 	.word	0x200000a8

08021b68 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8021b68:	b510      	push	{r4, lr}
 8021b6a:	4604      	mov	r4, r0
 8021b6c:	f7ff ff88 	bl	8021a80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021b70:	4620      	mov	r0, r4
 8021b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b76:	f7ff bfbd 	b.w	8021af4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021b7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021b7c:	b538      	push	{r3, r4, r5, lr}
 8021b7e:	4c15      	ldr	r4, [pc, #84]	; (8021bd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021b80:	4605      	mov	r5, r0
 8021b82:	7823      	ldrb	r3, [r4, #0]
 8021b84:	f3bf 8f5b 	dmb	ish
 8021b88:	07da      	lsls	r2, r3, #31
 8021b8a:	d40b      	bmi.n	8021ba4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021b8c:	4620      	mov	r0, r4
 8021b8e:	f006 fcdd 	bl	802854c <__cxa_guard_acquire>
 8021b92:	b138      	cbz	r0, 8021ba4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021b94:	4620      	mov	r0, r4
 8021b96:	f006 fce5 	bl	8028564 <__cxa_guard_release>
 8021b9a:	4a0f      	ldr	r2, [pc, #60]	; (8021bd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021b9c:	490f      	ldr	r1, [pc, #60]	; (8021bdc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021b9e:	4810      	ldr	r0, [pc, #64]	; (8021be0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021ba0:	f006 fccd 	bl	802853e <__aeabi_atexit>
 8021ba4:	4c0f      	ldr	r4, [pc, #60]	; (8021be4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021ba6:	7823      	ldrb	r3, [r4, #0]
 8021ba8:	f3bf 8f5b 	dmb	ish
 8021bac:	07db      	lsls	r3, r3, #31
 8021bae:	d40b      	bmi.n	8021bc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021bb0:	4620      	mov	r0, r4
 8021bb2:	f006 fccb 	bl	802854c <__cxa_guard_acquire>
 8021bb6:	b138      	cbz	r0, 8021bc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021bb8:	4620      	mov	r0, r4
 8021bba:	f006 fcd3 	bl	8028564 <__cxa_guard_release>
 8021bbe:	4a06      	ldr	r2, [pc, #24]	; (8021bd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021bc0:	4909      	ldr	r1, [pc, #36]	; (8021be8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021bc2:	480a      	ldr	r0, [pc, #40]	; (8021bec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021bc4:	f006 fcbb 	bl	802853e <__aeabi_atexit>
 8021bc8:	4b05      	ldr	r3, [pc, #20]	; (8021be0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021bca:	622b      	str	r3, [r5, #32]
 8021bcc:	4b07      	ldr	r3, [pc, #28]	; (8021bec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021bce:	626b      	str	r3, [r5, #36]	; 0x24
 8021bd0:	bd38      	pop	{r3, r4, r5, pc}
 8021bd2:	bf00      	nop
 8021bd4:	2000c004 	.word	0x2000c004
 8021bd8:	20000000 	.word	0x20000000
 8021bdc:	080206af 	.word	0x080206af
 8021be0:	200000cc 	.word	0x200000cc
 8021be4:	2000c008 	.word	0x2000c008
 8021be8:	080206ad 	.word	0x080206ad
 8021bec:	200000d0 	.word	0x200000d0

08021bf0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021bf0:	b538      	push	{r3, r4, r5, lr}
 8021bf2:	4c15      	ldr	r4, [pc, #84]	; (8021c48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021bf4:	4605      	mov	r5, r0
 8021bf6:	7823      	ldrb	r3, [r4, #0]
 8021bf8:	f3bf 8f5b 	dmb	ish
 8021bfc:	07da      	lsls	r2, r3, #31
 8021bfe:	d40b      	bmi.n	8021c18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021c00:	4620      	mov	r0, r4
 8021c02:	f006 fca3 	bl	802854c <__cxa_guard_acquire>
 8021c06:	b138      	cbz	r0, 8021c18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021c08:	4620      	mov	r0, r4
 8021c0a:	f006 fcab 	bl	8028564 <__cxa_guard_release>
 8021c0e:	4a0f      	ldr	r2, [pc, #60]	; (8021c4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021c10:	490f      	ldr	r1, [pc, #60]	; (8021c50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021c12:	4810      	ldr	r0, [pc, #64]	; (8021c54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021c14:	f006 fc93 	bl	802853e <__aeabi_atexit>
 8021c18:	4c0f      	ldr	r4, [pc, #60]	; (8021c58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021c1a:	7823      	ldrb	r3, [r4, #0]
 8021c1c:	f3bf 8f5b 	dmb	ish
 8021c20:	07db      	lsls	r3, r3, #31
 8021c22:	d40b      	bmi.n	8021c3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021c24:	4620      	mov	r0, r4
 8021c26:	f006 fc91 	bl	802854c <__cxa_guard_acquire>
 8021c2a:	b138      	cbz	r0, 8021c3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021c2c:	4620      	mov	r0, r4
 8021c2e:	f006 fc99 	bl	8028564 <__cxa_guard_release>
 8021c32:	4a06      	ldr	r2, [pc, #24]	; (8021c4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021c34:	4909      	ldr	r1, [pc, #36]	; (8021c5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021c36:	480a      	ldr	r0, [pc, #40]	; (8021c60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021c38:	f006 fc81 	bl	802853e <__aeabi_atexit>
 8021c3c:	4b05      	ldr	r3, [pc, #20]	; (8021c54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021c3e:	61ab      	str	r3, [r5, #24]
 8021c40:	4b07      	ldr	r3, [pc, #28]	; (8021c60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021c42:	61eb      	str	r3, [r5, #28]
 8021c44:	bd38      	pop	{r3, r4, r5, pc}
 8021c46:	bf00      	nop
 8021c48:	2000bfe4 	.word	0x2000bfe4
 8021c4c:	20000000 	.word	0x20000000
 8021c50:	080206b3 	.word	0x080206b3
 8021c54:	200000ac 	.word	0x200000ac
 8021c58:	2000bfe8 	.word	0x2000bfe8
 8021c5c:	080206b1 	.word	0x080206b1
 8021c60:	200000b0 	.word	0x200000b0

08021c64 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021c64:	b510      	push	{r4, lr}
 8021c66:	4604      	mov	r4, r0
 8021c68:	f7ff ff88 	bl	8021b7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021c6c:	4620      	mov	r0, r4
 8021c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c72:	f7ff bfbd 	b.w	8021bf0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021c78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8021c78:	b538      	push	{r3, r4, r5, lr}
 8021c7a:	4c15      	ldr	r4, [pc, #84]	; (8021cd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8021c7c:	4605      	mov	r5, r0
 8021c7e:	7823      	ldrb	r3, [r4, #0]
 8021c80:	f3bf 8f5b 	dmb	ish
 8021c84:	07da      	lsls	r2, r3, #31
 8021c86:	d40b      	bmi.n	8021ca0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021c88:	4620      	mov	r0, r4
 8021c8a:	f006 fc5f 	bl	802854c <__cxa_guard_acquire>
 8021c8e:	b138      	cbz	r0, 8021ca0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021c90:	4620      	mov	r0, r4
 8021c92:	f006 fc67 	bl	8028564 <__cxa_guard_release>
 8021c96:	4a0f      	ldr	r2, [pc, #60]	; (8021cd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021c98:	490f      	ldr	r1, [pc, #60]	; (8021cd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8021c9a:	4810      	ldr	r0, [pc, #64]	; (8021cdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021c9c:	f006 fc4f 	bl	802853e <__aeabi_atexit>
 8021ca0:	4c0f      	ldr	r4, [pc, #60]	; (8021ce0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8021ca2:	7823      	ldrb	r3, [r4, #0]
 8021ca4:	f3bf 8f5b 	dmb	ish
 8021ca8:	07db      	lsls	r3, r3, #31
 8021caa:	d40b      	bmi.n	8021cc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021cac:	4620      	mov	r0, r4
 8021cae:	f006 fc4d 	bl	802854c <__cxa_guard_acquire>
 8021cb2:	b138      	cbz	r0, 8021cc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021cb4:	4620      	mov	r0, r4
 8021cb6:	f006 fc55 	bl	8028564 <__cxa_guard_release>
 8021cba:	4a06      	ldr	r2, [pc, #24]	; (8021cd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021cbc:	4909      	ldr	r1, [pc, #36]	; (8021ce4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8021cbe:	480a      	ldr	r0, [pc, #40]	; (8021ce8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021cc0:	f006 fc3d 	bl	802853e <__aeabi_atexit>
 8021cc4:	4b05      	ldr	r3, [pc, #20]	; (8021cdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021cc6:	632b      	str	r3, [r5, #48]	; 0x30
 8021cc8:	4b07      	ldr	r3, [pc, #28]	; (8021ce8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021cca:	636b      	str	r3, [r5, #52]	; 0x34
 8021ccc:	bd38      	pop	{r3, r4, r5, pc}
 8021cce:	bf00      	nop
 8021cd0:	2000bfec 	.word	0x2000bfec
 8021cd4:	20000000 	.word	0x20000000
 8021cd8:	080206a7 	.word	0x080206a7
 8021cdc:	200000b4 	.word	0x200000b4
 8021ce0:	2000bff0 	.word	0x2000bff0
 8021ce4:	080206a5 	.word	0x080206a5
 8021ce8:	200000b8 	.word	0x200000b8

08021cec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021cec:	b538      	push	{r3, r4, r5, lr}
 8021cee:	4c15      	ldr	r4, [pc, #84]	; (8021d44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8021cf0:	4605      	mov	r5, r0
 8021cf2:	7823      	ldrb	r3, [r4, #0]
 8021cf4:	f3bf 8f5b 	dmb	ish
 8021cf8:	07da      	lsls	r2, r3, #31
 8021cfa:	d40b      	bmi.n	8021d14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021cfc:	4620      	mov	r0, r4
 8021cfe:	f006 fc25 	bl	802854c <__cxa_guard_acquire>
 8021d02:	b138      	cbz	r0, 8021d14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021d04:	4620      	mov	r0, r4
 8021d06:	f006 fc2d 	bl	8028564 <__cxa_guard_release>
 8021d0a:	4a0f      	ldr	r2, [pc, #60]	; (8021d48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021d0c:	490f      	ldr	r1, [pc, #60]	; (8021d4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8021d0e:	4810      	ldr	r0, [pc, #64]	; (8021d50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021d10:	f006 fc15 	bl	802853e <__aeabi_atexit>
 8021d14:	4c0f      	ldr	r4, [pc, #60]	; (8021d54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8021d16:	7823      	ldrb	r3, [r4, #0]
 8021d18:	f3bf 8f5b 	dmb	ish
 8021d1c:	07db      	lsls	r3, r3, #31
 8021d1e:	d40b      	bmi.n	8021d38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021d20:	4620      	mov	r0, r4
 8021d22:	f006 fc13 	bl	802854c <__cxa_guard_acquire>
 8021d26:	b138      	cbz	r0, 8021d38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021d28:	4620      	mov	r0, r4
 8021d2a:	f006 fc1b 	bl	8028564 <__cxa_guard_release>
 8021d2e:	4a06      	ldr	r2, [pc, #24]	; (8021d48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021d30:	4909      	ldr	r1, [pc, #36]	; (8021d58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8021d32:	480a      	ldr	r0, [pc, #40]	; (8021d5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021d34:	f006 fc03 	bl	802853e <__aeabi_atexit>
 8021d38:	4b05      	ldr	r3, [pc, #20]	; (8021d50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021d3a:	62ab      	str	r3, [r5, #40]	; 0x28
 8021d3c:	4b07      	ldr	r3, [pc, #28]	; (8021d5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021d3e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021d40:	bd38      	pop	{r3, r4, r5, pc}
 8021d42:	bf00      	nop
 8021d44:	2000bfc4 	.word	0x2000bfc4
 8021d48:	20000000 	.word	0x20000000
 8021d4c:	080206ab 	.word	0x080206ab
 8021d50:	2000008c 	.word	0x2000008c
 8021d54:	2000bfc8 	.word	0x2000bfc8
 8021d58:	080206a9 	.word	0x080206a9
 8021d5c:	20000090 	.word	0x20000090

08021d60 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8021d60:	b510      	push	{r4, lr}
 8021d62:	4604      	mov	r4, r0
 8021d64:	f7ff ff88 	bl	8021c78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8021d68:	4620      	mov	r0, r4
 8021d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d6e:	f7ff bfbd 	b.w	8021cec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08021d74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021d74:	b538      	push	{r3, r4, r5, lr}
 8021d76:	4c15      	ldr	r4, [pc, #84]	; (8021dcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021d78:	4605      	mov	r5, r0
 8021d7a:	7823      	ldrb	r3, [r4, #0]
 8021d7c:	f3bf 8f5b 	dmb	ish
 8021d80:	07da      	lsls	r2, r3, #31
 8021d82:	d40b      	bmi.n	8021d9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021d84:	4620      	mov	r0, r4
 8021d86:	f006 fbe1 	bl	802854c <__cxa_guard_acquire>
 8021d8a:	b138      	cbz	r0, 8021d9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021d8c:	4620      	mov	r0, r4
 8021d8e:	f006 fbe9 	bl	8028564 <__cxa_guard_release>
 8021d92:	4a0f      	ldr	r2, [pc, #60]	; (8021dd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021d94:	490f      	ldr	r1, [pc, #60]	; (8021dd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021d96:	4810      	ldr	r0, [pc, #64]	; (8021dd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021d98:	f006 fbd1 	bl	802853e <__aeabi_atexit>
 8021d9c:	4c0f      	ldr	r4, [pc, #60]	; (8021ddc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021d9e:	7823      	ldrb	r3, [r4, #0]
 8021da0:	f3bf 8f5b 	dmb	ish
 8021da4:	07db      	lsls	r3, r3, #31
 8021da6:	d40b      	bmi.n	8021dc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021da8:	4620      	mov	r0, r4
 8021daa:	f006 fbcf 	bl	802854c <__cxa_guard_acquire>
 8021dae:	b138      	cbz	r0, 8021dc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021db0:	4620      	mov	r0, r4
 8021db2:	f006 fbd7 	bl	8028564 <__cxa_guard_release>
 8021db6:	4a06      	ldr	r2, [pc, #24]	; (8021dd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021db8:	4909      	ldr	r1, [pc, #36]	; (8021de0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021dba:	480a      	ldr	r0, [pc, #40]	; (8021de4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021dbc:	f006 fbbf 	bl	802853e <__aeabi_atexit>
 8021dc0:	4b05      	ldr	r3, [pc, #20]	; (8021dd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021dc2:	642b      	str	r3, [r5, #64]	; 0x40
 8021dc4:	4b07      	ldr	r3, [pc, #28]	; (8021de4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021dc6:	646b      	str	r3, [r5, #68]	; 0x44
 8021dc8:	bd38      	pop	{r3, r4, r5, pc}
 8021dca:	bf00      	nop
 8021dcc:	2000bff4 	.word	0x2000bff4
 8021dd0:	20000000 	.word	0x20000000
 8021dd4:	0802069f 	.word	0x0802069f
 8021dd8:	200000bc 	.word	0x200000bc
 8021ddc:	2000bff8 	.word	0x2000bff8
 8021de0:	0802069d 	.word	0x0802069d
 8021de4:	200000c0 	.word	0x200000c0

08021de8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021de8:	b538      	push	{r3, r4, r5, lr}
 8021dea:	4c15      	ldr	r4, [pc, #84]	; (8021e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021dec:	4605      	mov	r5, r0
 8021dee:	7823      	ldrb	r3, [r4, #0]
 8021df0:	f3bf 8f5b 	dmb	ish
 8021df4:	07da      	lsls	r2, r3, #31
 8021df6:	d40b      	bmi.n	8021e10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021df8:	4620      	mov	r0, r4
 8021dfa:	f006 fba7 	bl	802854c <__cxa_guard_acquire>
 8021dfe:	b138      	cbz	r0, 8021e10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021e00:	4620      	mov	r0, r4
 8021e02:	f006 fbaf 	bl	8028564 <__cxa_guard_release>
 8021e06:	4a0f      	ldr	r2, [pc, #60]	; (8021e44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021e08:	490f      	ldr	r1, [pc, #60]	; (8021e48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021e0a:	4810      	ldr	r0, [pc, #64]	; (8021e4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021e0c:	f006 fb97 	bl	802853e <__aeabi_atexit>
 8021e10:	4c0f      	ldr	r4, [pc, #60]	; (8021e50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021e12:	7823      	ldrb	r3, [r4, #0]
 8021e14:	f3bf 8f5b 	dmb	ish
 8021e18:	07db      	lsls	r3, r3, #31
 8021e1a:	d40b      	bmi.n	8021e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021e1c:	4620      	mov	r0, r4
 8021e1e:	f006 fb95 	bl	802854c <__cxa_guard_acquire>
 8021e22:	b138      	cbz	r0, 8021e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021e24:	4620      	mov	r0, r4
 8021e26:	f006 fb9d 	bl	8028564 <__cxa_guard_release>
 8021e2a:	4a06      	ldr	r2, [pc, #24]	; (8021e44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021e2c:	4909      	ldr	r1, [pc, #36]	; (8021e54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021e2e:	480a      	ldr	r0, [pc, #40]	; (8021e58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021e30:	f006 fb85 	bl	802853e <__aeabi_atexit>
 8021e34:	4b05      	ldr	r3, [pc, #20]	; (8021e4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021e36:	63ab      	str	r3, [r5, #56]	; 0x38
 8021e38:	4b07      	ldr	r3, [pc, #28]	; (8021e58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021e3a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021e3c:	bd38      	pop	{r3, r4, r5, pc}
 8021e3e:	bf00      	nop
 8021e40:	2000bfd4 	.word	0x2000bfd4
 8021e44:	20000000 	.word	0x20000000
 8021e48:	080206a3 	.word	0x080206a3
 8021e4c:	2000009c 	.word	0x2000009c
 8021e50:	2000bfd8 	.word	0x2000bfd8
 8021e54:	080206a1 	.word	0x080206a1
 8021e58:	200000a0 	.word	0x200000a0

08021e5c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8021e5c:	b510      	push	{r4, lr}
 8021e5e:	4604      	mov	r4, r0
 8021e60:	f7ff ff88 	bl	8021d74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021e64:	4620      	mov	r0, r4
 8021e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e6a:	f7ff bfbd 	b.w	8021de8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021e70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021e70:	b538      	push	{r3, r4, r5, lr}
 8021e72:	4c15      	ldr	r4, [pc, #84]	; (8021ec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021e74:	4605      	mov	r5, r0
 8021e76:	7823      	ldrb	r3, [r4, #0]
 8021e78:	f3bf 8f5b 	dmb	ish
 8021e7c:	07da      	lsls	r2, r3, #31
 8021e7e:	d40b      	bmi.n	8021e98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021e80:	4620      	mov	r0, r4
 8021e82:	f006 fb63 	bl	802854c <__cxa_guard_acquire>
 8021e86:	b138      	cbz	r0, 8021e98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021e88:	4620      	mov	r0, r4
 8021e8a:	f006 fb6b 	bl	8028564 <__cxa_guard_release>
 8021e8e:	4a0f      	ldr	r2, [pc, #60]	; (8021ecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021e90:	490f      	ldr	r1, [pc, #60]	; (8021ed0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021e92:	4810      	ldr	r0, [pc, #64]	; (8021ed4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021e94:	f006 fb53 	bl	802853e <__aeabi_atexit>
 8021e98:	4c0f      	ldr	r4, [pc, #60]	; (8021ed8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021e9a:	7823      	ldrb	r3, [r4, #0]
 8021e9c:	f3bf 8f5b 	dmb	ish
 8021ea0:	07db      	lsls	r3, r3, #31
 8021ea2:	d40b      	bmi.n	8021ebc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021ea4:	4620      	mov	r0, r4
 8021ea6:	f006 fb51 	bl	802854c <__cxa_guard_acquire>
 8021eaa:	b138      	cbz	r0, 8021ebc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021eac:	4620      	mov	r0, r4
 8021eae:	f006 fb59 	bl	8028564 <__cxa_guard_release>
 8021eb2:	4a06      	ldr	r2, [pc, #24]	; (8021ecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021eb4:	4909      	ldr	r1, [pc, #36]	; (8021edc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021eb6:	480a      	ldr	r0, [pc, #40]	; (8021ee0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021eb8:	f006 fb41 	bl	802853e <__aeabi_atexit>
 8021ebc:	4b05      	ldr	r3, [pc, #20]	; (8021ed4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021ebe:	652b      	str	r3, [r5, #80]	; 0x50
 8021ec0:	4b07      	ldr	r3, [pc, #28]	; (8021ee0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021ec2:	656b      	str	r3, [r5, #84]	; 0x54
 8021ec4:	bd38      	pop	{r3, r4, r5, pc}
 8021ec6:	bf00      	nop
 8021ec8:	2000bfcc 	.word	0x2000bfcc
 8021ecc:	20000000 	.word	0x20000000
 8021ed0:	08020697 	.word	0x08020697
 8021ed4:	20000094 	.word	0x20000094
 8021ed8:	2000bfd0 	.word	0x2000bfd0
 8021edc:	08020695 	.word	0x08020695
 8021ee0:	20000098 	.word	0x20000098

08021ee4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021ee4:	b538      	push	{r3, r4, r5, lr}
 8021ee6:	4c15      	ldr	r4, [pc, #84]	; (8021f3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021ee8:	4605      	mov	r5, r0
 8021eea:	7823      	ldrb	r3, [r4, #0]
 8021eec:	f3bf 8f5b 	dmb	ish
 8021ef0:	07da      	lsls	r2, r3, #31
 8021ef2:	d40b      	bmi.n	8021f0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021ef4:	4620      	mov	r0, r4
 8021ef6:	f006 fb29 	bl	802854c <__cxa_guard_acquire>
 8021efa:	b138      	cbz	r0, 8021f0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021efc:	4620      	mov	r0, r4
 8021efe:	f006 fb31 	bl	8028564 <__cxa_guard_release>
 8021f02:	4a0f      	ldr	r2, [pc, #60]	; (8021f40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021f04:	490f      	ldr	r1, [pc, #60]	; (8021f44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021f06:	4810      	ldr	r0, [pc, #64]	; (8021f48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021f08:	f006 fb19 	bl	802853e <__aeabi_atexit>
 8021f0c:	4c0f      	ldr	r4, [pc, #60]	; (8021f4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021f0e:	7823      	ldrb	r3, [r4, #0]
 8021f10:	f3bf 8f5b 	dmb	ish
 8021f14:	07db      	lsls	r3, r3, #31
 8021f16:	d40b      	bmi.n	8021f30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021f18:	4620      	mov	r0, r4
 8021f1a:	f006 fb17 	bl	802854c <__cxa_guard_acquire>
 8021f1e:	b138      	cbz	r0, 8021f30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021f20:	4620      	mov	r0, r4
 8021f22:	f006 fb1f 	bl	8028564 <__cxa_guard_release>
 8021f26:	4a06      	ldr	r2, [pc, #24]	; (8021f40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021f28:	4909      	ldr	r1, [pc, #36]	; (8021f50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021f2a:	480a      	ldr	r0, [pc, #40]	; (8021f54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021f2c:	f006 fb07 	bl	802853e <__aeabi_atexit>
 8021f30:	4b05      	ldr	r3, [pc, #20]	; (8021f48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021f32:	64ab      	str	r3, [r5, #72]	; 0x48
 8021f34:	4b07      	ldr	r3, [pc, #28]	; (8021f54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021f36:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021f38:	bd38      	pop	{r3, r4, r5, pc}
 8021f3a:	bf00      	nop
 8021f3c:	2000bfbc 	.word	0x2000bfbc
 8021f40:	20000000 	.word	0x20000000
 8021f44:	0802069b 	.word	0x0802069b
 8021f48:	20000084 	.word	0x20000084
 8021f4c:	2000bfc0 	.word	0x2000bfc0
 8021f50:	08020699 	.word	0x08020699
 8021f54:	20000088 	.word	0x20000088

08021f58 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8021f58:	b510      	push	{r4, lr}
 8021f5a:	4604      	mov	r4, r0
 8021f5c:	f7ff ff88 	bl	8021e70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021f60:	4620      	mov	r0, r4
 8021f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f66:	f7ff bfbd 	b.w	8021ee4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08021f6a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8021f6a:	b510      	push	{r4, lr}
 8021f6c:	4604      	mov	r4, r0
 8021f6e:	f7ff fff3 	bl	8021f58 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8021f72:	4620      	mov	r0, r4
 8021f74:	f7ff ff72 	bl	8021e5c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8021f78:	4620      	mov	r0, r4
 8021f7a:	f7ff fe73 	bl	8021c64 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8021f7e:	4620      	mov	r0, r4
 8021f80:	f7ff fdf2 	bl	8021b68 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8021f84:	4620      	mov	r0, r4
 8021f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f8a:	f7ff bee9 	b.w	8021d60 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08021f90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8021f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f94:	b087      	sub	sp, #28
 8021f96:	7888      	ldrb	r0, [r1, #2]
 8021f98:	4616      	mov	r6, r2
 8021f9a:	9001      	str	r0, [sp, #4]
 8021f9c:	7848      	ldrb	r0, [r1, #1]
 8021f9e:	9100      	str	r1, [sp, #0]
 8021fa0:	9002      	str	r0, [sp, #8]
 8021fa2:	7808      	ldrb	r0, [r1, #0]
 8021fa4:	9901      	ldr	r1, [sp, #4]
 8021fa6:	9003      	str	r0, [sp, #12]
 8021fa8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021fac:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8021fb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8021fb4:	9902      	ldr	r1, [sp, #8]
 8021fb6:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8021fba:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8021fbe:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8021fc2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8021fc6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8021fca:	9005      	str	r0, [sp, #20]
 8021fcc:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8021fd0:	fb05 ca0e 	mla	sl, r5, lr, ip
 8021fd4:	2d00      	cmp	r5, #0
 8021fd6:	eb06 080a 	add.w	r8, r6, sl
 8021fda:	db4a      	blt.n	8022072 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021fdc:	45a9      	cmp	r9, r5
 8021fde:	dd48      	ble.n	8022072 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021fe0:	f1bc 0f00 	cmp.w	ip, #0
 8021fe4:	db43      	blt.n	802206e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8021fe6:	45e6      	cmp	lr, ip
 8021fe8:	dd41      	ble.n	802206e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8021fea:	f816 600a 	ldrb.w	r6, [r6, sl]
 8021fee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021ff2:	441e      	add	r6, r3
 8021ff4:	f11c 0001 	adds.w	r0, ip, #1
 8021ff8:	d43e      	bmi.n	8022078 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021ffa:	4586      	cmp	lr, r0
 8021ffc:	dd3c      	ble.n	8022078 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021ffe:	2a00      	cmp	r2, #0
 8022000:	d03a      	beq.n	8022078 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8022002:	f898 0001 	ldrb.w	r0, [r8, #1]
 8022006:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802200a:	4418      	add	r0, r3
 802200c:	3501      	adds	r5, #1
 802200e:	d437      	bmi.n	8022080 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8022010:	45a9      	cmp	r9, r5
 8022012:	dd35      	ble.n	8022080 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8022014:	b3a4      	cbz	r4, 8022080 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8022016:	f1bc 0f00 	cmp.w	ip, #0
 802201a:	db2f      	blt.n	802207c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 802201c:	45e6      	cmp	lr, ip
 802201e:	dd2d      	ble.n	802207c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8022020:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022028:	441d      	add	r5, r3
 802202a:	f11c 0c01 	adds.w	ip, ip, #1
 802202e:	d42a      	bmi.n	8022086 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8022030:	45e6      	cmp	lr, ip
 8022032:	dd28      	ble.n	8022086 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8022034:	b33a      	cbz	r2, 8022086 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8022036:	44c6      	add	lr, r8
 8022038:	f89e c001 	ldrb.w	ip, [lr, #1]
 802203c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022040:	4463      	add	r3, ip
 8022042:	ea6f 0c07 	mvn.w	ip, r7
 8022046:	2a0f      	cmp	r2, #15
 8022048:	f896 a000 	ldrb.w	sl, [r6]
 802204c:	fa5f fc8c 	uxtb.w	ip, ip
 8022050:	f890 b000 	ldrb.w	fp, [r0]
 8022054:	f895 9000 	ldrb.w	r9, [r5]
 8022058:	7819      	ldrb	r1, [r3, #0]
 802205a:	d801      	bhi.n	8022060 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 802205c:	2c0f      	cmp	r4, #15
 802205e:	d914      	bls.n	802208a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 8022060:	4b40      	ldr	r3, [pc, #256]	; (8022164 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8022062:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022066:	4a40      	ldr	r2, [pc, #256]	; (8022168 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8022068:	4840      	ldr	r0, [pc, #256]	; (802216c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 802206a:	f006 fa9b 	bl	80285a4 <__assert_func>
 802206e:	ae05      	add	r6, sp, #20
 8022070:	e7c0      	b.n	8021ff4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8022072:	a805      	add	r0, sp, #20
 8022074:	4606      	mov	r6, r0
 8022076:	e7c9      	b.n	802200c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8022078:	a805      	add	r0, sp, #20
 802207a:	e7c7      	b.n	802200c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 802207c:	ad05      	add	r5, sp, #20
 802207e:	e7d4      	b.n	802202a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8022080:	ab05      	add	r3, sp, #20
 8022082:	461d      	mov	r5, r3
 8022084:	e7dd      	b.n	8022042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8022086:	ab05      	add	r3, sp, #20
 8022088:	e7db      	b.n	8022042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 802208a:	b292      	uxth	r2, r2
 802208c:	b2a4      	uxth	r4, r4
 802208e:	fa1f fc8c 	uxth.w	ip, ip
 8022092:	fb02 f804 	mul.w	r8, r2, r4
 8022096:	0112      	lsls	r2, r2, #4
 8022098:	b2bf      	uxth	r7, r7
 802209a:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 802209e:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80220a2:	eba2 0208 	sub.w	r2, r2, r8
 80220a6:	b2a4      	uxth	r4, r4
 80220a8:	b292      	uxth	r2, r2
 80220aa:	ebae 0e04 	sub.w	lr, lr, r4
 80220ae:	fb02 fb0b 	mul.w	fp, r2, fp
 80220b2:	fa1f fe8e 	uxth.w	lr, lr
 80220b6:	fb0e ba0a 	mla	sl, lr, sl, fp
 80220ba:	fb04 aa09 	mla	sl, r4, r9, sl
 80220be:	fb08 aa01 	mla	sl, r8, r1, sl
 80220c2:	9903      	ldr	r1, [sp, #12]
 80220c4:	fb11 f90c 	smulbb	r9, r1, ip
 80220c8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80220cc:	9900      	ldr	r1, [sp, #0]
 80220ce:	fb0a 9a07 	mla	sl, sl, r7, r9
 80220d2:	fa1f fa8a 	uxth.w	sl, sl
 80220d6:	f10a 0901 	add.w	r9, sl, #1
 80220da:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 80220de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80220e2:	f881 a000 	strb.w	sl, [r1]
 80220e6:	f890 a001 	ldrb.w	sl, [r0, #1]
 80220ea:	f896 9001 	ldrb.w	r9, [r6, #1]
 80220ee:	fb02 fa0a 	mul.w	sl, r2, sl
 80220f2:	9902      	ldr	r1, [sp, #8]
 80220f4:	fb0e aa09 	mla	sl, lr, r9, sl
 80220f8:	f895 9001 	ldrb.w	r9, [r5, #1]
 80220fc:	fb04 aa09 	mla	sl, r4, r9, sl
 8022100:	f893 9001 	ldrb.w	r9, [r3, #1]
 8022104:	fb08 a909 	mla	r9, r8, r9, sl
 8022108:	fb11 fa0c 	smulbb	sl, r1, ip
 802210c:	9900      	ldr	r1, [sp, #0]
 802210e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022112:	fb09 a907 	mla	r9, r9, r7, sl
 8022116:	fa1f f989 	uxth.w	r9, r9
 802211a:	f109 0a01 	add.w	sl, r9, #1
 802211e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8022122:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022126:	f881 9001 	strb.w	r9, [r1, #1]
 802212a:	7880      	ldrb	r0, [r0, #2]
 802212c:	78b6      	ldrb	r6, [r6, #2]
 802212e:	4342      	muls	r2, r0
 8022130:	78a8      	ldrb	r0, [r5, #2]
 8022132:	789b      	ldrb	r3, [r3, #2]
 8022134:	fb0e 2206 	mla	r2, lr, r6, r2
 8022138:	fb04 2400 	mla	r4, r4, r0, r2
 802213c:	fb08 4803 	mla	r8, r8, r3, r4
 8022140:	9b01      	ldr	r3, [sp, #4]
 8022142:	fb13 fc0c 	smulbb	ip, r3, ip
 8022146:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802214a:	fb08 c707 	mla	r7, r8, r7, ip
 802214e:	b2bf      	uxth	r7, r7
 8022150:	f107 0c01 	add.w	ip, r7, #1
 8022154:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8022158:	123f      	asrs	r7, r7, #8
 802215a:	708f      	strb	r7, [r1, #2]
 802215c:	b007      	add	sp, #28
 802215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022162:	bf00      	nop
 8022164:	0802d8a7 	.word	0x0802d8a7
 8022168:	0802dd9e 	.word	0x0802dd9e
 802216c:	0802d970 	.word	0x0802d970

08022170 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022174:	ed2d 8b08 	vpush	{d8-d11}
 8022178:	b095      	sub	sp, #84	; 0x54
 802217a:	eeb0 aa40 	vmov.f32	s20, s0
 802217e:	eef0 9a60 	vmov.f32	s19, s1
 8022182:	930a      	str	r3, [sp, #40]	; 0x28
 8022184:	eeb0 9a41 	vmov.f32	s18, s2
 8022188:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802218c:	eeb0 8a62 	vmov.f32	s16, s5
 8022190:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8022192:	eef0 8a43 	vmov.f32	s17, s6
 8022196:	930c      	str	r3, [sp, #48]	; 0x30
 8022198:	eef0 ba44 	vmov.f32	s23, s8
 802219c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80221a0:	eeb0 ba64 	vmov.f32	s22, s9
 80221a4:	9013      	str	r0, [sp, #76]	; 0x4c
 80221a6:	eef0 aa45 	vmov.f32	s21, s10
 80221aa:	9310      	str	r3, [sp, #64]	; 0x40
 80221ac:	6860      	ldr	r0, [r4, #4]
 80221ae:	910f      	str	r1, [sp, #60]	; 0x3c
 80221b0:	9212      	str	r2, [sp, #72]	; 0x48
 80221b2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80221b4:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 80221b8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80221bc:	fb00 1303 	mla	r3, r0, r3, r1
 80221c0:	6821      	ldr	r1, [r4, #0]
 80221c2:	6854      	ldr	r4, [r2, #4]
 80221c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221c8:	18cb      	adds	r3, r1, r3
 80221ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80221cc:	6813      	ldr	r3, [r2, #0]
 80221ce:	930e      	str	r3, [sp, #56]	; 0x38
 80221d0:	1d23      	adds	r3, r4, #4
 80221d2:	9309      	str	r3, [sp, #36]	; 0x24
 80221d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80221d6:	43db      	mvns	r3, r3
 80221d8:	b2db      	uxtb	r3, r3
 80221da:	930d      	str	r3, [sp, #52]	; 0x34
 80221dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80221de:	2b00      	cmp	r3, #0
 80221e0:	dc03      	bgt.n	80221ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80221e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	f340 823c 	ble.w	8022662 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 80221ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	f340 8115 	ble.w	802241c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80221f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80221f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221f6:	1412      	asrs	r2, r2, #16
 80221f8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80221fc:	d431      	bmi.n	8022262 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80221fe:	1c51      	adds	r1, r2, #1
 8022200:	428d      	cmp	r5, r1
 8022202:	dd31      	ble.n	8022268 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022204:	2b00      	cmp	r3, #0
 8022206:	db2f      	blt.n	8022268 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022208:	1c59      	adds	r1, r3, #1
 802220a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802220c:	4288      	cmp	r0, r1
 802220e:	dd2b      	ble.n	8022268 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022212:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022214:	3b01      	subs	r3, #1
 8022216:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8022218:	fb02 1203 	mla	r2, r2, r3, r1
 802221c:	1412      	asrs	r2, r2, #16
 802221e:	d42d      	bmi.n	802227c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022220:	3201      	adds	r2, #1
 8022222:	4295      	cmp	r5, r2
 8022224:	dd2a      	ble.n	802227c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022226:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022228:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802222a:	fb02 1303 	mla	r3, r2, r3, r1
 802222e:	141b      	asrs	r3, r3, #16
 8022230:	d424      	bmi.n	802227c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022232:	3301      	adds	r3, #1
 8022234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022236:	429a      	cmp	r2, r3
 8022238:	dd20      	ble.n	802227c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802223a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802223c:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8022240:	f103 0c03 	add.w	ip, r3, #3
 8022244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022246:	9311      	str	r3, [sp, #68]	; 0x44
 8022248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802224a:	2b00      	cmp	r3, #0
 802224c:	f300 814f 	bgt.w	80224ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8022250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802225c:	441a      	add	r2, r3
 802225e:	920b      	str	r2, [sp, #44]	; 0x2c
 8022260:	e0de      	b.n	8022420 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022262:	1c51      	adds	r1, r2, #1
 8022264:	f040 80cb 	bne.w	80223fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022268:	42aa      	cmp	r2, r5
 802226a:	f280 80c8 	bge.w	80223fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802226e:	1c5f      	adds	r7, r3, #1
 8022270:	f2c0 80c5 	blt.w	80223fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022276:	4293      	cmp	r3, r2
 8022278:	f280 80c1 	bge.w	80223fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802227c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802227e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022280:	9311      	str	r3, [sp, #68]	; 0x44
 8022282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022284:	2b00      	cmp	r3, #0
 8022286:	dde3      	ble.n	8022250 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022288:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802228a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802228c:	141a      	asrs	r2, r3, #16
 802228e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022290:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022292:	1400      	asrs	r0, r0, #16
 8022294:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8022298:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802229c:	f100 810e 	bmi.w	80224bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80222a0:	1c46      	adds	r6, r0, #1
 80222a2:	42b5      	cmp	r5, r6
 80222a4:	f340 810c 	ble.w	80224c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80222a8:	2a00      	cmp	r2, #0
 80222aa:	f2c0 8109 	blt.w	80224c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80222ae:	1c56      	adds	r6, r2, #1
 80222b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80222b2:	42b4      	cmp	r4, r6
 80222b4:	f340 8104 	ble.w	80224c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80222b8:	fb02 0005 	mla	r0, r2, r5, r0
 80222bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80222be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80222c0:	f814 e000 	ldrb.w	lr, [r4, r0]
 80222c4:	4402      	add	r2, r0
 80222c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80222c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80222cc:	eb00 080e 	add.w	r8, r0, lr
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	f000 80e4 	beq.w	802249e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 80222d6:	f892 c001 	ldrb.w	ip, [r2, #1]
 80222da:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80222de:	4484      	add	ip, r0
 80222e0:	2900      	cmp	r1, #0
 80222e2:	f000 80e5 	beq.w	80224b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 80222e6:	1950      	adds	r0, r2, r5
 80222e8:	5d52      	ldrb	r2, [r2, r5]
 80222ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80222ec:	7840      	ldrb	r0, [r0, #1]
 80222ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80222f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80222f6:	4422      	add	r2, r4
 80222f8:	4420      	add	r0, r4
 80222fa:	b29b      	uxth	r3, r3
 80222fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80222fe:	b289      	uxth	r1, r1
 8022300:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8022304:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8022308:	fb03 fa01 	mul.w	sl, r3, r1
 802230c:	011b      	lsls	r3, r3, #4
 802230e:	f89c e000 	ldrb.w	lr, [ip]
 8022312:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8022316:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802231a:	eba3 030a 	sub.w	r3, r3, sl
 802231e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022320:	b289      	uxth	r1, r1
 8022322:	b29b      	uxth	r3, r3
 8022324:	eba9 0901 	sub.w	r9, r9, r1
 8022328:	fb03 fe0e 	mul.w	lr, r3, lr
 802232c:	fa1f f989 	uxth.w	r9, r9
 8022330:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022334:	f892 b000 	ldrb.w	fp, [r2]
 8022338:	fb01 ee0b 	mla	lr, r1, fp, lr
 802233c:	f890 b000 	ldrb.w	fp, [r0]
 8022340:	fb0a ee0b 	mla	lr, sl, fp, lr
 8022344:	f897 b000 	ldrb.w	fp, [r7]
 8022348:	fb1b fb04 	smulbb	fp, fp, r4
 802234c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022350:	fb0e be06 	mla	lr, lr, r6, fp
 8022354:	fa1f fe8e 	uxth.w	lr, lr
 8022358:	f10e 0b01 	add.w	fp, lr, #1
 802235c:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8022360:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8022364:	f887 b000 	strb.w	fp, [r7]
 8022368:	f89c e001 	ldrb.w	lr, [ip, #1]
 802236c:	f898 b001 	ldrb.w	fp, [r8, #1]
 8022370:	fb03 fe0e 	mul.w	lr, r3, lr
 8022374:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022378:	f892 b001 	ldrb.w	fp, [r2, #1]
 802237c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022380:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022384:	fb0a ee0b 	mla	lr, sl, fp, lr
 8022388:	f897 b001 	ldrb.w	fp, [r7, #1]
 802238c:	fb1b fb04 	smulbb	fp, fp, r4
 8022390:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022394:	fb0e be06 	mla	lr, lr, r6, fp
 8022398:	fa1f fe8e 	uxth.w	lr, lr
 802239c:	f10e 0b01 	add.w	fp, lr, #1
 80223a0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80223a4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80223a8:	f887 e001 	strb.w	lr, [r7, #1]
 80223ac:	f89c c002 	ldrb.w	ip, [ip, #2]
 80223b0:	f898 e002 	ldrb.w	lr, [r8, #2]
 80223b4:	fb03 f30c 	mul.w	r3, r3, ip
 80223b8:	fb09 330e 	mla	r3, r9, lr, r3
 80223bc:	f892 e002 	ldrb.w	lr, [r2, #2]
 80223c0:	7882      	ldrb	r2, [r0, #2]
 80223c2:	fb01 310e 	mla	r1, r1, lr, r3
 80223c6:	fb0a 1a02 	mla	sl, sl, r2, r1
 80223ca:	78b9      	ldrb	r1, [r7, #2]
 80223cc:	fb11 f104 	smulbb	r1, r1, r4
 80223d0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80223d4:	fb0a 1606 	mla	r6, sl, r6, r1
 80223d8:	b2b6      	uxth	r6, r6
 80223da:	1c73      	adds	r3, r6, #1
 80223dc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80223e0:	1236      	asrs	r6, r6, #8
 80223e2:	70be      	strb	r6, [r7, #2]
 80223e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80223e6:	3703      	adds	r7, #3
 80223e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80223ea:	4413      	add	r3, r2
 80223ec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80223ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80223f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80223f2:	4413      	add	r3, r2
 80223f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80223f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80223f8:	3b01      	subs	r3, #1
 80223fa:	9311      	str	r3, [sp, #68]	; 0x44
 80223fc:	e741      	b.n	8022282 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 80223fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022400:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022402:	4413      	add	r3, r2
 8022404:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022406:	9327      	str	r3, [sp, #156]	; 0x9c
 8022408:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802240a:	4413      	add	r3, r2
 802240c:	9328      	str	r3, [sp, #160]	; 0xa0
 802240e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022410:	3b01      	subs	r3, #1
 8022412:	930a      	str	r3, [sp, #40]	; 0x28
 8022414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022416:	3303      	adds	r3, #3
 8022418:	930b      	str	r3, [sp, #44]	; 0x2c
 802241a:	e6e6      	b.n	80221ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802241c:	f47f aef8 	bne.w	8022210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8022420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022422:	2b00      	cmp	r3, #0
 8022424:	f340 811d 	ble.w	8022662 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8022428:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802242c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802242e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022432:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022436:	eef0 6a48 	vmov.f32	s13, s16
 802243a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802243e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022442:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022446:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 802244a:	eef0 6a68 	vmov.f32	s13, s17
 802244e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022452:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8022456:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802245a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802245e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022462:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022466:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802246a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802246e:	ee18 2a10 	vmov	r2, s16
 8022472:	eeb0 8a47 	vmov.f32	s16, s14
 8022476:	fb92 f3f3 	sdiv	r3, r2, r3
 802247a:	ee18 2a90 	vmov	r2, s17
 802247e:	9329      	str	r3, [sp, #164]	; 0xa4
 8022480:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022482:	eef0 8a67 	vmov.f32	s17, s15
 8022486:	fb92 f3f3 	sdiv	r3, r2, r3
 802248a:	932a      	str	r3, [sp, #168]	; 0xa8
 802248c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802248e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022490:	3b01      	subs	r3, #1
 8022492:	930f      	str	r3, [sp, #60]	; 0x3c
 8022494:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022496:	bf08      	it	eq
 8022498:	4613      	moveq	r3, r2
 802249a:	930a      	str	r3, [sp, #40]	; 0x28
 802249c:	e69e      	b.n	80221dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802249e:	b151      	cbz	r1, 80224b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80224a0:	5d52      	ldrb	r2, [r2, r5]
 80224a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80224a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80224a8:	4402      	add	r2, r0
 80224aa:	4640      	mov	r0, r8
 80224ac:	46c4      	mov	ip, r8
 80224ae:	e724      	b.n	80222fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80224b0:	4640      	mov	r0, r8
 80224b2:	4642      	mov	r2, r8
 80224b4:	e721      	b.n	80222fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80224b6:	4640      	mov	r0, r8
 80224b8:	4642      	mov	r2, r8
 80224ba:	e7f7      	b.n	80224ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 80224bc:	1c46      	adds	r6, r0, #1
 80224be:	d191      	bne.n	80223e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80224c0:	4285      	cmp	r5, r0
 80224c2:	dd8f      	ble.n	80223e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80224c4:	1c54      	adds	r4, r2, #1
 80224c6:	db8d      	blt.n	80223e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80224c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80224ca:	4294      	cmp	r4, r2
 80224cc:	dd8a      	ble.n	80223e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80224ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80224d0:	9002      	str	r0, [sp, #8]
 80224d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80224d4:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80224d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80224da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80224dc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80224e0:	e9cd 5300 	strd	r5, r3, [sp]
 80224e4:	4639      	mov	r1, r7
 80224e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224e8:	f7ff fd52 	bl	8021f90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80224ec:	e77a      	b.n	80223e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80224ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80224f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80224f2:	1410      	asrs	r0, r2, #16
 80224f4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80224f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80224fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80224fc:	1412      	asrs	r2, r2, #16
 80224fe:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022502:	fb05 2000 	mla	r0, r5, r0, r2
 8022506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022508:	f814 8000 	ldrb.w	r8, [r4, r0]
 802250c:	4402      	add	r2, r0
 802250e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022510:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022514:	eb00 0708 	add.w	r7, r0, r8
 8022518:	2b00      	cmp	r3, #0
 802251a:	f000 8093 	beq.w	8022644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802251e:	7856      	ldrb	r6, [r2, #1]
 8022520:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022524:	4406      	add	r6, r0
 8022526:	2900      	cmp	r1, #0
 8022528:	f000 8095 	beq.w	8022656 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802252c:	1950      	adds	r0, r2, r5
 802252e:	5d52      	ldrb	r2, [r2, r5]
 8022530:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022532:	7840      	ldrb	r0, [r0, #1]
 8022534:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022538:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802253c:	4422      	add	r2, r4
 802253e:	4420      	add	r0, r4
 8022540:	b29b      	uxth	r3, r3
 8022542:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022544:	b289      	uxth	r1, r1
 8022546:	f10c 0c03 	add.w	ip, ip, #3
 802254a:	f814 b008 	ldrb.w	fp, [r4, r8]
 802254e:	fb03 f901 	mul.w	r9, r3, r1
 8022552:	011b      	lsls	r3, r3, #4
 8022554:	f896 8000 	ldrb.w	r8, [r6]
 8022558:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802255c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022560:	eba3 0309 	sub.w	r3, r3, r9
 8022564:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022566:	b289      	uxth	r1, r1
 8022568:	b29b      	uxth	r3, r3
 802256a:	ebae 0e01 	sub.w	lr, lr, r1
 802256e:	fb03 f808 	mul.w	r8, r3, r8
 8022572:	fa1f fe8e 	uxth.w	lr, lr
 8022576:	fb0e 880b 	mla	r8, lr, fp, r8
 802257a:	f892 b000 	ldrb.w	fp, [r2]
 802257e:	fb01 880b 	mla	r8, r1, fp, r8
 8022582:	f890 b000 	ldrb.w	fp, [r0]
 8022586:	fb09 880b 	mla	r8, r9, fp, r8
 802258a:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 802258e:	fb1b fb04 	smulbb	fp, fp, r4
 8022592:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8022596:	fb08 b80a 	mla	r8, r8, sl, fp
 802259a:	fa1f f888 	uxth.w	r8, r8
 802259e:	f108 0b01 	add.w	fp, r8, #1
 80225a2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80225a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80225aa:	f80c 8c06 	strb.w	r8, [ip, #-6]
 80225ae:	f896 8001 	ldrb.w	r8, [r6, #1]
 80225b2:	f897 b001 	ldrb.w	fp, [r7, #1]
 80225b6:	fb03 f808 	mul.w	r8, r3, r8
 80225ba:	fb0e 880b 	mla	r8, lr, fp, r8
 80225be:	f892 b001 	ldrb.w	fp, [r2, #1]
 80225c2:	fb01 880b 	mla	r8, r1, fp, r8
 80225c6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80225ca:	fb09 880b 	mla	r8, r9, fp, r8
 80225ce:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 80225d2:	fb1b fb04 	smulbb	fp, fp, r4
 80225d6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80225da:	fb08 b80a 	mla	r8, r8, sl, fp
 80225de:	fa1f f888 	uxth.w	r8, r8
 80225e2:	f108 0b01 	add.w	fp, r8, #1
 80225e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80225ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 80225ee:	f80c 8c05 	strb.w	r8, [ip, #-5]
 80225f2:	78b6      	ldrb	r6, [r6, #2]
 80225f4:	78bf      	ldrb	r7, [r7, #2]
 80225f6:	4373      	muls	r3, r6
 80225f8:	7896      	ldrb	r6, [r2, #2]
 80225fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80225fc:	fb0e 3307 	mla	r3, lr, r7, r3
 8022600:	fb01 3306 	mla	r3, r1, r6, r3
 8022604:	7886      	ldrb	r6, [r0, #2]
 8022606:	fb09 3906 	mla	r9, r9, r6, r3
 802260a:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 802260e:	fb13 f304 	smulbb	r3, r3, r4
 8022612:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022616:	fb09 390a 	mla	r9, r9, sl, r3
 802261a:	fa1f f989 	uxth.w	r9, r9
 802261e:	f109 0301 	add.w	r3, r9, #1
 8022622:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022626:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022628:	4413      	add	r3, r2
 802262a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802262c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022630:	9327      	str	r3, [sp, #156]	; 0x9c
 8022632:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022634:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8022638:	4413      	add	r3, r2
 802263a:	9328      	str	r3, [sp, #160]	; 0xa0
 802263c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802263e:	3b01      	subs	r3, #1
 8022640:	9311      	str	r3, [sp, #68]	; 0x44
 8022642:	e601      	b.n	8022248 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022644:	b151      	cbz	r1, 802265c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8022646:	5d52      	ldrb	r2, [r2, r5]
 8022648:	9809      	ldr	r0, [sp, #36]	; 0x24
 802264a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802264e:	4402      	add	r2, r0
 8022650:	4638      	mov	r0, r7
 8022652:	463e      	mov	r6, r7
 8022654:	e774      	b.n	8022540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8022656:	4638      	mov	r0, r7
 8022658:	463a      	mov	r2, r7
 802265a:	e771      	b.n	8022540 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 802265c:	4638      	mov	r0, r7
 802265e:	463a      	mov	r2, r7
 8022660:	e7f7      	b.n	8022652 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022662:	b015      	add	sp, #84	; 0x54
 8022664:	ecbd 8b08 	vpop	{d8-d11}
 8022668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802266c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 802266c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022670:	780d      	ldrb	r5, [r1, #0]
 8022672:	f891 9002 	ldrb.w	r9, [r1, #2]
 8022676:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 802267a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802267e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8022682:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8022686:	f891 9001 	ldrb.w	r9, [r1, #1]
 802268a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802268e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8022692:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022696:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 802269a:	9501      	str	r5, [sp, #4]
 802269c:	fb06 470c 	mla	r7, r6, ip, r4
 80226a0:	2e00      	cmp	r6, #0
 80226a2:	eb02 0e07 	add.w	lr, r2, r7
 80226a6:	db46      	blt.n	8022736 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80226a8:	45b0      	cmp	r8, r6
 80226aa:	dd44      	ble.n	8022736 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 80226ac:	2c00      	cmp	r4, #0
 80226ae:	db40      	blt.n	8022732 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80226b0:	45a4      	cmp	ip, r4
 80226b2:	dd3e      	ble.n	8022732 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 80226b4:	5dd7      	ldrb	r7, [r2, r7]
 80226b6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80226ba:	441f      	add	r7, r3
 80226bc:	1c62      	adds	r2, r4, #1
 80226be:	d43d      	bmi.n	802273c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80226c0:	4594      	cmp	ip, r2
 80226c2:	dd3b      	ble.n	802273c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80226c4:	f1ba 0f00 	cmp.w	sl, #0
 80226c8:	d038      	beq.n	802273c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80226ca:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80226ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80226d2:	441d      	add	r5, r3
 80226d4:	3601      	adds	r6, #1
 80226d6:	d435      	bmi.n	8022744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80226d8:	45b0      	cmp	r8, r6
 80226da:	dd33      	ble.n	8022744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80226dc:	b390      	cbz	r0, 8022744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80226de:	2c00      	cmp	r4, #0
 80226e0:	db2e      	blt.n	8022740 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80226e2:	45a4      	cmp	ip, r4
 80226e4:	dd2c      	ble.n	8022740 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80226e6:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80226ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80226ee:	441e      	add	r6, r3
 80226f0:	1c62      	adds	r2, r4, #1
 80226f2:	d42a      	bmi.n	802274a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80226f4:	4594      	cmp	ip, r2
 80226f6:	dd28      	ble.n	802274a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80226f8:	f1ba 0f00 	cmp.w	sl, #0
 80226fc:	d025      	beq.n	802274a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80226fe:	44f4      	add	ip, lr
 8022700:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022704:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022708:	4413      	add	r3, r2
 802270a:	f1ba 0f0f 	cmp.w	sl, #15
 802270e:	f897 8000 	ldrb.w	r8, [r7]
 8022712:	f895 9000 	ldrb.w	r9, [r5]
 8022716:	f896 e000 	ldrb.w	lr, [r6]
 802271a:	f893 c000 	ldrb.w	ip, [r3]
 802271e:	d801      	bhi.n	8022724 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8022720:	280f      	cmp	r0, #15
 8022722:	d914      	bls.n	802274e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8022724:	4b29      	ldr	r3, [pc, #164]	; (80227cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8022726:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802272a:	4a29      	ldr	r2, [pc, #164]	; (80227d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 802272c:	4829      	ldr	r0, [pc, #164]	; (80227d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 802272e:	f005 ff39 	bl	80285a4 <__assert_func>
 8022732:	af01      	add	r7, sp, #4
 8022734:	e7c2      	b.n	80226bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8022736:	ad01      	add	r5, sp, #4
 8022738:	462f      	mov	r7, r5
 802273a:	e7cb      	b.n	80226d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802273c:	ad01      	add	r5, sp, #4
 802273e:	e7c9      	b.n	80226d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8022740:	ae01      	add	r6, sp, #4
 8022742:	e7d5      	b.n	80226f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8022744:	ab01      	add	r3, sp, #4
 8022746:	461e      	mov	r6, r3
 8022748:	e7df      	b.n	802270a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 802274a:	ab01      	add	r3, sp, #4
 802274c:	e7dd      	b.n	802270a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 802274e:	fa1f f48a 	uxth.w	r4, sl
 8022752:	b280      	uxth	r0, r0
 8022754:	fb04 fa00 	mul.w	sl, r4, r0
 8022758:	0124      	lsls	r4, r4, #4
 802275a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802275e:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8022762:	b282      	uxth	r2, r0
 8022764:	eba4 000a 	sub.w	r0, r4, sl
 8022768:	ebab 0b02 	sub.w	fp, fp, r2
 802276c:	b280      	uxth	r0, r0
 802276e:	fa1f fb8b 	uxth.w	fp, fp
 8022772:	fb00 f909 	mul.w	r9, r0, r9
 8022776:	fb0b 9808 	mla	r8, fp, r8, r9
 802277a:	fb02 8e0e 	mla	lr, r2, lr, r8
 802277e:	fb0a ec0c 	mla	ip, sl, ip, lr
 8022782:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022786:	f881 c000 	strb.w	ip, [r1]
 802278a:	786c      	ldrb	r4, [r5, #1]
 802278c:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022790:	4344      	muls	r4, r0
 8022792:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8022796:	7874      	ldrb	r4, [r6, #1]
 8022798:	fb02 cc04 	mla	ip, r2, r4, ip
 802279c:	785c      	ldrb	r4, [r3, #1]
 802279e:	fb0a c404 	mla	r4, sl, r4, ip
 80227a2:	1224      	asrs	r4, r4, #8
 80227a4:	704c      	strb	r4, [r1, #1]
 80227a6:	78ad      	ldrb	r5, [r5, #2]
 80227a8:	78bc      	ldrb	r4, [r7, #2]
 80227aa:	4368      	muls	r0, r5
 80227ac:	fb0b 0b04 	mla	fp, fp, r4, r0
 80227b0:	78b0      	ldrb	r0, [r6, #2]
 80227b2:	fb02 b000 	mla	r0, r2, r0, fp
 80227b6:	789a      	ldrb	r2, [r3, #2]
 80227b8:	fb0a 0a02 	mla	sl, sl, r2, r0
 80227bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80227c0:	f881 a002 	strb.w	sl, [r1, #2]
 80227c4:	b003      	add	sp, #12
 80227c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ca:	bf00      	nop
 80227cc:	0802d8a7 	.word	0x0802d8a7
 80227d0:	0802dd9e 	.word	0x0802dd9e
 80227d4:	0802d970 	.word	0x0802d970

080227d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80227d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227dc:	ed2d 8b0a 	vpush	{d8-d12}
 80227e0:	b08f      	sub	sp, #60	; 0x3c
 80227e2:	eeb0 aa40 	vmov.f32	s20, s0
 80227e6:	eef0 9a60 	vmov.f32	s19, s1
 80227ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80227ec:	eeb0 9a41 	vmov.f32	s18, s2
 80227f0:	9307      	str	r3, [sp, #28]
 80227f2:	eeb0 8a62 	vmov.f32	s16, s5
 80227f6:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80227fa:	eef0 8a43 	vmov.f32	s17, s6
 80227fe:	900d      	str	r0, [sp, #52]	; 0x34
 8022800:	eeb0 ca44 	vmov.f32	s24, s8
 8022804:	6860      	ldr	r0, [r4, #4]
 8022806:	eef0 ba64 	vmov.f32	s23, s9
 802280a:	9309      	str	r3, [sp, #36]	; 0x24
 802280c:	eeb0 ba45 	vmov.f32	s22, s10
 8022810:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022814:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8022818:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 802281c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8022820:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022822:	fb00 1303 	mla	r3, r0, r3, r1
 8022826:	6821      	ldr	r1, [r4, #0]
 8022828:	6854      	ldr	r4, [r2, #4]
 802282a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802282e:	3404      	adds	r4, #4
 8022830:	18cb      	adds	r3, r1, r3
 8022832:	9308      	str	r3, [sp, #32]
 8022834:	6813      	ldr	r3, [r2, #0]
 8022836:	930a      	str	r3, [sp, #40]	; 0x28
 8022838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802283a:	2b00      	cmp	r3, #0
 802283c:	dc03      	bgt.n	8022846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802283e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022840:	2b00      	cmp	r3, #0
 8022842:	f340 81d2 	ble.w	8022bea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8022846:	9b07      	ldr	r3, [sp, #28]
 8022848:	2b00      	cmp	r3, #0
 802284a:	f340 80e3 	ble.w	8022a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 802284e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022850:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022852:	1412      	asrs	r2, r2, #16
 8022854:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022858:	d42f      	bmi.n	80228ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802285a:	1c51      	adds	r1, r2, #1
 802285c:	428d      	cmp	r5, r1
 802285e:	dd2f      	ble.n	80228c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022860:	2b00      	cmp	r3, #0
 8022862:	db2d      	blt.n	80228c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022864:	1c59      	adds	r1, r3, #1
 8022866:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022868:	4288      	cmp	r0, r1
 802286a:	dd29      	ble.n	80228c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802286c:	9b07      	ldr	r3, [sp, #28]
 802286e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022870:	3b01      	subs	r3, #1
 8022872:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8022874:	fb02 1203 	mla	r2, r2, r3, r1
 8022878:	1412      	asrs	r2, r2, #16
 802287a:	d42b      	bmi.n	80228d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802287c:	3201      	adds	r2, #1
 802287e:	4295      	cmp	r5, r2
 8022880:	dd28      	ble.n	80228d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022882:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022884:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022886:	fb02 1303 	mla	r3, r2, r3, r1
 802288a:	141b      	asrs	r3, r3, #16
 802288c:	d422      	bmi.n	80228d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802288e:	3301      	adds	r3, #1
 8022890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022892:	429a      	cmp	r2, r3
 8022894:	dd1e      	ble.n	80228d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022896:	9b08      	ldr	r3, [sp, #32]
 8022898:	f8dd a01c 	ldr.w	sl, [sp, #28]
 802289c:	f103 0803 	add.w	r8, r3, #3
 80228a0:	f1ba 0f00 	cmp.w	sl, #0
 80228a4:	f300 8119 	bgt.w	8022ada <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 80228a8:	9b07      	ldr	r3, [sp, #28]
 80228aa:	9a08      	ldr	r2, [sp, #32]
 80228ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80228b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80228b4:	441a      	add	r2, r3
 80228b6:	9208      	str	r2, [sp, #32]
 80228b8:	e0ae      	b.n	8022a18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 80228ba:	1c51      	adds	r1, r2, #1
 80228bc:	f040 809b 	bne.w	80229f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80228c0:	42aa      	cmp	r2, r5
 80228c2:	f280 8098 	bge.w	80229f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80228c6:	1c5a      	adds	r2, r3, #1
 80228c8:	f2c0 8095 	blt.w	80229f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80228cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228ce:	4293      	cmp	r3, r2
 80228d0:	f280 8091 	bge.w	80229f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80228d4:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80228d8:	f1bb 0f00 	cmp.w	fp, #0
 80228dc:	dde4      	ble.n	80228a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80228de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228e0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80228e2:	141a      	asrs	r2, r3, #16
 80228e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80228e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80228e8:	1400      	asrs	r0, r0, #16
 80228ea:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80228ee:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80228f2:	f100 80dc 	bmi.w	8022aae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 80228f6:	1c47      	adds	r7, r0, #1
 80228f8:	42bd      	cmp	r5, r7
 80228fa:	f340 80da 	ble.w	8022ab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80228fe:	2a00      	cmp	r2, #0
 8022900:	f2c0 80d7 	blt.w	8022ab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022904:	f102 0c01 	add.w	ip, r2, #1
 8022908:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802290a:	4567      	cmp	r7, ip
 802290c:	f340 80d1 	ble.w	8022ab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022910:	fb02 0005 	mla	r0, r2, r5, r0
 8022914:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022918:	f817 8000 	ldrb.w	r8, [r7, r0]
 802291c:	4402      	add	r2, r0
 802291e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022922:	eb04 0c08 	add.w	ip, r4, r8
 8022926:	2b00      	cmp	r3, #0
 8022928:	f000 80b3 	beq.w	8022a92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 802292c:	7857      	ldrb	r7, [r2, #1]
 802292e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022932:	4427      	add	r7, r4
 8022934:	2900      	cmp	r1, #0
 8022936:	f000 80b4 	beq.w	8022aa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 802293a:	1950      	adds	r0, r2, r5
 802293c:	5d52      	ldrb	r2, [r2, r5]
 802293e:	7840      	ldrb	r0, [r0, #1]
 8022940:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022944:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022948:	4422      	add	r2, r4
 802294a:	4420      	add	r0, r4
 802294c:	b29b      	uxth	r3, r3
 802294e:	f814 a008 	ldrb.w	sl, [r4, r8]
 8022952:	b289      	uxth	r1, r1
 8022954:	f897 8000 	ldrb.w	r8, [r7]
 8022958:	fb03 f901 	mul.w	r9, r3, r1
 802295c:	011b      	lsls	r3, r3, #4
 802295e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022962:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022966:	eba3 0309 	sub.w	r3, r3, r9
 802296a:	b289      	uxth	r1, r1
 802296c:	b29b      	uxth	r3, r3
 802296e:	ebae 0e01 	sub.w	lr, lr, r1
 8022972:	fb03 f808 	mul.w	r8, r3, r8
 8022976:	fa1f fe8e 	uxth.w	lr, lr
 802297a:	fb0e 880a 	mla	r8, lr, sl, r8
 802297e:	f892 a000 	ldrb.w	sl, [r2]
 8022982:	fb01 880a 	mla	r8, r1, sl, r8
 8022986:	f890 a000 	ldrb.w	sl, [r0]
 802298a:	fb09 880a 	mla	r8, r9, sl, r8
 802298e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022992:	f886 8000 	strb.w	r8, [r6]
 8022996:	f897 8001 	ldrb.w	r8, [r7, #1]
 802299a:	f89c a001 	ldrb.w	sl, [ip, #1]
 802299e:	fb03 f808 	mul.w	r8, r3, r8
 80229a2:	fb0e 880a 	mla	r8, lr, sl, r8
 80229a6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80229aa:	fb01 880a 	mla	r8, r1, sl, r8
 80229ae:	f890 a001 	ldrb.w	sl, [r0, #1]
 80229b2:	fb09 880a 	mla	r8, r9, sl, r8
 80229b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80229ba:	f886 8001 	strb.w	r8, [r6, #1]
 80229be:	78bf      	ldrb	r7, [r7, #2]
 80229c0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80229c4:	437b      	muls	r3, r7
 80229c6:	7892      	ldrb	r2, [r2, #2]
 80229c8:	fb0e 330c 	mla	r3, lr, ip, r3
 80229cc:	fb01 3102 	mla	r1, r1, r2, r3
 80229d0:	7882      	ldrb	r2, [r0, #2]
 80229d2:	fb09 1902 	mla	r9, r9, r2, r1
 80229d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80229da:	f886 9002 	strb.w	r9, [r6, #2]
 80229de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229e0:	3603      	adds	r6, #3
 80229e2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80229e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80229e8:	4413      	add	r3, r2
 80229ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80229ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80229ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229f0:	4413      	add	r3, r2
 80229f2:	9324      	str	r3, [sp, #144]	; 0x90
 80229f4:	e770      	b.n	80228d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80229f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80229fa:	4413      	add	r3, r2
 80229fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80229fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8022a00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a02:	4413      	add	r3, r2
 8022a04:	9324      	str	r3, [sp, #144]	; 0x90
 8022a06:	9b07      	ldr	r3, [sp, #28]
 8022a08:	3b01      	subs	r3, #1
 8022a0a:	9307      	str	r3, [sp, #28]
 8022a0c:	9b08      	ldr	r3, [sp, #32]
 8022a0e:	3303      	adds	r3, #3
 8022a10:	9308      	str	r3, [sp, #32]
 8022a12:	e718      	b.n	8022846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022a14:	f47f af2a 	bne.w	802286c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	f340 80e5 	ble.w	8022bea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8022a20:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022a26:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022a2a:	eef0 6a48 	vmov.f32	s13, s16
 8022a2e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022a32:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022a36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a3a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8022a3e:	eef0 6a68 	vmov.f32	s13, s17
 8022a42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a46:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8022a4a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022a4e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022a52:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022a56:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022a5a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022a5e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022a62:	ee18 2a10 	vmov	r2, s16
 8022a66:	eeb0 8a47 	vmov.f32	s16, s14
 8022a6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a6e:	ee18 2a90 	vmov	r2, s17
 8022a72:	9325      	str	r3, [sp, #148]	; 0x94
 8022a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022a76:	eef0 8a67 	vmov.f32	s17, s15
 8022a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a7e:	9326      	str	r3, [sp, #152]	; 0x98
 8022a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022a84:	3b01      	subs	r3, #1
 8022a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022a8a:	bf08      	it	eq
 8022a8c:	4613      	moveq	r3, r2
 8022a8e:	9307      	str	r3, [sp, #28]
 8022a90:	e6d2      	b.n	8022838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8022a92:	b149      	cbz	r1, 8022aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8022a94:	5d52      	ldrb	r2, [r2, r5]
 8022a96:	4660      	mov	r0, ip
 8022a98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a9c:	4422      	add	r2, r4
 8022a9e:	4667      	mov	r7, ip
 8022aa0:	e754      	b.n	802294c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8022aa2:	4660      	mov	r0, ip
 8022aa4:	4662      	mov	r2, ip
 8022aa6:	e751      	b.n	802294c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8022aa8:	4660      	mov	r0, ip
 8022aaa:	4662      	mov	r2, ip
 8022aac:	e7f7      	b.n	8022a9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8022aae:	1c47      	adds	r7, r0, #1
 8022ab0:	d195      	bne.n	80229de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022ab2:	4285      	cmp	r5, r0
 8022ab4:	dd93      	ble.n	80229de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022ab6:	1c57      	adds	r7, r2, #1
 8022ab8:	db91      	blt.n	80229de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022aba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022abc:	4297      	cmp	r7, r2
 8022abe:	dd8e      	ble.n	80229de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022ac0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022ac4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8022ac8:	e9cd 5700 	strd	r5, r7, [sp]
 8022acc:	4623      	mov	r3, r4
 8022ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022ad0:	4631      	mov	r1, r6
 8022ad2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022ad4:	f7ff fdca 	bl	802266c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8022ad8:	e781      	b.n	80229de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022ada:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022adc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022ade:	1410      	asrs	r0, r2, #16
 8022ae0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022ae4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022ae6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022ae8:	1412      	asrs	r2, r2, #16
 8022aea:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022aee:	fb05 2000 	mla	r0, r5, r0, r2
 8022af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022af4:	f816 e000 	ldrb.w	lr, [r6, r0]
 8022af8:	4402      	add	r2, r0
 8022afa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022afe:	eb04 070e 	add.w	r7, r4, lr
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d063      	beq.n	8022bce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8022b06:	7856      	ldrb	r6, [r2, #1]
 8022b08:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022b0c:	4426      	add	r6, r4
 8022b0e:	2900      	cmp	r1, #0
 8022b10:	d065      	beq.n	8022bde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022b12:	1950      	adds	r0, r2, r5
 8022b14:	5d52      	ldrb	r2, [r2, r5]
 8022b16:	7840      	ldrb	r0, [r0, #1]
 8022b18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022b20:	4422      	add	r2, r4
 8022b22:	4420      	add	r0, r4
 8022b24:	b29b      	uxth	r3, r3
 8022b26:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8022b2a:	b289      	uxth	r1, r1
 8022b2c:	f896 e000 	ldrb.w	lr, [r6]
 8022b30:	f108 0803 	add.w	r8, r8, #3
 8022b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022b38:	fb03 f901 	mul.w	r9, r3, r1
 8022b3c:	011b      	lsls	r3, r3, #4
 8022b3e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022b42:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8022b46:	eba3 0309 	sub.w	r3, r3, r9
 8022b4a:	b289      	uxth	r1, r1
 8022b4c:	b29b      	uxth	r3, r3
 8022b4e:	ebac 0c01 	sub.w	ip, ip, r1
 8022b52:	fb03 fe0e 	mul.w	lr, r3, lr
 8022b56:	fa1f fc8c 	uxth.w	ip, ip
 8022b5a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022b5e:	f892 b000 	ldrb.w	fp, [r2]
 8022b62:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022b66:	f890 b000 	ldrb.w	fp, [r0]
 8022b6a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022b6e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022b72:	f808 ec06 	strb.w	lr, [r8, #-6]
 8022b76:	f896 e001 	ldrb.w	lr, [r6, #1]
 8022b7a:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022b7e:	fb03 fe0e 	mul.w	lr, r3, lr
 8022b82:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022b86:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022b8a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022b8e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022b92:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022b96:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022b9a:	f808 ec05 	strb.w	lr, [r8, #-5]
 8022b9e:	78b6      	ldrb	r6, [r6, #2]
 8022ba0:	78bf      	ldrb	r7, [r7, #2]
 8022ba2:	4373      	muls	r3, r6
 8022ba4:	7896      	ldrb	r6, [r2, #2]
 8022ba6:	7882      	ldrb	r2, [r0, #2]
 8022ba8:	fb0c 3307 	mla	r3, ip, r7, r3
 8022bac:	fb01 3306 	mla	r3, r1, r6, r3
 8022bb0:	fb09 3902 	mla	r9, r9, r2, r3
 8022bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022bb6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022bb8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022bbc:	4413      	add	r3, r2
 8022bbe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022bc0:	f808 9c04 	strb.w	r9, [r8, #-4]
 8022bc4:	9323      	str	r3, [sp, #140]	; 0x8c
 8022bc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bc8:	4413      	add	r3, r2
 8022bca:	9324      	str	r3, [sp, #144]	; 0x90
 8022bcc:	e668      	b.n	80228a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8022bce:	b149      	cbz	r1, 8022be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8022bd0:	5d52      	ldrb	r2, [r2, r5]
 8022bd2:	4638      	mov	r0, r7
 8022bd4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022bd8:	4422      	add	r2, r4
 8022bda:	463e      	mov	r6, r7
 8022bdc:	e7a2      	b.n	8022b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022bde:	4638      	mov	r0, r7
 8022be0:	463a      	mov	r2, r7
 8022be2:	e79f      	b.n	8022b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022be4:	4638      	mov	r0, r7
 8022be6:	463a      	mov	r2, r7
 8022be8:	e7f7      	b.n	8022bda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8022bea:	b00f      	add	sp, #60	; 0x3c
 8022bec:	ecbd 8b0a 	vpop	{d8-d12}
 8022bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022bf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8022bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bf8:	b087      	sub	sp, #28
 8022bfa:	7888      	ldrb	r0, [r1, #2]
 8022bfc:	9002      	str	r0, [sp, #8]
 8022bfe:	7848      	ldrb	r0, [r1, #1]
 8022c00:	9e02      	ldr	r6, [sp, #8]
 8022c02:	9003      	str	r0, [sp, #12]
 8022c04:	7808      	ldrb	r0, [r1, #0]
 8022c06:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8022c0a:	9004      	str	r0, [sp, #16]
 8022c0c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022c10:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8022c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8022c18:	9e03      	ldr	r6, [sp, #12]
 8022c1a:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8022c1e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8022c22:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8022c26:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8022c2a:	fb04 7508 	mla	r5, r4, r8, r7
 8022c2e:	2c00      	cmp	r4, #0
 8022c30:	eb02 0905 	add.w	r9, r2, r5
 8022c34:	db45      	blt.n	8022cc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8022c36:	45a2      	cmp	sl, r4
 8022c38:	dd43      	ble.n	8022cc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8022c3a:	2f00      	cmp	r7, #0
 8022c3c:	db3f      	blt.n	8022cbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8022c3e:	45b8      	cmp	r8, r7
 8022c40:	dd3d      	ble.n	8022cbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8022c42:	5d52      	ldrb	r2, [r2, r5]
 8022c44:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022c48:	1c7a      	adds	r2, r7, #1
 8022c4a:	d43d      	bmi.n	8022cc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022c4c:	4590      	cmp	r8, r2
 8022c4e:	dd3b      	ble.n	8022cc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022c50:	f1bc 0f00 	cmp.w	ip, #0
 8022c54:	d038      	beq.n	8022cc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022c56:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022c5a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022c5e:	3401      	adds	r4, #1
 8022c60:	d436      	bmi.n	8022cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022c62:	45a2      	cmp	sl, r4
 8022c64:	dd34      	ble.n	8022cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022c66:	f1be 0f00 	cmp.w	lr, #0
 8022c6a:	d031      	beq.n	8022cd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022c6c:	2f00      	cmp	r7, #0
 8022c6e:	db2d      	blt.n	8022ccc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022c70:	45b8      	cmp	r8, r7
 8022c72:	dd2b      	ble.n	8022ccc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022c74:	f819 2008 	ldrb.w	r2, [r9, r8]
 8022c78:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022c7c:	3701      	adds	r7, #1
 8022c7e:	d409      	bmi.n	8022c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022c80:	45b8      	cmp	r8, r7
 8022c82:	dd07      	ble.n	8022c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022c84:	f1bc 0f00 	cmp.w	ip, #0
 8022c88:	d004      	beq.n	8022c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022c8a:	44c8      	add	r8, r9
 8022c8c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022c90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022c94:	f1bc 0f0f 	cmp.w	ip, #15
 8022c98:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022c9c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022ca0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022ca4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022ca8:	d802      	bhi.n	8022cb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8022caa:	f1be 0f0f 	cmp.w	lr, #15
 8022cae:	d911      	bls.n	8022cd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8022cb0:	4b77      	ldr	r3, [pc, #476]	; (8022e90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8022cb2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022cb6:	4a77      	ldr	r2, [pc, #476]	; (8022e94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8022cb8:	4877      	ldr	r0, [pc, #476]	; (8022e98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8022cba:	f005 fc73 	bl	80285a4 <__assert_func>
 8022cbe:	4606      	mov	r6, r0
 8022cc0:	e7c2      	b.n	8022c48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8022cc2:	4605      	mov	r5, r0
 8022cc4:	4606      	mov	r6, r0
 8022cc6:	e7ca      	b.n	8022c5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022cc8:	4605      	mov	r5, r0
 8022cca:	e7c8      	b.n	8022c5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022ccc:	4604      	mov	r4, r0
 8022cce:	e7d5      	b.n	8022c7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8022cd0:	4604      	mov	r4, r0
 8022cd2:	e7df      	b.n	8022c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022cd4:	fa1f fc8c 	uxth.w	ip, ip
 8022cd8:	fa1f f28e 	uxth.w	r2, lr
 8022cdc:	fb02 fe0c 	mul.w	lr, r2, ip
 8022ce0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022ce4:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8022ce8:	ebac 070e 	sub.w	r7, ip, lr
 8022cec:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8022cf0:	b292      	uxth	r2, r2
 8022cf2:	b2bf      	uxth	r7, r7
 8022cf4:	1a9b      	subs	r3, r3, r2
 8022cf6:	fb07 fc0a 	mul.w	ip, r7, sl
 8022cfa:	b29b      	uxth	r3, r3
 8022cfc:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022d00:	9301      	str	r3, [sp, #4]
 8022d02:	fb02 cc09 	mla	ip, r2, r9, ip
 8022d06:	fb0e cc08 	mla	ip, lr, r8, ip
 8022d0a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022d0e:	9305      	str	r3, [sp, #20]
 8022d10:	2b00      	cmp	r3, #0
 8022d12:	f000 80b9 	beq.w	8022e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8022d16:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022d1a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d1e:	fb0b fc0c 	mul.w	ip, fp, ip
 8022d22:	fb0b f606 	mul.w	r6, fp, r6
 8022d26:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022d2a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022d2e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022d32:	44dc      	add	ip, fp
 8022d34:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022d38:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022d3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d40:	fb0a fb0b 	mul.w	fp, sl, fp
 8022d44:	fb0a fa05 	mul.w	sl, sl, r5
 8022d48:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8022d4c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022d50:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8022d54:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022d58:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022d5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022d60:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8022d64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022d68:	0a36      	lsrs	r6, r6, #8
 8022d6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d6e:	44dc      	add	ip, fp
 8022d70:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022d74:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022d78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d7c:	fb09 fb0b 	mul.w	fp, r9, fp
 8022d80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d84:	fb09 f904 	mul.w	r9, r9, r4
 8022d88:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d8c:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8022d90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022d94:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022d98:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022d9c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022da0:	fb0c fc07 	mul.w	ip, ip, r7
 8022da4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022da8:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8022dac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022db0:	445d      	add	r5, fp
 8022db2:	fb08 f404 	mul.w	r4, r8, r4
 8022db6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022dba:	fb08 f800 	mul.w	r8, r8, r0
 8022dbe:	0a2d      	lsrs	r5, r5, #8
 8022dc0:	0a20      	lsrs	r0, r4, #8
 8022dc2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022dc6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022dca:	fb07 f70a 	mul.w	r7, r7, sl
 8022dce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022dd2:	4404      	add	r4, r0
 8022dd4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8022dd8:	0a24      	lsrs	r4, r4, #8
 8022dda:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8022dde:	9801      	ldr	r0, [sp, #4]
 8022de0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022de4:	fb03 cc00 	mla	ip, r3, r0, ip
 8022de8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022dec:	fb00 7606 	mla	r6, r0, r6, r7
 8022df0:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8022df4:	fb04 cc0e 	mla	ip, r4, lr, ip
 8022df8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022dfc:	b280      	uxth	r0, r0
 8022dfe:	9c04      	ldr	r4, [sp, #16]
 8022e00:	fb05 cc02 	mla	ip, r5, r2, ip
 8022e04:	fb0e 6e08 	mla	lr, lr, r8, r6
 8022e08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e0c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022e10:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8022e14:	fb02 ec0c 	mla	ip, r2, ip, lr
 8022e18:	9a05      	ldr	r2, [sp, #20]
 8022e1a:	4342      	muls	r2, r0
 8022e1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e20:	1c53      	adds	r3, r2, #1
 8022e22:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022e26:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022e2a:	ea45 0c0c 	orr.w	ip, r5, ip
 8022e2e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022e32:	fa5f f28c 	uxtb.w	r2, ip
 8022e36:	b2db      	uxtb	r3, r3
 8022e38:	fb14 f403 	smulbb	r4, r4, r3
 8022e3c:	fb02 4200 	mla	r2, r2, r0, r4
 8022e40:	b292      	uxth	r2, r2
 8022e42:	1c54      	adds	r4, r2, #1
 8022e44:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8022e48:	9c03      	ldr	r4, [sp, #12]
 8022e4a:	fb14 f403 	smulbb	r4, r4, r3
 8022e4e:	1212      	asrs	r2, r2, #8
 8022e50:	700a      	strb	r2, [r1, #0]
 8022e52:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8022e56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022e5a:	fb02 4200 	mla	r2, r2, r0, r4
 8022e5e:	b292      	uxth	r2, r2
 8022e60:	1c54      	adds	r4, r2, #1
 8022e62:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8022e66:	1212      	asrs	r2, r2, #8
 8022e68:	704a      	strb	r2, [r1, #1]
 8022e6a:	9a02      	ldr	r2, [sp, #8]
 8022e6c:	fb12 f303 	smulbb	r3, r2, r3
 8022e70:	fb0c 3c00 	mla	ip, ip, r0, r3
 8022e74:	fa1f fc8c 	uxth.w	ip, ip
 8022e78:	f10c 0301 	add.w	r3, ip, #1
 8022e7c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022e80:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022e84:	f881 c002 	strb.w	ip, [r1, #2]
 8022e88:	b007      	add	sp, #28
 8022e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e8e:	bf00      	nop
 8022e90:	0802d8a7 	.word	0x0802d8a7
 8022e94:	0802dd9e 	.word	0x0802dd9e
 8022e98:	0802d970 	.word	0x0802d970

08022e9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ea0:	ed2d 8b08 	vpush	{d8-d11}
 8022ea4:	b09b      	sub	sp, #108	; 0x6c
 8022ea6:	eeb0 aa40 	vmov.f32	s20, s0
 8022eaa:	eef0 9a60 	vmov.f32	s19, s1
 8022eae:	930a      	str	r3, [sp, #40]	; 0x28
 8022eb0:	eeb0 9a41 	vmov.f32	s18, s2
 8022eb4:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8022eb8:	eeb0 8a62 	vmov.f32	s16, s5
 8022ebc:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8022ebe:	eef0 8a43 	vmov.f32	s17, s6
 8022ec2:	9312      	str	r3, [sp, #72]	; 0x48
 8022ec4:	eef0 ba44 	vmov.f32	s23, s8
 8022ec8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022ecc:	eeb0 ba64 	vmov.f32	s22, s9
 8022ed0:	9019      	str	r0, [sp, #100]	; 0x64
 8022ed2:	eef0 aa45 	vmov.f32	s21, s10
 8022ed6:	9114      	str	r1, [sp, #80]	; 0x50
 8022ed8:	9317      	str	r3, [sp, #92]	; 0x5c
 8022eda:	6868      	ldr	r0, [r5, #4]
 8022edc:	9218      	str	r2, [sp, #96]	; 0x60
 8022ede:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022ee0:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8022ee4:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022ee8:	fb00 1303 	mla	r3, r0, r3, r1
 8022eec:	6829      	ldr	r1, [r5, #0]
 8022eee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ef2:	18cb      	adds	r3, r1, r3
 8022ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8022ef6:	6813      	ldr	r3, [r2, #0]
 8022ef8:	9313      	str	r3, [sp, #76]	; 0x4c
 8022efa:	6853      	ldr	r3, [r2, #4]
 8022efc:	3304      	adds	r3, #4
 8022efe:	9309      	str	r3, [sp, #36]	; 0x24
 8022f00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022f02:	2b00      	cmp	r3, #0
 8022f04:	dc03      	bgt.n	8022f0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022f06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	f340 8352 	ble.w	80235b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8022f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	f340 81a2 	ble.w	802325a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8022f16:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022f18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022f1a:	1412      	asrs	r2, r2, #16
 8022f1c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022f20:	d431      	bmi.n	8022f86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8022f22:	1c51      	adds	r1, r2, #1
 8022f24:	428c      	cmp	r4, r1
 8022f26:	dd31      	ble.n	8022f8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022f28:	2b00      	cmp	r3, #0
 8022f2a:	db2f      	blt.n	8022f8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022f2c:	1c59      	adds	r1, r3, #1
 8022f2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022f30:	4288      	cmp	r0, r1
 8022f32:	dd2b      	ble.n	8022f8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f36:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022f38:	3b01      	subs	r3, #1
 8022f3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8022f3c:	fb02 1203 	mla	r2, r2, r3, r1
 8022f40:	1412      	asrs	r2, r2, #16
 8022f42:	d42d      	bmi.n	8022fa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022f44:	3201      	adds	r2, #1
 8022f46:	4294      	cmp	r4, r2
 8022f48:	dd2a      	ble.n	8022fa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022f4a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022f4c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022f4e:	fb02 1303 	mla	r3, r2, r3, r1
 8022f52:	141b      	asrs	r3, r3, #16
 8022f54:	d424      	bmi.n	8022fa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022f56:	3301      	adds	r3, #1
 8022f58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022f5a:	429a      	cmp	r2, r3
 8022f5c:	dd20      	ble.n	8022fa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f60:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8022f64:	f103 0e03 	add.w	lr, r3, #3
 8022f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f6a:	9315      	str	r3, [sp, #84]	; 0x54
 8022f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022f6e:	2b00      	cmp	r3, #0
 8022f70:	f300 81de 	bgt.w	8023330 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8022f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022f78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f80:	441a      	add	r2, r3
 8022f82:	920d      	str	r2, [sp, #52]	; 0x34
 8022f84:	e16b      	b.n	802325e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8022f86:	1c51      	adds	r1, r2, #1
 8022f88:	f040 8158 	bne.w	802323c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022f8c:	42a2      	cmp	r2, r4
 8022f8e:	f280 8155 	bge.w	802323c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022f92:	1c5a      	adds	r2, r3, #1
 8022f94:	f2c0 8152 	blt.w	802323c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022f98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022f9a:	4293      	cmp	r3, r2
 8022f9c:	f280 814e 	bge.w	802323c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fa2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022fa4:	9316      	str	r3, [sp, #88]	; 0x58
 8022fa6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8022faa:	9315      	str	r3, [sp, #84]	; 0x54
 8022fac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022fae:	2b00      	cmp	r3, #0
 8022fb0:	dde0      	ble.n	8022f74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022fb2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022fb4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022fb6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022fba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022fbc:	141b      	asrs	r3, r3, #16
 8022fbe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022fc2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022fc4:	1412      	asrs	r2, r2, #16
 8022fc6:	f100 819a 	bmi.w	80232fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8022fca:	1c55      	adds	r5, r2, #1
 8022fcc:	42ac      	cmp	r4, r5
 8022fce:	f340 8198 	ble.w	8023302 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	f2c0 8195 	blt.w	8023302 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022fd8:	1c5d      	adds	r5, r3, #1
 8022fda:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022fdc:	42af      	cmp	r7, r5
 8022fde:	f340 8190 	ble.w	8023302 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022fe2:	fb03 2304 	mla	r3, r3, r4, r2
 8022fe6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022fe8:	18d5      	adds	r5, r2, r3
 8022fea:	5cd3      	ldrb	r3, [r2, r3]
 8022fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022ff2:	0e1f      	lsrs	r7, r3, #24
 8022ff4:	2800      	cmp	r0, #0
 8022ff6:	f000 8171 	beq.w	80232dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8022ffa:	f895 c001 	ldrb.w	ip, [r5, #1]
 8022ffe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8023002:	920e      	str	r2, [sp, #56]	; 0x38
 8023004:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023008:	2900      	cmp	r1, #0
 802300a:	f000 8172 	beq.w	80232f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 802300e:	eb05 0c04 	add.w	ip, r5, r4
 8023012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023014:	5d2d      	ldrb	r5, [r5, r4]
 8023016:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 802301a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802301e:	950b      	str	r5, [sp, #44]	; 0x2c
 8023020:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023024:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023026:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802302a:	0e15      	lsrs	r5, r2, #24
 802302c:	920f      	str	r2, [sp, #60]	; 0x3c
 802302e:	b280      	uxth	r0, r0
 8023030:	b289      	uxth	r1, r1
 8023032:	fb00 fa01 	mul.w	sl, r0, r1
 8023036:	0100      	lsls	r0, r0, #4
 8023038:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802303c:	eba0 080a 	sub.w	r8, r0, sl
 8023040:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8023044:	b289      	uxth	r1, r1
 8023046:	fa1f f888 	uxth.w	r8, r8
 802304a:	1a52      	subs	r2, r2, r1
 802304c:	fb08 f00e 	mul.w	r0, r8, lr
 8023050:	b292      	uxth	r2, r2
 8023052:	fb02 0007 	mla	r0, r2, r7, r0
 8023056:	fb01 0009 	mla	r0, r1, r9, r0
 802305a:	fb0a 0005 	mla	r0, sl, r5, r0
 802305e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023062:	2800      	cmp	r0, #0
 8023064:	f000 80dd 	beq.w	8023222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023068:	2fff      	cmp	r7, #255	; 0xff
 802306a:	d01a      	beq.n	80230a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802306c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023070:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023074:	fb07 fc0c 	mul.w	ip, r7, ip
 8023078:	435f      	muls	r7, r3
 802307a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802307e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023082:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8023086:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802308a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802308e:	4463      	add	r3, ip
 8023090:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023094:	0a1b      	lsrs	r3, r3, #8
 8023096:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802309a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802309e:	ea43 030b 	orr.w	r3, r3, fp
 80230a2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80230a6:	d01e      	beq.n	80230e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80230a8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80230aa:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80230ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80230b2:	fb0e fb0b 	mul.w	fp, lr, fp
 80230b6:	fb0e fe07 	mul.w	lr, lr, r7
 80230ba:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80230be:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230c2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80230c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230ca:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80230ce:	44dc      	add	ip, fp
 80230d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230d8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80230dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230e0:	ea4c 070e 	orr.w	r7, ip, lr
 80230e4:	970e      	str	r7, [sp, #56]	; 0x38
 80230e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80230ea:	d01e      	beq.n	802312a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80230ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80230ee:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80230f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80230f6:	fb09 fe0e 	mul.w	lr, r9, lr
 80230fa:	fb09 f907 	mul.w	r9, r9, r7
 80230fe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023102:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023106:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802310a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802310e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023112:	44f4      	add	ip, lr
 8023114:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023118:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802311c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023120:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023124:	ea4c 0709 	orr.w	r7, ip, r9
 8023128:	970b      	str	r7, [sp, #44]	; 0x2c
 802312a:	2dff      	cmp	r5, #255	; 0xff
 802312c:	d01c      	beq.n	8023168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 802312e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023130:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023134:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023138:	fb05 fe0e 	mul.w	lr, r5, lr
 802313c:	437d      	muls	r5, r7
 802313e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023142:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023146:	f505 7780 	add.w	r7, r5, #256	; 0x100
 802314a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802314e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8023152:	44f4      	add	ip, lr
 8023154:	0a2d      	lsrs	r5, r5, #8
 8023156:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802315a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802315e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023162:	ea4c 0505 	orr.w	r5, ip, r5
 8023166:	950f      	str	r5, [sp, #60]	; 0x3c
 8023168:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802316a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802316e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023172:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023176:	fb08 f505 	mul.w	r5, r8, r5
 802317a:	fb02 5507 	mla	r5, r2, r7, r5
 802317e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023180:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023184:	fb01 5507 	mla	r5, r1, r7, r5
 8023188:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802318a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802318e:	fb0a 5507 	mla	r5, sl, r7, r5
 8023192:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023194:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023198:	0a2d      	lsrs	r5, r5, #8
 802319a:	fb08 f807 	mul.w	r8, r8, r7
 802319e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80231a2:	fb02 8303 	mla	r3, r2, r3, r8
 80231a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80231a8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80231ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80231ae:	fb01 330c 	mla	r3, r1, ip, r3
 80231b2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80231b6:	fb0a 3a01 	mla	sl, sl, r1, r3
 80231ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80231bc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80231be:	4343      	muls	r3, r0
 80231c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231c4:	1c58      	adds	r0, r3, #1
 80231c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80231ca:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80231ce:	ea45 050a 	orr.w	r5, r5, sl
 80231d2:	7833      	ldrb	r3, [r6, #0]
 80231d4:	b2ea      	uxtb	r2, r5
 80231d6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80231da:	fb12 f201 	smulbb	r2, r2, r1
 80231de:	b2c0      	uxtb	r0, r0
 80231e0:	fb03 2300 	mla	r3, r3, r0, r2
 80231e4:	b29b      	uxth	r3, r3
 80231e6:	1c5a      	adds	r2, r3, #1
 80231e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231ec:	7872      	ldrb	r2, [r6, #1]
 80231ee:	fb12 f200 	smulbb	r2, r2, r0
 80231f2:	121b      	asrs	r3, r3, #8
 80231f4:	7033      	strb	r3, [r6, #0]
 80231f6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80231fa:	0c2d      	lsrs	r5, r5, #16
 80231fc:	fb03 2301 	mla	r3, r3, r1, r2
 8023200:	b29b      	uxth	r3, r3
 8023202:	1c5a      	adds	r2, r3, #1
 8023204:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023208:	121b      	asrs	r3, r3, #8
 802320a:	7073      	strb	r3, [r6, #1]
 802320c:	78b3      	ldrb	r3, [r6, #2]
 802320e:	fb13 f000 	smulbb	r0, r3, r0
 8023212:	fb05 0501 	mla	r5, r5, r1, r0
 8023216:	b2ad      	uxth	r5, r5
 8023218:	1c6b      	adds	r3, r5, #1
 802321a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802321e:	122d      	asrs	r5, r5, #8
 8023220:	70b5      	strb	r5, [r6, #2]
 8023222:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023224:	3603      	adds	r6, #3
 8023226:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023228:	4413      	add	r3, r2
 802322a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802322c:	932d      	str	r3, [sp, #180]	; 0xb4
 802322e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023230:	4413      	add	r3, r2
 8023232:	932e      	str	r3, [sp, #184]	; 0xb8
 8023234:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023236:	3b01      	subs	r3, #1
 8023238:	9316      	str	r3, [sp, #88]	; 0x58
 802323a:	e6b7      	b.n	8022fac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802323c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802323e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023240:	4413      	add	r3, r2
 8023242:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8023244:	932d      	str	r3, [sp, #180]	; 0xb4
 8023246:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023248:	4413      	add	r3, r2
 802324a:	932e      	str	r3, [sp, #184]	; 0xb8
 802324c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802324e:	3b01      	subs	r3, #1
 8023250:	930a      	str	r3, [sp, #40]	; 0x28
 8023252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023254:	3303      	adds	r3, #3
 8023256:	930d      	str	r3, [sp, #52]	; 0x34
 8023258:	e659      	b.n	8022f0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802325a:	f47f ae6b 	bne.w	8022f34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802325e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023260:	2b00      	cmp	r3, #0
 8023262:	f340 81a6 	ble.w	80235b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8023266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802326a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802326c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023270:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023274:	eef0 6a48 	vmov.f32	s13, s16
 8023278:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802327c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023280:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023284:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8023288:	eef0 6a68 	vmov.f32	s13, s17
 802328c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023290:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8023294:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023298:	ee69 7a27 	vmul.f32	s15, s18, s15
 802329c:	ee37 8a48 	vsub.f32	s16, s14, s16
 80232a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80232a4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80232a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80232ac:	ee18 2a10 	vmov	r2, s16
 80232b0:	eeb0 8a47 	vmov.f32	s16, s14
 80232b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80232b8:	ee18 2a90 	vmov	r2, s17
 80232bc:	932f      	str	r3, [sp, #188]	; 0xbc
 80232be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80232c0:	eef0 8a67 	vmov.f32	s17, s15
 80232c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80232c8:	9330      	str	r3, [sp, #192]	; 0xc0
 80232ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80232cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80232ce:	3b01      	subs	r3, #1
 80232d0:	9314      	str	r3, [sp, #80]	; 0x50
 80232d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80232d4:	bf08      	it	eq
 80232d6:	4613      	moveq	r3, r2
 80232d8:	930a      	str	r3, [sp, #40]	; 0x28
 80232da:	e611      	b.n	8022f00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80232dc:	b161      	cbz	r1, 80232f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80232de:	5d2a      	ldrb	r2, [r5, r4]
 80232e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80232e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80232e6:	25ff      	movs	r5, #255	; 0xff
 80232e8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80232ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80232ee:	46ae      	mov	lr, r5
 80232f0:	e69d      	b.n	802302e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80232f2:	25ff      	movs	r5, #255	; 0xff
 80232f4:	46a9      	mov	r9, r5
 80232f6:	e69a      	b.n	802302e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80232f8:	25ff      	movs	r5, #255	; 0xff
 80232fa:	46a9      	mov	r9, r5
 80232fc:	e7f7      	b.n	80232ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 80232fe:	1c57      	adds	r7, r2, #1
 8023300:	d18f      	bne.n	8023222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023302:	4294      	cmp	r4, r2
 8023304:	dd8d      	ble.n	8023222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023306:	1c5d      	adds	r5, r3, #1
 8023308:	db8b      	blt.n	8023222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802330a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802330c:	429d      	cmp	r5, r3
 802330e:	dd88      	ble.n	8023222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023310:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8023312:	9202      	str	r2, [sp, #8]
 8023314:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023316:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802331a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802331c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802331e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8023322:	e9cd 4300 	strd	r4, r3, [sp]
 8023326:	4631      	mov	r1, r6
 8023328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802332a:	f7ff fc63 	bl	8022bf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802332e:	e778      	b.n	8023222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8023330:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023332:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023334:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023338:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802333a:	1412      	asrs	r2, r2, #16
 802333c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8023340:	141b      	asrs	r3, r3, #16
 8023342:	fb04 2303 	mla	r3, r4, r3, r2
 8023346:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023348:	18d5      	adds	r5, r2, r3
 802334a:	5cd3      	ldrb	r3, [r2, r3]
 802334c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023352:	0e1e      	lsrs	r6, r3, #24
 8023354:	2900      	cmp	r1, #0
 8023356:	f000 811b 	beq.w	8023590 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 802335a:	786a      	ldrb	r2, [r5, #1]
 802335c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802335e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8023362:	9210      	str	r2, [sp, #64]	; 0x40
 8023364:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8023368:	2800      	cmp	r0, #0
 802336a:	f000 811c 	beq.w	80235a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 802336e:	192a      	adds	r2, r5, r4
 8023370:	5d2d      	ldrb	r5, [r5, r4]
 8023372:	7852      	ldrb	r2, [r2, #1]
 8023374:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8023378:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802337c:	950c      	str	r5, [sp, #48]	; 0x30
 802337e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023382:	0e15      	lsrs	r5, r2, #24
 8023384:	9211      	str	r2, [sp, #68]	; 0x44
 8023386:	b289      	uxth	r1, r1
 8023388:	b280      	uxth	r0, r0
 802338a:	fb01 fa00 	mul.w	sl, r1, r0
 802338e:	0109      	lsls	r1, r1, #4
 8023390:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023394:	eba1 080a 	sub.w	r8, r1, sl
 8023398:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802339c:	b280      	uxth	r0, r0
 802339e:	fa1f f888 	uxth.w	r8, r8
 80233a2:	1a12      	subs	r2, r2, r0
 80233a4:	fb08 f10c 	mul.w	r1, r8, ip
 80233a8:	b292      	uxth	r2, r2
 80233aa:	fb02 1106 	mla	r1, r2, r6, r1
 80233ae:	fb00 1109 	mla	r1, r0, r9, r1
 80233b2:	fb0a 1105 	mla	r1, sl, r5, r1
 80233b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80233ba:	2900      	cmp	r1, #0
 80233bc:	f000 80da 	beq.w	8023574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 80233c0:	2eff      	cmp	r6, #255	; 0xff
 80233c2:	d016      	beq.n	80233f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80233c4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80233c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80233cc:	4377      	muls	r7, r6
 80233ce:	435e      	muls	r6, r3
 80233d0:	0a3b      	lsrs	r3, r7, #8
 80233d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80233d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80233da:	443b      	add	r3, r7
 80233dc:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80233e0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80233e4:	0a1b      	lsrs	r3, r3, #8
 80233e6:	0a3f      	lsrs	r7, r7, #8
 80233e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80233ec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80233f0:	433b      	orrs	r3, r7
 80233f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80233f6:	d01d      	beq.n	8023434 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 80233f8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80233fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80233fc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023400:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023404:	fb0c f606 	mul.w	r6, ip, r6
 8023408:	fb0c fc07 	mul.w	ip, ip, r7
 802340c:	0a37      	lsrs	r7, r6, #8
 802340e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023412:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023416:	4437      	add	r7, r6
 8023418:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802341c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023420:	0a3f      	lsrs	r7, r7, #8
 8023422:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023426:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802342a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802342e:	ea47 060c 	orr.w	r6, r7, ip
 8023432:	9610      	str	r6, [sp, #64]	; 0x40
 8023434:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023438:	d01d      	beq.n	8023476 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802343a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802343c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023440:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023444:	fb09 fc0c 	mul.w	ip, r9, ip
 8023448:	fb09 f906 	mul.w	r9, r9, r6
 802344c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8023450:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023454:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8023458:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802345c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8023460:	4467      	add	r7, ip
 8023462:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023466:	0a3f      	lsrs	r7, r7, #8
 8023468:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802346c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023470:	ea47 0609 	orr.w	r6, r7, r9
 8023474:	960c      	str	r6, [sp, #48]	; 0x30
 8023476:	2dff      	cmp	r5, #255	; 0xff
 8023478:	d01a      	beq.n	80234b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 802347a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802347c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023480:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023484:	fb05 fc0c 	mul.w	ip, r5, ip
 8023488:	4375      	muls	r5, r6
 802348a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802348e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023492:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023496:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802349a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802349e:	4467      	add	r7, ip
 80234a0:	0a2d      	lsrs	r5, r5, #8
 80234a2:	0a3f      	lsrs	r7, r7, #8
 80234a4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80234a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80234ac:	433d      	orrs	r5, r7
 80234ae:	9511      	str	r5, [sp, #68]	; 0x44
 80234b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80234b2:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80234b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234ba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80234be:	fb08 f505 	mul.w	r5, r8, r5
 80234c2:	fb02 5506 	mla	r5, r2, r6, r5
 80234c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80234c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234cc:	fb00 5506 	mla	r5, r0, r6, r5
 80234d0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80234d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234d6:	fb0a 5506 	mla	r5, sl, r6, r5
 80234da:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80234dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80234e0:	0a2d      	lsrs	r5, r5, #8
 80234e2:	fb08 f806 	mul.w	r8, r8, r6
 80234e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80234ea:	fb02 8303 	mla	r3, r2, r3, r8
 80234ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80234f0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80234f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80234f6:	fb00 3307 	mla	r3, r0, r7, r3
 80234fa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80234fe:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8023502:	fb01 f30b 	mul.w	r3, r1, fp
 8023506:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802350a:	1c59      	adds	r1, r3, #1
 802350c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023510:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023514:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023518:	ea45 050c 	orr.w	r5, r5, ip
 802351c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023520:	b2ea      	uxtb	r2, r5
 8023522:	b2c9      	uxtb	r1, r1
 8023524:	fb12 f20b 	smulbb	r2, r2, fp
 8023528:	fb03 2301 	mla	r3, r3, r1, r2
 802352c:	b29b      	uxth	r3, r3
 802352e:	1c5a      	adds	r2, r3, #1
 8023530:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023534:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023538:	fb12 f201 	smulbb	r2, r2, r1
 802353c:	121b      	asrs	r3, r3, #8
 802353e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023542:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023546:	0c2d      	lsrs	r5, r5, #16
 8023548:	fb03 230b 	mla	r3, r3, fp, r2
 802354c:	b29b      	uxth	r3, r3
 802354e:	1c5a      	adds	r2, r3, #1
 8023550:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023554:	121b      	asrs	r3, r3, #8
 8023556:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802355a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802355e:	fb13 f101 	smulbb	r1, r3, r1
 8023562:	fb05 150b 	mla	r5, r5, fp, r1
 8023566:	b2ad      	uxth	r5, r5
 8023568:	1c69      	adds	r1, r5, #1
 802356a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802356e:	122d      	asrs	r5, r5, #8
 8023570:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023574:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023576:	f10e 0e03 	add.w	lr, lr, #3
 802357a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802357c:	4413      	add	r3, r2
 802357e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8023580:	932d      	str	r3, [sp, #180]	; 0xb4
 8023582:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023584:	4413      	add	r3, r2
 8023586:	932e      	str	r3, [sp, #184]	; 0xb8
 8023588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802358a:	3b01      	subs	r3, #1
 802358c:	9315      	str	r3, [sp, #84]	; 0x54
 802358e:	e4ed      	b.n	8022f6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8023590:	b160      	cbz	r0, 80235ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 8023592:	5d2a      	ldrb	r2, [r5, r4]
 8023594:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023596:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802359a:	25ff      	movs	r5, #255	; 0xff
 802359c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80235a0:	920c      	str	r2, [sp, #48]	; 0x30
 80235a2:	46ac      	mov	ip, r5
 80235a4:	e6ef      	b.n	8023386 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80235a6:	25ff      	movs	r5, #255	; 0xff
 80235a8:	46a9      	mov	r9, r5
 80235aa:	e6ec      	b.n	8023386 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80235ac:	25ff      	movs	r5, #255	; 0xff
 80235ae:	46a9      	mov	r9, r5
 80235b0:	e7f7      	b.n	80235a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80235b2:	b01b      	add	sp, #108	; 0x6c
 80235b4:	ecbd 8b08 	vpop	{d8-d11}
 80235b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080235bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80235bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235c0:	b085      	sub	sp, #20
 80235c2:	7888      	ldrb	r0, [r1, #2]
 80235c4:	4692      	mov	sl, r2
 80235c6:	4698      	mov	r8, r3
 80235c8:	9000      	str	r0, [sp, #0]
 80235ca:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80235ce:	7848      	ldrb	r0, [r1, #1]
 80235d0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80235d4:	9001      	str	r0, [sp, #4]
 80235d6:	7808      	ldrb	r0, [r1, #0]
 80235d8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80235dc:	9002      	str	r0, [sp, #8]
 80235de:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80235e2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80235e6:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80235ea:	fb04 560c 	mla	r6, r4, ip, r5
 80235ee:	2c00      	cmp	r4, #0
 80235f0:	eb02 0e06 	add.w	lr, r2, r6
 80235f4:	9a00      	ldr	r2, [sp, #0]
 80235f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80235fa:	9a01      	ldr	r2, [sp, #4]
 80235fc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023600:	db3e      	blt.n	8023680 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8023602:	45a1      	cmp	r9, r4
 8023604:	dd3c      	ble.n	8023680 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8023606:	2d00      	cmp	r5, #0
 8023608:	db38      	blt.n	802367c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802360a:	45ac      	cmp	ip, r5
 802360c:	dd36      	ble.n	802367c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802360e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8023612:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8023616:	1c6e      	adds	r6, r5, #1
 8023618:	d435      	bmi.n	8023686 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802361a:	45b4      	cmp	ip, r6
 802361c:	dd33      	ble.n	8023686 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802361e:	b393      	cbz	r3, 8023686 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8023620:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8023624:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8023628:	3401      	adds	r4, #1
 802362a:	d430      	bmi.n	802368e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802362c:	45a1      	cmp	r9, r4
 802362e:	dd2e      	ble.n	802368e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8023630:	b36f      	cbz	r7, 802368e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8023632:	2d00      	cmp	r5, #0
 8023634:	db29      	blt.n	802368a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8023636:	45ac      	cmp	ip, r5
 8023638:	dd27      	ble.n	802368a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802363a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802363e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8023642:	3501      	adds	r5, #1
 8023644:	d407      	bmi.n	8023656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8023646:	45ac      	cmp	ip, r5
 8023648:	dd05      	ble.n	8023656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802364a:	b123      	cbz	r3, 8023656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802364c:	44f4      	add	ip, lr
 802364e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023652:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8023656:	2b0f      	cmp	r3, #15
 8023658:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802365c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023660:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023664:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023668:	d801      	bhi.n	802366e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 802366a:	2f0f      	cmp	r7, #15
 802366c:	d911      	bls.n	8023692 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 802366e:	4b76      	ldr	r3, [pc, #472]	; (8023848 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8023670:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023674:	4a75      	ldr	r2, [pc, #468]	; (802384c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8023676:	4876      	ldr	r0, [pc, #472]	; (8023850 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8023678:	f004 ff94 	bl	80285a4 <__assert_func>
 802367c:	4602      	mov	r2, r0
 802367e:	e7ca      	b.n	8023616 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8023680:	4606      	mov	r6, r0
 8023682:	4602      	mov	r2, r0
 8023684:	e7d0      	b.n	8023628 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8023686:	4606      	mov	r6, r0
 8023688:	e7ce      	b.n	8023628 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802368a:	4604      	mov	r4, r0
 802368c:	e7d9      	b.n	8023642 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 802368e:	4604      	mov	r4, r0
 8023690:	e7e1      	b.n	8023656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8023692:	b29b      	uxth	r3, r3
 8023694:	b2bf      	uxth	r7, r7
 8023696:	fb07 fe03 	mul.w	lr, r7, r3
 802369a:	011b      	lsls	r3, r3, #4
 802369c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80236a0:	eba3 0c0e 	sub.w	ip, r3, lr
 80236a4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80236a8:	b2bf      	uxth	r7, r7
 80236aa:	fa1f fc8c 	uxth.w	ip, ip
 80236ae:	1bed      	subs	r5, r5, r7
 80236b0:	fb0c f30a 	mul.w	r3, ip, sl
 80236b4:	b2ad      	uxth	r5, r5
 80236b6:	fb05 330b 	mla	r3, r5, fp, r3
 80236ba:	fb07 3309 	mla	r3, r7, r9, r3
 80236be:	fb0e 3308 	mla	r3, lr, r8, r3
 80236c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80236c6:	9303      	str	r3, [sp, #12]
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	f000 80b9 	beq.w	8023840 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 80236ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80236d2:	d018      	beq.n	8023706 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80236d4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80236d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80236dc:	fb0b f303 	mul.w	r3, fp, r3
 80236e0:	fb0b fb02 	mul.w	fp, fp, r2
 80236e4:	0a1a      	lsrs	r2, r3, #8
 80236e6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80236ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80236ee:	441a      	add	r2, r3
 80236f0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80236f4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80236f8:	0a12      	lsrs	r2, r2, #8
 80236fa:	0a1b      	lsrs	r3, r3, #8
 80236fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023700:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023704:	431a      	orrs	r2, r3
 8023706:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802370a:	d019      	beq.n	8023740 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 802370c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023710:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023714:	fb0a fb0b 	mul.w	fp, sl, fp
 8023718:	fb0a fa06 	mul.w	sl, sl, r6
 802371c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023720:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023724:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023728:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802372c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023730:	445e      	add	r6, fp
 8023732:	0a1b      	lsrs	r3, r3, #8
 8023734:	0a36      	lsrs	r6, r6, #8
 8023736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802373a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802373e:	431e      	orrs	r6, r3
 8023740:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023744:	d019      	beq.n	802377a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8023746:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802374a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802374e:	fb09 fa0a 	mul.w	sl, r9, sl
 8023752:	fb09 f904 	mul.w	r9, r9, r4
 8023756:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802375a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802375e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8023762:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023766:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802376a:	4454      	add	r4, sl
 802376c:	0a1b      	lsrs	r3, r3, #8
 802376e:	0a24      	lsrs	r4, r4, #8
 8023770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023774:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023778:	431c      	orrs	r4, r3
 802377a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802377e:	d019      	beq.n	80237b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8023780:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023784:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023788:	fb08 f909 	mul.w	r9, r8, r9
 802378c:	fb08 f800 	mul.w	r8, r8, r0
 8023790:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023794:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023798:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802379c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80237a0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80237a4:	4448      	add	r0, r9
 80237a6:	0a1b      	lsrs	r3, r3, #8
 80237a8:	0a00      	lsrs	r0, r0, #8
 80237aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80237b2:	4318      	orrs	r0, r3
 80237b4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80237b8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80237bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80237c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80237c4:	fb0c f808 	mul.w	r8, ip, r8
 80237c8:	fb0c f606 	mul.w	r6, ip, r6
 80237cc:	fb05 8803 	mla	r8, r5, r3, r8
 80237d0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80237d4:	fb05 6202 	mla	r2, r5, r2, r6
 80237d8:	fb07 8803 	mla	r8, r7, r3, r8
 80237dc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80237e0:	fb0e 8303 	mla	r3, lr, r3, r8
 80237e4:	0a1b      	lsrs	r3, r3, #8
 80237e6:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80237ea:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80237ee:	9c02      	ldr	r4, [sp, #8]
 80237f0:	fb07 2703 	mla	r7, r7, r3, r2
 80237f4:	9a03      	ldr	r2, [sp, #12]
 80237f6:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80237fa:	43d2      	mvns	r2, r2
 80237fc:	fb0e 7303 	mla	r3, lr, r3, r7
 8023800:	b2d2      	uxtb	r2, r2
 8023802:	0a1b      	lsrs	r3, r3, #8
 8023804:	4354      	muls	r4, r2
 8023806:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802380a:	1c60      	adds	r0, r4, #1
 802380c:	ea48 0303 	orr.w	r3, r8, r3
 8023810:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8023814:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023818:	7008      	strb	r0, [r1, #0]
 802381a:	9801      	ldr	r0, [sp, #4]
 802381c:	4350      	muls	r0, r2
 802381e:	1c44      	adds	r4, r0, #1
 8023820:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8023824:	0a18      	lsrs	r0, r3, #8
 8023826:	0c1b      	lsrs	r3, r3, #16
 8023828:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802382c:	7048      	strb	r0, [r1, #1]
 802382e:	9800      	ldr	r0, [sp, #0]
 8023830:	4350      	muls	r0, r2
 8023832:	4602      	mov	r2, r0
 8023834:	3001      	adds	r0, #1
 8023836:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802383a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802383e:	708b      	strb	r3, [r1, #2]
 8023840:	b005      	add	sp, #20
 8023842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023846:	bf00      	nop
 8023848:	0802d8a7 	.word	0x0802d8a7
 802384c:	0802dd9e 	.word	0x0802dd9e
 8023850:	0802d970 	.word	0x0802d970

08023854 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023858:	ed2d 8b08 	vpush	{d8-d11}
 802385c:	b097      	sub	sp, #92	; 0x5c
 802385e:	eeb0 aa40 	vmov.f32	s20, s0
 8023862:	eef0 9a60 	vmov.f32	s19, s1
 8023866:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8023868:	eeb0 9a41 	vmov.f32	s18, s2
 802386c:	9308      	str	r3, [sp, #32]
 802386e:	eeb0 8a62 	vmov.f32	s16, s5
 8023872:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8023876:	eef0 8a43 	vmov.f32	s17, s6
 802387a:	9015      	str	r0, [sp, #84]	; 0x54
 802387c:	eef0 ba44 	vmov.f32	s23, s8
 8023880:	6868      	ldr	r0, [r5, #4]
 8023882:	eeb0 ba64 	vmov.f32	s22, s9
 8023886:	9112      	str	r1, [sp, #72]	; 0x48
 8023888:	eef0 aa45 	vmov.f32	s21, s10
 802388c:	9310      	str	r3, [sp, #64]	; 0x40
 802388e:	9214      	str	r2, [sp, #80]	; 0x50
 8023890:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8023892:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8023896:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802389a:	fb00 1303 	mla	r3, r0, r3, r1
 802389e:	6829      	ldr	r1, [r5, #0]
 80238a0:	6855      	ldr	r5, [r2, #4]
 80238a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238a6:	3504      	adds	r5, #4
 80238a8:	18cb      	adds	r3, r1, r3
 80238aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80238ac:	6813      	ldr	r3, [r2, #0]
 80238ae:	9311      	str	r3, [sp, #68]	; 0x44
 80238b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80238b2:	2b00      	cmp	r3, #0
 80238b4:	dc03      	bgt.n	80238be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80238b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	f340 8333 	ble.w	8023f24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80238be:	9b08      	ldr	r3, [sp, #32]
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	f340 8190 	ble.w	8023be6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80238c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80238c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80238ca:	1412      	asrs	r2, r2, #16
 80238cc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80238d0:	d42f      	bmi.n	8023932 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80238d2:	1c51      	adds	r1, r2, #1
 80238d4:	428c      	cmp	r4, r1
 80238d6:	dd2f      	ble.n	8023938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80238d8:	2b00      	cmp	r3, #0
 80238da:	db2d      	blt.n	8023938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80238dc:	1c59      	adds	r1, r3, #1
 80238de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80238e0:	4288      	cmp	r0, r1
 80238e2:	dd29      	ble.n	8023938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80238e4:	9b08      	ldr	r3, [sp, #32]
 80238e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80238e8:	3b01      	subs	r3, #1
 80238ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80238ec:	fb02 1203 	mla	r2, r2, r3, r1
 80238f0:	1412      	asrs	r2, r2, #16
 80238f2:	d42b      	bmi.n	802394c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80238f4:	3201      	adds	r2, #1
 80238f6:	4294      	cmp	r4, r2
 80238f8:	dd28      	ble.n	802394c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80238fa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80238fc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80238fe:	fb02 1303 	mla	r3, r2, r3, r1
 8023902:	141b      	asrs	r3, r3, #16
 8023904:	d422      	bmi.n	802394c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8023906:	3301      	adds	r3, #1
 8023908:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802390a:	429a      	cmp	r2, r3
 802390c:	dd1e      	ble.n	802394c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802390e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023910:	f103 0803 	add.w	r8, r3, #3
 8023914:	9b08      	ldr	r3, [sp, #32]
 8023916:	9307      	str	r3, [sp, #28]
 8023918:	9b07      	ldr	r3, [sp, #28]
 802391a:	2b00      	cmp	r3, #0
 802391c:	f300 81ca 	bgt.w	8023cb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8023920:	9b08      	ldr	r3, [sp, #32]
 8023922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023924:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802392c:	441a      	add	r2, r3
 802392e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023930:	e15b      	b.n	8023bea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8023932:	1c51      	adds	r1, r2, #1
 8023934:	f040 8148 	bne.w	8023bc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023938:	42a2      	cmp	r2, r4
 802393a:	f280 8145 	bge.w	8023bc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802393e:	1c5a      	adds	r2, r3, #1
 8023940:	f2c0 8142 	blt.w	8023bc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023944:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023946:	4293      	cmp	r3, r2
 8023948:	f280 813e 	bge.w	8023bc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802394c:	9b08      	ldr	r3, [sp, #32]
 802394e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023952:	9307      	str	r3, [sp, #28]
 8023954:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023956:	2b00      	cmp	r3, #0
 8023958:	dde2      	ble.n	8023920 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802395a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802395c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802395e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023962:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023964:	141b      	asrs	r3, r3, #16
 8023966:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802396a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802396c:	1412      	asrs	r2, r2, #16
 802396e:	f100 818b 	bmi.w	8023c88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8023972:	1c56      	adds	r6, r2, #1
 8023974:	42b4      	cmp	r4, r6
 8023976:	f340 8189 	ble.w	8023c8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802397a:	2b00      	cmp	r3, #0
 802397c:	f2c0 8186 	blt.w	8023c8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8023980:	1c5e      	adds	r6, r3, #1
 8023982:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023984:	42b7      	cmp	r7, r6
 8023986:	f340 8181 	ble.w	8023c8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802398a:	fb03 2304 	mla	r3, r3, r4, r2
 802398e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023990:	18d6      	adds	r6, r2, r3
 8023992:	5cd3      	ldrb	r3, [r2, r3]
 8023994:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023998:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802399c:	2900      	cmp	r1, #0
 802399e:	f000 8163 	beq.w	8023c68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80239a2:	7872      	ldrb	r2, [r6, #1]
 80239a4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80239a8:	920c      	str	r2, [sp, #48]	; 0x30
 80239aa:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80239ae:	2800      	cmp	r0, #0
 80239b0:	f000 8164 	beq.w	8023c7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 80239b4:	1932      	adds	r2, r6, r4
 80239b6:	5d36      	ldrb	r6, [r6, r4]
 80239b8:	7852      	ldrb	r2, [r2, #1]
 80239ba:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80239be:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80239c2:	9609      	str	r6, [sp, #36]	; 0x24
 80239c4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80239c8:	0e16      	lsrs	r6, r2, #24
 80239ca:	920d      	str	r2, [sp, #52]	; 0x34
 80239cc:	b289      	uxth	r1, r1
 80239ce:	b280      	uxth	r0, r0
 80239d0:	fb01 fb00 	mul.w	fp, r1, r0
 80239d4:	0109      	lsls	r1, r1, #4
 80239d6:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80239da:	eba1 090b 	sub.w	r9, r1, fp
 80239de:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80239e2:	b280      	uxth	r0, r0
 80239e4:	fa1f f989 	uxth.w	r9, r9
 80239e8:	1a12      	subs	r2, r2, r0
 80239ea:	fb09 f108 	mul.w	r1, r9, r8
 80239ee:	b292      	uxth	r2, r2
 80239f0:	fb02 110c 	mla	r1, r2, ip, r1
 80239f4:	fb00 110a 	mla	r1, r0, sl, r1
 80239f8:	fb0b 1106 	mla	r1, fp, r6, r1
 80239fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023a00:	2900      	cmp	r1, #0
 8023a02:	f000 80d2 	beq.w	8023baa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023a06:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023a0a:	d01b      	beq.n	8023a44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8023a0c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023a10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023a14:	fb0c fe0e 	mul.w	lr, ip, lr
 8023a18:	fb0c fc03 	mul.w	ip, ip, r3
 8023a1c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8023a20:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023a24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023a28:	4473      	add	r3, lr
 8023a2a:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8023a2e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8023a32:	0a1b      	lsrs	r3, r3, #8
 8023a34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023a3c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023a40:	ea43 030e 	orr.w	r3, r3, lr
 8023a44:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023a48:	d01e      	beq.n	8023a88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8023a4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023a4c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023a50:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8023a54:	fb08 fc0c 	mul.w	ip, r8, ip
 8023a58:	fb08 f80e 	mul.w	r8, r8, lr
 8023a5c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023a60:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023a64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a68:	44e6      	add	lr, ip
 8023a6a:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023a6e:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023a72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a76:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023a7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a7e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023a82:	ea4e 0708 	orr.w	r7, lr, r8
 8023a86:	970c      	str	r7, [sp, #48]	; 0x30
 8023a88:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023a8c:	d01e      	beq.n	8023acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8023a8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023a90:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023a94:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023a98:	fb0a f808 	mul.w	r8, sl, r8
 8023a9c:	fb0a fa0c 	mul.w	sl, sl, ip
 8023aa0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023aa4:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023aa8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023aac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ab0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ab4:	44c6      	add	lr, r8
 8023ab6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023aba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023abe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ac2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ac6:	ea4e 070a 	orr.w	r7, lr, sl
 8023aca:	9709      	str	r7, [sp, #36]	; 0x24
 8023acc:	2eff      	cmp	r6, #255	; 0xff
 8023ace:	d01d      	beq.n	8023b0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8023ad0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023ad2:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023ad6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023ada:	fb06 f808 	mul.w	r8, r6, r8
 8023ade:	fb06 f60c 	mul.w	r6, r6, ip
 8023ae2:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023ae6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023aea:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8023aee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023af2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8023af6:	44c6      	add	lr, r8
 8023af8:	0a36      	lsrs	r6, r6, #8
 8023afa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023afe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023b02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b06:	ea4e 0606 	orr.w	r6, lr, r6
 8023b0a:	960d      	str	r6, [sp, #52]	; 0x34
 8023b0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023b0e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023b12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023b14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b18:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023b1c:	43c9      	mvns	r1, r1
 8023b1e:	fb09 f606 	mul.w	r6, r9, r6
 8023b22:	b2c9      	uxtb	r1, r1
 8023b24:	fb02 660c 	mla	r6, r2, ip, r6
 8023b28:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023b2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023b2e:	fb00 660c 	mla	r6, r0, ip, r6
 8023b32:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023b36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023b38:	fb0b 660c 	mla	r6, fp, ip, r6
 8023b3c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023b40:	fb09 f90c 	mul.w	r9, r9, ip
 8023b44:	0a36      	lsrs	r6, r6, #8
 8023b46:	fb02 9303 	mla	r3, r2, r3, r9
 8023b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023b4c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023b50:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023b54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023b56:	fb00 330e 	mla	r3, r0, lr, r3
 8023b5a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8023b5e:	fb0b 3b00 	mla	fp, fp, r0, r3
 8023b62:	9b07      	ldr	r3, [sp, #28]
 8023b64:	781b      	ldrb	r3, [r3, #0]
 8023b66:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023b6a:	fb03 f201 	mul.w	r2, r3, r1
 8023b6e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023b72:	1c53      	adds	r3, r2, #1
 8023b74:	ea46 060b 	orr.w	r6, r6, fp
 8023b78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023b7c:	9a07      	ldr	r2, [sp, #28]
 8023b7e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023b82:	7013      	strb	r3, [r2, #0]
 8023b84:	7853      	ldrb	r3, [r2, #1]
 8023b86:	434b      	muls	r3, r1
 8023b88:	1c5a      	adds	r2, r3, #1
 8023b8a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023b8e:	0a33      	lsrs	r3, r6, #8
 8023b90:	0c36      	lsrs	r6, r6, #16
 8023b92:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023b96:	9a07      	ldr	r2, [sp, #28]
 8023b98:	7053      	strb	r3, [r2, #1]
 8023b9a:	7893      	ldrb	r3, [r2, #2]
 8023b9c:	4359      	muls	r1, r3
 8023b9e:	1c4b      	adds	r3, r1, #1
 8023ba0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023ba4:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8023ba8:	7096      	strb	r6, [r2, #2]
 8023baa:	9b07      	ldr	r3, [sp, #28]
 8023bac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023bae:	3303      	adds	r3, #3
 8023bb0:	9307      	str	r3, [sp, #28]
 8023bb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023bb4:	4413      	add	r3, r2
 8023bb6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023bb8:	9329      	str	r3, [sp, #164]	; 0xa4
 8023bba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023bbc:	4413      	add	r3, r2
 8023bbe:	932a      	str	r3, [sp, #168]	; 0xa8
 8023bc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023bc2:	3b01      	subs	r3, #1
 8023bc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8023bc6:	e6c5      	b.n	8023954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8023bc8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023bca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023bcc:	4413      	add	r3, r2
 8023bce:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023bd0:	9329      	str	r3, [sp, #164]	; 0xa4
 8023bd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023bd4:	4413      	add	r3, r2
 8023bd6:	932a      	str	r3, [sp, #168]	; 0xa8
 8023bd8:	9b08      	ldr	r3, [sp, #32]
 8023bda:	3b01      	subs	r3, #1
 8023bdc:	9308      	str	r3, [sp, #32]
 8023bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023be0:	3303      	adds	r3, #3
 8023be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8023be4:	e66b      	b.n	80238be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023be6:	f47f ae7d 	bne.w	80238e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8023bea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023bec:	2b00      	cmp	r3, #0
 8023bee:	f340 8199 	ble.w	8023f24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8023bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023bf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023bf8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023bfc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023c00:	eef0 6a48 	vmov.f32	s13, s16
 8023c04:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023c08:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023c0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c10:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023c14:	eef0 6a68 	vmov.f32	s13, s17
 8023c18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c1c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8023c20:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023c24:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023c28:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023c2c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023c30:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023c34:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023c38:	ee18 2a10 	vmov	r2, s16
 8023c3c:	eeb0 8a47 	vmov.f32	s16, s14
 8023c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c44:	ee18 2a90 	vmov	r2, s17
 8023c48:	932b      	str	r3, [sp, #172]	; 0xac
 8023c4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023c4c:	eef0 8a67 	vmov.f32	s17, s15
 8023c50:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c54:	932c      	str	r3, [sp, #176]	; 0xb0
 8023c56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023c58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023c5a:	3b01      	subs	r3, #1
 8023c5c:	9312      	str	r3, [sp, #72]	; 0x48
 8023c5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023c60:	bf08      	it	eq
 8023c62:	4613      	moveq	r3, r2
 8023c64:	9308      	str	r3, [sp, #32]
 8023c66:	e623      	b.n	80238b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8023c68:	b158      	cbz	r0, 8023c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023c6a:	5d32      	ldrb	r2, [r6, r4]
 8023c6c:	26ff      	movs	r6, #255	; 0xff
 8023c6e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023c72:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8023c76:	9209      	str	r2, [sp, #36]	; 0x24
 8023c78:	46b0      	mov	r8, r6
 8023c7a:	e6a7      	b.n	80239cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023c7c:	26ff      	movs	r6, #255	; 0xff
 8023c7e:	46b2      	mov	sl, r6
 8023c80:	e6a4      	b.n	80239cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023c82:	26ff      	movs	r6, #255	; 0xff
 8023c84:	46b2      	mov	sl, r6
 8023c86:	e7f7      	b.n	8023c78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8023c88:	1c57      	adds	r7, r2, #1
 8023c8a:	d18e      	bne.n	8023baa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023c8c:	4294      	cmp	r4, r2
 8023c8e:	dd8c      	ble.n	8023baa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023c90:	1c5e      	adds	r6, r3, #1
 8023c92:	db8a      	blt.n	8023baa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023c94:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023c96:	429e      	cmp	r6, r3
 8023c98:	dd87      	ble.n	8023baa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023c9a:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8023c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023ca2:	e9cd 4600 	strd	r4, r6, [sp]
 8023ca6:	462b      	mov	r3, r5
 8023ca8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023caa:	9907      	ldr	r1, [sp, #28]
 8023cac:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023cae:	f7ff fc85 	bl	80235bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8023cb2:	e77a      	b.n	8023baa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023cb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023cb6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023cb8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023cbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023cbe:	1409      	asrs	r1, r1, #16
 8023cc0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8023cc4:	141b      	asrs	r3, r3, #16
 8023cc6:	fb04 1303 	mla	r3, r4, r3, r1
 8023cca:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023ccc:	18ce      	adds	r6, r1, r3
 8023cce:	5ccb      	ldrb	r3, [r1, r3]
 8023cd0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023cd4:	0e1f      	lsrs	r7, r3, #24
 8023cd6:	2a00      	cmp	r2, #0
 8023cd8:	f000 8114 	beq.w	8023f04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8023cdc:	7871      	ldrb	r1, [r6, #1]
 8023cde:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023ce2:	910e      	str	r1, [sp, #56]	; 0x38
 8023ce4:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023ce8:	2800      	cmp	r0, #0
 8023cea:	f000 8115 	beq.w	8023f18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8023cee:	1931      	adds	r1, r6, r4
 8023cf0:	5d36      	ldrb	r6, [r6, r4]
 8023cf2:	7849      	ldrb	r1, [r1, #1]
 8023cf4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8023cf8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023cfc:	960a      	str	r6, [sp, #40]	; 0x28
 8023cfe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023d02:	0e0e      	lsrs	r6, r1, #24
 8023d04:	910f      	str	r1, [sp, #60]	; 0x3c
 8023d06:	b292      	uxth	r2, r2
 8023d08:	b280      	uxth	r0, r0
 8023d0a:	fb02 fb00 	mul.w	fp, r2, r0
 8023d0e:	0112      	lsls	r2, r2, #4
 8023d10:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023d14:	eba2 090b 	sub.w	r9, r2, fp
 8023d18:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023d1c:	b280      	uxth	r0, r0
 8023d1e:	fa1f f989 	uxth.w	r9, r9
 8023d22:	1a09      	subs	r1, r1, r0
 8023d24:	fb09 f20e 	mul.w	r2, r9, lr
 8023d28:	b289      	uxth	r1, r1
 8023d2a:	fb01 2207 	mla	r2, r1, r7, r2
 8023d2e:	fb00 220a 	mla	r2, r0, sl, r2
 8023d32:	fb0b 2206 	mla	r2, fp, r6, r2
 8023d36:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023d3a:	9213      	str	r2, [sp, #76]	; 0x4c
 8023d3c:	2a00      	cmp	r2, #0
 8023d3e:	f000 80d4 	beq.w	8023eea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8023d42:	2fff      	cmp	r7, #255	; 0xff
 8023d44:	d01a      	beq.n	8023d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8023d46:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023d4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d4e:	fb07 fc0c 	mul.w	ip, r7, ip
 8023d52:	435f      	muls	r7, r3
 8023d54:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023d58:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023d5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023d60:	4463      	add	r3, ip
 8023d62:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8023d66:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023d6a:	0a1b      	lsrs	r3, r3, #8
 8023d6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023d74:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023d78:	ea43 030c 	orr.w	r3, r3, ip
 8023d7c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023d80:	d01f      	beq.n	8023dc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8023d82:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023d84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d86:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023d8a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023d8e:	fb0e f707 	mul.w	r7, lr, r7
 8023d92:	fb0e fe0c 	mul.w	lr, lr, ip
 8023d96:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d9a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023d9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023da2:	44bc      	add	ip, r7
 8023da4:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023da8:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023dac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023db0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023db4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023db8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023dbc:	ea4c 020e 	orr.w	r2, ip, lr
 8023dc0:	920e      	str	r2, [sp, #56]	; 0x38
 8023dc2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023dc6:	d01e      	beq.n	8023e06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8023dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023dca:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023dce:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023dd2:	fb0a fe0e 	mul.w	lr, sl, lr
 8023dd6:	fb0a fa07 	mul.w	sl, sl, r7
 8023dda:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023dde:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023de2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023de6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023dea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023dee:	44f4      	add	ip, lr
 8023df0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023df4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023df8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023dfc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e00:	ea4c 020a 	orr.w	r2, ip, sl
 8023e04:	920a      	str	r2, [sp, #40]	; 0x28
 8023e06:	2eff      	cmp	r6, #255	; 0xff
 8023e08:	d01c      	beq.n	8023e44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8023e0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023e0c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023e10:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023e14:	fb06 fe0e 	mul.w	lr, r6, lr
 8023e18:	437e      	muls	r6, r7
 8023e1a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023e1e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023e22:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023e26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e2a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023e2e:	44f4      	add	ip, lr
 8023e30:	0a36      	lsrs	r6, r6, #8
 8023e32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e36:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023e3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e3e:	ea4c 0206 	orr.w	r2, ip, r6
 8023e42:	920f      	str	r2, [sp, #60]	; 0x3c
 8023e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023e46:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023e4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e4e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8023e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e54:	fb09 f606 	mul.w	r6, r9, r6
 8023e58:	fb01 6607 	mla	r6, r1, r7, r6
 8023e5c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023e60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023e62:	fb00 6607 	mla	r6, r0, r7, r6
 8023e66:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023e6c:	fb0b 6607 	mla	r6, fp, r7, r6
 8023e70:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e76:	fb09 f907 	mul.w	r9, r9, r7
 8023e7a:	0a36      	lsrs	r6, r6, #8
 8023e7c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023e82:	fb01 9303 	mla	r3, r1, r3, r9
 8023e86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023e8a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023e8e:	fb00 330c 	mla	r3, r0, ip, r3
 8023e92:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8023e96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023e98:	43da      	mvns	r2, r3
 8023e9a:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8023e9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023ea2:	b2d2      	uxtb	r2, r2
 8023ea4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023ea8:	fb03 f102 	mul.w	r1, r3, r2
 8023eac:	ea46 060e 	orr.w	r6, r6, lr
 8023eb0:	1c4b      	adds	r3, r1, #1
 8023eb2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023eb6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023eba:	f808 3c03 	strb.w	r3, [r8, #-3]
 8023ebe:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8023ec2:	4353      	muls	r3, r2
 8023ec4:	1c59      	adds	r1, r3, #1
 8023ec6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023eca:	0a33      	lsrs	r3, r6, #8
 8023ecc:	0c36      	lsrs	r6, r6, #16
 8023ece:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023ed2:	f808 3c02 	strb.w	r3, [r8, #-2]
 8023ed6:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8023eda:	435a      	muls	r2, r3
 8023edc:	1c53      	adds	r3, r2, #1
 8023ede:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023ee2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023ee6:	f808 6c01 	strb.w	r6, [r8, #-1]
 8023eea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023eec:	f108 0803 	add.w	r8, r8, #3
 8023ef0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023ef2:	4413      	add	r3, r2
 8023ef4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023ef6:	9329      	str	r3, [sp, #164]	; 0xa4
 8023ef8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023efa:	4413      	add	r3, r2
 8023efc:	932a      	str	r3, [sp, #168]	; 0xa8
 8023efe:	9b07      	ldr	r3, [sp, #28]
 8023f00:	3b01      	subs	r3, #1
 8023f02:	e508      	b.n	8023916 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8023f04:	b158      	cbz	r0, 8023f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8023f06:	5d31      	ldrb	r1, [r6, r4]
 8023f08:	26ff      	movs	r6, #255	; 0xff
 8023f0a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023f0e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023f12:	910a      	str	r1, [sp, #40]	; 0x28
 8023f14:	46b6      	mov	lr, r6
 8023f16:	e6f6      	b.n	8023d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023f18:	26ff      	movs	r6, #255	; 0xff
 8023f1a:	46b2      	mov	sl, r6
 8023f1c:	e6f3      	b.n	8023d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023f1e:	26ff      	movs	r6, #255	; 0xff
 8023f20:	46b2      	mov	sl, r6
 8023f22:	e7f7      	b.n	8023f14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8023f24:	b017      	add	sp, #92	; 0x5c
 8023f26:	ecbd 8b08 	vpop	{d8-d11}
 8023f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023f30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8023f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f34:	b08d      	sub	sp, #52	; 0x34
 8023f36:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8023f3a:	9103      	str	r1, [sp, #12]
 8023f3c:	fb07 5803 	mla	r8, r7, r3, r5
 8023f40:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8023f44:	9803      	ldr	r0, [sp, #12]
 8023f46:	2f00      	cmp	r7, #0
 8023f48:	910b      	str	r1, [sp, #44]	; 0x2c
 8023f4a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023f4e:	9903      	ldr	r1, [sp, #12]
 8023f50:	9c03      	ldr	r4, [sp, #12]
 8023f52:	eb02 0608 	add.w	r6, r2, r8
 8023f56:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8023f5a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8023f5e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8023f62:	7809      	ldrb	r1, [r1, #0]
 8023f64:	7840      	ldrb	r0, [r0, #1]
 8023f66:	78a4      	ldrb	r4, [r4, #2]
 8023f68:	db51      	blt.n	802400e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023f6a:	45be      	cmp	lr, r7
 8023f6c:	dd4f      	ble.n	802400e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023f6e:	2d00      	cmp	r5, #0
 8023f70:	db49      	blt.n	8024006 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023f72:	42ab      	cmp	r3, r5
 8023f74:	dd47      	ble.n	8024006 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023f76:	f812 2008 	ldrb.w	r2, [r2, r8]
 8023f7a:	9204      	str	r2, [sp, #16]
 8023f7c:	7872      	ldrb	r2, [r6, #1]
 8023f7e:	9205      	str	r2, [sp, #20]
 8023f80:	78b2      	ldrb	r2, [r6, #2]
 8023f82:	9206      	str	r2, [sp, #24]
 8023f84:	1c6a      	adds	r2, r5, #1
 8023f86:	d449      	bmi.n	802401c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023f88:	4293      	cmp	r3, r2
 8023f8a:	dd47      	ble.n	802401c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023f8c:	f1bc 0f00 	cmp.w	ip, #0
 8023f90:	d044      	beq.n	802401c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023f92:	7972      	ldrb	r2, [r6, #5]
 8023f94:	f896 b003 	ldrb.w	fp, [r6, #3]
 8023f98:	f896 a004 	ldrb.w	sl, [r6, #4]
 8023f9c:	9201      	str	r2, [sp, #4]
 8023f9e:	3701      	adds	r7, #1
 8023fa0:	d444      	bmi.n	802402c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8023fa2:	45be      	cmp	lr, r7
 8023fa4:	dd42      	ble.n	802402c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8023fa6:	f1b9 0f00 	cmp.w	r9, #0
 8023faa:	f000 80c1 	beq.w	8024130 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8023fae:	2d00      	cmp	r5, #0
 8023fb0:	db38      	blt.n	8024024 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8023fb2:	42ab      	cmp	r3, r5
 8023fb4:	dd36      	ble.n	8024024 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8023fb6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023fba:	f816 8002 	ldrb.w	r8, [r6, r2]
 8023fbe:	2203      	movs	r2, #3
 8023fc0:	fb03 6702 	mla	r7, r3, r2, r6
 8023fc4:	fb03 6202 	mla	r2, r3, r2, r6
 8023fc8:	787f      	ldrb	r7, [r7, #1]
 8023fca:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023fce:	9702      	str	r7, [sp, #8]
 8023fd0:	3501      	adds	r5, #1
 8023fd2:	d432      	bmi.n	802403a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023fd4:	42ab      	cmp	r3, r5
 8023fd6:	dd30      	ble.n	802403a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023fd8:	f1bc 0f00 	cmp.w	ip, #0
 8023fdc:	d031      	beq.n	8024042 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8023fde:	2703      	movs	r7, #3
 8023fe0:	fb13 7207 	smlabb	r2, r3, r7, r7
 8023fe4:	5cb5      	ldrb	r5, [r6, r2]
 8023fe6:	fb03 6207 	mla	r2, r3, r7, r6
 8023fea:	fb03 6307 	mla	r3, r3, r7, r6
 8023fee:	7912      	ldrb	r2, [r2, #4]
 8023ff0:	795e      	ldrb	r6, [r3, #5]
 8023ff2:	f1bc 0f0f 	cmp.w	ip, #15
 8023ff6:	d927      	bls.n	8024048 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8023ff8:	4b53      	ldr	r3, [pc, #332]	; (8024148 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8023ffa:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023ffe:	4a53      	ldr	r2, [pc, #332]	; (802414c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8024000:	4853      	ldr	r0, [pc, #332]	; (8024150 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8024002:	f004 facf 	bl	80285a4 <__assert_func>
 8024006:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802400a:	9104      	str	r1, [sp, #16]
 802400c:	e7ba      	b.n	8023f84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 802400e:	9401      	str	r4, [sp, #4]
 8024010:	4682      	mov	sl, r0
 8024012:	468b      	mov	fp, r1
 8024014:	9104      	str	r1, [sp, #16]
 8024016:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802401a:	e7c0      	b.n	8023f9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802401c:	9401      	str	r4, [sp, #4]
 802401e:	4682      	mov	sl, r0
 8024020:	468b      	mov	fp, r1
 8024022:	e7bc      	b.n	8023f9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8024024:	46a6      	mov	lr, r4
 8024026:	9002      	str	r0, [sp, #8]
 8024028:	4688      	mov	r8, r1
 802402a:	e7d1      	b.n	8023fd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802402c:	4626      	mov	r6, r4
 802402e:	4602      	mov	r2, r0
 8024030:	460d      	mov	r5, r1
 8024032:	46a6      	mov	lr, r4
 8024034:	9002      	str	r0, [sp, #8]
 8024036:	4688      	mov	r8, r1
 8024038:	e7db      	b.n	8023ff2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802403a:	4626      	mov	r6, r4
 802403c:	4602      	mov	r2, r0
 802403e:	460d      	mov	r5, r1
 8024040:	e7d7      	b.n	8023ff2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8024042:	4626      	mov	r6, r4
 8024044:	4602      	mov	r2, r0
 8024046:	460d      	mov	r5, r1
 8024048:	f1b9 0f0f 	cmp.w	r9, #15
 802404c:	d8d4      	bhi.n	8023ff8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802404e:	fa1f f38c 	uxth.w	r3, ip
 8024052:	fa1f fc89 	uxth.w	ip, r9
 8024056:	fb03 f70c 	mul.w	r7, r3, ip
 802405a:	011b      	lsls	r3, r3, #4
 802405c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8024060:	9707      	str	r7, [sp, #28]
 8024062:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8024066:	fa1f fc8c 	uxth.w	ip, ip
 802406a:	eba7 070c 	sub.w	r7, r7, ip
 802406e:	b2bf      	uxth	r7, r7
 8024070:	9709      	str	r7, [sp, #36]	; 0x24
 8024072:	9f07      	ldr	r7, [sp, #28]
 8024074:	1bdb      	subs	r3, r3, r7
 8024076:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802407a:	b29b      	uxth	r3, r3
 802407c:	9708      	str	r7, [sp, #32]
 802407e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024080:	930a      	str	r3, [sp, #40]	; 0x28
 8024082:	ea6f 0907 	mvn.w	r9, r7
 8024086:	fb03 fb0b 	mul.w	fp, r3, fp
 802408a:	9f04      	ldr	r7, [sp, #16]
 802408c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802408e:	fa5f f989 	uxtb.w	r9, r9
 8024092:	fb03 bb07 	mla	fp, r3, r7, fp
 8024096:	9f07      	ldr	r7, [sp, #28]
 8024098:	fb11 f109 	smulbb	r1, r1, r9
 802409c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802409e:	fb0c b808 	mla	r8, ip, r8, fp
 80240a2:	fb10 f009 	smulbb	r0, r0, r9
 80240a6:	fb14 f409 	smulbb	r4, r4, r9
 80240aa:	fb07 8805 	mla	r8, r7, r5, r8
 80240ae:	9d08      	ldr	r5, [sp, #32]
 80240b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80240b2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80240b6:	fb08 1805 	mla	r8, r8, r5, r1
 80240ba:	9d05      	ldr	r5, [sp, #20]
 80240bc:	fa1f f888 	uxth.w	r8, r8
 80240c0:	f108 0101 	add.w	r1, r8, #1
 80240c4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80240c8:	9903      	ldr	r1, [sp, #12]
 80240ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 80240ce:	f881 8000 	strb.w	r8, [r1]
 80240d2:	fb03 f10a 	mul.w	r1, r3, sl
 80240d6:	fb07 1105 	mla	r1, r7, r5, r1
 80240da:	9d02      	ldr	r5, [sp, #8]
 80240dc:	fb0c 1105 	mla	r1, ip, r5, r1
 80240e0:	9d07      	ldr	r5, [sp, #28]
 80240e2:	fb05 1102 	mla	r1, r5, r2, r1
 80240e6:	9a08      	ldr	r2, [sp, #32]
 80240e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80240ec:	fb01 0102 	mla	r1, r1, r2, r0
 80240f0:	9a03      	ldr	r2, [sp, #12]
 80240f2:	b289      	uxth	r1, r1
 80240f4:	1c48      	adds	r0, r1, #1
 80240f6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80240fa:	1209      	asrs	r1, r1, #8
 80240fc:	7051      	strb	r1, [r2, #1]
 80240fe:	9a01      	ldr	r2, [sp, #4]
 8024100:	4353      	muls	r3, r2
 8024102:	9a06      	ldr	r2, [sp, #24]
 8024104:	fb07 3702 	mla	r7, r7, r2, r3
 8024108:	9b08      	ldr	r3, [sp, #32]
 802410a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 802410e:	fb05 c606 	mla	r6, r5, r6, ip
 8024112:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024116:	fb06 4603 	mla	r6, r6, r3, r4
 802411a:	9b03      	ldr	r3, [sp, #12]
 802411c:	b2b6      	uxth	r6, r6
 802411e:	f106 0e01 	add.w	lr, r6, #1
 8024122:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8024126:	1236      	asrs	r6, r6, #8
 8024128:	709e      	strb	r6, [r3, #2]
 802412a:	b00d      	add	sp, #52	; 0x34
 802412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024130:	f1bc 0f0f 	cmp.w	ip, #15
 8024134:	f63f af60 	bhi.w	8023ff8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8024138:	4626      	mov	r6, r4
 802413a:	4602      	mov	r2, r0
 802413c:	460d      	mov	r5, r1
 802413e:	46a6      	mov	lr, r4
 8024140:	9002      	str	r0, [sp, #8]
 8024142:	4688      	mov	r8, r1
 8024144:	e783      	b.n	802404e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8024146:	bf00      	nop
 8024148:	0802d8a7 	.word	0x0802d8a7
 802414c:	0802dd9e 	.word	0x0802dd9e
 8024150:	0802d970 	.word	0x0802d970

08024154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024158:	ed2d 8b08 	vpush	{d8-d11}
 802415c:	b0a1      	sub	sp, #132	; 0x84
 802415e:	eeb0 aa40 	vmov.f32	s20, s0
 8024162:	eef0 9a60 	vmov.f32	s19, s1
 8024166:	9307      	str	r3, [sp, #28]
 8024168:	eeb0 9a41 	vmov.f32	s18, s2
 802416c:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8024170:	eeb0 8a62 	vmov.f32	s16, s5
 8024174:	9210      	str	r2, [sp, #64]	; 0x40
 8024176:	eef0 8a43 	vmov.f32	s17, s6
 802417a:	9308      	str	r3, [sp, #32]
 802417c:	eef0 ba44 	vmov.f32	s23, s8
 8024180:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8024184:	eeb0 ba64 	vmov.f32	s22, s9
 8024188:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 802418a:	eef0 aa45 	vmov.f32	s21, s10
 802418e:	930a      	str	r3, [sp, #40]	; 0x28
 8024190:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8024194:	901f      	str	r0, [sp, #124]	; 0x7c
 8024196:	930f      	str	r3, [sp, #60]	; 0x3c
 8024198:	6850      	ldr	r0, [r2, #4]
 802419a:	910e      	str	r1, [sp, #56]	; 0x38
 802419c:	6812      	ldr	r2, [r2, #0]
 802419e:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80241a2:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80241a6:	fb00 1303 	mla	r3, r0, r3, r1
 80241aa:	9908      	ldr	r1, [sp, #32]
 80241ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80241b0:	18d3      	adds	r3, r2, r3
 80241b2:	2203      	movs	r2, #3
 80241b4:	9309      	str	r3, [sp, #36]	; 0x24
 80241b6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80241b8:	681b      	ldr	r3, [r3, #0]
 80241ba:	930c      	str	r3, [sp, #48]	; 0x30
 80241bc:	f06f 0304 	mvn.w	r3, #4
 80241c0:	fb11 3302 	smlabb	r3, r1, r2, r3
 80241c4:	930d      	str	r3, [sp, #52]	; 0x34
 80241c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80241c8:	43db      	mvns	r3, r3
 80241ca:	b2db      	uxtb	r3, r3
 80241cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80241ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80241d0:	2b00      	cmp	r3, #0
 80241d2:	dc03      	bgt.n	80241dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80241d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80241d6:	2b00      	cmp	r3, #0
 80241d8:	f340 81df 	ble.w	802459a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80241dc:	9b07      	ldr	r3, [sp, #28]
 80241de:	2b00      	cmp	r3, #0
 80241e0:	f340 80f2 	ble.w	80243c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80241e4:	ea5f 4228 	movs.w	r2, r8, asr #16
 80241e8:	ea4f 432b 	mov.w	r3, fp, asr #16
 80241ec:	d430      	bmi.n	8024250 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80241ee:	1c51      	adds	r1, r2, #1
 80241f0:	9808      	ldr	r0, [sp, #32]
 80241f2:	4281      	cmp	r1, r0
 80241f4:	da2f      	bge.n	8024256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	db2d      	blt.n	8024256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80241fa:	1c59      	adds	r1, r3, #1
 80241fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80241fe:	4288      	cmp	r0, r1
 8024200:	dd29      	ble.n	8024256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8024202:	9b07      	ldr	r3, [sp, #28]
 8024204:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8024206:	3b01      	subs	r3, #1
 8024208:	fb02 8203 	mla	r2, r2, r3, r8
 802420c:	1412      	asrs	r2, r2, #16
 802420e:	d42d      	bmi.n	802426c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8024210:	3201      	adds	r2, #1
 8024212:	9908      	ldr	r1, [sp, #32]
 8024214:	4291      	cmp	r1, r2
 8024216:	dd29      	ble.n	802426c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8024218:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802421a:	fb02 b303 	mla	r3, r2, r3, fp
 802421e:	141b      	asrs	r3, r3, #16
 8024220:	d424      	bmi.n	802426c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8024222:	3301      	adds	r3, #1
 8024224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024226:	429a      	cmp	r2, r3
 8024228:	dd20      	ble.n	802426c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802422a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802422c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8024230:	1cde      	adds	r6, r3, #3
 8024232:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8024236:	f1bc 0f00 	cmp.w	ip, #0
 802423a:	f300 811f 	bgt.w	802447c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802423e:	9b07      	ldr	r3, [sp, #28]
 8024240:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024246:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802424a:	4423      	add	r3, r4
 802424c:	9309      	str	r3, [sp, #36]	; 0x24
 802424e:	e0bd      	b.n	80243cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8024250:	1c57      	adds	r7, r2, #1
 8024252:	f040 80ae 	bne.w	80243b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8024256:	9908      	ldr	r1, [sp, #32]
 8024258:	428a      	cmp	r2, r1
 802425a:	f280 80aa 	bge.w	80243b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802425e:	1c5e      	adds	r6, r3, #1
 8024260:	f2c0 80a7 	blt.w	80243b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8024264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024266:	4293      	cmp	r3, r2
 8024268:	f280 80a3 	bge.w	80243b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802426c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8024270:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024272:	f1ba 0f00 	cmp.w	sl, #0
 8024276:	dde2      	ble.n	802423e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8024278:	ea5f 4028 	movs.w	r0, r8, asr #16
 802427c:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8024280:	ea4f 412b 	mov.w	r1, fp, asr #16
 8024284:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8024288:	f100 80df 	bmi.w	802444a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 802428c:	1c45      	adds	r5, r0, #1
 802428e:	9f08      	ldr	r7, [sp, #32]
 8024290:	42af      	cmp	r7, r5
 8024292:	f340 80dc 	ble.w	802444e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8024296:	2900      	cmp	r1, #0
 8024298:	f2c0 80d9 	blt.w	802444e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802429c:	1c4d      	adds	r5, r1, #1
 802429e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80242a0:	42af      	cmp	r7, r5
 80242a2:	f340 80d4 	ble.w	802444e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80242a6:	9d08      	ldr	r5, [sp, #32]
 80242a8:	fb05 0101 	mla	r1, r5, r1, r0
 80242ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80242ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80242b2:	1845      	adds	r5, r0, r1
 80242b4:	5c40      	ldrb	r0, [r0, r1]
 80242b6:	792f      	ldrb	r7, [r5, #4]
 80242b8:	7869      	ldrb	r1, [r5, #1]
 80242ba:	9711      	str	r7, [sp, #68]	; 0x44
 80242bc:	796f      	ldrb	r7, [r5, #5]
 80242be:	f895 e002 	ldrb.w	lr, [r5, #2]
 80242c2:	f895 9003 	ldrb.w	r9, [r5, #3]
 80242c6:	9712      	str	r7, [sp, #72]	; 0x48
 80242c8:	b17a      	cbz	r2, 80242ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80242ca:	3505      	adds	r5, #5
 80242cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80242ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80242d0:	19ef      	adds	r7, r5, r7
 80242d2:	5d2d      	ldrb	r5, [r5, r4]
 80242d4:	787c      	ldrb	r4, [r7, #1]
 80242d6:	9513      	str	r5, [sp, #76]	; 0x4c
 80242d8:	9415      	str	r4, [sp, #84]	; 0x54
 80242da:	78bc      	ldrb	r4, [r7, #2]
 80242dc:	9417      	str	r4, [sp, #92]	; 0x5c
 80242de:	78fc      	ldrb	r4, [r7, #3]
 80242e0:	9414      	str	r4, [sp, #80]	; 0x50
 80242e2:	793c      	ldrb	r4, [r7, #4]
 80242e4:	9416      	str	r4, [sp, #88]	; 0x58
 80242e6:	797c      	ldrb	r4, [r7, #5]
 80242e8:	9418      	str	r4, [sp, #96]	; 0x60
 80242ea:	b29b      	uxth	r3, r3
 80242ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80242ee:	b292      	uxth	r2, r2
 80242f0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80242f4:	fb03 f702 	mul.w	r7, r3, r2
 80242f8:	011b      	lsls	r3, r3, #4
 80242fa:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80242fe:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8024302:	1bdb      	subs	r3, r3, r7
 8024304:	b292      	uxth	r2, r2
 8024306:	b29b      	uxth	r3, r3
 8024308:	ebac 0c02 	sub.w	ip, ip, r2
 802430c:	fb03 f909 	mul.w	r9, r3, r9
 8024310:	fa1f fc8c 	uxth.w	ip, ip
 8024314:	fb0c 9000 	mla	r0, ip, r0, r9
 8024318:	f896 9000 	ldrb.w	r9, [r6]
 802431c:	fb02 0004 	mla	r0, r2, r4, r0
 8024320:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024322:	fb07 0004 	mla	r0, r7, r4, r0
 8024326:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024328:	fb19 f904 	smulbb	r9, r9, r4
 802432c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024330:	fb00 9005 	mla	r0, r0, r5, r9
 8024334:	b280      	uxth	r0, r0
 8024336:	f100 0901 	add.w	r9, r0, #1
 802433a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802433e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024340:	4358      	muls	r0, r3
 8024342:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024346:	fb0c 0101 	mla	r1, ip, r1, r0
 802434a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802434c:	f886 9000 	strb.w	r9, [r6]
 8024350:	fb02 1100 	mla	r1, r2, r0, r1
 8024354:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024356:	fb07 1100 	mla	r1, r7, r0, r1
 802435a:	7870      	ldrb	r0, [r6, #1]
 802435c:	fb10 f004 	smulbb	r0, r0, r4
 8024360:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024364:	fb01 0105 	mla	r1, r1, r5, r0
 8024368:	b289      	uxth	r1, r1
 802436a:	1c48      	adds	r0, r1, #1
 802436c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024370:	1209      	asrs	r1, r1, #8
 8024372:	7071      	strb	r1, [r6, #1]
 8024374:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024376:	434b      	muls	r3, r1
 8024378:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802437a:	fb0c 330e 	mla	r3, ip, lr, r3
 802437e:	fb02 3201 	mla	r2, r2, r1, r3
 8024382:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024384:	fb07 2703 	mla	r7, r7, r3, r2
 8024388:	78b2      	ldrb	r2, [r6, #2]
 802438a:	fb12 f204 	smulbb	r2, r2, r4
 802438e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024392:	fb07 2505 	mla	r5, r7, r5, r2
 8024396:	b2ad      	uxth	r5, r5
 8024398:	1c6f      	adds	r7, r5, #1
 802439a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802439e:	122d      	asrs	r5, r5, #8
 80243a0:	70b5      	strb	r5, [r6, #2]
 80243a2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80243a4:	3603      	adds	r6, #3
 80243a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80243aa:	4498      	add	r8, r3
 80243ac:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80243ae:	449b      	add	fp, r3
 80243b0:	e75f      	b.n	8024272 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80243b2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80243b4:	4498      	add	r8, r3
 80243b6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80243b8:	449b      	add	fp, r3
 80243ba:	9b07      	ldr	r3, [sp, #28]
 80243bc:	3b01      	subs	r3, #1
 80243be:	9307      	str	r3, [sp, #28]
 80243c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243c2:	3303      	adds	r3, #3
 80243c4:	9309      	str	r3, [sp, #36]	; 0x24
 80243c6:	e709      	b.n	80241dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80243c8:	f47f af1b 	bne.w	8024202 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80243cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80243ce:	2b00      	cmp	r3, #0
 80243d0:	f340 80e3 	ble.w	802459a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80243d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80243d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80243da:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80243de:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80243e2:	eef0 6a48 	vmov.f32	s13, s16
 80243e6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80243ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80243ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80243f2:	ee16 8a90 	vmov	r8, s13
 80243f6:	eef0 6a68 	vmov.f32	s13, s17
 80243fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80243fe:	ee16 ba90 	vmov	fp, s13
 8024402:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024406:	ee69 7a27 	vmul.f32	s15, s18, s15
 802440a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802440e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024412:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024416:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802441a:	ee18 2a10 	vmov	r2, s16
 802441e:	eeb0 8a47 	vmov.f32	s16, s14
 8024422:	fb92 f3f3 	sdiv	r3, r2, r3
 8024426:	ee18 2a90 	vmov	r2, s17
 802442a:	9335      	str	r3, [sp, #212]	; 0xd4
 802442c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802442e:	eef0 8a67 	vmov.f32	s17, s15
 8024432:	fb92 f3f3 	sdiv	r3, r2, r3
 8024436:	9336      	str	r3, [sp, #216]	; 0xd8
 8024438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802443a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802443c:	3b01      	subs	r3, #1
 802443e:	930e      	str	r3, [sp, #56]	; 0x38
 8024440:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024442:	bf08      	it	eq
 8024444:	4613      	moveq	r3, r2
 8024446:	9307      	str	r3, [sp, #28]
 8024448:	e6c1      	b.n	80241ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802444a:	1c45      	adds	r5, r0, #1
 802444c:	d1a9      	bne.n	80243a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802444e:	9c08      	ldr	r4, [sp, #32]
 8024450:	42a0      	cmp	r0, r4
 8024452:	daa6      	bge.n	80243a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024454:	1c4c      	adds	r4, r1, #1
 8024456:	dba4      	blt.n	80243a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024458:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802445a:	428c      	cmp	r4, r1
 802445c:	dda1      	ble.n	80243a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802445e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024460:	9001      	str	r0, [sp, #4]
 8024462:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024464:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8024468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802446a:	4631      	mov	r1, r6
 802446c:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8024470:	9300      	str	r3, [sp, #0]
 8024472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024474:	9b08      	ldr	r3, [sp, #32]
 8024476:	f7ff fd5b 	bl	8023f30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 802447a:	e792      	b.n	80243a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802447c:	ea4f 4228 	mov.w	r2, r8, asr #16
 8024480:	9c08      	ldr	r4, [sp, #32]
 8024482:	ea4f 402b 	mov.w	r0, fp, asr #16
 8024486:	f3cb 3103 	ubfx	r1, fp, #12, #4
 802448a:	f3c8 3303 	ubfx	r3, r8, #12, #4
 802448e:	fb04 2000 	mla	r0, r4, r0, r2
 8024492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024494:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024496:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802449a:	4402      	add	r2, r0
 802449c:	5c25      	ldrb	r5, [r4, r0]
 802449e:	7894      	ldrb	r4, [r2, #2]
 80244a0:	7850      	ldrb	r0, [r2, #1]
 80244a2:	9411      	str	r4, [sp, #68]	; 0x44
 80244a4:	7954      	ldrb	r4, [r2, #5]
 80244a6:	f892 a003 	ldrb.w	sl, [r2, #3]
 80244aa:	f892 9004 	ldrb.w	r9, [r2, #4]
 80244ae:	9412      	str	r4, [sp, #72]	; 0x48
 80244b0:	b171      	cbz	r1, 80244d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80244b2:	3205      	adds	r2, #5
 80244b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80244b6:	1917      	adds	r7, r2, r4
 80244b8:	5d12      	ldrb	r2, [r2, r4]
 80244ba:	9219      	str	r2, [sp, #100]	; 0x64
 80244bc:	787a      	ldrb	r2, [r7, #1]
 80244be:	921b      	str	r2, [sp, #108]	; 0x6c
 80244c0:	78ba      	ldrb	r2, [r7, #2]
 80244c2:	921d      	str	r2, [sp, #116]	; 0x74
 80244c4:	78fa      	ldrb	r2, [r7, #3]
 80244c6:	921a      	str	r2, [sp, #104]	; 0x68
 80244c8:	793a      	ldrb	r2, [r7, #4]
 80244ca:	921c      	str	r2, [sp, #112]	; 0x70
 80244cc:	797a      	ldrb	r2, [r7, #5]
 80244ce:	921e      	str	r2, [sp, #120]	; 0x78
 80244d0:	b29b      	uxth	r3, r3
 80244d2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80244d4:	b289      	uxth	r1, r1
 80244d6:	3603      	adds	r6, #3
 80244d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80244dc:	fb03 f201 	mul.w	r2, r3, r1
 80244e0:	011b      	lsls	r3, r3, #4
 80244e2:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80244e6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80244ea:	1a9b      	subs	r3, r3, r2
 80244ec:	b289      	uxth	r1, r1
 80244ee:	b29b      	uxth	r3, r3
 80244f0:	1a7f      	subs	r7, r7, r1
 80244f2:	fb03 fa0a 	mul.w	sl, r3, sl
 80244f6:	b2bf      	uxth	r7, r7
 80244f8:	fb03 f909 	mul.w	r9, r3, r9
 80244fc:	fb07 a505 	mla	r5, r7, r5, sl
 8024500:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8024504:	fb07 9000 	mla	r0, r7, r0, r9
 8024508:	fb01 5504 	mla	r5, r1, r4, r5
 802450c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802450e:	fb02 5504 	mla	r5, r2, r4, r5
 8024512:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024514:	fb1a fa04 	smulbb	sl, sl, r4
 8024518:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802451c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 802451e:	fb05 a50e 	mla	r5, r5, lr, sl
 8024522:	fb01 0004 	mla	r0, r1, r4, r0
 8024526:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024528:	b2ad      	uxth	r5, r5
 802452a:	fb02 0004 	mla	r0, r2, r4, r0
 802452e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024530:	f105 0a01 	add.w	sl, r5, #1
 8024534:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024538:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802453c:	122d      	asrs	r5, r5, #8
 802453e:	f806 5c06 	strb.w	r5, [r6, #-6]
 8024542:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8024546:	fb15 f504 	smulbb	r5, r5, r4
 802454a:	fb00 500e 	mla	r0, r0, lr, r5
 802454e:	b280      	uxth	r0, r0
 8024550:	1c45      	adds	r5, r0, #1
 8024552:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024556:	1200      	asrs	r0, r0, #8
 8024558:	f806 0c05 	strb.w	r0, [r6, #-5]
 802455c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802455e:	4343      	muls	r3, r0
 8024560:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024562:	fb07 3300 	mla	r3, r7, r0, r3
 8024566:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024568:	fb01 3100 	mla	r1, r1, r0, r3
 802456c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802456e:	fb02 1203 	mla	r2, r2, r3, r1
 8024572:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8024576:	fb11 f104 	smulbb	r1, r1, r4
 802457a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802457e:	fb02 120e 	mla	r2, r2, lr, r1
 8024582:	b292      	uxth	r2, r2
 8024584:	1c53      	adds	r3, r2, #1
 8024586:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802458a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802458c:	1212      	asrs	r2, r2, #8
 802458e:	4498      	add	r8, r3
 8024590:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024592:	f806 2c04 	strb.w	r2, [r6, #-4]
 8024596:	449b      	add	fp, r3
 8024598:	e64d      	b.n	8024236 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 802459a:	b021      	add	sp, #132	; 0x84
 802459c:	ecbd 8b08 	vpop	{d8-d11}
 80245a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080245a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80245a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245a8:	b085      	sub	sp, #20
 80245aa:	784d      	ldrb	r5, [r1, #1]
 80245ac:	788e      	ldrb	r6, [r1, #2]
 80245ae:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80245b2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80245b6:	9403      	str	r4, [sp, #12]
 80245b8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80245bc:	780c      	ldrb	r4, [r1, #0]
 80245be:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80245c2:	fb07 ce03 	mla	lr, r7, r3, ip
 80245c6:	2f00      	cmp	r7, #0
 80245c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80245cc:	eb02 0b0e 	add.w	fp, r2, lr
 80245d0:	db56      	blt.n	8024680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80245d2:	45b9      	cmp	r9, r7
 80245d4:	dd54      	ble.n	8024680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80245d6:	f1bc 0f00 	cmp.w	ip, #0
 80245da:	db4d      	blt.n	8024678 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80245dc:	4563      	cmp	r3, ip
 80245de:	dd4b      	ble.n	8024678 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80245e0:	f812 200e 	ldrb.w	r2, [r2, lr]
 80245e4:	9200      	str	r2, [sp, #0]
 80245e6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80245ea:	9201      	str	r2, [sp, #4]
 80245ec:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80245f0:	9202      	str	r2, [sp, #8]
 80245f2:	f11c 0201 	adds.w	r2, ip, #1
 80245f6:	d44a      	bmi.n	802468e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80245f8:	4293      	cmp	r3, r2
 80245fa:	dd48      	ble.n	802468e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80245fc:	2800      	cmp	r0, #0
 80245fe:	d046      	beq.n	802468e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8024600:	f89b e003 	ldrb.w	lr, [fp, #3]
 8024604:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8024608:	f89b a005 	ldrb.w	sl, [fp, #5]
 802460c:	3701      	adds	r7, #1
 802460e:	d446      	bmi.n	802469e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8024610:	45b9      	cmp	r9, r7
 8024612:	dd44      	ble.n	802469e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8024614:	9a03      	ldr	r2, [sp, #12]
 8024616:	2a00      	cmp	r2, #0
 8024618:	d045      	beq.n	80246a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802461a:	f1bc 0f00 	cmp.w	ip, #0
 802461e:	db3a      	blt.n	8024696 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8024620:	4563      	cmp	r3, ip
 8024622:	dd38      	ble.n	8024696 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8024624:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024628:	f04f 0903 	mov.w	r9, #3
 802462c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8024630:	fb03 b209 	mla	r2, r3, r9, fp
 8024634:	fb03 b909 	mla	r9, r3, r9, fp
 8024638:	7852      	ldrb	r2, [r2, #1]
 802463a:	f899 9002 	ldrb.w	r9, [r9, #2]
 802463e:	f11c 0c01 	adds.w	ip, ip, #1
 8024642:	d40d      	bmi.n	8024660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8024644:	4563      	cmp	r3, ip
 8024646:	dd0b      	ble.n	8024660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8024648:	b160      	cbz	r0, 8024664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 802464a:	2603      	movs	r6, #3
 802464c:	fb13 6406 	smlabb	r4, r3, r6, r6
 8024650:	fb03 b506 	mla	r5, r3, r6, fp
 8024654:	fb03 b306 	mla	r3, r3, r6, fp
 8024658:	f81b 4004 	ldrb.w	r4, [fp, r4]
 802465c:	792d      	ldrb	r5, [r5, #4]
 802465e:	795e      	ldrb	r6, [r3, #5]
 8024660:	280f      	cmp	r0, #15
 8024662:	d802      	bhi.n	802466a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8024664:	9b03      	ldr	r3, [sp, #12]
 8024666:	2b0f      	cmp	r3, #15
 8024668:	d922      	bls.n	80246b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802466a:	4b2f      	ldr	r3, [pc, #188]	; (8024728 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 802466c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024670:	4a2e      	ldr	r2, [pc, #184]	; (802472c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8024672:	482f      	ldr	r0, [pc, #188]	; (8024730 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8024674:	f003 ff96 	bl	80285a4 <__assert_func>
 8024678:	e9cd 5601 	strd	r5, r6, [sp, #4]
 802467c:	9400      	str	r4, [sp, #0]
 802467e:	e7b8      	b.n	80245f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8024680:	46b2      	mov	sl, r6
 8024682:	46a8      	mov	r8, r5
 8024684:	46a6      	mov	lr, r4
 8024686:	9400      	str	r4, [sp, #0]
 8024688:	e9cd 5601 	strd	r5, r6, [sp, #4]
 802468c:	e7be      	b.n	802460c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802468e:	46b2      	mov	sl, r6
 8024690:	46a8      	mov	r8, r5
 8024692:	46a6      	mov	lr, r4
 8024694:	e7ba      	b.n	802460c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8024696:	46b1      	mov	r9, r6
 8024698:	462a      	mov	r2, r5
 802469a:	4627      	mov	r7, r4
 802469c:	e7cf      	b.n	802463e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802469e:	46b1      	mov	r9, r6
 80246a0:	462a      	mov	r2, r5
 80246a2:	4627      	mov	r7, r4
 80246a4:	e7dc      	b.n	8024660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80246a6:	280f      	cmp	r0, #15
 80246a8:	d8df      	bhi.n	802466a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80246aa:	46b1      	mov	r9, r6
 80246ac:	462a      	mov	r2, r5
 80246ae:	4627      	mov	r7, r4
 80246b0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80246b4:	b280      	uxth	r0, r0
 80246b6:	fb00 f30b 	mul.w	r3, r0, fp
 80246ba:	0100      	lsls	r0, r0, #4
 80246bc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80246c0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80246c4:	1ac0      	subs	r0, r0, r3
 80246c6:	fa1f fb8b 	uxth.w	fp, fp
 80246ca:	b280      	uxth	r0, r0
 80246cc:	ebac 0c0b 	sub.w	ip, ip, fp
 80246d0:	9003      	str	r0, [sp, #12]
 80246d2:	fa1f fc8c 	uxth.w	ip, ip
 80246d6:	fb00 fe0e 	mul.w	lr, r0, lr
 80246da:	9800      	ldr	r0, [sp, #0]
 80246dc:	fb0c ee00 	mla	lr, ip, r0, lr
 80246e0:	9803      	ldr	r0, [sp, #12]
 80246e2:	fb00 f808 	mul.w	r8, r0, r8
 80246e6:	9801      	ldr	r0, [sp, #4]
 80246e8:	fb0b ee07 	mla	lr, fp, r7, lr
 80246ec:	fb0c 8800 	mla	r8, ip, r0, r8
 80246f0:	fb03 ee04 	mla	lr, r3, r4, lr
 80246f4:	fb0b 8202 	mla	r2, fp, r2, r8
 80246f8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80246fc:	fb03 2505 	mla	r5, r3, r5, r2
 8024700:	9a03      	ldr	r2, [sp, #12]
 8024702:	f881 e000 	strb.w	lr, [r1]
 8024706:	fb02 f00a 	mul.w	r0, r2, sl
 802470a:	9a02      	ldr	r2, [sp, #8]
 802470c:	122d      	asrs	r5, r5, #8
 802470e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8024712:	704d      	strb	r5, [r1, #1]
 8024714:	fb0b c909 	mla	r9, fp, r9, ip
 8024718:	fb03 9606 	mla	r6, r3, r6, r9
 802471c:	1236      	asrs	r6, r6, #8
 802471e:	708e      	strb	r6, [r1, #2]
 8024720:	b005      	add	sp, #20
 8024722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024726:	bf00      	nop
 8024728:	0802d8a7 	.word	0x0802d8a7
 802472c:	0802dd9e 	.word	0x0802dd9e
 8024730:	0802d970 	.word	0x0802d970

08024734 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024738:	ed2d 8b0a 	vpush	{d8-d12}
 802473c:	b09d      	sub	sp, #116	; 0x74
 802473e:	eeb0 aa40 	vmov.f32	s20, s0
 8024742:	eef0 9a60 	vmov.f32	s19, s1
 8024746:	9306      	str	r3, [sp, #24]
 8024748:	eeb0 9a41 	vmov.f32	s18, s2
 802474c:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8024750:	eeb0 8a62 	vmov.f32	s16, s5
 8024754:	901b      	str	r0, [sp, #108]	; 0x6c
 8024756:	eef0 8a43 	vmov.f32	s17, s6
 802475a:	9307      	str	r3, [sp, #28]
 802475c:	eeb0 ca44 	vmov.f32	s24, s8
 8024760:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8024764:	eef0 ba64 	vmov.f32	s23, s9
 8024768:	eeb0 ba45 	vmov.f32	s22, s10
 802476c:	9309      	str	r3, [sp, #36]	; 0x24
 802476e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024772:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8024776:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8024778:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 802477c:	6850      	ldr	r0, [r2, #4]
 802477e:	6812      	ldr	r2, [r2, #0]
 8024780:	fb00 1303 	mla	r3, r0, r3, r1
 8024784:	9907      	ldr	r1, [sp, #28]
 8024786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802478a:	18d3      	adds	r3, r2, r3
 802478c:	2203      	movs	r2, #3
 802478e:	9308      	str	r3, [sp, #32]
 8024790:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8024792:	681b      	ldr	r3, [r3, #0]
 8024794:	930a      	str	r3, [sp, #40]	; 0x28
 8024796:	f06f 0304 	mvn.w	r3, #4
 802479a:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 802479e:	fb11 3302 	smlabb	r3, r1, r2, r3
 80247a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80247a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247a6:	2b00      	cmp	r3, #0
 80247a8:	dc03      	bgt.n	80247b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80247aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80247ac:	2b00      	cmp	r3, #0
 80247ae:	f340 8193 	ble.w	8024ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80247b2:	9b06      	ldr	r3, [sp, #24]
 80247b4:	2b00      	cmp	r3, #0
 80247b6:	f340 80d0 	ble.w	802495a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 80247ba:	1432      	asrs	r2, r6, #16
 80247bc:	ea4f 4325 	mov.w	r3, r5, asr #16
 80247c0:	d42f      	bmi.n	8024822 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80247c2:	1c51      	adds	r1, r2, #1
 80247c4:	9807      	ldr	r0, [sp, #28]
 80247c6:	4281      	cmp	r1, r0
 80247c8:	da2e      	bge.n	8024828 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80247ca:	2b00      	cmp	r3, #0
 80247cc:	db2c      	blt.n	8024828 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80247ce:	1c59      	adds	r1, r3, #1
 80247d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80247d2:	4288      	cmp	r0, r1
 80247d4:	dd28      	ble.n	8024828 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80247d6:	9b06      	ldr	r3, [sp, #24]
 80247d8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80247da:	3b01      	subs	r3, #1
 80247dc:	fb02 6203 	mla	r2, r2, r3, r6
 80247e0:	1412      	asrs	r2, r2, #16
 80247e2:	d42c      	bmi.n	802483e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80247e4:	3201      	adds	r2, #1
 80247e6:	9907      	ldr	r1, [sp, #28]
 80247e8:	4291      	cmp	r1, r2
 80247ea:	dd28      	ble.n	802483e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80247ec:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80247ee:	fb02 5303 	mla	r3, r2, r3, r5
 80247f2:	141b      	asrs	r3, r3, #16
 80247f4:	d423      	bmi.n	802483e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80247f6:	3301      	adds	r3, #1
 80247f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80247fa:	429a      	cmp	r2, r3
 80247fc:	dd1f      	ble.n	802483e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80247fe:	9b08      	ldr	r3, [sp, #32]
 8024800:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024804:	f103 0c03 	add.w	ip, r3, #3
 8024808:	f1be 0f00 	cmp.w	lr, #0
 802480c:	f300 80fa 	bgt.w	8024a04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8024810:	9b06      	ldr	r3, [sp, #24]
 8024812:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024816:	9b08      	ldr	r3, [sp, #32]
 8024818:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802481c:	4423      	add	r3, r4
 802481e:	9308      	str	r3, [sp, #32]
 8024820:	e09d      	b.n	802495e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8024822:	1c51      	adds	r1, r2, #1
 8024824:	f040 808e 	bne.w	8024944 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024828:	9907      	ldr	r1, [sp, #28]
 802482a:	428a      	cmp	r2, r1
 802482c:	f280 808a 	bge.w	8024944 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024830:	1c5f      	adds	r7, r3, #1
 8024832:	f2c0 8087 	blt.w	8024944 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024838:	4293      	cmp	r3, r2
 802483a:	f280 8083 	bge.w	8024944 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802483e:	9f06      	ldr	r7, [sp, #24]
 8024840:	f8dd a020 	ldr.w	sl, [sp, #32]
 8024844:	2f00      	cmp	r7, #0
 8024846:	dde3      	ble.n	8024810 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8024848:	1432      	asrs	r2, r6, #16
 802484a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802484e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024852:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8024856:	f100 80bf 	bmi.w	80249d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 802485a:	1c50      	adds	r0, r2, #1
 802485c:	9c07      	ldr	r4, [sp, #28]
 802485e:	4284      	cmp	r4, r0
 8024860:	f340 80bc 	ble.w	80249dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8024864:	2b00      	cmp	r3, #0
 8024866:	f2c0 80b9 	blt.w	80249dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802486a:	1c58      	adds	r0, r3, #1
 802486c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802486e:	4284      	cmp	r4, r0
 8024870:	f340 80b4 	ble.w	80249dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8024874:	9807      	ldr	r0, [sp, #28]
 8024876:	fb00 2303 	mla	r3, r0, r3, r2
 802487a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802487c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802487e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024882:	441a      	add	r2, r3
 8024884:	f810 c003 	ldrb.w	ip, [r0, r3]
 8024888:	7953      	ldrb	r3, [r2, #5]
 802488a:	7850      	ldrb	r0, [r2, #1]
 802488c:	f892 e002 	ldrb.w	lr, [r2, #2]
 8024890:	f892 9003 	ldrb.w	r9, [r2, #3]
 8024894:	f892 8004 	ldrb.w	r8, [r2, #4]
 8024898:	930e      	str	r3, [sp, #56]	; 0x38
 802489a:	f1bb 0f00 	cmp.w	fp, #0
 802489e:	d00f      	beq.n	80248c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80248a0:	3205      	adds	r2, #5
 80248a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80248a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80248a6:	18d3      	adds	r3, r2, r3
 80248a8:	5d12      	ldrb	r2, [r2, r4]
 80248aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80248ac:	785a      	ldrb	r2, [r3, #1]
 80248ae:	9211      	str	r2, [sp, #68]	; 0x44
 80248b0:	789a      	ldrb	r2, [r3, #2]
 80248b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80248b4:	78da      	ldrb	r2, [r3, #3]
 80248b6:	9210      	str	r2, [sp, #64]	; 0x40
 80248b8:	791a      	ldrb	r2, [r3, #4]
 80248ba:	795b      	ldrb	r3, [r3, #5]
 80248bc:	9212      	str	r2, [sp, #72]	; 0x48
 80248be:	9314      	str	r3, [sp, #80]	; 0x50
 80248c0:	b28b      	uxth	r3, r1
 80248c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80248c4:	fa1f f28b 	uxth.w	r2, fp
 80248c8:	fb03 fb02 	mul.w	fp, r3, r2
 80248cc:	011b      	lsls	r3, r3, #4
 80248ce:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80248d2:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80248d6:	eba3 030b 	sub.w	r3, r3, fp
 80248da:	b292      	uxth	r2, r2
 80248dc:	b29b      	uxth	r3, r3
 80248de:	1a89      	subs	r1, r1, r2
 80248e0:	fb03 f808 	mul.w	r8, r3, r8
 80248e4:	b289      	uxth	r1, r1
 80248e6:	fb03 f909 	mul.w	r9, r3, r9
 80248ea:	fb01 8800 	mla	r8, r1, r0, r8
 80248ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80248f0:	fb01 990c 	mla	r9, r1, ip, r9
 80248f4:	fb02 8800 	mla	r8, r2, r0, r8
 80248f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80248fa:	fb02 9904 	mla	r9, r2, r4, r9
 80248fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024900:	fb0b 8800 	mla	r8, fp, r0, r8
 8024904:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024906:	fb0b 9904 	mla	r9, fp, r4, r9
 802490a:	4343      	muls	r3, r0
 802490c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024910:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024914:	fb01 330e 	mla	r3, r1, lr, r3
 8024918:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802491a:	f88a 9000 	strb.w	r9, [sl]
 802491e:	fb02 3201 	mla	r2, r2, r1, r3
 8024922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024924:	f88a 8001 	strb.w	r8, [sl, #1]
 8024928:	fb0b 2b03 	mla	fp, fp, r3, r2
 802492c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8024930:	f88a b002 	strb.w	fp, [sl, #2]
 8024934:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024936:	f10a 0a03 	add.w	sl, sl, #3
 802493a:	3f01      	subs	r7, #1
 802493c:	441e      	add	r6, r3
 802493e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024940:	441d      	add	r5, r3
 8024942:	e77f      	b.n	8024844 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8024944:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024946:	441e      	add	r6, r3
 8024948:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802494a:	441d      	add	r5, r3
 802494c:	9b06      	ldr	r3, [sp, #24]
 802494e:	3b01      	subs	r3, #1
 8024950:	9306      	str	r3, [sp, #24]
 8024952:	9b08      	ldr	r3, [sp, #32]
 8024954:	3303      	adds	r3, #3
 8024956:	9308      	str	r3, [sp, #32]
 8024958:	e72b      	b.n	80247b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802495a:	f47f af3c 	bne.w	80247d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 802495e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024960:	2b00      	cmp	r3, #0
 8024962:	f340 80b9 	ble.w	8024ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8024966:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802496a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802496c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8024970:	eef0 6a48 	vmov.f32	s13, s16
 8024974:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024978:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802497c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024980:	ee16 6a90 	vmov	r6, s13
 8024984:	eef0 6a68 	vmov.f32	s13, s17
 8024988:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802498c:	ee16 5a90 	vmov	r5, s13
 8024990:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024994:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024998:	ee37 8a48 	vsub.f32	s16, s14, s16
 802499c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80249a0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80249a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80249a8:	ee18 2a10 	vmov	r2, s16
 80249ac:	eeb0 8a47 	vmov.f32	s16, s14
 80249b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80249b4:	ee18 2a90 	vmov	r2, s17
 80249b8:	9333      	str	r3, [sp, #204]	; 0xcc
 80249ba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80249bc:	eef0 8a67 	vmov.f32	s17, s15
 80249c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80249c4:	9334      	str	r3, [sp, #208]	; 0xd0
 80249c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80249c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80249ca:	3b01      	subs	r3, #1
 80249cc:	930c      	str	r3, [sp, #48]	; 0x30
 80249ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80249d0:	bf08      	it	eq
 80249d2:	4613      	moveq	r3, r2
 80249d4:	9306      	str	r3, [sp, #24]
 80249d6:	e6e5      	b.n	80247a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80249d8:	1c54      	adds	r4, r2, #1
 80249da:	d1ab      	bne.n	8024934 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80249dc:	9807      	ldr	r0, [sp, #28]
 80249de:	4282      	cmp	r2, r0
 80249e0:	daa8      	bge.n	8024934 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80249e2:	1c58      	adds	r0, r3, #1
 80249e4:	dba6      	blt.n	8024934 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80249e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80249e8:	4298      	cmp	r0, r3
 80249ea:	dda3      	ble.n	8024934 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80249ec:	9000      	str	r0, [sp, #0]
 80249ee:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80249f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80249f4:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 80249f8:	9b07      	ldr	r3, [sp, #28]
 80249fa:	4651      	mov	r1, sl
 80249fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80249fe:	f7ff fdd1 	bl	80245a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8024a02:	e797      	b.n	8024934 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024a04:	1431      	asrs	r1, r6, #16
 8024a06:	9c07      	ldr	r4, [sp, #28]
 8024a08:	1428      	asrs	r0, r5, #16
 8024a0a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024a0e:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8024a12:	fb04 1000 	mla	r0, r4, r0, r1
 8024a16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024a18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a1e:	4401      	add	r1, r0
 8024a20:	5c20      	ldrb	r0, [r4, r0]
 8024a22:	f891 8002 	ldrb.w	r8, [r1, #2]
 8024a26:	900e      	str	r0, [sp, #56]	; 0x38
 8024a28:	f891 a003 	ldrb.w	sl, [r1, #3]
 8024a2c:	7848      	ldrb	r0, [r1, #1]
 8024a2e:	f891 9004 	ldrb.w	r9, [r1, #4]
 8024a32:	f891 b005 	ldrb.w	fp, [r1, #5]
 8024a36:	b172      	cbz	r2, 8024a56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8024a38:	3105      	adds	r1, #5
 8024a3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024a3c:	190f      	adds	r7, r1, r4
 8024a3e:	5d09      	ldrb	r1, [r1, r4]
 8024a40:	9115      	str	r1, [sp, #84]	; 0x54
 8024a42:	7879      	ldrb	r1, [r7, #1]
 8024a44:	9117      	str	r1, [sp, #92]	; 0x5c
 8024a46:	78b9      	ldrb	r1, [r7, #2]
 8024a48:	9119      	str	r1, [sp, #100]	; 0x64
 8024a4a:	78f9      	ldrb	r1, [r7, #3]
 8024a4c:	9116      	str	r1, [sp, #88]	; 0x58
 8024a4e:	7939      	ldrb	r1, [r7, #4]
 8024a50:	9118      	str	r1, [sp, #96]	; 0x60
 8024a52:	7979      	ldrb	r1, [r7, #5]
 8024a54:	911a      	str	r1, [sp, #104]	; 0x68
 8024a56:	b29b      	uxth	r3, r3
 8024a58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024a5a:	b292      	uxth	r2, r2
 8024a5c:	f10c 0c03 	add.w	ip, ip, #3
 8024a60:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024a64:	fb03 f102 	mul.w	r1, r3, r2
 8024a68:	011b      	lsls	r3, r3, #4
 8024a6a:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8024a6e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8024a72:	1a5b      	subs	r3, r3, r1
 8024a74:	b292      	uxth	r2, r2
 8024a76:	b29b      	uxth	r3, r3
 8024a78:	1abf      	subs	r7, r7, r2
 8024a7a:	fb03 f909 	mul.w	r9, r3, r9
 8024a7e:	b2bf      	uxth	r7, r7
 8024a80:	fb03 fa0a 	mul.w	sl, r3, sl
 8024a84:	fb03 f30b 	mul.w	r3, r3, fp
 8024a88:	fb07 9900 	mla	r9, r7, r0, r9
 8024a8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024a8e:	fb07 aa04 	mla	sl, r7, r4, sl
 8024a92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024a94:	fb02 9900 	mla	r9, r2, r0, r9
 8024a98:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024a9a:	fb07 3308 	mla	r3, r7, r8, r3
 8024a9e:	fb01 9900 	mla	r9, r1, r0, r9
 8024aa2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024aa4:	fb02 aa04 	mla	sl, r2, r4, sl
 8024aa8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024aaa:	fb02 3200 	mla	r2, r2, r0, r3
 8024aae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024ab0:	fb01 aa04 	mla	sl, r1, r4, sl
 8024ab4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024ab8:	fb01 2103 	mla	r1, r1, r3, r2
 8024abc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024abe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024ac2:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8024ac6:	1209      	asrs	r1, r1, #8
 8024ac8:	441e      	add	r6, r3
 8024aca:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024acc:	f80c ac06 	strb.w	sl, [ip, #-6]
 8024ad0:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8024ad4:	441d      	add	r5, r3
 8024ad6:	e697      	b.n	8024808 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8024ad8:	b01d      	add	sp, #116	; 0x74
 8024ada:	ecbd 8b0a 	vpop	{d8-d12}
 8024ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024ae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8024ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ae8:	b085      	sub	sp, #20
 8024aea:	7888      	ldrb	r0, [r1, #2]
 8024aec:	4691      	mov	r9, r2
 8024aee:	9000      	str	r0, [sp, #0]
 8024af0:	7848      	ldrb	r0, [r1, #1]
 8024af2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8024af6:	9001      	str	r0, [sp, #4]
 8024af8:	7808      	ldrb	r0, [r1, #0]
 8024afa:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024afe:	9002      	str	r0, [sp, #8]
 8024b00:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024b04:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8024b08:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8024b0c:	fb04 c603 	mla	r6, r4, r3, ip
 8024b10:	2c00      	cmp	r4, #0
 8024b12:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8024b16:	9a00      	ldr	r2, [sp, #0]
 8024b18:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024b1c:	9a01      	ldr	r2, [sp, #4]
 8024b1e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8024b22:	db3a      	blt.n	8024b9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8024b24:	45a0      	cmp	r8, r4
 8024b26:	dd38      	ble.n	8024b9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8024b28:	f1bc 0f00 	cmp.w	ip, #0
 8024b2c:	db33      	blt.n	8024b96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8024b2e:	4563      	cmp	r3, ip
 8024b30:	dd31      	ble.n	8024b96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8024b32:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8024b36:	f11c 0601 	adds.w	r6, ip, #1
 8024b3a:	d431      	bmi.n	8024ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024b3c:	42b3      	cmp	r3, r6
 8024b3e:	dd2f      	ble.n	8024ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024b40:	b375      	cbz	r5, 8024ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024b42:	f8de 6004 	ldr.w	r6, [lr, #4]
 8024b46:	3401      	adds	r4, #1
 8024b48:	d42e      	bmi.n	8024ba8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024b4a:	45a0      	cmp	r8, r4
 8024b4c:	dd2c      	ble.n	8024ba8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024b4e:	b35f      	cbz	r7, 8024ba8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024b50:	f1bc 0f00 	cmp.w	ip, #0
 8024b54:	db26      	blt.n	8024ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8024b56:	4563      	cmp	r3, ip
 8024b58:	dd24      	ble.n	8024ba4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8024b5a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8024b5e:	f11c 0c01 	adds.w	ip, ip, #1
 8024b62:	d405      	bmi.n	8024b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024b64:	4563      	cmp	r3, ip
 8024b66:	dd03      	ble.n	8024b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024b68:	b115      	cbz	r5, 8024b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024b6a:	3301      	adds	r3, #1
 8024b6c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8024b70:	2d0f      	cmp	r5, #15
 8024b72:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024b76:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024b7a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024b7e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024b82:	d801      	bhi.n	8024b88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8024b84:	2f0f      	cmp	r7, #15
 8024b86:	d911      	bls.n	8024bac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8024b88:	4b80      	ldr	r3, [pc, #512]	; (8024d8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8024b8a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024b8e:	4a80      	ldr	r2, [pc, #512]	; (8024d90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8024b90:	4880      	ldr	r0, [pc, #512]	; (8024d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8024b92:	f003 fd07 	bl	80285a4 <__assert_func>
 8024b96:	4602      	mov	r2, r0
 8024b98:	e7cd      	b.n	8024b36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8024b9a:	4606      	mov	r6, r0
 8024b9c:	4602      	mov	r2, r0
 8024b9e:	e7d2      	b.n	8024b46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8024ba0:	4606      	mov	r6, r0
 8024ba2:	e7d0      	b.n	8024b46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8024ba4:	4604      	mov	r4, r0
 8024ba6:	e7da      	b.n	8024b5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8024ba8:	4604      	mov	r4, r0
 8024baa:	e7e1      	b.n	8024b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024bac:	b2ab      	uxth	r3, r5
 8024bae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024bb2:	b2bf      	uxth	r7, r7
 8024bb4:	fb03 fe07 	mul.w	lr, r3, r7
 8024bb8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8024bbc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024bc0:	eba3 0c0e 	sub.w	ip, r3, lr
 8024bc4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8024bc8:	b2bf      	uxth	r7, r7
 8024bca:	fa1f fc8c 	uxth.w	ip, ip
 8024bce:	eba5 0507 	sub.w	r5, r5, r7
 8024bd2:	fb0c f30a 	mul.w	r3, ip, sl
 8024bd6:	b2ad      	uxth	r5, r5
 8024bd8:	fb05 330b 	mla	r3, r5, fp, r3
 8024bdc:	fb07 3309 	mla	r3, r7, r9, r3
 8024be0:	fb0e 3308 	mla	r3, lr, r8, r3
 8024be4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024be8:	9303      	str	r3, [sp, #12]
 8024bea:	d018      	beq.n	8024c1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8024bec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024bf0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024bf4:	fb0b f303 	mul.w	r3, fp, r3
 8024bf8:	fb0b fb02 	mul.w	fp, fp, r2
 8024bfc:	0a1a      	lsrs	r2, r3, #8
 8024bfe:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024c02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024c06:	441a      	add	r2, r3
 8024c08:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8024c0c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8024c10:	0a12      	lsrs	r2, r2, #8
 8024c12:	0a1b      	lsrs	r3, r3, #8
 8024c14:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024c18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c1c:	431a      	orrs	r2, r3
 8024c1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024c22:	d019      	beq.n	8024c58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8024c24:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024c28:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024c2c:	fb0a fb0b 	mul.w	fp, sl, fp
 8024c30:	fb0a fa06 	mul.w	sl, sl, r6
 8024c34:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024c38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c3c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8024c40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024c44:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024c48:	445e      	add	r6, fp
 8024c4a:	0a1b      	lsrs	r3, r3, #8
 8024c4c:	0a36      	lsrs	r6, r6, #8
 8024c4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c52:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024c56:	431e      	orrs	r6, r3
 8024c58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024c5c:	d019      	beq.n	8024c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8024c5e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024c62:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024c66:	fb09 fa0a 	mul.w	sl, r9, sl
 8024c6a:	fb09 f904 	mul.w	r9, r9, r4
 8024c6e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024c72:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024c76:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8024c7a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024c7e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8024c82:	4454      	add	r4, sl
 8024c84:	0a1b      	lsrs	r3, r3, #8
 8024c86:	0a24      	lsrs	r4, r4, #8
 8024c88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c8c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024c90:	431c      	orrs	r4, r3
 8024c92:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024c96:	d019      	beq.n	8024ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8024c98:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8024c9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024ca0:	fb08 f909 	mul.w	r9, r8, r9
 8024ca4:	fb08 f800 	mul.w	r8, r8, r0
 8024ca8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8024cac:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024cb0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8024cb4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024cb8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8024cbc:	4448      	add	r0, r9
 8024cbe:	0a1b      	lsrs	r3, r3, #8
 8024cc0:	0a00      	lsrs	r0, r0, #8
 8024cc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024cc6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024cca:	4318      	orrs	r0, r3
 8024ccc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024cd0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024cd4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024cd8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024cdc:	fb0c f808 	mul.w	r8, ip, r8
 8024ce0:	fb0c f606 	mul.w	r6, ip, r6
 8024ce4:	fb05 8803 	mla	r8, r5, r3, r8
 8024ce8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8024cec:	fb05 6202 	mla	r2, r5, r2, r6
 8024cf0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024cf4:	fb07 8803 	mla	r8, r7, r3, r8
 8024cf8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8024cfc:	fb07 2704 	mla	r7, r7, r4, r2
 8024d00:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024d04:	fb0e 8303 	mla	r3, lr, r3, r8
 8024d08:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8024d0c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8024d10:	9803      	ldr	r0, [sp, #12]
 8024d12:	b292      	uxth	r2, r2
 8024d14:	9c02      	ldr	r4, [sp, #8]
 8024d16:	0a1b      	lsrs	r3, r3, #8
 8024d18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d1c:	4350      	muls	r0, r2
 8024d1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d22:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024d26:	ea43 0e0e 	orr.w	lr, r3, lr
 8024d2a:	1c43      	adds	r3, r0, #1
 8024d2c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024d30:	fa5f f08e 	uxtb.w	r0, lr
 8024d34:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024d38:	b2db      	uxtb	r3, r3
 8024d3a:	fb14 f403 	smulbb	r4, r4, r3
 8024d3e:	fb00 4002 	mla	r0, r0, r2, r4
 8024d42:	b280      	uxth	r0, r0
 8024d44:	1c44      	adds	r4, r0, #1
 8024d46:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024d4a:	9c01      	ldr	r4, [sp, #4]
 8024d4c:	fb14 f403 	smulbb	r4, r4, r3
 8024d50:	1200      	asrs	r0, r0, #8
 8024d52:	7008      	strb	r0, [r1, #0]
 8024d54:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8024d58:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024d5c:	fb00 4002 	mla	r0, r0, r2, r4
 8024d60:	b280      	uxth	r0, r0
 8024d62:	1c44      	adds	r4, r0, #1
 8024d64:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024d68:	1200      	asrs	r0, r0, #8
 8024d6a:	7048      	strb	r0, [r1, #1]
 8024d6c:	9800      	ldr	r0, [sp, #0]
 8024d6e:	fb10 f303 	smulbb	r3, r0, r3
 8024d72:	fb0e 3202 	mla	r2, lr, r2, r3
 8024d76:	b292      	uxth	r2, r2
 8024d78:	f102 0e01 	add.w	lr, r2, #1
 8024d7c:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024d80:	1212      	asrs	r2, r2, #8
 8024d82:	708a      	strb	r2, [r1, #2]
 8024d84:	b005      	add	sp, #20
 8024d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d8a:	bf00      	nop
 8024d8c:	0802d8a7 	.word	0x0802d8a7
 8024d90:	0802dd9e 	.word	0x0802dd9e
 8024d94:	0802d970 	.word	0x0802d970

08024d98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d9c:	ed2d 8b08 	vpush	{d8-d11}
 8024da0:	b099      	sub	sp, #100	; 0x64
 8024da2:	eeb0 aa40 	vmov.f32	s20, s0
 8024da6:	eef0 9a60 	vmov.f32	s19, s1
 8024daa:	9306      	str	r3, [sp, #24]
 8024dac:	eeb0 9a41 	vmov.f32	s18, s2
 8024db0:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8024db4:	eeb0 8a62 	vmov.f32	s16, s5
 8024db8:	9216      	str	r2, [sp, #88]	; 0x58
 8024dba:	eef0 8a43 	vmov.f32	s17, s6
 8024dbe:	9307      	str	r3, [sp, #28]
 8024dc0:	eef0 ba44 	vmov.f32	s23, s8
 8024dc4:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8024dc8:	eeb0 ba64 	vmov.f32	s22, s9
 8024dcc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024dce:	eef0 aa45 	vmov.f32	s21, s10
 8024dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8024dd4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8024dd8:	9017      	str	r0, [sp, #92]	; 0x5c
 8024dda:	9112      	str	r1, [sp, #72]	; 0x48
 8024ddc:	6850      	ldr	r0, [r2, #4]
 8024dde:	9315      	str	r3, [sp, #84]	; 0x54
 8024de0:	6812      	ldr	r2, [r2, #0]
 8024de2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8024de4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024de8:	fb00 1303 	mla	r3, r0, r3, r1
 8024dec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024df0:	18d3      	adds	r3, r2, r3
 8024df2:	930a      	str	r3, [sp, #40]	; 0x28
 8024df4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024df6:	681b      	ldr	r3, [r3, #0]
 8024df8:	9311      	str	r3, [sp, #68]	; 0x44
 8024dfa:	9b07      	ldr	r3, [sp, #28]
 8024dfc:	009b      	lsls	r3, r3, #2
 8024dfe:	930e      	str	r3, [sp, #56]	; 0x38
 8024e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024e02:	2b00      	cmp	r3, #0
 8024e04:	dc03      	bgt.n	8024e0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8024e06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024e08:	2b00      	cmp	r3, #0
 8024e0a:	f340 833b 	ble.w	8025484 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8024e0e:	9b06      	ldr	r3, [sp, #24]
 8024e10:	2b00      	cmp	r3, #0
 8024e12:	f340 8197 	ble.w	8025144 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8024e16:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024e18:	1423      	asrs	r3, r4, #16
 8024e1a:	1412      	asrs	r2, r2, #16
 8024e1c:	d432      	bmi.n	8024e84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8024e1e:	1c51      	adds	r1, r2, #1
 8024e20:	9807      	ldr	r0, [sp, #28]
 8024e22:	4288      	cmp	r0, r1
 8024e24:	dd31      	ble.n	8024e8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024e26:	2b00      	cmp	r3, #0
 8024e28:	db2f      	blt.n	8024e8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024e2a:	1c59      	adds	r1, r3, #1
 8024e2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024e2e:	4288      	cmp	r0, r1
 8024e30:	dd2b      	ble.n	8024e8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024e32:	9b06      	ldr	r3, [sp, #24]
 8024e34:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024e36:	3b01      	subs	r3, #1
 8024e38:	992b      	ldr	r1, [sp, #172]	; 0xac
 8024e3a:	fb02 1203 	mla	r2, r2, r3, r1
 8024e3e:	1412      	asrs	r2, r2, #16
 8024e40:	d42e      	bmi.n	8024ea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024e42:	3201      	adds	r2, #1
 8024e44:	9907      	ldr	r1, [sp, #28]
 8024e46:	4291      	cmp	r1, r2
 8024e48:	dd2a      	ble.n	8024ea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024e4a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024e4c:	fb02 4303 	mla	r3, r2, r3, r4
 8024e50:	141b      	asrs	r3, r3, #16
 8024e52:	d425      	bmi.n	8024ea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024e54:	3301      	adds	r3, #1
 8024e56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024e58:	429a      	cmp	r2, r3
 8024e5a:	dd21      	ble.n	8024ea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e5e:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8024e62:	f103 0e03 	add.w	lr, r3, #3
 8024e66:	9b06      	ldr	r3, [sp, #24]
 8024e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8024e6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024e6c:	2b00      	cmp	r3, #0
 8024e6e:	f300 81d2 	bgt.w	8025216 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8024e72:	9b06      	ldr	r3, [sp, #24]
 8024e74:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024e7e:	4423      	add	r3, r4
 8024e80:	930a      	str	r3, [sp, #40]	; 0x28
 8024e82:	e161      	b.n	8025148 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8024e84:	1c51      	adds	r1, r2, #1
 8024e86:	f040 8150 	bne.w	802512a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024e8a:	9907      	ldr	r1, [sp, #28]
 8024e8c:	428a      	cmp	r2, r1
 8024e8e:	f280 814c 	bge.w	802512a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024e92:	1c5a      	adds	r2, r3, #1
 8024e94:	f2c0 8149 	blt.w	802512a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024e98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024e9a:	4293      	cmp	r3, r2
 8024e9c:	f280 8145 	bge.w	802512a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024ea0:	9b06      	ldr	r3, [sp, #24]
 8024ea2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024ea4:	9314      	str	r3, [sp, #80]	; 0x50
 8024ea6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8024eaa:	9313      	str	r3, [sp, #76]	; 0x4c
 8024eac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024eae:	2b00      	cmp	r3, #0
 8024eb0:	dddf      	ble.n	8024e72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8024eb2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024eb4:	1423      	asrs	r3, r4, #16
 8024eb6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024eba:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8024ebe:	1412      	asrs	r2, r2, #16
 8024ec0:	f100 8190 	bmi.w	80251e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8024ec4:	1c55      	adds	r5, r2, #1
 8024ec6:	9f07      	ldr	r7, [sp, #28]
 8024ec8:	42af      	cmp	r7, r5
 8024eca:	f340 818d 	ble.w	80251e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024ece:	2b00      	cmp	r3, #0
 8024ed0:	f2c0 818a 	blt.w	80251e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024ed4:	1c5d      	adds	r5, r3, #1
 8024ed6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024ed8:	42af      	cmp	r7, r5
 8024eda:	f340 8185 	ble.w	80251e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024ede:	9d07      	ldr	r5, [sp, #28]
 8024ee0:	fb03 2305 	mla	r3, r3, r5, r2
 8024ee4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024ee6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8024eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024eee:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024ef2:	2800      	cmp	r0, #0
 8024ef4:	f000 8167 	beq.w	80251c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024ef8:	686a      	ldr	r2, [r5, #4]
 8024efa:	920b      	str	r2, [sp, #44]	; 0x2c
 8024efc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024f00:	2900      	cmp	r1, #0
 8024f02:	f000 8169 	beq.w	80251d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8024f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024f08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024f0a:	18aa      	adds	r2, r5, r2
 8024f0c:	59ed      	ldr	r5, [r5, r7]
 8024f0e:	6852      	ldr	r2, [r2, #4]
 8024f10:	9508      	str	r5, [sp, #32]
 8024f12:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8024f16:	0e15      	lsrs	r5, r2, #24
 8024f18:	920c      	str	r2, [sp, #48]	; 0x30
 8024f1a:	b280      	uxth	r0, r0
 8024f1c:	b289      	uxth	r1, r1
 8024f1e:	fb00 fb01 	mul.w	fp, r0, r1
 8024f22:	0100      	lsls	r0, r0, #4
 8024f24:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8024f28:	eba0 090b 	sub.w	r9, r0, fp
 8024f2c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8024f30:	b289      	uxth	r1, r1
 8024f32:	fa1f f989 	uxth.w	r9, r9
 8024f36:	1a52      	subs	r2, r2, r1
 8024f38:	fb09 f008 	mul.w	r0, r9, r8
 8024f3c:	b292      	uxth	r2, r2
 8024f3e:	fb02 000c 	mla	r0, r2, ip, r0
 8024f42:	fb01 000a 	mla	r0, r1, sl, r0
 8024f46:	fb0b 0005 	mla	r0, fp, r5, r0
 8024f4a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024f4e:	2800      	cmp	r0, #0
 8024f50:	f000 80e0 	beq.w	8025114 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024f54:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024f58:	d01b      	beq.n	8024f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8024f5a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024f5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f62:	fb0c fe0e 	mul.w	lr, ip, lr
 8024f66:	fb0c fc03 	mul.w	ip, ip, r3
 8024f6a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8024f6e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024f72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024f76:	4473      	add	r3, lr
 8024f78:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8024f7c:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8024f80:	0a1b      	lsrs	r3, r3, #8
 8024f82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024f8a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024f8e:	ea43 030e 	orr.w	r3, r3, lr
 8024f92:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024f96:	d01e      	beq.n	8024fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8024f98:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024f9a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024f9e:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8024fa2:	fb08 fc0c 	mul.w	ip, r8, ip
 8024fa6:	fb08 f80e 	mul.w	r8, r8, lr
 8024faa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024fae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024fb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024fb6:	44e6      	add	lr, ip
 8024fb8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8024fbc:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8024fc0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024fc4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024fc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024fcc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024fd0:	ea4e 0708 	orr.w	r7, lr, r8
 8024fd4:	970b      	str	r7, [sp, #44]	; 0x2c
 8024fd6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024fda:	d01e      	beq.n	802501a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024fdc:	9f08      	ldr	r7, [sp, #32]
 8024fde:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024fe2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024fe6:	fb0a f808 	mul.w	r8, sl, r8
 8024fea:	fb0a fa0c 	mul.w	sl, sl, ip
 8024fee:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024ff2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024ff6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024ffa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ffe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025002:	44c6      	add	lr, r8
 8025004:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025008:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802500c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025010:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025014:	ea4e 070a 	orr.w	r7, lr, sl
 8025018:	9708      	str	r7, [sp, #32]
 802501a:	2dff      	cmp	r5, #255	; 0xff
 802501c:	d01d      	beq.n	802505a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 802501e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025020:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8025024:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025028:	fb05 f808 	mul.w	r8, r5, r8
 802502c:	fb05 f50c 	mul.w	r5, r5, ip
 8025030:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8025034:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8025038:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802503c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025040:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8025044:	44c6      	add	lr, r8
 8025046:	0a2d      	lsrs	r5, r5, #8
 8025048:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802504c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025050:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025054:	ea4e 0505 	orr.w	r5, lr, r5
 8025058:	950c      	str	r5, [sp, #48]	; 0x30
 802505a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802505c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025060:	9f08      	ldr	r7, [sp, #32]
 8025062:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025066:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802506a:	fb09 f505 	mul.w	r5, r9, r5
 802506e:	fb02 550c 	mla	r5, r2, ip, r5
 8025072:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8025076:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025078:	fb01 550c 	mla	r5, r1, ip, r5
 802507c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8025080:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025082:	fb0b 550c 	mla	r5, fp, ip, r5
 8025086:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802508a:	fb09 f90c 	mul.w	r9, r9, ip
 802508e:	0a2d      	lsrs	r5, r5, #8
 8025090:	fb02 9303 	mla	r3, r2, r3, r9
 8025094:	9a08      	ldr	r2, [sp, #32]
 8025096:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802509a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802509e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80250a0:	fb01 330e 	mla	r3, r1, lr, r3
 80250a4:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80250a8:	fb0b 3b01 	mla	fp, fp, r1, r3
 80250ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80250ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80250b0:	4343      	muls	r3, r0
 80250b2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80250b6:	1c58      	adds	r0, r3, #1
 80250b8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80250bc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80250c0:	ea45 050b 	orr.w	r5, r5, fp
 80250c4:	7833      	ldrb	r3, [r6, #0]
 80250c6:	b2ea      	uxtb	r2, r5
 80250c8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80250cc:	fb12 f201 	smulbb	r2, r2, r1
 80250d0:	b2c0      	uxtb	r0, r0
 80250d2:	fb03 2300 	mla	r3, r3, r0, r2
 80250d6:	b29b      	uxth	r3, r3
 80250d8:	1c5a      	adds	r2, r3, #1
 80250da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80250de:	7872      	ldrb	r2, [r6, #1]
 80250e0:	fb12 f200 	smulbb	r2, r2, r0
 80250e4:	121b      	asrs	r3, r3, #8
 80250e6:	7033      	strb	r3, [r6, #0]
 80250e8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80250ec:	0c2d      	lsrs	r5, r5, #16
 80250ee:	fb03 2301 	mla	r3, r3, r1, r2
 80250f2:	b29b      	uxth	r3, r3
 80250f4:	1c5a      	adds	r2, r3, #1
 80250f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80250fa:	121b      	asrs	r3, r3, #8
 80250fc:	7073      	strb	r3, [r6, #1]
 80250fe:	78b3      	ldrb	r3, [r6, #2]
 8025100:	fb13 f000 	smulbb	r0, r3, r0
 8025104:	fb05 0501 	mla	r5, r5, r1, r0
 8025108:	b2ad      	uxth	r5, r5
 802510a:	1c6b      	adds	r3, r5, #1
 802510c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025110:	122d      	asrs	r5, r5, #8
 8025112:	70b5      	strb	r5, [r6, #2]
 8025114:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025116:	3603      	adds	r6, #3
 8025118:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802511a:	4413      	add	r3, r2
 802511c:	932b      	str	r3, [sp, #172]	; 0xac
 802511e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025120:	441c      	add	r4, r3
 8025122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025124:	3b01      	subs	r3, #1
 8025126:	9314      	str	r3, [sp, #80]	; 0x50
 8025128:	e6c0      	b.n	8024eac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802512a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802512c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802512e:	4413      	add	r3, r2
 8025130:	932b      	str	r3, [sp, #172]	; 0xac
 8025132:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025134:	441c      	add	r4, r3
 8025136:	9b06      	ldr	r3, [sp, #24]
 8025138:	3b01      	subs	r3, #1
 802513a:	9306      	str	r3, [sp, #24]
 802513c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802513e:	3303      	adds	r3, #3
 8025140:	930a      	str	r3, [sp, #40]	; 0x28
 8025142:	e664      	b.n	8024e0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8025144:	f47f ae75 	bne.w	8024e32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8025148:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802514a:	2b00      	cmp	r3, #0
 802514c:	f340 819a 	ble.w	8025484 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8025150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025154:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025156:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802515a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802515e:	eef0 6a48 	vmov.f32	s13, s16
 8025162:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025166:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802516a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802516e:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8025172:	eef0 6a68 	vmov.f32	s13, s17
 8025176:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802517a:	ee16 4a90 	vmov	r4, s13
 802517e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025182:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025186:	ee37 8a48 	vsub.f32	s16, s14, s16
 802518a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802518e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025192:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025196:	ee18 2a10 	vmov	r2, s16
 802519a:	eeb0 8a47 	vmov.f32	s16, s14
 802519e:	fb92 f3f3 	sdiv	r3, r2, r3
 80251a2:	ee18 2a90 	vmov	r2, s17
 80251a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80251a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80251aa:	eef0 8a67 	vmov.f32	s17, s15
 80251ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80251b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80251b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80251b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80251b8:	3b01      	subs	r3, #1
 80251ba:	9312      	str	r3, [sp, #72]	; 0x48
 80251bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80251be:	bf08      	it	eq
 80251c0:	4613      	moveq	r3, r2
 80251c2:	9306      	str	r3, [sp, #24]
 80251c4:	e61c      	b.n	8024e00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80251c6:	b151      	cbz	r1, 80251de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80251c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80251ca:	58aa      	ldr	r2, [r5, r2]
 80251cc:	25ff      	movs	r5, #255	; 0xff
 80251ce:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80251d2:	9208      	str	r2, [sp, #32]
 80251d4:	46a8      	mov	r8, r5
 80251d6:	e6a0      	b.n	8024f1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80251d8:	25ff      	movs	r5, #255	; 0xff
 80251da:	46aa      	mov	sl, r5
 80251dc:	e69d      	b.n	8024f1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80251de:	25ff      	movs	r5, #255	; 0xff
 80251e0:	46aa      	mov	sl, r5
 80251e2:	e7f7      	b.n	80251d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80251e4:	1c57      	adds	r7, r2, #1
 80251e6:	d195      	bne.n	8025114 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80251e8:	9d07      	ldr	r5, [sp, #28]
 80251ea:	4295      	cmp	r5, r2
 80251ec:	dd92      	ble.n	8025114 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80251ee:	1c5d      	adds	r5, r3, #1
 80251f0:	db90      	blt.n	8025114 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80251f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80251f4:	429d      	cmp	r5, r3
 80251f6:	dd8d      	ble.n	8025114 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80251f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80251fa:	9201      	str	r2, [sp, #4]
 80251fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80251fe:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8025202:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025204:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8025206:	9300      	str	r3, [sp, #0]
 8025208:	9b07      	ldr	r3, [sp, #28]
 802520a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802520e:	4631      	mov	r1, r6
 8025210:	f7ff fc68 	bl	8024ae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8025214:	e77e      	b.n	8025114 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8025216:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025218:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802521c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802521e:	9d07      	ldr	r5, [sp, #28]
 8025220:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025224:	1412      	asrs	r2, r2, #16
 8025226:	1423      	asrs	r3, r4, #16
 8025228:	fb05 2303 	mla	r3, r5, r3, r2
 802522c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802522e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8025232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025236:	0e1e      	lsrs	r6, r3, #24
 8025238:	2900      	cmp	r1, #0
 802523a:	f000 8114 	beq.w	8025466 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802523e:	686a      	ldr	r2, [r5, #4]
 8025240:	920d      	str	r2, [sp, #52]	; 0x34
 8025242:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8025246:	2800      	cmp	r0, #0
 8025248:	f000 8116 	beq.w	8025478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 802524c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802524e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025250:	18aa      	adds	r2, r5, r2
 8025252:	59ed      	ldr	r5, [r5, r7]
 8025254:	6852      	ldr	r2, [r2, #4]
 8025256:	9509      	str	r5, [sp, #36]	; 0x24
 8025258:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802525c:	0e15      	lsrs	r5, r2, #24
 802525e:	920f      	str	r2, [sp, #60]	; 0x3c
 8025260:	b289      	uxth	r1, r1
 8025262:	b280      	uxth	r0, r0
 8025264:	fb01 fa00 	mul.w	sl, r1, r0
 8025268:	0109      	lsls	r1, r1, #4
 802526a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802526e:	eba1 080a 	sub.w	r8, r1, sl
 8025272:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8025276:	b280      	uxth	r0, r0
 8025278:	fa1f f888 	uxth.w	r8, r8
 802527c:	1a12      	subs	r2, r2, r0
 802527e:	fb08 f10c 	mul.w	r1, r8, ip
 8025282:	b292      	uxth	r2, r2
 8025284:	fb02 1106 	mla	r1, r2, r6, r1
 8025288:	fb00 1109 	mla	r1, r0, r9, r1
 802528c:	fb0a 1105 	mla	r1, sl, r5, r1
 8025290:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025294:	2900      	cmp	r1, #0
 8025296:	f000 80da 	beq.w	802544e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 802529a:	2eff      	cmp	r6, #255	; 0xff
 802529c:	d016      	beq.n	80252cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 802529e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80252a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80252a6:	4377      	muls	r7, r6
 80252a8:	435e      	muls	r6, r3
 80252aa:	0a3b      	lsrs	r3, r7, #8
 80252ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80252b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80252b4:	443b      	add	r3, r7
 80252b6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80252ba:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80252be:	0a1b      	lsrs	r3, r3, #8
 80252c0:	0a3f      	lsrs	r7, r7, #8
 80252c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80252c6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80252ca:	433b      	orrs	r3, r7
 80252cc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80252d0:	d01d      	beq.n	802530e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 80252d2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80252d4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80252d6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80252da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80252de:	fb0c f606 	mul.w	r6, ip, r6
 80252e2:	fb0c fc07 	mul.w	ip, ip, r7
 80252e6:	0a37      	lsrs	r7, r6, #8
 80252e8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80252ec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80252f0:	4437      	add	r7, r6
 80252f2:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80252f6:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80252fa:	0a3f      	lsrs	r7, r7, #8
 80252fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025300:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025304:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025308:	ea47 060c 	orr.w	r6, r7, ip
 802530c:	960d      	str	r6, [sp, #52]	; 0x34
 802530e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025312:	d01d      	beq.n	8025350 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8025314:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8025316:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802531a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802531e:	fb09 fc0c 	mul.w	ip, r9, ip
 8025322:	fb09 f906 	mul.w	r9, r9, r6
 8025326:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802532a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802532e:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8025332:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025336:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802533a:	4467      	add	r7, ip
 802533c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025340:	0a3f      	lsrs	r7, r7, #8
 8025342:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025346:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802534a:	ea47 0609 	orr.w	r6, r7, r9
 802534e:	9609      	str	r6, [sp, #36]	; 0x24
 8025350:	2dff      	cmp	r5, #255	; 0xff
 8025352:	d01a      	beq.n	802538a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8025354:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8025356:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802535a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802535e:	fb05 fc0c 	mul.w	ip, r5, ip
 8025362:	4375      	muls	r5, r6
 8025364:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8025368:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802536c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8025370:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025374:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8025378:	4467      	add	r7, ip
 802537a:	0a2d      	lsrs	r5, r5, #8
 802537c:	0a3f      	lsrs	r7, r7, #8
 802537e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025382:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025386:	433d      	orrs	r5, r7
 8025388:	950f      	str	r5, [sp, #60]	; 0x3c
 802538a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802538c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025394:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025398:	fb08 f505 	mul.w	r5, r8, r5
 802539c:	fb02 5506 	mla	r5, r2, r6, r5
 80253a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80253a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80253a6:	fb00 5506 	mla	r5, r0, r6, r5
 80253aa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80253ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80253b0:	fb0a 5506 	mla	r5, sl, r6, r5
 80253b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80253b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80253ba:	0a2d      	lsrs	r5, r5, #8
 80253bc:	fb08 f806 	mul.w	r8, r8, r6
 80253c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80253c4:	fb02 8303 	mla	r3, r2, r3, r8
 80253c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80253ca:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80253ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80253d0:	fb00 3307 	mla	r3, r0, r7, r3
 80253d4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80253d8:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80253dc:	fb01 f30b 	mul.w	r3, r1, fp
 80253e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253e4:	1c59      	adds	r1, r3, #1
 80253e6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80253ea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80253ee:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80253f2:	ea45 050c 	orr.w	r5, r5, ip
 80253f6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80253fa:	b2ea      	uxtb	r2, r5
 80253fc:	b2c9      	uxtb	r1, r1
 80253fe:	fb12 f20b 	smulbb	r2, r2, fp
 8025402:	fb03 2301 	mla	r3, r3, r1, r2
 8025406:	b29b      	uxth	r3, r3
 8025408:	1c5a      	adds	r2, r3, #1
 802540a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802540e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025412:	fb12 f201 	smulbb	r2, r2, r1
 8025416:	121b      	asrs	r3, r3, #8
 8025418:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802541c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8025420:	0c2d      	lsrs	r5, r5, #16
 8025422:	fb03 230b 	mla	r3, r3, fp, r2
 8025426:	b29b      	uxth	r3, r3
 8025428:	1c5a      	adds	r2, r3, #1
 802542a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802542e:	121b      	asrs	r3, r3, #8
 8025430:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025434:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025438:	fb13 f101 	smulbb	r1, r3, r1
 802543c:	fb05 150b 	mla	r5, r5, fp, r1
 8025440:	b2ad      	uxth	r5, r5
 8025442:	1c69      	adds	r1, r5, #1
 8025444:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025448:	122d      	asrs	r5, r5, #8
 802544a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802544e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025450:	f10e 0e03 	add.w	lr, lr, #3
 8025454:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025456:	4413      	add	r3, r2
 8025458:	932b      	str	r3, [sp, #172]	; 0xac
 802545a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802545c:	441c      	add	r4, r3
 802545e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025460:	3b01      	subs	r3, #1
 8025462:	9313      	str	r3, [sp, #76]	; 0x4c
 8025464:	e501      	b.n	8024e6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8025466:	b150      	cbz	r0, 802547e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8025468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802546a:	58aa      	ldr	r2, [r5, r2]
 802546c:	25ff      	movs	r5, #255	; 0xff
 802546e:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8025472:	9209      	str	r2, [sp, #36]	; 0x24
 8025474:	46ac      	mov	ip, r5
 8025476:	e6f3      	b.n	8025260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8025478:	25ff      	movs	r5, #255	; 0xff
 802547a:	46a9      	mov	r9, r5
 802547c:	e6f0      	b.n	8025260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802547e:	25ff      	movs	r5, #255	; 0xff
 8025480:	46a9      	mov	r9, r5
 8025482:	e7f7      	b.n	8025474 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8025484:	b019      	add	sp, #100	; 0x64
 8025486:	ecbd 8b08 	vpop	{d8-d11}
 802548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025490 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8025490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025494:	b085      	sub	sp, #20
 8025496:	7888      	ldrb	r0, [r1, #2]
 8025498:	4691      	mov	r9, r2
 802549a:	9000      	str	r0, [sp, #0]
 802549c:	7848      	ldrb	r0, [r1, #1]
 802549e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80254a2:	9001      	str	r0, [sp, #4]
 80254a4:	7808      	ldrb	r0, [r1, #0]
 80254a6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80254aa:	9002      	str	r0, [sp, #8]
 80254ac:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80254b0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80254b4:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80254b8:	fb04 c603 	mla	r6, r4, r3, ip
 80254bc:	2c00      	cmp	r4, #0
 80254be:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80254c2:	9a00      	ldr	r2, [sp, #0]
 80254c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80254c8:	9a01      	ldr	r2, [sp, #4]
 80254ca:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80254ce:	db3a      	blt.n	8025546 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80254d0:	45a0      	cmp	r8, r4
 80254d2:	dd38      	ble.n	8025546 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80254d4:	f1bc 0f00 	cmp.w	ip, #0
 80254d8:	db33      	blt.n	8025542 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80254da:	4563      	cmp	r3, ip
 80254dc:	dd31      	ble.n	8025542 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80254de:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80254e2:	f11c 0601 	adds.w	r6, ip, #1
 80254e6:	d431      	bmi.n	802554c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80254e8:	42b3      	cmp	r3, r6
 80254ea:	dd2f      	ble.n	802554c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80254ec:	b375      	cbz	r5, 802554c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80254ee:	f8de 6004 	ldr.w	r6, [lr, #4]
 80254f2:	3401      	adds	r4, #1
 80254f4:	d42e      	bmi.n	8025554 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80254f6:	45a0      	cmp	r8, r4
 80254f8:	dd2c      	ble.n	8025554 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80254fa:	b35f      	cbz	r7, 8025554 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80254fc:	f1bc 0f00 	cmp.w	ip, #0
 8025500:	db26      	blt.n	8025550 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8025502:	4563      	cmp	r3, ip
 8025504:	dd24      	ble.n	8025550 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8025506:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802550a:	f11c 0c01 	adds.w	ip, ip, #1
 802550e:	d405      	bmi.n	802551c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025510:	4563      	cmp	r3, ip
 8025512:	dd03      	ble.n	802551c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025514:	b115      	cbz	r5, 802551c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025516:	3301      	adds	r3, #1
 8025518:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 802551c:	2d0f      	cmp	r5, #15
 802551e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025522:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025526:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802552a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802552e:	d801      	bhi.n	8025534 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8025530:	2f0f      	cmp	r7, #15
 8025532:	d911      	bls.n	8025558 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8025534:	4b77      	ldr	r3, [pc, #476]	; (8025714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8025536:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802553a:	4a77      	ldr	r2, [pc, #476]	; (8025718 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 802553c:	4877      	ldr	r0, [pc, #476]	; (802571c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 802553e:	f003 f831 	bl	80285a4 <__assert_func>
 8025542:	4602      	mov	r2, r0
 8025544:	e7cd      	b.n	80254e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8025546:	4606      	mov	r6, r0
 8025548:	4602      	mov	r2, r0
 802554a:	e7d2      	b.n	80254f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 802554c:	4606      	mov	r6, r0
 802554e:	e7d0      	b.n	80254f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8025550:	4604      	mov	r4, r0
 8025552:	e7da      	b.n	802550a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8025554:	4604      	mov	r4, r0
 8025556:	e7e1      	b.n	802551c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025558:	b2ab      	uxth	r3, r5
 802555a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802555e:	b2bf      	uxth	r7, r7
 8025560:	fb03 fe07 	mul.w	lr, r3, r7
 8025564:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8025568:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802556c:	eba3 0c0e 	sub.w	ip, r3, lr
 8025570:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8025574:	b2bf      	uxth	r7, r7
 8025576:	fa1f fc8c 	uxth.w	ip, ip
 802557a:	eba5 0507 	sub.w	r5, r5, r7
 802557e:	fb0c f30a 	mul.w	r3, ip, sl
 8025582:	b2ad      	uxth	r5, r5
 8025584:	fb05 330b 	mla	r3, r5, fp, r3
 8025588:	fb07 3309 	mla	r3, r7, r9, r3
 802558c:	fb0e 3308 	mla	r3, lr, r8, r3
 8025590:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025594:	9303      	str	r3, [sp, #12]
 8025596:	d018      	beq.n	80255ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8025598:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802559c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80255a0:	fb0b f303 	mul.w	r3, fp, r3
 80255a4:	fb0b fb02 	mul.w	fp, fp, r2
 80255a8:	0a1a      	lsrs	r2, r3, #8
 80255aa:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80255ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80255b2:	441a      	add	r2, r3
 80255b4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80255b8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80255bc:	0a12      	lsrs	r2, r2, #8
 80255be:	0a1b      	lsrs	r3, r3, #8
 80255c0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80255c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80255c8:	431a      	orrs	r2, r3
 80255ca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80255ce:	d019      	beq.n	8025604 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80255d0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80255d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80255d8:	fb0a fb0b 	mul.w	fp, sl, fp
 80255dc:	fb0a fa06 	mul.w	sl, sl, r6
 80255e0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80255e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80255e8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80255ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80255f0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80255f4:	445e      	add	r6, fp
 80255f6:	0a1b      	lsrs	r3, r3, #8
 80255f8:	0a36      	lsrs	r6, r6, #8
 80255fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80255fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025602:	431e      	orrs	r6, r3
 8025604:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025608:	d019      	beq.n	802563e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 802560a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802560e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025612:	fb09 fa0a 	mul.w	sl, r9, sl
 8025616:	fb09 f904 	mul.w	r9, r9, r4
 802561a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802561e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025622:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8025626:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802562a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802562e:	4454      	add	r4, sl
 8025630:	0a1b      	lsrs	r3, r3, #8
 8025632:	0a24      	lsrs	r4, r4, #8
 8025634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025638:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802563c:	431c      	orrs	r4, r3
 802563e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025642:	d019      	beq.n	8025678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8025644:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8025648:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802564c:	fb08 f909 	mul.w	r9, r8, r9
 8025650:	fb08 f800 	mul.w	r8, r8, r0
 8025654:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8025658:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802565c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8025660:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025664:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8025668:	4448      	add	r0, r9
 802566a:	0a1b      	lsrs	r3, r3, #8
 802566c:	0a00      	lsrs	r0, r0, #8
 802566e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025672:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025676:	4318      	orrs	r0, r3
 8025678:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802567c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025680:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025684:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025688:	fb0c f808 	mul.w	r8, ip, r8
 802568c:	fb0c f606 	mul.w	r6, ip, r6
 8025690:	fb05 8803 	mla	r8, r5, r3, r8
 8025694:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8025698:	fb05 6202 	mla	r2, r5, r2, r6
 802569c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80256a0:	fb07 8803 	mla	r8, r7, r3, r8
 80256a4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80256a8:	fb07 2704 	mla	r7, r7, r4, r2
 80256ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80256b0:	fb0e 8303 	mla	r3, lr, r3, r8
 80256b4:	fb0e 7e00 	mla	lr, lr, r0, r7
 80256b8:	9802      	ldr	r0, [sp, #8]
 80256ba:	0a1b      	lsrs	r3, r3, #8
 80256bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80256c4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80256c8:	ea43 0e0e 	orr.w	lr, r3, lr
 80256cc:	9b03      	ldr	r3, [sp, #12]
 80256ce:	43db      	mvns	r3, r3
 80256d0:	b2db      	uxtb	r3, r3
 80256d2:	4358      	muls	r0, r3
 80256d4:	1c42      	adds	r2, r0, #1
 80256d6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80256da:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80256de:	700a      	strb	r2, [r1, #0]
 80256e0:	9a01      	ldr	r2, [sp, #4]
 80256e2:	435a      	muls	r2, r3
 80256e4:	1c50      	adds	r0, r2, #1
 80256e6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80256ea:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80256ee:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80256f2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80256f6:	704a      	strb	r2, [r1, #1]
 80256f8:	9a00      	ldr	r2, [sp, #0]
 80256fa:	435a      	muls	r2, r3
 80256fc:	4613      	mov	r3, r2
 80256fe:	3201      	adds	r2, #1
 8025700:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025704:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8025708:	f881 e002 	strb.w	lr, [r1, #2]
 802570c:	b005      	add	sp, #20
 802570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025712:	bf00      	nop
 8025714:	0802d8a7 	.word	0x0802d8a7
 8025718:	0802dd9e 	.word	0x0802dd9e
 802571c:	0802d970 	.word	0x0802d970

08025720 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025724:	ed2d 8b08 	vpush	{d8-d11}
 8025728:	b097      	sub	sp, #92	; 0x5c
 802572a:	eeb0 aa40 	vmov.f32	s20, s0
 802572e:	eef0 9a60 	vmov.f32	s19, s1
 8025732:	9306      	str	r3, [sp, #24]
 8025734:	eeb0 9a41 	vmov.f32	s18, s2
 8025738:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 802573c:	eeb0 8a62 	vmov.f32	s16, s5
 8025740:	9214      	str	r2, [sp, #80]	; 0x50
 8025742:	eef0 8a43 	vmov.f32	s17, s6
 8025746:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025748:	eef0 ba44 	vmov.f32	s23, s8
 802574c:	9307      	str	r3, [sp, #28]
 802574e:	eeb0 ba64 	vmov.f32	s22, s9
 8025752:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025756:	eef0 aa45 	vmov.f32	s21, s10
 802575a:	9015      	str	r0, [sp, #84]	; 0x54
 802575c:	9112      	str	r1, [sp, #72]	; 0x48
 802575e:	6850      	ldr	r0, [r2, #4]
 8025760:	9310      	str	r3, [sp, #64]	; 0x40
 8025762:	6812      	ldr	r2, [r2, #0]
 8025764:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8025766:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802576a:	fb00 1303 	mla	r3, r0, r3, r1
 802576e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025772:	18d3      	adds	r3, r2, r3
 8025774:	930a      	str	r3, [sp, #40]	; 0x28
 8025776:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025778:	681b      	ldr	r3, [r3, #0]
 802577a:	9311      	str	r3, [sp, #68]	; 0x44
 802577c:	9b07      	ldr	r3, [sp, #28]
 802577e:	009b      	lsls	r3, r3, #2
 8025780:	930e      	str	r3, [sp, #56]	; 0x38
 8025782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025784:	2b00      	cmp	r3, #0
 8025786:	dc03      	bgt.n	8025790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8025788:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802578a:	2b00      	cmp	r3, #0
 802578c:	f340 832e 	ble.w	8025dec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8025790:	9b06      	ldr	r3, [sp, #24]
 8025792:	2b00      	cmp	r3, #0
 8025794:	f340 8186 	ble.w	8025aa4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8025798:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802579a:	1423      	asrs	r3, r4, #16
 802579c:	1412      	asrs	r2, r2, #16
 802579e:	d42f      	bmi.n	8025800 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80257a0:	1c51      	adds	r1, r2, #1
 80257a2:	9807      	ldr	r0, [sp, #28]
 80257a4:	4288      	cmp	r0, r1
 80257a6:	dd2e      	ble.n	8025806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80257a8:	2b00      	cmp	r3, #0
 80257aa:	db2c      	blt.n	8025806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80257ac:	1c59      	adds	r1, r3, #1
 80257ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80257b0:	4288      	cmp	r0, r1
 80257b2:	dd28      	ble.n	8025806 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80257b4:	9b06      	ldr	r3, [sp, #24]
 80257b6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80257b8:	3b01      	subs	r3, #1
 80257ba:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80257bc:	fb02 1203 	mla	r2, r2, r3, r1
 80257c0:	1412      	asrs	r2, r2, #16
 80257c2:	d42b      	bmi.n	802581c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80257c4:	3201      	adds	r2, #1
 80257c6:	9907      	ldr	r1, [sp, #28]
 80257c8:	4291      	cmp	r1, r2
 80257ca:	dd27      	ble.n	802581c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80257cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80257ce:	fb02 4303 	mla	r3, r2, r3, r4
 80257d2:	141b      	asrs	r3, r3, #16
 80257d4:	d422      	bmi.n	802581c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80257d6:	3301      	adds	r3, #1
 80257d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80257da:	429a      	cmp	r2, r3
 80257dc:	dd1e      	ble.n	802581c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80257de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257e0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80257e4:	1cdd      	adds	r5, r3, #3
 80257e6:	f1bb 0f00 	cmp.w	fp, #0
 80257ea:	f300 81c4 	bgt.w	8025b76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80257ee:	9b06      	ldr	r3, [sp, #24]
 80257f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80257f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80257fa:	4423      	add	r3, r4
 80257fc:	930a      	str	r3, [sp, #40]	; 0x28
 80257fe:	e153      	b.n	8025aa8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8025800:	1c51      	adds	r1, r2, #1
 8025802:	f040 8142 	bne.w	8025a8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8025806:	9907      	ldr	r1, [sp, #28]
 8025808:	428a      	cmp	r2, r1
 802580a:	f280 813e 	bge.w	8025a8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802580e:	1c5a      	adds	r2, r3, #1
 8025810:	f2c0 813b 	blt.w	8025a8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8025814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025816:	4293      	cmp	r3, r2
 8025818:	f280 8137 	bge.w	8025a8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802581c:	9b06      	ldr	r3, [sp, #24]
 802581e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025820:	9313      	str	r3, [sp, #76]	; 0x4c
 8025822:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025824:	2b00      	cmp	r3, #0
 8025826:	dde2      	ble.n	80257ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8025828:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802582a:	1423      	asrs	r3, r4, #16
 802582c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802582e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025832:	1409      	asrs	r1, r1, #16
 8025834:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8025838:	f100 8187 	bmi.w	8025b4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 802583c:	1c4e      	adds	r6, r1, #1
 802583e:	9f07      	ldr	r7, [sp, #28]
 8025840:	42b7      	cmp	r7, r6
 8025842:	f340 8184 	ble.w	8025b4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8025846:	2b00      	cmp	r3, #0
 8025848:	f2c0 8181 	blt.w	8025b4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802584c:	1c5e      	adds	r6, r3, #1
 802584e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8025850:	42b7      	cmp	r7, r6
 8025852:	f340 817c 	ble.w	8025b4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8025856:	9e07      	ldr	r6, [sp, #28]
 8025858:	fb03 1306 	mla	r3, r3, r6, r1
 802585c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802585e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8025862:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8025866:	0e1f      	lsrs	r7, r3, #24
 8025868:	2a00      	cmp	r2, #0
 802586a:	f000 815c 	beq.w	8025b26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 802586e:	6871      	ldr	r1, [r6, #4]
 8025870:	910b      	str	r1, [sp, #44]	; 0x2c
 8025872:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8025876:	2800      	cmp	r0, #0
 8025878:	f000 815e 	beq.w	8025b38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 802587c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802587e:	eb06 0c01 	add.w	ip, r6, r1
 8025882:	5876      	ldr	r6, [r6, r1]
 8025884:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8025888:	ea4f 6916 	mov.w	r9, r6, lsr #24
 802588c:	9608      	str	r6, [sp, #32]
 802588e:	0e0e      	lsrs	r6, r1, #24
 8025890:	910c      	str	r1, [sp, #48]	; 0x30
 8025892:	b292      	uxth	r2, r2
 8025894:	b280      	uxth	r0, r0
 8025896:	fb02 fa00 	mul.w	sl, r2, r0
 802589a:	0112      	lsls	r2, r2, #4
 802589c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80258a0:	eba2 080a 	sub.w	r8, r2, sl
 80258a4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80258a8:	b280      	uxth	r0, r0
 80258aa:	fa1f f888 	uxth.w	r8, r8
 80258ae:	1a09      	subs	r1, r1, r0
 80258b0:	fb08 f20e 	mul.w	r2, r8, lr
 80258b4:	b289      	uxth	r1, r1
 80258b6:	fb01 2207 	mla	r2, r1, r7, r2
 80258ba:	fb00 2209 	mla	r2, r0, r9, r2
 80258be:	fb0a 2206 	mla	r2, sl, r6, r2
 80258c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80258c6:	2a00      	cmp	r2, #0
 80258c8:	f000 80d4 	beq.w	8025a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80258cc:	2fff      	cmp	r7, #255	; 0xff
 80258ce:	d01a      	beq.n	8025906 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 80258d0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80258d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258d8:	fb07 fc0c 	mul.w	ip, r7, ip
 80258dc:	435f      	muls	r7, r3
 80258de:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80258e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80258e6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80258ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80258ee:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80258f2:	4463      	add	r3, ip
 80258f4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80258f8:	0a1b      	lsrs	r3, r3, #8
 80258fa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80258fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025902:	ea43 030b 	orr.w	r3, r3, fp
 8025906:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802590a:	d01e      	beq.n	802594a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802590c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802590e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8025912:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025916:	fb0e fb0b 	mul.w	fp, lr, fp
 802591a:	fb0e fe07 	mul.w	lr, lr, r7
 802591e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025922:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025926:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802592a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802592e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025932:	44dc      	add	ip, fp
 8025934:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025938:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802593c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025940:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025944:	ea4c 070e 	orr.w	r7, ip, lr
 8025948:	970b      	str	r7, [sp, #44]	; 0x2c
 802594a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802594e:	d01e      	beq.n	802598e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025950:	9f08      	ldr	r7, [sp, #32]
 8025952:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025956:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802595a:	fb09 fe0e 	mul.w	lr, r9, lr
 802595e:	fb09 f907 	mul.w	r9, r9, r7
 8025962:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025966:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802596a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802596e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025972:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025976:	44f4      	add	ip, lr
 8025978:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802597c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025980:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025984:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025988:	ea4c 0709 	orr.w	r7, ip, r9
 802598c:	9708      	str	r7, [sp, #32]
 802598e:	2eff      	cmp	r6, #255	; 0xff
 8025990:	d01c      	beq.n	80259cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8025992:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025994:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025998:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802599c:	fb06 fe0e 	mul.w	lr, r6, lr
 80259a0:	437e      	muls	r6, r7
 80259a2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80259a6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80259aa:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80259ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259b2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80259b6:	44f4      	add	ip, lr
 80259b8:	0a36      	lsrs	r6, r6, #8
 80259ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80259c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259c6:	ea4c 0606 	orr.w	r6, ip, r6
 80259ca:	960c      	str	r6, [sp, #48]	; 0x30
 80259cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80259ce:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80259d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80259d6:	2aff      	cmp	r2, #255	; 0xff
 80259d8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80259dc:	fb08 f606 	mul.w	r6, r8, r6
 80259e0:	fb01 6607 	mla	r6, r1, r7, r6
 80259e4:	9f08      	ldr	r7, [sp, #32]
 80259e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80259ea:	fb00 6607 	mla	r6, r0, r7, r6
 80259ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80259f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80259f4:	fb0a 6607 	mla	r6, sl, r7, r6
 80259f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80259fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80259fe:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8025a02:	fb08 f807 	mul.w	r8, r8, r7
 8025a06:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025a0a:	fb01 8303 	mla	r3, r1, r3, r8
 8025a0e:	9908      	ldr	r1, [sp, #32]
 8025a10:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025a14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025a16:	fb00 330c 	mla	r3, r0, ip, r3
 8025a1a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8025a1e:	fb0a 3a00 	mla	sl, sl, r0, r3
 8025a22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a2a:	ea46 060a 	orr.w	r6, r6, sl
 8025a2e:	b2f0      	uxtb	r0, r6
 8025a30:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8025a34:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8025a38:	f000 8084 	beq.w	8025b44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8025a3c:	43d2      	mvns	r2, r2
 8025a3e:	782b      	ldrb	r3, [r5, #0]
 8025a40:	b2d2      	uxtb	r2, r2
 8025a42:	fb03 f702 	mul.w	r7, r3, r2
 8025a46:	1c7b      	adds	r3, r7, #1
 8025a48:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025a4c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025a50:	702b      	strb	r3, [r5, #0]
 8025a52:	786b      	ldrb	r3, [r5, #1]
 8025a54:	fb03 f002 	mul.w	r0, r3, r2
 8025a58:	1c43      	adds	r3, r0, #1
 8025a5a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025a5e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025a62:	706b      	strb	r3, [r5, #1]
 8025a64:	78ab      	ldrb	r3, [r5, #2]
 8025a66:	4353      	muls	r3, r2
 8025a68:	1c5a      	adds	r2, r3, #1
 8025a6a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025a6e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025a72:	70ae      	strb	r6, [r5, #2]
 8025a74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025a76:	3503      	adds	r5, #3
 8025a78:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025a7a:	4413      	add	r3, r2
 8025a7c:	9329      	str	r3, [sp, #164]	; 0xa4
 8025a7e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025a80:	441c      	add	r4, r3
 8025a82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025a84:	3b01      	subs	r3, #1
 8025a86:	9313      	str	r3, [sp, #76]	; 0x4c
 8025a88:	e6cb      	b.n	8025822 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8025a8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025a8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025a8e:	4413      	add	r3, r2
 8025a90:	9329      	str	r3, [sp, #164]	; 0xa4
 8025a92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025a94:	441c      	add	r4, r3
 8025a96:	9b06      	ldr	r3, [sp, #24]
 8025a98:	3b01      	subs	r3, #1
 8025a9a:	9306      	str	r3, [sp, #24]
 8025a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a9e:	3303      	adds	r3, #3
 8025aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8025aa2:	e675      	b.n	8025790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8025aa4:	f47f ae86 	bne.w	80257b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8025aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025aaa:	2b00      	cmp	r3, #0
 8025aac:	f340 819e 	ble.w	8025dec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8025ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ab4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ab6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025aba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025abe:	eef0 6a48 	vmov.f32	s13, s16
 8025ac2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025ac6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025aca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ace:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025ad2:	eef0 6a68 	vmov.f32	s13, s17
 8025ad6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ada:	ee16 4a90 	vmov	r4, s13
 8025ade:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025ae2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025ae6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025aea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025aee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025af2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025af6:	ee18 2a10 	vmov	r2, s16
 8025afa:	eeb0 8a47 	vmov.f32	s16, s14
 8025afe:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b02:	ee18 2a90 	vmov	r2, s17
 8025b06:	932b      	str	r3, [sp, #172]	; 0xac
 8025b08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b0a:	eef0 8a67 	vmov.f32	s17, s15
 8025b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b12:	932c      	str	r3, [sp, #176]	; 0xb0
 8025b14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025b16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025b18:	3b01      	subs	r3, #1
 8025b1a:	9312      	str	r3, [sp, #72]	; 0x48
 8025b1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b1e:	bf08      	it	eq
 8025b20:	4613      	moveq	r3, r2
 8025b22:	9306      	str	r3, [sp, #24]
 8025b24:	e62d      	b.n	8025782 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8025b26:	b150      	cbz	r0, 8025b3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8025b28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025b2a:	5871      	ldr	r1, [r6, r1]
 8025b2c:	26ff      	movs	r6, #255	; 0xff
 8025b2e:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8025b32:	9108      	str	r1, [sp, #32]
 8025b34:	46b6      	mov	lr, r6
 8025b36:	e6ac      	b.n	8025892 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8025b38:	26ff      	movs	r6, #255	; 0xff
 8025b3a:	46b1      	mov	r9, r6
 8025b3c:	e6a9      	b.n	8025892 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8025b3e:	26ff      	movs	r6, #255	; 0xff
 8025b40:	46b1      	mov	r9, r6
 8025b42:	e7f7      	b.n	8025b34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8025b44:	7028      	strb	r0, [r5, #0]
 8025b46:	7069      	strb	r1, [r5, #1]
 8025b48:	e793      	b.n	8025a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8025b4a:	1c4f      	adds	r7, r1, #1
 8025b4c:	d192      	bne.n	8025a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025b4e:	9e07      	ldr	r6, [sp, #28]
 8025b50:	428e      	cmp	r6, r1
 8025b52:	dd8f      	ble.n	8025a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025b54:	1c5e      	adds	r6, r3, #1
 8025b56:	db8d      	blt.n	8025a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025b58:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025b5a:	429e      	cmp	r6, r3
 8025b5c:	dd8a      	ble.n	8025a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025b5e:	9600      	str	r6, [sp, #0]
 8025b60:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8025b64:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8025b68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025b6a:	4629      	mov	r1, r5
 8025b6c:	9b07      	ldr	r3, [sp, #28]
 8025b6e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025b70:	f7ff fc8e 	bl	8025490 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025b74:	e77e      	b.n	8025a74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025b76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025b78:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025b7c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025b7e:	9e07      	ldr	r6, [sp, #28]
 8025b80:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025b84:	1409      	asrs	r1, r1, #16
 8025b86:	1423      	asrs	r3, r4, #16
 8025b88:	fb06 1303 	mla	r3, r6, r3, r1
 8025b8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025b8e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8025b92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8025b96:	0e1f      	lsrs	r7, r3, #24
 8025b98:	2a00      	cmp	r2, #0
 8025b9a:	f000 8113 	beq.w	8025dc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8025b9e:	6871      	ldr	r1, [r6, #4]
 8025ba0:	910d      	str	r1, [sp, #52]	; 0x34
 8025ba2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8025ba6:	2800      	cmp	r0, #0
 8025ba8:	f000 8115 	beq.w	8025dd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8025bac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025bae:	eb06 0c01 	add.w	ip, r6, r1
 8025bb2:	5876      	ldr	r6, [r6, r1]
 8025bb4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8025bb8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8025bbc:	9609      	str	r6, [sp, #36]	; 0x24
 8025bbe:	0e0e      	lsrs	r6, r1, #24
 8025bc0:	910f      	str	r1, [sp, #60]	; 0x3c
 8025bc2:	b292      	uxth	r2, r2
 8025bc4:	b280      	uxth	r0, r0
 8025bc6:	fb02 fa00 	mul.w	sl, r2, r0
 8025bca:	0112      	lsls	r2, r2, #4
 8025bcc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025bd0:	eba2 080a 	sub.w	r8, r2, sl
 8025bd4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025bd8:	b280      	uxth	r0, r0
 8025bda:	fa1f f888 	uxth.w	r8, r8
 8025bde:	1a09      	subs	r1, r1, r0
 8025be0:	fb08 f20e 	mul.w	r2, r8, lr
 8025be4:	b289      	uxth	r1, r1
 8025be6:	fb01 2207 	mla	r2, r1, r7, r2
 8025bea:	fb00 2209 	mla	r2, r0, r9, r2
 8025bee:	fb0a 2206 	mla	r2, sl, r6, r2
 8025bf2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025bf6:	2a00      	cmp	r2, #0
 8025bf8:	f000 80da 	beq.w	8025db0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8025bfc:	2fff      	cmp	r7, #255	; 0xff
 8025bfe:	d01a      	beq.n	8025c36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8025c00:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025c04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c08:	fb07 fc0c 	mul.w	ip, r7, ip
 8025c0c:	435f      	muls	r7, r3
 8025c0e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025c12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025c16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025c1a:	4463      	add	r3, ip
 8025c1c:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8025c20:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8025c24:	0a1b      	lsrs	r3, r3, #8
 8025c26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025c2e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025c32:	ea43 030c 	orr.w	r3, r3, ip
 8025c36:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025c3a:	d021      	beq.n	8025c80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8025c3c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025c3e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025c42:	fb0e f707 	mul.w	r7, lr, r7
 8025c46:	9713      	str	r7, [sp, #76]	; 0x4c
 8025c48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025c4a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025c4e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8025c50:	fb0e fe0c 	mul.w	lr, lr, ip
 8025c54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025c58:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025c5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c60:	44bc      	add	ip, r7
 8025c62:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8025c66:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025c6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025c76:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025c7a:	ea4c 070e 	orr.w	r7, ip, lr
 8025c7e:	970d      	str	r7, [sp, #52]	; 0x34
 8025c80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025c84:	d01e      	beq.n	8025cc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8025c86:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025c88:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025c8c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025c90:	fb09 fe0e 	mul.w	lr, r9, lr
 8025c94:	fb09 f907 	mul.w	r9, r9, r7
 8025c98:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025c9c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025ca0:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8025ca4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ca8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025cac:	44f4      	add	ip, lr
 8025cae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025cb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025cb6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025cba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cbe:	ea4c 0709 	orr.w	r7, ip, r9
 8025cc2:	9709      	str	r7, [sp, #36]	; 0x24
 8025cc4:	2eff      	cmp	r6, #255	; 0xff
 8025cc6:	d01c      	beq.n	8025d02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8025cc8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025cca:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025cce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025cd2:	fb06 fe0e 	mul.w	lr, r6, lr
 8025cd6:	437e      	muls	r6, r7
 8025cd8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025cdc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025ce0:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025ce4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ce8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025cec:	44f4      	add	ip, lr
 8025cee:	0a36      	lsrs	r6, r6, #8
 8025cf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025cf4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025cf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cfc:	ea4c 0606 	orr.w	r6, ip, r6
 8025d00:	960f      	str	r6, [sp, #60]	; 0x3c
 8025d02:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025d04:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025d08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025d0c:	2aff      	cmp	r2, #255	; 0xff
 8025d0e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025d12:	fb08 f606 	mul.w	r6, r8, r6
 8025d16:	fb01 6607 	mla	r6, r1, r7, r6
 8025d1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025d1c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025d20:	fb00 6607 	mla	r6, r0, r7, r6
 8025d24:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025d26:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025d2a:	fb0a 6607 	mla	r6, sl, r7, r6
 8025d2e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025d30:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025d34:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8025d38:	fb08 f807 	mul.w	r8, r8, r7
 8025d3c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025d40:	fb01 8303 	mla	r3, r1, r3, r8
 8025d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025d46:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025d4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025d4c:	fb00 330c 	mla	r3, r0, ip, r3
 8025d50:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8025d54:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8025d58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d5c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025d60:	ea46 060e 	orr.w	r6, r6, lr
 8025d64:	b2f0      	uxtb	r0, r6
 8025d66:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8025d6a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8025d6e:	d038      	beq.n	8025de2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8025d70:	43d2      	mvns	r2, r2
 8025d72:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8025d76:	b2d2      	uxtb	r2, r2
 8025d78:	4357      	muls	r7, r2
 8025d7a:	1c7b      	adds	r3, r7, #1
 8025d7c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025d80:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025d84:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8025d88:	4350      	muls	r0, r2
 8025d8a:	f805 3c03 	strb.w	r3, [r5, #-3]
 8025d8e:	1c43      	adds	r3, r0, #1
 8025d90:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025d94:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025d98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025d9c:	4353      	muls	r3, r2
 8025d9e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025da2:	1c5a      	adds	r2, r3, #1
 8025da4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025da8:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025dac:	f805 6c01 	strb.w	r6, [r5, #-1]
 8025db0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025db2:	3503      	adds	r5, #3
 8025db4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025db6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025dba:	4413      	add	r3, r2
 8025dbc:	9329      	str	r3, [sp, #164]	; 0xa4
 8025dbe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025dc0:	441c      	add	r4, r3
 8025dc2:	e510      	b.n	80257e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8025dc4:	b150      	cbz	r0, 8025ddc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8025dc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025dc8:	5871      	ldr	r1, [r6, r1]
 8025dca:	26ff      	movs	r6, #255	; 0xff
 8025dcc:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8025dd0:	9109      	str	r1, [sp, #36]	; 0x24
 8025dd2:	46b6      	mov	lr, r6
 8025dd4:	e6f5      	b.n	8025bc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025dd6:	26ff      	movs	r6, #255	; 0xff
 8025dd8:	46b1      	mov	r9, r6
 8025dda:	e6f2      	b.n	8025bc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025ddc:	26ff      	movs	r6, #255	; 0xff
 8025dde:	46b1      	mov	r9, r6
 8025de0:	e7f7      	b.n	8025dd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8025de2:	f805 0c03 	strb.w	r0, [r5, #-3]
 8025de6:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025dea:	e7df      	b.n	8025dac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8025dec:	b017      	add	sp, #92	; 0x5c
 8025dee:	ecbd 8b08 	vpop	{d8-d11}
 8025df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025df8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8025df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025dfc:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8025e00:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025e04:	2800      	cmp	r0, #0
 8025e06:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8025e0a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8025e0e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8025e12:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8025e16:	db6b      	blt.n	8025ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025e18:	4580      	cmp	r8, r0
 8025e1a:	dd69      	ble.n	8025ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025e1c:	f1bc 0f00 	cmp.w	ip, #0
 8025e20:	db66      	blt.n	8025ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025e22:	45e1      	cmp	r9, ip
 8025e24:	dd64      	ble.n	8025ef0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025e26:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025e2a:	f01e 0f01 	tst.w	lr, #1
 8025e2e:	5d16      	ldrb	r6, [r2, r4]
 8025e30:	bf0c      	ite	eq
 8025e32:	f006 060f 	andeq.w	r6, r6, #15
 8025e36:	1136      	asrne	r6, r6, #4
 8025e38:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025e3c:	b2f6      	uxtb	r6, r6
 8025e3e:	f110 0a01 	adds.w	sl, r0, #1
 8025e42:	d457      	bmi.n	8025ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025e44:	45d0      	cmp	r8, sl
 8025e46:	dd55      	ble.n	8025ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025e48:	f1bc 0f00 	cmp.w	ip, #0
 8025e4c:	db52      	blt.n	8025ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025e4e:	45e1      	cmp	r9, ip
 8025e50:	dd50      	ble.n	8025ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025e52:	2f00      	cmp	r7, #0
 8025e54:	f000 80ac 	beq.w	8025fb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8025e58:	f10e 0b01 	add.w	fp, lr, #1
 8025e5c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025e60:	f01b 0f01 	tst.w	fp, #1
 8025e64:	5d14      	ldrb	r4, [r2, r4]
 8025e66:	bf0c      	ite	eq
 8025e68:	f004 040f 	andeq.w	r4, r4, #15
 8025e6c:	1124      	asrne	r4, r4, #4
 8025e6e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025e72:	b2e4      	uxtb	r4, r4
 8025e74:	2d00      	cmp	r5, #0
 8025e76:	f000 8096 	beq.w	8025fa6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8025e7a:	2800      	cmp	r0, #0
 8025e7c:	f10c 0c01 	add.w	ip, ip, #1
 8025e80:	db3c      	blt.n	8025efc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025e82:	4580      	cmp	r8, r0
 8025e84:	dd3a      	ble.n	8025efc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025e86:	f1bc 0f00 	cmp.w	ip, #0
 8025e8a:	db37      	blt.n	8025efc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025e8c:	45e1      	cmp	r9, ip
 8025e8e:	dd35      	ble.n	8025efc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025e90:	eb03 0b0e 	add.w	fp, r3, lr
 8025e94:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8025e98:	f01b 0f01 	tst.w	fp, #1
 8025e9c:	5c10      	ldrb	r0, [r2, r0]
 8025e9e:	bf0c      	ite	eq
 8025ea0:	f000 000f 	andeq.w	r0, r0, #15
 8025ea4:	1100      	asrne	r0, r0, #4
 8025ea6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025eaa:	b2c0      	uxtb	r0, r0
 8025eac:	f1ba 0f00 	cmp.w	sl, #0
 8025eb0:	db26      	blt.n	8025f00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025eb2:	45d0      	cmp	r8, sl
 8025eb4:	dd24      	ble.n	8025f00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025eb6:	f1bc 0f00 	cmp.w	ip, #0
 8025eba:	db21      	blt.n	8025f00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025ebc:	45e1      	cmp	r9, ip
 8025ebe:	dd1f      	ble.n	8025f00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025ec0:	b307      	cbz	r7, 8025f04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8025ec2:	3301      	adds	r3, #1
 8025ec4:	449e      	add	lr, r3
 8025ec6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025eca:	f01e 0f01 	tst.w	lr, #1
 8025ece:	5cd3      	ldrb	r3, [r2, r3]
 8025ed0:	bf0c      	ite	eq
 8025ed2:	f003 030f 	andeq.w	r3, r3, #15
 8025ed6:	111b      	asrne	r3, r3, #4
 8025ed8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025edc:	b2db      	uxtb	r3, r3
 8025ede:	2f0f      	cmp	r7, #15
 8025ee0:	d911      	bls.n	8025f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8025ee2:	4b35      	ldr	r3, [pc, #212]	; (8025fb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8025ee4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025ee8:	4a34      	ldr	r2, [pc, #208]	; (8025fbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8025eea:	4835      	ldr	r0, [pc, #212]	; (8025fc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8025eec:	f002 fb5a 	bl	80285a4 <__assert_func>
 8025ef0:	2600      	movs	r6, #0
 8025ef2:	e7a4      	b.n	8025e3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8025ef4:	2400      	movs	r4, #0
 8025ef6:	e7bd      	b.n	8025e74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8025ef8:	463c      	mov	r4, r7
 8025efa:	e7be      	b.n	8025e7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8025efc:	2000      	movs	r0, #0
 8025efe:	e7d5      	b.n	8025eac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8025f00:	2300      	movs	r3, #0
 8025f02:	e7ec      	b.n	8025ede <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8025f04:	463b      	mov	r3, r7
 8025f06:	2d0f      	cmp	r5, #15
 8025f08:	d8eb      	bhi.n	8025ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025f0a:	b2bf      	uxth	r7, r7
 8025f0c:	b2ad      	uxth	r5, r5
 8025f0e:	fb07 f205 	mul.w	r2, r7, r5
 8025f12:	013f      	lsls	r7, r7, #4
 8025f14:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025f18:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8025f1c:	1abf      	subs	r7, r7, r2
 8025f1e:	b2ad      	uxth	r5, r5
 8025f20:	b2bf      	uxth	r7, r7
 8025f22:	ebac 0c05 	sub.w	ip, ip, r5
 8025f26:	437c      	muls	r4, r7
 8025f28:	fa1f fc8c 	uxth.w	ip, ip
 8025f2c:	fb06 440c 	mla	r4, r6, ip, r4
 8025f30:	fb05 4400 	mla	r4, r5, r0, r4
 8025f34:	fb02 4203 	mla	r2, r2, r3, r4
 8025f38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025f3c:	b38a      	cbz	r2, 8025fa2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8025f3e:	4b21      	ldr	r3, [pc, #132]	; (8025fc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8025f40:	681c      	ldr	r4, [r3, #0]
 8025f42:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8025f46:	b2e5      	uxtb	r5, r4
 8025f48:	4353      	muls	r3, r2
 8025f4a:	1c5a      	adds	r2, r3, #1
 8025f4c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025f50:	1212      	asrs	r2, r2, #8
 8025f52:	b290      	uxth	r0, r2
 8025f54:	43d2      	mvns	r2, r2
 8025f56:	fb15 f500 	smulbb	r5, r5, r0
 8025f5a:	b2d3      	uxtb	r3, r2
 8025f5c:	780a      	ldrb	r2, [r1, #0]
 8025f5e:	fb02 5203 	mla	r2, r2, r3, r5
 8025f62:	b292      	uxth	r2, r2
 8025f64:	1c55      	adds	r5, r2, #1
 8025f66:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025f6a:	784d      	ldrb	r5, [r1, #1]
 8025f6c:	fb15 f503 	smulbb	r5, r5, r3
 8025f70:	1212      	asrs	r2, r2, #8
 8025f72:	700a      	strb	r2, [r1, #0]
 8025f74:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8025f78:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025f7c:	fb02 5200 	mla	r2, r2, r0, r5
 8025f80:	b292      	uxth	r2, r2
 8025f82:	1c55      	adds	r5, r2, #1
 8025f84:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025f88:	1212      	asrs	r2, r2, #8
 8025f8a:	704a      	strb	r2, [r1, #1]
 8025f8c:	788a      	ldrb	r2, [r1, #2]
 8025f8e:	fb12 f303 	smulbb	r3, r2, r3
 8025f92:	fb04 3300 	mla	r3, r4, r0, r3
 8025f96:	b29b      	uxth	r3, r3
 8025f98:	1c5a      	adds	r2, r3, #1
 8025f9a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025f9e:	121b      	asrs	r3, r3, #8
 8025fa0:	708b      	strb	r3, [r1, #2]
 8025fa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fa6:	2f0f      	cmp	r7, #15
 8025fa8:	d89b      	bhi.n	8025ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025faa:	462b      	mov	r3, r5
 8025fac:	4628      	mov	r0, r5
 8025fae:	e7ac      	b.n	8025f0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8025fb0:	2d00      	cmp	r5, #0
 8025fb2:	d1a1      	bne.n	8025ef8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8025fb4:	462c      	mov	r4, r5
 8025fb6:	e7f8      	b.n	8025faa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8025fb8:	0802d8a7 	.word	0x0802d8a7
 8025fbc:	0802dd9e 	.word	0x0802dd9e
 8025fc0:	0802d970 	.word	0x0802d970
 8025fc4:	2000bf18 	.word	0x2000bf18

08025fc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fcc:	ed2d 8b08 	vpush	{d8-d11}
 8025fd0:	b097      	sub	sp, #92	; 0x5c
 8025fd2:	eeb0 aa40 	vmov.f32	s20, s0
 8025fd6:	eef0 9a60 	vmov.f32	s19, s1
 8025fda:	9308      	str	r3, [sp, #32]
 8025fdc:	eeb0 9a41 	vmov.f32	s18, s2
 8025fe0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025fe4:	eeb0 8a62 	vmov.f32	s16, s5
 8025fe8:	9214      	str	r2, [sp, #80]	; 0x50
 8025fea:	eef0 8a43 	vmov.f32	s17, s6
 8025fee:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025ff0:	eef0 ba44 	vmov.f32	s23, s8
 8025ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8025ff6:	eeb0 ba64 	vmov.f32	s22, s9
 8025ffa:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8025ffe:	eef0 aa45 	vmov.f32	s21, s10
 8026002:	9015      	str	r0, [sp, #84]	; 0x54
 8026004:	910c      	str	r1, [sp, #48]	; 0x30
 8026006:	930e      	str	r3, [sp, #56]	; 0x38
 8026008:	6850      	ldr	r0, [r2, #4]
 802600a:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 802600e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026012:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8026016:	fb00 1803 	mla	r8, r0, r3, r1
 802601a:	6813      	ldr	r3, [r2, #0]
 802601c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026020:	4498      	add	r8, r3
 8026022:	f10b 0301 	add.w	r3, fp, #1
 8026026:	f023 0301 	bic.w	r3, r3, #1
 802602a:	930f      	str	r3, [sp, #60]	; 0x3c
 802602c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802602e:	681f      	ldr	r7, [r3, #0]
 8026030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026032:	2b00      	cmp	r3, #0
 8026034:	dc03      	bgt.n	802603e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8026036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026038:	2b00      	cmp	r3, #0
 802603a:	f340 8238 	ble.w	80264ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802603e:	9b08      	ldr	r3, [sp, #32]
 8026040:	2b00      	cmp	r3, #0
 8026042:	f340 810c 	ble.w	802625e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8026046:	142a      	asrs	r2, r5, #16
 8026048:	ea4f 4326 	mov.w	r3, r6, asr #16
 802604c:	d42c      	bmi.n	80260a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802604e:	1c51      	adds	r1, r2, #1
 8026050:	458b      	cmp	fp, r1
 8026052:	dd2c      	ble.n	80260ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8026054:	2b00      	cmp	r3, #0
 8026056:	db2a      	blt.n	80260ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8026058:	1c59      	adds	r1, r3, #1
 802605a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802605c:	4288      	cmp	r0, r1
 802605e:	dd26      	ble.n	80260ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8026060:	9b08      	ldr	r3, [sp, #32]
 8026062:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026064:	3b01      	subs	r3, #1
 8026066:	fb02 5203 	mla	r2, r2, r3, r5
 802606a:	1412      	asrs	r2, r2, #16
 802606c:	d429      	bmi.n	80260c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802606e:	3201      	adds	r2, #1
 8026070:	4593      	cmp	fp, r2
 8026072:	dd26      	ble.n	80260c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8026074:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026076:	fb02 6303 	mla	r3, r2, r3, r6
 802607a:	141b      	asrs	r3, r3, #16
 802607c:	d421      	bmi.n	80260c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802607e:	3301      	adds	r3, #1
 8026080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026082:	429a      	cmp	r2, r3
 8026084:	dd1d      	ble.n	80260c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8026086:	f108 0e03 	add.w	lr, r8, #3
 802608a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802608e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8026092:	f1b9 0f00 	cmp.w	r9, #0
 8026096:	f300 814f 	bgt.w	8026338 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 802609a:	9b08      	ldr	r3, [sp, #32]
 802609c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80260a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80260a4:	44a0      	add	r8, r4
 80260a6:	e0dc      	b.n	8026262 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80260a8:	1c51      	adds	r1, r2, #1
 80260aa:	f040 80ce 	bne.w	802624a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80260ae:	4593      	cmp	fp, r2
 80260b0:	f340 80cb 	ble.w	802624a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80260b4:	1c5a      	adds	r2, r3, #1
 80260b6:	f2c0 80c8 	blt.w	802624a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80260ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80260bc:	4293      	cmp	r3, r2
 80260be:	f280 80c4 	bge.w	802624a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80260c2:	9b08      	ldr	r3, [sp, #32]
 80260c4:	46c1      	mov	r9, r8
 80260c6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80260ca:	930d      	str	r3, [sp, #52]	; 0x34
 80260cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80260ce:	2b00      	cmp	r3, #0
 80260d0:	dde3      	ble.n	802609a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80260d2:	1428      	asrs	r0, r5, #16
 80260d4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80260d8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80260dc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80260e0:	f100 8111 	bmi.w	8026306 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80260e4:	f100 0c01 	add.w	ip, r0, #1
 80260e8:	45e3      	cmp	fp, ip
 80260ea:	f340 810e 	ble.w	802630a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80260ee:	2b00      	cmp	r3, #0
 80260f0:	f2c0 810b 	blt.w	802630a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80260f4:	f103 0c01 	add.w	ip, r3, #1
 80260f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80260fa:	4564      	cmp	r4, ip
 80260fc:	f340 8105 	ble.w	802630a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8026100:	fb03 030a 	mla	r3, r3, sl, r0
 8026104:	0858      	lsrs	r0, r3, #1
 8026106:	07dc      	lsls	r4, r3, #31
 8026108:	5c38      	ldrb	r0, [r7, r0]
 802610a:	bf54      	ite	pl
 802610c:	f000 000f 	andpl.w	r0, r0, #15
 8026110:	1100      	asrmi	r0, r0, #4
 8026112:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026116:	b2c0      	uxtb	r0, r0
 8026118:	2a00      	cmp	r2, #0
 802611a:	f000 80e1 	beq.w	80262e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 802611e:	f103 0e01 	add.w	lr, r3, #1
 8026122:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8026126:	f01e 0f01 	tst.w	lr, #1
 802612a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802612e:	bf0c      	ite	eq
 8026130:	f00c 0c0f 	andeq.w	ip, ip, #15
 8026134:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8026138:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802613c:	fa5f f48c 	uxtb.w	r4, ip
 8026140:	9410      	str	r4, [sp, #64]	; 0x40
 8026142:	b1f9      	cbz	r1, 8026184 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8026144:	4453      	add	r3, sl
 8026146:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802614a:	07dc      	lsls	r4, r3, #31
 802614c:	f103 0301 	add.w	r3, r3, #1
 8026150:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026154:	bf54      	ite	pl
 8026156:	f00c 0c0f 	andpl.w	ip, ip, #15
 802615a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802615e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026162:	fa5f f48c 	uxtb.w	r4, ip
 8026166:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802616a:	940a      	str	r4, [sp, #40]	; 0x28
 802616c:	07dc      	lsls	r4, r3, #31
 802616e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026172:	bf54      	ite	pl
 8026174:	f00c 030f 	andpl.w	r3, ip, #15
 8026178:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802617c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026180:	b2db      	uxtb	r3, r3
 8026182:	9311      	str	r3, [sp, #68]	; 0x44
 8026184:	b292      	uxth	r2, r2
 8026186:	b289      	uxth	r1, r1
 8026188:	0113      	lsls	r3, r2, #4
 802618a:	fb02 fc01 	mul.w	ip, r2, r1
 802618e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026190:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026194:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8026198:	eba3 030c 	sub.w	r3, r3, ip
 802619c:	b289      	uxth	r1, r1
 802619e:	b29b      	uxth	r3, r3
 80261a0:	ebae 0e01 	sub.w	lr, lr, r1
 80261a4:	4353      	muls	r3, r2
 80261a6:	fa1f fe8e 	uxth.w	lr, lr
 80261aa:	fb00 320e 	mla	r2, r0, lr, r3
 80261ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80261b0:	fb01 2203 	mla	r2, r1, r3, r2
 80261b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80261b6:	fb0c 2203 	mla	r2, ip, r3, r2
 80261ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80261be:	2a00      	cmp	r2, #0
 80261c0:	d039      	beq.n	8026236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80261c2:	4bbd      	ldr	r3, [pc, #756]	; (80264b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80261c4:	6819      	ldr	r1, [r3, #0]
 80261c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80261c8:	fa5f fc81 	uxtb.w	ip, r1
 80261cc:	435a      	muls	r2, r3
 80261ce:	1c53      	adds	r3, r2, #1
 80261d0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80261d4:	1212      	asrs	r2, r2, #8
 80261d6:	b290      	uxth	r0, r2
 80261d8:	43d2      	mvns	r2, r2
 80261da:	fb1c fc00 	smulbb	ip, ip, r0
 80261de:	b2d3      	uxtb	r3, r2
 80261e0:	f899 2000 	ldrb.w	r2, [r9]
 80261e4:	fb02 c203 	mla	r2, r2, r3, ip
 80261e8:	b292      	uxth	r2, r2
 80261ea:	f102 0c01 	add.w	ip, r2, #1
 80261ee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80261f2:	f899 c001 	ldrb.w	ip, [r9, #1]
 80261f6:	fb1c fc03 	smulbb	ip, ip, r3
 80261fa:	1212      	asrs	r2, r2, #8
 80261fc:	f889 2000 	strb.w	r2, [r9]
 8026200:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8026204:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8026208:	fb02 c200 	mla	r2, r2, r0, ip
 802620c:	b292      	uxth	r2, r2
 802620e:	f102 0c01 	add.w	ip, r2, #1
 8026212:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026216:	1212      	asrs	r2, r2, #8
 8026218:	f889 2001 	strb.w	r2, [r9, #1]
 802621c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026220:	fb12 f303 	smulbb	r3, r2, r3
 8026224:	fb01 3300 	mla	r3, r1, r0, r3
 8026228:	b29b      	uxth	r3, r3
 802622a:	1c5a      	adds	r2, r3, #1
 802622c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026230:	121b      	asrs	r3, r3, #8
 8026232:	f889 3002 	strb.w	r3, [r9, #2]
 8026236:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026238:	f109 0903 	add.w	r9, r9, #3
 802623c:	441d      	add	r5, r3
 802623e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026240:	441e      	add	r6, r3
 8026242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026244:	3b01      	subs	r3, #1
 8026246:	930d      	str	r3, [sp, #52]	; 0x34
 8026248:	e740      	b.n	80260cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802624a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802624c:	f108 0803 	add.w	r8, r8, #3
 8026250:	441d      	add	r5, r3
 8026252:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026254:	441e      	add	r6, r3
 8026256:	9b08      	ldr	r3, [sp, #32]
 8026258:	3b01      	subs	r3, #1
 802625a:	9308      	str	r3, [sp, #32]
 802625c:	e6ef      	b.n	802603e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802625e:	f47f aeff 	bne.w	8026060 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8026262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026264:	2b00      	cmp	r3, #0
 8026266:	f340 8122 	ble.w	80264ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802626a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802626e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026270:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026274:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026278:	eef0 6a48 	vmov.f32	s13, s16
 802627c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026280:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026288:	ee16 5a90 	vmov	r5, s13
 802628c:	eef0 6a68 	vmov.f32	s13, s17
 8026290:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026294:	ee16 6a90 	vmov	r6, s13
 8026298:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802629c:	ee69 7a27 	vmul.f32	s15, s18, s15
 80262a0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80262a4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80262a8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80262ac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80262b0:	ee18 2a10 	vmov	r2, s16
 80262b4:	eeb0 8a47 	vmov.f32	s16, s14
 80262b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80262bc:	ee18 2a90 	vmov	r2, s17
 80262c0:	932b      	str	r3, [sp, #172]	; 0xac
 80262c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262c4:	eef0 8a67 	vmov.f32	s17, s15
 80262c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80262cc:	932c      	str	r3, [sp, #176]	; 0xb0
 80262ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80262d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80262d2:	3b01      	subs	r3, #1
 80262d4:	930c      	str	r3, [sp, #48]	; 0x30
 80262d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262d8:	bf08      	it	eq
 80262da:	4613      	moveq	r3, r2
 80262dc:	9308      	str	r3, [sp, #32]
 80262de:	e6a7      	b.n	8026030 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80262e0:	2900      	cmp	r1, #0
 80262e2:	f43f af4f 	beq.w	8026184 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80262e6:	4453      	add	r3, sl
 80262e8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80262ec:	07db      	lsls	r3, r3, #31
 80262ee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80262f2:	bf54      	ite	pl
 80262f4:	f00c 030f 	andpl.w	r3, ip, #15
 80262f8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80262fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026300:	b2db      	uxtb	r3, r3
 8026302:	930a      	str	r3, [sp, #40]	; 0x28
 8026304:	e73e      	b.n	8026184 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8026306:	1c44      	adds	r4, r0, #1
 8026308:	d195      	bne.n	8026236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802630a:	4583      	cmp	fp, r0
 802630c:	dd93      	ble.n	8026236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802630e:	1c5c      	adds	r4, r3, #1
 8026310:	db91      	blt.n	8026236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026312:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026314:	429c      	cmp	r4, r3
 8026316:	dd8e      	ble.n	8026236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026318:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802631a:	9002      	str	r0, [sp, #8]
 802631c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802631e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8026322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026324:	463a      	mov	r2, r7
 8026326:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802632a:	e9cd b300 	strd	fp, r3, [sp]
 802632e:	4649      	mov	r1, r9
 8026330:	4653      	mov	r3, sl
 8026332:	f7ff fd61 	bl	8025df8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8026336:	e77e      	b.n	8026236 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026338:	142a      	asrs	r2, r5, #16
 802633a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802633e:	1433      	asrs	r3, r6, #16
 8026340:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026344:	fb0a 2303 	mla	r3, sl, r3, r2
 8026348:	085a      	lsrs	r2, r3, #1
 802634a:	07dc      	lsls	r4, r3, #31
 802634c:	5cba      	ldrb	r2, [r7, r2]
 802634e:	bf54      	ite	pl
 8026350:	f002 020f 	andpl.w	r2, r2, #15
 8026354:	1112      	asrmi	r2, r2, #4
 8026356:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802635a:	b2d2      	uxtb	r2, r2
 802635c:	2900      	cmp	r1, #0
 802635e:	f000 8093 	beq.w	8026488 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8026362:	1c5c      	adds	r4, r3, #1
 8026364:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8026368:	07e4      	lsls	r4, r4, #31
 802636a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802636e:	bf54      	ite	pl
 8026370:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026374:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026378:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802637c:	fa5f f48c 	uxtb.w	r4, ip
 8026380:	9412      	str	r4, [sp, #72]	; 0x48
 8026382:	b300      	cbz	r0, 80263c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8026384:	4453      	add	r3, sl
 8026386:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802638a:	07dc      	lsls	r4, r3, #31
 802638c:	f103 0301 	add.w	r3, r3, #1
 8026390:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026394:	bf54      	ite	pl
 8026396:	f00c 0c0f 	andpl.w	ip, ip, #15
 802639a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802639e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80263a2:	fa5f f48c 	uxtb.w	r4, ip
 80263a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80263aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80263ac:	07dc      	lsls	r4, r3, #31
 80263ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80263b2:	bf54      	ite	pl
 80263b4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80263b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80263bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80263c0:	fa5f f38c 	uxtb.w	r3, ip
 80263c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80263c6:	b289      	uxth	r1, r1
 80263c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80263ca:	b280      	uxth	r0, r0
 80263cc:	fb01 f300 	mul.w	r3, r1, r0
 80263d0:	0109      	lsls	r1, r1, #4
 80263d2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80263d6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80263da:	1ac9      	subs	r1, r1, r3
 80263dc:	b280      	uxth	r0, r0
 80263de:	b289      	uxth	r1, r1
 80263e0:	ebac 0c00 	sub.w	ip, ip, r0
 80263e4:	4361      	muls	r1, r4
 80263e6:	fa1f fc8c 	uxth.w	ip, ip
 80263ea:	fb02 120c 	mla	r2, r2, ip, r1
 80263ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80263f0:	fb00 2001 	mla	r0, r0, r1, r2
 80263f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80263f6:	fb03 0302 	mla	r3, r3, r2, r0
 80263fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80263fe:	2b00      	cmp	r3, #0
 8026400:	d039      	beq.n	8026476 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8026402:	4a2d      	ldr	r2, [pc, #180]	; (80264b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8026404:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8026408:	6810      	ldr	r0, [r2, #0]
 802640a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802640c:	fa5f fc80 	uxtb.w	ip, r0
 8026410:	4353      	muls	r3, r2
 8026412:	1c5a      	adds	r2, r3, #1
 8026414:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026418:	121b      	asrs	r3, r3, #8
 802641a:	b29a      	uxth	r2, r3
 802641c:	43db      	mvns	r3, r3
 802641e:	fb1c fc02 	smulbb	ip, ip, r2
 8026422:	b2db      	uxtb	r3, r3
 8026424:	fb01 c103 	mla	r1, r1, r3, ip
 8026428:	b289      	uxth	r1, r1
 802642a:	f101 0c01 	add.w	ip, r1, #1
 802642e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026432:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8026436:	fb1c fc03 	smulbb	ip, ip, r3
 802643a:	1209      	asrs	r1, r1, #8
 802643c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026440:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8026444:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8026448:	fb01 c102 	mla	r1, r1, r2, ip
 802644c:	b289      	uxth	r1, r1
 802644e:	f101 0c01 	add.w	ip, r1, #1
 8026452:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026456:	1209      	asrs	r1, r1, #8
 8026458:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802645c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8026460:	fb11 f303 	smulbb	r3, r1, r3
 8026464:	fb00 3002 	mla	r0, r0, r2, r3
 8026468:	b280      	uxth	r0, r0
 802646a:	1c42      	adds	r2, r0, #1
 802646c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026470:	1200      	asrs	r0, r0, #8
 8026472:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8026476:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026478:	f10e 0e03 	add.w	lr, lr, #3
 802647c:	f109 39ff 	add.w	r9, r9, #4294967295
 8026480:	441d      	add	r5, r3
 8026482:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026484:	441e      	add	r6, r3
 8026486:	e604      	b.n	8026092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8026488:	2800      	cmp	r0, #0
 802648a:	d09c      	beq.n	80263c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802648c:	4453      	add	r3, sl
 802648e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026492:	07db      	lsls	r3, r3, #31
 8026494:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026498:	bf54      	ite	pl
 802649a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802649e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80264a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80264a6:	fa5f f38c 	uxtb.w	r3, ip
 80264aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80264ac:	e78b      	b.n	80263c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80264ae:	b017      	add	sp, #92	; 0x5c
 80264b0:	ecbd 8b08 	vpop	{d8-d11}
 80264b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264b8:	2000bf18 	.word	0x2000bf18

080264bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80264bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264c0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80264c4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80264c8:	2800      	cmp	r0, #0
 80264ca:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80264ce:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80264d2:	fb0c 0e03 	mla	lr, ip, r3, r0
 80264d6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80264da:	db6b      	blt.n	80265b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80264dc:	4580      	cmp	r8, r0
 80264de:	dd69      	ble.n	80265b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80264e0:	f1bc 0f00 	cmp.w	ip, #0
 80264e4:	db66      	blt.n	80265b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80264e6:	45e1      	cmp	r9, ip
 80264e8:	dd64      	ble.n	80265b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80264ea:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80264ee:	f01e 0f01 	tst.w	lr, #1
 80264f2:	5d16      	ldrb	r6, [r2, r4]
 80264f4:	bf0c      	ite	eq
 80264f6:	f006 060f 	andeq.w	r6, r6, #15
 80264fa:	1136      	asrne	r6, r6, #4
 80264fc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026500:	b2f6      	uxtb	r6, r6
 8026502:	f110 0a01 	adds.w	sl, r0, #1
 8026506:	d457      	bmi.n	80265b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8026508:	45d0      	cmp	r8, sl
 802650a:	dd55      	ble.n	80265b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802650c:	f1bc 0f00 	cmp.w	ip, #0
 8026510:	db52      	blt.n	80265b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8026512:	45e1      	cmp	r9, ip
 8026514:	dd50      	ble.n	80265b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8026516:	2f00      	cmp	r7, #0
 8026518:	f000 80a5 	beq.w	8026666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 802651c:	f10e 0b01 	add.w	fp, lr, #1
 8026520:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8026524:	f01b 0f01 	tst.w	fp, #1
 8026528:	5d14      	ldrb	r4, [r2, r4]
 802652a:	bf0c      	ite	eq
 802652c:	f004 040f 	andeq.w	r4, r4, #15
 8026530:	1124      	asrne	r4, r4, #4
 8026532:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026536:	b2e4      	uxtb	r4, r4
 8026538:	2d00      	cmp	r5, #0
 802653a:	f000 808f 	beq.w	802665c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802653e:	2800      	cmp	r0, #0
 8026540:	f10c 0c01 	add.w	ip, ip, #1
 8026544:	db3c      	blt.n	80265c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8026546:	4580      	cmp	r8, r0
 8026548:	dd3a      	ble.n	80265c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802654a:	f1bc 0f00 	cmp.w	ip, #0
 802654e:	db37      	blt.n	80265c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8026550:	45e1      	cmp	r9, ip
 8026552:	dd35      	ble.n	80265c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8026554:	eb03 0b0e 	add.w	fp, r3, lr
 8026558:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802655c:	f01b 0f01 	tst.w	fp, #1
 8026560:	5c10      	ldrb	r0, [r2, r0]
 8026562:	bf0c      	ite	eq
 8026564:	f000 000f 	andeq.w	r0, r0, #15
 8026568:	1100      	asrne	r0, r0, #4
 802656a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802656e:	b2c0      	uxtb	r0, r0
 8026570:	f1ba 0f00 	cmp.w	sl, #0
 8026574:	db26      	blt.n	80265c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8026576:	45d0      	cmp	r8, sl
 8026578:	dd24      	ble.n	80265c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802657a:	f1bc 0f00 	cmp.w	ip, #0
 802657e:	db21      	blt.n	80265c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8026580:	45e1      	cmp	r9, ip
 8026582:	dd1f      	ble.n	80265c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8026584:	b307      	cbz	r7, 80265c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8026586:	3301      	adds	r3, #1
 8026588:	449e      	add	lr, r3
 802658a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802658e:	f01e 0f01 	tst.w	lr, #1
 8026592:	5cd3      	ldrb	r3, [r2, r3]
 8026594:	bf0c      	ite	eq
 8026596:	f003 030f 	andeq.w	r3, r3, #15
 802659a:	111b      	asrne	r3, r3, #4
 802659c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80265a0:	b2db      	uxtb	r3, r3
 80265a2:	2f0f      	cmp	r7, #15
 80265a4:	d911      	bls.n	80265ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80265a6:	4b32      	ldr	r3, [pc, #200]	; (8026670 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80265a8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80265ac:	4a31      	ldr	r2, [pc, #196]	; (8026674 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80265ae:	4832      	ldr	r0, [pc, #200]	; (8026678 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80265b0:	f001 fff8 	bl	80285a4 <__assert_func>
 80265b4:	2600      	movs	r6, #0
 80265b6:	e7a4      	b.n	8026502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80265b8:	2400      	movs	r4, #0
 80265ba:	e7bd      	b.n	8026538 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80265bc:	463c      	mov	r4, r7
 80265be:	e7be      	b.n	802653e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80265c0:	2000      	movs	r0, #0
 80265c2:	e7d5      	b.n	8026570 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80265c4:	2300      	movs	r3, #0
 80265c6:	e7ec      	b.n	80265a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80265c8:	463b      	mov	r3, r7
 80265ca:	2d0f      	cmp	r5, #15
 80265cc:	d8eb      	bhi.n	80265a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80265ce:	b2bf      	uxth	r7, r7
 80265d0:	b2ad      	uxth	r5, r5
 80265d2:	fb07 f205 	mul.w	r2, r7, r5
 80265d6:	013f      	lsls	r7, r7, #4
 80265d8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80265dc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80265e0:	1abf      	subs	r7, r7, r2
 80265e2:	b2ad      	uxth	r5, r5
 80265e4:	b2bf      	uxth	r7, r7
 80265e6:	ebac 0c05 	sub.w	ip, ip, r5
 80265ea:	437c      	muls	r4, r7
 80265ec:	fa1f fc8c 	uxth.w	ip, ip
 80265f0:	fb06 440c 	mla	r4, r6, ip, r4
 80265f4:	fb05 4400 	mla	r4, r5, r0, r4
 80265f8:	fb02 4303 	mla	r3, r2, r3, r4
 80265fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026600:	b353      	cbz	r3, 8026658 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8026602:	4a1e      	ldr	r2, [pc, #120]	; (802667c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8026604:	7808      	ldrb	r0, [r1, #0]
 8026606:	6814      	ldr	r4, [r2, #0]
 8026608:	b29a      	uxth	r2, r3
 802660a:	43db      	mvns	r3, r3
 802660c:	b2e5      	uxtb	r5, r4
 802660e:	b2db      	uxtb	r3, r3
 8026610:	fb15 f502 	smulbb	r5, r5, r2
 8026614:	fb00 5003 	mla	r0, r0, r3, r5
 8026618:	b280      	uxth	r0, r0
 802661a:	1c45      	adds	r5, r0, #1
 802661c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026620:	784d      	ldrb	r5, [r1, #1]
 8026622:	fb15 f503 	smulbb	r5, r5, r3
 8026626:	1200      	asrs	r0, r0, #8
 8026628:	7008      	strb	r0, [r1, #0]
 802662a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802662e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026632:	fb00 5002 	mla	r0, r0, r2, r5
 8026636:	b280      	uxth	r0, r0
 8026638:	1c45      	adds	r5, r0, #1
 802663a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802663e:	1200      	asrs	r0, r0, #8
 8026640:	7048      	strb	r0, [r1, #1]
 8026642:	7888      	ldrb	r0, [r1, #2]
 8026644:	fb10 f303 	smulbb	r3, r0, r3
 8026648:	fb04 3202 	mla	r2, r4, r2, r3
 802664c:	b292      	uxth	r2, r2
 802664e:	1c53      	adds	r3, r2, #1
 8026650:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026654:	1212      	asrs	r2, r2, #8
 8026656:	708a      	strb	r2, [r1, #2]
 8026658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802665c:	2f0f      	cmp	r7, #15
 802665e:	d8a2      	bhi.n	80265a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8026660:	462b      	mov	r3, r5
 8026662:	4628      	mov	r0, r5
 8026664:	e7b3      	b.n	80265ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8026666:	2d00      	cmp	r5, #0
 8026668:	d1a8      	bne.n	80265bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 802666a:	462c      	mov	r4, r5
 802666c:	e7f8      	b.n	8026660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802666e:	bf00      	nop
 8026670:	0802d8a7 	.word	0x0802d8a7
 8026674:	0802dd9e 	.word	0x0802dd9e
 8026678:	0802d970 	.word	0x0802d970
 802667c:	2000bf18 	.word	0x2000bf18

08026680 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026684:	ed2d 8b08 	vpush	{d8-d11}
 8026688:	b095      	sub	sp, #84	; 0x54
 802668a:	461c      	mov	r4, r3
 802668c:	eeb0 aa40 	vmov.f32	s20, s0
 8026690:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8026694:	eef0 9a60 	vmov.f32	s19, s1
 8026698:	920e      	str	r2, [sp, #56]	; 0x38
 802669a:	eeb0 9a41 	vmov.f32	s18, s2
 802669e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80266a0:	eeb0 8a62 	vmov.f32	s16, s5
 80266a4:	9307      	str	r3, [sp, #28]
 80266a6:	eef0 8a43 	vmov.f32	s17, s6
 80266aa:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80266ae:	eef0 ba44 	vmov.f32	s23, s8
 80266b2:	9013      	str	r0, [sp, #76]	; 0x4c
 80266b4:	eeb0 ba64 	vmov.f32	s22, s9
 80266b8:	9109      	str	r1, [sp, #36]	; 0x24
 80266ba:	eef0 aa45 	vmov.f32	s21, s10
 80266be:	9308      	str	r3, [sp, #32]
 80266c0:	6850      	ldr	r0, [r2, #4]
 80266c2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80266c6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80266ca:	fb00 1803 	mla	r8, r0, r3, r1
 80266ce:	6813      	ldr	r3, [r2, #0]
 80266d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80266d4:	4498      	add	r8, r3
 80266d6:	9b07      	ldr	r3, [sp, #28]
 80266d8:	3301      	adds	r3, #1
 80266da:	f023 0301 	bic.w	r3, r3, #1
 80266de:	930b      	str	r3, [sp, #44]	; 0x2c
 80266e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80266e2:	681f      	ldr	r7, [r3, #0]
 80266e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266e6:	2b00      	cmp	r3, #0
 80266e8:	dc03      	bgt.n	80266f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80266ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80266ec:	2b00      	cmp	r3, #0
 80266ee:	f340 8238 	ble.w	8026b62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80266f2:	2c00      	cmp	r4, #0
 80266f4:	f340 8109 	ble.w	802690a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 80266f8:	142a      	asrs	r2, r5, #16
 80266fa:	ea4f 4326 	mov.w	r3, r6, asr #16
 80266fe:	d42b      	bmi.n	8026758 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8026700:	1c51      	adds	r1, r2, #1
 8026702:	9807      	ldr	r0, [sp, #28]
 8026704:	4288      	cmp	r0, r1
 8026706:	dd2a      	ble.n	802675e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8026708:	2b00      	cmp	r3, #0
 802670a:	db28      	blt.n	802675e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802670c:	1c59      	adds	r1, r3, #1
 802670e:	9808      	ldr	r0, [sp, #32]
 8026710:	4288      	cmp	r0, r1
 8026712:	dd24      	ble.n	802675e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8026714:	1e63      	subs	r3, r4, #1
 8026716:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026718:	fb02 5203 	mla	r2, r2, r3, r5
 802671c:	1412      	asrs	r2, r2, #16
 802671e:	d429      	bmi.n	8026774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026720:	3201      	adds	r2, #1
 8026722:	9907      	ldr	r1, [sp, #28]
 8026724:	4291      	cmp	r1, r2
 8026726:	dd25      	ble.n	8026774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026728:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802672a:	fb02 6303 	mla	r3, r2, r3, r6
 802672e:	141b      	asrs	r3, r3, #16
 8026730:	d420      	bmi.n	8026774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026732:	3301      	adds	r3, #1
 8026734:	9a08      	ldr	r2, [sp, #32]
 8026736:	429a      	cmp	r2, r3
 8026738:	dd1c      	ble.n	8026774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802673a:	f108 0e03 	add.w	lr, r8, #3
 802673e:	46a1      	mov	r9, r4
 8026740:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8026744:	f1b9 0f00 	cmp.w	r9, #0
 8026748:	f300 8155 	bgt.w	80269f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 802674c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8026750:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026754:	44a0      	add	r8, r4
 8026756:	e0da      	b.n	802690e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8026758:	1c50      	adds	r0, r2, #1
 802675a:	f040 80ce 	bne.w	80268fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802675e:	9907      	ldr	r1, [sp, #28]
 8026760:	4291      	cmp	r1, r2
 8026762:	f340 80ca 	ble.w	80268fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026766:	1c59      	adds	r1, r3, #1
 8026768:	f2c0 80c7 	blt.w	80268fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802676c:	9a08      	ldr	r2, [sp, #32]
 802676e:	4293      	cmp	r3, r2
 8026770:	f280 80c3 	bge.w	80268fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026774:	46a3      	mov	fp, r4
 8026776:	46c1      	mov	r9, r8
 8026778:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802677c:	f1bb 0f00 	cmp.w	fp, #0
 8026780:	dde4      	ble.n	802674c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8026782:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026786:	1428      	asrs	r0, r5, #16
 8026788:	ea4f 4326 	mov.w	r3, r6, asr #16
 802678c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026790:	920a      	str	r2, [sp, #40]	; 0x28
 8026792:	f100 8116 	bmi.w	80269c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8026796:	f100 0c01 	add.w	ip, r0, #1
 802679a:	9a07      	ldr	r2, [sp, #28]
 802679c:	4562      	cmp	r2, ip
 802679e:	f340 8112 	ble.w	80269c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80267a2:	2b00      	cmp	r3, #0
 80267a4:	f2c0 810f 	blt.w	80269c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80267a8:	f103 0c01 	add.w	ip, r3, #1
 80267ac:	9a08      	ldr	r2, [sp, #32]
 80267ae:	4562      	cmp	r2, ip
 80267b0:	f340 8109 	ble.w	80269c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80267b4:	fb03 030a 	mla	r3, r3, sl, r0
 80267b8:	0858      	lsrs	r0, r3, #1
 80267ba:	07da      	lsls	r2, r3, #31
 80267bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80267be:	5c38      	ldrb	r0, [r7, r0]
 80267c0:	bf54      	ite	pl
 80267c2:	f000 000f 	andpl.w	r0, r0, #15
 80267c6:	1100      	asrmi	r0, r0, #4
 80267c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80267cc:	b2c0      	uxtb	r0, r0
 80267ce:	2a00      	cmp	r2, #0
 80267d0:	f000 80dd 	beq.w	802698e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80267d4:	f103 0e01 	add.w	lr, r3, #1
 80267d8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80267dc:	f01e 0f01 	tst.w	lr, #1
 80267e0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80267e4:	bf0c      	ite	eq
 80267e6:	f00c 0c0f 	andeq.w	ip, ip, #15
 80267ea:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80267ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80267f2:	fa5f fc8c 	uxtb.w	ip, ip
 80267f6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80267fa:	b301      	cbz	r1, 802683e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80267fc:	4453      	add	r3, sl
 80267fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026802:	07da      	lsls	r2, r3, #31
 8026804:	f103 0301 	add.w	r3, r3, #1
 8026808:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802680c:	bf54      	ite	pl
 802680e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026812:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026816:	07da      	lsls	r2, r3, #31
 8026818:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802681c:	fa5f fc8c 	uxtb.w	ip, ip
 8026820:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026824:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026828:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802682c:	bf54      	ite	pl
 802682e:	f00c 030f 	andpl.w	r3, ip, #15
 8026832:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8026836:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802683a:	b2db      	uxtb	r3, r3
 802683c:	9310      	str	r3, [sp, #64]	; 0x40
 802683e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8026842:	b289      	uxth	r1, r1
 8026844:	fb02 f301 	mul.w	r3, r2, r1
 8026848:	0112      	lsls	r2, r2, #4
 802684a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802684e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8026852:	1ad2      	subs	r2, r2, r3
 8026854:	fa1f fe81 	uxth.w	lr, r1
 8026858:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802685a:	b292      	uxth	r2, r2
 802685c:	ebac 0c0e 	sub.w	ip, ip, lr
 8026860:	434a      	muls	r2, r1
 8026862:	fa1f fc8c 	uxth.w	ip, ip
 8026866:	fb00 200c 	mla	r0, r0, ip, r2
 802686a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802686c:	fb0e 0002 	mla	r0, lr, r2, r0
 8026870:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026872:	fb03 0002 	mla	r0, r3, r2, r0
 8026876:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802687a:	b3a8      	cbz	r0, 80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802687c:	4bbb      	ldr	r3, [pc, #748]	; (8026b6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802687e:	28ff      	cmp	r0, #255	; 0xff
 8026880:	681b      	ldr	r3, [r3, #0]
 8026882:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8026886:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802688a:	b2db      	uxtb	r3, r3
 802688c:	f000 8092 	beq.w	80269b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8026890:	b282      	uxth	r2, r0
 8026892:	43c0      	mvns	r0, r0
 8026894:	f899 e000 	ldrb.w	lr, [r9]
 8026898:	fb13 f302 	smulbb	r3, r3, r2
 802689c:	b2c0      	uxtb	r0, r0
 802689e:	fb11 f102 	smulbb	r1, r1, r2
 80268a2:	fb0e 3300 	mla	r3, lr, r0, r3
 80268a6:	fb1c f202 	smulbb	r2, ip, r2
 80268aa:	b29b      	uxth	r3, r3
 80268ac:	f103 0e01 	add.w	lr, r3, #1
 80268b0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80268b4:	121b      	asrs	r3, r3, #8
 80268b6:	f889 3000 	strb.w	r3, [r9]
 80268ba:	f899 3001 	ldrb.w	r3, [r9, #1]
 80268be:	fb03 1100 	mla	r1, r3, r0, r1
 80268c2:	b289      	uxth	r1, r1
 80268c4:	1c4b      	adds	r3, r1, #1
 80268c6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80268ca:	f899 3002 	ldrb.w	r3, [r9, #2]
 80268ce:	fb03 2000 	mla	r0, r3, r0, r2
 80268d2:	1209      	asrs	r1, r1, #8
 80268d4:	b280      	uxth	r0, r0
 80268d6:	f889 1001 	strb.w	r1, [r9, #1]
 80268da:	f100 0c01 	add.w	ip, r0, #1
 80268de:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80268e2:	1200      	asrs	r0, r0, #8
 80268e4:	f889 0002 	strb.w	r0, [r9, #2]
 80268e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80268ea:	f109 0903 	add.w	r9, r9, #3
 80268ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80268f2:	441d      	add	r5, r3
 80268f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80268f6:	441e      	add	r6, r3
 80268f8:	e740      	b.n	802677c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80268fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80268fc:	3c01      	subs	r4, #1
 80268fe:	f108 0803 	add.w	r8, r8, #3
 8026902:	441d      	add	r5, r3
 8026904:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026906:	441e      	add	r6, r3
 8026908:	e6f3      	b.n	80266f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802690a:	f47f af03 	bne.w	8026714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802690e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026910:	2b00      	cmp	r3, #0
 8026912:	f340 8126 	ble.w	8026b62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8026916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802691a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802691c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026920:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026924:	eef0 6a48 	vmov.f32	s13, s16
 8026928:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802692c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026934:	ee16 5a90 	vmov	r5, s13
 8026938:	eef0 6a68 	vmov.f32	s13, s17
 802693c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026940:	ee16 6a90 	vmov	r6, s13
 8026944:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026948:	ee69 7a27 	vmul.f32	s15, s18, s15
 802694c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026950:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026954:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026958:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802695c:	ee18 2a10 	vmov	r2, s16
 8026960:	eeb0 8a47 	vmov.f32	s16, s14
 8026964:	fb92 f3f3 	sdiv	r3, r2, r3
 8026968:	ee18 2a90 	vmov	r2, s17
 802696c:	9329      	str	r3, [sp, #164]	; 0xa4
 802696e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026970:	eef0 8a67 	vmov.f32	s17, s15
 8026974:	fb92 f3f3 	sdiv	r3, r2, r3
 8026978:	932a      	str	r3, [sp, #168]	; 0xa8
 802697a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802697c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802697e:	3b01      	subs	r3, #1
 8026980:	9309      	str	r3, [sp, #36]	; 0x24
 8026982:	bf08      	it	eq
 8026984:	4614      	moveq	r4, r2
 8026986:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026988:	bf18      	it	ne
 802698a:	461c      	movne	r4, r3
 802698c:	e6aa      	b.n	80266e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802698e:	2900      	cmp	r1, #0
 8026990:	f43f af55 	beq.w	802683e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8026994:	4453      	add	r3, sl
 8026996:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802699a:	07db      	lsls	r3, r3, #31
 802699c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80269a0:	bf54      	ite	pl
 80269a2:	f00c 030f 	andpl.w	r3, ip, #15
 80269a6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80269aa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80269ae:	b2db      	uxtb	r3, r3
 80269b0:	930c      	str	r3, [sp, #48]	; 0x30
 80269b2:	e744      	b.n	802683e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80269b4:	f889 3000 	strb.w	r3, [r9]
 80269b8:	f889 1001 	strb.w	r1, [r9, #1]
 80269bc:	f889 c002 	strb.w	ip, [r9, #2]
 80269c0:	e792      	b.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80269c2:	1c42      	adds	r2, r0, #1
 80269c4:	d190      	bne.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80269c6:	9a07      	ldr	r2, [sp, #28]
 80269c8:	4282      	cmp	r2, r0
 80269ca:	dd8d      	ble.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80269cc:	1c5a      	adds	r2, r3, #1
 80269ce:	db8b      	blt.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80269d0:	9a08      	ldr	r2, [sp, #32]
 80269d2:	429a      	cmp	r2, r3
 80269d4:	dd88      	ble.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80269d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80269d8:	9105      	str	r1, [sp, #20]
 80269da:	4649      	mov	r1, r9
 80269dc:	9002      	str	r0, [sp, #8]
 80269de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80269e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80269e4:	9b08      	ldr	r3, [sp, #32]
 80269e6:	463a      	mov	r2, r7
 80269e8:	9301      	str	r3, [sp, #4]
 80269ea:	9b07      	ldr	r3, [sp, #28]
 80269ec:	9300      	str	r3, [sp, #0]
 80269ee:	4653      	mov	r3, sl
 80269f0:	f7ff fd64 	bl	80264bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80269f4:	e778      	b.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80269f6:	142a      	asrs	r2, r5, #16
 80269f8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80269fc:	1433      	asrs	r3, r6, #16
 80269fe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026a02:	fb0a 2303 	mla	r3, sl, r3, r2
 8026a06:	085a      	lsrs	r2, r3, #1
 8026a08:	07d9      	lsls	r1, r3, #31
 8026a0a:	5cba      	ldrb	r2, [r7, r2]
 8026a0c:	bf54      	ite	pl
 8026a0e:	f002 020f 	andpl.w	r2, r2, #15
 8026a12:	1112      	asrmi	r2, r2, #4
 8026a14:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026a18:	b2d2      	uxtb	r2, r2
 8026a1a:	2800      	cmp	r0, #0
 8026a1c:	f000 808a 	beq.w	8026b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8026a20:	f103 0b01 	add.w	fp, r3, #1
 8026a24:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8026a28:	f01b 0f01 	tst.w	fp, #1
 8026a2c:	5c79      	ldrb	r1, [r7, r1]
 8026a2e:	bf0c      	ite	eq
 8026a30:	f001 010f 	andeq.w	r1, r1, #15
 8026a34:	1109      	asrne	r1, r1, #4
 8026a36:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026a3a:	b2c9      	uxtb	r1, r1
 8026a3c:	9111      	str	r1, [sp, #68]	; 0x44
 8026a3e:	f1bc 0f00 	cmp.w	ip, #0
 8026a42:	d019      	beq.n	8026a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026a44:	4453      	add	r3, sl
 8026a46:	0859      	lsrs	r1, r3, #1
 8026a48:	f013 0f01 	tst.w	r3, #1
 8026a4c:	f103 0301 	add.w	r3, r3, #1
 8026a50:	5c79      	ldrb	r1, [r7, r1]
 8026a52:	bf0c      	ite	eq
 8026a54:	f001 010f 	andeq.w	r1, r1, #15
 8026a58:	1109      	asrne	r1, r1, #4
 8026a5a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026a5e:	b2c9      	uxtb	r1, r1
 8026a60:	910d      	str	r1, [sp, #52]	; 0x34
 8026a62:	0859      	lsrs	r1, r3, #1
 8026a64:	07db      	lsls	r3, r3, #31
 8026a66:	5c79      	ldrb	r1, [r7, r1]
 8026a68:	bf54      	ite	pl
 8026a6a:	f001 010f 	andpl.w	r1, r1, #15
 8026a6e:	1109      	asrmi	r1, r1, #4
 8026a70:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026a74:	b2c9      	uxtb	r1, r1
 8026a76:	9112      	str	r1, [sp, #72]	; 0x48
 8026a78:	b280      	uxth	r0, r0
 8026a7a:	fa1f fc8c 	uxth.w	ip, ip
 8026a7e:	fb00 f30c 	mul.w	r3, r0, ip
 8026a82:	0100      	lsls	r0, r0, #4
 8026a84:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8026a88:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8026a8c:	1ac0      	subs	r0, r0, r3
 8026a8e:	fa1f fc8c 	uxth.w	ip, ip
 8026a92:	b280      	uxth	r0, r0
 8026a94:	eba1 010c 	sub.w	r1, r1, ip
 8026a98:	fa1f fb81 	uxth.w	fp, r1
 8026a9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026a9e:	4348      	muls	r0, r1
 8026aa0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026aa2:	fb02 020b 	mla	r2, r2, fp, r0
 8026aa6:	fb0c 2c01 	mla	ip, ip, r1, r2
 8026aaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026aac:	fb03 c302 	mla	r3, r3, r2, ip
 8026ab0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026ab4:	b3ab      	cbz	r3, 8026b22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026ab6:	4a2d      	ldr	r2, [pc, #180]	; (8026b6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8026ab8:	2bff      	cmp	r3, #255	; 0xff
 8026aba:	6811      	ldr	r1, [r2, #0]
 8026abc:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8026ac0:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8026ac4:	b2c9      	uxtb	r1, r1
 8026ac6:	d045      	beq.n	8026b54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8026ac8:	b298      	uxth	r0, r3
 8026aca:	43db      	mvns	r3, r3
 8026acc:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8026ad0:	fb11 f100 	smulbb	r1, r1, r0
 8026ad4:	b2db      	uxtb	r3, r3
 8026ad6:	fb1c fc00 	smulbb	ip, ip, r0
 8026ada:	fb02 1103 	mla	r1, r2, r3, r1
 8026ade:	fb1b f000 	smulbb	r0, fp, r0
 8026ae2:	b289      	uxth	r1, r1
 8026ae4:	1c4a      	adds	r2, r1, #1
 8026ae6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026aea:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026aee:	fb02 cc03 	mla	ip, r2, r3, ip
 8026af2:	1209      	asrs	r1, r1, #8
 8026af4:	fa1f fc8c 	uxth.w	ip, ip
 8026af8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026afc:	f10c 0201 	add.w	r2, ip, #1
 8026b00:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8026b04:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8026b08:	fb02 0303 	mla	r3, r2, r3, r0
 8026b0c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026b10:	b29b      	uxth	r3, r3
 8026b12:	f80e cc02 	strb.w	ip, [lr, #-2]
 8026b16:	1c5a      	adds	r2, r3, #1
 8026b18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026b1c:	121b      	asrs	r3, r3, #8
 8026b1e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8026b22:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026b24:	f10e 0e03 	add.w	lr, lr, #3
 8026b28:	f109 39ff 	add.w	r9, r9, #4294967295
 8026b2c:	441d      	add	r5, r3
 8026b2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026b30:	441e      	add	r6, r3
 8026b32:	e607      	b.n	8026744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8026b34:	f1bc 0f00 	cmp.w	ip, #0
 8026b38:	d09e      	beq.n	8026a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026b3a:	4453      	add	r3, sl
 8026b3c:	0859      	lsrs	r1, r3, #1
 8026b3e:	07db      	lsls	r3, r3, #31
 8026b40:	5c79      	ldrb	r1, [r7, r1]
 8026b42:	bf54      	ite	pl
 8026b44:	f001 010f 	andpl.w	r1, r1, #15
 8026b48:	1109      	asrmi	r1, r1, #4
 8026b4a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026b4e:	b2c9      	uxtb	r1, r1
 8026b50:	910d      	str	r1, [sp, #52]	; 0x34
 8026b52:	e791      	b.n	8026a78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026b54:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026b58:	f80e cc02 	strb.w	ip, [lr, #-2]
 8026b5c:	f80e bc01 	strb.w	fp, [lr, #-1]
 8026b60:	e7df      	b.n	8026b22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026b62:	b015      	add	sp, #84	; 0x54
 8026b64:	ecbd 8b08 	vpop	{d8-d11}
 8026b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b6c:	2000bf18 	.word	0x2000bf18

08026b70 <CRC_Lock>:
 8026b70:	4a1d      	ldr	r2, [pc, #116]	; (8026be8 <CRC_Lock+0x78>)
 8026b72:	b530      	push	{r4, r5, lr}
 8026b74:	6813      	ldr	r3, [r2, #0]
 8026b76:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8026b7a:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026b7e:	f023 0301 	bic.w	r3, r3, #1
 8026b82:	6013      	str	r3, [r2, #0]
 8026b84:	4b19      	ldr	r3, [pc, #100]	; (8026bec <CRC_Lock+0x7c>)
 8026b86:	681a      	ldr	r2, [r3, #0]
 8026b88:	4022      	ands	r2, r4
 8026b8a:	42aa      	cmp	r2, r5
 8026b8c:	d005      	beq.n	8026b9a <CRC_Lock+0x2a>
 8026b8e:	681b      	ldr	r3, [r3, #0]
 8026b90:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026b94:	4023      	ands	r3, r4
 8026b96:	4293      	cmp	r3, r2
 8026b98:	d11d      	bne.n	8026bd6 <CRC_Lock+0x66>
 8026b9a:	4b15      	ldr	r3, [pc, #84]	; (8026bf0 <CRC_Lock+0x80>)
 8026b9c:	681b      	ldr	r3, [r3, #0]
 8026b9e:	b9d3      	cbnz	r3, 8026bd6 <CRC_Lock+0x66>
 8026ba0:	4a14      	ldr	r2, [pc, #80]	; (8026bf4 <CRC_Lock+0x84>)
 8026ba2:	6813      	ldr	r3, [r2, #0]
 8026ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026ba8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8026bac:	d006      	beq.n	8026bbc <CRC_Lock+0x4c>
 8026bae:	6813      	ldr	r3, [r2, #0]
 8026bb0:	f240 4283 	movw	r2, #1155	; 0x483
 8026bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026bb8:	4293      	cmp	r3, r2
 8026bba:	d10c      	bne.n	8026bd6 <CRC_Lock+0x66>
 8026bbc:	4b0e      	ldr	r3, [pc, #56]	; (8026bf8 <CRC_Lock+0x88>)
 8026bbe:	2201      	movs	r2, #1
 8026bc0:	601a      	str	r2, [r3, #0]
 8026bc2:	681a      	ldr	r2, [r3, #0]
 8026bc4:	2a00      	cmp	r2, #0
 8026bc6:	d1fc      	bne.n	8026bc2 <CRC_Lock+0x52>
 8026bc8:	4b0c      	ldr	r3, [pc, #48]	; (8026bfc <CRC_Lock+0x8c>)
 8026bca:	6018      	str	r0, [r3, #0]
 8026bcc:	6818      	ldr	r0, [r3, #0]
 8026bce:	1a43      	subs	r3, r0, r1
 8026bd0:	4258      	negs	r0, r3
 8026bd2:	4158      	adcs	r0, r3
 8026bd4:	bd30      	pop	{r4, r5, pc}
 8026bd6:	4b0a      	ldr	r3, [pc, #40]	; (8026c00 <CRC_Lock+0x90>)
 8026bd8:	2201      	movs	r2, #1
 8026bda:	601a      	str	r2, [r3, #0]
 8026bdc:	681a      	ldr	r2, [r3, #0]
 8026bde:	2a00      	cmp	r2, #0
 8026be0:	d1fc      	bne.n	8026bdc <CRC_Lock+0x6c>
 8026be2:	4b08      	ldr	r3, [pc, #32]	; (8026c04 <CRC_Lock+0x94>)
 8026be4:	e7f1      	b.n	8026bca <CRC_Lock+0x5a>
 8026be6:	bf00      	nop
 8026be8:	e0002000 	.word	0xe0002000
 8026bec:	e000ed00 	.word	0xe000ed00
 8026bf0:	e0042000 	.word	0xe0042000
 8026bf4:	5c001000 	.word	0x5c001000
 8026bf8:	58024c08 	.word	0x58024c08
 8026bfc:	58024c00 	.word	0x58024c00
 8026c00:	40023008 	.word	0x40023008
 8026c04:	40023000 	.word	0x40023000

08026c08 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026c08:	6101      	str	r1, [r0, #16]
 8026c0a:	4770      	bx	lr

08026c0c <_ZN8touchgfx8Gestures4tickEv>:
 8026c0c:	7b83      	ldrb	r3, [r0, #14]
 8026c0e:	b14b      	cbz	r3, 8026c24 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026c10:	8903      	ldrh	r3, [r0, #8]
 8026c12:	3301      	adds	r3, #1
 8026c14:	b29b      	uxth	r3, r3
 8026c16:	2b07      	cmp	r3, #7
 8026c18:	8103      	strh	r3, [r0, #8]
 8026c1a:	bf81      	itttt	hi
 8026c1c:	2300      	movhi	r3, #0
 8026c1e:	8143      	strhhi	r3, [r0, #10]
 8026c20:	8183      	strhhi	r3, [r0, #12]
 8026c22:	7383      	strbhi	r3, [r0, #14]
 8026c24:	4770      	bx	lr
	...

08026c28 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026c28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026c2c:	4604      	mov	r4, r0
 8026c2e:	4698      	mov	r8, r3
 8026c30:	8880      	ldrh	r0, [r0, #4]
 8026c32:	4617      	mov	r7, r2
 8026c34:	4b1d      	ldr	r3, [pc, #116]	; (8026cac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8026c36:	460e      	mov	r6, r1
 8026c38:	f8ad 0006 	strh.w	r0, [sp, #6]
 8026c3c:	eba8 0000 	sub.w	r0, r8, r0
 8026c40:	9300      	str	r3, [sp, #0]
 8026c42:	2300      	movs	r3, #0
 8026c44:	b280      	uxth	r0, r0
 8026c46:	8aa2      	ldrh	r2, [r4, #20]
 8026c48:	f88d 3004 	strb.w	r3, [sp, #4]
 8026c4c:	b203      	sxth	r3, r0
 8026c4e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026c52:	88e1      	ldrh	r1, [r4, #6]
 8026c54:	2b00      	cmp	r3, #0
 8026c56:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026c5a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8026c5e:	bfb8      	it	lt
 8026c60:	4240      	neglt	r0, r0
 8026c62:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026c66:	bfb8      	it	lt
 8026c68:	b203      	sxthlt	r3, r0
 8026c6a:	4293      	cmp	r3, r2
 8026c6c:	dc08      	bgt.n	8026c80 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8026c6e:	1a69      	subs	r1, r5, r1
 8026c70:	b289      	uxth	r1, r1
 8026c72:	b20b      	sxth	r3, r1
 8026c74:	2b00      	cmp	r3, #0
 8026c76:	bfbc      	itt	lt
 8026c78:	4249      	neglt	r1, r1
 8026c7a:	b20b      	sxthlt	r3, r1
 8026c7c:	429a      	cmp	r2, r3
 8026c7e:	da13      	bge.n	8026ca8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8026c80:	6920      	ldr	r0, [r4, #16]
 8026c82:	4669      	mov	r1, sp
 8026c84:	eba8 0606 	sub.w	r6, r8, r6
 8026c88:	1bef      	subs	r7, r5, r7
 8026c8a:	6803      	ldr	r3, [r0, #0]
 8026c8c:	685b      	ldr	r3, [r3, #4]
 8026c8e:	4798      	blx	r3
 8026c90:	2300      	movs	r3, #0
 8026c92:	2001      	movs	r0, #1
 8026c94:	8166      	strh	r6, [r4, #10]
 8026c96:	8123      	strh	r3, [r4, #8]
 8026c98:	81a7      	strh	r7, [r4, #12]
 8026c9a:	f8a4 8004 	strh.w	r8, [r4, #4]
 8026c9e:	80e5      	strh	r5, [r4, #6]
 8026ca0:	73a0      	strb	r0, [r4, #14]
 8026ca2:	b004      	add	sp, #16
 8026ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026ca8:	2000      	movs	r0, #0
 8026caa:	e7fa      	b.n	8026ca2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8026cac:	0802ca44 	.word	0x0802ca44

08026cb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026cb2:	461e      	mov	r6, r3
 8026cb4:	1e4b      	subs	r3, r1, #1
 8026cb6:	b085      	sub	sp, #20
 8026cb8:	4604      	mov	r4, r0
 8026cba:	2b01      	cmp	r3, #1
 8026cbc:	460d      	mov	r5, r1
 8026cbe:	4617      	mov	r7, r2
 8026cc0:	d84b      	bhi.n	8026d5a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026cc2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8026cc6:	1cd3      	adds	r3, r2, #3
 8026cc8:	b29b      	uxth	r3, r3
 8026cca:	2b06      	cmp	r3, #6
 8026ccc:	d916      	bls.n	8026cfc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026cce:	f8df c098 	ldr.w	ip, [pc, #152]	; 8026d68 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026cd2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026cd6:	f8cd c004 	str.w	ip, [sp, #4]
 8026cda:	f04f 0c00 	mov.w	ip, #0
 8026cde:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026ce2:	6900      	ldr	r0, [r0, #16]
 8026ce4:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026ce8:	a901      	add	r1, sp, #4
 8026cea:	f88d c008 	strb.w	ip, [sp, #8]
 8026cee:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026cf2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026cf6:	6803      	ldr	r3, [r0, #0]
 8026cf8:	689b      	ldr	r3, [r3, #8]
 8026cfa:	4798      	blx	r3
 8026cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026d00:	1cd3      	adds	r3, r2, #3
 8026d02:	b29b      	uxth	r3, r3
 8026d04:	2b06      	cmp	r3, #6
 8026d06:	d916      	bls.n	8026d36 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026d08:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8026d68 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026d0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026d10:	f8cd c004 	str.w	ip, [sp, #4]
 8026d14:	f04f 0c01 	mov.w	ip, #1
 8026d18:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026d1c:	6920      	ldr	r0, [r4, #16]
 8026d1e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026d22:	a901      	add	r1, sp, #4
 8026d24:	f88d c008 	strb.w	ip, [sp, #8]
 8026d28:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026d2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026d30:	6803      	ldr	r3, [r0, #0]
 8026d32:	689b      	ldr	r3, [r3, #8]
 8026d34:	4798      	blx	r3
 8026d36:	4b0b      	ldr	r3, [pc, #44]	; (8026d64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8026d38:	a901      	add	r1, sp, #4
 8026d3a:	6920      	ldr	r0, [r4, #16]
 8026d3c:	9301      	str	r3, [sp, #4]
 8026d3e:	2300      	movs	r3, #0
 8026d40:	f88d 5008 	strb.w	r5, [sp, #8]
 8026d44:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026d48:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026d4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026d50:	6803      	ldr	r3, [r0, #0]
 8026d52:	681b      	ldr	r3, [r3, #0]
 8026d54:	4798      	blx	r3
 8026d56:	b005      	add	sp, #20
 8026d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026d5a:	2900      	cmp	r1, #0
 8026d5c:	d1eb      	bne.n	8026d36 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026d5e:	80a2      	strh	r2, [r4, #4]
 8026d60:	80c6      	strh	r6, [r0, #6]
 8026d62:	e7e8      	b.n	8026d36 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026d64:	0802ca30 	.word	0x0802ca30
 8026d68:	0802ca58 	.word	0x0802ca58

08026d6c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8026d6c:	10c9      	asrs	r1, r1, #3
 8026d6e:	2900      	cmp	r1, #0
 8026d70:	bfb8      	it	lt
 8026d72:	4249      	neglt	r1, r1
 8026d74:	2801      	cmp	r0, #1
 8026d76:	d108      	bne.n	8026d8a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8026d78:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8026d7c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8026d80:	4601      	mov	r1, r0
 8026d82:	dd02      	ble.n	8026d8a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8026d84:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8026d88:	4770      	bx	lr
 8026d8a:	29ff      	cmp	r1, #255	; 0xff
 8026d8c:	bfa8      	it	ge
 8026d8e:	21ff      	movge	r1, #255	; 0xff
 8026d90:	4608      	mov	r0, r1
 8026d92:	4770      	bx	lr

08026d94 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8026d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d98:	688c      	ldr	r4, [r1, #8]
 8026d9a:	b087      	sub	sp, #28
 8026d9c:	4607      	mov	r7, r0
 8026d9e:	2c00      	cmp	r4, #0
 8026da0:	db2b      	blt.n	8026dfa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026da2:	6803      	ldr	r3, [r0, #0]
 8026da4:	68da      	ldr	r2, [r3, #12]
 8026da6:	42a2      	cmp	r2, r4
 8026da8:	dd27      	ble.n	8026dfa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026daa:	681a      	ldr	r2, [r3, #0]
 8026dac:	691e      	ldr	r6, [r3, #16]
 8026dae:	68cd      	ldr	r5, [r1, #12]
 8026db0:	fb06 2604 	mla	r6, r6, r4, r2
 8026db4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8026db8:	698a      	ldr	r2, [r1, #24]
 8026dba:	f893 a004 	ldrb.w	sl, [r3, #4]
 8026dbe:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8026dc2:	9205      	str	r2, [sp, #20]
 8026dc4:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8026dc8:	9b05      	ldr	r3, [sp, #20]
 8026dca:	6839      	ldr	r1, [r7, #0]
 8026dcc:	eb03 0c02 	add.w	ip, r3, r2
 8026dd0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8026dd4:	6889      	ldr	r1, [r1, #8]
 8026dd6:	1898      	adds	r0, r3, r2
 8026dd8:	4288      	cmp	r0, r1
 8026dda:	db02      	blt.n	8026de2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8026ddc:	1a8b      	subs	r3, r1, r2
 8026dde:	2b00      	cmp	r3, #0
 8026de0:	dd09      	ble.n	8026df6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8026de2:	6878      	ldr	r0, [r7, #4]
 8026de4:	6801      	ldr	r1, [r0, #0]
 8026de6:	9400      	str	r4, [sp, #0]
 8026de8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8026dec:	4653      	mov	r3, sl
 8026dee:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8026df2:	4631      	mov	r1, r6
 8026df4:	47d8      	blx	fp
 8026df6:	3d01      	subs	r5, #1
 8026df8:	d1e4      	bne.n	8026dc4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8026dfa:	b007      	add	sp, #28
 8026dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026e00 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8026e00:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8026e04:	b90b      	cbnz	r3, 8026e0a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8026e06:	f001 b974 	b.w	80280f2 <_ZN8touchgfx7Outline6lineToEii>
 8026e0a:	4770      	bx	lr

08026e0c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8026e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e10:	4604      	mov	r4, r0
 8026e12:	2600      	movs	r6, #0
 8026e14:	4b8e      	ldr	r3, [pc, #568]	; (8027050 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8026e16:	f100 0518 	add.w	r5, r0, #24
 8026e1a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8026e1e:	b086      	sub	sp, #24
 8026e20:	4690      	mov	r8, r2
 8026e22:	e9c0 3100 	strd	r3, r1, [r0]
 8026e26:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8026e2a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8026e2e:	4628      	mov	r0, r5
 8026e30:	f001 fb75 	bl	802851e <_ZN8touchgfx15RenderingBufferC1Ev>
 8026e34:	4638      	mov	r0, r7
 8026e36:	f000 fb45 	bl	80274c4 <_ZN8touchgfx7OutlineC1Ev>
 8026e3a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8026e3e:	f001 fb23 	bl	8028488 <_ZN8touchgfx8ScanlineC1Ev>
 8026e42:	2301      	movs	r3, #1
 8026e44:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8026e48:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8026e4c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026e50:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8026e54:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8026e58:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8026e5c:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8026e60:	f7f4 fbac 	bl	801b5bc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8026e64:	b928      	cbnz	r0, 8026e72 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8026e66:	4b7b      	ldr	r3, [pc, #492]	; (8027054 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8026e68:	2118      	movs	r1, #24
 8026e6a:	4a7b      	ldr	r2, [pc, #492]	; (8027058 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026e6c:	487b      	ldr	r0, [pc, #492]	; (802705c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8026e6e:	f001 fb99 	bl	80285a4 <__assert_func>
 8026e72:	f9b8 2000 	ldrsh.w	r2, [r8]
 8026e76:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8026e7a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8026e7e:	4410      	add	r0, r2
 8026e80:	9602      	str	r6, [sp, #8]
 8026e82:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8026e86:	b280      	uxth	r0, r0
 8026e88:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8026e8c:	fa0f fa80 	sxth.w	sl, r0
 8026e90:	f1ba 0f00 	cmp.w	sl, #0
 8026e94:	dd70      	ble.n	8026f78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026e96:	4591      	cmp	r9, r2
 8026e98:	dd6e      	ble.n	8026f78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026e9a:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8026e9e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8026ea2:	440b      	add	r3, r1
 8026ea4:	b29b      	uxth	r3, r3
 8026ea6:	b21e      	sxth	r6, r3
 8026ea8:	2e00      	cmp	r6, #0
 8026eaa:	dd65      	ble.n	8026f78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026eac:	458e      	cmp	lr, r1
 8026eae:	dd63      	ble.n	8026f78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026eb0:	45d1      	cmp	r9, sl
 8026eb2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8026eb6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026eba:	bfb8      	it	lt
 8026ebc:	fa1f f089 	uxthlt.w	r0, r9
 8026ec0:	45b6      	cmp	lr, r6
 8026ec2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8026ec6:	bfb8      	it	lt
 8026ec8:	fa1f f38e 	uxthlt.w	r3, lr
 8026ecc:	1a80      	subs	r0, r0, r2
 8026ece:	f8ad 100a 	strh.w	r1, [sp, #10]
 8026ed2:	1a5b      	subs	r3, r3, r1
 8026ed4:	f8ad 000c 	strh.w	r0, [sp, #12]
 8026ed8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026edc:	f10d 0808 	add.w	r8, sp, #8
 8026ee0:	ae04      	add	r6, sp, #16
 8026ee2:	e898 0003 	ldmia.w	r8, {r0, r1}
 8026ee6:	e886 0003 	stmia.w	r6, {r0, r1}
 8026eea:	f8dc 3000 	ldr.w	r3, [ip]
 8026eee:	4660      	mov	r0, ip
 8026ef0:	4631      	mov	r1, r6
 8026ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026ef4:	4798      	blx	r3
 8026ef6:	6861      	ldr	r1, [r4, #4]
 8026ef8:	4640      	mov	r0, r8
 8026efa:	3104      	adds	r1, #4
 8026efc:	f7f5 f9cc 	bl	801c298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026f00:	4630      	mov	r0, r6
 8026f02:	f7f5 f9e1 	bl	801c2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026f06:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8026f0a:	f7f4 fae7 	bl	801b4dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8026f0e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8026f12:	4638      	mov	r0, r7
 8026f14:	f000 fab2 	bl	802747c <_ZN8touchgfx7Outline5resetEv>
 8026f18:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8026f1c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8026f20:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8026f24:	015b      	lsls	r3, r3, #5
 8026f26:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8026f2a:	0152      	lsls	r2, r2, #5
 8026f2c:	60e3      	str	r3, [r4, #12]
 8026f2e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8026f32:	60a2      	str	r2, [r4, #8]
 8026f34:	015b      	lsls	r3, r3, #5
 8026f36:	6123      	str	r3, [r4, #16]
 8026f38:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8026f3c:	015b      	lsls	r3, r3, #5
 8026f3e:	6163      	str	r3, [r4, #20]
 8026f40:	4b47      	ldr	r3, [pc, #284]	; (8027060 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8026f42:	6818      	ldr	r0, [r3, #0]
 8026f44:	6803      	ldr	r3, [r0, #0]
 8026f46:	6a1b      	ldr	r3, [r3, #32]
 8026f48:	4798      	blx	r3
 8026f4a:	4606      	mov	r6, r0
 8026f4c:	f7e9 ff10 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8026f50:	6803      	ldr	r3, [r0, #0]
 8026f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f54:	4798      	blx	r3
 8026f56:	4607      	mov	r7, r0
 8026f58:	f7e9 ff0a 	bl	8010d70 <_ZN8touchgfx3HAL3lcdEv>
 8026f5c:	6803      	ldr	r3, [r0, #0]
 8026f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f60:	4798      	blx	r3
 8026f62:	280c      	cmp	r0, #12
 8026f64:	d854      	bhi.n	8027010 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8026f66:	e8df f000 	tbb	[pc, r0]
 8026f6a:	554b      	.short	0x554b
 8026f6c:	2b6e0a66 	.word	0x2b6e0a66
 8026f70:	5f5f5f3b 	.word	0x5f5f5f3b
 8026f74:	5f5f      	.short	0x5f5f
 8026f76:	6e          	.byte	0x6e
 8026f77:	00          	.byte	0x00
 8026f78:	2300      	movs	r3, #0
 8026f7a:	9303      	str	r3, [sp, #12]
 8026f7c:	e7ae      	b.n	8026edc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8026f7e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026f82:	2108      	movs	r1, #8
 8026f84:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026f88:	fb92 f1f1 	sdiv	r1, r2, r1
 8026f8c:	fb07 1303 	mla	r3, r7, r3, r1
 8026f90:	441e      	add	r6, r3
 8026f92:	4253      	negs	r3, r2
 8026f94:	f002 0207 	and.w	r2, r2, #7
 8026f98:	f003 0307 	and.w	r3, r3, #7
 8026f9c:	bf58      	it	pl
 8026f9e:	425a      	negpl	r2, r3
 8026fa0:	b2d2      	uxtb	r2, r2
 8026fa2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8026fa6:	4628      	mov	r0, r5
 8026fa8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8026fac:	66e1      	str	r1, [r4, #108]	; 0x6c
 8026fae:	e9cd 1700 	strd	r1, r7, [sp]
 8026fb2:	4631      	mov	r1, r6
 8026fb4:	f001 fabb 	bl	802852e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8026fb8:	4620      	mov	r0, r4
 8026fba:	b006      	add	sp, #24
 8026fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026fc0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026fc4:	2104      	movs	r1, #4
 8026fc6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026fca:	fb92 f1f1 	sdiv	r1, r2, r1
 8026fce:	fb07 1303 	mla	r3, r7, r3, r1
 8026fd2:	441e      	add	r6, r3
 8026fd4:	4253      	negs	r3, r2
 8026fd6:	f002 0203 	and.w	r2, r2, #3
 8026fda:	f003 0303 	and.w	r3, r3, #3
 8026fde:	e7dd      	b.n	8026f9c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8026fe0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026fe4:	2102      	movs	r1, #2
 8026fe6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026fea:	2a00      	cmp	r2, #0
 8026fec:	fb92 f1f1 	sdiv	r1, r2, r1
 8026ff0:	f002 0201 	and.w	r2, r2, #1
 8026ff4:	fb07 1303 	mla	r3, r7, r3, r1
 8026ff8:	bfb8      	it	lt
 8026ffa:	4252      	neglt	r2, r2
 8026ffc:	441e      	add	r6, r3
 8026ffe:	e7cf      	b.n	8026fa0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8027000:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8027004:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8027008:	437b      	muls	r3, r7
 802700a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802700e:	441e      	add	r6, r3
 8027010:	2200      	movs	r2, #0
 8027012:	e7c6      	b.n	8026fa2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8027014:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8027018:	2103      	movs	r1, #3
 802701a:	fb07 f203 	mul.w	r2, r7, r3
 802701e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8027022:	fb13 2301 	smlabb	r3, r3, r1, r2
 8027026:	e7f2      	b.n	802700e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8027028:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802702c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8027030:	fb07 2303 	mla	r3, r7, r3, r2
 8027034:	e7eb      	b.n	802700e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8027036:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802703a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802703e:	437b      	muls	r3, r7
 8027040:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8027044:	e7e3      	b.n	802700e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8027046:	4b07      	ldr	r3, [pc, #28]	; (8027064 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8027048:	2156      	movs	r1, #86	; 0x56
 802704a:	4a03      	ldr	r2, [pc, #12]	; (8027058 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802704c:	e70e      	b.n	8026e6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 802704e:	bf00      	nop
 8027050:	0802e0c4 	.word	0x0802e0c4
 8027054:	0802e00e 	.word	0x0802e00e
 8027058:	0802e0cc 	.word	0x0802e0cc
 802705c:	0802e06a 	.word	0x0802e06a
 8027060:	2000bef0 	.word	0x2000bef0
 8027064:	0802e09e 	.word	0x0802e09e

08027068 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8027068:	6812      	ldr	r2, [r2, #0]
 802706a:	2a00      	cmp	r2, #0
 802706c:	db0b      	blt.n	8027086 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802706e:	9800      	ldr	r0, [sp, #0]
 8027070:	6800      	ldr	r0, [r0, #0]
 8027072:	4290      	cmp	r0, r2
 8027074:	bfd4      	ite	le
 8027076:	2002      	movle	r0, #2
 8027078:	2000      	movgt	r0, #0
 802707a:	680a      	ldr	r2, [r1, #0]
 802707c:	2a00      	cmp	r2, #0
 802707e:	da04      	bge.n	802708a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8027080:	f040 0004 	orr.w	r0, r0, #4
 8027084:	4770      	bx	lr
 8027086:	2001      	movs	r0, #1
 8027088:	e7f7      	b.n	802707a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	4293      	cmp	r3, r2
 802708e:	bfd8      	it	le
 8027090:	f040 0008 	orrle.w	r0, r0, #8
 8027094:	4770      	bx	lr
	...

08027098 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8027098:	4b07      	ldr	r3, [pc, #28]	; (80270b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802709a:	b510      	push	{r4, lr}
 802709c:	781b      	ldrb	r3, [r3, #0]
 802709e:	2b01      	cmp	r3, #1
 80270a0:	d108      	bne.n	80270b4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80270a2:	6843      	ldr	r3, [r0, #4]
 80270a4:	6814      	ldr	r4, [r2, #0]
 80270a6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80270aa:	680b      	ldr	r3, [r1, #0]
 80270ac:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80270b0:	6013      	str	r3, [r2, #0]
 80270b2:	600c      	str	r4, [r1, #0]
 80270b4:	bd10      	pop	{r4, pc}
 80270b6:	bf00      	nop
 80270b8:	2000bee6 	.word	0x2000bee6

080270bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80270bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80270be:	b085      	sub	sp, #20
 80270c0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80270c4:	4604      	mov	r4, r0
 80270c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80270ca:	b33b      	cbz	r3, 802711c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80270cc:	aa02      	add	r2, sp, #8
 80270ce:	a903      	add	r1, sp, #12
 80270d0:	f7ff ffe2 	bl	8027098 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80270d4:	68a3      	ldr	r3, [r4, #8]
 80270d6:	9e03      	ldr	r6, [sp, #12]
 80270d8:	aa02      	add	r2, sp, #8
 80270da:	9f02      	ldr	r7, [sp, #8]
 80270dc:	a903      	add	r1, sp, #12
 80270de:	1af6      	subs	r6, r6, r3
 80270e0:	68e3      	ldr	r3, [r4, #12]
 80270e2:	4620      	mov	r0, r4
 80270e4:	1aff      	subs	r7, r7, r3
 80270e6:	f104 0314 	add.w	r3, r4, #20
 80270ea:	9603      	str	r6, [sp, #12]
 80270ec:	9300      	str	r3, [sp, #0]
 80270ee:	f104 0310 	add.w	r3, r4, #16
 80270f2:	9702      	str	r7, [sp, #8]
 80270f4:	f7ff ffb8 	bl	8027068 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80270f8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80270fc:	4605      	mov	r5, r0
 80270fe:	b97b      	cbnz	r3, 8027120 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8027100:	463a      	mov	r2, r7
 8027102:	4631      	mov	r1, r6
 8027104:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8027108:	f7ff fe7a 	bl	8026e00 <_ZN8touchgfx10Rasterizer6lineToEii>
 802710c:	9b03      	ldr	r3, [sp, #12]
 802710e:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8027112:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8027116:	9b02      	ldr	r3, [sp, #8]
 8027118:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802711c:	b005      	add	sp, #20
 802711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027120:	b110      	cbz	r0, 8027128 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8027122:	ea13 0200 	ands.w	r2, r3, r0
 8027126:	d11c      	bne.n	8027162 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8027128:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 802712c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8027130:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8027134:	b188      	cbz	r0, 802715a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8027136:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 802713a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802713e:	b913      	cbnz	r3, 8027146 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8027140:	4630      	mov	r0, r6
 8027142:	f001 f806 	bl	8028152 <_ZN8touchgfx7Outline6moveToEii>
 8027146:	2300      	movs	r3, #0
 8027148:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802714c:	2301      	movs	r3, #1
 802714e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8027152:	4630      	mov	r0, r6
 8027154:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8027158:	e7d6      	b.n	8027108 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802715a:	4630      	mov	r0, r6
 802715c:	f7ff fe50 	bl	8026e00 <_ZN8touchgfx10Rasterizer6lineToEii>
 8027160:	e7f7      	b.n	8027152 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8027162:	4615      	mov	r5, r2
 8027164:	e7d2      	b.n	802710c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08027166 <_ZN8touchgfx6Canvas5closeEv>:
 8027166:	b538      	push	{r3, r4, r5, lr}
 8027168:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802716c:	4604      	mov	r4, r0
 802716e:	b993      	cbnz	r3, 8027196 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8027170:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8027174:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8027178:	4213      	tst	r3, r2
 802717a:	d10c      	bne.n	8027196 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802717c:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8027180:	b123      	cbz	r3, 802718c <_ZN8touchgfx6Canvas5closeEv+0x26>
 8027182:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8027186:	4628      	mov	r0, r5
 8027188:	f7ff fe3a 	bl	8026e00 <_ZN8touchgfx10Rasterizer6lineToEii>
 802718c:	4628      	mov	r0, r5
 802718e:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8027192:	f7ff fe35 	bl	8026e00 <_ZN8touchgfx10Rasterizer6lineToEii>
 8027196:	2300      	movs	r3, #0
 8027198:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802719c:	bd38      	pop	{r3, r4, r5, pc}

0802719e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802719e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80271a0:	b085      	sub	sp, #20
 80271a2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80271a6:	4604      	mov	r4, r0
 80271a8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80271ac:	b353      	cbz	r3, 8027204 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80271ae:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80271b2:	b90b      	cbnz	r3, 80271b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80271b4:	f7ff ffd7 	bl	8027166 <_ZN8touchgfx6Canvas5closeEv>
 80271b8:	aa02      	add	r2, sp, #8
 80271ba:	a903      	add	r1, sp, #12
 80271bc:	4620      	mov	r0, r4
 80271be:	f7ff ff6b 	bl	8027098 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80271c2:	68a3      	ldr	r3, [r4, #8]
 80271c4:	9d03      	ldr	r5, [sp, #12]
 80271c6:	aa02      	add	r2, sp, #8
 80271c8:	9e02      	ldr	r6, [sp, #8]
 80271ca:	a903      	add	r1, sp, #12
 80271cc:	1aed      	subs	r5, r5, r3
 80271ce:	68e3      	ldr	r3, [r4, #12]
 80271d0:	4620      	mov	r0, r4
 80271d2:	1af6      	subs	r6, r6, r3
 80271d4:	f104 0314 	add.w	r3, r4, #20
 80271d8:	9503      	str	r5, [sp, #12]
 80271da:	9300      	str	r3, [sp, #0]
 80271dc:	f104 0310 	add.w	r3, r4, #16
 80271e0:	9602      	str	r6, [sp, #8]
 80271e2:	f7ff ff41 	bl	8027068 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80271e6:	4607      	mov	r7, r0
 80271e8:	b170      	cbz	r0, 8027208 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80271ea:	2301      	movs	r3, #1
 80271ec:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80271f0:	9a03      	ldr	r2, [sp, #12]
 80271f2:	9b02      	ldr	r3, [sp, #8]
 80271f4:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80271f8:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 80271fc:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8027200:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8027204:	b005      	add	sp, #20
 8027206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027208:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802720c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8027210:	b92b      	cbnz	r3, 802721e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8027212:	4632      	mov	r2, r6
 8027214:	4629      	mov	r1, r5
 8027216:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802721a:	f000 ff9a 	bl	8028152 <_ZN8touchgfx7Outline6moveToEii>
 802721e:	2300      	movs	r3, #0
 8027220:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8027224:	2301      	movs	r3, #1
 8027226:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802722a:	e7e1      	b.n	80271f0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802722c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027230:	4604      	mov	r4, r0
 8027232:	b087      	sub	sp, #28
 8027234:	9105      	str	r1, [sp, #20]
 8027236:	f001 f8d0 	bl	80283da <_ZN8touchgfx7Outline8getCellsEv>
 802723a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802723e:	4605      	mov	r5, r0
 8027240:	f1b9 0f00 	cmp.w	r9, #0
 8027244:	d103      	bne.n	802724e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8027246:	2001      	movs	r0, #1
 8027248:	b007      	add	sp, #28
 802724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802724e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8027252:	2e00      	cmp	r6, #0
 8027254:	d139      	bne.n	80272ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8027256:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802725a:	f105 0708 	add.w	r7, r5, #8
 802725e:	4640      	mov	r0, r8
 8027260:	f001 f8fd 	bl	802845e <_ZN8touchgfx8Scanline5resetEv>
 8027264:	f109 33ff 	add.w	r3, r9, #4294967295
 8027268:	9303      	str	r3, [sp, #12]
 802726a:	f9b5 b000 	ldrsh.w	fp, [r5]
 802726e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8027272:	46da      	mov	sl, fp
 8027274:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8027278:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802727c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8027280:	9b03      	ldr	r3, [sp, #12]
 8027282:	4416      	add	r6, r2
 8027284:	9504      	str	r5, [sp, #16]
 8027286:	463d      	mov	r5, r7
 8027288:	3b01      	subs	r3, #1
 802728a:	9303      	str	r3, [sp, #12]
 802728c:	3301      	adds	r3, #1
 802728e:	d01e      	beq.n	80272ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8027290:	3708      	adds	r7, #8
 8027292:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8027296:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802729a:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802729e:	4290      	cmp	r0, r2
 80272a0:	d11e      	bne.n	80272e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80272a2:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80272a6:	4411      	add	r1, r2
 80272a8:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80272ac:	e7e8      	b.n	8027280 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80272ae:	1c91      	adds	r1, r2, #2
 80272b0:	f04f 0301 	mov.w	r3, #1
 80272b4:	65e1      	str	r1, [r4, #92]	; 0x5c
 80272b6:	8053      	strh	r3, [r2, #2]
 80272b8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80272ba:	1c91      	adds	r1, r2, #2
 80272bc:	65a1      	str	r1, [r4, #88]	; 0x58
 80272be:	f8a2 b002 	strh.w	fp, [r2, #2]
 80272c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80272c4:	3201      	adds	r2, #1
 80272c6:	6562      	str	r2, [r4, #84]	; 0x54
 80272c8:	e03a      	b.n	8027340 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80272ca:	2000      	movs	r0, #0
 80272cc:	e7bc      	b.n	8027248 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80272ce:	b951      	cbnz	r1, 80272e6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80272d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80272d2:	2b00      	cmp	r3, #0
 80272d4:	d0b7      	beq.n	8027246 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80272d6:	4641      	mov	r1, r8
 80272d8:	9805      	ldr	r0, [sp, #20]
 80272da:	f7ff fd5b 	bl	8026d94 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80272de:	e7b2      	b.n	8027246 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80272e0:	2900      	cmp	r1, #0
 80272e2:	d035      	beq.n	8027350 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80272e4:	9504      	str	r5, [sp, #16]
 80272e6:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80272ea:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80272ee:	f7ff fd3d 	bl	8026d6c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80272f2:	4605      	mov	r5, r0
 80272f4:	b330      	cbz	r0, 8027344 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80272f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80272f8:	b182      	cbz	r2, 802731c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80272fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80272fc:	454a      	cmp	r2, r9
 80272fe:	d00d      	beq.n	802731c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8027300:	4641      	mov	r1, r8
 8027302:	9805      	ldr	r0, [sp, #20]
 8027304:	f7ff fd46 	bl	8026d94 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8027308:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802730c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802730e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8027312:	65e2      	str	r2, [r4, #92]	; 0x5c
 8027314:	2300      	movs	r3, #0
 8027316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027318:	6563      	str	r3, [r4, #84]	; 0x54
 802731a:	65a2      	str	r2, [r4, #88]	; 0x58
 802731c:	f1bb 0f00 	cmp.w	fp, #0
 8027320:	db10      	blt.n	8027344 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8027322:	f7f4 f959 	bl	801b5d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027326:	4583      	cmp	fp, r0
 8027328:	d20c      	bcs.n	8027344 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802732a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802732c:	f802 500b 	strb.w	r5, [r2, fp]
 8027330:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8027332:	3201      	adds	r2, #1
 8027334:	455a      	cmp	r2, fp
 8027336:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8027338:	d1b9      	bne.n	80272ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802733a:	8811      	ldrh	r1, [r2, #0]
 802733c:	3101      	adds	r1, #1
 802733e:	8011      	strh	r1, [r2, #0]
 8027340:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8027344:	9b03      	ldr	r3, [sp, #12]
 8027346:	3301      	adds	r3, #1
 8027348:	d0c2      	beq.n	80272d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802734a:	f10b 0a01 	add.w	sl, fp, #1
 802734e:	9d04      	ldr	r5, [sp, #16]
 8027350:	f9b5 3000 	ldrsh.w	r3, [r5]
 8027354:	4553      	cmp	r3, sl
 8027356:	dd88      	ble.n	802726a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8027358:	01b1      	lsls	r1, r6, #6
 802735a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802735e:	f7ff fd05 	bl	8026d6c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8027362:	4683      	mov	fp, r0
 8027364:	2800      	cmp	r0, #0
 8027366:	d080      	beq.n	802726a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8027368:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802736a:	b183      	cbz	r3, 802738e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802736c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802736e:	454b      	cmp	r3, r9
 8027370:	d00d      	beq.n	802738e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8027372:	4641      	mov	r1, r8
 8027374:	9805      	ldr	r0, [sp, #20]
 8027376:	f7ff fd0d 	bl	8026d94 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802737a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802737e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8027382:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8027384:	65e3      	str	r3, [r4, #92]	; 0x5c
 8027386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027388:	65a3      	str	r3, [r4, #88]	; 0x58
 802738a:	2300      	movs	r3, #0
 802738c:	6563      	str	r3, [r4, #84]	; 0x54
 802738e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8027392:	464a      	mov	r2, r9
 8027394:	f8cd b000 	str.w	fp, [sp]
 8027398:	4651      	mov	r1, sl
 802739a:	eba3 030a 	sub.w	r3, r3, sl
 802739e:	4640      	mov	r0, r8
 80273a0:	f001 f884 	bl	80284ac <_ZN8touchgfx8Scanline7addSpanEiijj>
 80273a4:	e761      	b.n	802726a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080273a6 <_ZN8touchgfx6Canvas6renderEv>:
 80273a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80273a8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80273ac:	4604      	mov	r4, r0
 80273ae:	b913      	cbnz	r3, 80273b6 <_ZN8touchgfx6Canvas6renderEv+0x10>
 80273b0:	2001      	movs	r0, #1
 80273b2:	b003      	add	sp, #12
 80273b4:	bd30      	pop	{r4, r5, pc}
 80273b6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80273ba:	2b00      	cmp	r3, #0
 80273bc:	d131      	bne.n	8027422 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80273be:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 80273c2:	2b00      	cmp	r3, #0
 80273c4:	d0f4      	beq.n	80273b0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80273c6:	6840      	ldr	r0, [r0, #4]
 80273c8:	6803      	ldr	r3, [r0, #0]
 80273ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80273cc:	4798      	blx	r3
 80273ce:	2800      	cmp	r0, #0
 80273d0:	d0ee      	beq.n	80273b0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80273d2:	4620      	mov	r0, r4
 80273d4:	f7ff fec7 	bl	8027166 <_ZN8touchgfx6Canvas5closeEv>
 80273d8:	6860      	ldr	r0, [r4, #4]
 80273da:	6803      	ldr	r3, [r0, #0]
 80273dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80273de:	4798      	blx	r3
 80273e0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80273e4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80273e8:	f7f2 ff61 	bl	801a2ae <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 80273ec:	6860      	ldr	r0, [r4, #4]
 80273ee:	6803      	ldr	r3, [r0, #0]
 80273f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80273f2:	4798      	blx	r3
 80273f4:	4605      	mov	r5, r0
 80273f6:	6860      	ldr	r0, [r4, #4]
 80273f8:	6803      	ldr	r3, [r0, #0]
 80273fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80273fc:	4798      	blx	r3
 80273fe:	4601      	mov	r1, r0
 8027400:	4628      	mov	r0, r5
 8027402:	f7f2 ff57 	bl	801a2b4 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8027406:	6860      	ldr	r0, [r4, #4]
 8027408:	6803      	ldr	r3, [r0, #0]
 802740a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802740c:	4798      	blx	r3
 802740e:	f104 0318 	add.w	r3, r4, #24
 8027412:	4669      	mov	r1, sp
 8027414:	e9cd 3000 	strd	r3, r0, [sp]
 8027418:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802741c:	f7ff ff06 	bl	802722c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8027420:	e7c7      	b.n	80273b2 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8027422:	2000      	movs	r0, #0
 8027424:	e7c5      	b.n	80273b2 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08027428 <_ZN8touchgfx6CanvasD1Ev>:
 8027428:	b538      	push	{r3, r4, r5, lr}
 802742a:	4605      	mov	r5, r0
 802742c:	4b08      	ldr	r3, [pc, #32]	; (8027450 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802742e:	4604      	mov	r4, r0
 8027430:	f845 3b2c 	str.w	r3, [r5], #44
 8027434:	4b07      	ldr	r3, [pc, #28]	; (8027454 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8027436:	6818      	ldr	r0, [r3, #0]
 8027438:	6803      	ldr	r3, [r0, #0]
 802743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802743c:	4798      	blx	r3
 802743e:	4628      	mov	r0, r5
 8027440:	f000 f814 	bl	802746c <_ZN8touchgfx7OutlineD1Ev>
 8027444:	f104 0018 	add.w	r0, r4, #24
 8027448:	f001 f870 	bl	802852c <_ZN8touchgfx15RenderingBufferD1Ev>
 802744c:	4620      	mov	r0, r4
 802744e:	bd38      	pop	{r3, r4, r5, pc}
 8027450:	0802e0c4 	.word	0x0802e0c4
 8027454:	2000bef0 	.word	0x2000bef0

08027458 <_ZN8touchgfx6CanvasD0Ev>:
 8027458:	b510      	push	{r4, lr}
 802745a:	4604      	mov	r4, r0
 802745c:	f7ff ffe4 	bl	8027428 <_ZN8touchgfx6CanvasD1Ev>
 8027460:	21b8      	movs	r1, #184	; 0xb8
 8027462:	4620      	mov	r0, r4
 8027464:	f001 f870 	bl	8028548 <_ZdlPvj>
 8027468:	4620      	mov	r0, r4
 802746a:	bd10      	pop	{r4, pc}

0802746c <_ZN8touchgfx7OutlineD1Ev>:
 802746c:	4770      	bx	lr

0802746e <_ZN8touchgfx7OutlineD0Ev>:
 802746e:	b510      	push	{r4, lr}
 8027470:	4604      	mov	r4, r0
 8027472:	2148      	movs	r1, #72	; 0x48
 8027474:	f001 f868 	bl	8028548 <_ZdlPvj>
 8027478:	4620      	mov	r0, r4
 802747a:	bd10      	pop	{r4, pc}

0802747c <_ZN8touchgfx7Outline5resetEv>:
 802747c:	b510      	push	{r4, lr}
 802747e:	4604      	mov	r4, r0
 8027480:	f7f4 f8c2 	bl	801b608 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8027484:	60e0      	str	r0, [r4, #12]
 8027486:	f7f4 f8c5 	bl	801b614 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802748a:	68e3      	ldr	r3, [r4, #12]
 802748c:	2200      	movs	r2, #0
 802748e:	08c0      	lsrs	r0, r0, #3
 8027490:	6123      	str	r3, [r4, #16]
 8027492:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027496:	6060      	str	r0, [r4, #4]
 8027498:	82a3      	strh	r3, [r4, #20]
 802749a:	82e3      	strh	r3, [r4, #22]
 802749c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802749e:	60a2      	str	r2, [r4, #8]
 80274a0:	f023 0301 	bic.w	r3, r3, #1
 80274a4:	8322      	strh	r2, [r4, #24]
 80274a6:	8362      	strh	r2, [r4, #26]
 80274a8:	f043 0302 	orr.w	r3, r3, #2
 80274ac:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80274b0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80274b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80274b6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80274ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80274be:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80274c2:	bd10      	pop	{r4, pc}

080274c4 <_ZN8touchgfx7OutlineC1Ev>:
 80274c4:	4b0f      	ldr	r3, [pc, #60]	; (8027504 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80274c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80274ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80274ce:	b510      	push	{r4, lr}
 80274d0:	6003      	str	r3, [r0, #0]
 80274d2:	2300      	movs	r3, #0
 80274d4:	4604      	mov	r4, r0
 80274d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80274da:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80274de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80274e2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80274e6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80274ea:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80274ee:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80274f2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80274f6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80274fa:	f7ff ffbf 	bl	802747c <_ZN8touchgfx7Outline5resetEv>
 80274fe:	4620      	mov	r0, r4
 8027500:	bd10      	pop	{r4, pc}
 8027502:	bf00      	nop
 8027504:	0802e124 	.word	0x0802e124

08027508 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8027508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802750c:	b093      	sub	sp, #76	; 0x4c
 802750e:	4604      	mov	r4, r0
 8027510:	1156      	asrs	r6, r2, #5
 8027512:	f002 0e1f 	and.w	lr, r2, #31
 8027516:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027518:	9305      	str	r3, [sp, #20]
 802751a:	1143      	asrs	r3, r0, #5
 802751c:	1145      	asrs	r5, r0, #5
 802751e:	930c      	str	r3, [sp, #48]	; 0x30
 8027520:	f000 031f 	and.w	r3, r0, #31
 8027524:	9303      	str	r3, [sp, #12]
 8027526:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8027528:	42b3      	cmp	r3, r6
 802752a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802752c:	bfc8      	it	gt
 802752e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8027530:	42b3      	cmp	r3, r6
 8027532:	bfdc      	itt	le
 8027534:	1c73      	addle	r3, r6, #1
 8027536:	63a3      	strle	r3, [r4, #56]	; 0x38
 8027538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802753a:	42ab      	cmp	r3, r5
 802753c:	bfc8      	it	gt
 802753e:	462b      	movgt	r3, r5
 8027540:	ea4f 1560 	mov.w	r5, r0, asr #5
 8027544:	bfc8      	it	gt
 8027546:	6323      	strgt	r3, [r4, #48]	; 0x30
 8027548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802754a:	42ab      	cmp	r3, r5
 802754c:	bfd8      	it	le
 802754e:	462b      	movle	r3, r5
 8027550:	ea4f 1561 	mov.w	r5, r1, asr #5
 8027554:	bfdc      	itt	le
 8027556:	3301      	addle	r3, #1
 8027558:	63a3      	strle	r3, [r4, #56]	; 0x38
 802755a:	9b05      	ldr	r3, [sp, #20]
 802755c:	eba3 0a01 	sub.w	sl, r3, r1
 8027560:	1143      	asrs	r3, r0, #5
 8027562:	429e      	cmp	r6, r3
 8027564:	f040 8119 	bne.w	802779a <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8027568:	9b05      	ldr	r3, [sp, #20]
 802756a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802756e:	9b03      	ldr	r3, [sp, #12]
 8027570:	459e      	cmp	lr, r3
 8027572:	d12c      	bne.n	80275ce <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8027574:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027578:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 802757c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8027580:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8027584:	4291      	cmp	r1, r2
 8027586:	d037      	beq.n	80275f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027588:	8b61      	ldrh	r1, [r4, #26]
 802758a:	8b22      	ldrh	r2, [r4, #24]
 802758c:	430a      	orrs	r2, r1
 802758e:	d00b      	beq.n	80275a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8027590:	2b00      	cmp	r3, #0
 8027592:	db09      	blt.n	80275a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8027594:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8027596:	429a      	cmp	r2, r3
 8027598:	dd06      	ble.n	80275a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802759a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802759e:	429a      	cmp	r2, r3
 80275a0:	d308      	bcc.n	80275b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80275a2:	2301      	movs	r3, #1
 80275a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80275a8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80275ac:	82e6      	strh	r6, [r4, #22]
 80275ae:	2300      	movs	r3, #0
 80275b0:	8323      	strh	r3, [r4, #24]
 80275b2:	e0c6      	b.n	8027742 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80275b4:	f104 0314 	add.w	r3, r4, #20
 80275b8:	6922      	ldr	r2, [r4, #16]
 80275ba:	cb03      	ldmia	r3!, {r0, r1}
 80275bc:	6010      	str	r0, [r2, #0]
 80275be:	6051      	str	r1, [r2, #4]
 80275c0:	6923      	ldr	r3, [r4, #16]
 80275c2:	3308      	adds	r3, #8
 80275c4:	6123      	str	r3, [r4, #16]
 80275c6:	68a3      	ldr	r3, [r4, #8]
 80275c8:	3301      	adds	r3, #1
 80275ca:	60a3      	str	r3, [r4, #8]
 80275cc:	e7ec      	b.n	80275a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80275ce:	9b05      	ldr	r3, [sp, #20]
 80275d0:	45ac      	cmp	ip, r5
 80275d2:	f001 011f 	and.w	r1, r1, #31
 80275d6:	8b20      	ldrh	r0, [r4, #24]
 80275d8:	f003 031f 	and.w	r3, r3, #31
 80275dc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80275e0:	9304      	str	r3, [sp, #16]
 80275e2:	9b03      	ldr	r3, [sp, #12]
 80275e4:	eba3 020e 	sub.w	r2, r3, lr
 80275e8:	d109      	bne.n	80275fe <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80275ea:	9b04      	ldr	r3, [sp, #16]
 80275ec:	4410      	add	r0, r2
 80275ee:	4419      	add	r1, r3
 80275f0:	8320      	strh	r0, [r4, #24]
 80275f2:	fb02 8201 	mla	r2, r2, r1, r8
 80275f6:	8362      	strh	r2, [r4, #26]
 80275f8:	b013      	add	sp, #76	; 0x4c
 80275fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275fe:	f1ba 0f00 	cmp.w	sl, #0
 8027602:	f2c0 80a0 	blt.w	8027746 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8027606:	f1c1 0320 	rsb	r3, r1, #32
 802760a:	f04f 0b20 	mov.w	fp, #32
 802760e:	435a      	muls	r2, r3
 8027610:	2301      	movs	r3, #1
 8027612:	9302      	str	r3, [sp, #8]
 8027614:	4459      	add	r1, fp
 8027616:	fb92 f7fa 	sdiv	r7, r2, sl
 802761a:	fb0a 2217 	mls	r2, sl, r7, r2
 802761e:	2a00      	cmp	r2, #0
 8027620:	bfbc      	itt	lt
 8027622:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8027626:	4452      	addlt	r2, sl
 8027628:	fb07 8101 	mla	r1, r7, r1, r8
 802762c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8027630:	4438      	add	r0, r7
 8027632:	b20b      	sxth	r3, r1
 8027634:	9902      	ldr	r1, [sp, #8]
 8027636:	b200      	sxth	r0, r0
 8027638:	9301      	str	r3, [sp, #4]
 802763a:	8363      	strh	r3, [r4, #26]
 802763c:	186b      	adds	r3, r5, r1
 802763e:	0435      	lsls	r5, r6, #16
 8027640:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8027644:	8320      	strh	r0, [r4, #24]
 8027646:	eb03 0905 	add.w	r9, r3, r5
 802764a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802764e:	9300      	str	r3, [sp, #0]
 8027650:	45c1      	cmp	r9, r8
 8027652:	9505      	str	r5, [sp, #20]
 8027654:	d014      	beq.n	8027680 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8027656:	9b01      	ldr	r3, [sp, #4]
 8027658:	4303      	orrs	r3, r0
 802765a:	d00b      	beq.n	8027674 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802765c:	2900      	cmp	r1, #0
 802765e:	db09      	blt.n	8027674 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8027660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027662:	428b      	cmp	r3, r1
 8027664:	dd06      	ble.n	8027674 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8027666:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802766a:	4299      	cmp	r1, r3
 802766c:	d374      	bcc.n	8027758 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 802766e:	2301      	movs	r3, #1
 8027670:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027674:	9b00      	ldr	r3, [sp, #0]
 8027676:	82e6      	strh	r6, [r4, #22]
 8027678:	82a3      	strh	r3, [r4, #20]
 802767a:	2300      	movs	r3, #0
 802767c:	8323      	strh	r3, [r4, #24]
 802767e:	8363      	strh	r3, [r4, #26]
 8027680:	9900      	ldr	r1, [sp, #0]
 8027682:	eb0e 0307 	add.w	r3, lr, r7
 8027686:	458c      	cmp	ip, r1
 8027688:	d04e      	beq.n	8027728 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802768a:	9903      	ldr	r1, [sp, #12]
 802768c:	eba2 020a 	sub.w	r2, r2, sl
 8027690:	1ac9      	subs	r1, r1, r3
 8027692:	9201      	str	r2, [sp, #4]
 8027694:	440f      	add	r7, r1
 8027696:	017f      	lsls	r7, r7, #5
 8027698:	fb97 fefa 	sdiv	lr, r7, sl
 802769c:	fb0a 771e 	mls	r7, sl, lr, r7
 80276a0:	2f00      	cmp	r7, #0
 80276a2:	bfbc      	itt	lt
 80276a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80276a8:	4457      	addlt	r7, sl
 80276aa:	f10e 0101 	add.w	r1, lr, #1
 80276ae:	9106      	str	r1, [sp, #24]
 80276b0:	9a01      	ldr	r2, [sp, #4]
 80276b2:	8b20      	ldrh	r0, [r4, #24]
 80276b4:	19d2      	adds	r2, r2, r7
 80276b6:	8b61      	ldrh	r1, [r4, #26]
 80276b8:	9d02      	ldr	r5, [sp, #8]
 80276ba:	9201      	str	r2, [sp, #4]
 80276bc:	bf5b      	ittet	pl
 80276be:	eba2 020a 	subpl.w	r2, r2, sl
 80276c2:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80276c6:	46f0      	movmi	r8, lr
 80276c8:	9201      	strpl	r2, [sp, #4]
 80276ca:	9a00      	ldr	r2, [sp, #0]
 80276cc:	4440      	add	r0, r8
 80276ce:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80276d2:	4443      	add	r3, r8
 80276d4:	442a      	add	r2, r5
 80276d6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80276da:	9d05      	ldr	r5, [sp, #20]
 80276dc:	b200      	sxth	r0, r0
 80276de:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80276e2:	b209      	sxth	r1, r1
 80276e4:	4415      	add	r5, r2
 80276e6:	8320      	strh	r0, [r4, #24]
 80276e8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80276ec:	8361      	strh	r1, [r4, #26]
 80276ee:	9200      	str	r2, [sp, #0]
 80276f0:	454d      	cmp	r5, r9
 80276f2:	d016      	beq.n	8027722 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80276f4:	4301      	orrs	r1, r0
 80276f6:	d00d      	beq.n	8027714 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80276f8:	f1b8 0f00 	cmp.w	r8, #0
 80276fc:	db0a      	blt.n	8027714 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80276fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027700:	4541      	cmp	r1, r8
 8027702:	dd07      	ble.n	8027714 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8027704:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027708:	4288      	cmp	r0, r1
 802770a:	d335      	bcc.n	8027778 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802770c:	f04f 0101 	mov.w	r1, #1
 8027710:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8027714:	9900      	ldr	r1, [sp, #0]
 8027716:	82e6      	strh	r6, [r4, #22]
 8027718:	82a1      	strh	r1, [r4, #20]
 802771a:	f04f 0100 	mov.w	r1, #0
 802771e:	8321      	strh	r1, [r4, #24]
 8027720:	8361      	strh	r1, [r4, #26]
 8027722:	9a00      	ldr	r2, [sp, #0]
 8027724:	4594      	cmp	ip, r2
 8027726:	d1c3      	bne.n	80276b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8027728:	9a03      	ldr	r2, [sp, #12]
 802772a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802772e:	1ad3      	subs	r3, r2, r3
 8027730:	8b22      	ldrh	r2, [r4, #24]
 8027732:	441a      	add	r2, r3
 8027734:	8322      	strh	r2, [r4, #24]
 8027736:	9a04      	ldr	r2, [sp, #16]
 8027738:	3220      	adds	r2, #32
 802773a:	eba2 020b 	sub.w	r2, r2, fp
 802773e:	fb03 c302 	mla	r3, r3, r2, ip
 8027742:	8363      	strh	r3, [r4, #26]
 8027744:	e758      	b.n	80275f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027746:	f04f 33ff 	mov.w	r3, #4294967295
 802774a:	434a      	muls	r2, r1
 802774c:	f1ca 0a00 	rsb	sl, sl, #0
 8027750:	f04f 0b00 	mov.w	fp, #0
 8027754:	9302      	str	r3, [sp, #8]
 8027756:	e75d      	b.n	8027614 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8027758:	f104 0314 	add.w	r3, r4, #20
 802775c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027760:	cb03      	ldmia	r3!, {r0, r1}
 8027762:	f8c8 0000 	str.w	r0, [r8]
 8027766:	f8c8 1004 	str.w	r1, [r8, #4]
 802776a:	6923      	ldr	r3, [r4, #16]
 802776c:	3308      	adds	r3, #8
 802776e:	6123      	str	r3, [r4, #16]
 8027770:	68a3      	ldr	r3, [r4, #8]
 8027772:	3301      	adds	r3, #1
 8027774:	60a3      	str	r3, [r4, #8]
 8027776:	e77d      	b.n	8027674 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8027778:	f104 0814 	add.w	r8, r4, #20
 802777c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027780:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027784:	f8c9 0000 	str.w	r0, [r9]
 8027788:	f8c9 1004 	str.w	r1, [r9, #4]
 802778c:	6921      	ldr	r1, [r4, #16]
 802778e:	3108      	adds	r1, #8
 8027790:	6121      	str	r1, [r4, #16]
 8027792:	68a1      	ldr	r1, [r4, #8]
 8027794:	3101      	adds	r1, #1
 8027796:	60a1      	str	r1, [r4, #8]
 8027798:	e7bc      	b.n	8027714 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802779a:	1a83      	subs	r3, r0, r2
 802779c:	9301      	str	r3, [sp, #4]
 802779e:	f1ba 0f00 	cmp.w	sl, #0
 80277a2:	f040 8094 	bne.w	80278ce <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80277a6:	9a01      	ldr	r2, [sp, #4]
 80277a8:	0049      	lsls	r1, r1, #1
 80277aa:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80277ae:	2a00      	cmp	r2, #0
 80277b0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80277b4:	8b62      	ldrh	r2, [r4, #26]
 80277b6:	bfaa      	itet	ge
 80277b8:	f04f 0a20 	movge.w	sl, #32
 80277bc:	f04f 38ff 	movlt.w	r8, #4294967295
 80277c0:	f04f 0801 	movge.w	r8, #1
 80277c4:	8b21      	ldrh	r1, [r4, #24]
 80277c6:	ebaa 0e0e 	sub.w	lr, sl, lr
 80277ca:	4471      	add	r1, lr
 80277cc:	fb0e 2e03 	mla	lr, lr, r3, r2
 80277d0:	eb08 0206 	add.w	r2, r8, r6
 80277d4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80277d8:	b209      	sxth	r1, r1
 80277da:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80277de:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80277e2:	8321      	strh	r1, [r4, #24]
 80277e4:	fa0f fe8e 	sxth.w	lr, lr
 80277e8:	42b7      	cmp	r7, r6
 80277ea:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80277ee:	d013      	beq.n	8027818 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 80277f0:	ea51 010e 	orrs.w	r1, r1, lr
 80277f4:	d00b      	beq.n	802780e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80277f6:	2800      	cmp	r0, #0
 80277f8:	db09      	blt.n	802780e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80277fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80277fc:	4281      	cmp	r1, r0
 80277fe:	dd06      	ble.n	802780e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8027800:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027804:	4288      	cmp	r0, r1
 8027806:	d339      	bcc.n	802787c <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8027808:	2101      	movs	r1, #1
 802780a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802780e:	2100      	movs	r1, #0
 8027810:	82a5      	strh	r5, [r4, #20]
 8027812:	82e2      	strh	r2, [r4, #22]
 8027814:	8321      	strh	r1, [r4, #24]
 8027816:	8361      	strh	r1, [r4, #26]
 8027818:	f1aa 0610 	sub.w	r6, sl, #16
 802781c:	f04f 0e00 	mov.w	lr, #0
 8027820:	f04f 0b01 	mov.w	fp, #1
 8027824:	0076      	lsls	r6, r6, #1
 8027826:	fb06 f703 	mul.w	r7, r6, r3
 802782a:	b236      	sxth	r6, r6
 802782c:	b23f      	sxth	r7, r7
 802782e:	ea46 0107 	orr.w	r1, r6, r7
 8027832:	9100      	str	r1, [sp, #0]
 8027834:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027836:	428a      	cmp	r2, r1
 8027838:	d03e      	beq.n	80278b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802783a:	4442      	add	r2, r8
 802783c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8027840:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8027844:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8027848:	8326      	strh	r6, [r4, #24]
 802784a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802784e:	8367      	strh	r7, [r4, #26]
 8027850:	4584      	cmp	ip, r0
 8027852:	d0ef      	beq.n	8027834 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8027854:	9800      	ldr	r0, [sp, #0]
 8027856:	b150      	cbz	r0, 802786e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8027858:	2900      	cmp	r1, #0
 802785a:	db08      	blt.n	802786e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802785c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802785e:	4288      	cmp	r0, r1
 8027860:	dd05      	ble.n	802786e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8027862:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027866:	4288      	cmp	r0, r1
 8027868:	d315      	bcc.n	8027896 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802786a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 802786e:	82a5      	strh	r5, [r4, #20]
 8027870:	82e2      	strh	r2, [r4, #22]
 8027872:	f8a4 e018 	strh.w	lr, [r4, #24]
 8027876:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802787a:	e7db      	b.n	8027834 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 802787c:	f104 0614 	add.w	r6, r4, #20
 8027880:	6927      	ldr	r7, [r4, #16]
 8027882:	ce03      	ldmia	r6!, {r0, r1}
 8027884:	6038      	str	r0, [r7, #0]
 8027886:	6079      	str	r1, [r7, #4]
 8027888:	6921      	ldr	r1, [r4, #16]
 802788a:	3108      	adds	r1, #8
 802788c:	6121      	str	r1, [r4, #16]
 802788e:	68a1      	ldr	r1, [r4, #8]
 8027890:	3101      	adds	r1, #1
 8027892:	60a1      	str	r1, [r4, #8]
 8027894:	e7bb      	b.n	802780e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8027896:	f104 0c14 	add.w	ip, r4, #20
 802789a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802789e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80278a2:	f8c9 0000 	str.w	r0, [r9]
 80278a6:	f8c9 1004 	str.w	r1, [r9, #4]
 80278aa:	6921      	ldr	r1, [r4, #16]
 80278ac:	3108      	adds	r1, #8
 80278ae:	6121      	str	r1, [r4, #16]
 80278b0:	68a1      	ldr	r1, [r4, #8]
 80278b2:	3101      	adds	r1, #1
 80278b4:	60a1      	str	r1, [r4, #8]
 80278b6:	e7da      	b.n	802786e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80278b8:	9a03      	ldr	r2, [sp, #12]
 80278ba:	8b61      	ldrh	r1, [r4, #26]
 80278bc:	f1a2 0c20 	sub.w	ip, r2, #32
 80278c0:	8b22      	ldrh	r2, [r4, #24]
 80278c2:	44d4      	add	ip, sl
 80278c4:	4462      	add	r2, ip
 80278c6:	fb0c 1303 	mla	r3, ip, r3, r1
 80278ca:	8322      	strh	r2, [r4, #24]
 80278cc:	e739      	b.n	8027742 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80278ce:	9b01      	ldr	r3, [sp, #4]
 80278d0:	2b00      	cmp	r3, #0
 80278d2:	db3f      	blt.n	8027954 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 80278d4:	2201      	movs	r2, #1
 80278d6:	f1ce 0320 	rsb	r3, lr, #32
 80278da:	920b      	str	r2, [sp, #44]	; 0x2c
 80278dc:	2220      	movs	r2, #32
 80278de:	fb0a f303 	mul.w	r3, sl, r3
 80278e2:	9202      	str	r2, [sp, #8]
 80278e4:	9a01      	ldr	r2, [sp, #4]
 80278e6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80278ea:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80278ee:	fb93 f7f2 	sdiv	r7, r3, r2
 80278f2:	fb02 3317 	mls	r3, r2, r7, r3
 80278f6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80278fa:	2b00      	cmp	r3, #0
 80278fc:	9308      	str	r3, [sp, #32]
 80278fe:	bfbc      	itt	lt
 8027900:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8027904:	189b      	addlt	r3, r3, r2
 8027906:	eb07 0b01 	add.w	fp, r7, r1
 802790a:	bfb8      	it	lt
 802790c:	9308      	strlt	r3, [sp, #32]
 802790e:	ea4f 136b 	mov.w	r3, fp, asr #5
 8027912:	9304      	str	r3, [sp, #16]
 8027914:	9b02      	ldr	r3, [sp, #8]
 8027916:	4573      	cmp	r3, lr
 8027918:	d133      	bne.n	8027982 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802791a:	9b04      	ldr	r3, [sp, #16]
 802791c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8027920:	454b      	cmp	r3, r9
 8027922:	d045      	beq.n	80279b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8027924:	8b62      	ldrh	r2, [r4, #26]
 8027926:	8b23      	ldrh	r3, [r4, #24]
 8027928:	4313      	orrs	r3, r2
 802792a:	d00c      	beq.n	8027946 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802792c:	f1b8 0f00 	cmp.w	r8, #0
 8027930:	db09      	blt.n	8027946 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027934:	4543      	cmp	r3, r8
 8027936:	dd06      	ble.n	8027946 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027938:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802793c:	429a      	cmp	r2, r3
 802793e:	d313      	bcc.n	8027968 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8027940:	2301      	movs	r3, #1
 8027942:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027946:	9b04      	ldr	r3, [sp, #16]
 8027948:	82e6      	strh	r6, [r4, #22]
 802794a:	82a3      	strh	r3, [r4, #20]
 802794c:	2300      	movs	r3, #0
 802794e:	8323      	strh	r3, [r4, #24]
 8027950:	8363      	strh	r3, [r4, #26]
 8027952:	e02d      	b.n	80279b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8027954:	9a01      	ldr	r2, [sp, #4]
 8027956:	fb0a f30e 	mul.w	r3, sl, lr
 802795a:	4252      	negs	r2, r2
 802795c:	9201      	str	r2, [sp, #4]
 802795e:	f04f 32ff 	mov.w	r2, #4294967295
 8027962:	920b      	str	r2, [sp, #44]	; 0x2c
 8027964:	2200      	movs	r2, #0
 8027966:	e7bc      	b.n	80278e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8027968:	f104 0314 	add.w	r3, r4, #20
 802796c:	6922      	ldr	r2, [r4, #16]
 802796e:	cb03      	ldmia	r3!, {r0, r1}
 8027970:	6010      	str	r0, [r2, #0]
 8027972:	6051      	str	r1, [r2, #4]
 8027974:	6923      	ldr	r3, [r4, #16]
 8027976:	3308      	adds	r3, #8
 8027978:	6123      	str	r3, [r4, #16]
 802797a:	68a3      	ldr	r3, [r4, #8]
 802797c:	3301      	adds	r3, #1
 802797e:	60a3      	str	r3, [r4, #8]
 8027980:	e7e1      	b.n	8027946 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027982:	f00b 031f 	and.w	r3, fp, #31
 8027986:	f001 011f 	and.w	r1, r1, #31
 802798a:	8b20      	ldrh	r0, [r4, #24]
 802798c:	9309      	str	r3, [sp, #36]	; 0x24
 802798e:	9b02      	ldr	r3, [sp, #8]
 8027990:	eba3 020e 	sub.w	r2, r3, lr
 8027994:	8b63      	ldrh	r3, [r4, #26]
 8027996:	9300      	str	r3, [sp, #0]
 8027998:	9b04      	ldr	r3, [sp, #16]
 802799a:	42ab      	cmp	r3, r5
 802799c:	f040 80ef 	bne.w	8027b7e <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 80279a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80279a2:	4410      	add	r0, r2
 80279a4:	4419      	add	r1, r3
 80279a6:	9b00      	ldr	r3, [sp, #0]
 80279a8:	8320      	strh	r0, [r4, #24]
 80279aa:	fb02 3101 	mla	r1, r2, r1, r3
 80279ae:	8361      	strh	r1, [r4, #26]
 80279b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80279b2:	9904      	ldr	r1, [sp, #16]
 80279b4:	4433      	add	r3, r6
 80279b6:	9300      	str	r3, [sp, #0]
 80279b8:	9a00      	ldr	r2, [sp, #0]
 80279ba:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80279be:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 80279c2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80279c6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80279ca:	4288      	cmp	r0, r1
 80279cc:	d018      	beq.n	8027a00 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 80279ce:	8b60      	ldrh	r0, [r4, #26]
 80279d0:	8b21      	ldrh	r1, [r4, #24]
 80279d2:	ea50 0201 	orrs.w	r2, r0, r1
 80279d6:	d00c      	beq.n	80279f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80279d8:	2b00      	cmp	r3, #0
 80279da:	db0a      	blt.n	80279f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80279dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80279de:	4299      	cmp	r1, r3
 80279e0:	dd07      	ble.n	80279f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80279e2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80279e6:	4299      	cmp	r1, r3
 80279e8:	f0c0 818b 	bcc.w	8027d02 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 80279ec:	2301      	movs	r3, #1
 80279ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80279f2:	9b04      	ldr	r3, [sp, #16]
 80279f4:	82a3      	strh	r3, [r4, #20]
 80279f6:	9b00      	ldr	r3, [sp, #0]
 80279f8:	82e3      	strh	r3, [r4, #22]
 80279fa:	2300      	movs	r3, #0
 80279fc:	8323      	strh	r3, [r4, #24]
 80279fe:	8363      	strh	r3, [r4, #26]
 8027a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027a02:	9a00      	ldr	r2, [sp, #0]
 8027a04:	4293      	cmp	r3, r2
 8027a06:	f000 808d 	beq.w	8027b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8027a0a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8027a0e:	9901      	ldr	r1, [sp, #4]
 8027a10:	9801      	ldr	r0, [sp, #4]
 8027a12:	fb93 f1f1 	sdiv	r1, r3, r1
 8027a16:	fb00 3311 	mls	r3, r0, r1, r3
 8027a1a:	9106      	str	r1, [sp, #24]
 8027a1c:	2b00      	cmp	r3, #0
 8027a1e:	9307      	str	r3, [sp, #28]
 8027a20:	da04      	bge.n	8027a2c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8027a22:	1e4b      	subs	r3, r1, #1
 8027a24:	9306      	str	r3, [sp, #24]
 8027a26:	9b07      	ldr	r3, [sp, #28]
 8027a28:	4403      	add	r3, r0
 8027a2a:	9307      	str	r3, [sp, #28]
 8027a2c:	9b08      	ldr	r3, [sp, #32]
 8027a2e:	f04f 0c00 	mov.w	ip, #0
 8027a32:	9901      	ldr	r1, [sp, #4]
 8027a34:	1a5b      	subs	r3, r3, r1
 8027a36:	4659      	mov	r1, fp
 8027a38:	9308      	str	r3, [sp, #32]
 8027a3a:	9b02      	ldr	r3, [sp, #8]
 8027a3c:	f1c3 0320 	rsb	r3, r3, #32
 8027a40:	930a      	str	r3, [sp, #40]	; 0x28
 8027a42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027a44:	9b02      	ldr	r3, [sp, #8]
 8027a46:	1a1b      	subs	r3, r3, r0
 8027a48:	9309      	str	r3, [sp, #36]	; 0x24
 8027a4a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8027a4e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8027a52:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8027a56:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8027a5a:	181b      	adds	r3, r3, r0
 8027a5c:	bf58      	it	pl
 8027a5e:	9801      	ldrpl	r0, [sp, #4]
 8027a60:	9308      	str	r3, [sp, #32]
 8027a62:	bf54      	ite	pl
 8027a64:	1a1b      	subpl	r3, r3, r0
 8027a66:	9d06      	ldrmi	r5, [sp, #24]
 8027a68:	9802      	ldr	r0, [sp, #8]
 8027a6a:	bf5e      	ittt	pl
 8027a6c:	9308      	strpl	r3, [sp, #32]
 8027a6e:	9b06      	ldrpl	r3, [sp, #24]
 8027a70:	1c5d      	addpl	r5, r3, #1
 8027a72:	44ab      	add	fp, r5
 8027a74:	ea4f 136b 	mov.w	r3, fp, asr #5
 8027a78:	9304      	str	r3, [sp, #16]
 8027a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a7c:	4283      	cmp	r3, r0
 8027a7e:	f040 815a 	bne.w	8027d36 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8027a82:	9b04      	ldr	r3, [sp, #16]
 8027a84:	9a00      	ldr	r2, [sp, #0]
 8027a86:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8027a8a:	4543      	cmp	r3, r8
 8027a8c:	d01a      	beq.n	8027ac4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027a8e:	8b61      	ldrh	r1, [r4, #26]
 8027a90:	8b23      	ldrh	r3, [r4, #24]
 8027a92:	430b      	orrs	r3, r1
 8027a94:	d00e      	beq.n	8027ab4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027a96:	f1be 0f00 	cmp.w	lr, #0
 8027a9a:	db0b      	blt.n	8027ab4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027a9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027a9e:	4573      	cmp	r3, lr
 8027aa0:	dd08      	ble.n	8027ab4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027aa2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027aa6:	4299      	cmp	r1, r3
 8027aa8:	f0c0 8138 	bcc.w	8027d1c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8027aac:	f04f 0301 	mov.w	r3, #1
 8027ab0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027ab4:	9b04      	ldr	r3, [sp, #16]
 8027ab6:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027aba:	82a3      	strh	r3, [r4, #20]
 8027abc:	9b00      	ldr	r3, [sp, #0]
 8027abe:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027ac2:	82e3      	strh	r3, [r4, #22]
 8027ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027ac6:	9a00      	ldr	r2, [sp, #0]
 8027ac8:	441a      	add	r2, r3
 8027aca:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027ace:	9200      	str	r2, [sp, #0]
 8027ad0:	9900      	ldr	r1, [sp, #0]
 8027ad2:	9a04      	ldr	r2, [sp, #16]
 8027ad4:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8027ad8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027adc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027ae0:	4288      	cmp	r0, r1
 8027ae2:	d01a      	beq.n	8027b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8027ae4:	8b60      	ldrh	r0, [r4, #26]
 8027ae6:	8b21      	ldrh	r1, [r4, #24]
 8027ae8:	ea50 0201 	orrs.w	r2, r0, r1
 8027aec:	d00d      	beq.n	8027b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027aee:	2b00      	cmp	r3, #0
 8027af0:	db0b      	blt.n	8027b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027af2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027af4:	4299      	cmp	r1, r3
 8027af6:	dd08      	ble.n	8027b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027af8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027afc:	4299      	cmp	r1, r3
 8027afe:	f0c0 81f9 	bcc.w	8027ef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8027b02:	f04f 0301 	mov.w	r3, #1
 8027b06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027b0a:	9b04      	ldr	r3, [sp, #16]
 8027b0c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027b10:	82a3      	strh	r3, [r4, #20]
 8027b12:	9b00      	ldr	r3, [sp, #0]
 8027b14:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027b18:	82e3      	strh	r3, [r4, #22]
 8027b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027b1c:	4659      	mov	r1, fp
 8027b1e:	9a00      	ldr	r2, [sp, #0]
 8027b20:	4293      	cmp	r3, r2
 8027b22:	d192      	bne.n	8027a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8027b24:	9b02      	ldr	r3, [sp, #8]
 8027b26:	f1c3 0c20 	rsb	ip, r3, #32
 8027b2a:	9b05      	ldr	r3, [sp, #20]
 8027b2c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8027b30:	9b03      	ldr	r3, [sp, #12]
 8027b32:	459c      	cmp	ip, r3
 8027b34:	f040 81f8 	bne.w	8027f28 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8027b38:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027b3c:	9a00      	ldr	r2, [sp, #0]
 8027b3e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027b42:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8027b46:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027b4a:	4288      	cmp	r0, r1
 8027b4c:	f43f ad54 	beq.w	80275f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027b50:	8b60      	ldrh	r0, [r4, #26]
 8027b52:	8b21      	ldrh	r1, [r4, #24]
 8027b54:	ea50 0201 	orrs.w	r2, r0, r1
 8027b58:	d00c      	beq.n	8027b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027b5a:	2b00      	cmp	r3, #0
 8027b5c:	db0a      	blt.n	8027b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027b5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027b60:	4299      	cmp	r1, r3
 8027b62:	dd07      	ble.n	8027b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027b64:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027b68:	4299      	cmp	r1, r3
 8027b6a:	f0c0 81d0 	bcc.w	8027f0e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8027b6e:	2301      	movs	r3, #1
 8027b70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027b74:	9b00      	ldr	r3, [sp, #0]
 8027b76:	f8a4 e014 	strh.w	lr, [r4, #20]
 8027b7a:	82e3      	strh	r3, [r4, #22]
 8027b7c:	e517      	b.n	80275ae <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8027b7e:	2f00      	cmp	r7, #0
 8027b80:	f2c0 8097 	blt.w	8027cb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8027b84:	2301      	movs	r3, #1
 8027b86:	f1c1 0c20 	rsb	ip, r1, #32
 8027b8a:	9307      	str	r3, [sp, #28]
 8027b8c:	2320      	movs	r3, #32
 8027b8e:	fb02 f20c 	mul.w	r2, r2, ip
 8027b92:	9306      	str	r3, [sp, #24]
 8027b94:	9b06      	ldr	r3, [sp, #24]
 8027b96:	fb92 fcf7 	sdiv	ip, r2, r7
 8027b9a:	fb07 221c 	mls	r2, r7, ip, r2
 8027b9e:	4419      	add	r1, r3
 8027ba0:	9b00      	ldr	r3, [sp, #0]
 8027ba2:	2a00      	cmp	r2, #0
 8027ba4:	bfbc      	itt	lt
 8027ba6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8027baa:	19d2      	addlt	r2, r2, r7
 8027bac:	fb0c 3101 	mla	r1, ip, r1, r3
 8027bb0:	9b07      	ldr	r3, [sp, #28]
 8027bb2:	4460      	add	r0, ip
 8027bb4:	441d      	add	r5, r3
 8027bb6:	0433      	lsls	r3, r6, #16
 8027bb8:	b200      	sxth	r0, r0
 8027bba:	930a      	str	r3, [sp, #40]	; 0x28
 8027bbc:	18eb      	adds	r3, r5, r3
 8027bbe:	b209      	sxth	r1, r1
 8027bc0:	8320      	strh	r0, [r4, #24]
 8027bc2:	454b      	cmp	r3, r9
 8027bc4:	8361      	strh	r1, [r4, #26]
 8027bc6:	d014      	beq.n	8027bf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8027bc8:	ea50 0301 	orrs.w	r3, r0, r1
 8027bcc:	d00c      	beq.n	8027be8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027bce:	f1b8 0f00 	cmp.w	r8, #0
 8027bd2:	db09      	blt.n	8027be8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027bd6:	4543      	cmp	r3, r8
 8027bd8:	dd06      	ble.n	8027be8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027bda:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027bde:	4299      	cmp	r1, r3
 8027be0:	d36e      	bcc.n	8027cc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8027be2:	2301      	movs	r3, #1
 8027be4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027be8:	2300      	movs	r3, #0
 8027bea:	82a5      	strh	r5, [r4, #20]
 8027bec:	82e6      	strh	r6, [r4, #22]
 8027bee:	8323      	strh	r3, [r4, #24]
 8027bf0:	8363      	strh	r3, [r4, #26]
 8027bf2:	9904      	ldr	r1, [sp, #16]
 8027bf4:	eb0e 030c 	add.w	r3, lr, ip
 8027bf8:	42a9      	cmp	r1, r5
 8027bfa:	d04d      	beq.n	8027c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8027bfc:	9902      	ldr	r1, [sp, #8]
 8027bfe:	1bd2      	subs	r2, r2, r7
 8027c00:	1ac9      	subs	r1, r1, r3
 8027c02:	9200      	str	r2, [sp, #0]
 8027c04:	448c      	add	ip, r1
 8027c06:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8027c0a:	fb9c fef7 	sdiv	lr, ip, r7
 8027c0e:	fb07 cc1e 	mls	ip, r7, lr, ip
 8027c12:	f1bc 0f00 	cmp.w	ip, #0
 8027c16:	bfbc      	itt	lt
 8027c18:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8027c1c:	44bc      	addlt	ip, r7
 8027c1e:	f10e 0101 	add.w	r1, lr, #1
 8027c22:	910d      	str	r1, [sp, #52]	; 0x34
 8027c24:	9a00      	ldr	r2, [sp, #0]
 8027c26:	8b20      	ldrh	r0, [r4, #24]
 8027c28:	eb12 020c 	adds.w	r2, r2, ip
 8027c2c:	8b61      	ldrh	r1, [r4, #26]
 8027c2e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027c32:	9200      	str	r2, [sp, #0]
 8027c34:	bf5b      	ittet	pl
 8027c36:	1bd2      	subpl	r2, r2, r7
 8027c38:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8027c3c:	46f0      	movmi	r8, lr
 8027c3e:	9200      	strpl	r2, [sp, #0]
 8027c40:	9a07      	ldr	r2, [sp, #28]
 8027c42:	4440      	add	r0, r8
 8027c44:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8027c48:	4443      	add	r3, r8
 8027c4a:	4415      	add	r5, r2
 8027c4c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027c52:	b200      	sxth	r0, r0
 8027c54:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027c58:	442a      	add	r2, r5
 8027c5a:	b209      	sxth	r1, r1
 8027c5c:	8320      	strh	r0, [r4, #24]
 8027c5e:	454a      	cmp	r2, r9
 8027c60:	8361      	strh	r1, [r4, #26]
 8027c62:	d016      	beq.n	8027c92 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8027c64:	ea50 0201 	orrs.w	r2, r0, r1
 8027c68:	d00d      	beq.n	8027c86 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027c6a:	f1b8 0f00 	cmp.w	r8, #0
 8027c6e:	db0a      	blt.n	8027c86 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027c70:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027c72:	4541      	cmp	r1, r8
 8027c74:	dd07      	ble.n	8027c86 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027c76:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027c7a:	4288      	cmp	r0, r1
 8027c7c:	d330      	bcc.n	8027ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8027c7e:	f04f 0201 	mov.w	r2, #1
 8027c82:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027c86:	f04f 0200 	mov.w	r2, #0
 8027c8a:	82a5      	strh	r5, [r4, #20]
 8027c8c:	82e6      	strh	r6, [r4, #22]
 8027c8e:	8322      	strh	r2, [r4, #24]
 8027c90:	8362      	strh	r2, [r4, #26]
 8027c92:	9904      	ldr	r1, [sp, #16]
 8027c94:	42a9      	cmp	r1, r5
 8027c96:	d1c5      	bne.n	8027c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8027c98:	9a02      	ldr	r2, [sp, #8]
 8027c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027c9c:	1ad3      	subs	r3, r2, r3
 8027c9e:	8b22      	ldrh	r2, [r4, #24]
 8027ca0:	3120      	adds	r1, #32
 8027ca2:	441a      	add	r2, r3
 8027ca4:	8322      	strh	r2, [r4, #24]
 8027ca6:	9a06      	ldr	r2, [sp, #24]
 8027ca8:	1a89      	subs	r1, r1, r2
 8027caa:	8b62      	ldrh	r2, [r4, #26]
 8027cac:	fb03 2301 	mla	r3, r3, r1, r2
 8027cb0:	e64e      	b.n	8027950 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8027cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8027cb6:	434a      	muls	r2, r1
 8027cb8:	427f      	negs	r7, r7
 8027cba:	9307      	str	r3, [sp, #28]
 8027cbc:	2300      	movs	r3, #0
 8027cbe:	e768      	b.n	8027b92 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8027cc0:	f104 0314 	add.w	r3, r4, #20
 8027cc4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027cc8:	cb03      	ldmia	r3!, {r0, r1}
 8027cca:	f8c8 0000 	str.w	r0, [r8]
 8027cce:	f8c8 1004 	str.w	r1, [r8, #4]
 8027cd2:	6923      	ldr	r3, [r4, #16]
 8027cd4:	3308      	adds	r3, #8
 8027cd6:	6123      	str	r3, [r4, #16]
 8027cd8:	68a3      	ldr	r3, [r4, #8]
 8027cda:	3301      	adds	r3, #1
 8027cdc:	60a3      	str	r3, [r4, #8]
 8027cde:	e783      	b.n	8027be8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027ce0:	f104 0814 	add.w	r8, r4, #20
 8027ce4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027ce8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027cec:	f8c9 0000 	str.w	r0, [r9]
 8027cf0:	f8c9 1004 	str.w	r1, [r9, #4]
 8027cf4:	6921      	ldr	r1, [r4, #16]
 8027cf6:	3108      	adds	r1, #8
 8027cf8:	6121      	str	r1, [r4, #16]
 8027cfa:	68a1      	ldr	r1, [r4, #8]
 8027cfc:	3101      	adds	r1, #1
 8027cfe:	60a1      	str	r1, [r4, #8]
 8027d00:	e7c1      	b.n	8027c86 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027d02:	f104 0314 	add.w	r3, r4, #20
 8027d06:	6925      	ldr	r5, [r4, #16]
 8027d08:	cb03      	ldmia	r3!, {r0, r1}
 8027d0a:	6028      	str	r0, [r5, #0]
 8027d0c:	6069      	str	r1, [r5, #4]
 8027d0e:	6923      	ldr	r3, [r4, #16]
 8027d10:	3308      	adds	r3, #8
 8027d12:	6123      	str	r3, [r4, #16]
 8027d14:	68a3      	ldr	r3, [r4, #8]
 8027d16:	3301      	adds	r3, #1
 8027d18:	60a3      	str	r3, [r4, #8]
 8027d1a:	e66a      	b.n	80279f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027d1c:	f104 0314 	add.w	r3, r4, #20
 8027d20:	6925      	ldr	r5, [r4, #16]
 8027d22:	cb03      	ldmia	r3!, {r0, r1}
 8027d24:	6028      	str	r0, [r5, #0]
 8027d26:	6069      	str	r1, [r5, #4]
 8027d28:	6923      	ldr	r3, [r4, #16]
 8027d2a:	3308      	adds	r3, #8
 8027d2c:	6123      	str	r3, [r4, #16]
 8027d2e:	68a3      	ldr	r3, [r4, #8]
 8027d30:	3301      	adds	r3, #1
 8027d32:	60a3      	str	r3, [r4, #8]
 8027d34:	e6be      	b.n	8027ab4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027d36:	f00b 031f 	and.w	r3, fp, #31
 8027d3a:	114f      	asrs	r7, r1, #5
 8027d3c:	8b20      	ldrh	r0, [r4, #24]
 8027d3e:	f001 011f 	and.w	r1, r1, #31
 8027d42:	930f      	str	r3, [sp, #60]	; 0x3c
 8027d44:	9b04      	ldr	r3, [sp, #16]
 8027d46:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027d4a:	429f      	cmp	r7, r3
 8027d4c:	d10a      	bne.n	8027d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8027d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d50:	4418      	add	r0, r3
 8027d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027d54:	4419      	add	r1, r3
 8027d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d58:	8320      	strh	r0, [r4, #24]
 8027d5a:	fb03 9901 	mla	r9, r3, r1, r9
 8027d5e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8027d62:	e6af      	b.n	8027ac4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027d64:	2d00      	cmp	r5, #0
 8027d66:	f2c0 809b 	blt.w	8027ea0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8027d6a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027d6c:	f1c1 0320 	rsb	r3, r1, #32
 8027d70:	4373      	muls	r3, r6
 8027d72:	2601      	movs	r6, #1
 8027d74:	960e      	str	r6, [sp, #56]	; 0x38
 8027d76:	2620      	movs	r6, #32
 8027d78:	960d      	str	r6, [sp, #52]	; 0x34
 8027d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027d7c:	fb93 f6f5 	sdiv	r6, r3, r5
 8027d80:	4411      	add	r1, r2
 8027d82:	fb05 3316 	mls	r3, r5, r6, r3
 8027d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027d88:	2b00      	cmp	r3, #0
 8027d8a:	4417      	add	r7, r2
 8027d8c:	9a00      	ldr	r2, [sp, #0]
 8027d8e:	bfbc      	itt	lt
 8027d90:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027d94:	195b      	addlt	r3, r3, r5
 8027d96:	0412      	lsls	r2, r2, #16
 8027d98:	fb06 9101 	mla	r1, r6, r1, r9
 8027d9c:	4430      	add	r0, r6
 8027d9e:	eb07 0902 	add.w	r9, r7, r2
 8027da2:	9210      	str	r2, [sp, #64]	; 0x40
 8027da4:	b200      	sxth	r0, r0
 8027da6:	b209      	sxth	r1, r1
 8027da8:	45c1      	cmp	r9, r8
 8027daa:	8320      	strh	r0, [r4, #24]
 8027dac:	8361      	strh	r1, [r4, #26]
 8027dae:	d017      	beq.n	8027de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8027db0:	ea50 0201 	orrs.w	r2, r0, r1
 8027db4:	d00d      	beq.n	8027dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027db6:	f1be 0f00 	cmp.w	lr, #0
 8027dba:	db0a      	blt.n	8027dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027dbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027dbe:	4571      	cmp	r1, lr
 8027dc0:	dd07      	ble.n	8027dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027dc2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027dc6:	4288      	cmp	r0, r1
 8027dc8:	d372      	bcc.n	8027eb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8027dca:	f04f 0201 	mov.w	r2, #1
 8027dce:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027dd2:	9a00      	ldr	r2, [sp, #0]
 8027dd4:	82a7      	strh	r7, [r4, #20]
 8027dd6:	82e2      	strh	r2, [r4, #22]
 8027dd8:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027ddc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027de2:	eb02 0e06 	add.w	lr, r2, r6
 8027de6:	9a04      	ldr	r2, [sp, #16]
 8027de8:	42ba      	cmp	r2, r7
 8027dea:	d049      	beq.n	8027e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8027dec:	9a02      	ldr	r2, [sp, #8]
 8027dee:	1b5b      	subs	r3, r3, r5
 8027df0:	eba2 010e 	sub.w	r1, r2, lr
 8027df4:	440e      	add	r6, r1
 8027df6:	0176      	lsls	r6, r6, #5
 8027df8:	fb96 f8f5 	sdiv	r8, r6, r5
 8027dfc:	fb05 6618 	mls	r6, r5, r8, r6
 8027e00:	2e00      	cmp	r6, #0
 8027e02:	bfbc      	itt	lt
 8027e04:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8027e08:	1976      	addlt	r6, r6, r5
 8027e0a:	f108 0201 	add.w	r2, r8, #1
 8027e0e:	9211      	str	r2, [sp, #68]	; 0x44
 8027e10:	199b      	adds	r3, r3, r6
 8027e12:	8b20      	ldrh	r0, [r4, #24]
 8027e14:	8b61      	ldrh	r1, [r4, #26]
 8027e16:	bf54      	ite	pl
 8027e18:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8027e1c:	46c1      	movmi	r9, r8
 8027e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027e20:	bf58      	it	pl
 8027e22:	1b5b      	subpl	r3, r3, r5
 8027e24:	4448      	add	r0, r9
 8027e26:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8027e2a:	4417      	add	r7, r2
 8027e2c:	44ce      	add	lr, r9
 8027e2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027e30:	b200      	sxth	r0, r0
 8027e32:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027e36:	b209      	sxth	r1, r1
 8027e38:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8027e3c:	443a      	add	r2, r7
 8027e3e:	8320      	strh	r0, [r4, #24]
 8027e40:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027e44:	8361      	strh	r1, [r4, #26]
 8027e46:	4552      	cmp	r2, sl
 8027e48:	d017      	beq.n	8027e7a <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8027e4a:	ea50 0201 	orrs.w	r2, r0, r1
 8027e4e:	d00d      	beq.n	8027e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027e50:	f1b9 0f00 	cmp.w	r9, #0
 8027e54:	db0a      	blt.n	8027e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027e56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027e58:	4549      	cmp	r1, r9
 8027e5a:	dd07      	ble.n	8027e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027e5c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027e60:	4288      	cmp	r0, r1
 8027e62:	d336      	bcc.n	8027ed2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8027e64:	f04f 0201 	mov.w	r2, #1
 8027e68:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027e6c:	9a00      	ldr	r2, [sp, #0]
 8027e6e:	82a7      	strh	r7, [r4, #20]
 8027e70:	82e2      	strh	r2, [r4, #22]
 8027e72:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027e76:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027e7a:	9a04      	ldr	r2, [sp, #16]
 8027e7c:	42ba      	cmp	r2, r7
 8027e7e:	d1c7      	bne.n	8027e10 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8027e80:	9b02      	ldr	r3, [sp, #8]
 8027e82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027e84:	eba3 0e0e 	sub.w	lr, r3, lr
 8027e88:	8b23      	ldrh	r3, [r4, #24]
 8027e8a:	3120      	adds	r1, #32
 8027e8c:	4473      	add	r3, lr
 8027e8e:	8323      	strh	r3, [r4, #24]
 8027e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027e92:	1ac9      	subs	r1, r1, r3
 8027e94:	8b63      	ldrh	r3, [r4, #26]
 8027e96:	fb0e 3e01 	mla	lr, lr, r1, r3
 8027e9a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8027e9e:	e611      	b.n	8027ac4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027ea0:	f04f 36ff 	mov.w	r6, #4294967295
 8027ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027ea6:	426d      	negs	r5, r5
 8027ea8:	960e      	str	r6, [sp, #56]	; 0x38
 8027eaa:	2600      	movs	r6, #0
 8027eac:	434b      	muls	r3, r1
 8027eae:	e763      	b.n	8027d78 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8027eb0:	f104 0e14 	add.w	lr, r4, #20
 8027eb4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027eb8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8027ebc:	f8c8 0000 	str.w	r0, [r8]
 8027ec0:	f8c8 1004 	str.w	r1, [r8, #4]
 8027ec4:	6921      	ldr	r1, [r4, #16]
 8027ec6:	3108      	adds	r1, #8
 8027ec8:	6121      	str	r1, [r4, #16]
 8027eca:	68a1      	ldr	r1, [r4, #8]
 8027ecc:	3101      	adds	r1, #1
 8027ece:	60a1      	str	r1, [r4, #8]
 8027ed0:	e77f      	b.n	8027dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027ed2:	f104 0914 	add.w	r9, r4, #20
 8027ed6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027eda:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027ede:	f8ca 0000 	str.w	r0, [sl]
 8027ee2:	f8ca 1004 	str.w	r1, [sl, #4]
 8027ee6:	6921      	ldr	r1, [r4, #16]
 8027ee8:	3108      	adds	r1, #8
 8027eea:	6121      	str	r1, [r4, #16]
 8027eec:	68a1      	ldr	r1, [r4, #8]
 8027eee:	3101      	adds	r1, #1
 8027ef0:	60a1      	str	r1, [r4, #8]
 8027ef2:	e7bb      	b.n	8027e6c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027ef4:	f104 0314 	add.w	r3, r4, #20
 8027ef8:	6925      	ldr	r5, [r4, #16]
 8027efa:	cb03      	ldmia	r3!, {r0, r1}
 8027efc:	6028      	str	r0, [r5, #0]
 8027efe:	6069      	str	r1, [r5, #4]
 8027f00:	6923      	ldr	r3, [r4, #16]
 8027f02:	3308      	adds	r3, #8
 8027f04:	6123      	str	r3, [r4, #16]
 8027f06:	68a3      	ldr	r3, [r4, #8]
 8027f08:	3301      	adds	r3, #1
 8027f0a:	60a3      	str	r3, [r4, #8]
 8027f0c:	e5fd      	b.n	8027b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027f0e:	f104 0314 	add.w	r3, r4, #20
 8027f12:	6925      	ldr	r5, [r4, #16]
 8027f14:	cb03      	ldmia	r3!, {r0, r1}
 8027f16:	6028      	str	r0, [r5, #0]
 8027f18:	6069      	str	r1, [r5, #4]
 8027f1a:	6923      	ldr	r3, [r4, #16]
 8027f1c:	3308      	adds	r3, #8
 8027f1e:	6123      	str	r3, [r4, #16]
 8027f20:	68a3      	ldr	r3, [r4, #8]
 8027f22:	3301      	adds	r3, #1
 8027f24:	60a3      	str	r3, [r4, #8]
 8027f26:	e625      	b.n	8027b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027f28:	9b05      	ldr	r3, [sp, #20]
 8027f2a:	ea4f 176b 	mov.w	r7, fp, asr #5
 8027f2e:	f00b 081f 	and.w	r8, fp, #31
 8027f32:	8b20      	ldrh	r0, [r4, #24]
 8027f34:	f003 031f 	and.w	r3, r3, #31
 8027f38:	4577      	cmp	r7, lr
 8027f3a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027f3e:	9302      	str	r3, [sp, #8]
 8027f40:	9b03      	ldr	r3, [sp, #12]
 8027f42:	eba3 050c 	sub.w	r5, r3, ip
 8027f46:	d108      	bne.n	8027f5a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8027f48:	9b02      	ldr	r3, [sp, #8]
 8027f4a:	4428      	add	r0, r5
 8027f4c:	4498      	add	r8, r3
 8027f4e:	8320      	strh	r0, [r4, #24]
 8027f50:	fb05 9508 	mla	r5, r5, r8, r9
 8027f54:	8365      	strh	r5, [r4, #26]
 8027f56:	f7ff bb4f 	b.w	80275f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027f5a:	9b05      	ldr	r3, [sp, #20]
 8027f5c:	ebb3 030b 	subs.w	r3, r3, fp
 8027f60:	f100 809c 	bmi.w	802809c <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8027f64:	f1c8 0120 	rsb	r1, r8, #32
 8027f68:	2201      	movs	r2, #1
 8027f6a:	f04f 0b20 	mov.w	fp, #32
 8027f6e:	434d      	muls	r5, r1
 8027f70:	9201      	str	r2, [sp, #4]
 8027f72:	9a01      	ldr	r2, [sp, #4]
 8027f74:	44d8      	add	r8, fp
 8027f76:	fb95 f6f3 	sdiv	r6, r5, r3
 8027f7a:	fb03 5516 	mls	r5, r3, r6, r5
 8027f7e:	4417      	add	r7, r2
 8027f80:	9a00      	ldr	r2, [sp, #0]
 8027f82:	2d00      	cmp	r5, #0
 8027f84:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8027f88:	bfbc      	itt	lt
 8027f8a:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027f8e:	18ed      	addlt	r5, r5, r3
 8027f90:	eb07 0a02 	add.w	sl, r7, r2
 8027f94:	9204      	str	r2, [sp, #16]
 8027f96:	fb06 9808 	mla	r8, r6, r8, r9
 8027f9a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027f9e:	4430      	add	r0, r6
 8027fa0:	fa0f f188 	sxth.w	r1, r8
 8027fa4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027fa8:	b200      	sxth	r0, r0
 8027faa:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027fae:	8361      	strh	r1, [r4, #26]
 8027fb0:	8320      	strh	r0, [r4, #24]
 8027fb2:	45ca      	cmp	sl, r9
 8027fb4:	d015      	beq.n	8027fe2 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8027fb6:	ea50 0201 	orrs.w	r2, r0, r1
 8027fba:	d00c      	beq.n	8027fd6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027fbc:	f1b8 0f00 	cmp.w	r8, #0
 8027fc0:	db09      	blt.n	8027fd6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027fc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027fc4:	4541      	cmp	r1, r8
 8027fc6:	dd06      	ble.n	8027fd6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027fc8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027fcc:	4288      	cmp	r0, r1
 8027fce:	d36e      	bcc.n	80280ae <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8027fd0:	2101      	movs	r1, #1
 8027fd2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8027fd6:	2100      	movs	r1, #0
 8027fd8:	9a00      	ldr	r2, [sp, #0]
 8027fda:	82a7      	strh	r7, [r4, #20]
 8027fdc:	82e2      	strh	r2, [r4, #22]
 8027fde:	8321      	strh	r1, [r4, #24]
 8027fe0:	8361      	strh	r1, [r4, #26]
 8027fe2:	45be      	cmp	lr, r7
 8027fe4:	44b4      	add	ip, r6
 8027fe6:	d048      	beq.n	802807a <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8027fe8:	9a03      	ldr	r2, [sp, #12]
 8027fea:	1aed      	subs	r5, r5, r3
 8027fec:	eba2 010c 	sub.w	r1, r2, ip
 8027ff0:	440e      	add	r6, r1
 8027ff2:	0176      	lsls	r6, r6, #5
 8027ff4:	fb96 f8f3 	sdiv	r8, r6, r3
 8027ff8:	fb03 6618 	mls	r6, r3, r8, r6
 8027ffc:	2e00      	cmp	r6, #0
 8027ffe:	bfbc      	itt	lt
 8028000:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8028004:	18f6      	addlt	r6, r6, r3
 8028006:	f108 0201 	add.w	r2, r8, #1
 802800a:	9205      	str	r2, [sp, #20]
 802800c:	19ad      	adds	r5, r5, r6
 802800e:	8b20      	ldrh	r0, [r4, #24]
 8028010:	8b61      	ldrh	r1, [r4, #26]
 8028012:	bf54      	ite	pl
 8028014:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8028018:	46c1      	movmi	r9, r8
 802801a:	9a01      	ldr	r2, [sp, #4]
 802801c:	bf58      	it	pl
 802801e:	1aed      	subpl	r5, r5, r3
 8028020:	4448      	add	r0, r9
 8028022:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8028026:	4417      	add	r7, r2
 8028028:	44cc      	add	ip, r9
 802802a:	9a04      	ldr	r2, [sp, #16]
 802802c:	b200      	sxth	r0, r0
 802802e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8028032:	b209      	sxth	r1, r1
 8028034:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8028038:	443a      	add	r2, r7
 802803a:	8320      	strh	r0, [r4, #24]
 802803c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8028040:	8361      	strh	r1, [r4, #26]
 8028042:	4552      	cmp	r2, sl
 8028044:	d017      	beq.n	8028076 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8028046:	ea50 0201 	orrs.w	r2, r0, r1
 802804a:	d00d      	beq.n	8028068 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802804c:	f1b9 0f00 	cmp.w	r9, #0
 8028050:	db0a      	blt.n	8028068 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8028052:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8028054:	4549      	cmp	r1, r9
 8028056:	dd07      	ble.n	8028068 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8028058:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802805c:	4288      	cmp	r0, r1
 802805e:	d337      	bcc.n	80280d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8028060:	f04f 0201 	mov.w	r2, #1
 8028064:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8028068:	9a00      	ldr	r2, [sp, #0]
 802806a:	82a7      	strh	r7, [r4, #20]
 802806c:	82e2      	strh	r2, [r4, #22]
 802806e:	f04f 0200 	mov.w	r2, #0
 8028072:	8322      	strh	r2, [r4, #24]
 8028074:	8362      	strh	r2, [r4, #26]
 8028076:	45be      	cmp	lr, r7
 8028078:	d1c8      	bne.n	802800c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802807a:	9b03      	ldr	r3, [sp, #12]
 802807c:	8b62      	ldrh	r2, [r4, #26]
 802807e:	eba3 0c0c 	sub.w	ip, r3, ip
 8028082:	8b23      	ldrh	r3, [r4, #24]
 8028084:	4463      	add	r3, ip
 8028086:	8323      	strh	r3, [r4, #24]
 8028088:	9b02      	ldr	r3, [sp, #8]
 802808a:	3320      	adds	r3, #32
 802808c:	eba3 030b 	sub.w	r3, r3, fp
 8028090:	fb0c 2c03 	mla	ip, ip, r3, r2
 8028094:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8028098:	f7ff baae 	b.w	80275f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802809c:	f04f 32ff 	mov.w	r2, #4294967295
 80280a0:	fb05 f508 	mul.w	r5, r5, r8
 80280a4:	425b      	negs	r3, r3
 80280a6:	f04f 0b00 	mov.w	fp, #0
 80280aa:	9201      	str	r2, [sp, #4]
 80280ac:	e761      	b.n	8027f72 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80280ae:	f104 0814 	add.w	r8, r4, #20
 80280b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80280b6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80280ba:	f8c9 0000 	str.w	r0, [r9]
 80280be:	f8c9 1004 	str.w	r1, [r9, #4]
 80280c2:	6921      	ldr	r1, [r4, #16]
 80280c4:	3108      	adds	r1, #8
 80280c6:	6121      	str	r1, [r4, #16]
 80280c8:	68a1      	ldr	r1, [r4, #8]
 80280ca:	3101      	adds	r1, #1
 80280cc:	60a1      	str	r1, [r4, #8]
 80280ce:	e782      	b.n	8027fd6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80280d0:	f104 0914 	add.w	r9, r4, #20
 80280d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80280d8:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80280dc:	f8ca 0000 	str.w	r0, [sl]
 80280e0:	f8ca 1004 	str.w	r1, [sl, #4]
 80280e4:	6921      	ldr	r1, [r4, #16]
 80280e6:	3108      	adds	r1, #8
 80280e8:	6121      	str	r1, [r4, #16]
 80280ea:	68a1      	ldr	r1, [r4, #8]
 80280ec:	3101      	adds	r1, #1
 80280ee:	60a1      	str	r1, [r4, #8]
 80280f0:	e7ba      	b.n	8028068 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080280f2 <_ZN8touchgfx7Outline6lineToEii>:
 80280f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80280f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80280f6:	4604      	mov	r4, r0
 80280f8:	460d      	mov	r5, r1
 80280fa:	4616      	mov	r6, r2
 80280fc:	079b      	lsls	r3, r3, #30
 80280fe:	d526      	bpl.n	802814e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8028100:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8028104:	ea85 0001 	eor.w	r0, r5, r1
 8028108:	ea86 0302 	eor.w	r3, r6, r2
 802810c:	4303      	orrs	r3, r0
 802810e:	d01e      	beq.n	802814e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8028110:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8028112:	114b      	asrs	r3, r1, #5
 8028114:	9600      	str	r6, [sp, #0]
 8028116:	4283      	cmp	r3, r0
 8028118:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802811a:	bfb8      	it	lt
 802811c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802811e:	3301      	adds	r3, #1
 8028120:	4283      	cmp	r3, r0
 8028122:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8028124:	bfc8      	it	gt
 8028126:	6363      	strgt	r3, [r4, #52]	; 0x34
 8028128:	116b      	asrs	r3, r5, #5
 802812a:	4283      	cmp	r3, r0
 802812c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802812e:	bfb8      	it	lt
 8028130:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8028132:	3301      	adds	r3, #1
 8028134:	4283      	cmp	r3, r0
 8028136:	4620      	mov	r0, r4
 8028138:	bfc8      	it	gt
 802813a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802813c:	462b      	mov	r3, r5
 802813e:	f7ff f9e3 	bl	8027508 <_ZN8touchgfx7Outline10renderLineEiiii>
 8028142:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028144:	f043 0301 	orr.w	r3, r3, #1
 8028148:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802814c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802814e:	b002      	add	sp, #8
 8028150:	bd70      	pop	{r4, r5, r6, pc}

08028152 <_ZN8touchgfx7Outline6moveToEii>:
 8028152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028154:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8028156:	4615      	mov	r5, r2
 8028158:	4604      	mov	r4, r0
 802815a:	460e      	mov	r6, r1
 802815c:	079a      	lsls	r2, r3, #30
 802815e:	d401      	bmi.n	8028164 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8028160:	f7ff f98c 	bl	802747c <_ZN8touchgfx7Outline5resetEv>
 8028164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028166:	07db      	lsls	r3, r3, #31
 8028168:	d504      	bpl.n	8028174 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802816a:	4620      	mov	r0, r4
 802816c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8028170:	f7ff ffbf 	bl	80280f2 <_ZN8touchgfx7Outline6lineToEii>
 8028174:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8028178:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802817c:	116f      	asrs	r7, r5, #5
 802817e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8028182:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8028186:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802818a:	4291      	cmp	r1, r2
 802818c:	d015      	beq.n	80281ba <_ZN8touchgfx7Outline6moveToEii+0x68>
 802818e:	8b61      	ldrh	r1, [r4, #26]
 8028190:	8b22      	ldrh	r2, [r4, #24]
 8028192:	430a      	orrs	r2, r1
 8028194:	d00b      	beq.n	80281ae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8028196:	2b00      	cmp	r3, #0
 8028198:	db09      	blt.n	80281ae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802819a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802819c:	429a      	cmp	r2, r3
 802819e:	dd06      	ble.n	80281ae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80281a0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80281a4:	429a      	cmp	r2, r3
 80281a6:	d30d      	bcc.n	80281c4 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80281a8:	2301      	movs	r3, #1
 80281aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80281ae:	2300      	movs	r3, #0
 80281b0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80281b4:	82e7      	strh	r7, [r4, #22]
 80281b6:	8323      	strh	r3, [r4, #24]
 80281b8:	8363      	strh	r3, [r4, #26]
 80281ba:	61e6      	str	r6, [r4, #28]
 80281bc:	62a5      	str	r5, [r4, #40]	; 0x28
 80281be:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80281c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80281c4:	f104 0314 	add.w	r3, r4, #20
 80281c8:	6922      	ldr	r2, [r4, #16]
 80281ca:	cb03      	ldmia	r3!, {r0, r1}
 80281cc:	6010      	str	r0, [r2, #0]
 80281ce:	6051      	str	r1, [r2, #4]
 80281d0:	6923      	ldr	r3, [r4, #16]
 80281d2:	3308      	adds	r3, #8
 80281d4:	6123      	str	r3, [r4, #16]
 80281d6:	68a3      	ldr	r3, [r4, #8]
 80281d8:	3301      	adds	r3, #1
 80281da:	60a3      	str	r3, [r4, #8]
 80281dc:	e7e7      	b.n	80281ae <_ZN8touchgfx7Outline6moveToEii+0x5c>

080281de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80281de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281e2:	b0d1      	sub	sp, #324	; 0x144
 80281e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80281e8:	466c      	mov	r4, sp
 80281ea:	1a0d      	subs	r5, r1, r0
 80281ec:	f100 0208 	add.w	r2, r0, #8
 80281f0:	2d48      	cmp	r5, #72	; 0x48
 80281f2:	f340 80ba 	ble.w	802836a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80281f6:	112d      	asrs	r5, r5, #4
 80281f8:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80281fc:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8028200:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8028204:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8028208:	f9b0 8000 	ldrsh.w	r8, [r0]
 802820c:	681e      	ldr	r6, [r3, #0]
 802820e:	6006      	str	r6, [r0, #0]
 8028210:	685e      	ldr	r6, [r3, #4]
 8028212:	6046      	str	r6, [r0, #4]
 8028214:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8028218:	f8a3 c004 	strh.w	ip, [r3, #4]
 802821c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8028220:	80df      	strh	r7, [r3, #6]
 8028222:	f1a1 0308 	sub.w	r3, r1, #8
 8028226:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802822a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802822e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8028232:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8028236:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802823a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802823e:	45ac      	cmp	ip, r5
 8028240:	dd0f      	ble.n	8028262 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8028242:	681d      	ldr	r5, [r3, #0]
 8028244:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8028248:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802824c:	6015      	str	r5, [r2, #0]
 802824e:	685d      	ldr	r5, [r3, #4]
 8028250:	6055      	str	r5, [r2, #4]
 8028252:	f821 7c08 	strh.w	r7, [r1, #-8]
 8028256:	f821 6c06 	strh.w	r6, [r1, #-6]
 802825a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802825e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8028262:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8028266:	f9b0 7000 	ldrsh.w	r7, [r0]
 802826a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802826e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8028272:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8028276:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802827a:	4565      	cmp	r5, ip
 802827c:	dd0d      	ble.n	802829a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802827e:	6815      	ldr	r5, [r2, #0]
 8028280:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8028284:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8028288:	6005      	str	r5, [r0, #0]
 802828a:	6855      	ldr	r5, [r2, #4]
 802828c:	8107      	strh	r7, [r0, #8]
 802828e:	6045      	str	r5, [r0, #4]
 8028290:	8146      	strh	r6, [r0, #10]
 8028292:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8028296:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802829a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802829e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80282a2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80282a6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80282aa:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80282ae:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80282b2:	45ac      	cmp	ip, r5
 80282b4:	dd0f      	ble.n	80282d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80282b6:	681d      	ldr	r5, [r3, #0]
 80282b8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80282bc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80282c0:	6005      	str	r5, [r0, #0]
 80282c2:	685d      	ldr	r5, [r3, #4]
 80282c4:	6045      	str	r5, [r0, #4]
 80282c6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80282ca:	f821 6c06 	strh.w	r6, [r1, #-6]
 80282ce:	f821 ec04 	strh.w	lr, [r1, #-4]
 80282d2:	f821 cc02 	strh.w	ip, [r1, #-2]
 80282d6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80282da:	f102 0508 	add.w	r5, r2, #8
 80282de:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80282e2:	f9b0 e000 	ldrsh.w	lr, [r0]
 80282e6:	462f      	mov	r7, r5
 80282e8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80282ec:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80282f0:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80282f4:	45b2      	cmp	sl, r6
 80282f6:	dc18      	bgt.n	802832a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80282f8:	3b08      	subs	r3, #8
 80282fa:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80282fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8028302:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8028306:	45b2      	cmp	sl, r6
 8028308:	dbf6      	blt.n	80282f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802830a:	42ab      	cmp	r3, r5
 802830c:	681e      	ldr	r6, [r3, #0]
 802830e:	d30e      	bcc.n	802832e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8028310:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8028314:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8028318:	602e      	str	r6, [r5, #0]
 802831a:	685e      	ldr	r6, [r3, #4]
 802831c:	606e      	str	r6, [r5, #4]
 802831e:	f8a3 9000 	strh.w	r9, [r3]
 8028322:	f8a3 8002 	strh.w	r8, [r3, #2]
 8028326:	809f      	strh	r7, [r3, #4]
 8028328:	80da      	strh	r2, [r3, #6]
 802832a:	462a      	mov	r2, r5
 802832c:	e7d3      	b.n	80282d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802832e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8028332:	6006      	str	r6, [r0, #0]
 8028334:	685e      	ldr	r6, [r3, #4]
 8028336:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802833a:	6046      	str	r6, [r0, #4]
 802833c:	1a1e      	subs	r6, r3, r0
 802833e:	80da      	strh	r2, [r3, #6]
 8028340:	1b4a      	subs	r2, r1, r5
 8028342:	f8a3 e000 	strh.w	lr, [r3]
 8028346:	10d2      	asrs	r2, r2, #3
 8028348:	f8a3 c002 	strh.w	ip, [r3, #2]
 802834c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8028350:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8028354:	bfb5      	itete	lt
 8028356:	e9c4 0300 	strdlt	r0, r3, [r4]
 802835a:	4607      	movge	r7, r0
 802835c:	460b      	movlt	r3, r1
 802835e:	e9c4 5100 	strdge	r5, r1, [r4]
 8028362:	4638      	mov	r0, r7
 8028364:	3408      	adds	r4, #8
 8028366:	4619      	mov	r1, r3
 8028368:	e73f      	b.n	80281ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802836a:	4291      	cmp	r1, r2
 802836c:	d925      	bls.n	80283ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802836e:	f1a2 0310 	sub.w	r3, r2, #16
 8028372:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8028376:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802837a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802837e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8028382:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8028386:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802838a:	42b5      	cmp	r5, r6
 802838c:	dd13      	ble.n	80283b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802838e:	461d      	mov	r5, r3
 8028390:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8028394:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8028398:	3b08      	subs	r3, #8
 802839a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802839e:	619e      	str	r6, [r3, #24]
 80283a0:	42a8      	cmp	r0, r5
 80283a2:	686e      	ldr	r6, [r5, #4]
 80283a4:	f8a3 c010 	strh.w	ip, [r3, #16]
 80283a8:	61de      	str	r6, [r3, #28]
 80283aa:	825f      	strh	r7, [r3, #18]
 80283ac:	f8a3 8014 	strh.w	r8, [r3, #20]
 80283b0:	f8a3 e016 	strh.w	lr, [r3, #22]
 80283b4:	d1dd      	bne.n	8028372 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80283b6:	3208      	adds	r2, #8
 80283b8:	e7d7      	b.n	802836a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80283ba:	466b      	mov	r3, sp
 80283bc:	429c      	cmp	r4, r3
 80283be:	d903      	bls.n	80283c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80283c0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80283c4:	3c08      	subs	r4, #8
 80283c6:	e710      	b.n	80281ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80283c8:	b051      	add	sp, #324	; 0x144
 80283ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080283ce <_ZN8touchgfx7Outline9sortCellsEv>:
 80283ce:	6881      	ldr	r1, [r0, #8]
 80283d0:	b111      	cbz	r1, 80283d8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80283d2:	68c0      	ldr	r0, [r0, #12]
 80283d4:	f7ff bf03 	b.w	80281de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80283d8:	4770      	bx	lr

080283da <_ZN8touchgfx7Outline8getCellsEv>:
 80283da:	b510      	push	{r4, lr}
 80283dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80283de:	4604      	mov	r4, r0
 80283e0:	07da      	lsls	r2, r3, #31
 80283e2:	d507      	bpl.n	80283f4 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80283e4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80283e8:	f7ff fe83 	bl	80280f2 <_ZN8touchgfx7Outline6lineToEii>
 80283ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80283ee:	f023 0301 	bic.w	r3, r3, #1
 80283f2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80283f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80283f6:	079b      	lsls	r3, r3, #30
 80283f8:	d51a      	bpl.n	8028430 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80283fa:	8b62      	ldrh	r2, [r4, #26]
 80283fc:	8b23      	ldrh	r3, [r4, #24]
 80283fe:	4313      	orrs	r3, r2
 8028400:	d00d      	beq.n	802841e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8028402:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8028406:	2b00      	cmp	r3, #0
 8028408:	db09      	blt.n	802841e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802840a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802840c:	4293      	cmp	r3, r2
 802840e:	da06      	bge.n	802841e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8028410:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8028414:	429a      	cmp	r2, r3
 8028416:	d80d      	bhi.n	8028434 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8028418:	2301      	movs	r3, #1
 802841a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802841e:	68a0      	ldr	r0, [r4, #8]
 8028420:	b138      	cbz	r0, 8028432 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8028422:	4620      	mov	r0, r4
 8028424:	f7ff ffd3 	bl	80283ce <_ZN8touchgfx7Outline9sortCellsEv>
 8028428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802842a:	f023 0302 	bic.w	r3, r3, #2
 802842e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8028430:	68e0      	ldr	r0, [r4, #12]
 8028432:	bd10      	pop	{r4, pc}
 8028434:	f104 0314 	add.w	r3, r4, #20
 8028438:	6922      	ldr	r2, [r4, #16]
 802843a:	cb03      	ldmia	r3!, {r0, r1}
 802843c:	6010      	str	r0, [r2, #0]
 802843e:	6051      	str	r1, [r2, #4]
 8028440:	6923      	ldr	r3, [r4, #16]
 8028442:	3308      	adds	r3, #8
 8028444:	6123      	str	r3, [r4, #16]
 8028446:	68a3      	ldr	r3, [r4, #8]
 8028448:	3301      	adds	r3, #1
 802844a:	60a3      	str	r3, [r4, #8]
 802844c:	e7e7      	b.n	802841e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802844e <_ZN8touchgfx8ScanlineD1Ev>:
 802844e:	4770      	bx	lr

08028450 <_ZN8touchgfx8ScanlineD0Ev>:
 8028450:	b510      	push	{r4, lr}
 8028452:	4604      	mov	r4, r0
 8028454:	2124      	movs	r1, #36	; 0x24
 8028456:	f000 f877 	bl	8028548 <_ZdlPvj>
 802845a:	4620      	mov	r0, r4
 802845c:	bd10      	pop	{r4, pc}

0802845e <_ZN8touchgfx8Scanline5resetEv>:
 802845e:	b510      	push	{r4, lr}
 8028460:	4604      	mov	r4, r0
 8028462:	f7f3 f8bf 	bl	801b5e4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8028466:	61a0      	str	r0, [r4, #24]
 8028468:	f7f3 f8c2 	bl	801b5f0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802846c:	61e0      	str	r0, [r4, #28]
 802846e:	f7f3 f8c5 	bl	801b5fc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8028472:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8028476:	6220      	str	r0, [r4, #32]
 8028478:	6160      	str	r0, [r4, #20]
 802847a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802847e:	69e3      	ldr	r3, [r4, #28]
 8028480:	6123      	str	r3, [r4, #16]
 8028482:	2300      	movs	r3, #0
 8028484:	60e3      	str	r3, [r4, #12]
 8028486:	bd10      	pop	{r4, pc}

08028488 <_ZN8touchgfx8ScanlineC1Ev>:
 8028488:	4b07      	ldr	r3, [pc, #28]	; (80284a8 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802848a:	b510      	push	{r4, lr}
 802848c:	6003      	str	r3, [r0, #0]
 802848e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8028492:	4604      	mov	r4, r0
 8028494:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8028498:	2300      	movs	r3, #0
 802849a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802849e:	6143      	str	r3, [r0, #20]
 80284a0:	f7ff ffdd 	bl	802845e <_ZN8touchgfx8Scanline5resetEv>
 80284a4:	4620      	mov	r0, r4
 80284a6:	bd10      	pop	{r4, pc}
 80284a8:	0802e134 	.word	0x0802e134

080284ac <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80284ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80284b0:	1e0c      	subs	r4, r1, #0
 80284b2:	4605      	mov	r5, r0
 80284b4:	4617      	mov	r7, r2
 80284b6:	461e      	mov	r6, r3
 80284b8:	da03      	bge.n	80284c2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80284ba:	4426      	add	r6, r4
 80284bc:	2e01      	cmp	r6, #1
 80284be:	d421      	bmi.n	8028504 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80284c0:	2400      	movs	r4, #0
 80284c2:	f7f3 f889 	bl	801b5d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80284c6:	42a0      	cmp	r0, r4
 80284c8:	d91c      	bls.n	8028504 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80284ca:	eb04 0806 	add.w	r8, r4, r6
 80284ce:	f7f3 f883 	bl	801b5d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80284d2:	4580      	cmp	r8, r0
 80284d4:	d902      	bls.n	80284dc <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80284d6:	f7f3 f87f 	bl	801b5d8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80284da:	1b06      	subs	r6, r0, r4
 80284dc:	69a8      	ldr	r0, [r5, #24]
 80284de:	4632      	mov	r2, r6
 80284e0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80284e4:	4420      	add	r0, r4
 80284e6:	f7f4 fd76 	bl	801cfd6 <_ZN8touchgfx6memsetEPvhm>
 80284ea:	686b      	ldr	r3, [r5, #4]
 80284ec:	b2b2      	uxth	r2, r6
 80284ee:	3301      	adds	r3, #1
 80284f0:	42a3      	cmp	r3, r4
 80284f2:	696b      	ldr	r3, [r5, #20]
 80284f4:	d108      	bne.n	8028508 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80284f6:	8819      	ldrh	r1, [r3, #0]
 80284f8:	440a      	add	r2, r1
 80284fa:	801a      	strh	r2, [r3, #0]
 80284fc:	3c01      	subs	r4, #1
 80284fe:	4434      	add	r4, r6
 8028500:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8028504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028508:	1c99      	adds	r1, r3, #2
 802850a:	6169      	str	r1, [r5, #20]
 802850c:	805a      	strh	r2, [r3, #2]
 802850e:	692b      	ldr	r3, [r5, #16]
 8028510:	1c9a      	adds	r2, r3, #2
 8028512:	612a      	str	r2, [r5, #16]
 8028514:	805c      	strh	r4, [r3, #2]
 8028516:	68eb      	ldr	r3, [r5, #12]
 8028518:	3301      	adds	r3, #1
 802851a:	60eb      	str	r3, [r5, #12]
 802851c:	e7ee      	b.n	80284fc <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802851e <_ZN8touchgfx15RenderingBufferC1Ev>:
 802851e:	2200      	movs	r2, #0
 8028520:	6002      	str	r2, [r0, #0]
 8028522:	7102      	strb	r2, [r0, #4]
 8028524:	6102      	str	r2, [r0, #16]
 8028526:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802852a:	4770      	bx	lr

0802852c <_ZN8touchgfx15RenderingBufferD1Ev>:
 802852c:	4770      	bx	lr

0802852e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802852e:	6083      	str	r3, [r0, #8]
 8028530:	9b00      	ldr	r3, [sp, #0]
 8028532:	6001      	str	r1, [r0, #0]
 8028534:	60c3      	str	r3, [r0, #12]
 8028536:	9b01      	ldr	r3, [sp, #4]
 8028538:	7102      	strb	r2, [r0, #4]
 802853a:	6103      	str	r3, [r0, #16]
 802853c:	4770      	bx	lr

0802853e <__aeabi_atexit>:
 802853e:	460b      	mov	r3, r1
 8028540:	4601      	mov	r1, r0
 8028542:	4618      	mov	r0, r3
 8028544:	f000 b852 	b.w	80285ec <__cxa_atexit>

08028548 <_ZdlPvj>:
 8028548:	f000 b812 	b.w	8028570 <_ZdlPv>

0802854c <__cxa_guard_acquire>:
 802854c:	6803      	ldr	r3, [r0, #0]
 802854e:	07db      	lsls	r3, r3, #31
 8028550:	d406      	bmi.n	8028560 <__cxa_guard_acquire+0x14>
 8028552:	7843      	ldrb	r3, [r0, #1]
 8028554:	b103      	cbz	r3, 8028558 <__cxa_guard_acquire+0xc>
 8028556:	deff      	udf	#255	; 0xff
 8028558:	2301      	movs	r3, #1
 802855a:	7043      	strb	r3, [r0, #1]
 802855c:	4618      	mov	r0, r3
 802855e:	4770      	bx	lr
 8028560:	2000      	movs	r0, #0
 8028562:	4770      	bx	lr

08028564 <__cxa_guard_release>:
 8028564:	2301      	movs	r3, #1
 8028566:	6003      	str	r3, [r0, #0]
 8028568:	4770      	bx	lr

0802856a <__cxa_pure_virtual>:
 802856a:	b508      	push	{r3, lr}
 802856c:	f000 f80e 	bl	802858c <_ZSt9terminatev>

08028570 <_ZdlPv>:
 8028570:	f000 b88e 	b.w	8028690 <free>

08028574 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028574:	b508      	push	{r3, lr}
 8028576:	4780      	blx	r0
 8028578:	f000 f80d 	bl	8028596 <abort>

0802857c <_ZSt13get_terminatev>:
 802857c:	4b02      	ldr	r3, [pc, #8]	; (8028588 <_ZSt13get_terminatev+0xc>)
 802857e:	6818      	ldr	r0, [r3, #0]
 8028580:	f3bf 8f5b 	dmb	ish
 8028584:	4770      	bx	lr
 8028586:	bf00      	nop
 8028588:	200000d4 	.word	0x200000d4

0802858c <_ZSt9terminatev>:
 802858c:	b508      	push	{r3, lr}
 802858e:	f7ff fff5 	bl	802857c <_ZSt13get_terminatev>
 8028592:	f7ff ffef 	bl	8028574 <_ZN10__cxxabiv111__terminateEPFvvE>

08028596 <abort>:
 8028596:	b508      	push	{r3, lr}
 8028598:	2006      	movs	r0, #6
 802859a:	f000 fc67 	bl	8028e6c <raise>
 802859e:	2001      	movs	r0, #1
 80285a0:	f7db f88a 	bl	80036b8 <_exit>

080285a4 <__assert_func>:
 80285a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80285a6:	4614      	mov	r4, r2
 80285a8:	461a      	mov	r2, r3
 80285aa:	4b09      	ldr	r3, [pc, #36]	; (80285d0 <__assert_func+0x2c>)
 80285ac:	681b      	ldr	r3, [r3, #0]
 80285ae:	4605      	mov	r5, r0
 80285b0:	68d8      	ldr	r0, [r3, #12]
 80285b2:	b14c      	cbz	r4, 80285c8 <__assert_func+0x24>
 80285b4:	4b07      	ldr	r3, [pc, #28]	; (80285d4 <__assert_func+0x30>)
 80285b6:	9100      	str	r1, [sp, #0]
 80285b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80285bc:	4906      	ldr	r1, [pc, #24]	; (80285d8 <__assert_func+0x34>)
 80285be:	462b      	mov	r3, r5
 80285c0:	f000 f828 	bl	8028614 <fiprintf>
 80285c4:	f7ff ffe7 	bl	8028596 <abort>
 80285c8:	4b04      	ldr	r3, [pc, #16]	; (80285dc <__assert_func+0x38>)
 80285ca:	461c      	mov	r4, r3
 80285cc:	e7f3      	b.n	80285b6 <__assert_func+0x12>
 80285ce:	bf00      	nop
 80285d0:	200000d8 	.word	0x200000d8
 80285d4:	0802e13c 	.word	0x0802e13c
 80285d8:	0802e149 	.word	0x0802e149
 80285dc:	0802e177 	.word	0x0802e177

080285e0 <atexit>:
 80285e0:	2300      	movs	r3, #0
 80285e2:	4601      	mov	r1, r0
 80285e4:	461a      	mov	r2, r3
 80285e6:	4618      	mov	r0, r3
 80285e8:	f000 bd1c 	b.w	8029024 <__register_exitproc>

080285ec <__cxa_atexit>:
 80285ec:	b510      	push	{r4, lr}
 80285ee:	4c05      	ldr	r4, [pc, #20]	; (8028604 <__cxa_atexit+0x18>)
 80285f0:	4613      	mov	r3, r2
 80285f2:	b12c      	cbz	r4, 8028600 <__cxa_atexit+0x14>
 80285f4:	460a      	mov	r2, r1
 80285f6:	4601      	mov	r1, r0
 80285f8:	2002      	movs	r0, #2
 80285fa:	f000 fd13 	bl	8029024 <__register_exitproc>
 80285fe:	bd10      	pop	{r4, pc}
 8028600:	4620      	mov	r0, r4
 8028602:	e7fc      	b.n	80285fe <__cxa_atexit+0x12>
 8028604:	08029025 	.word	0x08029025

08028608 <__errno>:
 8028608:	4b01      	ldr	r3, [pc, #4]	; (8028610 <__errno+0x8>)
 802860a:	6818      	ldr	r0, [r3, #0]
 802860c:	4770      	bx	lr
 802860e:	bf00      	nop
 8028610:	200000d8 	.word	0x200000d8

08028614 <fiprintf>:
 8028614:	b40e      	push	{r1, r2, r3}
 8028616:	b503      	push	{r0, r1, lr}
 8028618:	4601      	mov	r1, r0
 802861a:	ab03      	add	r3, sp, #12
 802861c:	4805      	ldr	r0, [pc, #20]	; (8028634 <fiprintf+0x20>)
 802861e:	f853 2b04 	ldr.w	r2, [r3], #4
 8028622:	6800      	ldr	r0, [r0, #0]
 8028624:	9301      	str	r3, [sp, #4]
 8028626:	f000 f925 	bl	8028874 <_vfiprintf_r>
 802862a:	b002      	add	sp, #8
 802862c:	f85d eb04 	ldr.w	lr, [sp], #4
 8028630:	b003      	add	sp, #12
 8028632:	4770      	bx	lr
 8028634:	200000d8 	.word	0x200000d8

08028638 <__libc_init_array>:
 8028638:	b570      	push	{r4, r5, r6, lr}
 802863a:	4d0d      	ldr	r5, [pc, #52]	; (8028670 <__libc_init_array+0x38>)
 802863c:	4c0d      	ldr	r4, [pc, #52]	; (8028674 <__libc_init_array+0x3c>)
 802863e:	1b64      	subs	r4, r4, r5
 8028640:	10a4      	asrs	r4, r4, #2
 8028642:	2600      	movs	r6, #0
 8028644:	42a6      	cmp	r6, r4
 8028646:	d109      	bne.n	802865c <__libc_init_array+0x24>
 8028648:	4d0b      	ldr	r5, [pc, #44]	; (8028678 <__libc_init_array+0x40>)
 802864a:	4c0c      	ldr	r4, [pc, #48]	; (802867c <__libc_init_array+0x44>)
 802864c:	f001 f824 	bl	8029698 <_init>
 8028650:	1b64      	subs	r4, r4, r5
 8028652:	10a4      	asrs	r4, r4, #2
 8028654:	2600      	movs	r6, #0
 8028656:	42a6      	cmp	r6, r4
 8028658:	d105      	bne.n	8028666 <__libc_init_array+0x2e>
 802865a:	bd70      	pop	{r4, r5, r6, pc}
 802865c:	f855 3b04 	ldr.w	r3, [r5], #4
 8028660:	4798      	blx	r3
 8028662:	3601      	adds	r6, #1
 8028664:	e7ee      	b.n	8028644 <__libc_init_array+0xc>
 8028666:	f855 3b04 	ldr.w	r3, [r5], #4
 802866a:	4798      	blx	r3
 802866c:	3601      	adds	r6, #1
 802866e:	e7f2      	b.n	8028656 <__libc_init_array+0x1e>
 8028670:	08065870 	.word	0x08065870
 8028674:	08065870 	.word	0x08065870
 8028678:	08065870 	.word	0x08065870
 802867c:	08065884 	.word	0x08065884

08028680 <malloc>:
 8028680:	4b02      	ldr	r3, [pc, #8]	; (802868c <malloc+0xc>)
 8028682:	4601      	mov	r1, r0
 8028684:	6818      	ldr	r0, [r3, #0]
 8028686:	f000 b871 	b.w	802876c <_malloc_r>
 802868a:	bf00      	nop
 802868c:	200000d8 	.word	0x200000d8

08028690 <free>:
 8028690:	4b02      	ldr	r3, [pc, #8]	; (802869c <free+0xc>)
 8028692:	4601      	mov	r1, r0
 8028694:	6818      	ldr	r0, [r3, #0]
 8028696:	f000 b819 	b.w	80286cc <_free_r>
 802869a:	bf00      	nop
 802869c:	200000d8 	.word	0x200000d8

080286a0 <memcpy>:
 80286a0:	440a      	add	r2, r1
 80286a2:	4291      	cmp	r1, r2
 80286a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80286a8:	d100      	bne.n	80286ac <memcpy+0xc>
 80286aa:	4770      	bx	lr
 80286ac:	b510      	push	{r4, lr}
 80286ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80286b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80286b6:	4291      	cmp	r1, r2
 80286b8:	d1f9      	bne.n	80286ae <memcpy+0xe>
 80286ba:	bd10      	pop	{r4, pc}

080286bc <memset>:
 80286bc:	4402      	add	r2, r0
 80286be:	4603      	mov	r3, r0
 80286c0:	4293      	cmp	r3, r2
 80286c2:	d100      	bne.n	80286c6 <memset+0xa>
 80286c4:	4770      	bx	lr
 80286c6:	f803 1b01 	strb.w	r1, [r3], #1
 80286ca:	e7f9      	b.n	80286c0 <memset+0x4>

080286cc <_free_r>:
 80286cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80286ce:	2900      	cmp	r1, #0
 80286d0:	d048      	beq.n	8028764 <_free_r+0x98>
 80286d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80286d6:	9001      	str	r0, [sp, #4]
 80286d8:	2b00      	cmp	r3, #0
 80286da:	f1a1 0404 	sub.w	r4, r1, #4
 80286de:	bfb8      	it	lt
 80286e0:	18e4      	addlt	r4, r4, r3
 80286e2:	f000 ff21 	bl	8029528 <__malloc_lock>
 80286e6:	4a20      	ldr	r2, [pc, #128]	; (8028768 <_free_r+0x9c>)
 80286e8:	9801      	ldr	r0, [sp, #4]
 80286ea:	6813      	ldr	r3, [r2, #0]
 80286ec:	4615      	mov	r5, r2
 80286ee:	b933      	cbnz	r3, 80286fe <_free_r+0x32>
 80286f0:	6063      	str	r3, [r4, #4]
 80286f2:	6014      	str	r4, [r2, #0]
 80286f4:	b003      	add	sp, #12
 80286f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80286fa:	f000 bf1b 	b.w	8029534 <__malloc_unlock>
 80286fe:	42a3      	cmp	r3, r4
 8028700:	d90b      	bls.n	802871a <_free_r+0x4e>
 8028702:	6821      	ldr	r1, [r4, #0]
 8028704:	1862      	adds	r2, r4, r1
 8028706:	4293      	cmp	r3, r2
 8028708:	bf04      	itt	eq
 802870a:	681a      	ldreq	r2, [r3, #0]
 802870c:	685b      	ldreq	r3, [r3, #4]
 802870e:	6063      	str	r3, [r4, #4]
 8028710:	bf04      	itt	eq
 8028712:	1852      	addeq	r2, r2, r1
 8028714:	6022      	streq	r2, [r4, #0]
 8028716:	602c      	str	r4, [r5, #0]
 8028718:	e7ec      	b.n	80286f4 <_free_r+0x28>
 802871a:	461a      	mov	r2, r3
 802871c:	685b      	ldr	r3, [r3, #4]
 802871e:	b10b      	cbz	r3, 8028724 <_free_r+0x58>
 8028720:	42a3      	cmp	r3, r4
 8028722:	d9fa      	bls.n	802871a <_free_r+0x4e>
 8028724:	6811      	ldr	r1, [r2, #0]
 8028726:	1855      	adds	r5, r2, r1
 8028728:	42a5      	cmp	r5, r4
 802872a:	d10b      	bne.n	8028744 <_free_r+0x78>
 802872c:	6824      	ldr	r4, [r4, #0]
 802872e:	4421      	add	r1, r4
 8028730:	1854      	adds	r4, r2, r1
 8028732:	42a3      	cmp	r3, r4
 8028734:	6011      	str	r1, [r2, #0]
 8028736:	d1dd      	bne.n	80286f4 <_free_r+0x28>
 8028738:	681c      	ldr	r4, [r3, #0]
 802873a:	685b      	ldr	r3, [r3, #4]
 802873c:	6053      	str	r3, [r2, #4]
 802873e:	4421      	add	r1, r4
 8028740:	6011      	str	r1, [r2, #0]
 8028742:	e7d7      	b.n	80286f4 <_free_r+0x28>
 8028744:	d902      	bls.n	802874c <_free_r+0x80>
 8028746:	230c      	movs	r3, #12
 8028748:	6003      	str	r3, [r0, #0]
 802874a:	e7d3      	b.n	80286f4 <_free_r+0x28>
 802874c:	6825      	ldr	r5, [r4, #0]
 802874e:	1961      	adds	r1, r4, r5
 8028750:	428b      	cmp	r3, r1
 8028752:	bf04      	itt	eq
 8028754:	6819      	ldreq	r1, [r3, #0]
 8028756:	685b      	ldreq	r3, [r3, #4]
 8028758:	6063      	str	r3, [r4, #4]
 802875a:	bf04      	itt	eq
 802875c:	1949      	addeq	r1, r1, r5
 802875e:	6021      	streq	r1, [r4, #0]
 8028760:	6054      	str	r4, [r2, #4]
 8028762:	e7c7      	b.n	80286f4 <_free_r+0x28>
 8028764:	b003      	add	sp, #12
 8028766:	bd30      	pop	{r4, r5, pc}
 8028768:	2000c00c 	.word	0x2000c00c

0802876c <_malloc_r>:
 802876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802876e:	1ccd      	adds	r5, r1, #3
 8028770:	f025 0503 	bic.w	r5, r5, #3
 8028774:	3508      	adds	r5, #8
 8028776:	2d0c      	cmp	r5, #12
 8028778:	bf38      	it	cc
 802877a:	250c      	movcc	r5, #12
 802877c:	2d00      	cmp	r5, #0
 802877e:	4606      	mov	r6, r0
 8028780:	db01      	blt.n	8028786 <_malloc_r+0x1a>
 8028782:	42a9      	cmp	r1, r5
 8028784:	d903      	bls.n	802878e <_malloc_r+0x22>
 8028786:	230c      	movs	r3, #12
 8028788:	6033      	str	r3, [r6, #0]
 802878a:	2000      	movs	r0, #0
 802878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802878e:	f000 fecb 	bl	8029528 <__malloc_lock>
 8028792:	4921      	ldr	r1, [pc, #132]	; (8028818 <_malloc_r+0xac>)
 8028794:	680a      	ldr	r2, [r1, #0]
 8028796:	4614      	mov	r4, r2
 8028798:	b99c      	cbnz	r4, 80287c2 <_malloc_r+0x56>
 802879a:	4f20      	ldr	r7, [pc, #128]	; (802881c <_malloc_r+0xb0>)
 802879c:	683b      	ldr	r3, [r7, #0]
 802879e:	b923      	cbnz	r3, 80287aa <_malloc_r+0x3e>
 80287a0:	4621      	mov	r1, r4
 80287a2:	4630      	mov	r0, r6
 80287a4:	f000 fb2a 	bl	8028dfc <_sbrk_r>
 80287a8:	6038      	str	r0, [r7, #0]
 80287aa:	4629      	mov	r1, r5
 80287ac:	4630      	mov	r0, r6
 80287ae:	f000 fb25 	bl	8028dfc <_sbrk_r>
 80287b2:	1c43      	adds	r3, r0, #1
 80287b4:	d123      	bne.n	80287fe <_malloc_r+0x92>
 80287b6:	230c      	movs	r3, #12
 80287b8:	6033      	str	r3, [r6, #0]
 80287ba:	4630      	mov	r0, r6
 80287bc:	f000 feba 	bl	8029534 <__malloc_unlock>
 80287c0:	e7e3      	b.n	802878a <_malloc_r+0x1e>
 80287c2:	6823      	ldr	r3, [r4, #0]
 80287c4:	1b5b      	subs	r3, r3, r5
 80287c6:	d417      	bmi.n	80287f8 <_malloc_r+0x8c>
 80287c8:	2b0b      	cmp	r3, #11
 80287ca:	d903      	bls.n	80287d4 <_malloc_r+0x68>
 80287cc:	6023      	str	r3, [r4, #0]
 80287ce:	441c      	add	r4, r3
 80287d0:	6025      	str	r5, [r4, #0]
 80287d2:	e004      	b.n	80287de <_malloc_r+0x72>
 80287d4:	6863      	ldr	r3, [r4, #4]
 80287d6:	42a2      	cmp	r2, r4
 80287d8:	bf0c      	ite	eq
 80287da:	600b      	streq	r3, [r1, #0]
 80287dc:	6053      	strne	r3, [r2, #4]
 80287de:	4630      	mov	r0, r6
 80287e0:	f000 fea8 	bl	8029534 <__malloc_unlock>
 80287e4:	f104 000b 	add.w	r0, r4, #11
 80287e8:	1d23      	adds	r3, r4, #4
 80287ea:	f020 0007 	bic.w	r0, r0, #7
 80287ee:	1ac2      	subs	r2, r0, r3
 80287f0:	d0cc      	beq.n	802878c <_malloc_r+0x20>
 80287f2:	1a1b      	subs	r3, r3, r0
 80287f4:	50a3      	str	r3, [r4, r2]
 80287f6:	e7c9      	b.n	802878c <_malloc_r+0x20>
 80287f8:	4622      	mov	r2, r4
 80287fa:	6864      	ldr	r4, [r4, #4]
 80287fc:	e7cc      	b.n	8028798 <_malloc_r+0x2c>
 80287fe:	1cc4      	adds	r4, r0, #3
 8028800:	f024 0403 	bic.w	r4, r4, #3
 8028804:	42a0      	cmp	r0, r4
 8028806:	d0e3      	beq.n	80287d0 <_malloc_r+0x64>
 8028808:	1a21      	subs	r1, r4, r0
 802880a:	4630      	mov	r0, r6
 802880c:	f000 faf6 	bl	8028dfc <_sbrk_r>
 8028810:	3001      	adds	r0, #1
 8028812:	d1dd      	bne.n	80287d0 <_malloc_r+0x64>
 8028814:	e7cf      	b.n	80287b6 <_malloc_r+0x4a>
 8028816:	bf00      	nop
 8028818:	2000c00c 	.word	0x2000c00c
 802881c:	2000c010 	.word	0x2000c010

08028820 <__sfputc_r>:
 8028820:	6893      	ldr	r3, [r2, #8]
 8028822:	3b01      	subs	r3, #1
 8028824:	2b00      	cmp	r3, #0
 8028826:	b410      	push	{r4}
 8028828:	6093      	str	r3, [r2, #8]
 802882a:	da08      	bge.n	802883e <__sfputc_r+0x1e>
 802882c:	6994      	ldr	r4, [r2, #24]
 802882e:	42a3      	cmp	r3, r4
 8028830:	db01      	blt.n	8028836 <__sfputc_r+0x16>
 8028832:	290a      	cmp	r1, #10
 8028834:	d103      	bne.n	802883e <__sfputc_r+0x1e>
 8028836:	f85d 4b04 	ldr.w	r4, [sp], #4
 802883a:	f000 bb33 	b.w	8028ea4 <__swbuf_r>
 802883e:	6813      	ldr	r3, [r2, #0]
 8028840:	1c58      	adds	r0, r3, #1
 8028842:	6010      	str	r0, [r2, #0]
 8028844:	7019      	strb	r1, [r3, #0]
 8028846:	4608      	mov	r0, r1
 8028848:	f85d 4b04 	ldr.w	r4, [sp], #4
 802884c:	4770      	bx	lr

0802884e <__sfputs_r>:
 802884e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028850:	4606      	mov	r6, r0
 8028852:	460f      	mov	r7, r1
 8028854:	4614      	mov	r4, r2
 8028856:	18d5      	adds	r5, r2, r3
 8028858:	42ac      	cmp	r4, r5
 802885a:	d101      	bne.n	8028860 <__sfputs_r+0x12>
 802885c:	2000      	movs	r0, #0
 802885e:	e007      	b.n	8028870 <__sfputs_r+0x22>
 8028860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028864:	463a      	mov	r2, r7
 8028866:	4630      	mov	r0, r6
 8028868:	f7ff ffda 	bl	8028820 <__sfputc_r>
 802886c:	1c43      	adds	r3, r0, #1
 802886e:	d1f3      	bne.n	8028858 <__sfputs_r+0xa>
 8028870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028874 <_vfiprintf_r>:
 8028874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028878:	460d      	mov	r5, r1
 802887a:	b09d      	sub	sp, #116	; 0x74
 802887c:	4614      	mov	r4, r2
 802887e:	4698      	mov	r8, r3
 8028880:	4606      	mov	r6, r0
 8028882:	b118      	cbz	r0, 802888c <_vfiprintf_r+0x18>
 8028884:	6983      	ldr	r3, [r0, #24]
 8028886:	b90b      	cbnz	r3, 802888c <_vfiprintf_r+0x18>
 8028888:	f000 fd48 	bl	802931c <__sinit>
 802888c:	4b89      	ldr	r3, [pc, #548]	; (8028ab4 <_vfiprintf_r+0x240>)
 802888e:	429d      	cmp	r5, r3
 8028890:	d11b      	bne.n	80288ca <_vfiprintf_r+0x56>
 8028892:	6875      	ldr	r5, [r6, #4]
 8028894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028896:	07d9      	lsls	r1, r3, #31
 8028898:	d405      	bmi.n	80288a6 <_vfiprintf_r+0x32>
 802889a:	89ab      	ldrh	r3, [r5, #12]
 802889c:	059a      	lsls	r2, r3, #22
 802889e:	d402      	bmi.n	80288a6 <_vfiprintf_r+0x32>
 80288a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80288a2:	f000 fdd9 	bl	8029458 <__retarget_lock_acquire_recursive>
 80288a6:	89ab      	ldrh	r3, [r5, #12]
 80288a8:	071b      	lsls	r3, r3, #28
 80288aa:	d501      	bpl.n	80288b0 <_vfiprintf_r+0x3c>
 80288ac:	692b      	ldr	r3, [r5, #16]
 80288ae:	b9eb      	cbnz	r3, 80288ec <_vfiprintf_r+0x78>
 80288b0:	4629      	mov	r1, r5
 80288b2:	4630      	mov	r0, r6
 80288b4:	f000 fb48 	bl	8028f48 <__swsetup_r>
 80288b8:	b1c0      	cbz	r0, 80288ec <_vfiprintf_r+0x78>
 80288ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80288bc:	07dc      	lsls	r4, r3, #31
 80288be:	d50e      	bpl.n	80288de <_vfiprintf_r+0x6a>
 80288c0:	f04f 30ff 	mov.w	r0, #4294967295
 80288c4:	b01d      	add	sp, #116	; 0x74
 80288c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288ca:	4b7b      	ldr	r3, [pc, #492]	; (8028ab8 <_vfiprintf_r+0x244>)
 80288cc:	429d      	cmp	r5, r3
 80288ce:	d101      	bne.n	80288d4 <_vfiprintf_r+0x60>
 80288d0:	68b5      	ldr	r5, [r6, #8]
 80288d2:	e7df      	b.n	8028894 <_vfiprintf_r+0x20>
 80288d4:	4b79      	ldr	r3, [pc, #484]	; (8028abc <_vfiprintf_r+0x248>)
 80288d6:	429d      	cmp	r5, r3
 80288d8:	bf08      	it	eq
 80288da:	68f5      	ldreq	r5, [r6, #12]
 80288dc:	e7da      	b.n	8028894 <_vfiprintf_r+0x20>
 80288de:	89ab      	ldrh	r3, [r5, #12]
 80288e0:	0598      	lsls	r0, r3, #22
 80288e2:	d4ed      	bmi.n	80288c0 <_vfiprintf_r+0x4c>
 80288e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80288e6:	f000 fdb9 	bl	802945c <__retarget_lock_release_recursive>
 80288ea:	e7e9      	b.n	80288c0 <_vfiprintf_r+0x4c>
 80288ec:	2300      	movs	r3, #0
 80288ee:	9309      	str	r3, [sp, #36]	; 0x24
 80288f0:	2320      	movs	r3, #32
 80288f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80288f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80288fa:	2330      	movs	r3, #48	; 0x30
 80288fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028ac0 <_vfiprintf_r+0x24c>
 8028900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028904:	f04f 0901 	mov.w	r9, #1
 8028908:	4623      	mov	r3, r4
 802890a:	469a      	mov	sl, r3
 802890c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028910:	b10a      	cbz	r2, 8028916 <_vfiprintf_r+0xa2>
 8028912:	2a25      	cmp	r2, #37	; 0x25
 8028914:	d1f9      	bne.n	802890a <_vfiprintf_r+0x96>
 8028916:	ebba 0b04 	subs.w	fp, sl, r4
 802891a:	d00b      	beq.n	8028934 <_vfiprintf_r+0xc0>
 802891c:	465b      	mov	r3, fp
 802891e:	4622      	mov	r2, r4
 8028920:	4629      	mov	r1, r5
 8028922:	4630      	mov	r0, r6
 8028924:	f7ff ff93 	bl	802884e <__sfputs_r>
 8028928:	3001      	adds	r0, #1
 802892a:	f000 80aa 	beq.w	8028a82 <_vfiprintf_r+0x20e>
 802892e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028930:	445a      	add	r2, fp
 8028932:	9209      	str	r2, [sp, #36]	; 0x24
 8028934:	f89a 3000 	ldrb.w	r3, [sl]
 8028938:	2b00      	cmp	r3, #0
 802893a:	f000 80a2 	beq.w	8028a82 <_vfiprintf_r+0x20e>
 802893e:	2300      	movs	r3, #0
 8028940:	f04f 32ff 	mov.w	r2, #4294967295
 8028944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028948:	f10a 0a01 	add.w	sl, sl, #1
 802894c:	9304      	str	r3, [sp, #16]
 802894e:	9307      	str	r3, [sp, #28]
 8028950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028954:	931a      	str	r3, [sp, #104]	; 0x68
 8028956:	4654      	mov	r4, sl
 8028958:	2205      	movs	r2, #5
 802895a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802895e:	4858      	ldr	r0, [pc, #352]	; (8028ac0 <_vfiprintf_r+0x24c>)
 8028960:	f7d7 fc56 	bl	8000210 <memchr>
 8028964:	9a04      	ldr	r2, [sp, #16]
 8028966:	b9d8      	cbnz	r0, 80289a0 <_vfiprintf_r+0x12c>
 8028968:	06d1      	lsls	r1, r2, #27
 802896a:	bf44      	itt	mi
 802896c:	2320      	movmi	r3, #32
 802896e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028972:	0713      	lsls	r3, r2, #28
 8028974:	bf44      	itt	mi
 8028976:	232b      	movmi	r3, #43	; 0x2b
 8028978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802897c:	f89a 3000 	ldrb.w	r3, [sl]
 8028980:	2b2a      	cmp	r3, #42	; 0x2a
 8028982:	d015      	beq.n	80289b0 <_vfiprintf_r+0x13c>
 8028984:	9a07      	ldr	r2, [sp, #28]
 8028986:	4654      	mov	r4, sl
 8028988:	2000      	movs	r0, #0
 802898a:	f04f 0c0a 	mov.w	ip, #10
 802898e:	4621      	mov	r1, r4
 8028990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028994:	3b30      	subs	r3, #48	; 0x30
 8028996:	2b09      	cmp	r3, #9
 8028998:	d94e      	bls.n	8028a38 <_vfiprintf_r+0x1c4>
 802899a:	b1b0      	cbz	r0, 80289ca <_vfiprintf_r+0x156>
 802899c:	9207      	str	r2, [sp, #28]
 802899e:	e014      	b.n	80289ca <_vfiprintf_r+0x156>
 80289a0:	eba0 0308 	sub.w	r3, r0, r8
 80289a4:	fa09 f303 	lsl.w	r3, r9, r3
 80289a8:	4313      	orrs	r3, r2
 80289aa:	9304      	str	r3, [sp, #16]
 80289ac:	46a2      	mov	sl, r4
 80289ae:	e7d2      	b.n	8028956 <_vfiprintf_r+0xe2>
 80289b0:	9b03      	ldr	r3, [sp, #12]
 80289b2:	1d19      	adds	r1, r3, #4
 80289b4:	681b      	ldr	r3, [r3, #0]
 80289b6:	9103      	str	r1, [sp, #12]
 80289b8:	2b00      	cmp	r3, #0
 80289ba:	bfbb      	ittet	lt
 80289bc:	425b      	neglt	r3, r3
 80289be:	f042 0202 	orrlt.w	r2, r2, #2
 80289c2:	9307      	strge	r3, [sp, #28]
 80289c4:	9307      	strlt	r3, [sp, #28]
 80289c6:	bfb8      	it	lt
 80289c8:	9204      	strlt	r2, [sp, #16]
 80289ca:	7823      	ldrb	r3, [r4, #0]
 80289cc:	2b2e      	cmp	r3, #46	; 0x2e
 80289ce:	d10c      	bne.n	80289ea <_vfiprintf_r+0x176>
 80289d0:	7863      	ldrb	r3, [r4, #1]
 80289d2:	2b2a      	cmp	r3, #42	; 0x2a
 80289d4:	d135      	bne.n	8028a42 <_vfiprintf_r+0x1ce>
 80289d6:	9b03      	ldr	r3, [sp, #12]
 80289d8:	1d1a      	adds	r2, r3, #4
 80289da:	681b      	ldr	r3, [r3, #0]
 80289dc:	9203      	str	r2, [sp, #12]
 80289de:	2b00      	cmp	r3, #0
 80289e0:	bfb8      	it	lt
 80289e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80289e6:	3402      	adds	r4, #2
 80289e8:	9305      	str	r3, [sp, #20]
 80289ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028ad0 <_vfiprintf_r+0x25c>
 80289ee:	7821      	ldrb	r1, [r4, #0]
 80289f0:	2203      	movs	r2, #3
 80289f2:	4650      	mov	r0, sl
 80289f4:	f7d7 fc0c 	bl	8000210 <memchr>
 80289f8:	b140      	cbz	r0, 8028a0c <_vfiprintf_r+0x198>
 80289fa:	2340      	movs	r3, #64	; 0x40
 80289fc:	eba0 000a 	sub.w	r0, r0, sl
 8028a00:	fa03 f000 	lsl.w	r0, r3, r0
 8028a04:	9b04      	ldr	r3, [sp, #16]
 8028a06:	4303      	orrs	r3, r0
 8028a08:	3401      	adds	r4, #1
 8028a0a:	9304      	str	r3, [sp, #16]
 8028a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028a10:	482c      	ldr	r0, [pc, #176]	; (8028ac4 <_vfiprintf_r+0x250>)
 8028a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028a16:	2206      	movs	r2, #6
 8028a18:	f7d7 fbfa 	bl	8000210 <memchr>
 8028a1c:	2800      	cmp	r0, #0
 8028a1e:	d03f      	beq.n	8028aa0 <_vfiprintf_r+0x22c>
 8028a20:	4b29      	ldr	r3, [pc, #164]	; (8028ac8 <_vfiprintf_r+0x254>)
 8028a22:	bb1b      	cbnz	r3, 8028a6c <_vfiprintf_r+0x1f8>
 8028a24:	9b03      	ldr	r3, [sp, #12]
 8028a26:	3307      	adds	r3, #7
 8028a28:	f023 0307 	bic.w	r3, r3, #7
 8028a2c:	3308      	adds	r3, #8
 8028a2e:	9303      	str	r3, [sp, #12]
 8028a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a32:	443b      	add	r3, r7
 8028a34:	9309      	str	r3, [sp, #36]	; 0x24
 8028a36:	e767      	b.n	8028908 <_vfiprintf_r+0x94>
 8028a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8028a3c:	460c      	mov	r4, r1
 8028a3e:	2001      	movs	r0, #1
 8028a40:	e7a5      	b.n	802898e <_vfiprintf_r+0x11a>
 8028a42:	2300      	movs	r3, #0
 8028a44:	3401      	adds	r4, #1
 8028a46:	9305      	str	r3, [sp, #20]
 8028a48:	4619      	mov	r1, r3
 8028a4a:	f04f 0c0a 	mov.w	ip, #10
 8028a4e:	4620      	mov	r0, r4
 8028a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028a54:	3a30      	subs	r2, #48	; 0x30
 8028a56:	2a09      	cmp	r2, #9
 8028a58:	d903      	bls.n	8028a62 <_vfiprintf_r+0x1ee>
 8028a5a:	2b00      	cmp	r3, #0
 8028a5c:	d0c5      	beq.n	80289ea <_vfiprintf_r+0x176>
 8028a5e:	9105      	str	r1, [sp, #20]
 8028a60:	e7c3      	b.n	80289ea <_vfiprintf_r+0x176>
 8028a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8028a66:	4604      	mov	r4, r0
 8028a68:	2301      	movs	r3, #1
 8028a6a:	e7f0      	b.n	8028a4e <_vfiprintf_r+0x1da>
 8028a6c:	ab03      	add	r3, sp, #12
 8028a6e:	9300      	str	r3, [sp, #0]
 8028a70:	462a      	mov	r2, r5
 8028a72:	4b16      	ldr	r3, [pc, #88]	; (8028acc <_vfiprintf_r+0x258>)
 8028a74:	a904      	add	r1, sp, #16
 8028a76:	4630      	mov	r0, r6
 8028a78:	f3af 8000 	nop.w
 8028a7c:	4607      	mov	r7, r0
 8028a7e:	1c78      	adds	r0, r7, #1
 8028a80:	d1d6      	bne.n	8028a30 <_vfiprintf_r+0x1bc>
 8028a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028a84:	07d9      	lsls	r1, r3, #31
 8028a86:	d405      	bmi.n	8028a94 <_vfiprintf_r+0x220>
 8028a88:	89ab      	ldrh	r3, [r5, #12]
 8028a8a:	059a      	lsls	r2, r3, #22
 8028a8c:	d402      	bmi.n	8028a94 <_vfiprintf_r+0x220>
 8028a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028a90:	f000 fce4 	bl	802945c <__retarget_lock_release_recursive>
 8028a94:	89ab      	ldrh	r3, [r5, #12]
 8028a96:	065b      	lsls	r3, r3, #25
 8028a98:	f53f af12 	bmi.w	80288c0 <_vfiprintf_r+0x4c>
 8028a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028a9e:	e711      	b.n	80288c4 <_vfiprintf_r+0x50>
 8028aa0:	ab03      	add	r3, sp, #12
 8028aa2:	9300      	str	r3, [sp, #0]
 8028aa4:	462a      	mov	r2, r5
 8028aa6:	4b09      	ldr	r3, [pc, #36]	; (8028acc <_vfiprintf_r+0x258>)
 8028aa8:	a904      	add	r1, sp, #16
 8028aaa:	4630      	mov	r0, r6
 8028aac:	f000 f880 	bl	8028bb0 <_printf_i>
 8028ab0:	e7e4      	b.n	8028a7c <_vfiprintf_r+0x208>
 8028ab2:	bf00      	nop
 8028ab4:	0802e1d4 	.word	0x0802e1d4
 8028ab8:	0802e1f4 	.word	0x0802e1f4
 8028abc:	0802e1b4 	.word	0x0802e1b4
 8028ac0:	0802e17c 	.word	0x0802e17c
 8028ac4:	0802e186 	.word	0x0802e186
 8028ac8:	00000000 	.word	0x00000000
 8028acc:	0802884f 	.word	0x0802884f
 8028ad0:	0802e182 	.word	0x0802e182

08028ad4 <_printf_common>:
 8028ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028ad8:	4616      	mov	r6, r2
 8028ada:	4699      	mov	r9, r3
 8028adc:	688a      	ldr	r2, [r1, #8]
 8028ade:	690b      	ldr	r3, [r1, #16]
 8028ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028ae4:	4293      	cmp	r3, r2
 8028ae6:	bfb8      	it	lt
 8028ae8:	4613      	movlt	r3, r2
 8028aea:	6033      	str	r3, [r6, #0]
 8028aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028af0:	4607      	mov	r7, r0
 8028af2:	460c      	mov	r4, r1
 8028af4:	b10a      	cbz	r2, 8028afa <_printf_common+0x26>
 8028af6:	3301      	adds	r3, #1
 8028af8:	6033      	str	r3, [r6, #0]
 8028afa:	6823      	ldr	r3, [r4, #0]
 8028afc:	0699      	lsls	r1, r3, #26
 8028afe:	bf42      	ittt	mi
 8028b00:	6833      	ldrmi	r3, [r6, #0]
 8028b02:	3302      	addmi	r3, #2
 8028b04:	6033      	strmi	r3, [r6, #0]
 8028b06:	6825      	ldr	r5, [r4, #0]
 8028b08:	f015 0506 	ands.w	r5, r5, #6
 8028b0c:	d106      	bne.n	8028b1c <_printf_common+0x48>
 8028b0e:	f104 0a19 	add.w	sl, r4, #25
 8028b12:	68e3      	ldr	r3, [r4, #12]
 8028b14:	6832      	ldr	r2, [r6, #0]
 8028b16:	1a9b      	subs	r3, r3, r2
 8028b18:	42ab      	cmp	r3, r5
 8028b1a:	dc26      	bgt.n	8028b6a <_printf_common+0x96>
 8028b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028b20:	1e13      	subs	r3, r2, #0
 8028b22:	6822      	ldr	r2, [r4, #0]
 8028b24:	bf18      	it	ne
 8028b26:	2301      	movne	r3, #1
 8028b28:	0692      	lsls	r2, r2, #26
 8028b2a:	d42b      	bmi.n	8028b84 <_printf_common+0xb0>
 8028b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028b30:	4649      	mov	r1, r9
 8028b32:	4638      	mov	r0, r7
 8028b34:	47c0      	blx	r8
 8028b36:	3001      	adds	r0, #1
 8028b38:	d01e      	beq.n	8028b78 <_printf_common+0xa4>
 8028b3a:	6823      	ldr	r3, [r4, #0]
 8028b3c:	68e5      	ldr	r5, [r4, #12]
 8028b3e:	6832      	ldr	r2, [r6, #0]
 8028b40:	f003 0306 	and.w	r3, r3, #6
 8028b44:	2b04      	cmp	r3, #4
 8028b46:	bf08      	it	eq
 8028b48:	1aad      	subeq	r5, r5, r2
 8028b4a:	68a3      	ldr	r3, [r4, #8]
 8028b4c:	6922      	ldr	r2, [r4, #16]
 8028b4e:	bf0c      	ite	eq
 8028b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028b54:	2500      	movne	r5, #0
 8028b56:	4293      	cmp	r3, r2
 8028b58:	bfc4      	itt	gt
 8028b5a:	1a9b      	subgt	r3, r3, r2
 8028b5c:	18ed      	addgt	r5, r5, r3
 8028b5e:	2600      	movs	r6, #0
 8028b60:	341a      	adds	r4, #26
 8028b62:	42b5      	cmp	r5, r6
 8028b64:	d11a      	bne.n	8028b9c <_printf_common+0xc8>
 8028b66:	2000      	movs	r0, #0
 8028b68:	e008      	b.n	8028b7c <_printf_common+0xa8>
 8028b6a:	2301      	movs	r3, #1
 8028b6c:	4652      	mov	r2, sl
 8028b6e:	4649      	mov	r1, r9
 8028b70:	4638      	mov	r0, r7
 8028b72:	47c0      	blx	r8
 8028b74:	3001      	adds	r0, #1
 8028b76:	d103      	bne.n	8028b80 <_printf_common+0xac>
 8028b78:	f04f 30ff 	mov.w	r0, #4294967295
 8028b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028b80:	3501      	adds	r5, #1
 8028b82:	e7c6      	b.n	8028b12 <_printf_common+0x3e>
 8028b84:	18e1      	adds	r1, r4, r3
 8028b86:	1c5a      	adds	r2, r3, #1
 8028b88:	2030      	movs	r0, #48	; 0x30
 8028b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028b8e:	4422      	add	r2, r4
 8028b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028b98:	3302      	adds	r3, #2
 8028b9a:	e7c7      	b.n	8028b2c <_printf_common+0x58>
 8028b9c:	2301      	movs	r3, #1
 8028b9e:	4622      	mov	r2, r4
 8028ba0:	4649      	mov	r1, r9
 8028ba2:	4638      	mov	r0, r7
 8028ba4:	47c0      	blx	r8
 8028ba6:	3001      	adds	r0, #1
 8028ba8:	d0e6      	beq.n	8028b78 <_printf_common+0xa4>
 8028baa:	3601      	adds	r6, #1
 8028bac:	e7d9      	b.n	8028b62 <_printf_common+0x8e>
	...

08028bb0 <_printf_i>:
 8028bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028bb4:	460c      	mov	r4, r1
 8028bb6:	4691      	mov	r9, r2
 8028bb8:	7e27      	ldrb	r7, [r4, #24]
 8028bba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028bbc:	2f78      	cmp	r7, #120	; 0x78
 8028bbe:	4680      	mov	r8, r0
 8028bc0:	469a      	mov	sl, r3
 8028bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028bc6:	d807      	bhi.n	8028bd8 <_printf_i+0x28>
 8028bc8:	2f62      	cmp	r7, #98	; 0x62
 8028bca:	d80a      	bhi.n	8028be2 <_printf_i+0x32>
 8028bcc:	2f00      	cmp	r7, #0
 8028bce:	f000 80d8 	beq.w	8028d82 <_printf_i+0x1d2>
 8028bd2:	2f58      	cmp	r7, #88	; 0x58
 8028bd4:	f000 80a3 	beq.w	8028d1e <_printf_i+0x16e>
 8028bd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8028bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028be0:	e03a      	b.n	8028c58 <_printf_i+0xa8>
 8028be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028be6:	2b15      	cmp	r3, #21
 8028be8:	d8f6      	bhi.n	8028bd8 <_printf_i+0x28>
 8028bea:	a001      	add	r0, pc, #4	; (adr r0, 8028bf0 <_printf_i+0x40>)
 8028bec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8028bf0:	08028c49 	.word	0x08028c49
 8028bf4:	08028c5d 	.word	0x08028c5d
 8028bf8:	08028bd9 	.word	0x08028bd9
 8028bfc:	08028bd9 	.word	0x08028bd9
 8028c00:	08028bd9 	.word	0x08028bd9
 8028c04:	08028bd9 	.word	0x08028bd9
 8028c08:	08028c5d 	.word	0x08028c5d
 8028c0c:	08028bd9 	.word	0x08028bd9
 8028c10:	08028bd9 	.word	0x08028bd9
 8028c14:	08028bd9 	.word	0x08028bd9
 8028c18:	08028bd9 	.word	0x08028bd9
 8028c1c:	08028d69 	.word	0x08028d69
 8028c20:	08028c8d 	.word	0x08028c8d
 8028c24:	08028d4b 	.word	0x08028d4b
 8028c28:	08028bd9 	.word	0x08028bd9
 8028c2c:	08028bd9 	.word	0x08028bd9
 8028c30:	08028d8b 	.word	0x08028d8b
 8028c34:	08028bd9 	.word	0x08028bd9
 8028c38:	08028c8d 	.word	0x08028c8d
 8028c3c:	08028bd9 	.word	0x08028bd9
 8028c40:	08028bd9 	.word	0x08028bd9
 8028c44:	08028d53 	.word	0x08028d53
 8028c48:	680b      	ldr	r3, [r1, #0]
 8028c4a:	1d1a      	adds	r2, r3, #4
 8028c4c:	681b      	ldr	r3, [r3, #0]
 8028c4e:	600a      	str	r2, [r1, #0]
 8028c50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8028c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028c58:	2301      	movs	r3, #1
 8028c5a:	e0a3      	b.n	8028da4 <_printf_i+0x1f4>
 8028c5c:	6825      	ldr	r5, [r4, #0]
 8028c5e:	6808      	ldr	r0, [r1, #0]
 8028c60:	062e      	lsls	r6, r5, #24
 8028c62:	f100 0304 	add.w	r3, r0, #4
 8028c66:	d50a      	bpl.n	8028c7e <_printf_i+0xce>
 8028c68:	6805      	ldr	r5, [r0, #0]
 8028c6a:	600b      	str	r3, [r1, #0]
 8028c6c:	2d00      	cmp	r5, #0
 8028c6e:	da03      	bge.n	8028c78 <_printf_i+0xc8>
 8028c70:	232d      	movs	r3, #45	; 0x2d
 8028c72:	426d      	negs	r5, r5
 8028c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028c78:	485e      	ldr	r0, [pc, #376]	; (8028df4 <_printf_i+0x244>)
 8028c7a:	230a      	movs	r3, #10
 8028c7c:	e019      	b.n	8028cb2 <_printf_i+0x102>
 8028c7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8028c82:	6805      	ldr	r5, [r0, #0]
 8028c84:	600b      	str	r3, [r1, #0]
 8028c86:	bf18      	it	ne
 8028c88:	b22d      	sxthne	r5, r5
 8028c8a:	e7ef      	b.n	8028c6c <_printf_i+0xbc>
 8028c8c:	680b      	ldr	r3, [r1, #0]
 8028c8e:	6825      	ldr	r5, [r4, #0]
 8028c90:	1d18      	adds	r0, r3, #4
 8028c92:	6008      	str	r0, [r1, #0]
 8028c94:	0628      	lsls	r0, r5, #24
 8028c96:	d501      	bpl.n	8028c9c <_printf_i+0xec>
 8028c98:	681d      	ldr	r5, [r3, #0]
 8028c9a:	e002      	b.n	8028ca2 <_printf_i+0xf2>
 8028c9c:	0669      	lsls	r1, r5, #25
 8028c9e:	d5fb      	bpl.n	8028c98 <_printf_i+0xe8>
 8028ca0:	881d      	ldrh	r5, [r3, #0]
 8028ca2:	4854      	ldr	r0, [pc, #336]	; (8028df4 <_printf_i+0x244>)
 8028ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8028ca6:	bf0c      	ite	eq
 8028ca8:	2308      	moveq	r3, #8
 8028caa:	230a      	movne	r3, #10
 8028cac:	2100      	movs	r1, #0
 8028cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028cb2:	6866      	ldr	r6, [r4, #4]
 8028cb4:	60a6      	str	r6, [r4, #8]
 8028cb6:	2e00      	cmp	r6, #0
 8028cb8:	bfa2      	ittt	ge
 8028cba:	6821      	ldrge	r1, [r4, #0]
 8028cbc:	f021 0104 	bicge.w	r1, r1, #4
 8028cc0:	6021      	strge	r1, [r4, #0]
 8028cc2:	b90d      	cbnz	r5, 8028cc8 <_printf_i+0x118>
 8028cc4:	2e00      	cmp	r6, #0
 8028cc6:	d04d      	beq.n	8028d64 <_printf_i+0x1b4>
 8028cc8:	4616      	mov	r6, r2
 8028cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8028cce:	fb03 5711 	mls	r7, r3, r1, r5
 8028cd2:	5dc7      	ldrb	r7, [r0, r7]
 8028cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8028cd8:	462f      	mov	r7, r5
 8028cda:	42bb      	cmp	r3, r7
 8028cdc:	460d      	mov	r5, r1
 8028cde:	d9f4      	bls.n	8028cca <_printf_i+0x11a>
 8028ce0:	2b08      	cmp	r3, #8
 8028ce2:	d10b      	bne.n	8028cfc <_printf_i+0x14c>
 8028ce4:	6823      	ldr	r3, [r4, #0]
 8028ce6:	07df      	lsls	r7, r3, #31
 8028ce8:	d508      	bpl.n	8028cfc <_printf_i+0x14c>
 8028cea:	6923      	ldr	r3, [r4, #16]
 8028cec:	6861      	ldr	r1, [r4, #4]
 8028cee:	4299      	cmp	r1, r3
 8028cf0:	bfde      	ittt	le
 8028cf2:	2330      	movle	r3, #48	; 0x30
 8028cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8028cf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8028cfc:	1b92      	subs	r2, r2, r6
 8028cfe:	6122      	str	r2, [r4, #16]
 8028d00:	f8cd a000 	str.w	sl, [sp]
 8028d04:	464b      	mov	r3, r9
 8028d06:	aa03      	add	r2, sp, #12
 8028d08:	4621      	mov	r1, r4
 8028d0a:	4640      	mov	r0, r8
 8028d0c:	f7ff fee2 	bl	8028ad4 <_printf_common>
 8028d10:	3001      	adds	r0, #1
 8028d12:	d14c      	bne.n	8028dae <_printf_i+0x1fe>
 8028d14:	f04f 30ff 	mov.w	r0, #4294967295
 8028d18:	b004      	add	sp, #16
 8028d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028d1e:	4835      	ldr	r0, [pc, #212]	; (8028df4 <_printf_i+0x244>)
 8028d20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8028d24:	6823      	ldr	r3, [r4, #0]
 8028d26:	680e      	ldr	r6, [r1, #0]
 8028d28:	061f      	lsls	r7, r3, #24
 8028d2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8028d2e:	600e      	str	r6, [r1, #0]
 8028d30:	d514      	bpl.n	8028d5c <_printf_i+0x1ac>
 8028d32:	07d9      	lsls	r1, r3, #31
 8028d34:	bf44      	itt	mi
 8028d36:	f043 0320 	orrmi.w	r3, r3, #32
 8028d3a:	6023      	strmi	r3, [r4, #0]
 8028d3c:	b91d      	cbnz	r5, 8028d46 <_printf_i+0x196>
 8028d3e:	6823      	ldr	r3, [r4, #0]
 8028d40:	f023 0320 	bic.w	r3, r3, #32
 8028d44:	6023      	str	r3, [r4, #0]
 8028d46:	2310      	movs	r3, #16
 8028d48:	e7b0      	b.n	8028cac <_printf_i+0xfc>
 8028d4a:	6823      	ldr	r3, [r4, #0]
 8028d4c:	f043 0320 	orr.w	r3, r3, #32
 8028d50:	6023      	str	r3, [r4, #0]
 8028d52:	2378      	movs	r3, #120	; 0x78
 8028d54:	4828      	ldr	r0, [pc, #160]	; (8028df8 <_printf_i+0x248>)
 8028d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8028d5a:	e7e3      	b.n	8028d24 <_printf_i+0x174>
 8028d5c:	065e      	lsls	r6, r3, #25
 8028d5e:	bf48      	it	mi
 8028d60:	b2ad      	uxthmi	r5, r5
 8028d62:	e7e6      	b.n	8028d32 <_printf_i+0x182>
 8028d64:	4616      	mov	r6, r2
 8028d66:	e7bb      	b.n	8028ce0 <_printf_i+0x130>
 8028d68:	680b      	ldr	r3, [r1, #0]
 8028d6a:	6826      	ldr	r6, [r4, #0]
 8028d6c:	6960      	ldr	r0, [r4, #20]
 8028d6e:	1d1d      	adds	r5, r3, #4
 8028d70:	600d      	str	r5, [r1, #0]
 8028d72:	0635      	lsls	r5, r6, #24
 8028d74:	681b      	ldr	r3, [r3, #0]
 8028d76:	d501      	bpl.n	8028d7c <_printf_i+0x1cc>
 8028d78:	6018      	str	r0, [r3, #0]
 8028d7a:	e002      	b.n	8028d82 <_printf_i+0x1d2>
 8028d7c:	0671      	lsls	r1, r6, #25
 8028d7e:	d5fb      	bpl.n	8028d78 <_printf_i+0x1c8>
 8028d80:	8018      	strh	r0, [r3, #0]
 8028d82:	2300      	movs	r3, #0
 8028d84:	6123      	str	r3, [r4, #16]
 8028d86:	4616      	mov	r6, r2
 8028d88:	e7ba      	b.n	8028d00 <_printf_i+0x150>
 8028d8a:	680b      	ldr	r3, [r1, #0]
 8028d8c:	1d1a      	adds	r2, r3, #4
 8028d8e:	600a      	str	r2, [r1, #0]
 8028d90:	681e      	ldr	r6, [r3, #0]
 8028d92:	6862      	ldr	r2, [r4, #4]
 8028d94:	2100      	movs	r1, #0
 8028d96:	4630      	mov	r0, r6
 8028d98:	f7d7 fa3a 	bl	8000210 <memchr>
 8028d9c:	b108      	cbz	r0, 8028da2 <_printf_i+0x1f2>
 8028d9e:	1b80      	subs	r0, r0, r6
 8028da0:	6060      	str	r0, [r4, #4]
 8028da2:	6863      	ldr	r3, [r4, #4]
 8028da4:	6123      	str	r3, [r4, #16]
 8028da6:	2300      	movs	r3, #0
 8028da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028dac:	e7a8      	b.n	8028d00 <_printf_i+0x150>
 8028dae:	6923      	ldr	r3, [r4, #16]
 8028db0:	4632      	mov	r2, r6
 8028db2:	4649      	mov	r1, r9
 8028db4:	4640      	mov	r0, r8
 8028db6:	47d0      	blx	sl
 8028db8:	3001      	adds	r0, #1
 8028dba:	d0ab      	beq.n	8028d14 <_printf_i+0x164>
 8028dbc:	6823      	ldr	r3, [r4, #0]
 8028dbe:	079b      	lsls	r3, r3, #30
 8028dc0:	d413      	bmi.n	8028dea <_printf_i+0x23a>
 8028dc2:	68e0      	ldr	r0, [r4, #12]
 8028dc4:	9b03      	ldr	r3, [sp, #12]
 8028dc6:	4298      	cmp	r0, r3
 8028dc8:	bfb8      	it	lt
 8028dca:	4618      	movlt	r0, r3
 8028dcc:	e7a4      	b.n	8028d18 <_printf_i+0x168>
 8028dce:	2301      	movs	r3, #1
 8028dd0:	4632      	mov	r2, r6
 8028dd2:	4649      	mov	r1, r9
 8028dd4:	4640      	mov	r0, r8
 8028dd6:	47d0      	blx	sl
 8028dd8:	3001      	adds	r0, #1
 8028dda:	d09b      	beq.n	8028d14 <_printf_i+0x164>
 8028ddc:	3501      	adds	r5, #1
 8028dde:	68e3      	ldr	r3, [r4, #12]
 8028de0:	9903      	ldr	r1, [sp, #12]
 8028de2:	1a5b      	subs	r3, r3, r1
 8028de4:	42ab      	cmp	r3, r5
 8028de6:	dcf2      	bgt.n	8028dce <_printf_i+0x21e>
 8028de8:	e7eb      	b.n	8028dc2 <_printf_i+0x212>
 8028dea:	2500      	movs	r5, #0
 8028dec:	f104 0619 	add.w	r6, r4, #25
 8028df0:	e7f5      	b.n	8028dde <_printf_i+0x22e>
 8028df2:	bf00      	nop
 8028df4:	0802e18d 	.word	0x0802e18d
 8028df8:	0802e19e 	.word	0x0802e19e

08028dfc <_sbrk_r>:
 8028dfc:	b538      	push	{r3, r4, r5, lr}
 8028dfe:	4d06      	ldr	r5, [pc, #24]	; (8028e18 <_sbrk_r+0x1c>)
 8028e00:	2300      	movs	r3, #0
 8028e02:	4604      	mov	r4, r0
 8028e04:	4608      	mov	r0, r1
 8028e06:	602b      	str	r3, [r5, #0]
 8028e08:	f7da fcce 	bl	80037a8 <_sbrk>
 8028e0c:	1c43      	adds	r3, r0, #1
 8028e0e:	d102      	bne.n	8028e16 <_sbrk_r+0x1a>
 8028e10:	682b      	ldr	r3, [r5, #0]
 8028e12:	b103      	cbz	r3, 8028e16 <_sbrk_r+0x1a>
 8028e14:	6023      	str	r3, [r4, #0]
 8028e16:	bd38      	pop	{r3, r4, r5, pc}
 8028e18:	2000cdbc 	.word	0x2000cdbc

08028e1c <_raise_r>:
 8028e1c:	291f      	cmp	r1, #31
 8028e1e:	b538      	push	{r3, r4, r5, lr}
 8028e20:	4604      	mov	r4, r0
 8028e22:	460d      	mov	r5, r1
 8028e24:	d904      	bls.n	8028e30 <_raise_r+0x14>
 8028e26:	2316      	movs	r3, #22
 8028e28:	6003      	str	r3, [r0, #0]
 8028e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8028e2e:	bd38      	pop	{r3, r4, r5, pc}
 8028e30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028e32:	b112      	cbz	r2, 8028e3a <_raise_r+0x1e>
 8028e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028e38:	b94b      	cbnz	r3, 8028e4e <_raise_r+0x32>
 8028e3a:	4620      	mov	r0, r4
 8028e3c:	f000 f830 	bl	8028ea0 <_getpid_r>
 8028e40:	462a      	mov	r2, r5
 8028e42:	4601      	mov	r1, r0
 8028e44:	4620      	mov	r0, r4
 8028e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028e4a:	f000 b817 	b.w	8028e7c <_kill_r>
 8028e4e:	2b01      	cmp	r3, #1
 8028e50:	d00a      	beq.n	8028e68 <_raise_r+0x4c>
 8028e52:	1c59      	adds	r1, r3, #1
 8028e54:	d103      	bne.n	8028e5e <_raise_r+0x42>
 8028e56:	2316      	movs	r3, #22
 8028e58:	6003      	str	r3, [r0, #0]
 8028e5a:	2001      	movs	r0, #1
 8028e5c:	e7e7      	b.n	8028e2e <_raise_r+0x12>
 8028e5e:	2400      	movs	r4, #0
 8028e60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028e64:	4628      	mov	r0, r5
 8028e66:	4798      	blx	r3
 8028e68:	2000      	movs	r0, #0
 8028e6a:	e7e0      	b.n	8028e2e <_raise_r+0x12>

08028e6c <raise>:
 8028e6c:	4b02      	ldr	r3, [pc, #8]	; (8028e78 <raise+0xc>)
 8028e6e:	4601      	mov	r1, r0
 8028e70:	6818      	ldr	r0, [r3, #0]
 8028e72:	f7ff bfd3 	b.w	8028e1c <_raise_r>
 8028e76:	bf00      	nop
 8028e78:	200000d8 	.word	0x200000d8

08028e7c <_kill_r>:
 8028e7c:	b538      	push	{r3, r4, r5, lr}
 8028e7e:	4d07      	ldr	r5, [pc, #28]	; (8028e9c <_kill_r+0x20>)
 8028e80:	2300      	movs	r3, #0
 8028e82:	4604      	mov	r4, r0
 8028e84:	4608      	mov	r0, r1
 8028e86:	4611      	mov	r1, r2
 8028e88:	602b      	str	r3, [r5, #0]
 8028e8a:	f7da fc05 	bl	8003698 <_kill>
 8028e8e:	1c43      	adds	r3, r0, #1
 8028e90:	d102      	bne.n	8028e98 <_kill_r+0x1c>
 8028e92:	682b      	ldr	r3, [r5, #0]
 8028e94:	b103      	cbz	r3, 8028e98 <_kill_r+0x1c>
 8028e96:	6023      	str	r3, [r4, #0]
 8028e98:	bd38      	pop	{r3, r4, r5, pc}
 8028e9a:	bf00      	nop
 8028e9c:	2000cdbc 	.word	0x2000cdbc

08028ea0 <_getpid_r>:
 8028ea0:	f7da bbf2 	b.w	8003688 <_getpid>

08028ea4 <__swbuf_r>:
 8028ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028ea6:	460e      	mov	r6, r1
 8028ea8:	4614      	mov	r4, r2
 8028eaa:	4605      	mov	r5, r0
 8028eac:	b118      	cbz	r0, 8028eb6 <__swbuf_r+0x12>
 8028eae:	6983      	ldr	r3, [r0, #24]
 8028eb0:	b90b      	cbnz	r3, 8028eb6 <__swbuf_r+0x12>
 8028eb2:	f000 fa33 	bl	802931c <__sinit>
 8028eb6:	4b21      	ldr	r3, [pc, #132]	; (8028f3c <__swbuf_r+0x98>)
 8028eb8:	429c      	cmp	r4, r3
 8028eba:	d12b      	bne.n	8028f14 <__swbuf_r+0x70>
 8028ebc:	686c      	ldr	r4, [r5, #4]
 8028ebe:	69a3      	ldr	r3, [r4, #24]
 8028ec0:	60a3      	str	r3, [r4, #8]
 8028ec2:	89a3      	ldrh	r3, [r4, #12]
 8028ec4:	071a      	lsls	r2, r3, #28
 8028ec6:	d52f      	bpl.n	8028f28 <__swbuf_r+0x84>
 8028ec8:	6923      	ldr	r3, [r4, #16]
 8028eca:	b36b      	cbz	r3, 8028f28 <__swbuf_r+0x84>
 8028ecc:	6923      	ldr	r3, [r4, #16]
 8028ece:	6820      	ldr	r0, [r4, #0]
 8028ed0:	1ac0      	subs	r0, r0, r3
 8028ed2:	6963      	ldr	r3, [r4, #20]
 8028ed4:	b2f6      	uxtb	r6, r6
 8028ed6:	4283      	cmp	r3, r0
 8028ed8:	4637      	mov	r7, r6
 8028eda:	dc04      	bgt.n	8028ee6 <__swbuf_r+0x42>
 8028edc:	4621      	mov	r1, r4
 8028ede:	4628      	mov	r0, r5
 8028ee0:	f000 f988 	bl	80291f4 <_fflush_r>
 8028ee4:	bb30      	cbnz	r0, 8028f34 <__swbuf_r+0x90>
 8028ee6:	68a3      	ldr	r3, [r4, #8]
 8028ee8:	3b01      	subs	r3, #1
 8028eea:	60a3      	str	r3, [r4, #8]
 8028eec:	6823      	ldr	r3, [r4, #0]
 8028eee:	1c5a      	adds	r2, r3, #1
 8028ef0:	6022      	str	r2, [r4, #0]
 8028ef2:	701e      	strb	r6, [r3, #0]
 8028ef4:	6963      	ldr	r3, [r4, #20]
 8028ef6:	3001      	adds	r0, #1
 8028ef8:	4283      	cmp	r3, r0
 8028efa:	d004      	beq.n	8028f06 <__swbuf_r+0x62>
 8028efc:	89a3      	ldrh	r3, [r4, #12]
 8028efe:	07db      	lsls	r3, r3, #31
 8028f00:	d506      	bpl.n	8028f10 <__swbuf_r+0x6c>
 8028f02:	2e0a      	cmp	r6, #10
 8028f04:	d104      	bne.n	8028f10 <__swbuf_r+0x6c>
 8028f06:	4621      	mov	r1, r4
 8028f08:	4628      	mov	r0, r5
 8028f0a:	f000 f973 	bl	80291f4 <_fflush_r>
 8028f0e:	b988      	cbnz	r0, 8028f34 <__swbuf_r+0x90>
 8028f10:	4638      	mov	r0, r7
 8028f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028f14:	4b0a      	ldr	r3, [pc, #40]	; (8028f40 <__swbuf_r+0x9c>)
 8028f16:	429c      	cmp	r4, r3
 8028f18:	d101      	bne.n	8028f1e <__swbuf_r+0x7a>
 8028f1a:	68ac      	ldr	r4, [r5, #8]
 8028f1c:	e7cf      	b.n	8028ebe <__swbuf_r+0x1a>
 8028f1e:	4b09      	ldr	r3, [pc, #36]	; (8028f44 <__swbuf_r+0xa0>)
 8028f20:	429c      	cmp	r4, r3
 8028f22:	bf08      	it	eq
 8028f24:	68ec      	ldreq	r4, [r5, #12]
 8028f26:	e7ca      	b.n	8028ebe <__swbuf_r+0x1a>
 8028f28:	4621      	mov	r1, r4
 8028f2a:	4628      	mov	r0, r5
 8028f2c:	f000 f80c 	bl	8028f48 <__swsetup_r>
 8028f30:	2800      	cmp	r0, #0
 8028f32:	d0cb      	beq.n	8028ecc <__swbuf_r+0x28>
 8028f34:	f04f 37ff 	mov.w	r7, #4294967295
 8028f38:	e7ea      	b.n	8028f10 <__swbuf_r+0x6c>
 8028f3a:	bf00      	nop
 8028f3c:	0802e1d4 	.word	0x0802e1d4
 8028f40:	0802e1f4 	.word	0x0802e1f4
 8028f44:	0802e1b4 	.word	0x0802e1b4

08028f48 <__swsetup_r>:
 8028f48:	4b32      	ldr	r3, [pc, #200]	; (8029014 <__swsetup_r+0xcc>)
 8028f4a:	b570      	push	{r4, r5, r6, lr}
 8028f4c:	681d      	ldr	r5, [r3, #0]
 8028f4e:	4606      	mov	r6, r0
 8028f50:	460c      	mov	r4, r1
 8028f52:	b125      	cbz	r5, 8028f5e <__swsetup_r+0x16>
 8028f54:	69ab      	ldr	r3, [r5, #24]
 8028f56:	b913      	cbnz	r3, 8028f5e <__swsetup_r+0x16>
 8028f58:	4628      	mov	r0, r5
 8028f5a:	f000 f9df 	bl	802931c <__sinit>
 8028f5e:	4b2e      	ldr	r3, [pc, #184]	; (8029018 <__swsetup_r+0xd0>)
 8028f60:	429c      	cmp	r4, r3
 8028f62:	d10f      	bne.n	8028f84 <__swsetup_r+0x3c>
 8028f64:	686c      	ldr	r4, [r5, #4]
 8028f66:	89a3      	ldrh	r3, [r4, #12]
 8028f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028f6c:	0719      	lsls	r1, r3, #28
 8028f6e:	d42c      	bmi.n	8028fca <__swsetup_r+0x82>
 8028f70:	06dd      	lsls	r5, r3, #27
 8028f72:	d411      	bmi.n	8028f98 <__swsetup_r+0x50>
 8028f74:	2309      	movs	r3, #9
 8028f76:	6033      	str	r3, [r6, #0]
 8028f78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028f7c:	81a3      	strh	r3, [r4, #12]
 8028f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8028f82:	e03e      	b.n	8029002 <__swsetup_r+0xba>
 8028f84:	4b25      	ldr	r3, [pc, #148]	; (802901c <__swsetup_r+0xd4>)
 8028f86:	429c      	cmp	r4, r3
 8028f88:	d101      	bne.n	8028f8e <__swsetup_r+0x46>
 8028f8a:	68ac      	ldr	r4, [r5, #8]
 8028f8c:	e7eb      	b.n	8028f66 <__swsetup_r+0x1e>
 8028f8e:	4b24      	ldr	r3, [pc, #144]	; (8029020 <__swsetup_r+0xd8>)
 8028f90:	429c      	cmp	r4, r3
 8028f92:	bf08      	it	eq
 8028f94:	68ec      	ldreq	r4, [r5, #12]
 8028f96:	e7e6      	b.n	8028f66 <__swsetup_r+0x1e>
 8028f98:	0758      	lsls	r0, r3, #29
 8028f9a:	d512      	bpl.n	8028fc2 <__swsetup_r+0x7a>
 8028f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028f9e:	b141      	cbz	r1, 8028fb2 <__swsetup_r+0x6a>
 8028fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028fa4:	4299      	cmp	r1, r3
 8028fa6:	d002      	beq.n	8028fae <__swsetup_r+0x66>
 8028fa8:	4630      	mov	r0, r6
 8028faa:	f7ff fb8f 	bl	80286cc <_free_r>
 8028fae:	2300      	movs	r3, #0
 8028fb0:	6363      	str	r3, [r4, #52]	; 0x34
 8028fb2:	89a3      	ldrh	r3, [r4, #12]
 8028fb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028fb8:	81a3      	strh	r3, [r4, #12]
 8028fba:	2300      	movs	r3, #0
 8028fbc:	6063      	str	r3, [r4, #4]
 8028fbe:	6923      	ldr	r3, [r4, #16]
 8028fc0:	6023      	str	r3, [r4, #0]
 8028fc2:	89a3      	ldrh	r3, [r4, #12]
 8028fc4:	f043 0308 	orr.w	r3, r3, #8
 8028fc8:	81a3      	strh	r3, [r4, #12]
 8028fca:	6923      	ldr	r3, [r4, #16]
 8028fcc:	b94b      	cbnz	r3, 8028fe2 <__swsetup_r+0x9a>
 8028fce:	89a3      	ldrh	r3, [r4, #12]
 8028fd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028fd8:	d003      	beq.n	8028fe2 <__swsetup_r+0x9a>
 8028fda:	4621      	mov	r1, r4
 8028fdc:	4630      	mov	r0, r6
 8028fde:	f000 fa63 	bl	80294a8 <__smakebuf_r>
 8028fe2:	89a0      	ldrh	r0, [r4, #12]
 8028fe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028fe8:	f010 0301 	ands.w	r3, r0, #1
 8028fec:	d00a      	beq.n	8029004 <__swsetup_r+0xbc>
 8028fee:	2300      	movs	r3, #0
 8028ff0:	60a3      	str	r3, [r4, #8]
 8028ff2:	6963      	ldr	r3, [r4, #20]
 8028ff4:	425b      	negs	r3, r3
 8028ff6:	61a3      	str	r3, [r4, #24]
 8028ff8:	6923      	ldr	r3, [r4, #16]
 8028ffa:	b943      	cbnz	r3, 802900e <__swsetup_r+0xc6>
 8028ffc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029000:	d1ba      	bne.n	8028f78 <__swsetup_r+0x30>
 8029002:	bd70      	pop	{r4, r5, r6, pc}
 8029004:	0781      	lsls	r1, r0, #30
 8029006:	bf58      	it	pl
 8029008:	6963      	ldrpl	r3, [r4, #20]
 802900a:	60a3      	str	r3, [r4, #8]
 802900c:	e7f4      	b.n	8028ff8 <__swsetup_r+0xb0>
 802900e:	2000      	movs	r0, #0
 8029010:	e7f7      	b.n	8029002 <__swsetup_r+0xba>
 8029012:	bf00      	nop
 8029014:	200000d8 	.word	0x200000d8
 8029018:	0802e1d4 	.word	0x0802e1d4
 802901c:	0802e1f4 	.word	0x0802e1f4
 8029020:	0802e1b4 	.word	0x0802e1b4

08029024 <__register_exitproc>:
 8029024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029028:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80290e4 <__register_exitproc+0xc0>
 802902c:	4606      	mov	r6, r0
 802902e:	f8d8 0000 	ldr.w	r0, [r8]
 8029032:	461f      	mov	r7, r3
 8029034:	460d      	mov	r5, r1
 8029036:	4691      	mov	r9, r2
 8029038:	f000 fa0e 	bl	8029458 <__retarget_lock_acquire_recursive>
 802903c:	4b25      	ldr	r3, [pc, #148]	; (80290d4 <__register_exitproc+0xb0>)
 802903e:	681c      	ldr	r4, [r3, #0]
 8029040:	b934      	cbnz	r4, 8029050 <__register_exitproc+0x2c>
 8029042:	4c25      	ldr	r4, [pc, #148]	; (80290d8 <__register_exitproc+0xb4>)
 8029044:	601c      	str	r4, [r3, #0]
 8029046:	4b25      	ldr	r3, [pc, #148]	; (80290dc <__register_exitproc+0xb8>)
 8029048:	b113      	cbz	r3, 8029050 <__register_exitproc+0x2c>
 802904a:	681b      	ldr	r3, [r3, #0]
 802904c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029050:	6863      	ldr	r3, [r4, #4]
 8029052:	2b1f      	cmp	r3, #31
 8029054:	dd07      	ble.n	8029066 <__register_exitproc+0x42>
 8029056:	f8d8 0000 	ldr.w	r0, [r8]
 802905a:	f000 f9ff 	bl	802945c <__retarget_lock_release_recursive>
 802905e:	f04f 30ff 	mov.w	r0, #4294967295
 8029062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029066:	b34e      	cbz	r6, 80290bc <__register_exitproc+0x98>
 8029068:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802906c:	b988      	cbnz	r0, 8029092 <__register_exitproc+0x6e>
 802906e:	4b1c      	ldr	r3, [pc, #112]	; (80290e0 <__register_exitproc+0xbc>)
 8029070:	b923      	cbnz	r3, 802907c <__register_exitproc+0x58>
 8029072:	f8d8 0000 	ldr.w	r0, [r8]
 8029076:	f000 f9f0 	bl	802945a <__retarget_lock_release>
 802907a:	e7f0      	b.n	802905e <__register_exitproc+0x3a>
 802907c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029080:	f7ff fafe 	bl	8028680 <malloc>
 8029084:	2800      	cmp	r0, #0
 8029086:	d0f4      	beq.n	8029072 <__register_exitproc+0x4e>
 8029088:	2300      	movs	r3, #0
 802908a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802908e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029092:	6863      	ldr	r3, [r4, #4]
 8029094:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029098:	2201      	movs	r2, #1
 802909a:	409a      	lsls	r2, r3
 802909c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80290a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80290a4:	4313      	orrs	r3, r2
 80290a6:	2e02      	cmp	r6, #2
 80290a8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80290ac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80290b0:	bf02      	ittt	eq
 80290b2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80290b6:	431a      	orreq	r2, r3
 80290b8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80290bc:	6863      	ldr	r3, [r4, #4]
 80290be:	f8d8 0000 	ldr.w	r0, [r8]
 80290c2:	1c5a      	adds	r2, r3, #1
 80290c4:	3302      	adds	r3, #2
 80290c6:	6062      	str	r2, [r4, #4]
 80290c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80290cc:	f000 f9c6 	bl	802945c <__retarget_lock_release_recursive>
 80290d0:	2000      	movs	r0, #0
 80290d2:	e7c6      	b.n	8029062 <__register_exitproc+0x3e>
 80290d4:	2000c1a8 	.word	0x2000c1a8
 80290d8:	2000c11c 	.word	0x2000c11c
 80290dc:	0802e1b0 	.word	0x0802e1b0
 80290e0:	08028681 	.word	0x08028681
 80290e4:	2000013c 	.word	0x2000013c

080290e8 <__sflush_r>:
 80290e8:	898a      	ldrh	r2, [r1, #12]
 80290ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80290ee:	4605      	mov	r5, r0
 80290f0:	0710      	lsls	r0, r2, #28
 80290f2:	460c      	mov	r4, r1
 80290f4:	d458      	bmi.n	80291a8 <__sflush_r+0xc0>
 80290f6:	684b      	ldr	r3, [r1, #4]
 80290f8:	2b00      	cmp	r3, #0
 80290fa:	dc05      	bgt.n	8029108 <__sflush_r+0x20>
 80290fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80290fe:	2b00      	cmp	r3, #0
 8029100:	dc02      	bgt.n	8029108 <__sflush_r+0x20>
 8029102:	2000      	movs	r0, #0
 8029104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802910a:	2e00      	cmp	r6, #0
 802910c:	d0f9      	beq.n	8029102 <__sflush_r+0x1a>
 802910e:	2300      	movs	r3, #0
 8029110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029114:	682f      	ldr	r7, [r5, #0]
 8029116:	602b      	str	r3, [r5, #0]
 8029118:	d032      	beq.n	8029180 <__sflush_r+0x98>
 802911a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802911c:	89a3      	ldrh	r3, [r4, #12]
 802911e:	075a      	lsls	r2, r3, #29
 8029120:	d505      	bpl.n	802912e <__sflush_r+0x46>
 8029122:	6863      	ldr	r3, [r4, #4]
 8029124:	1ac0      	subs	r0, r0, r3
 8029126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029128:	b10b      	cbz	r3, 802912e <__sflush_r+0x46>
 802912a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802912c:	1ac0      	subs	r0, r0, r3
 802912e:	2300      	movs	r3, #0
 8029130:	4602      	mov	r2, r0
 8029132:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029134:	6a21      	ldr	r1, [r4, #32]
 8029136:	4628      	mov	r0, r5
 8029138:	47b0      	blx	r6
 802913a:	1c43      	adds	r3, r0, #1
 802913c:	89a3      	ldrh	r3, [r4, #12]
 802913e:	d106      	bne.n	802914e <__sflush_r+0x66>
 8029140:	6829      	ldr	r1, [r5, #0]
 8029142:	291d      	cmp	r1, #29
 8029144:	d82c      	bhi.n	80291a0 <__sflush_r+0xb8>
 8029146:	4a2a      	ldr	r2, [pc, #168]	; (80291f0 <__sflush_r+0x108>)
 8029148:	40ca      	lsrs	r2, r1
 802914a:	07d6      	lsls	r6, r2, #31
 802914c:	d528      	bpl.n	80291a0 <__sflush_r+0xb8>
 802914e:	2200      	movs	r2, #0
 8029150:	6062      	str	r2, [r4, #4]
 8029152:	04d9      	lsls	r1, r3, #19
 8029154:	6922      	ldr	r2, [r4, #16]
 8029156:	6022      	str	r2, [r4, #0]
 8029158:	d504      	bpl.n	8029164 <__sflush_r+0x7c>
 802915a:	1c42      	adds	r2, r0, #1
 802915c:	d101      	bne.n	8029162 <__sflush_r+0x7a>
 802915e:	682b      	ldr	r3, [r5, #0]
 8029160:	b903      	cbnz	r3, 8029164 <__sflush_r+0x7c>
 8029162:	6560      	str	r0, [r4, #84]	; 0x54
 8029164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029166:	602f      	str	r7, [r5, #0]
 8029168:	2900      	cmp	r1, #0
 802916a:	d0ca      	beq.n	8029102 <__sflush_r+0x1a>
 802916c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029170:	4299      	cmp	r1, r3
 8029172:	d002      	beq.n	802917a <__sflush_r+0x92>
 8029174:	4628      	mov	r0, r5
 8029176:	f7ff faa9 	bl	80286cc <_free_r>
 802917a:	2000      	movs	r0, #0
 802917c:	6360      	str	r0, [r4, #52]	; 0x34
 802917e:	e7c1      	b.n	8029104 <__sflush_r+0x1c>
 8029180:	6a21      	ldr	r1, [r4, #32]
 8029182:	2301      	movs	r3, #1
 8029184:	4628      	mov	r0, r5
 8029186:	47b0      	blx	r6
 8029188:	1c41      	adds	r1, r0, #1
 802918a:	d1c7      	bne.n	802911c <__sflush_r+0x34>
 802918c:	682b      	ldr	r3, [r5, #0]
 802918e:	2b00      	cmp	r3, #0
 8029190:	d0c4      	beq.n	802911c <__sflush_r+0x34>
 8029192:	2b1d      	cmp	r3, #29
 8029194:	d001      	beq.n	802919a <__sflush_r+0xb2>
 8029196:	2b16      	cmp	r3, #22
 8029198:	d101      	bne.n	802919e <__sflush_r+0xb6>
 802919a:	602f      	str	r7, [r5, #0]
 802919c:	e7b1      	b.n	8029102 <__sflush_r+0x1a>
 802919e:	89a3      	ldrh	r3, [r4, #12]
 80291a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80291a4:	81a3      	strh	r3, [r4, #12]
 80291a6:	e7ad      	b.n	8029104 <__sflush_r+0x1c>
 80291a8:	690f      	ldr	r7, [r1, #16]
 80291aa:	2f00      	cmp	r7, #0
 80291ac:	d0a9      	beq.n	8029102 <__sflush_r+0x1a>
 80291ae:	0793      	lsls	r3, r2, #30
 80291b0:	680e      	ldr	r6, [r1, #0]
 80291b2:	bf08      	it	eq
 80291b4:	694b      	ldreq	r3, [r1, #20]
 80291b6:	600f      	str	r7, [r1, #0]
 80291b8:	bf18      	it	ne
 80291ba:	2300      	movne	r3, #0
 80291bc:	eba6 0807 	sub.w	r8, r6, r7
 80291c0:	608b      	str	r3, [r1, #8]
 80291c2:	f1b8 0f00 	cmp.w	r8, #0
 80291c6:	dd9c      	ble.n	8029102 <__sflush_r+0x1a>
 80291c8:	6a21      	ldr	r1, [r4, #32]
 80291ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80291cc:	4643      	mov	r3, r8
 80291ce:	463a      	mov	r2, r7
 80291d0:	4628      	mov	r0, r5
 80291d2:	47b0      	blx	r6
 80291d4:	2800      	cmp	r0, #0
 80291d6:	dc06      	bgt.n	80291e6 <__sflush_r+0xfe>
 80291d8:	89a3      	ldrh	r3, [r4, #12]
 80291da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80291de:	81a3      	strh	r3, [r4, #12]
 80291e0:	f04f 30ff 	mov.w	r0, #4294967295
 80291e4:	e78e      	b.n	8029104 <__sflush_r+0x1c>
 80291e6:	4407      	add	r7, r0
 80291e8:	eba8 0800 	sub.w	r8, r8, r0
 80291ec:	e7e9      	b.n	80291c2 <__sflush_r+0xda>
 80291ee:	bf00      	nop
 80291f0:	20400001 	.word	0x20400001

080291f4 <_fflush_r>:
 80291f4:	b538      	push	{r3, r4, r5, lr}
 80291f6:	690b      	ldr	r3, [r1, #16]
 80291f8:	4605      	mov	r5, r0
 80291fa:	460c      	mov	r4, r1
 80291fc:	b913      	cbnz	r3, 8029204 <_fflush_r+0x10>
 80291fe:	2500      	movs	r5, #0
 8029200:	4628      	mov	r0, r5
 8029202:	bd38      	pop	{r3, r4, r5, pc}
 8029204:	b118      	cbz	r0, 802920e <_fflush_r+0x1a>
 8029206:	6983      	ldr	r3, [r0, #24]
 8029208:	b90b      	cbnz	r3, 802920e <_fflush_r+0x1a>
 802920a:	f000 f887 	bl	802931c <__sinit>
 802920e:	4b14      	ldr	r3, [pc, #80]	; (8029260 <_fflush_r+0x6c>)
 8029210:	429c      	cmp	r4, r3
 8029212:	d11b      	bne.n	802924c <_fflush_r+0x58>
 8029214:	686c      	ldr	r4, [r5, #4]
 8029216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802921a:	2b00      	cmp	r3, #0
 802921c:	d0ef      	beq.n	80291fe <_fflush_r+0xa>
 802921e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029220:	07d0      	lsls	r0, r2, #31
 8029222:	d404      	bmi.n	802922e <_fflush_r+0x3a>
 8029224:	0599      	lsls	r1, r3, #22
 8029226:	d402      	bmi.n	802922e <_fflush_r+0x3a>
 8029228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802922a:	f000 f915 	bl	8029458 <__retarget_lock_acquire_recursive>
 802922e:	4628      	mov	r0, r5
 8029230:	4621      	mov	r1, r4
 8029232:	f7ff ff59 	bl	80290e8 <__sflush_r>
 8029236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029238:	07da      	lsls	r2, r3, #31
 802923a:	4605      	mov	r5, r0
 802923c:	d4e0      	bmi.n	8029200 <_fflush_r+0xc>
 802923e:	89a3      	ldrh	r3, [r4, #12]
 8029240:	059b      	lsls	r3, r3, #22
 8029242:	d4dd      	bmi.n	8029200 <_fflush_r+0xc>
 8029244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029246:	f000 f909 	bl	802945c <__retarget_lock_release_recursive>
 802924a:	e7d9      	b.n	8029200 <_fflush_r+0xc>
 802924c:	4b05      	ldr	r3, [pc, #20]	; (8029264 <_fflush_r+0x70>)
 802924e:	429c      	cmp	r4, r3
 8029250:	d101      	bne.n	8029256 <_fflush_r+0x62>
 8029252:	68ac      	ldr	r4, [r5, #8]
 8029254:	e7df      	b.n	8029216 <_fflush_r+0x22>
 8029256:	4b04      	ldr	r3, [pc, #16]	; (8029268 <_fflush_r+0x74>)
 8029258:	429c      	cmp	r4, r3
 802925a:	bf08      	it	eq
 802925c:	68ec      	ldreq	r4, [r5, #12]
 802925e:	e7da      	b.n	8029216 <_fflush_r+0x22>
 8029260:	0802e1d4 	.word	0x0802e1d4
 8029264:	0802e1f4 	.word	0x0802e1f4
 8029268:	0802e1b4 	.word	0x0802e1b4

0802926c <std>:
 802926c:	2300      	movs	r3, #0
 802926e:	b510      	push	{r4, lr}
 8029270:	4604      	mov	r4, r0
 8029272:	e9c0 3300 	strd	r3, r3, [r0]
 8029276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802927a:	6083      	str	r3, [r0, #8]
 802927c:	8181      	strh	r1, [r0, #12]
 802927e:	6643      	str	r3, [r0, #100]	; 0x64
 8029280:	81c2      	strh	r2, [r0, #14]
 8029282:	6183      	str	r3, [r0, #24]
 8029284:	4619      	mov	r1, r3
 8029286:	2208      	movs	r2, #8
 8029288:	305c      	adds	r0, #92	; 0x5c
 802928a:	f7ff fa17 	bl	80286bc <memset>
 802928e:	4b05      	ldr	r3, [pc, #20]	; (80292a4 <std+0x38>)
 8029290:	6263      	str	r3, [r4, #36]	; 0x24
 8029292:	4b05      	ldr	r3, [pc, #20]	; (80292a8 <std+0x3c>)
 8029294:	62a3      	str	r3, [r4, #40]	; 0x28
 8029296:	4b05      	ldr	r3, [pc, #20]	; (80292ac <std+0x40>)
 8029298:	62e3      	str	r3, [r4, #44]	; 0x2c
 802929a:	4b05      	ldr	r3, [pc, #20]	; (80292b0 <std+0x44>)
 802929c:	6224      	str	r4, [r4, #32]
 802929e:	6323      	str	r3, [r4, #48]	; 0x30
 80292a0:	bd10      	pop	{r4, pc}
 80292a2:	bf00      	nop
 80292a4:	08029541 	.word	0x08029541
 80292a8:	08029563 	.word	0x08029563
 80292ac:	0802959b 	.word	0x0802959b
 80292b0:	080295bf 	.word	0x080295bf

080292b4 <_cleanup_r>:
 80292b4:	4901      	ldr	r1, [pc, #4]	; (80292bc <_cleanup_r+0x8>)
 80292b6:	f000 b8af 	b.w	8029418 <_fwalk_reent>
 80292ba:	bf00      	nop
 80292bc:	080291f5 	.word	0x080291f5

080292c0 <__sfmoreglue>:
 80292c0:	b570      	push	{r4, r5, r6, lr}
 80292c2:	1e4a      	subs	r2, r1, #1
 80292c4:	2568      	movs	r5, #104	; 0x68
 80292c6:	4355      	muls	r5, r2
 80292c8:	460e      	mov	r6, r1
 80292ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80292ce:	f7ff fa4d 	bl	802876c <_malloc_r>
 80292d2:	4604      	mov	r4, r0
 80292d4:	b140      	cbz	r0, 80292e8 <__sfmoreglue+0x28>
 80292d6:	2100      	movs	r1, #0
 80292d8:	e9c0 1600 	strd	r1, r6, [r0]
 80292dc:	300c      	adds	r0, #12
 80292de:	60a0      	str	r0, [r4, #8]
 80292e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80292e4:	f7ff f9ea 	bl	80286bc <memset>
 80292e8:	4620      	mov	r0, r4
 80292ea:	bd70      	pop	{r4, r5, r6, pc}

080292ec <__sfp_lock_acquire>:
 80292ec:	4801      	ldr	r0, [pc, #4]	; (80292f4 <__sfp_lock_acquire+0x8>)
 80292ee:	f000 b8b3 	b.w	8029458 <__retarget_lock_acquire_recursive>
 80292f2:	bf00      	nop
 80292f4:	2000cdb8 	.word	0x2000cdb8

080292f8 <__sfp_lock_release>:
 80292f8:	4801      	ldr	r0, [pc, #4]	; (8029300 <__sfp_lock_release+0x8>)
 80292fa:	f000 b8af 	b.w	802945c <__retarget_lock_release_recursive>
 80292fe:	bf00      	nop
 8029300:	2000cdb8 	.word	0x2000cdb8

08029304 <__sinit_lock_acquire>:
 8029304:	4801      	ldr	r0, [pc, #4]	; (802930c <__sinit_lock_acquire+0x8>)
 8029306:	f000 b8a7 	b.w	8029458 <__retarget_lock_acquire_recursive>
 802930a:	bf00      	nop
 802930c:	2000cdb3 	.word	0x2000cdb3

08029310 <__sinit_lock_release>:
 8029310:	4801      	ldr	r0, [pc, #4]	; (8029318 <__sinit_lock_release+0x8>)
 8029312:	f000 b8a3 	b.w	802945c <__retarget_lock_release_recursive>
 8029316:	bf00      	nop
 8029318:	2000cdb3 	.word	0x2000cdb3

0802931c <__sinit>:
 802931c:	b510      	push	{r4, lr}
 802931e:	4604      	mov	r4, r0
 8029320:	f7ff fff0 	bl	8029304 <__sinit_lock_acquire>
 8029324:	69a3      	ldr	r3, [r4, #24]
 8029326:	b11b      	cbz	r3, 8029330 <__sinit+0x14>
 8029328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802932c:	f7ff bff0 	b.w	8029310 <__sinit_lock_release>
 8029330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029334:	6523      	str	r3, [r4, #80]	; 0x50
 8029336:	4b13      	ldr	r3, [pc, #76]	; (8029384 <__sinit+0x68>)
 8029338:	4a13      	ldr	r2, [pc, #76]	; (8029388 <__sinit+0x6c>)
 802933a:	681b      	ldr	r3, [r3, #0]
 802933c:	62a2      	str	r2, [r4, #40]	; 0x28
 802933e:	42a3      	cmp	r3, r4
 8029340:	bf04      	itt	eq
 8029342:	2301      	moveq	r3, #1
 8029344:	61a3      	streq	r3, [r4, #24]
 8029346:	4620      	mov	r0, r4
 8029348:	f000 f820 	bl	802938c <__sfp>
 802934c:	6060      	str	r0, [r4, #4]
 802934e:	4620      	mov	r0, r4
 8029350:	f000 f81c 	bl	802938c <__sfp>
 8029354:	60a0      	str	r0, [r4, #8]
 8029356:	4620      	mov	r0, r4
 8029358:	f000 f818 	bl	802938c <__sfp>
 802935c:	2200      	movs	r2, #0
 802935e:	60e0      	str	r0, [r4, #12]
 8029360:	2104      	movs	r1, #4
 8029362:	6860      	ldr	r0, [r4, #4]
 8029364:	f7ff ff82 	bl	802926c <std>
 8029368:	68a0      	ldr	r0, [r4, #8]
 802936a:	2201      	movs	r2, #1
 802936c:	2109      	movs	r1, #9
 802936e:	f7ff ff7d 	bl	802926c <std>
 8029372:	68e0      	ldr	r0, [r4, #12]
 8029374:	2202      	movs	r2, #2
 8029376:	2112      	movs	r1, #18
 8029378:	f7ff ff78 	bl	802926c <std>
 802937c:	2301      	movs	r3, #1
 802937e:	61a3      	str	r3, [r4, #24]
 8029380:	e7d2      	b.n	8029328 <__sinit+0xc>
 8029382:	bf00      	nop
 8029384:	0802e178 	.word	0x0802e178
 8029388:	080292b5 	.word	0x080292b5

0802938c <__sfp>:
 802938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802938e:	4607      	mov	r7, r0
 8029390:	f7ff ffac 	bl	80292ec <__sfp_lock_acquire>
 8029394:	4b1e      	ldr	r3, [pc, #120]	; (8029410 <__sfp+0x84>)
 8029396:	681e      	ldr	r6, [r3, #0]
 8029398:	69b3      	ldr	r3, [r6, #24]
 802939a:	b913      	cbnz	r3, 80293a2 <__sfp+0x16>
 802939c:	4630      	mov	r0, r6
 802939e:	f7ff ffbd 	bl	802931c <__sinit>
 80293a2:	3648      	adds	r6, #72	; 0x48
 80293a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80293a8:	3b01      	subs	r3, #1
 80293aa:	d503      	bpl.n	80293b4 <__sfp+0x28>
 80293ac:	6833      	ldr	r3, [r6, #0]
 80293ae:	b30b      	cbz	r3, 80293f4 <__sfp+0x68>
 80293b0:	6836      	ldr	r6, [r6, #0]
 80293b2:	e7f7      	b.n	80293a4 <__sfp+0x18>
 80293b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80293b8:	b9d5      	cbnz	r5, 80293f0 <__sfp+0x64>
 80293ba:	4b16      	ldr	r3, [pc, #88]	; (8029414 <__sfp+0x88>)
 80293bc:	60e3      	str	r3, [r4, #12]
 80293be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80293c2:	6665      	str	r5, [r4, #100]	; 0x64
 80293c4:	f000 f847 	bl	8029456 <__retarget_lock_init_recursive>
 80293c8:	f7ff ff96 	bl	80292f8 <__sfp_lock_release>
 80293cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80293d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80293d4:	6025      	str	r5, [r4, #0]
 80293d6:	61a5      	str	r5, [r4, #24]
 80293d8:	2208      	movs	r2, #8
 80293da:	4629      	mov	r1, r5
 80293dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80293e0:	f7ff f96c 	bl	80286bc <memset>
 80293e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80293e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80293ec:	4620      	mov	r0, r4
 80293ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80293f0:	3468      	adds	r4, #104	; 0x68
 80293f2:	e7d9      	b.n	80293a8 <__sfp+0x1c>
 80293f4:	2104      	movs	r1, #4
 80293f6:	4638      	mov	r0, r7
 80293f8:	f7ff ff62 	bl	80292c0 <__sfmoreglue>
 80293fc:	4604      	mov	r4, r0
 80293fe:	6030      	str	r0, [r6, #0]
 8029400:	2800      	cmp	r0, #0
 8029402:	d1d5      	bne.n	80293b0 <__sfp+0x24>
 8029404:	f7ff ff78 	bl	80292f8 <__sfp_lock_release>
 8029408:	230c      	movs	r3, #12
 802940a:	603b      	str	r3, [r7, #0]
 802940c:	e7ee      	b.n	80293ec <__sfp+0x60>
 802940e:	bf00      	nop
 8029410:	0802e178 	.word	0x0802e178
 8029414:	ffff0001 	.word	0xffff0001

08029418 <_fwalk_reent>:
 8029418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802941c:	4606      	mov	r6, r0
 802941e:	4688      	mov	r8, r1
 8029420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029424:	2700      	movs	r7, #0
 8029426:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802942a:	f1b9 0901 	subs.w	r9, r9, #1
 802942e:	d505      	bpl.n	802943c <_fwalk_reent+0x24>
 8029430:	6824      	ldr	r4, [r4, #0]
 8029432:	2c00      	cmp	r4, #0
 8029434:	d1f7      	bne.n	8029426 <_fwalk_reent+0xe>
 8029436:	4638      	mov	r0, r7
 8029438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802943c:	89ab      	ldrh	r3, [r5, #12]
 802943e:	2b01      	cmp	r3, #1
 8029440:	d907      	bls.n	8029452 <_fwalk_reent+0x3a>
 8029442:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029446:	3301      	adds	r3, #1
 8029448:	d003      	beq.n	8029452 <_fwalk_reent+0x3a>
 802944a:	4629      	mov	r1, r5
 802944c:	4630      	mov	r0, r6
 802944e:	47c0      	blx	r8
 8029450:	4307      	orrs	r7, r0
 8029452:	3568      	adds	r5, #104	; 0x68
 8029454:	e7e9      	b.n	802942a <_fwalk_reent+0x12>

08029456 <__retarget_lock_init_recursive>:
 8029456:	4770      	bx	lr

08029458 <__retarget_lock_acquire_recursive>:
 8029458:	4770      	bx	lr

0802945a <__retarget_lock_release>:
 802945a:	4770      	bx	lr

0802945c <__retarget_lock_release_recursive>:
 802945c:	4770      	bx	lr

0802945e <__swhatbuf_r>:
 802945e:	b570      	push	{r4, r5, r6, lr}
 8029460:	460e      	mov	r6, r1
 8029462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029466:	2900      	cmp	r1, #0
 8029468:	b096      	sub	sp, #88	; 0x58
 802946a:	4614      	mov	r4, r2
 802946c:	461d      	mov	r5, r3
 802946e:	da07      	bge.n	8029480 <__swhatbuf_r+0x22>
 8029470:	2300      	movs	r3, #0
 8029472:	602b      	str	r3, [r5, #0]
 8029474:	89b3      	ldrh	r3, [r6, #12]
 8029476:	061a      	lsls	r2, r3, #24
 8029478:	d410      	bmi.n	802949c <__swhatbuf_r+0x3e>
 802947a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802947e:	e00e      	b.n	802949e <__swhatbuf_r+0x40>
 8029480:	466a      	mov	r2, sp
 8029482:	f000 f8c3 	bl	802960c <_fstat_r>
 8029486:	2800      	cmp	r0, #0
 8029488:	dbf2      	blt.n	8029470 <__swhatbuf_r+0x12>
 802948a:	9a01      	ldr	r2, [sp, #4]
 802948c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8029490:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8029494:	425a      	negs	r2, r3
 8029496:	415a      	adcs	r2, r3
 8029498:	602a      	str	r2, [r5, #0]
 802949a:	e7ee      	b.n	802947a <__swhatbuf_r+0x1c>
 802949c:	2340      	movs	r3, #64	; 0x40
 802949e:	2000      	movs	r0, #0
 80294a0:	6023      	str	r3, [r4, #0]
 80294a2:	b016      	add	sp, #88	; 0x58
 80294a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080294a8 <__smakebuf_r>:
 80294a8:	898b      	ldrh	r3, [r1, #12]
 80294aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80294ac:	079d      	lsls	r5, r3, #30
 80294ae:	4606      	mov	r6, r0
 80294b0:	460c      	mov	r4, r1
 80294b2:	d507      	bpl.n	80294c4 <__smakebuf_r+0x1c>
 80294b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80294b8:	6023      	str	r3, [r4, #0]
 80294ba:	6123      	str	r3, [r4, #16]
 80294bc:	2301      	movs	r3, #1
 80294be:	6163      	str	r3, [r4, #20]
 80294c0:	b002      	add	sp, #8
 80294c2:	bd70      	pop	{r4, r5, r6, pc}
 80294c4:	ab01      	add	r3, sp, #4
 80294c6:	466a      	mov	r2, sp
 80294c8:	f7ff ffc9 	bl	802945e <__swhatbuf_r>
 80294cc:	9900      	ldr	r1, [sp, #0]
 80294ce:	4605      	mov	r5, r0
 80294d0:	4630      	mov	r0, r6
 80294d2:	f7ff f94b 	bl	802876c <_malloc_r>
 80294d6:	b948      	cbnz	r0, 80294ec <__smakebuf_r+0x44>
 80294d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80294dc:	059a      	lsls	r2, r3, #22
 80294de:	d4ef      	bmi.n	80294c0 <__smakebuf_r+0x18>
 80294e0:	f023 0303 	bic.w	r3, r3, #3
 80294e4:	f043 0302 	orr.w	r3, r3, #2
 80294e8:	81a3      	strh	r3, [r4, #12]
 80294ea:	e7e3      	b.n	80294b4 <__smakebuf_r+0xc>
 80294ec:	4b0d      	ldr	r3, [pc, #52]	; (8029524 <__smakebuf_r+0x7c>)
 80294ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80294f0:	89a3      	ldrh	r3, [r4, #12]
 80294f2:	6020      	str	r0, [r4, #0]
 80294f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80294f8:	81a3      	strh	r3, [r4, #12]
 80294fa:	9b00      	ldr	r3, [sp, #0]
 80294fc:	6163      	str	r3, [r4, #20]
 80294fe:	9b01      	ldr	r3, [sp, #4]
 8029500:	6120      	str	r0, [r4, #16]
 8029502:	b15b      	cbz	r3, 802951c <__smakebuf_r+0x74>
 8029504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029508:	4630      	mov	r0, r6
 802950a:	f000 f891 	bl	8029630 <_isatty_r>
 802950e:	b128      	cbz	r0, 802951c <__smakebuf_r+0x74>
 8029510:	89a3      	ldrh	r3, [r4, #12]
 8029512:	f023 0303 	bic.w	r3, r3, #3
 8029516:	f043 0301 	orr.w	r3, r3, #1
 802951a:	81a3      	strh	r3, [r4, #12]
 802951c:	89a0      	ldrh	r0, [r4, #12]
 802951e:	4305      	orrs	r5, r0
 8029520:	81a5      	strh	r5, [r4, #12]
 8029522:	e7cd      	b.n	80294c0 <__smakebuf_r+0x18>
 8029524:	080292b5 	.word	0x080292b5

08029528 <__malloc_lock>:
 8029528:	4801      	ldr	r0, [pc, #4]	; (8029530 <__malloc_lock+0x8>)
 802952a:	f7ff bf95 	b.w	8029458 <__retarget_lock_acquire_recursive>
 802952e:	bf00      	nop
 8029530:	2000cdb4 	.word	0x2000cdb4

08029534 <__malloc_unlock>:
 8029534:	4801      	ldr	r0, [pc, #4]	; (802953c <__malloc_unlock+0x8>)
 8029536:	f7ff bf91 	b.w	802945c <__retarget_lock_release_recursive>
 802953a:	bf00      	nop
 802953c:	2000cdb4 	.word	0x2000cdb4

08029540 <__sread>:
 8029540:	b510      	push	{r4, lr}
 8029542:	460c      	mov	r4, r1
 8029544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029548:	f000 f894 	bl	8029674 <_read_r>
 802954c:	2800      	cmp	r0, #0
 802954e:	bfab      	itete	ge
 8029550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8029552:	89a3      	ldrhlt	r3, [r4, #12]
 8029554:	181b      	addge	r3, r3, r0
 8029556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802955a:	bfac      	ite	ge
 802955c:	6563      	strge	r3, [r4, #84]	; 0x54
 802955e:	81a3      	strhlt	r3, [r4, #12]
 8029560:	bd10      	pop	{r4, pc}

08029562 <__swrite>:
 8029562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029566:	461f      	mov	r7, r3
 8029568:	898b      	ldrh	r3, [r1, #12]
 802956a:	05db      	lsls	r3, r3, #23
 802956c:	4605      	mov	r5, r0
 802956e:	460c      	mov	r4, r1
 8029570:	4616      	mov	r6, r2
 8029572:	d505      	bpl.n	8029580 <__swrite+0x1e>
 8029574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029578:	2302      	movs	r3, #2
 802957a:	2200      	movs	r2, #0
 802957c:	f000 f868 	bl	8029650 <_lseek_r>
 8029580:	89a3      	ldrh	r3, [r4, #12]
 8029582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802958a:	81a3      	strh	r3, [r4, #12]
 802958c:	4632      	mov	r2, r6
 802958e:	463b      	mov	r3, r7
 8029590:	4628      	mov	r0, r5
 8029592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029596:	f000 b817 	b.w	80295c8 <_write_r>

0802959a <__sseek>:
 802959a:	b510      	push	{r4, lr}
 802959c:	460c      	mov	r4, r1
 802959e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80295a2:	f000 f855 	bl	8029650 <_lseek_r>
 80295a6:	1c43      	adds	r3, r0, #1
 80295a8:	89a3      	ldrh	r3, [r4, #12]
 80295aa:	bf15      	itete	ne
 80295ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80295ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80295b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80295b6:	81a3      	strheq	r3, [r4, #12]
 80295b8:	bf18      	it	ne
 80295ba:	81a3      	strhne	r3, [r4, #12]
 80295bc:	bd10      	pop	{r4, pc}

080295be <__sclose>:
 80295be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80295c2:	f000 b813 	b.w	80295ec <_close_r>
	...

080295c8 <_write_r>:
 80295c8:	b538      	push	{r3, r4, r5, lr}
 80295ca:	4d07      	ldr	r5, [pc, #28]	; (80295e8 <_write_r+0x20>)
 80295cc:	4604      	mov	r4, r0
 80295ce:	4608      	mov	r0, r1
 80295d0:	4611      	mov	r1, r2
 80295d2:	2200      	movs	r2, #0
 80295d4:	602a      	str	r2, [r5, #0]
 80295d6:	461a      	mov	r2, r3
 80295d8:	f7da f895 	bl	8003706 <_write>
 80295dc:	1c43      	adds	r3, r0, #1
 80295de:	d102      	bne.n	80295e6 <_write_r+0x1e>
 80295e0:	682b      	ldr	r3, [r5, #0]
 80295e2:	b103      	cbz	r3, 80295e6 <_write_r+0x1e>
 80295e4:	6023      	str	r3, [r4, #0]
 80295e6:	bd38      	pop	{r3, r4, r5, pc}
 80295e8:	2000cdbc 	.word	0x2000cdbc

080295ec <_close_r>:
 80295ec:	b538      	push	{r3, r4, r5, lr}
 80295ee:	4d06      	ldr	r5, [pc, #24]	; (8029608 <_close_r+0x1c>)
 80295f0:	2300      	movs	r3, #0
 80295f2:	4604      	mov	r4, r0
 80295f4:	4608      	mov	r0, r1
 80295f6:	602b      	str	r3, [r5, #0]
 80295f8:	f7da f8a1 	bl	800373e <_close>
 80295fc:	1c43      	adds	r3, r0, #1
 80295fe:	d102      	bne.n	8029606 <_close_r+0x1a>
 8029600:	682b      	ldr	r3, [r5, #0]
 8029602:	b103      	cbz	r3, 8029606 <_close_r+0x1a>
 8029604:	6023      	str	r3, [r4, #0]
 8029606:	bd38      	pop	{r3, r4, r5, pc}
 8029608:	2000cdbc 	.word	0x2000cdbc

0802960c <_fstat_r>:
 802960c:	b538      	push	{r3, r4, r5, lr}
 802960e:	4d07      	ldr	r5, [pc, #28]	; (802962c <_fstat_r+0x20>)
 8029610:	2300      	movs	r3, #0
 8029612:	4604      	mov	r4, r0
 8029614:	4608      	mov	r0, r1
 8029616:	4611      	mov	r1, r2
 8029618:	602b      	str	r3, [r5, #0]
 802961a:	f7da f89c 	bl	8003756 <_fstat>
 802961e:	1c43      	adds	r3, r0, #1
 8029620:	d102      	bne.n	8029628 <_fstat_r+0x1c>
 8029622:	682b      	ldr	r3, [r5, #0]
 8029624:	b103      	cbz	r3, 8029628 <_fstat_r+0x1c>
 8029626:	6023      	str	r3, [r4, #0]
 8029628:	bd38      	pop	{r3, r4, r5, pc}
 802962a:	bf00      	nop
 802962c:	2000cdbc 	.word	0x2000cdbc

08029630 <_isatty_r>:
 8029630:	b538      	push	{r3, r4, r5, lr}
 8029632:	4d06      	ldr	r5, [pc, #24]	; (802964c <_isatty_r+0x1c>)
 8029634:	2300      	movs	r3, #0
 8029636:	4604      	mov	r4, r0
 8029638:	4608      	mov	r0, r1
 802963a:	602b      	str	r3, [r5, #0]
 802963c:	f7da f89b 	bl	8003776 <_isatty>
 8029640:	1c43      	adds	r3, r0, #1
 8029642:	d102      	bne.n	802964a <_isatty_r+0x1a>
 8029644:	682b      	ldr	r3, [r5, #0]
 8029646:	b103      	cbz	r3, 802964a <_isatty_r+0x1a>
 8029648:	6023      	str	r3, [r4, #0]
 802964a:	bd38      	pop	{r3, r4, r5, pc}
 802964c:	2000cdbc 	.word	0x2000cdbc

08029650 <_lseek_r>:
 8029650:	b538      	push	{r3, r4, r5, lr}
 8029652:	4d07      	ldr	r5, [pc, #28]	; (8029670 <_lseek_r+0x20>)
 8029654:	4604      	mov	r4, r0
 8029656:	4608      	mov	r0, r1
 8029658:	4611      	mov	r1, r2
 802965a:	2200      	movs	r2, #0
 802965c:	602a      	str	r2, [r5, #0]
 802965e:	461a      	mov	r2, r3
 8029660:	f7da f894 	bl	800378c <_lseek>
 8029664:	1c43      	adds	r3, r0, #1
 8029666:	d102      	bne.n	802966e <_lseek_r+0x1e>
 8029668:	682b      	ldr	r3, [r5, #0]
 802966a:	b103      	cbz	r3, 802966e <_lseek_r+0x1e>
 802966c:	6023      	str	r3, [r4, #0]
 802966e:	bd38      	pop	{r3, r4, r5, pc}
 8029670:	2000cdbc 	.word	0x2000cdbc

08029674 <_read_r>:
 8029674:	b538      	push	{r3, r4, r5, lr}
 8029676:	4d07      	ldr	r5, [pc, #28]	; (8029694 <_read_r+0x20>)
 8029678:	4604      	mov	r4, r0
 802967a:	4608      	mov	r0, r1
 802967c:	4611      	mov	r1, r2
 802967e:	2200      	movs	r2, #0
 8029680:	602a      	str	r2, [r5, #0]
 8029682:	461a      	mov	r2, r3
 8029684:	f7da f822 	bl	80036cc <_read>
 8029688:	1c43      	adds	r3, r0, #1
 802968a:	d102      	bne.n	8029692 <_read_r+0x1e>
 802968c:	682b      	ldr	r3, [r5, #0]
 802968e:	b103      	cbz	r3, 8029692 <_read_r+0x1e>
 8029690:	6023      	str	r3, [r4, #0]
 8029692:	bd38      	pop	{r3, r4, r5, pc}
 8029694:	2000cdbc 	.word	0x2000cdbc

08029698 <_init>:
 8029698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802969a:	bf00      	nop
 802969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802969e:	bc08      	pop	{r3}
 80296a0:	469e      	mov	lr, r3
 80296a2:	4770      	bx	lr

080296a4 <_fini>:
 80296a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80296a6:	bf00      	nop
 80296a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80296aa:	bc08      	pop	{r3}
 80296ac:	469e      	mov	lr, r3
 80296ae:	4770      	bx	lr
